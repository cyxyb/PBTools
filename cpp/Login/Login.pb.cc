// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Login.proto

#include "Login.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Login_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActiveInfoRet_Login_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Login_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgBindParentInfo_Login_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Login_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgCDKExchange_Login_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Login_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgCommonKV_Login_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Login_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgInviteAwardConfig_Login_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Login_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgInviteUserInfo_Login_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Login_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgItem_Login_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Login_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgMailData_Login_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Login_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgOnlineActiveConfig_Login_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Login_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgQueryRebateRecord_Login_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Login_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgSubagentInformation_Login_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Login_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgTopInfo_Login_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Login_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgTransferRecord_Login_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Login_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgTurnCfg_Login_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Login_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgTurnPlayInfo_Login_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Login_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgTurntableHistoryData_Login_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Login_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgVIPInfo_Login_2eproto;
class MsgPlayerLoginDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgPlayerLogin> _instance;
} _MsgPlayerLogin_default_instance_;
class MsgPlayerLoginRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgPlayerLoginResp> _instance;
} _MsgPlayerLoginResp_default_instance_;
class MsgModifyPasswordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgModifyPassword> _instance;
} _MsgModifyPassword_default_instance_;
class MsgBindPhoneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgBindPhone> _instance;
} _MsgBindPhone_default_instance_;
class MsgCommonKVDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgCommonKV> _instance;
} _MsgCommonKV_default_instance_;
class MsgCheckInInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgCheckInInfo> _instance;
} _MsgCheckInInfo_default_instance_;
class MsgTurntableHistoryDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgTurntableHistoryData> _instance;
} _MsgTurntableHistoryData_default_instance_;
class MsgTurnPlayInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgTurnPlayInfo> _instance;
} _MsgTurnPlayInfo_default_instance_;
class MsgTurnCfgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgTurnCfg> _instance;
} _MsgTurnCfg_default_instance_;
class MsgTurntableDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgTurntableData> _instance;
} _MsgTurntableData_default_instance_;
class MsgTurntableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgTurntable> _instance;
} _MsgTurntable_default_instance_;
class MsgTurntableRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgTurntableResp> _instance;
} _MsgTurntableResp_default_instance_;
class MsgMailsInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgMailsInfo> _instance;
} _MsgMailsInfo_default_instance_;
class MsgMailDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgMailData> _instance;
} _MsgMailData_default_instance_;
class MsgShareDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgShareData> _instance;
} _MsgShareData_default_instance_;
class MsgBindParentDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgBindParentData> _instance;
} _MsgBindParentData_default_instance_;
class MsgInviteAwardInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgInviteAwardInfo> _instance;
} _MsgInviteAwardInfo_default_instance_;
class MsgInviteAwardConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgInviteAwardConfig> _instance;
} _MsgInviteAwardConfig_default_instance_;
class MsgRechargeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgRechargeInfo> _instance;
} _MsgRechargeInfo_default_instance_;
class MsgQueryRebateRecordInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgQueryRebateRecordInfo> _instance;
} _MsgQueryRebateRecordInfo_default_instance_;
class MsgQueryRebateRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgQueryRebateRecord> _instance;
} _MsgQueryRebateRecord_default_instance_;
class MsgForgetPasswordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgForgetPassword> _instance;
} _MsgForgetPassword_default_instance_;
class MsgVIPInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgVIPInfo> _instance;
} _MsgVIPInfo_default_instance_;
class MsgVIPConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgVIPConfig> _instance;
} _MsgVIPConfig_default_instance_;
class MsgUpgradeVIPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgUpgradeVIP> _instance;
} _MsgUpgradeVIP_default_instance_;
class MsgGetAvatarInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgGetAvatarInfo> _instance;
} _MsgGetAvatarInfo_default_instance_;
class MsgPlayerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgPlayerInfo> _instance;
} _MsgPlayerInfo_default_instance_;
class ActiveInfoRetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActiveInfoRet> _instance;
} _ActiveInfoRet_default_instance_;
class MsgActiveInfoSCRetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgActiveInfoSCRet> _instance;
} _MsgActiveInfoSCRet_default_instance_;
class MsgActiveInfoCSPickDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgActiveInfoCSPick> _instance;
} _MsgActiveInfoCSPick_default_instance_;
class MsgActiveInfoSCPickDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgActiveInfoSCPick> _instance;
} _MsgActiveInfoSCPick_default_instance_;
class MsgModifySignatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgModifySignature> _instance;
} _MsgModifySignature_default_instance_;
class MsgTransferOperateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgTransferOperate> _instance;
} _MsgTransferOperate_default_instance_;
class MsgTopInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgTopInfo> _instance;
} _MsgTopInfo_default_instance_;
class MsgGetRankDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgGetRank> _instance;
} _MsgGetRank_default_instance_;
class MsgTopListRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgTopListResp> _instance;
} _MsgTopListResp_default_instance_;
class MsgTransferOperateRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgTransferOperateResp> _instance;
} _MsgTransferOperateResp_default_instance_;
class MsgTransferOperateSyncRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgTransferOperateSyncResp> _instance;
} _MsgTransferOperateSyncResp_default_instance_;
class MsgTransferReceiveRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgTransferReceiveResp> _instance;
} _MsgTransferReceiveResp_default_instance_;
class MsgTransferRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgTransferRecord> _instance;
} _MsgTransferRecord_default_instance_;
class MsgTransferRecordRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgTransferRecordResp> _instance;
} _MsgTransferRecordResp_default_instance_;
class MsgPhoneCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgPhoneCode> _instance;
} _MsgPhoneCode_default_instance_;
class MsgItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgItem> _instance;
} _MsgItem_default_instance_;
class MsgPlayerItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgPlayerItem> _instance;
} _MsgPlayerItem_default_instance_;
class MsgTransferQueryNicknameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgTransferQueryNickname> _instance;
} _MsgTransferQueryNickname_default_instance_;
class MsgSubagentInformationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgSubagentInformation> _instance;
} _MsgSubagentInformation_default_instance_;
class MsgTtotalSubagentInformationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgTtotalSubagentInformation> _instance;
} _MsgTtotalSubagentInformation_default_instance_;
class MsgBindParentInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgBindParentInfo> _instance;
} _MsgBindParentInfo_default_instance_;
class MsgBindInviteCodeRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgBindInviteCodeResp> _instance;
} _MsgBindInviteCodeResp_default_instance_;
class MsgDotRechargeRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgDotRechargeResp> _instance;
} _MsgDotRechargeResp_default_instance_;
class MsgOnlineActiveConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgOnlineActiveConfig> _instance;
} _MsgOnlineActiveConfig_default_instance_;
class MsgOnlineActiveQueryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgOnlineActiveQuery> _instance;
} _MsgOnlineActiveQuery_default_instance_;
class MsgOlineActiveAwardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgOlineActiveAward> _instance;
} _MsgOlineActiveAward_default_instance_;
class MsgCDKExchangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgCDKExchange> _instance;
} _MsgCDKExchange_default_instance_;
class MsgCDKExchangeRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgCDKExchangeResp> _instance;
} _MsgCDKExchangeResp_default_instance_;
class MsgPersonalDetailsRespAddDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgPersonalDetailsRespAdd> _instance;
} _MsgPersonalDetailsRespAdd_default_instance_;
class MsgInviteUserInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgInviteUserInfo> _instance;
} _MsgInviteUserInfo_default_instance_;
class MsgInviteUserRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgInviteUserResp> _instance;
} _MsgInviteUserResp_default_instance_;
static void InitDefaultsscc_info_ActiveInfoRet_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ActiveInfoRet_default_instance_;
    new (ptr) ::ActiveInfoRet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActiveInfoRet_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ActiveInfoRet_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgActiveInfoCSPick_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgActiveInfoCSPick_default_instance_;
    new (ptr) ::MsgActiveInfoCSPick();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgActiveInfoCSPick_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgActiveInfoCSPick_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgActiveInfoSCPick_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgActiveInfoSCPick_default_instance_;
    new (ptr) ::MsgActiveInfoSCPick();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgActiveInfoSCPick_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgActiveInfoSCPick_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgActiveInfoSCRet_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgActiveInfoSCRet_default_instance_;
    new (ptr) ::MsgActiveInfoSCRet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgActiveInfoSCRet_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgActiveInfoSCRet_Login_2eproto}, {
      &scc_info_ActiveInfoRet_Login_2eproto.base,}};

static void InitDefaultsscc_info_MsgBindInviteCodeResp_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgBindInviteCodeResp_default_instance_;
    new (ptr) ::MsgBindInviteCodeResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgBindInviteCodeResp_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgBindInviteCodeResp_Login_2eproto}, {
      &scc_info_MsgBindParentInfo_Login_2eproto.base,}};

static void InitDefaultsscc_info_MsgBindParentData_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgBindParentData_default_instance_;
    new (ptr) ::MsgBindParentData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgBindParentData_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgBindParentData_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgBindParentInfo_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgBindParentInfo_default_instance_;
    new (ptr) ::MsgBindParentInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgBindParentInfo_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgBindParentInfo_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgBindPhone_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgBindPhone_default_instance_;
    new (ptr) ::MsgBindPhone();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgBindPhone_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgBindPhone_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgCDKExchange_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgCDKExchange_default_instance_;
    new (ptr) ::MsgCDKExchange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgCDKExchange_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgCDKExchange_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgCDKExchangeResp_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgCDKExchangeResp_default_instance_;
    new (ptr) ::MsgCDKExchangeResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgCDKExchangeResp_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgCDKExchangeResp_Login_2eproto}, {
      &scc_info_MsgCDKExchange_Login_2eproto.base,}};

static void InitDefaultsscc_info_MsgCheckInInfo_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgCheckInInfo_default_instance_;
    new (ptr) ::MsgCheckInInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgCheckInInfo_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgCheckInInfo_Login_2eproto}, {
      &scc_info_MsgCommonKV_Login_2eproto.base,}};

static void InitDefaultsscc_info_MsgCommonKV_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgCommonKV_default_instance_;
    new (ptr) ::MsgCommonKV();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgCommonKV_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgCommonKV_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgDotRechargeResp_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgDotRechargeResp_default_instance_;
    new (ptr) ::MsgDotRechargeResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgDotRechargeResp_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgDotRechargeResp_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgForgetPassword_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgForgetPassword_default_instance_;
    new (ptr) ::MsgForgetPassword();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgForgetPassword_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgForgetPassword_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgGetAvatarInfo_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgGetAvatarInfo_default_instance_;
    new (ptr) ::MsgGetAvatarInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgGetAvatarInfo_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgGetAvatarInfo_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgGetRank_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgGetRank_default_instance_;
    new (ptr) ::MsgGetRank();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgGetRank_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgGetRank_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgInviteAwardConfig_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgInviteAwardConfig_default_instance_;
    new (ptr) ::MsgInviteAwardConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgInviteAwardConfig_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgInviteAwardConfig_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgInviteAwardInfo_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgInviteAwardInfo_default_instance_;
    new (ptr) ::MsgInviteAwardInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgInviteAwardInfo_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgInviteAwardInfo_Login_2eproto}, {
      &scc_info_MsgInviteAwardConfig_Login_2eproto.base,}};

static void InitDefaultsscc_info_MsgInviteUserInfo_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgInviteUserInfo_default_instance_;
    new (ptr) ::MsgInviteUserInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgInviteUserInfo_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgInviteUserInfo_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgInviteUserResp_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgInviteUserResp_default_instance_;
    new (ptr) ::MsgInviteUserResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgInviteUserResp_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgInviteUserResp_Login_2eproto}, {
      &scc_info_MsgInviteUserInfo_Login_2eproto.base,}};

static void InitDefaultsscc_info_MsgItem_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgItem_default_instance_;
    new (ptr) ::MsgItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgItem_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgItem_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgMailData_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgMailData_default_instance_;
    new (ptr) ::MsgMailData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgMailData_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgMailData_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgMailsInfo_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgMailsInfo_default_instance_;
    new (ptr) ::MsgMailsInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgMailsInfo_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgMailsInfo_Login_2eproto}, {
      &scc_info_MsgMailData_Login_2eproto.base,}};

static void InitDefaultsscc_info_MsgModifyPassword_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgModifyPassword_default_instance_;
    new (ptr) ::MsgModifyPassword();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgModifyPassword_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgModifyPassword_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgModifySignature_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgModifySignature_default_instance_;
    new (ptr) ::MsgModifySignature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgModifySignature_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgModifySignature_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgOlineActiveAward_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgOlineActiveAward_default_instance_;
    new (ptr) ::MsgOlineActiveAward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgOlineActiveAward_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgOlineActiveAward_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgOnlineActiveConfig_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgOnlineActiveConfig_default_instance_;
    new (ptr) ::MsgOnlineActiveConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgOnlineActiveConfig_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgOnlineActiveConfig_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgOnlineActiveQuery_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgOnlineActiveQuery_default_instance_;
    new (ptr) ::MsgOnlineActiveQuery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgOnlineActiveQuery_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgOnlineActiveQuery_Login_2eproto}, {
      &scc_info_MsgOnlineActiveConfig_Login_2eproto.base,}};

static void InitDefaultsscc_info_MsgPersonalDetailsRespAdd_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgPersonalDetailsRespAdd_default_instance_;
    new (ptr) ::MsgPersonalDetailsRespAdd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgPersonalDetailsRespAdd_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgPersonalDetailsRespAdd_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgPhoneCode_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgPhoneCode_default_instance_;
    new (ptr) ::MsgPhoneCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgPhoneCode_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgPhoneCode_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgPlayerInfo_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgPlayerInfo_default_instance_;
    new (ptr) ::MsgPlayerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgPlayerInfo_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgPlayerInfo_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgPlayerItem_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgPlayerItem_default_instance_;
    new (ptr) ::MsgPlayerItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgPlayerItem_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgPlayerItem_Login_2eproto}, {
      &scc_info_MsgItem_Login_2eproto.base,}};

static void InitDefaultsscc_info_MsgPlayerLogin_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgPlayerLogin_default_instance_;
    new (ptr) ::MsgPlayerLogin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgPlayerLogin_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgPlayerLogin_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgPlayerLoginResp_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgPlayerLoginResp_default_instance_;
    new (ptr) ::MsgPlayerLoginResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgPlayerLoginResp_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgPlayerLoginResp_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgQueryRebateRecord_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgQueryRebateRecord_default_instance_;
    new (ptr) ::MsgQueryRebateRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgQueryRebateRecord_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgQueryRebateRecord_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgQueryRebateRecordInfo_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgQueryRebateRecordInfo_default_instance_;
    new (ptr) ::MsgQueryRebateRecordInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgQueryRebateRecordInfo_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgQueryRebateRecordInfo_Login_2eproto}, {
      &scc_info_MsgQueryRebateRecord_Login_2eproto.base,}};

static void InitDefaultsscc_info_MsgRechargeInfo_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgRechargeInfo_default_instance_;
    new (ptr) ::MsgRechargeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgRechargeInfo_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgRechargeInfo_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgShareData_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgShareData_default_instance_;
    new (ptr) ::MsgShareData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgShareData_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgShareData_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgSubagentInformation_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgSubagentInformation_default_instance_;
    new (ptr) ::MsgSubagentInformation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgSubagentInformation_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgSubagentInformation_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgTopInfo_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgTopInfo_default_instance_;
    new (ptr) ::MsgTopInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgTopInfo_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgTopInfo_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgTopListResp_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgTopListResp_default_instance_;
    new (ptr) ::MsgTopListResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgTopListResp_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgTopListResp_Login_2eproto}, {
      &scc_info_MsgTopInfo_Login_2eproto.base,}};

static void InitDefaultsscc_info_MsgTransferOperate_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgTransferOperate_default_instance_;
    new (ptr) ::MsgTransferOperate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgTransferOperate_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgTransferOperate_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgTransferOperateResp_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgTransferOperateResp_default_instance_;
    new (ptr) ::MsgTransferOperateResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgTransferOperateResp_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgTransferOperateResp_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgTransferOperateSyncResp_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgTransferOperateSyncResp_default_instance_;
    new (ptr) ::MsgTransferOperateSyncResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgTransferOperateSyncResp_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgTransferOperateSyncResp_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgTransferQueryNickname_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgTransferQueryNickname_default_instance_;
    new (ptr) ::MsgTransferQueryNickname();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgTransferQueryNickname_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgTransferQueryNickname_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgTransferReceiveResp_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgTransferReceiveResp_default_instance_;
    new (ptr) ::MsgTransferReceiveResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgTransferReceiveResp_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgTransferReceiveResp_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgTransferRecord_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgTransferRecord_default_instance_;
    new (ptr) ::MsgTransferRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgTransferRecord_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgTransferRecord_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgTransferRecordResp_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgTransferRecordResp_default_instance_;
    new (ptr) ::MsgTransferRecordResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgTransferRecordResp_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgTransferRecordResp_Login_2eproto}, {
      &scc_info_MsgTransferRecord_Login_2eproto.base,}};

static void InitDefaultsscc_info_MsgTtotalSubagentInformation_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgTtotalSubagentInformation_default_instance_;
    new (ptr) ::MsgTtotalSubagentInformation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgTtotalSubagentInformation_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgTtotalSubagentInformation_Login_2eproto}, {
      &scc_info_MsgSubagentInformation_Login_2eproto.base,}};

static void InitDefaultsscc_info_MsgTurnCfg_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgTurnCfg_default_instance_;
    new (ptr) ::MsgTurnCfg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgTurnCfg_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgTurnCfg_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgTurnPlayInfo_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgTurnPlayInfo_default_instance_;
    new (ptr) ::MsgTurnPlayInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgTurnPlayInfo_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgTurnPlayInfo_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgTurntable_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgTurntable_default_instance_;
    new (ptr) ::MsgTurntable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgTurntable_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgTurntable_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgTurntableData_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgTurntableData_default_instance_;
    new (ptr) ::MsgTurntableData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MsgTurntableData_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_MsgTurntableData_Login_2eproto}, {
      &scc_info_MsgTurnPlayInfo_Login_2eproto.base,
      &scc_info_MsgTurnCfg_Login_2eproto.base,
      &scc_info_MsgTurntableHistoryData_Login_2eproto.base,}};

static void InitDefaultsscc_info_MsgTurntableHistoryData_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgTurntableHistoryData_default_instance_;
    new (ptr) ::MsgTurntableHistoryData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgTurntableHistoryData_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgTurntableHistoryData_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgTurntableResp_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgTurntableResp_default_instance_;
    new (ptr) ::MsgTurntableResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgTurntableResp_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgTurntableResp_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgUpgradeVIP_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgUpgradeVIP_default_instance_;
    new (ptr) ::MsgUpgradeVIP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgUpgradeVIP_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgUpgradeVIP_Login_2eproto}, {}};

static void InitDefaultsscc_info_MsgVIPConfig_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgVIPConfig_default_instance_;
    new (ptr) ::MsgVIPConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgVIPConfig_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgVIPConfig_Login_2eproto}, {
      &scc_info_MsgVIPInfo_Login_2eproto.base,}};

static void InitDefaultsscc_info_MsgVIPInfo_Login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgVIPInfo_default_instance_;
    new (ptr) ::MsgVIPInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgVIPInfo_Login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgVIPInfo_Login_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Login_2eproto[58];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Login_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Login_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Login_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLogin, account_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLogin, password_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLogin, platform_id_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLogin, channel_id_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLogin, client_type_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLogin, login_type_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLogin, machine_num_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLogin, user_ip_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLogin, is_drain_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLogin, avatar_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLogin, nickname_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLogin, phone_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLogin, code_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLogin, invite_code_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLogin, agent_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLoginResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLoginResp, res_code_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLoginResp, user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLoginResp, beautiful_id_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLoginResp, account_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLoginResp, nickname_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLoginResp, avatar_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLoginResp, first_recharge_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLoginResp, user_type_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLoginResp, is_drain_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLoginResp, coin_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLoginResp, phone_num_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLoginResp, vip_level_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLoginResp, avatar_frame_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLoginResp, invite_code_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLoginResp, signature_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLoginResp, agent_level_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLoginResp, password_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLoginResp, whatsup_msg_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLoginResp, telegram_msg_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLoginResp, facebook_msg_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLoginResp, frist_login_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerLoginResp, agent_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgModifyPassword, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgModifyPassword, old_password_),
  PROTOBUF_FIELD_OFFSET(::MsgModifyPassword, new_password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgBindPhone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgBindPhone, code_),
  PROTOBUF_FIELD_OFFSET(::MsgBindPhone, phone_num_),
  PROTOBUF_FIELD_OFFSET(::MsgBindPhone, password_),
  PROTOBUF_FIELD_OFFSET(::MsgBindPhone, invite_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgCommonKV, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgCommonKV, k_),
  PROTOBUF_FIELD_OFFSET(::MsgCommonKV, v_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgCheckInInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgCheckInInfo, check_days_),
  PROTOBUF_FIELD_OFFSET(::MsgCheckInInfo, is_open_),
  PROTOBUF_FIELD_OFFSET(::MsgCheckInInfo, can_pick_),
  PROTOBUF_FIELD_OFFSET(::MsgCheckInInfo, checkincfg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgTurntableHistoryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgTurntableHistoryData, user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgTurntableHistoryData, nick_name_),
  PROTOBUF_FIELD_OFFSET(::MsgTurntableHistoryData, score_),
  PROTOBUF_FIELD_OFFSET(::MsgTurntableHistoryData, award_),
  PROTOBUF_FIELD_OFFSET(::MsgTurntableHistoryData, type_),
  PROTOBUF_FIELD_OFFSET(::MsgTurntableHistoryData, award_type_),
  PROTOBUF_FIELD_OFFSET(::MsgTurntableHistoryData, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgTurnPlayInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgTurnPlayInfo, play_num_),
  PROTOBUF_FIELD_OFFSET(::MsgTurnPlayInfo, limit_turn_),
  PROTOBUF_FIELD_OFFSET(::MsgTurnPlayInfo, need_score_),
  PROTOBUF_FIELD_OFFSET(::MsgTurnPlayInfo, turn_pro_),
  PROTOBUF_FIELD_OFFSET(::MsgTurnPlayInfo, turn_max_pro_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgTurnCfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgTurnCfg, index_),
  PROTOBUF_FIELD_OFFSET(::MsgTurnCfg, arwad_),
  PROTOBUF_FIELD_OFFSET(::MsgTurnCfg, arwad_type_),
  PROTOBUF_FIELD_OFFSET(::MsgTurnCfg, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgTurntableData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgTurntableData, score_),
  PROTOBUF_FIELD_OFFSET(::MsgTurntableData, gold_to_score_),
  PROTOBUF_FIELD_OFFSET(::MsgTurntableData, silver_info_),
  PROTOBUF_FIELD_OFFSET(::MsgTurntableData, gold_info_),
  PROTOBUF_FIELD_OFFSET(::MsgTurntableData, silver_cfg_),
  PROTOBUF_FIELD_OFFSET(::MsgTurntableData, gold_cfg_),
  PROTOBUF_FIELD_OFFSET(::MsgTurntableData, this_history_),
  PROTOBUF_FIELD_OFFSET(::MsgTurntableData, big_history_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgTurntable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgTurntable, user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgTurntable, turn_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgTurntableResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgTurntableResp, score_),
  PROTOBUF_FIELD_OFFSET(::MsgTurntableResp, award_type_),
  PROTOBUF_FIELD_OFFSET(::MsgTurntableResp, new_value_),
  PROTOBUF_FIELD_OFFSET(::MsgTurntableResp, turnindex_),
  PROTOBUF_FIELD_OFFSET(::MsgTurntableResp, get_value_),
  PROTOBUF_FIELD_OFFSET(::MsgTurntableResp, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgMailsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgMailsInfo, mails_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgMailData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgMailData, mail_id_),
  PROTOBUF_FIELD_OFFSET(::MsgMailData, send_user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgMailData, send_time_),
  PROTOBUF_FIELD_OFFSET(::MsgMailData, title_),
  PROTOBUF_FIELD_OFFSET(::MsgMailData, content_),
  PROTOBUF_FIELD_OFFSET(::MsgMailData, gold_),
  PROTOBUF_FIELD_OFFSET(::MsgMailData, is_read_),
  PROTOBUF_FIELD_OFFSET(::MsgMailData, is_claim_),
  PROTOBUF_FIELD_OFFSET(::MsgMailData, to_user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgShareData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgShareData, invite_code_),
  PROTOBUF_FIELD_OFFSET(::MsgShareData, bind_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgBindParentData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgBindParentData, strcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgInviteAwardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgInviteAwardInfo, invitenum_),
  PROTOBUF_FIELD_OFFSET(::MsgInviteAwardInfo, pickindex_),
  PROTOBUF_FIELD_OFFSET(::MsgInviteAwardInfo, awardcfg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgInviteAwardConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgInviteAwardConfig, invitenum_),
  PROTOBUF_FIELD_OFFSET(::MsgInviteAwardConfig, award_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgRechargeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgRechargeInfo, invitenum_),
  PROTOBUF_FIELD_OFFSET(::MsgRechargeInfo, todayaward_),
  PROTOBUF_FIELD_OFFSET(::MsgRechargeInfo, totalaward_),
  PROTOBUF_FIELD_OFFSET(::MsgRechargeInfo, canpickamount_),
  PROTOBUF_FIELD_OFFSET(::MsgRechargeInfo, invitecode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgQueryRebateRecordInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgQueryRebateRecordInfo, queryrebaterecord_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgQueryRebateRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgQueryRebateRecord, rechargeuserid_),
  PROTOBUF_FIELD_OFFSET(::MsgQueryRebateRecord, rechargeamount_),
  PROTOBUF_FIELD_OFFSET(::MsgQueryRebateRecord, rebate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgForgetPassword, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgForgetPassword, client_type_),
  PROTOBUF_FIELD_OFFSET(::MsgForgetPassword, phone_),
  PROTOBUF_FIELD_OFFSET(::MsgForgetPassword, code_),
  PROTOBUF_FIELD_OFFSET(::MsgForgetPassword, new_password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgVIPInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgVIPInfo, vip_level_),
  PROTOBUF_FIELD_OFFSET(::MsgVIPInfo, need_exp_),
  PROTOBUF_FIELD_OFFSET(::MsgVIPInfo, turntable_num_),
  PROTOBUF_FIELD_OFFSET(::MsgVIPInfo, trumpet_discount_),
  PROTOBUF_FIELD_OFFSET(::MsgVIPInfo, check_addition_),
  PROTOBUF_FIELD_OFFSET(::MsgVIPInfo, world_chat_),
  PROTOBUF_FIELD_OFFSET(::MsgVIPInfo, avatar_),
  PROTOBUF_FIELD_OFFSET(::MsgVIPInfo, avatar_frame_),
  PROTOBUF_FIELD_OFFSET(::MsgVIPInfo, award_gold_),
  PROTOBUF_FIELD_OFFSET(::MsgVIPInfo, one_to_one_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgVIPConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgVIPConfig, vip_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgUpgradeVIP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgUpgradeVIP, res_code_),
  PROTOBUF_FIELD_OFFSET(::MsgUpgradeVIP, gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgGetAvatarInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgGetAvatarInfo, avatars_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgPlayerInfo, user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerInfo, beautiful_id_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerInfo, nickname_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerInfo, avatar_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerInfo, coin_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerInfo, phone_num_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerInfo, vip_level_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerInfo, avatar_frame_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerInfo, signature_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerInfo, zmd_game_id_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerInfo, zmd_win_gold_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerInfo, whatsup_msg_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerInfo, telegram_msg_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerInfo, facebook_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ActiveInfoRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ActiveInfoRet, active_id_),
  PROTOBUF_FIELD_OFFSET(::ActiveInfoRet, sub_active_id_),
  PROTOBUF_FIELD_OFFSET(::ActiveInfoRet, param1_),
  PROTOBUF_FIELD_OFFSET(::ActiveInfoRet, param2_),
  PROTOBUF_FIELD_OFFSET(::ActiveInfoRet, param3_),
  PROTOBUF_FIELD_OFFSET(::ActiveInfoRet, progress1_),
  PROTOBUF_FIELD_OFFSET(::ActiveInfoRet, progress2_),
  PROTOBUF_FIELD_OFFSET(::ActiveInfoRet, progress3_),
  PROTOBUF_FIELD_OFFSET(::ActiveInfoRet, reward_),
  PROTOBUF_FIELD_OFFSET(::ActiveInfoRet, reward_type_),
  PROTOBUF_FIELD_OFFSET(::ActiveInfoRet, is_pick_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgActiveInfoSCRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgActiveInfoSCRet, vec_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgActiveInfoCSPick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgActiveInfoCSPick, user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgActiveInfoCSPick, active_id_),
  PROTOBUF_FIELD_OFFSET(::MsgActiveInfoCSPick, sub_active_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgActiveInfoSCPick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgActiveInfoSCPick, active_id_),
  PROTOBUF_FIELD_OFFSET(::MsgActiveInfoSCPick, sub_active_id_),
  PROTOBUF_FIELD_OFFSET(::MsgActiveInfoSCPick, param1_),
  PROTOBUF_FIELD_OFFSET(::MsgActiveInfoSCPick, param2_),
  PROTOBUF_FIELD_OFFSET(::MsgActiveInfoSCPick, param3_),
  PROTOBUF_FIELD_OFFSET(::MsgActiveInfoSCPick, progress1_),
  PROTOBUF_FIELD_OFFSET(::MsgActiveInfoSCPick, progress2_),
  PROTOBUF_FIELD_OFFSET(::MsgActiveInfoSCPick, progress3_),
  PROTOBUF_FIELD_OFFSET(::MsgActiveInfoSCPick, reward_),
  PROTOBUF_FIELD_OFFSET(::MsgActiveInfoSCPick, reward_type_),
  PROTOBUF_FIELD_OFFSET(::MsgActiveInfoSCPick, is_pick_),
  PROTOBUF_FIELD_OFFSET(::MsgActiveInfoSCPick, res_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgModifySignature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgModifySignature, user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgModifySignature, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgTransferOperate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgTransferOperate, recv_user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgTransferOperate, transfer_gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgTopInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgTopInfo, rank_id_),
  PROTOBUF_FIELD_OFFSET(::MsgTopInfo, user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgTopInfo, gold_),
  PROTOBUF_FIELD_OFFSET(::MsgTopInfo, vip_level_),
  PROTOBUF_FIELD_OFFSET(::MsgTopInfo, avatar_frame_),
  PROTOBUF_FIELD_OFFSET(::MsgTopInfo, head_url_),
  PROTOBUF_FIELD_OFFSET(::MsgTopInfo, nick_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgGetRank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgGetRank, rank_type_),
  PROTOBUF_FIELD_OFFSET(::MsgGetRank, user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgGetRank, current_page_),
  PROTOBUF_FIELD_OFFSET(::MsgGetRank, max_row_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgTopListResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgTopListResp, user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgTopListResp, rank_type_),
  PROTOBUF_FIELD_OFFSET(::MsgTopListResp, this_rank_ndex_),
  PROTOBUF_FIELD_OFFSET(::MsgTopListResp, this_gold_),
  PROTOBUF_FIELD_OFFSET(::MsgTopListResp, is_end_),
  PROTOBUF_FIELD_OFFSET(::MsgTopListResp, lists_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgTransferOperateResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgTransferOperateResp, ret_value_),
  PROTOBUF_FIELD_OFFSET(::MsgTransferOperateResp, user_gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgTransferOperateSyncResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgTransferOperateSyncResp, ret_value_),
  PROTOBUF_FIELD_OFFSET(::MsgTransferOperateSyncResp, send_user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgTransferOperateSyncResp, add_gold_),
  PROTOBUF_FIELD_OFFSET(::MsgTransferOperateSyncResp, receive_state_),
  PROTOBUF_FIELD_OFFSET(::MsgTransferOperateSyncResp, transfer_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgTransferReceiveResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgTransferReceiveResp, ret_value_),
  PROTOBUF_FIELD_OFFSET(::MsgTransferReceiveResp, change_gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgTransferRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgTransferRecord, send_user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgTransferRecord, nickname_),
  PROTOBUF_FIELD_OFFSET(::MsgTransferRecord, transfer_gold_),
  PROTOBUF_FIELD_OFFSET(::MsgTransferRecord, timer_),
  PROTOBUF_FIELD_OFFSET(::MsgTransferRecord, recv_user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgTransferRecord, receive_state_),
  PROTOBUF_FIELD_OFFSET(::MsgTransferRecord, transfer_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgTransferRecordResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgTransferRecordResp, records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgPhoneCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgPhoneCode, area_code_),
  PROTOBUF_FIELD_OFFSET(::MsgPhoneCode, phone_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgItem, item_id_),
  PROTOBUF_FIELD_OFFSET(::MsgItem, item_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgPlayerItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgPlayerItem, item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgTransferQueryNickname, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgTransferQueryNickname, ret_value_),
  PROTOBUF_FIELD_OFFSET(::MsgTransferQueryNickname, nickname_),
  PROTOBUF_FIELD_OFFSET(::MsgTransferQueryNickname, tax_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgSubagentInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgSubagentInformation, agent_nickname_),
  PROTOBUF_FIELD_OFFSET(::MsgSubagentInformation, agent_user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgSubagentInformation, agent_type_),
  PROTOBUF_FIELD_OFFSET(::MsgSubagentInformation, total_shift_to_),
  PROTOBUF_FIELD_OFFSET(::MsgSubagentInformation, total_roll_out_),
  PROTOBUF_FIELD_OFFSET(::MsgSubagentInformation, vip_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgTtotalSubagentInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgTtotalSubagentInformation, agent_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgBindParentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgBindParentInfo, user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgBindParentInfo, avatar_),
  PROTOBUF_FIELD_OFFSET(::MsgBindParentInfo, avatar_frame_),
  PROTOBUF_FIELD_OFFSET(::MsgBindParentInfo, nick_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgBindInviteCodeResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgBindInviteCodeResp, res_code_),
  PROTOBUF_FIELD_OFFSET(::MsgBindInviteCodeResp, user_type_),
  PROTOBUF_FIELD_OFFSET(::MsgBindInviteCodeResp, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgDotRechargeResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgDotRechargeResp, is_new_recharge_),
  PROTOBUF_FIELD_OFFSET(::MsgDotRechargeResp, gold_),
  PROTOBUF_FIELD_OFFSET(::MsgDotRechargeResp, recharge_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgOnlineActiveConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgOnlineActiveConfig, item_id_),
  PROTOBUF_FIELD_OFFSET(::MsgOnlineActiveConfig, item_num_),
  PROTOBUF_FIELD_OFFSET(::MsgOnlineActiveConfig, type_),
  PROTOBUF_FIELD_OFFSET(::MsgOnlineActiveConfig, online_index_),
  PROTOBUF_FIELD_OFFSET(::MsgOnlineActiveConfig, times_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgOnlineActiveQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgOnlineActiveQuery, user_times_),
  PROTOBUF_FIELD_OFFSET(::MsgOnlineActiveQuery, index_id_),
  PROTOBUF_FIELD_OFFSET(::MsgOnlineActiveQuery, online_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgOlineActiveAward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgOlineActiveAward, item_id_),
  PROTOBUF_FIELD_OFFSET(::MsgOlineActiveAward, item_num_),
  PROTOBUF_FIELD_OFFSET(::MsgOlineActiveAward, type_),
  PROTOBUF_FIELD_OFFSET(::MsgOlineActiveAward, online_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgCDKExchange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgCDKExchange, item_id_),
  PROTOBUF_FIELD_OFFSET(::MsgCDKExchange, item_num_),
  PROTOBUF_FIELD_OFFSET(::MsgCDKExchange, item_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgCDKExchangeResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgCDKExchangeResp, ret_code_),
  PROTOBUF_FIELD_OFFSET(::MsgCDKExchangeResp, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgPersonalDetailsRespAdd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgPersonalDetailsRespAdd, type_),
  PROTOBUF_FIELD_OFFSET(::MsgPersonalDetailsRespAdd, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgInviteUserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgInviteUserInfo, vip_level_),
  PROTOBUF_FIELD_OFFSET(::MsgInviteUserInfo, invite_time_),
  PROTOBUF_FIELD_OFFSET(::MsgInviteUserInfo, beautiful_id_),
  PROTOBUF_FIELD_OFFSET(::MsgInviteUserInfo, nickname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgInviteUserResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgInviteUserResp, info_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::MsgPlayerLogin)},
  { 20, -1, sizeof(::MsgPlayerLoginResp)},
  { 47, -1, sizeof(::MsgModifyPassword)},
  { 54, -1, sizeof(::MsgBindPhone)},
  { 63, -1, sizeof(::MsgCommonKV)},
  { 70, -1, sizeof(::MsgCheckInInfo)},
  { 79, -1, sizeof(::MsgTurntableHistoryData)},
  { 91, -1, sizeof(::MsgTurnPlayInfo)},
  { 101, -1, sizeof(::MsgTurnCfg)},
  { 110, -1, sizeof(::MsgTurntableData)},
  { 123, -1, sizeof(::MsgTurntable)},
  { 130, -1, sizeof(::MsgTurntableResp)},
  { 141, -1, sizeof(::MsgMailsInfo)},
  { 147, -1, sizeof(::MsgMailData)},
  { 161, -1, sizeof(::MsgShareData)},
  { 168, -1, sizeof(::MsgBindParentData)},
  { 174, -1, sizeof(::MsgInviteAwardInfo)},
  { 182, -1, sizeof(::MsgInviteAwardConfig)},
  { 189, -1, sizeof(::MsgRechargeInfo)},
  { 199, -1, sizeof(::MsgQueryRebateRecordInfo)},
  { 205, -1, sizeof(::MsgQueryRebateRecord)},
  { 213, -1, sizeof(::MsgForgetPassword)},
  { 222, -1, sizeof(::MsgVIPInfo)},
  { 237, -1, sizeof(::MsgVIPConfig)},
  { 243, -1, sizeof(::MsgUpgradeVIP)},
  { 250, -1, sizeof(::MsgGetAvatarInfo)},
  { 256, -1, sizeof(::MsgPlayerInfo)},
  { 275, -1, sizeof(::ActiveInfoRet)},
  { 291, -1, sizeof(::MsgActiveInfoSCRet)},
  { 297, -1, sizeof(::MsgActiveInfoCSPick)},
  { 305, -1, sizeof(::MsgActiveInfoSCPick)},
  { 322, -1, sizeof(::MsgModifySignature)},
  { 329, -1, sizeof(::MsgTransferOperate)},
  { 336, -1, sizeof(::MsgTopInfo)},
  { 348, -1, sizeof(::MsgGetRank)},
  { 357, -1, sizeof(::MsgTopListResp)},
  { 368, -1, sizeof(::MsgTransferOperateResp)},
  { 375, -1, sizeof(::MsgTransferOperateSyncResp)},
  { 385, -1, sizeof(::MsgTransferReceiveResp)},
  { 392, -1, sizeof(::MsgTransferRecord)},
  { 404, -1, sizeof(::MsgTransferRecordResp)},
  { 410, -1, sizeof(::MsgPhoneCode)},
  { 417, -1, sizeof(::MsgItem)},
  { 424, -1, sizeof(::MsgPlayerItem)},
  { 430, -1, sizeof(::MsgTransferQueryNickname)},
  { 438, -1, sizeof(::MsgSubagentInformation)},
  { 449, -1, sizeof(::MsgTtotalSubagentInformation)},
  { 455, -1, sizeof(::MsgBindParentInfo)},
  { 464, -1, sizeof(::MsgBindInviteCodeResp)},
  { 472, -1, sizeof(::MsgDotRechargeResp)},
  { 480, -1, sizeof(::MsgOnlineActiveConfig)},
  { 490, -1, sizeof(::MsgOnlineActiveQuery)},
  { 498, -1, sizeof(::MsgOlineActiveAward)},
  { 507, -1, sizeof(::MsgCDKExchange)},
  { 515, -1, sizeof(::MsgCDKExchangeResp)},
  { 522, -1, sizeof(::MsgPersonalDetailsRespAdd)},
  { 529, -1, sizeof(::MsgInviteUserInfo)},
  { 538, -1, sizeof(::MsgInviteUserResp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgPlayerLogin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgPlayerLoginResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgModifyPassword_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgBindPhone_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgCommonKV_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgCheckInInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgTurntableHistoryData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgTurnPlayInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgTurnCfg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgTurntableData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgTurntable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgTurntableResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgMailsInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgMailData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgShareData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgBindParentData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgInviteAwardInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgInviteAwardConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgRechargeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgQueryRebateRecordInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgQueryRebateRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgForgetPassword_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgVIPInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgVIPConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgUpgradeVIP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgGetAvatarInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgPlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ActiveInfoRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgActiveInfoSCRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgActiveInfoCSPick_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgActiveInfoSCPick_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgModifySignature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgTransferOperate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgTopInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgGetRank_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgTopListResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgTransferOperateResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgTransferOperateSyncResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgTransferReceiveResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgTransferRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgTransferRecordResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgPhoneCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgPlayerItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgTransferQueryNickname_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgSubagentInformation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgTtotalSubagentInformation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgBindParentInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgBindInviteCodeResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgDotRechargeResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgOnlineActiveConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgOnlineActiveQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgOlineActiveAward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgCDKExchange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgCDKExchangeResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgPersonalDetailsRespAdd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgInviteUserInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgInviteUserResp_default_instance_),
};

const char descriptor_table_protodef_Login_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013Login.proto\"\245\002\n\016MsgPlayerLogin\022\017\n\007acco"
  "unt\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\022\023\n\013platform_"
  "id\030\003 \001(\005\022\022\n\nchannel_id\030\004 \001(\005\022\023\n\013client_t"
  "ype\030\005 \001(\005\022\022\n\nlogin_type\030\006 \001(\005\022\023\n\013machine"
  "_num\030\007 \001(\t\022\017\n\007user_ip\030\010 \001(\t\022\020\n\010is_drain\030"
  "\t \001(\005\022\016\n\006avatar\030\n \001(\t\022\020\n\010nickname\030\013 \001(\t\022"
  "\r\n\005phone\030\014 \001(\t\022\014\n\004code\030\r \001(\005\022\023\n\013invite_c"
  "ode\030\016 \001(\t\022\022\n\nagent_type\030\017 \001(\005\"\300\003\n\022MsgPla"
  "yerLoginResp\022\020\n\010res_code\030\001 \001(\005\022\017\n\007user_i"
  "d\030\002 \001(\005\022\024\n\014beautiful_id\030\003 \001(\005\022\017\n\007account"
  "\030\004 \001(\t\022\020\n\010nickname\030\005 \001(\t\022\016\n\006avatar\030\006 \001(\t"
  "\022\026\n\016first_recharge\030\007 \001(\010\022\021\n\tuser_type\030\010 "
  "\001(\005\022\020\n\010is_drain\030\t \001(\005\022\014\n\004coin\030\n \001(\004\022\021\n\tp"
  "hone_num\030\013 \001(\t\022\021\n\tvip_level\030\014 \001(\005\022\024\n\014ava"
  "tar_frame\030\r \001(\005\022\023\n\013invite_code\030\016 \001(\t\022\021\n\t"
  "signature\030\020 \001(\t\022\023\n\013agent_level\030\021 \001(\005\022\020\n\010"
  "password\030\022 \001(\t\022\023\n\013whatsup_msg\030\023 \001(\t\022\024\n\014t"
  "elegram_msg\030\024 \001(\t\022\024\n\014facebook_msg\030\025 \001(\t\022"
  "\023\n\013frist_login\030\026 \001(\010\022\022\n\nagent_type\030\027 \001(\005"
  "\"\?\n\021MsgModifyPassword\022\024\n\014old_password\030\001 "
  "\001(\t\022\024\n\014new_password\030\002 \001(\t\"V\n\014MsgBindPhon"
  "e\022\014\n\004code\030\001 \001(\005\022\021\n\tphone_num\030\002 \001(\t\022\020\n\010pa"
  "ssword\030\003 \001(\t\022\023\n\013invite_code\030\004 \001(\t\"#\n\013Msg"
  "CommonKV\022\t\n\001k\030\001 \001(\005\022\t\n\001v\030\002 \001(\005\"i\n\016MsgChe"
  "ckInInfo\022\022\n\ncheck_days\030\001 \001(\005\022\017\n\007is_open\030"
  "\002 \001(\010\022\020\n\010can_pick\030\003 \001(\010\022 \n\nCheckInCfg\030\004 "
  "\003(\0132\014.MsgCommonKV\"\213\001\n\027MsgTurntableHistor"
  "yData\022\017\n\007user_id\030\001 \001(\005\022\021\n\tnick_name\030\002 \001("
  "\t\022\r\n\005score\030\003 \001(\005\022\r\n\005award\030\004 \001(\005\022\014\n\004type\030"
  "\005 \001(\005\022\022\n\naward_type\030\006 \001(\005\022\014\n\004time\030\007 \001(\t\""
  "s\n\017MsgTurnPlayInfo\022\020\n\010play_num\030\001 \001(\005\022\022\n\n"
  "limit_turn\030\002 \001(\005\022\022\n\nneed_score\030\003 \001(\005\022\020\n\010"
  "turn_pro\030\004 \001(\005\022\024\n\014turn_max_pro\030\005 \001(\005\"L\n\n"
  "MsgTurnCfg\022\r\n\005index\030\001 \001(\005\022\r\n\005arwad\030\002 \001(\005"
  "\022\022\n\narwad_type\030\003 \001(\005\022\014\n\004type\030\004 \001(\005\"\243\002\n\020M"
  "sgTurntableData\022\r\n\005score\030\001 \001(\003\022\025\n\rgold_t"
  "o_score\030\003 \001(\005\022%\n\013silver_info\030\004 \001(\0132\020.Msg"
  "TurnPlayInfo\022#\n\tgold_info\030\005 \001(\0132\020.MsgTur"
  "nPlayInfo\022\037\n\nsilver_cfg\030\006 \003(\0132\013.MsgTurnC"
  "fg\022\035\n\010gold_cfg\030\007 \003(\0132\013.MsgTurnCfg\022.\n\014thi"
  "s_history\030\010 \003(\0132\030.MsgTurntableHistoryDat"
  "a\022-\n\013big_history\030\t \003(\0132\030.MsgTurntableHis"
  "toryData\"2\n\014MsgTurntable\022\017\n\007user_id\030\001 \001("
  "\005\022\021\n\tturn_type\030\002 \001(\003\"|\n\020MsgTurntableResp"
  "\022\r\n\005score\030\001 \001(\003\022\022\n\naward_type\030\002 \001(\005\022\021\n\tn"
  "ew_value\030\003 \001(\003\022\021\n\tturnIndex\030\004 \001(\003\022\021\n\tget"
  "_value\030\005 \001(\003\022\014\n\004code\030\006 \001(\005\"+\n\014MsgMailsIn"
  "fo\022\033\n\005mails\030\001 \003(\0132\014.MsgMailData\"\254\001\n\013MsgM"
  "ailData\022\017\n\007mail_id\030\001 \001(\005\022\024\n\014send_user_id"
  "\030\002 \001(\005\022\021\n\tsend_time\030\003 \001(\005\022\r\n\005title\030\004 \001(\t"
  "\022\017\n\007content\030\005 \001(\t\022\014\n\004gold\030\006 \001(\003\022\017\n\007is_re"
  "ad\030\007 \001(\010\022\020\n\010is_claim\030\010 \001(\010\022\022\n\nto_user_id"
  "\030\t \001(\005\"6\n\014MsgShareData\022\023\n\013invite_code\030\001 "
  "\001(\t\022\021\n\tbind_list\030\002 \003(\005\"$\n\021MsgBindParentD"
  "ata\022\017\n\007strCode\030\001 \001(\t\"c\n\022MsgInviteAwardIn"
  "fo\022\021\n\tinviteNum\030\001 \001(\005\022\021\n\tpickIndex\030\002 \001(\005"
  "\022\'\n\010awardCfg\030\003 \003(\0132\025.MsgInviteAwardConfi"
  "g\"8\n\024MsgInviteAwardConfig\022\021\n\tinviteNum\030\001"
  " \001(\005\022\r\n\005award\030\002 \001(\005\"w\n\017MsgRechargeInfo\022\021"
  "\n\tinviteNum\030\001 \001(\005\022\022\n\ntodayAward\030\002 \001(\003\022\022\n"
  "\ntotalAward\030\003 \001(\003\022\025\n\rcanPickAmount\030\004 \001(\003"
  "\022\022\n\ninviteCode\030\005 \001(\t\"L\n\030MsgQueryRebateRe"
  "cordInfo\0220\n\021queryRebateRecord\030\001 \003(\0132\025.Ms"
  "gQueryRebateRecord\"V\n\024MsgQueryRebateReco"
  "rd\022\026\n\016rechargeUserId\030\001 \001(\005\022\026\n\016rechargeAm"
  "ount\030\002 \001(\005\022\016\n\006rebate\030\003 \001(\005\"[\n\021MsgForgetP"
  "assword\022\023\n\013client_type\030\001 \001(\005\022\r\n\005phone\030\002 "
  "\001(\t\022\014\n\004code\030\003 \001(\005\022\024\n\014new_password\030\004 \001(\t\""
  "\334\001\n\nMsgVIPInfo\022\021\n\tvip_level\030\001 \001(\005\022\020\n\010nee"
  "d_exp\030\002 \001(\003\022\025\n\rturntable_num\030\003 \001(\005\022\030\n\020tr"
  "umpet_discount\030\004 \001(\005\022\026\n\016check_addition\030\005"
  " \001(\005\022\022\n\nworld_chat\030\006 \001(\010\022\016\n\006avatar\030\007 \001(\005"
  "\022\024\n\014avatar_frame\030\010 \001(\005\022\022\n\naward_gold\030\t \001"
  "(\005\022\022\n\none_to_one\030\n \001(\010\"-\n\014MsgVIPConfig\022\035"
  "\n\010vip_info\030\001 \003(\0132\013.MsgVIPInfo\"/\n\rMsgUpgr"
  "adeVIP\022\020\n\010res_code\030\001 \001(\005\022\014\n\004gold\030\002 \001(\003\"#"
  "\n\020MsgGetAvatarInfo\022\017\n\007avatars\030\001 \003(\005\"\241\002\n\r"
  "MsgPlayerInfo\022\017\n\007user_id\030\001 \001(\005\022\024\n\014beauti"
  "ful_id\030\002 \001(\005\022\020\n\010nickname\030\003 \001(\t\022\016\n\006avatar"
  "\030\004 \001(\t\022\014\n\004coin\030\005 \001(\004\022\021\n\tphone_num\030\006 \001(\t\022"
  "\021\n\tvip_level\030\007 \001(\005\022\024\n\014avatar_frame\030\010 \001(\005"
  "\022\021\n\tsignature\030\t \001(\t\022\023\n\013zmd_game_id\030\n \001(\005"
  "\022\024\n\014zmd_win_gold\030\013 \001(\004\022\023\n\013whatsup_msg\030\023 "
  "\001(\t\022\024\n\014telegram_msg\030\024 \001(\t\022\024\n\014facebook_ms"
  "g\030\025 \001(\t\"\330\001\n\rActiveInfoRet\022\021\n\tactive_id\030\001"
  " \001(\005\022\025\n\rsub_active_id\030\002 \001(\005\022\016\n\006param1\030\003 "
  "\001(\005\022\016\n\006param2\030\004 \001(\005\022\016\n\006param3\030\005 \001(\005\022\021\n\tp"
  "rogress1\030\006 \001(\005\022\021\n\tprogress2\030\007 \001(\005\022\021\n\tpro"
  "gress3\030\010 \001(\005\022\016\n\006reward\030\t \001(\005\022\023\n\013reward_t"
  "ype\030\n \001(\005\022\017\n\007is_pick\030\013 \001(\010\"6\n\022MsgActiveI"
  "nfoSCRet\022 \n\010vec_info\030\001 \003(\0132\016.ActiveInfoR"
  "et\"P\n\023MsgActiveInfoCSPick\022\017\n\007user_id\030\001 \001"
  "(\005\022\021\n\tactive_id\030\002 \001(\005\022\025\n\rsub_active_id\030\003"
  " \001(\005\"\353\001\n\023MsgActiveInfoSCPick\022\021\n\tactive_i"
  "d\030\001 \001(\005\022\025\n\rsub_active_id\030\002 \001(\005\022\016\n\006param1"
  "\030\003 \001(\005\022\016\n\006param2\030\004 \001(\005\022\016\n\006param3\030\005 \001(\005\022\021"
  "\n\tprogress1\030\006 \001(\005\022\021\n\tprogress2\030\007 \001(\005\022\021\n\t"
  "progress3\030\010 \001(\005\022\016\n\006reward\030\t \001(\005\022\023\n\013rewar"
  "d_type\030\n \001(\005\022\017\n\007is_pick\030\013 \001(\005\022\013\n\003res\030\014 \001"
  "(\010\"8\n\022MsgModifySignature\022\017\n\007user_id\030\001 \001("
  "\005\022\021\n\tsignature\030\002 \001(\t\"A\n\022MsgTransferOpera"
  "te\022\024\n\014recv_user_id\030\001 \001(\005\022\025\n\rtransfer_gol"
  "d\030\002 \001(\003\"\212\001\n\nMsgTopInfo\022\017\n\007rank_id\030\001 \001(\005\022"
  "\017\n\007user_id\030\002 \001(\005\022\014\n\004gold\030\003 \001(\004\022\021\n\tvip_le"
  "vel\030\004 \001(\r\022\024\n\014avatar_frame\030\005 \001(\005\022\020\n\010head_"
  "url\030\006 \001(\t\022\021\n\tnick_name\030\007 \001(\t\"W\n\nMsgGetRa"
  "nk\022\021\n\trank_type\030\001 \001(\005\022\017\n\007user_id\030\002 \001(\005\022\024"
  "\n\014current_page\030\003 \001(\005\022\017\n\007max_row\030\004 \001(\005\"\213\001"
  "\n\016MsgTopListResp\022\017\n\007user_id\030\001 \001(\005\022\021\n\tran"
  "k_type\030\002 \001(\005\022\026\n\016this_rank_ndex\030\003 \001(\005\022\021\n\t"
  "this_gold\030\004 \001(\003\022\016\n\006is_end\030\005 \001(\005\022\032\n\005lists"
  "\030\006 \003(\0132\013.MsgTopInfo\">\n\026MsgTransferOperat"
  "eResp\022\021\n\tret_value\030\001 \001(\005\022\021\n\tuser_gold\030\002 "
  "\001(\003\"\203\001\n\032MsgTransferOperateSyncResp\022\021\n\tre"
  "t_value\030\001 \001(\005\022\024\n\014send_user_id\030\003 \001(\005\022\020\n\010a"
  "dd_gold\030\004 \001(\003\022\025\n\rreceive_state\030\006 \001(\003\022\023\n\013"
  "transfer_id\030\007 \001(\003\"@\n\026MsgTransferReceiveR"
  "esp\022\021\n\tret_value\030\001 \001(\005\022\023\n\013change_gold\030\002 "
  "\001(\003\"\243\001\n\021MsgTransferRecord\022\024\n\014send_user_i"
  "d\030\001 \001(\005\022\020\n\010nickname\030\002 \001(\t\022\025\n\rtransfer_go"
  "ld\030\003 \001(\003\022\r\n\005timer\030\005 \001(\t\022\024\n\014recv_user_id\030"
  "\006 \001(\005\022\025\n\rreceive_state\030\007 \001(\005\022\023\n\013transfer"
  "_id\030\010 \001(\003\"<\n\025MsgTransferRecordResp\022#\n\007re"
  "cords\030\001 \003(\0132\022.MsgTransferRecord\"0\n\014MsgPh"
  "oneCode\022\021\n\tarea_code\030\001 \001(\t\022\r\n\005phone\030\002 \001("
  "\t\",\n\007MsgItem\022\017\n\007item_id\030\001 \001(\005\022\020\n\010item_nu"
  "m\030\002 \001(\003\"\'\n\rMsgPlayerItem\022\026\n\004item\030\001 \003(\0132\010"
  ".MsgItem\"L\n\030MsgTransferQueryNickname\022\021\n\t"
  "ret_Value\030\001 \001(\005\022\020\n\010nickname\030\002 \001(\t\022\013\n\003tax"
  "\030\003 \001(\005\"\236\001\n\026MsgSubagentInformation\022\026\n\016age"
  "nt_nickname\030\001 \001(\t\022\025\n\ragent_user_id\030\002 \001(\005"
  "\022\022\n\nagent_type\030\003 \001(\010\022\026\n\016total_shift_to\030\004"
  " \001(\003\022\026\n\016total_roll_out\030\005 \001(\003\022\021\n\tvip_leve"
  "l\030\006 \001(\005\"K\n\034MsgTtotalSubagentInformation\022"
  "+\n\nagent_info\030\001 \003(\0132\027.MsgSubagentInforma"
  "tion\"]\n\021MsgBindParentInfo\022\017\n\007user_id\030\001 \001"
  "(\005\022\016\n\006avatar\030\002 \001(\t\022\024\n\014avatar_frame\030\003 \001(\005"
  "\022\021\n\tnick_name\030\004 \001(\t\"^\n\025MsgBindInviteCode"
  "Resp\022\020\n\010res_code\030\001 \001(\005\022\021\n\tuser_type\030\002 \001("
  "\005\022 \n\004info\030\003 \001(\0132\022.MsgBindParentInfo\"R\n\022M"
  "sgDotRechargeResp\022\027\n\017is_new_recharge\030\001 \001"
  "(\010\022\014\n\004gold\030\002 \001(\003\022\025\n\rrecharge_info\030\003 \003(\005\""
  "m\n\025MsgOnlineActiveConfig\022\017\n\007item_id\030\001 \001("
  "\005\022\020\n\010item_num\030\002 \001(\005\022\014\n\004type\030\003 \001(\005\022\024\n\014onl"
  "ine_index\030\004 \001(\005\022\r\n\005times\030\005 \001(\005\"k\n\024MsgOnl"
  "ineActiveQuery\022\022\n\nuser_times\030\001 \001(\005\022\020\n\010in"
  "dex_id\030\002 \003(\005\022-\n\ronline_config\030\003 \003(\0132\026.Ms"
  "gOnlineActiveConfig\"\\\n\023MsgOlineActiveAwa"
  "rd\022\017\n\007item_id\030\001 \001(\005\022\020\n\010item_num\030\002 \001(\005\022\014\n"
  "\004type\030\003 \001(\005\022\024\n\014online_index\030\004 \001(\005\"F\n\016Msg"
  "CDKExchange\022\017\n\007item_id\030\001 \001(\005\022\020\n\010item_num"
  "\030\002 \001(\005\022\021\n\titem_type\030\003 \001(\005\"E\n\022MsgCDKExcha"
  "ngeResp\022\020\n\010ret_code\030\001 \001(\005\022\035\n\004info\030\002 \003(\0132"
  "\017.MsgCDKExchange\"6\n\031MsgPersonalDetailsRe"
  "spAdd\022\014\n\004type\030\001 \001(\005\022\013\n\003msg\030\002 \001(\t\"c\n\021MsgI"
  "nviteUserInfo\022\021\n\tvip_level\030\001 \001(\005\022\023\n\013invi"
  "te_time\030\002 \001(\t\022\024\n\014beautiful_id\030\003 \001(\005\022\020\n\010n"
  "ickname\030\004 \001(\t\"5\n\021MsgInviteUserResp\022 \n\004in"
  "fo\030\001 \003(\0132\022.MsgInviteUserInfob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Login_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Login_2eproto_sccs[58] = {
  &scc_info_ActiveInfoRet_Login_2eproto.base,
  &scc_info_MsgActiveInfoCSPick_Login_2eproto.base,
  &scc_info_MsgActiveInfoSCPick_Login_2eproto.base,
  &scc_info_MsgActiveInfoSCRet_Login_2eproto.base,
  &scc_info_MsgBindInviteCodeResp_Login_2eproto.base,
  &scc_info_MsgBindParentData_Login_2eproto.base,
  &scc_info_MsgBindParentInfo_Login_2eproto.base,
  &scc_info_MsgBindPhone_Login_2eproto.base,
  &scc_info_MsgCDKExchange_Login_2eproto.base,
  &scc_info_MsgCDKExchangeResp_Login_2eproto.base,
  &scc_info_MsgCheckInInfo_Login_2eproto.base,
  &scc_info_MsgCommonKV_Login_2eproto.base,
  &scc_info_MsgDotRechargeResp_Login_2eproto.base,
  &scc_info_MsgForgetPassword_Login_2eproto.base,
  &scc_info_MsgGetAvatarInfo_Login_2eproto.base,
  &scc_info_MsgGetRank_Login_2eproto.base,
  &scc_info_MsgInviteAwardConfig_Login_2eproto.base,
  &scc_info_MsgInviteAwardInfo_Login_2eproto.base,
  &scc_info_MsgInviteUserInfo_Login_2eproto.base,
  &scc_info_MsgInviteUserResp_Login_2eproto.base,
  &scc_info_MsgItem_Login_2eproto.base,
  &scc_info_MsgMailData_Login_2eproto.base,
  &scc_info_MsgMailsInfo_Login_2eproto.base,
  &scc_info_MsgModifyPassword_Login_2eproto.base,
  &scc_info_MsgModifySignature_Login_2eproto.base,
  &scc_info_MsgOlineActiveAward_Login_2eproto.base,
  &scc_info_MsgOnlineActiveConfig_Login_2eproto.base,
  &scc_info_MsgOnlineActiveQuery_Login_2eproto.base,
  &scc_info_MsgPersonalDetailsRespAdd_Login_2eproto.base,
  &scc_info_MsgPhoneCode_Login_2eproto.base,
  &scc_info_MsgPlayerInfo_Login_2eproto.base,
  &scc_info_MsgPlayerItem_Login_2eproto.base,
  &scc_info_MsgPlayerLogin_Login_2eproto.base,
  &scc_info_MsgPlayerLoginResp_Login_2eproto.base,
  &scc_info_MsgQueryRebateRecord_Login_2eproto.base,
  &scc_info_MsgQueryRebateRecordInfo_Login_2eproto.base,
  &scc_info_MsgRechargeInfo_Login_2eproto.base,
  &scc_info_MsgShareData_Login_2eproto.base,
  &scc_info_MsgSubagentInformation_Login_2eproto.base,
  &scc_info_MsgTopInfo_Login_2eproto.base,
  &scc_info_MsgTopListResp_Login_2eproto.base,
  &scc_info_MsgTransferOperate_Login_2eproto.base,
  &scc_info_MsgTransferOperateResp_Login_2eproto.base,
  &scc_info_MsgTransferOperateSyncResp_Login_2eproto.base,
  &scc_info_MsgTransferQueryNickname_Login_2eproto.base,
  &scc_info_MsgTransferReceiveResp_Login_2eproto.base,
  &scc_info_MsgTransferRecord_Login_2eproto.base,
  &scc_info_MsgTransferRecordResp_Login_2eproto.base,
  &scc_info_MsgTtotalSubagentInformation_Login_2eproto.base,
  &scc_info_MsgTurnCfg_Login_2eproto.base,
  &scc_info_MsgTurnPlayInfo_Login_2eproto.base,
  &scc_info_MsgTurntable_Login_2eproto.base,
  &scc_info_MsgTurntableData_Login_2eproto.base,
  &scc_info_MsgTurntableHistoryData_Login_2eproto.base,
  &scc_info_MsgTurntableResp_Login_2eproto.base,
  &scc_info_MsgUpgradeVIP_Login_2eproto.base,
  &scc_info_MsgVIPConfig_Login_2eproto.base,
  &scc_info_MsgVIPInfo_Login_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Login_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Login_2eproto = {
  false, false, descriptor_table_protodef_Login_2eproto, "Login.proto", 6356,
  &descriptor_table_Login_2eproto_once, descriptor_table_Login_2eproto_sccs, descriptor_table_Login_2eproto_deps, 58, 0,
  schemas, file_default_instances, TableStruct_Login_2eproto::offsets,
  file_level_metadata_Login_2eproto, 58, file_level_enum_descriptors_Login_2eproto, file_level_service_descriptors_Login_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Login_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Login_2eproto)), true);

// ===================================================================

class MsgPlayerLogin::_Internal {
 public:
};

MsgPlayerLogin::MsgPlayerLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgPlayerLogin)
}
MsgPlayerLogin::MsgPlayerLogin(const MsgPlayerLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArena());
  }
  machine_num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_machine_num().empty()) {
    machine_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_machine_num(), 
      GetArena());
  }
  user_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_ip().empty()) {
    user_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_ip(), 
      GetArena());
  }
  avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar().empty()) {
    avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar(), 
      GetArena());
  }
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nickname().empty()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArena());
  }
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phone().empty()) {
    phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phone(), 
      GetArena());
  }
  invite_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_invite_code().empty()) {
    invite_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invite_code(), 
      GetArena());
  }
  ::memcpy(&platform_id_, &from.platform_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&agent_type_) -
    reinterpret_cast<char*>(&platform_id_)) + sizeof(agent_type_));
  // @@protoc_insertion_point(copy_constructor:MsgPlayerLogin)
}

void MsgPlayerLogin::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgPlayerLogin_Login_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  machine_num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invite_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&platform_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&agent_type_) -
      reinterpret_cast<char*>(&platform_id_)) + sizeof(agent_type_));
}

MsgPlayerLogin::~MsgPlayerLogin() {
  // @@protoc_insertion_point(destructor:MsgPlayerLogin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgPlayerLogin::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  machine_num_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invite_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgPlayerLogin::ArenaDtor(void* object) {
  MsgPlayerLogin* _this = reinterpret_cast< MsgPlayerLogin* >(object);
  (void)_this;
}
void MsgPlayerLogin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgPlayerLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgPlayerLogin& MsgPlayerLogin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgPlayerLogin_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgPlayerLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgPlayerLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  password_.ClearToEmpty();
  machine_num_.ClearToEmpty();
  user_ip_.ClearToEmpty();
  avatar_.ClearToEmpty();
  nickname_.ClearToEmpty();
  phone_.ClearToEmpty();
  invite_code_.ClearToEmpty();
  ::memset(&platform_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&agent_type_) -
      reinterpret_cast<char*>(&platform_id_)) + sizeof(agent_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgPlayerLogin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgPlayerLogin.account"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgPlayerLogin.password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 platform_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          platform_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 channel_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 client_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          client_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 login_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          login_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string machine_num = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_machine_num();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgPlayerLogin.machine_num"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_ip = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_user_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgPlayerLogin.user_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_drain = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          is_drain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatar = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_avatar();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgPlayerLogin.avatar"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nickname = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgPlayerLogin.nickname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string phone = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_phone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgPlayerLogin.phone"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 code = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string invite_code = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_invite_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgPlayerLogin.invite_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 agent_type = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          agent_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgPlayerLogin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPlayerLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgPlayerLogin.account");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgPlayerLogin.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  // int32 platform_id = 3;
  if (this->platform_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_platform_id(), target);
  }

  // int32 channel_id = 4;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_channel_id(), target);
  }

  // int32 client_type = 5;
  if (this->client_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_client_type(), target);
  }

  // int32 login_type = 6;
  if (this->login_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_login_type(), target);
  }

  // string machine_num = 7;
  if (this->machine_num().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_machine_num().data(), static_cast<int>(this->_internal_machine_num().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgPlayerLogin.machine_num");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_machine_num(), target);
  }

  // string user_ip = 8;
  if (this->user_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_ip().data(), static_cast<int>(this->_internal_user_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgPlayerLogin.user_ip");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_user_ip(), target);
  }

  // int32 is_drain = 9;
  if (this->is_drain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_is_drain(), target);
  }

  // string avatar = 10;
  if (this->avatar().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar().data(), static_cast<int>(this->_internal_avatar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgPlayerLogin.avatar");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_avatar(), target);
  }

  // string nickname = 11;
  if (this->nickname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgPlayerLogin.nickname");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_nickname(), target);
  }

  // string phone = 12;
  if (this->phone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone().data(), static_cast<int>(this->_internal_phone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgPlayerLogin.phone");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_phone(), target);
  }

  // int32 code = 13;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_code(), target);
  }

  // string invite_code = 14;
  if (this->invite_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_invite_code().data(), static_cast<int>(this->_internal_invite_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgPlayerLogin.invite_code");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_invite_code(), target);
  }

  // int32 agent_type = 15;
  if (this->agent_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_agent_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPlayerLogin)
  return target;
}

size_t MsgPlayerLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgPlayerLogin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // string machine_num = 7;
  if (this->machine_num().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_machine_num());
  }

  // string user_ip = 8;
  if (this->user_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_ip());
  }

  // string avatar = 10;
  if (this->avatar().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar());
  }

  // string nickname = 11;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string phone = 12;
  if (this->phone().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone());
  }

  // string invite_code = 14;
  if (this->invite_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invite_code());
  }

  // int32 platform_id = 3;
  if (this->platform_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_platform_id());
  }

  // int32 channel_id = 4;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channel_id());
  }

  // int32 client_type = 5;
  if (this->client_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_client_type());
  }

  // int32 login_type = 6;
  if (this->login_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_login_type());
  }

  // int32 is_drain = 9;
  if (this->is_drain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_drain());
  }

  // int32 code = 13;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  // int32 agent_type = 15;
  if (this->agent_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_agent_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgPlayerLogin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgPlayerLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgPlayerLogin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgPlayerLogin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgPlayerLogin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgPlayerLogin)
    MergeFrom(*source);
  }
}

void MsgPlayerLogin::MergeFrom(const MsgPlayerLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgPlayerLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {
    _internal_set_account(from._internal_account());
  }
  if (from.password().size() > 0) {
    _internal_set_password(from._internal_password());
  }
  if (from.machine_num().size() > 0) {
    _internal_set_machine_num(from._internal_machine_num());
  }
  if (from.user_ip().size() > 0) {
    _internal_set_user_ip(from._internal_user_ip());
  }
  if (from.avatar().size() > 0) {
    _internal_set_avatar(from._internal_avatar());
  }
  if (from.nickname().size() > 0) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (from.phone().size() > 0) {
    _internal_set_phone(from._internal_phone());
  }
  if (from.invite_code().size() > 0) {
    _internal_set_invite_code(from._internal_invite_code());
  }
  if (from.platform_id() != 0) {
    _internal_set_platform_id(from._internal_platform_id());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.client_type() != 0) {
    _internal_set_client_type(from._internal_client_type());
  }
  if (from.login_type() != 0) {
    _internal_set_login_type(from._internal_login_type());
  }
  if (from.is_drain() != 0) {
    _internal_set_is_drain(from._internal_is_drain());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.agent_type() != 0) {
    _internal_set_agent_type(from._internal_agent_type());
  }
}

void MsgPlayerLogin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgPlayerLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerLogin::CopyFrom(const MsgPlayerLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgPlayerLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerLogin::IsInitialized() const {
  return true;
}

void MsgPlayerLogin::InternalSwap(MsgPlayerLogin* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  machine_num_.Swap(&other->machine_num_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_ip_.Swap(&other->user_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  avatar_.Swap(&other->avatar_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nickname_.Swap(&other->nickname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  phone_.Swap(&other->phone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  invite_code_.Swap(&other->invite_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgPlayerLogin, agent_type_)
      + sizeof(MsgPlayerLogin::agent_type_)
      - PROTOBUF_FIELD_OFFSET(MsgPlayerLogin, platform_id_)>(
          reinterpret_cast<char*>(&platform_id_),
          reinterpret_cast<char*>(&other->platform_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgPlayerLogin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgPlayerLoginResp::_Internal {
 public:
};

MsgPlayerLoginResp::MsgPlayerLoginResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgPlayerLoginResp)
}
MsgPlayerLoginResp::MsgPlayerLoginResp(const MsgPlayerLoginResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArena());
  }
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nickname().empty()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArena());
  }
  avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar().empty()) {
    avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar(), 
      GetArena());
  }
  phone_num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phone_num().empty()) {
    phone_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phone_num(), 
      GetArena());
  }
  invite_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_invite_code().empty()) {
    invite_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invite_code(), 
      GetArena());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArena());
  }
  whatsup_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_whatsup_msg().empty()) {
    whatsup_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_whatsup_msg(), 
      GetArena());
  }
  telegram_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_telegram_msg().empty()) {
    telegram_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_telegram_msg(), 
      GetArena());
  }
  facebook_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_facebook_msg().empty()) {
    facebook_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_facebook_msg(), 
      GetArena());
  }
  ::memcpy(&res_code_, &from.res_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&agent_type_) -
    reinterpret_cast<char*>(&res_code_)) + sizeof(agent_type_));
  // @@protoc_insertion_point(copy_constructor:MsgPlayerLoginResp)
}

void MsgPlayerLoginResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgPlayerLoginResp_Login_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invite_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  whatsup_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  telegram_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  facebook_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&res_code_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&agent_type_) -
      reinterpret_cast<char*>(&res_code_)) + sizeof(agent_type_));
}

MsgPlayerLoginResp::~MsgPlayerLoginResp() {
  // @@protoc_insertion_point(destructor:MsgPlayerLoginResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgPlayerLoginResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_num_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invite_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  whatsup_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  telegram_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  facebook_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgPlayerLoginResp::ArenaDtor(void* object) {
  MsgPlayerLoginResp* _this = reinterpret_cast< MsgPlayerLoginResp* >(object);
  (void)_this;
}
void MsgPlayerLoginResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgPlayerLoginResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgPlayerLoginResp& MsgPlayerLoginResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgPlayerLoginResp_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgPlayerLoginResp::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgPlayerLoginResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  nickname_.ClearToEmpty();
  avatar_.ClearToEmpty();
  phone_num_.ClearToEmpty();
  invite_code_.ClearToEmpty();
  signature_.ClearToEmpty();
  password_.ClearToEmpty();
  whatsup_msg_.ClearToEmpty();
  telegram_msg_.ClearToEmpty();
  facebook_msg_.ClearToEmpty();
  ::memset(&res_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&agent_type_) -
      reinterpret_cast<char*>(&res_code_)) + sizeof(agent_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgPlayerLoginResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 res_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          res_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 beautiful_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          beautiful_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string account = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgPlayerLoginResp.account"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nickname = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgPlayerLoginResp.nickname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatar = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_avatar();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgPlayerLoginResp.avatar"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool first_recharge = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          first_recharge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 user_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_drain = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          is_drain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 coin = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string phone_num = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_phone_num();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgPlayerLoginResp.phone_num"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vip_level = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          vip_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 avatar_frame = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          avatar_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string invite_code = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_invite_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgPlayerLoginResp.invite_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string signature = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgPlayerLoginResp.signature"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 agent_level = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          agent_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgPlayerLoginResp.password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string whatsup_msg = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_whatsup_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgPlayerLoginResp.whatsup_msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string telegram_msg = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_telegram_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgPlayerLoginResp.telegram_msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string facebook_msg = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_facebook_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgPlayerLoginResp.facebook_msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool frist_login = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          frist_login_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 agent_type = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          agent_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgPlayerLoginResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPlayerLoginResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 res_code = 1;
  if (this->res_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_res_code(), target);
  }

  // int32 user_id = 2;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_user_id(), target);
  }

  // int32 beautiful_id = 3;
  if (this->beautiful_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_beautiful_id(), target);
  }

  // string account = 4;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgPlayerLoginResp.account");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_account(), target);
  }

  // string nickname = 5;
  if (this->nickname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgPlayerLoginResp.nickname");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_nickname(), target);
  }

  // string avatar = 6;
  if (this->avatar().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar().data(), static_cast<int>(this->_internal_avatar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgPlayerLoginResp.avatar");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_avatar(), target);
  }

  // bool first_recharge = 7;
  if (this->first_recharge() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_first_recharge(), target);
  }

  // int32 user_type = 8;
  if (this->user_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_user_type(), target);
  }

  // int32 is_drain = 9;
  if (this->is_drain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_is_drain(), target);
  }

  // uint64 coin = 10;
  if (this->coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_coin(), target);
  }

  // string phone_num = 11;
  if (this->phone_num().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone_num().data(), static_cast<int>(this->_internal_phone_num().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgPlayerLoginResp.phone_num");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_phone_num(), target);
  }

  // int32 vip_level = 12;
  if (this->vip_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_vip_level(), target);
  }

  // int32 avatar_frame = 13;
  if (this->avatar_frame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_avatar_frame(), target);
  }

  // string invite_code = 14;
  if (this->invite_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_invite_code().data(), static_cast<int>(this->_internal_invite_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgPlayerLoginResp.invite_code");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_invite_code(), target);
  }

  // string signature = 16;
  if (this->signature().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signature().data(), static_cast<int>(this->_internal_signature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgPlayerLoginResp.signature");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_signature(), target);
  }

  // int32 agent_level = 17;
  if (this->agent_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_agent_level(), target);
  }

  // string password = 18;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgPlayerLoginResp.password");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_password(), target);
  }

  // string whatsup_msg = 19;
  if (this->whatsup_msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_whatsup_msg().data(), static_cast<int>(this->_internal_whatsup_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgPlayerLoginResp.whatsup_msg");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_whatsup_msg(), target);
  }

  // string telegram_msg = 20;
  if (this->telegram_msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_telegram_msg().data(), static_cast<int>(this->_internal_telegram_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgPlayerLoginResp.telegram_msg");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_telegram_msg(), target);
  }

  // string facebook_msg = 21;
  if (this->facebook_msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_facebook_msg().data(), static_cast<int>(this->_internal_facebook_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgPlayerLoginResp.facebook_msg");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_facebook_msg(), target);
  }

  // bool frist_login = 22;
  if (this->frist_login() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_frist_login(), target);
  }

  // int32 agent_type = 23;
  if (this->agent_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_agent_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPlayerLoginResp)
  return target;
}

size_t MsgPlayerLoginResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgPlayerLoginResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 4;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // string nickname = 5;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string avatar = 6;
  if (this->avatar().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar());
  }

  // string phone_num = 11;
  if (this->phone_num().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone_num());
  }

  // string invite_code = 14;
  if (this->invite_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invite_code());
  }

  // string signature = 16;
  if (this->signature().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signature());
  }

  // string password = 18;
  if (this->password().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // string whatsup_msg = 19;
  if (this->whatsup_msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_whatsup_msg());
  }

  // string telegram_msg = 20;
  if (this->telegram_msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_telegram_msg());
  }

  // string facebook_msg = 21;
  if (this->facebook_msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_facebook_msg());
  }

  // int32 res_code = 1;
  if (this->res_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_res_code());
  }

  // int32 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // int32 beautiful_id = 3;
  if (this->beautiful_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_beautiful_id());
  }

  // int32 user_type = 8;
  if (this->user_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_type());
  }

  // uint64 coin = 10;
  if (this->coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_coin());
  }

  // int32 is_drain = 9;
  if (this->is_drain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_drain());
  }

  // int32 vip_level = 12;
  if (this->vip_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vip_level());
  }

  // int32 avatar_frame = 13;
  if (this->avatar_frame() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_avatar_frame());
  }

  // bool first_recharge = 7;
  if (this->first_recharge() != 0) {
    total_size += 1 + 1;
  }

  // bool frist_login = 22;
  if (this->frist_login() != 0) {
    total_size += 2 + 1;
  }

  // int32 agent_level = 17;
  if (this->agent_level() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_agent_level());
  }

  // int32 agent_type = 23;
  if (this->agent_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_agent_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgPlayerLoginResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgPlayerLoginResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgPlayerLoginResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgPlayerLoginResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgPlayerLoginResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgPlayerLoginResp)
    MergeFrom(*source);
  }
}

void MsgPlayerLoginResp::MergeFrom(const MsgPlayerLoginResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgPlayerLoginResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {
    _internal_set_account(from._internal_account());
  }
  if (from.nickname().size() > 0) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (from.avatar().size() > 0) {
    _internal_set_avatar(from._internal_avatar());
  }
  if (from.phone_num().size() > 0) {
    _internal_set_phone_num(from._internal_phone_num());
  }
  if (from.invite_code().size() > 0) {
    _internal_set_invite_code(from._internal_invite_code());
  }
  if (from.signature().size() > 0) {
    _internal_set_signature(from._internal_signature());
  }
  if (from.password().size() > 0) {
    _internal_set_password(from._internal_password());
  }
  if (from.whatsup_msg().size() > 0) {
    _internal_set_whatsup_msg(from._internal_whatsup_msg());
  }
  if (from.telegram_msg().size() > 0) {
    _internal_set_telegram_msg(from._internal_telegram_msg());
  }
  if (from.facebook_msg().size() > 0) {
    _internal_set_facebook_msg(from._internal_facebook_msg());
  }
  if (from.res_code() != 0) {
    _internal_set_res_code(from._internal_res_code());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.beautiful_id() != 0) {
    _internal_set_beautiful_id(from._internal_beautiful_id());
  }
  if (from.user_type() != 0) {
    _internal_set_user_type(from._internal_user_type());
  }
  if (from.coin() != 0) {
    _internal_set_coin(from._internal_coin());
  }
  if (from.is_drain() != 0) {
    _internal_set_is_drain(from._internal_is_drain());
  }
  if (from.vip_level() != 0) {
    _internal_set_vip_level(from._internal_vip_level());
  }
  if (from.avatar_frame() != 0) {
    _internal_set_avatar_frame(from._internal_avatar_frame());
  }
  if (from.first_recharge() != 0) {
    _internal_set_first_recharge(from._internal_first_recharge());
  }
  if (from.frist_login() != 0) {
    _internal_set_frist_login(from._internal_frist_login());
  }
  if (from.agent_level() != 0) {
    _internal_set_agent_level(from._internal_agent_level());
  }
  if (from.agent_type() != 0) {
    _internal_set_agent_type(from._internal_agent_type());
  }
}

void MsgPlayerLoginResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgPlayerLoginResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerLoginResp::CopyFrom(const MsgPlayerLoginResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgPlayerLoginResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerLoginResp::IsInitialized() const {
  return true;
}

void MsgPlayerLoginResp::InternalSwap(MsgPlayerLoginResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nickname_.Swap(&other->nickname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  avatar_.Swap(&other->avatar_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  phone_num_.Swap(&other->phone_num_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  invite_code_.Swap(&other->invite_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  whatsup_msg_.Swap(&other->whatsup_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  telegram_msg_.Swap(&other->telegram_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  facebook_msg_.Swap(&other->facebook_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgPlayerLoginResp, agent_type_)
      + sizeof(MsgPlayerLoginResp::agent_type_)
      - PROTOBUF_FIELD_OFFSET(MsgPlayerLoginResp, res_code_)>(
          reinterpret_cast<char*>(&res_code_),
          reinterpret_cast<char*>(&other->res_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgPlayerLoginResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgModifyPassword::_Internal {
 public:
};

MsgModifyPassword::MsgModifyPassword(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgModifyPassword)
}
MsgModifyPassword::MsgModifyPassword(const MsgModifyPassword& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  old_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_old_password().empty()) {
    old_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_old_password(), 
      GetArena());
  }
  new_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_new_password().empty()) {
    new_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_new_password(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:MsgModifyPassword)
}

void MsgModifyPassword::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgModifyPassword_Login_2eproto.base);
  old_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MsgModifyPassword::~MsgModifyPassword() {
  // @@protoc_insertion_point(destructor:MsgModifyPassword)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgModifyPassword::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  old_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgModifyPassword::ArenaDtor(void* object) {
  MsgModifyPassword* _this = reinterpret_cast< MsgModifyPassword* >(object);
  (void)_this;
}
void MsgModifyPassword::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgModifyPassword::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgModifyPassword& MsgModifyPassword::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgModifyPassword_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgModifyPassword::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgModifyPassword)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  old_password_.ClearToEmpty();
  new_password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgModifyPassword::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string old_password = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_old_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgModifyPassword.old_password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string new_password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_new_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgModifyPassword.new_password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgModifyPassword::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgModifyPassword)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string old_password = 1;
  if (this->old_password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_old_password().data(), static_cast<int>(this->_internal_old_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgModifyPassword.old_password");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_old_password(), target);
  }

  // string new_password = 2;
  if (this->new_password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_password().data(), static_cast<int>(this->_internal_new_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgModifyPassword.new_password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_new_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgModifyPassword)
  return target;
}

size_t MsgModifyPassword::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgModifyPassword)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string old_password = 1;
  if (this->old_password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_old_password());
  }

  // string new_password = 2;
  if (this->new_password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_new_password());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgModifyPassword::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgModifyPassword)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgModifyPassword* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgModifyPassword>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgModifyPassword)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgModifyPassword)
    MergeFrom(*source);
  }
}

void MsgModifyPassword::MergeFrom(const MsgModifyPassword& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgModifyPassword)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.old_password().size() > 0) {
    _internal_set_old_password(from._internal_old_password());
  }
  if (from.new_password().size() > 0) {
    _internal_set_new_password(from._internal_new_password());
  }
}

void MsgModifyPassword::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgModifyPassword)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgModifyPassword::CopyFrom(const MsgModifyPassword& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgModifyPassword)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgModifyPassword::IsInitialized() const {
  return true;
}

void MsgModifyPassword::InternalSwap(MsgModifyPassword* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  old_password_.Swap(&other->old_password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  new_password_.Swap(&other->new_password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgModifyPassword::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgBindPhone::_Internal {
 public:
};

MsgBindPhone::MsgBindPhone(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgBindPhone)
}
MsgBindPhone::MsgBindPhone(const MsgBindPhone& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  phone_num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phone_num().empty()) {
    phone_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phone_num(), 
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArena());
  }
  invite_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_invite_code().empty()) {
    invite_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invite_code(), 
      GetArena());
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:MsgBindPhone)
}

void MsgBindPhone::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgBindPhone_Login_2eproto.base);
  phone_num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invite_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

MsgBindPhone::~MsgBindPhone() {
  // @@protoc_insertion_point(destructor:MsgBindPhone)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgBindPhone::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  phone_num_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invite_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgBindPhone::ArenaDtor(void* object) {
  MsgBindPhone* _this = reinterpret_cast< MsgBindPhone* >(object);
  (void)_this;
}
void MsgBindPhone::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgBindPhone::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgBindPhone& MsgBindPhone::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgBindPhone_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgBindPhone::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgBindPhone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phone_num_.ClearToEmpty();
  password_.ClearToEmpty();
  invite_code_.ClearToEmpty();
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgBindPhone::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string phone_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_phone_num();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgBindPhone.phone_num"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgBindPhone.password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string invite_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_invite_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgBindPhone.invite_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgBindPhone::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgBindPhone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // string phone_num = 2;
  if (this->phone_num().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone_num().data(), static_cast<int>(this->_internal_phone_num().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgBindPhone.phone_num");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_phone_num(), target);
  }

  // string password = 3;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgBindPhone.password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_password(), target);
  }

  // string invite_code = 4;
  if (this->invite_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_invite_code().data(), static_cast<int>(this->_internal_invite_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgBindPhone.invite_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_invite_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgBindPhone)
  return target;
}

size_t MsgBindPhone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgBindPhone)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string phone_num = 2;
  if (this->phone_num().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone_num());
  }

  // string password = 3;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // string invite_code = 4;
  if (this->invite_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invite_code());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgBindPhone::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgBindPhone)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgBindPhone* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgBindPhone>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgBindPhone)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgBindPhone)
    MergeFrom(*source);
  }
}

void MsgBindPhone::MergeFrom(const MsgBindPhone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgBindPhone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.phone_num().size() > 0) {
    _internal_set_phone_num(from._internal_phone_num());
  }
  if (from.password().size() > 0) {
    _internal_set_password(from._internal_password());
  }
  if (from.invite_code().size() > 0) {
    _internal_set_invite_code(from._internal_invite_code());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void MsgBindPhone::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgBindPhone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBindPhone::CopyFrom(const MsgBindPhone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgBindPhone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBindPhone::IsInitialized() const {
  return true;
}

void MsgBindPhone::InternalSwap(MsgBindPhone* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  phone_num_.Swap(&other->phone_num_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  invite_code_.Swap(&other->invite_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgBindPhone::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgCommonKV::_Internal {
 public:
};

MsgCommonKV::MsgCommonKV(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgCommonKV)
}
MsgCommonKV::MsgCommonKV(const MsgCommonKV& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&k_, &from.k_,
    static_cast<size_t>(reinterpret_cast<char*>(&v_) -
    reinterpret_cast<char*>(&k_)) + sizeof(v_));
  // @@protoc_insertion_point(copy_constructor:MsgCommonKV)
}

void MsgCommonKV::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&k_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&v_) -
      reinterpret_cast<char*>(&k_)) + sizeof(v_));
}

MsgCommonKV::~MsgCommonKV() {
  // @@protoc_insertion_point(destructor:MsgCommonKV)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgCommonKV::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgCommonKV::ArenaDtor(void* object) {
  MsgCommonKV* _this = reinterpret_cast< MsgCommonKV* >(object);
  (void)_this;
}
void MsgCommonKV::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgCommonKV::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgCommonKV& MsgCommonKV::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgCommonKV_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgCommonKV::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgCommonKV)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&k_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&v_) -
      reinterpret_cast<char*>(&k_)) + sizeof(v_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgCommonKV::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 k = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 v = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          v_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgCommonKV::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgCommonKV)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 k = 1;
  if (this->k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_k(), target);
  }

  // int32 v = 2;
  if (this->v() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgCommonKV)
  return target;
}

size_t MsgCommonKV::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgCommonKV)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 k = 1;
  if (this->k() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_k());
  }

  // int32 v = 2;
  if (this->v() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_v());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgCommonKV::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgCommonKV)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgCommonKV* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgCommonKV>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgCommonKV)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgCommonKV)
    MergeFrom(*source);
  }
}

void MsgCommonKV::MergeFrom(const MsgCommonKV& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgCommonKV)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.k() != 0) {
    _internal_set_k(from._internal_k());
  }
  if (from.v() != 0) {
    _internal_set_v(from._internal_v());
  }
}

void MsgCommonKV::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgCommonKV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCommonKV::CopyFrom(const MsgCommonKV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgCommonKV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCommonKV::IsInitialized() const {
  return true;
}

void MsgCommonKV::InternalSwap(MsgCommonKV* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgCommonKV, v_)
      + sizeof(MsgCommonKV::v_)
      - PROTOBUF_FIELD_OFFSET(MsgCommonKV, k_)>(
          reinterpret_cast<char*>(&k_),
          reinterpret_cast<char*>(&other->k_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgCommonKV::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgCheckInInfo::_Internal {
 public:
};

MsgCheckInInfo::MsgCheckInInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  checkincfg_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgCheckInInfo)
}
MsgCheckInInfo::MsgCheckInInfo(const MsgCheckInInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      checkincfg_(from.checkincfg_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&check_days_, &from.check_days_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_pick_) -
    reinterpret_cast<char*>(&check_days_)) + sizeof(can_pick_));
  // @@protoc_insertion_point(copy_constructor:MsgCheckInInfo)
}

void MsgCheckInInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgCheckInInfo_Login_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&check_days_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&can_pick_) -
      reinterpret_cast<char*>(&check_days_)) + sizeof(can_pick_));
}

MsgCheckInInfo::~MsgCheckInInfo() {
  // @@protoc_insertion_point(destructor:MsgCheckInInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgCheckInInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgCheckInInfo::ArenaDtor(void* object) {
  MsgCheckInInfo* _this = reinterpret_cast< MsgCheckInInfo* >(object);
  (void)_this;
}
void MsgCheckInInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgCheckInInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgCheckInInfo& MsgCheckInInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgCheckInInfo_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgCheckInInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgCheckInInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  checkincfg_.Clear();
  ::memset(&check_days_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_pick_) -
      reinterpret_cast<char*>(&check_days_)) + sizeof(can_pick_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgCheckInInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 check_days = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          check_days_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_open = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool can_pick = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          can_pick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .MsgCommonKV CheckInCfg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_checkincfg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgCheckInInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgCheckInInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 check_days = 1;
  if (this->check_days() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_check_days(), target);
  }

  // bool is_open = 2;
  if (this->is_open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_open(), target);
  }

  // bool can_pick = 3;
  if (this->can_pick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_can_pick(), target);
  }

  // repeated .MsgCommonKV CheckInCfg = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_checkincfg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_checkincfg(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgCheckInInfo)
  return target;
}

size_t MsgCheckInInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgCheckInInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MsgCommonKV CheckInCfg = 4;
  total_size += 1UL * this->_internal_checkincfg_size();
  for (const auto& msg : this->checkincfg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 check_days = 1;
  if (this->check_days() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_check_days());
  }

  // bool is_open = 2;
  if (this->is_open() != 0) {
    total_size += 1 + 1;
  }

  // bool can_pick = 3;
  if (this->can_pick() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgCheckInInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgCheckInInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgCheckInInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgCheckInInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgCheckInInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgCheckInInfo)
    MergeFrom(*source);
  }
}

void MsgCheckInInfo::MergeFrom(const MsgCheckInInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgCheckInInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  checkincfg_.MergeFrom(from.checkincfg_);
  if (from.check_days() != 0) {
    _internal_set_check_days(from._internal_check_days());
  }
  if (from.is_open() != 0) {
    _internal_set_is_open(from._internal_is_open());
  }
  if (from.can_pick() != 0) {
    _internal_set_can_pick(from._internal_can_pick());
  }
}

void MsgCheckInInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgCheckInInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCheckInInfo::CopyFrom(const MsgCheckInInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgCheckInInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCheckInInfo::IsInitialized() const {
  return true;
}

void MsgCheckInInfo::InternalSwap(MsgCheckInInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  checkincfg_.InternalSwap(&other->checkincfg_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgCheckInInfo, can_pick_)
      + sizeof(MsgCheckInInfo::can_pick_)
      - PROTOBUF_FIELD_OFFSET(MsgCheckInInfo, check_days_)>(
          reinterpret_cast<char*>(&check_days_),
          reinterpret_cast<char*>(&other->check_days_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgCheckInInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgTurntableHistoryData::_Internal {
 public:
};

MsgTurntableHistoryData::MsgTurntableHistoryData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgTurntableHistoryData)
}
MsgTurntableHistoryData::MsgTurntableHistoryData(const MsgTurntableHistoryData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick_name().empty()) {
    nick_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nick_name(), 
      GetArena());
  }
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_time().empty()) {
    time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_time(), 
      GetArena());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&award_type_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(award_type_));
  // @@protoc_insertion_point(copy_constructor:MsgTurntableHistoryData)
}

void MsgTurntableHistoryData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgTurntableHistoryData_Login_2eproto.base);
  nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&award_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(award_type_));
}

MsgTurntableHistoryData::~MsgTurntableHistoryData() {
  // @@protoc_insertion_point(destructor:MsgTurntableHistoryData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgTurntableHistoryData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nick_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgTurntableHistoryData::ArenaDtor(void* object) {
  MsgTurntableHistoryData* _this = reinterpret_cast< MsgTurntableHistoryData* >(object);
  (void)_this;
}
void MsgTurntableHistoryData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgTurntableHistoryData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgTurntableHistoryData& MsgTurntableHistoryData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgTurntableHistoryData_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgTurntableHistoryData::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgTurntableHistoryData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nick_name_.ClearToEmpty();
  time_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&award_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(award_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgTurntableHistoryData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nick_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nick_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgTurntableHistoryData.nick_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 award = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          award_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 award_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          award_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgTurntableHistoryData.time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgTurntableHistoryData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgTurntableHistoryData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // string nick_name = 2;
  if (this->nick_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick_name().data(), static_cast<int>(this->_internal_nick_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgTurntableHistoryData.nick_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nick_name(), target);
  }

  // int32 score = 3;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_score(), target);
  }

  // int32 award = 4;
  if (this->award() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_award(), target);
  }

  // int32 type = 5;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_type(), target);
  }

  // int32 award_type = 6;
  if (this->award_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_award_type(), target);
  }

  // string time = 7;
  if (this->time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time().data(), static_cast<int>(this->_internal_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgTurntableHistoryData.time");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgTurntableHistoryData)
  return target;
}

size_t MsgTurntableHistoryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgTurntableHistoryData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nick_name = 2;
  if (this->nick_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick_name());
  }

  // string time = 7;
  if (this->time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time());
  }

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // int32 score = 3;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  // int32 award = 4;
  if (this->award() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_award());
  }

  // int32 type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 award_type = 6;
  if (this->award_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_award_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgTurntableHistoryData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgTurntableHistoryData)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgTurntableHistoryData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgTurntableHistoryData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgTurntableHistoryData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgTurntableHistoryData)
    MergeFrom(*source);
  }
}

void MsgTurntableHistoryData::MergeFrom(const MsgTurntableHistoryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgTurntableHistoryData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nick_name().size() > 0) {
    _internal_set_nick_name(from._internal_nick_name());
  }
  if (from.time().size() > 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.award() != 0) {
    _internal_set_award(from._internal_award());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.award_type() != 0) {
    _internal_set_award_type(from._internal_award_type());
  }
}

void MsgTurntableHistoryData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgTurntableHistoryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTurntableHistoryData::CopyFrom(const MsgTurntableHistoryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgTurntableHistoryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTurntableHistoryData::IsInitialized() const {
  return true;
}

void MsgTurntableHistoryData::InternalSwap(MsgTurntableHistoryData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nick_name_.Swap(&other->nick_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  time_.Swap(&other->time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgTurntableHistoryData, award_type_)
      + sizeof(MsgTurntableHistoryData::award_type_)
      - PROTOBUF_FIELD_OFFSET(MsgTurntableHistoryData, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgTurntableHistoryData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgTurnPlayInfo::_Internal {
 public:
};

MsgTurnPlayInfo::MsgTurnPlayInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgTurnPlayInfo)
}
MsgTurnPlayInfo::MsgTurnPlayInfo(const MsgTurnPlayInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&play_num_, &from.play_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&turn_max_pro_) -
    reinterpret_cast<char*>(&play_num_)) + sizeof(turn_max_pro_));
  // @@protoc_insertion_point(copy_constructor:MsgTurnPlayInfo)
}

void MsgTurnPlayInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&play_num_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&turn_max_pro_) -
      reinterpret_cast<char*>(&play_num_)) + sizeof(turn_max_pro_));
}

MsgTurnPlayInfo::~MsgTurnPlayInfo() {
  // @@protoc_insertion_point(destructor:MsgTurnPlayInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgTurnPlayInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgTurnPlayInfo::ArenaDtor(void* object) {
  MsgTurnPlayInfo* _this = reinterpret_cast< MsgTurnPlayInfo* >(object);
  (void)_this;
}
void MsgTurnPlayInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgTurnPlayInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgTurnPlayInfo& MsgTurnPlayInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgTurnPlayInfo_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgTurnPlayInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgTurnPlayInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&play_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&turn_max_pro_) -
      reinterpret_cast<char*>(&play_num_)) + sizeof(turn_max_pro_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgTurnPlayInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 play_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          play_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 limit_turn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          limit_turn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 need_score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          need_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 turn_pro = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          turn_pro_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 turn_max_pro = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          turn_max_pro_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgTurnPlayInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgTurnPlayInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 play_num = 1;
  if (this->play_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_play_num(), target);
  }

  // int32 limit_turn = 2;
  if (this->limit_turn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_limit_turn(), target);
  }

  // int32 need_score = 3;
  if (this->need_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_need_score(), target);
  }

  // int32 turn_pro = 4;
  if (this->turn_pro() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_turn_pro(), target);
  }

  // int32 turn_max_pro = 5;
  if (this->turn_max_pro() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_turn_max_pro(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgTurnPlayInfo)
  return target;
}

size_t MsgTurnPlayInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgTurnPlayInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 play_num = 1;
  if (this->play_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_play_num());
  }

  // int32 limit_turn = 2;
  if (this->limit_turn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_limit_turn());
  }

  // int32 need_score = 3;
  if (this->need_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_need_score());
  }

  // int32 turn_pro = 4;
  if (this->turn_pro() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_turn_pro());
  }

  // int32 turn_max_pro = 5;
  if (this->turn_max_pro() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_turn_max_pro());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgTurnPlayInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgTurnPlayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgTurnPlayInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgTurnPlayInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgTurnPlayInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgTurnPlayInfo)
    MergeFrom(*source);
  }
}

void MsgTurnPlayInfo::MergeFrom(const MsgTurnPlayInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgTurnPlayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.play_num() != 0) {
    _internal_set_play_num(from._internal_play_num());
  }
  if (from.limit_turn() != 0) {
    _internal_set_limit_turn(from._internal_limit_turn());
  }
  if (from.need_score() != 0) {
    _internal_set_need_score(from._internal_need_score());
  }
  if (from.turn_pro() != 0) {
    _internal_set_turn_pro(from._internal_turn_pro());
  }
  if (from.turn_max_pro() != 0) {
    _internal_set_turn_max_pro(from._internal_turn_max_pro());
  }
}

void MsgTurnPlayInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgTurnPlayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTurnPlayInfo::CopyFrom(const MsgTurnPlayInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgTurnPlayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTurnPlayInfo::IsInitialized() const {
  return true;
}

void MsgTurnPlayInfo::InternalSwap(MsgTurnPlayInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgTurnPlayInfo, turn_max_pro_)
      + sizeof(MsgTurnPlayInfo::turn_max_pro_)
      - PROTOBUF_FIELD_OFFSET(MsgTurnPlayInfo, play_num_)>(
          reinterpret_cast<char*>(&play_num_),
          reinterpret_cast<char*>(&other->play_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgTurnPlayInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgTurnCfg::_Internal {
 public:
};

MsgTurnCfg::MsgTurnCfg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgTurnCfg)
}
MsgTurnCfg::MsgTurnCfg(const MsgTurnCfg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&index_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:MsgTurnCfg)
}

void MsgTurnCfg::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&index_)) + sizeof(type_));
}

MsgTurnCfg::~MsgTurnCfg() {
  // @@protoc_insertion_point(destructor:MsgTurnCfg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgTurnCfg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgTurnCfg::ArenaDtor(void* object) {
  MsgTurnCfg* _this = reinterpret_cast< MsgTurnCfg* >(object);
  (void)_this;
}
void MsgTurnCfg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgTurnCfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgTurnCfg& MsgTurnCfg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgTurnCfg_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgTurnCfg::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgTurnCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&index_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgTurnCfg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 arwad = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          arwad_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 arwad_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          arwad_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgTurnCfg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgTurnCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 arwad = 2;
  if (this->arwad() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_arwad(), target);
  }

  // int32 arwad_type = 3;
  if (this->arwad_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_arwad_type(), target);
  }

  // int32 type = 4;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgTurnCfg)
  return target;
}

size_t MsgTurnCfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgTurnCfg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // int32 arwad = 2;
  if (this->arwad() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_arwad());
  }

  // int32 arwad_type = 3;
  if (this->arwad_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_arwad_type());
  }

  // int32 type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgTurnCfg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgTurnCfg)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgTurnCfg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgTurnCfg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgTurnCfg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgTurnCfg)
    MergeFrom(*source);
  }
}

void MsgTurnCfg::MergeFrom(const MsgTurnCfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgTurnCfg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.arwad() != 0) {
    _internal_set_arwad(from._internal_arwad());
  }
  if (from.arwad_type() != 0) {
    _internal_set_arwad_type(from._internal_arwad_type());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void MsgTurnCfg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgTurnCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTurnCfg::CopyFrom(const MsgTurnCfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgTurnCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTurnCfg::IsInitialized() const {
  return true;
}

void MsgTurnCfg::InternalSwap(MsgTurnCfg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgTurnCfg, type_)
      + sizeof(MsgTurnCfg::type_)
      - PROTOBUF_FIELD_OFFSET(MsgTurnCfg, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgTurnCfg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgTurntableData::_Internal {
 public:
  static const ::MsgTurnPlayInfo& silver_info(const MsgTurntableData* msg);
  static const ::MsgTurnPlayInfo& gold_info(const MsgTurntableData* msg);
};

const ::MsgTurnPlayInfo&
MsgTurntableData::_Internal::silver_info(const MsgTurntableData* msg) {
  return *msg->silver_info_;
}
const ::MsgTurnPlayInfo&
MsgTurntableData::_Internal::gold_info(const MsgTurntableData* msg) {
  return *msg->gold_info_;
}
MsgTurntableData::MsgTurntableData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  silver_cfg_(arena),
  gold_cfg_(arena),
  this_history_(arena),
  big_history_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgTurntableData)
}
MsgTurntableData::MsgTurntableData(const MsgTurntableData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      silver_cfg_(from.silver_cfg_),
      gold_cfg_(from.gold_cfg_),
      this_history_(from.this_history_),
      big_history_(from.big_history_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_silver_info()) {
    silver_info_ = new ::MsgTurnPlayInfo(*from.silver_info_);
  } else {
    silver_info_ = nullptr;
  }
  if (from._internal_has_gold_info()) {
    gold_info_ = new ::MsgTurnPlayInfo(*from.gold_info_);
  } else {
    gold_info_ = nullptr;
  }
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&gold_to_score_) -
    reinterpret_cast<char*>(&score_)) + sizeof(gold_to_score_));
  // @@protoc_insertion_point(copy_constructor:MsgTurntableData)
}

void MsgTurntableData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgTurntableData_Login_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&silver_info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&gold_to_score_) -
      reinterpret_cast<char*>(&silver_info_)) + sizeof(gold_to_score_));
}

MsgTurntableData::~MsgTurntableData() {
  // @@protoc_insertion_point(destructor:MsgTurntableData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgTurntableData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete silver_info_;
  if (this != internal_default_instance()) delete gold_info_;
}

void MsgTurntableData::ArenaDtor(void* object) {
  MsgTurntableData* _this = reinterpret_cast< MsgTurntableData* >(object);
  (void)_this;
}
void MsgTurntableData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgTurntableData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgTurntableData& MsgTurntableData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgTurntableData_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgTurntableData::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgTurntableData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  silver_cfg_.Clear();
  gold_cfg_.Clear();
  this_history_.Clear();
  big_history_.Clear();
  if (GetArena() == nullptr && silver_info_ != nullptr) {
    delete silver_info_;
  }
  silver_info_ = nullptr;
  if (GetArena() == nullptr && gold_info_ != nullptr) {
    delete gold_info_;
  }
  gold_info_ = nullptr;
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gold_to_score_) -
      reinterpret_cast<char*>(&score_)) + sizeof(gold_to_score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgTurntableData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gold_to_score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gold_to_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MsgTurnPlayInfo silver_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_silver_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MsgTurnPlayInfo gold_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_gold_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .MsgTurnCfg silver_cfg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_silver_cfg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .MsgTurnCfg gold_cfg = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gold_cfg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .MsgTurntableHistoryData this_history = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_this_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .MsgTurntableHistoryData big_history = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_big_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgTurntableData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgTurntableData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 score = 1;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_score(), target);
  }

  // int32 gold_to_score = 3;
  if (this->gold_to_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_gold_to_score(), target);
  }

  // .MsgTurnPlayInfo silver_info = 4;
  if (this->has_silver_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::silver_info(this), target, stream);
  }

  // .MsgTurnPlayInfo gold_info = 5;
  if (this->has_gold_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::gold_info(this), target, stream);
  }

  // repeated .MsgTurnCfg silver_cfg = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_silver_cfg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_silver_cfg(i), target, stream);
  }

  // repeated .MsgTurnCfg gold_cfg = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gold_cfg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_gold_cfg(i), target, stream);
  }

  // repeated .MsgTurntableHistoryData this_history = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_this_history_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_this_history(i), target, stream);
  }

  // repeated .MsgTurntableHistoryData big_history = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_big_history_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_big_history(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgTurntableData)
  return target;
}

size_t MsgTurntableData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgTurntableData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MsgTurnCfg silver_cfg = 6;
  total_size += 1UL * this->_internal_silver_cfg_size();
  for (const auto& msg : this->silver_cfg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .MsgTurnCfg gold_cfg = 7;
  total_size += 1UL * this->_internal_gold_cfg_size();
  for (const auto& msg : this->gold_cfg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .MsgTurntableHistoryData this_history = 8;
  total_size += 1UL * this->_internal_this_history_size();
  for (const auto& msg : this->this_history_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .MsgTurntableHistoryData big_history = 9;
  total_size += 1UL * this->_internal_big_history_size();
  for (const auto& msg : this->big_history_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .MsgTurnPlayInfo silver_info = 4;
  if (this->has_silver_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *silver_info_);
  }

  // .MsgTurnPlayInfo gold_info = 5;
  if (this->has_gold_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gold_info_);
  }

  // int64 score = 1;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_score());
  }

  // int32 gold_to_score = 3;
  if (this->gold_to_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gold_to_score());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgTurntableData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgTurntableData)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgTurntableData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgTurntableData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgTurntableData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgTurntableData)
    MergeFrom(*source);
  }
}

void MsgTurntableData::MergeFrom(const MsgTurntableData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgTurntableData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  silver_cfg_.MergeFrom(from.silver_cfg_);
  gold_cfg_.MergeFrom(from.gold_cfg_);
  this_history_.MergeFrom(from.this_history_);
  big_history_.MergeFrom(from.big_history_);
  if (from.has_silver_info()) {
    _internal_mutable_silver_info()->::MsgTurnPlayInfo::MergeFrom(from._internal_silver_info());
  }
  if (from.has_gold_info()) {
    _internal_mutable_gold_info()->::MsgTurnPlayInfo::MergeFrom(from._internal_gold_info());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.gold_to_score() != 0) {
    _internal_set_gold_to_score(from._internal_gold_to_score());
  }
}

void MsgTurntableData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgTurntableData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTurntableData::CopyFrom(const MsgTurntableData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgTurntableData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTurntableData::IsInitialized() const {
  return true;
}

void MsgTurntableData::InternalSwap(MsgTurntableData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  silver_cfg_.InternalSwap(&other->silver_cfg_);
  gold_cfg_.InternalSwap(&other->gold_cfg_);
  this_history_.InternalSwap(&other->this_history_);
  big_history_.InternalSwap(&other->big_history_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgTurntableData, gold_to_score_)
      + sizeof(MsgTurntableData::gold_to_score_)
      - PROTOBUF_FIELD_OFFSET(MsgTurntableData, silver_info_)>(
          reinterpret_cast<char*>(&silver_info_),
          reinterpret_cast<char*>(&other->silver_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgTurntableData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgTurntable::_Internal {
 public:
};

MsgTurntable::MsgTurntable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgTurntable)
}
MsgTurntable::MsgTurntable(const MsgTurntable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&turn_type_, &from.turn_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&turn_type_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:MsgTurntable)
}

void MsgTurntable::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&turn_type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&turn_type_)) + sizeof(user_id_));
}

MsgTurntable::~MsgTurntable() {
  // @@protoc_insertion_point(destructor:MsgTurntable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgTurntable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgTurntable::ArenaDtor(void* object) {
  MsgTurntable* _this = reinterpret_cast< MsgTurntable* >(object);
  (void)_this;
}
void MsgTurntable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgTurntable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgTurntable& MsgTurntable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgTurntable_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgTurntable::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgTurntable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&turn_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&turn_type_)) + sizeof(user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgTurntable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 turn_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          turn_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgTurntable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgTurntable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // int64 turn_type = 2;
  if (this->turn_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_turn_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgTurntable)
  return target;
}

size_t MsgTurntable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgTurntable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 turn_type = 2;
  if (this->turn_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_turn_type());
  }

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgTurntable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgTurntable)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgTurntable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgTurntable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgTurntable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgTurntable)
    MergeFrom(*source);
  }
}

void MsgTurntable::MergeFrom(const MsgTurntable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgTurntable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.turn_type() != 0) {
    _internal_set_turn_type(from._internal_turn_type());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void MsgTurntable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgTurntable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTurntable::CopyFrom(const MsgTurntable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgTurntable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTurntable::IsInitialized() const {
  return true;
}

void MsgTurntable::InternalSwap(MsgTurntable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgTurntable, user_id_)
      + sizeof(MsgTurntable::user_id_)
      - PROTOBUF_FIELD_OFFSET(MsgTurntable, turn_type_)>(
          reinterpret_cast<char*>(&turn_type_),
          reinterpret_cast<char*>(&other->turn_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgTurntable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgTurntableResp::_Internal {
 public:
};

MsgTurntableResp::MsgTurntableResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgTurntableResp)
}
MsgTurntableResp::MsgTurntableResp(const MsgTurntableResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&get_value_) -
    reinterpret_cast<char*>(&score_)) + sizeof(get_value_));
  // @@protoc_insertion_point(copy_constructor:MsgTurntableResp)
}

void MsgTurntableResp::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&score_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&get_value_) -
      reinterpret_cast<char*>(&score_)) + sizeof(get_value_));
}

MsgTurntableResp::~MsgTurntableResp() {
  // @@protoc_insertion_point(destructor:MsgTurntableResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgTurntableResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgTurntableResp::ArenaDtor(void* object) {
  MsgTurntableResp* _this = reinterpret_cast< MsgTurntableResp* >(object);
  (void)_this;
}
void MsgTurntableResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgTurntableResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgTurntableResp& MsgTurntableResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgTurntableResp_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgTurntableResp::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgTurntableResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&get_value_) -
      reinterpret_cast<char*>(&score_)) + sizeof(get_value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgTurntableResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 award_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          award_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 new_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          new_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 turnIndex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          turnindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 get_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          get_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgTurntableResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgTurntableResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 score = 1;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_score(), target);
  }

  // int32 award_type = 2;
  if (this->award_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_award_type(), target);
  }

  // int64 new_value = 3;
  if (this->new_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_new_value(), target);
  }

  // int64 turnIndex = 4;
  if (this->turnindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_turnindex(), target);
  }

  // int64 get_value = 5;
  if (this->get_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_get_value(), target);
  }

  // int32 code = 6;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgTurntableResp)
  return target;
}

size_t MsgTurntableResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgTurntableResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 score = 1;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_score());
  }

  // int64 new_value = 3;
  if (this->new_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_new_value());
  }

  // int64 turnIndex = 4;
  if (this->turnindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_turnindex());
  }

  // int32 award_type = 2;
  if (this->award_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_award_type());
  }

  // int32 code = 6;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  // int64 get_value = 5;
  if (this->get_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_get_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgTurntableResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgTurntableResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgTurntableResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgTurntableResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgTurntableResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgTurntableResp)
    MergeFrom(*source);
  }
}

void MsgTurntableResp::MergeFrom(const MsgTurntableResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgTurntableResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.new_value() != 0) {
    _internal_set_new_value(from._internal_new_value());
  }
  if (from.turnindex() != 0) {
    _internal_set_turnindex(from._internal_turnindex());
  }
  if (from.award_type() != 0) {
    _internal_set_award_type(from._internal_award_type());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.get_value() != 0) {
    _internal_set_get_value(from._internal_get_value());
  }
}

void MsgTurntableResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgTurntableResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTurntableResp::CopyFrom(const MsgTurntableResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgTurntableResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTurntableResp::IsInitialized() const {
  return true;
}

void MsgTurntableResp::InternalSwap(MsgTurntableResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgTurntableResp, get_value_)
      + sizeof(MsgTurntableResp::get_value_)
      - PROTOBUF_FIELD_OFFSET(MsgTurntableResp, score_)>(
          reinterpret_cast<char*>(&score_),
          reinterpret_cast<char*>(&other->score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgTurntableResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgMailsInfo::_Internal {
 public:
};

MsgMailsInfo::MsgMailsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mails_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgMailsInfo)
}
MsgMailsInfo::MsgMailsInfo(const MsgMailsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mails_(from.mails_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MsgMailsInfo)
}

void MsgMailsInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgMailsInfo_Login_2eproto.base);
}

MsgMailsInfo::~MsgMailsInfo() {
  // @@protoc_insertion_point(destructor:MsgMailsInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgMailsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgMailsInfo::ArenaDtor(void* object) {
  MsgMailsInfo* _this = reinterpret_cast< MsgMailsInfo* >(object);
  (void)_this;
}
void MsgMailsInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgMailsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgMailsInfo& MsgMailsInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgMailsInfo_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgMailsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgMailsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mails_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgMailsInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .MsgMailData mails = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgMailsInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgMailsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MsgMailData mails = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mails_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_mails(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgMailsInfo)
  return target;
}

size_t MsgMailsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgMailsInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MsgMailData mails = 1;
  total_size += 1UL * this->_internal_mails_size();
  for (const auto& msg : this->mails_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgMailsInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgMailsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgMailsInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgMailsInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgMailsInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgMailsInfo)
    MergeFrom(*source);
  }
}

void MsgMailsInfo::MergeFrom(const MsgMailsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgMailsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mails_.MergeFrom(from.mails_);
}

void MsgMailsInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgMailsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMailsInfo::CopyFrom(const MsgMailsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgMailsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMailsInfo::IsInitialized() const {
  return true;
}

void MsgMailsInfo::InternalSwap(MsgMailsInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mails_.InternalSwap(&other->mails_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgMailsInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgMailData::_Internal {
 public:
};

MsgMailData::MsgMailData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgMailData)
}
MsgMailData::MsgMailData(const MsgMailData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArena());
  }
  ::memcpy(&mail_id_, &from.mail_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_user_id_) -
    reinterpret_cast<char*>(&mail_id_)) + sizeof(to_user_id_));
  // @@protoc_insertion_point(copy_constructor:MsgMailData)
}

void MsgMailData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgMailData_Login_2eproto.base);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&mail_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&to_user_id_) -
      reinterpret_cast<char*>(&mail_id_)) + sizeof(to_user_id_));
}

MsgMailData::~MsgMailData() {
  // @@protoc_insertion_point(destructor:MsgMailData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgMailData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgMailData::ArenaDtor(void* object) {
  MsgMailData* _this = reinterpret_cast< MsgMailData* >(object);
  (void)_this;
}
void MsgMailData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgMailData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgMailData& MsgMailData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgMailData_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgMailData::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgMailData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmpty();
  content_.ClearToEmpty();
  ::memset(&mail_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_user_id_) -
      reinterpret_cast<char*>(&mail_id_)) + sizeof(to_user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgMailData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mail_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mail_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 send_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          send_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 send_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          send_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgMailData.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgMailData.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 gold = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_read = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          is_read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_claim = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          is_claim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 to_user_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          to_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgMailData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgMailData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mail_id = 1;
  if (this->mail_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mail_id(), target);
  }

  // int32 send_user_id = 2;
  if (this->send_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_send_user_id(), target);
  }

  // int32 send_time = 3;
  if (this->send_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_send_time(), target);
  }

  // string title = 4;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgMailData.title");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_title(), target);
  }

  // string content = 5;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgMailData.content");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_content(), target);
  }

  // int64 gold = 6;
  if (this->gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_gold(), target);
  }

  // bool is_read = 7;
  if (this->is_read() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_read(), target);
  }

  // bool is_claim = 8;
  if (this->is_claim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_claim(), target);
  }

  // int32 to_user_id = 9;
  if (this->to_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_to_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgMailData)
  return target;
}

size_t MsgMailData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgMailData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 4;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string content = 5;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // int32 mail_id = 1;
  if (this->mail_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mail_id());
  }

  // int32 send_user_id = 2;
  if (this->send_user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_send_user_id());
  }

  // int64 gold = 6;
  if (this->gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_gold());
  }

  // int32 send_time = 3;
  if (this->send_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_send_time());
  }

  // bool is_read = 7;
  if (this->is_read() != 0) {
    total_size += 1 + 1;
  }

  // bool is_claim = 8;
  if (this->is_claim() != 0) {
    total_size += 1 + 1;
  }

  // int32 to_user_id = 9;
  if (this->to_user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_to_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgMailData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgMailData)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgMailData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgMailData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgMailData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgMailData)
    MergeFrom(*source);
  }
}

void MsgMailData::MergeFrom(const MsgMailData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgMailData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.title().size() > 0) {
    _internal_set_title(from._internal_title());
  }
  if (from.content().size() > 0) {
    _internal_set_content(from._internal_content());
  }
  if (from.mail_id() != 0) {
    _internal_set_mail_id(from._internal_mail_id());
  }
  if (from.send_user_id() != 0) {
    _internal_set_send_user_id(from._internal_send_user_id());
  }
  if (from.gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
  if (from.send_time() != 0) {
    _internal_set_send_time(from._internal_send_time());
  }
  if (from.is_read() != 0) {
    _internal_set_is_read(from._internal_is_read());
  }
  if (from.is_claim() != 0) {
    _internal_set_is_claim(from._internal_is_claim());
  }
  if (from.to_user_id() != 0) {
    _internal_set_to_user_id(from._internal_to_user_id());
  }
}

void MsgMailData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgMailData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMailData::CopyFrom(const MsgMailData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgMailData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMailData::IsInitialized() const {
  return true;
}

void MsgMailData::InternalSwap(MsgMailData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgMailData, to_user_id_)
      + sizeof(MsgMailData::to_user_id_)
      - PROTOBUF_FIELD_OFFSET(MsgMailData, mail_id_)>(
          reinterpret_cast<char*>(&mail_id_),
          reinterpret_cast<char*>(&other->mail_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgMailData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgShareData::_Internal {
 public:
};

MsgShareData::MsgShareData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bind_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgShareData)
}
MsgShareData::MsgShareData(const MsgShareData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bind_list_(from.bind_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invite_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_invite_code().empty()) {
    invite_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invite_code(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:MsgShareData)
}

void MsgShareData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgShareData_Login_2eproto.base);
  invite_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MsgShareData::~MsgShareData() {
  // @@protoc_insertion_point(destructor:MsgShareData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgShareData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  invite_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgShareData::ArenaDtor(void* object) {
  MsgShareData* _this = reinterpret_cast< MsgShareData* >(object);
  (void)_this;
}
void MsgShareData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgShareData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgShareData& MsgShareData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgShareData_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgShareData::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgShareData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bind_list_.Clear();
  invite_code_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgShareData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string invite_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_invite_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgShareData.invite_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 bind_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bind_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_bind_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgShareData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgShareData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string invite_code = 1;
  if (this->invite_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_invite_code().data(), static_cast<int>(this->_internal_invite_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgShareData.invite_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_invite_code(), target);
  }

  // repeated int32 bind_list = 2;
  {
    int byte_size = _bind_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_bind_list(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgShareData)
  return target;
}

size_t MsgShareData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgShareData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 bind_list = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bind_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bind_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string invite_code = 1;
  if (this->invite_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invite_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgShareData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgShareData)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgShareData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgShareData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgShareData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgShareData)
    MergeFrom(*source);
  }
}

void MsgShareData::MergeFrom(const MsgShareData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgShareData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bind_list_.MergeFrom(from.bind_list_);
  if (from.invite_code().size() > 0) {
    _internal_set_invite_code(from._internal_invite_code());
  }
}

void MsgShareData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgShareData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgShareData::CopyFrom(const MsgShareData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgShareData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgShareData::IsInitialized() const {
  return true;
}

void MsgShareData::InternalSwap(MsgShareData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bind_list_.InternalSwap(&other->bind_list_);
  invite_code_.Swap(&other->invite_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgShareData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgBindParentData::_Internal {
 public:
};

MsgBindParentData::MsgBindParentData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgBindParentData)
}
MsgBindParentData::MsgBindParentData(const MsgBindParentData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_strcode().empty()) {
    strcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_strcode(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:MsgBindParentData)
}

void MsgBindParentData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgBindParentData_Login_2eproto.base);
  strcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MsgBindParentData::~MsgBindParentData() {
  // @@protoc_insertion_point(destructor:MsgBindParentData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgBindParentData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgBindParentData::ArenaDtor(void* object) {
  MsgBindParentData* _this = reinterpret_cast< MsgBindParentData* >(object);
  (void)_this;
}
void MsgBindParentData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgBindParentData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgBindParentData& MsgBindParentData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgBindParentData_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgBindParentData::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgBindParentData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strcode_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgBindParentData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string strCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_strcode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgBindParentData.strCode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgBindParentData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgBindParentData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string strCode = 1;
  if (this->strcode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strcode().data(), static_cast<int>(this->_internal_strcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgBindParentData.strCode");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_strcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgBindParentData)
  return target;
}

size_t MsgBindParentData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgBindParentData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string strCode = 1;
  if (this->strcode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgBindParentData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgBindParentData)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgBindParentData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgBindParentData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgBindParentData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgBindParentData)
    MergeFrom(*source);
  }
}

void MsgBindParentData::MergeFrom(const MsgBindParentData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgBindParentData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.strcode().size() > 0) {
    _internal_set_strcode(from._internal_strcode());
  }
}

void MsgBindParentData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgBindParentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBindParentData::CopyFrom(const MsgBindParentData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgBindParentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBindParentData::IsInitialized() const {
  return true;
}

void MsgBindParentData::InternalSwap(MsgBindParentData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  strcode_.Swap(&other->strcode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgBindParentData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgInviteAwardInfo::_Internal {
 public:
};

MsgInviteAwardInfo::MsgInviteAwardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  awardcfg_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgInviteAwardInfo)
}
MsgInviteAwardInfo::MsgInviteAwardInfo(const MsgInviteAwardInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      awardcfg_(from.awardcfg_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&invitenum_, &from.invitenum_,
    static_cast<size_t>(reinterpret_cast<char*>(&pickindex_) -
    reinterpret_cast<char*>(&invitenum_)) + sizeof(pickindex_));
  // @@protoc_insertion_point(copy_constructor:MsgInviteAwardInfo)
}

void MsgInviteAwardInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgInviteAwardInfo_Login_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&invitenum_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&pickindex_) -
      reinterpret_cast<char*>(&invitenum_)) + sizeof(pickindex_));
}

MsgInviteAwardInfo::~MsgInviteAwardInfo() {
  // @@protoc_insertion_point(destructor:MsgInviteAwardInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgInviteAwardInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgInviteAwardInfo::ArenaDtor(void* object) {
  MsgInviteAwardInfo* _this = reinterpret_cast< MsgInviteAwardInfo* >(object);
  (void)_this;
}
void MsgInviteAwardInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgInviteAwardInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgInviteAwardInfo& MsgInviteAwardInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgInviteAwardInfo_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgInviteAwardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgInviteAwardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  awardcfg_.Clear();
  ::memset(&invitenum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pickindex_) -
      reinterpret_cast<char*>(&invitenum_)) + sizeof(pickindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgInviteAwardInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 inviteNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          invitenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pickIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pickindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .MsgInviteAwardConfig awardCfg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_awardcfg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgInviteAwardInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgInviteAwardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 inviteNum = 1;
  if (this->invitenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_invitenum(), target);
  }

  // int32 pickIndex = 2;
  if (this->pickindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_pickindex(), target);
  }

  // repeated .MsgInviteAwardConfig awardCfg = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_awardcfg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_awardcfg(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgInviteAwardInfo)
  return target;
}

size_t MsgInviteAwardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgInviteAwardInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MsgInviteAwardConfig awardCfg = 3;
  total_size += 1UL * this->_internal_awardcfg_size();
  for (const auto& msg : this->awardcfg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 inviteNum = 1;
  if (this->invitenum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_invitenum());
  }

  // int32 pickIndex = 2;
  if (this->pickindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pickindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgInviteAwardInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgInviteAwardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgInviteAwardInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgInviteAwardInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgInviteAwardInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgInviteAwardInfo)
    MergeFrom(*source);
  }
}

void MsgInviteAwardInfo::MergeFrom(const MsgInviteAwardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgInviteAwardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  awardcfg_.MergeFrom(from.awardcfg_);
  if (from.invitenum() != 0) {
    _internal_set_invitenum(from._internal_invitenum());
  }
  if (from.pickindex() != 0) {
    _internal_set_pickindex(from._internal_pickindex());
  }
}

void MsgInviteAwardInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgInviteAwardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgInviteAwardInfo::CopyFrom(const MsgInviteAwardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgInviteAwardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgInviteAwardInfo::IsInitialized() const {
  return true;
}

void MsgInviteAwardInfo::InternalSwap(MsgInviteAwardInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  awardcfg_.InternalSwap(&other->awardcfg_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgInviteAwardInfo, pickindex_)
      + sizeof(MsgInviteAwardInfo::pickindex_)
      - PROTOBUF_FIELD_OFFSET(MsgInviteAwardInfo, invitenum_)>(
          reinterpret_cast<char*>(&invitenum_),
          reinterpret_cast<char*>(&other->invitenum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgInviteAwardInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgInviteAwardConfig::_Internal {
 public:
};

MsgInviteAwardConfig::MsgInviteAwardConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgInviteAwardConfig)
}
MsgInviteAwardConfig::MsgInviteAwardConfig(const MsgInviteAwardConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&invitenum_, &from.invitenum_,
    static_cast<size_t>(reinterpret_cast<char*>(&award_) -
    reinterpret_cast<char*>(&invitenum_)) + sizeof(award_));
  // @@protoc_insertion_point(copy_constructor:MsgInviteAwardConfig)
}

void MsgInviteAwardConfig::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&invitenum_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&award_) -
      reinterpret_cast<char*>(&invitenum_)) + sizeof(award_));
}

MsgInviteAwardConfig::~MsgInviteAwardConfig() {
  // @@protoc_insertion_point(destructor:MsgInviteAwardConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgInviteAwardConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgInviteAwardConfig::ArenaDtor(void* object) {
  MsgInviteAwardConfig* _this = reinterpret_cast< MsgInviteAwardConfig* >(object);
  (void)_this;
}
void MsgInviteAwardConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgInviteAwardConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgInviteAwardConfig& MsgInviteAwardConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgInviteAwardConfig_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgInviteAwardConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgInviteAwardConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&invitenum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&award_) -
      reinterpret_cast<char*>(&invitenum_)) + sizeof(award_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgInviteAwardConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 inviteNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          invitenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 award = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          award_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgInviteAwardConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgInviteAwardConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 inviteNum = 1;
  if (this->invitenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_invitenum(), target);
  }

  // int32 award = 2;
  if (this->award() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_award(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgInviteAwardConfig)
  return target;
}

size_t MsgInviteAwardConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgInviteAwardConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 inviteNum = 1;
  if (this->invitenum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_invitenum());
  }

  // int32 award = 2;
  if (this->award() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_award());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgInviteAwardConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgInviteAwardConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgInviteAwardConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgInviteAwardConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgInviteAwardConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgInviteAwardConfig)
    MergeFrom(*source);
  }
}

void MsgInviteAwardConfig::MergeFrom(const MsgInviteAwardConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgInviteAwardConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.invitenum() != 0) {
    _internal_set_invitenum(from._internal_invitenum());
  }
  if (from.award() != 0) {
    _internal_set_award(from._internal_award());
  }
}

void MsgInviteAwardConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgInviteAwardConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgInviteAwardConfig::CopyFrom(const MsgInviteAwardConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgInviteAwardConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgInviteAwardConfig::IsInitialized() const {
  return true;
}

void MsgInviteAwardConfig::InternalSwap(MsgInviteAwardConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgInviteAwardConfig, award_)
      + sizeof(MsgInviteAwardConfig::award_)
      - PROTOBUF_FIELD_OFFSET(MsgInviteAwardConfig, invitenum_)>(
          reinterpret_cast<char*>(&invitenum_),
          reinterpret_cast<char*>(&other->invitenum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgInviteAwardConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgRechargeInfo::_Internal {
 public:
};

MsgRechargeInfo::MsgRechargeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgRechargeInfo)
}
MsgRechargeInfo::MsgRechargeInfo(const MsgRechargeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invitecode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_invitecode().empty()) {
    invitecode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invitecode(), 
      GetArena());
  }
  ::memcpy(&todayaward_, &from.todayaward_,
    static_cast<size_t>(reinterpret_cast<char*>(&invitenum_) -
    reinterpret_cast<char*>(&todayaward_)) + sizeof(invitenum_));
  // @@protoc_insertion_point(copy_constructor:MsgRechargeInfo)
}

void MsgRechargeInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgRechargeInfo_Login_2eproto.base);
  invitecode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&todayaward_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&invitenum_) -
      reinterpret_cast<char*>(&todayaward_)) + sizeof(invitenum_));
}

MsgRechargeInfo::~MsgRechargeInfo() {
  // @@protoc_insertion_point(destructor:MsgRechargeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgRechargeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  invitecode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgRechargeInfo::ArenaDtor(void* object) {
  MsgRechargeInfo* _this = reinterpret_cast< MsgRechargeInfo* >(object);
  (void)_this;
}
void MsgRechargeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgRechargeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgRechargeInfo& MsgRechargeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgRechargeInfo_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgRechargeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgRechargeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  invitecode_.ClearToEmpty();
  ::memset(&todayaward_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&invitenum_) -
      reinterpret_cast<char*>(&todayaward_)) + sizeof(invitenum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgRechargeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 inviteNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          invitenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 todayAward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          todayaward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 totalAward = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          totalaward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 canPickAmount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          canpickamount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string inviteCode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_invitecode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgRechargeInfo.inviteCode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgRechargeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRechargeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 inviteNum = 1;
  if (this->invitenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_invitenum(), target);
  }

  // int64 todayAward = 2;
  if (this->todayaward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_todayaward(), target);
  }

  // int64 totalAward = 3;
  if (this->totalaward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_totalaward(), target);
  }

  // int64 canPickAmount = 4;
  if (this->canpickamount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_canpickamount(), target);
  }

  // string inviteCode = 5;
  if (this->invitecode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_invitecode().data(), static_cast<int>(this->_internal_invitecode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgRechargeInfo.inviteCode");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_invitecode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRechargeInfo)
  return target;
}

size_t MsgRechargeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgRechargeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string inviteCode = 5;
  if (this->invitecode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invitecode());
  }

  // int64 todayAward = 2;
  if (this->todayaward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_todayaward());
  }

  // int64 totalAward = 3;
  if (this->totalaward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_totalaward());
  }

  // int64 canPickAmount = 4;
  if (this->canpickamount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_canpickamount());
  }

  // int32 inviteNum = 1;
  if (this->invitenum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_invitenum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgRechargeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgRechargeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgRechargeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgRechargeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgRechargeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgRechargeInfo)
    MergeFrom(*source);
  }
}

void MsgRechargeInfo::MergeFrom(const MsgRechargeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgRechargeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.invitecode().size() > 0) {
    _internal_set_invitecode(from._internal_invitecode());
  }
  if (from.todayaward() != 0) {
    _internal_set_todayaward(from._internal_todayaward());
  }
  if (from.totalaward() != 0) {
    _internal_set_totalaward(from._internal_totalaward());
  }
  if (from.canpickamount() != 0) {
    _internal_set_canpickamount(from._internal_canpickamount());
  }
  if (from.invitenum() != 0) {
    _internal_set_invitenum(from._internal_invitenum());
  }
}

void MsgRechargeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgRechargeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRechargeInfo::CopyFrom(const MsgRechargeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgRechargeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRechargeInfo::IsInitialized() const {
  return true;
}

void MsgRechargeInfo::InternalSwap(MsgRechargeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  invitecode_.Swap(&other->invitecode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgRechargeInfo, invitenum_)
      + sizeof(MsgRechargeInfo::invitenum_)
      - PROTOBUF_FIELD_OFFSET(MsgRechargeInfo, todayaward_)>(
          reinterpret_cast<char*>(&todayaward_),
          reinterpret_cast<char*>(&other->todayaward_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgRechargeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgQueryRebateRecordInfo::_Internal {
 public:
};

MsgQueryRebateRecordInfo::MsgQueryRebateRecordInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  queryrebaterecord_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgQueryRebateRecordInfo)
}
MsgQueryRebateRecordInfo::MsgQueryRebateRecordInfo(const MsgQueryRebateRecordInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      queryrebaterecord_(from.queryrebaterecord_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MsgQueryRebateRecordInfo)
}

void MsgQueryRebateRecordInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgQueryRebateRecordInfo_Login_2eproto.base);
}

MsgQueryRebateRecordInfo::~MsgQueryRebateRecordInfo() {
  // @@protoc_insertion_point(destructor:MsgQueryRebateRecordInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgQueryRebateRecordInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgQueryRebateRecordInfo::ArenaDtor(void* object) {
  MsgQueryRebateRecordInfo* _this = reinterpret_cast< MsgQueryRebateRecordInfo* >(object);
  (void)_this;
}
void MsgQueryRebateRecordInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgQueryRebateRecordInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgQueryRebateRecordInfo& MsgQueryRebateRecordInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgQueryRebateRecordInfo_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgQueryRebateRecordInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgQueryRebateRecordInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queryrebaterecord_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgQueryRebateRecordInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .MsgQueryRebateRecord queryRebateRecord = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_queryrebaterecord(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgQueryRebateRecordInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgQueryRebateRecordInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MsgQueryRebateRecord queryRebateRecord = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_queryrebaterecord_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_queryrebaterecord(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgQueryRebateRecordInfo)
  return target;
}

size_t MsgQueryRebateRecordInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgQueryRebateRecordInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MsgQueryRebateRecord queryRebateRecord = 1;
  total_size += 1UL * this->_internal_queryrebaterecord_size();
  for (const auto& msg : this->queryrebaterecord_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgQueryRebateRecordInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgQueryRebateRecordInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgQueryRebateRecordInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgQueryRebateRecordInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgQueryRebateRecordInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgQueryRebateRecordInfo)
    MergeFrom(*source);
  }
}

void MsgQueryRebateRecordInfo::MergeFrom(const MsgQueryRebateRecordInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgQueryRebateRecordInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  queryrebaterecord_.MergeFrom(from.queryrebaterecord_);
}

void MsgQueryRebateRecordInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgQueryRebateRecordInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQueryRebateRecordInfo::CopyFrom(const MsgQueryRebateRecordInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgQueryRebateRecordInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQueryRebateRecordInfo::IsInitialized() const {
  return true;
}

void MsgQueryRebateRecordInfo::InternalSwap(MsgQueryRebateRecordInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  queryrebaterecord_.InternalSwap(&other->queryrebaterecord_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgQueryRebateRecordInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgQueryRebateRecord::_Internal {
 public:
};

MsgQueryRebateRecord::MsgQueryRebateRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgQueryRebateRecord)
}
MsgQueryRebateRecord::MsgQueryRebateRecord(const MsgQueryRebateRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rechargeuserid_, &from.rechargeuserid_,
    static_cast<size_t>(reinterpret_cast<char*>(&rebate_) -
    reinterpret_cast<char*>(&rechargeuserid_)) + sizeof(rebate_));
  // @@protoc_insertion_point(copy_constructor:MsgQueryRebateRecord)
}

void MsgQueryRebateRecord::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&rechargeuserid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&rebate_) -
      reinterpret_cast<char*>(&rechargeuserid_)) + sizeof(rebate_));
}

MsgQueryRebateRecord::~MsgQueryRebateRecord() {
  // @@protoc_insertion_point(destructor:MsgQueryRebateRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgQueryRebateRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgQueryRebateRecord::ArenaDtor(void* object) {
  MsgQueryRebateRecord* _this = reinterpret_cast< MsgQueryRebateRecord* >(object);
  (void)_this;
}
void MsgQueryRebateRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgQueryRebateRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgQueryRebateRecord& MsgQueryRebateRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgQueryRebateRecord_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgQueryRebateRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgQueryRebateRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&rechargeuserid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rebate_) -
      reinterpret_cast<char*>(&rechargeuserid_)) + sizeof(rebate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgQueryRebateRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 rechargeUserId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rechargeuserid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rechargeAmount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rechargeamount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rebate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rebate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgQueryRebateRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgQueryRebateRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rechargeUserId = 1;
  if (this->rechargeuserid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_rechargeuserid(), target);
  }

  // int32 rechargeAmount = 2;
  if (this->rechargeamount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rechargeamount(), target);
  }

  // int32 rebate = 3;
  if (this->rebate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_rebate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgQueryRebateRecord)
  return target;
}

size_t MsgQueryRebateRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgQueryRebateRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 rechargeUserId = 1;
  if (this->rechargeuserid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rechargeuserid());
  }

  // int32 rechargeAmount = 2;
  if (this->rechargeamount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rechargeamount());
  }

  // int32 rebate = 3;
  if (this->rebate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rebate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgQueryRebateRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgQueryRebateRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgQueryRebateRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgQueryRebateRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgQueryRebateRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgQueryRebateRecord)
    MergeFrom(*source);
  }
}

void MsgQueryRebateRecord::MergeFrom(const MsgQueryRebateRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgQueryRebateRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rechargeuserid() != 0) {
    _internal_set_rechargeuserid(from._internal_rechargeuserid());
  }
  if (from.rechargeamount() != 0) {
    _internal_set_rechargeamount(from._internal_rechargeamount());
  }
  if (from.rebate() != 0) {
    _internal_set_rebate(from._internal_rebate());
  }
}

void MsgQueryRebateRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgQueryRebateRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQueryRebateRecord::CopyFrom(const MsgQueryRebateRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgQueryRebateRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQueryRebateRecord::IsInitialized() const {
  return true;
}

void MsgQueryRebateRecord::InternalSwap(MsgQueryRebateRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgQueryRebateRecord, rebate_)
      + sizeof(MsgQueryRebateRecord::rebate_)
      - PROTOBUF_FIELD_OFFSET(MsgQueryRebateRecord, rechargeuserid_)>(
          reinterpret_cast<char*>(&rechargeuserid_),
          reinterpret_cast<char*>(&other->rechargeuserid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgQueryRebateRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgForgetPassword::_Internal {
 public:
};

MsgForgetPassword::MsgForgetPassword(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgForgetPassword)
}
MsgForgetPassword::MsgForgetPassword(const MsgForgetPassword& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phone().empty()) {
    phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phone(), 
      GetArena());
  }
  new_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_new_password().empty()) {
    new_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_new_password(), 
      GetArena());
  }
  ::memcpy(&client_type_, &from.client_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&client_type_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:MsgForgetPassword)
}

void MsgForgetPassword::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgForgetPassword_Login_2eproto.base);
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&client_type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&client_type_)) + sizeof(code_));
}

MsgForgetPassword::~MsgForgetPassword() {
  // @@protoc_insertion_point(destructor:MsgForgetPassword)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgForgetPassword::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  phone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgForgetPassword::ArenaDtor(void* object) {
  MsgForgetPassword* _this = reinterpret_cast< MsgForgetPassword* >(object);
  (void)_this;
}
void MsgForgetPassword::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgForgetPassword::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgForgetPassword& MsgForgetPassword::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgForgetPassword_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgForgetPassword::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgForgetPassword)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phone_.ClearToEmpty();
  new_password_.ClearToEmpty();
  ::memset(&client_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&client_type_)) + sizeof(code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgForgetPassword::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 client_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          client_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string phone = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_phone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgForgetPassword.phone"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string new_password = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_new_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgForgetPassword.new_password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgForgetPassword::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgForgetPassword)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 client_type = 1;
  if (this->client_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_client_type(), target);
  }

  // string phone = 2;
  if (this->phone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone().data(), static_cast<int>(this->_internal_phone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgForgetPassword.phone");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_phone(), target);
  }

  // int32 code = 3;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_code(), target);
  }

  // string new_password = 4;
  if (this->new_password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_password().data(), static_cast<int>(this->_internal_new_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgForgetPassword.new_password");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_new_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgForgetPassword)
  return target;
}

size_t MsgForgetPassword::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgForgetPassword)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string phone = 2;
  if (this->phone().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone());
  }

  // string new_password = 4;
  if (this->new_password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_new_password());
  }

  // int32 client_type = 1;
  if (this->client_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_client_type());
  }

  // int32 code = 3;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgForgetPassword::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgForgetPassword)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgForgetPassword* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgForgetPassword>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgForgetPassword)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgForgetPassword)
    MergeFrom(*source);
  }
}

void MsgForgetPassword::MergeFrom(const MsgForgetPassword& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgForgetPassword)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.phone().size() > 0) {
    _internal_set_phone(from._internal_phone());
  }
  if (from.new_password().size() > 0) {
    _internal_set_new_password(from._internal_new_password());
  }
  if (from.client_type() != 0) {
    _internal_set_client_type(from._internal_client_type());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void MsgForgetPassword::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgForgetPassword)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgForgetPassword::CopyFrom(const MsgForgetPassword& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgForgetPassword)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgForgetPassword::IsInitialized() const {
  return true;
}

void MsgForgetPassword::InternalSwap(MsgForgetPassword* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  phone_.Swap(&other->phone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  new_password_.Swap(&other->new_password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgForgetPassword, code_)
      + sizeof(MsgForgetPassword::code_)
      - PROTOBUF_FIELD_OFFSET(MsgForgetPassword, client_type_)>(
          reinterpret_cast<char*>(&client_type_),
          reinterpret_cast<char*>(&other->client_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgForgetPassword::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgVIPInfo::_Internal {
 public:
};

MsgVIPInfo::MsgVIPInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgVIPInfo)
}
MsgVIPInfo::MsgVIPInfo(const MsgVIPInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&need_exp_, &from.need_exp_,
    static_cast<size_t>(reinterpret_cast<char*>(&award_gold_) -
    reinterpret_cast<char*>(&need_exp_)) + sizeof(award_gold_));
  // @@protoc_insertion_point(copy_constructor:MsgVIPInfo)
}

void MsgVIPInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&need_exp_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&award_gold_) -
      reinterpret_cast<char*>(&need_exp_)) + sizeof(award_gold_));
}

MsgVIPInfo::~MsgVIPInfo() {
  // @@protoc_insertion_point(destructor:MsgVIPInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgVIPInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgVIPInfo::ArenaDtor(void* object) {
  MsgVIPInfo* _this = reinterpret_cast< MsgVIPInfo* >(object);
  (void)_this;
}
void MsgVIPInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgVIPInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgVIPInfo& MsgVIPInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgVIPInfo_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgVIPInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgVIPInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&need_exp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&award_gold_) -
      reinterpret_cast<char*>(&need_exp_)) + sizeof(award_gold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgVIPInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 vip_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          vip_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 need_exp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          need_exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 turntable_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          turntable_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 trumpet_discount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          trumpet_discount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 check_addition = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          check_addition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool world_chat = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          world_chat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 avatar = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          avatar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 avatar_frame = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          avatar_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 award_gold = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          award_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool one_to_one = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          one_to_one_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgVIPInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgVIPInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vip_level = 1;
  if (this->vip_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_vip_level(), target);
  }

  // int64 need_exp = 2;
  if (this->need_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_need_exp(), target);
  }

  // int32 turntable_num = 3;
  if (this->turntable_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_turntable_num(), target);
  }

  // int32 trumpet_discount = 4;
  if (this->trumpet_discount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_trumpet_discount(), target);
  }

  // int32 check_addition = 5;
  if (this->check_addition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_check_addition(), target);
  }

  // bool world_chat = 6;
  if (this->world_chat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_world_chat(), target);
  }

  // int32 avatar = 7;
  if (this->avatar() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_avatar(), target);
  }

  // int32 avatar_frame = 8;
  if (this->avatar_frame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_avatar_frame(), target);
  }

  // int32 award_gold = 9;
  if (this->award_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_award_gold(), target);
  }

  // bool one_to_one = 10;
  if (this->one_to_one() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_one_to_one(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgVIPInfo)
  return target;
}

size_t MsgVIPInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgVIPInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 need_exp = 2;
  if (this->need_exp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_need_exp());
  }

  // int32 vip_level = 1;
  if (this->vip_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vip_level());
  }

  // int32 turntable_num = 3;
  if (this->turntable_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_turntable_num());
  }

  // int32 trumpet_discount = 4;
  if (this->trumpet_discount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trumpet_discount());
  }

  // int32 check_addition = 5;
  if (this->check_addition() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_check_addition());
  }

  // int32 avatar = 7;
  if (this->avatar() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_avatar());
  }

  // int32 avatar_frame = 8;
  if (this->avatar_frame() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_avatar_frame());
  }

  // bool world_chat = 6;
  if (this->world_chat() != 0) {
    total_size += 1 + 1;
  }

  // bool one_to_one = 10;
  if (this->one_to_one() != 0) {
    total_size += 1 + 1;
  }

  // int32 award_gold = 9;
  if (this->award_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_award_gold());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgVIPInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgVIPInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgVIPInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgVIPInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgVIPInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgVIPInfo)
    MergeFrom(*source);
  }
}

void MsgVIPInfo::MergeFrom(const MsgVIPInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgVIPInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.need_exp() != 0) {
    _internal_set_need_exp(from._internal_need_exp());
  }
  if (from.vip_level() != 0) {
    _internal_set_vip_level(from._internal_vip_level());
  }
  if (from.turntable_num() != 0) {
    _internal_set_turntable_num(from._internal_turntable_num());
  }
  if (from.trumpet_discount() != 0) {
    _internal_set_trumpet_discount(from._internal_trumpet_discount());
  }
  if (from.check_addition() != 0) {
    _internal_set_check_addition(from._internal_check_addition());
  }
  if (from.avatar() != 0) {
    _internal_set_avatar(from._internal_avatar());
  }
  if (from.avatar_frame() != 0) {
    _internal_set_avatar_frame(from._internal_avatar_frame());
  }
  if (from.world_chat() != 0) {
    _internal_set_world_chat(from._internal_world_chat());
  }
  if (from.one_to_one() != 0) {
    _internal_set_one_to_one(from._internal_one_to_one());
  }
  if (from.award_gold() != 0) {
    _internal_set_award_gold(from._internal_award_gold());
  }
}

void MsgVIPInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgVIPInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgVIPInfo::CopyFrom(const MsgVIPInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgVIPInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgVIPInfo::IsInitialized() const {
  return true;
}

void MsgVIPInfo::InternalSwap(MsgVIPInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgVIPInfo, award_gold_)
      + sizeof(MsgVIPInfo::award_gold_)
      - PROTOBUF_FIELD_OFFSET(MsgVIPInfo, need_exp_)>(
          reinterpret_cast<char*>(&need_exp_),
          reinterpret_cast<char*>(&other->need_exp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgVIPInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgVIPConfig::_Internal {
 public:
};

MsgVIPConfig::MsgVIPConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vip_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgVIPConfig)
}
MsgVIPConfig::MsgVIPConfig(const MsgVIPConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vip_info_(from.vip_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MsgVIPConfig)
}

void MsgVIPConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgVIPConfig_Login_2eproto.base);
}

MsgVIPConfig::~MsgVIPConfig() {
  // @@protoc_insertion_point(destructor:MsgVIPConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgVIPConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgVIPConfig::ArenaDtor(void* object) {
  MsgVIPConfig* _this = reinterpret_cast< MsgVIPConfig* >(object);
  (void)_this;
}
void MsgVIPConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgVIPConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgVIPConfig& MsgVIPConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgVIPConfig_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgVIPConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgVIPConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vip_info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgVIPConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .MsgVIPInfo vip_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vip_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgVIPConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgVIPConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MsgVIPInfo vip_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vip_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vip_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgVIPConfig)
  return target;
}

size_t MsgVIPConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgVIPConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MsgVIPInfo vip_info = 1;
  total_size += 1UL * this->_internal_vip_info_size();
  for (const auto& msg : this->vip_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgVIPConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgVIPConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgVIPConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgVIPConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgVIPConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgVIPConfig)
    MergeFrom(*source);
  }
}

void MsgVIPConfig::MergeFrom(const MsgVIPConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgVIPConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vip_info_.MergeFrom(from.vip_info_);
}

void MsgVIPConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgVIPConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgVIPConfig::CopyFrom(const MsgVIPConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgVIPConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgVIPConfig::IsInitialized() const {
  return true;
}

void MsgVIPConfig::InternalSwap(MsgVIPConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vip_info_.InternalSwap(&other->vip_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgVIPConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgUpgradeVIP::_Internal {
 public:
};

MsgUpgradeVIP::MsgUpgradeVIP(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgUpgradeVIP)
}
MsgUpgradeVIP::MsgUpgradeVIP(const MsgUpgradeVIP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gold_, &from.gold_,
    static_cast<size_t>(reinterpret_cast<char*>(&res_code_) -
    reinterpret_cast<char*>(&gold_)) + sizeof(res_code_));
  // @@protoc_insertion_point(copy_constructor:MsgUpgradeVIP)
}

void MsgUpgradeVIP::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gold_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&res_code_) -
      reinterpret_cast<char*>(&gold_)) + sizeof(res_code_));
}

MsgUpgradeVIP::~MsgUpgradeVIP() {
  // @@protoc_insertion_point(destructor:MsgUpgradeVIP)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgUpgradeVIP::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgUpgradeVIP::ArenaDtor(void* object) {
  MsgUpgradeVIP* _this = reinterpret_cast< MsgUpgradeVIP* >(object);
  (void)_this;
}
void MsgUpgradeVIP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgUpgradeVIP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgUpgradeVIP& MsgUpgradeVIP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgUpgradeVIP_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgUpgradeVIP::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgUpgradeVIP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&res_code_) -
      reinterpret_cast<char*>(&gold_)) + sizeof(res_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgUpgradeVIP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 res_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          res_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgUpgradeVIP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgUpgradeVIP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 res_code = 1;
  if (this->res_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_res_code(), target);
  }

  // int64 gold = 2;
  if (this->gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgUpgradeVIP)
  return target;
}

size_t MsgUpgradeVIP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgUpgradeVIP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 gold = 2;
  if (this->gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_gold());
  }

  // int32 res_code = 1;
  if (this->res_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_res_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgUpgradeVIP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgUpgradeVIP)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgUpgradeVIP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgUpgradeVIP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgUpgradeVIP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgUpgradeVIP)
    MergeFrom(*source);
  }
}

void MsgUpgradeVIP::MergeFrom(const MsgUpgradeVIP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgUpgradeVIP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
  if (from.res_code() != 0) {
    _internal_set_res_code(from._internal_res_code());
  }
}

void MsgUpgradeVIP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgUpgradeVIP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUpgradeVIP::CopyFrom(const MsgUpgradeVIP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgUpgradeVIP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUpgradeVIP::IsInitialized() const {
  return true;
}

void MsgUpgradeVIP::InternalSwap(MsgUpgradeVIP* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgUpgradeVIP, res_code_)
      + sizeof(MsgUpgradeVIP::res_code_)
      - PROTOBUF_FIELD_OFFSET(MsgUpgradeVIP, gold_)>(
          reinterpret_cast<char*>(&gold_),
          reinterpret_cast<char*>(&other->gold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgUpgradeVIP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgGetAvatarInfo::_Internal {
 public:
};

MsgGetAvatarInfo::MsgGetAvatarInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  avatars_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgGetAvatarInfo)
}
MsgGetAvatarInfo::MsgGetAvatarInfo(const MsgGetAvatarInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      avatars_(from.avatars_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MsgGetAvatarInfo)
}

void MsgGetAvatarInfo::SharedCtor() {
}

MsgGetAvatarInfo::~MsgGetAvatarInfo() {
  // @@protoc_insertion_point(destructor:MsgGetAvatarInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgGetAvatarInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgGetAvatarInfo::ArenaDtor(void* object) {
  MsgGetAvatarInfo* _this = reinterpret_cast< MsgGetAvatarInfo* >(object);
  (void)_this;
}
void MsgGetAvatarInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgGetAvatarInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgGetAvatarInfo& MsgGetAvatarInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgGetAvatarInfo_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgGetAvatarInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgGetAvatarInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatars_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgGetAvatarInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 avatars = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_avatars(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_avatars(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgGetAvatarInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgGetAvatarInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 avatars = 1;
  {
    int byte_size = _avatars_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_avatars(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgGetAvatarInfo)
  return target;
}

size_t MsgGetAvatarInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgGetAvatarInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 avatars = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->avatars_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _avatars_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgGetAvatarInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgGetAvatarInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgGetAvatarInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgGetAvatarInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgGetAvatarInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgGetAvatarInfo)
    MergeFrom(*source);
  }
}

void MsgGetAvatarInfo::MergeFrom(const MsgGetAvatarInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgGetAvatarInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  avatars_.MergeFrom(from.avatars_);
}

void MsgGetAvatarInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgGetAvatarInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGetAvatarInfo::CopyFrom(const MsgGetAvatarInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgGetAvatarInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGetAvatarInfo::IsInitialized() const {
  return true;
}

void MsgGetAvatarInfo::InternalSwap(MsgGetAvatarInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  avatars_.InternalSwap(&other->avatars_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgGetAvatarInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgPlayerInfo::_Internal {
 public:
};

MsgPlayerInfo::MsgPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgPlayerInfo)
}
MsgPlayerInfo::MsgPlayerInfo(const MsgPlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nickname().empty()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArena());
  }
  avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar().empty()) {
    avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar(), 
      GetArena());
  }
  phone_num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phone_num().empty()) {
    phone_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phone_num(), 
      GetArena());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArena());
  }
  whatsup_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_whatsup_msg().empty()) {
    whatsup_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_whatsup_msg(), 
      GetArena());
  }
  telegram_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_telegram_msg().empty()) {
    telegram_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_telegram_msg(), 
      GetArena());
  }
  facebook_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_facebook_msg().empty()) {
    facebook_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_facebook_msg(), 
      GetArena());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&zmd_game_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(zmd_game_id_));
  // @@protoc_insertion_point(copy_constructor:MsgPlayerInfo)
}

void MsgPlayerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgPlayerInfo_Login_2eproto.base);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  whatsup_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  telegram_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  facebook_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&zmd_game_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(zmd_game_id_));
}

MsgPlayerInfo::~MsgPlayerInfo() {
  // @@protoc_insertion_point(destructor:MsgPlayerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgPlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_num_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  whatsup_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  telegram_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  facebook_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgPlayerInfo::ArenaDtor(void* object) {
  MsgPlayerInfo* _this = reinterpret_cast< MsgPlayerInfo* >(object);
  (void)_this;
}
void MsgPlayerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgPlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgPlayerInfo& MsgPlayerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgPlayerInfo_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nickname_.ClearToEmpty();
  avatar_.ClearToEmpty();
  phone_num_.ClearToEmpty();
  signature_.ClearToEmpty();
  whatsup_msg_.ClearToEmpty();
  telegram_msg_.ClearToEmpty();
  facebook_msg_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zmd_game_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(zmd_game_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgPlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 beautiful_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          beautiful_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nickname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgPlayerInfo.nickname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatar = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_avatar();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgPlayerInfo.avatar"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 coin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string phone_num = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_phone_num();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgPlayerInfo.phone_num"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vip_level = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          vip_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 avatar_frame = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          avatar_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string signature = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgPlayerInfo.signature"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 zmd_game_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          zmd_game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 zmd_win_gold = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          zmd_win_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string whatsup_msg = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_whatsup_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgPlayerInfo.whatsup_msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string telegram_msg = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_telegram_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgPlayerInfo.telegram_msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string facebook_msg = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_facebook_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgPlayerInfo.facebook_msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgPlayerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // int32 beautiful_id = 2;
  if (this->beautiful_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_beautiful_id(), target);
  }

  // string nickname = 3;
  if (this->nickname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgPlayerInfo.nickname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_nickname(), target);
  }

  // string avatar = 4;
  if (this->avatar().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar().data(), static_cast<int>(this->_internal_avatar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgPlayerInfo.avatar");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_avatar(), target);
  }

  // uint64 coin = 5;
  if (this->coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_coin(), target);
  }

  // string phone_num = 6;
  if (this->phone_num().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone_num().data(), static_cast<int>(this->_internal_phone_num().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgPlayerInfo.phone_num");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_phone_num(), target);
  }

  // int32 vip_level = 7;
  if (this->vip_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_vip_level(), target);
  }

  // int32 avatar_frame = 8;
  if (this->avatar_frame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_avatar_frame(), target);
  }

  // string signature = 9;
  if (this->signature().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signature().data(), static_cast<int>(this->_internal_signature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgPlayerInfo.signature");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_signature(), target);
  }

  // int32 zmd_game_id = 10;
  if (this->zmd_game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_zmd_game_id(), target);
  }

  // uint64 zmd_win_gold = 11;
  if (this->zmd_win_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_zmd_win_gold(), target);
  }

  // string whatsup_msg = 19;
  if (this->whatsup_msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_whatsup_msg().data(), static_cast<int>(this->_internal_whatsup_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgPlayerInfo.whatsup_msg");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_whatsup_msg(), target);
  }

  // string telegram_msg = 20;
  if (this->telegram_msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_telegram_msg().data(), static_cast<int>(this->_internal_telegram_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgPlayerInfo.telegram_msg");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_telegram_msg(), target);
  }

  // string facebook_msg = 21;
  if (this->facebook_msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_facebook_msg().data(), static_cast<int>(this->_internal_facebook_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgPlayerInfo.facebook_msg");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_facebook_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPlayerInfo)
  return target;
}

size_t MsgPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgPlayerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickname = 3;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string avatar = 4;
  if (this->avatar().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar());
  }

  // string phone_num = 6;
  if (this->phone_num().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone_num());
  }

  // string signature = 9;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signature());
  }

  // string whatsup_msg = 19;
  if (this->whatsup_msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_whatsup_msg());
  }

  // string telegram_msg = 20;
  if (this->telegram_msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_telegram_msg());
  }

  // string facebook_msg = 21;
  if (this->facebook_msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_facebook_msg());
  }

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // int32 beautiful_id = 2;
  if (this->beautiful_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_beautiful_id());
  }

  // uint64 coin = 5;
  if (this->coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_coin());
  }

  // int32 vip_level = 7;
  if (this->vip_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vip_level());
  }

  // int32 avatar_frame = 8;
  if (this->avatar_frame() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_avatar_frame());
  }

  // uint64 zmd_win_gold = 11;
  if (this->zmd_win_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_zmd_win_gold());
  }

  // int32 zmd_game_id = 10;
  if (this->zmd_game_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_zmd_game_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgPlayerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgPlayerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgPlayerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgPlayerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgPlayerInfo)
    MergeFrom(*source);
  }
}

void MsgPlayerInfo::MergeFrom(const MsgPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nickname().size() > 0) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (from.avatar().size() > 0) {
    _internal_set_avatar(from._internal_avatar());
  }
  if (from.phone_num().size() > 0) {
    _internal_set_phone_num(from._internal_phone_num());
  }
  if (from.signature().size() > 0) {
    _internal_set_signature(from._internal_signature());
  }
  if (from.whatsup_msg().size() > 0) {
    _internal_set_whatsup_msg(from._internal_whatsup_msg());
  }
  if (from.telegram_msg().size() > 0) {
    _internal_set_telegram_msg(from._internal_telegram_msg());
  }
  if (from.facebook_msg().size() > 0) {
    _internal_set_facebook_msg(from._internal_facebook_msg());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.beautiful_id() != 0) {
    _internal_set_beautiful_id(from._internal_beautiful_id());
  }
  if (from.coin() != 0) {
    _internal_set_coin(from._internal_coin());
  }
  if (from.vip_level() != 0) {
    _internal_set_vip_level(from._internal_vip_level());
  }
  if (from.avatar_frame() != 0) {
    _internal_set_avatar_frame(from._internal_avatar_frame());
  }
  if (from.zmd_win_gold() != 0) {
    _internal_set_zmd_win_gold(from._internal_zmd_win_gold());
  }
  if (from.zmd_game_id() != 0) {
    _internal_set_zmd_game_id(from._internal_zmd_game_id());
  }
}

void MsgPlayerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerInfo::CopyFrom(const MsgPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerInfo::IsInitialized() const {
  return true;
}

void MsgPlayerInfo::InternalSwap(MsgPlayerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nickname_.Swap(&other->nickname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  avatar_.Swap(&other->avatar_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  phone_num_.Swap(&other->phone_num_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  whatsup_msg_.Swap(&other->whatsup_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  telegram_msg_.Swap(&other->telegram_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  facebook_msg_.Swap(&other->facebook_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgPlayerInfo, zmd_game_id_)
      + sizeof(MsgPlayerInfo::zmd_game_id_)
      - PROTOBUF_FIELD_OFFSET(MsgPlayerInfo, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgPlayerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ActiveInfoRet::_Internal {
 public:
};

ActiveInfoRet::ActiveInfoRet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ActiveInfoRet)
}
ActiveInfoRet::ActiveInfoRet(const ActiveInfoRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&active_id_, &from.active_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_pick_) -
    reinterpret_cast<char*>(&active_id_)) + sizeof(is_pick_));
  // @@protoc_insertion_point(copy_constructor:ActiveInfoRet)
}

void ActiveInfoRet::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&active_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_pick_) -
      reinterpret_cast<char*>(&active_id_)) + sizeof(is_pick_));
}

ActiveInfoRet::~ActiveInfoRet() {
  // @@protoc_insertion_point(destructor:ActiveInfoRet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActiveInfoRet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ActiveInfoRet::ArenaDtor(void* object) {
  ActiveInfoRet* _this = reinterpret_cast< ActiveInfoRet* >(object);
  (void)_this;
}
void ActiveInfoRet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActiveInfoRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActiveInfoRet& ActiveInfoRet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActiveInfoRet_Login_2eproto.base);
  return *internal_default_instance();
}


void ActiveInfoRet::Clear() {
// @@protoc_insertion_point(message_clear_start:ActiveInfoRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&active_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_pick_) -
      reinterpret_cast<char*>(&active_id_)) + sizeof(is_pick_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActiveInfoRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 active_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          active_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sub_active_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sub_active_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 param1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          param1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 param2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          param2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 param3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          param3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 progress1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          progress1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 progress2 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          progress2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 progress3 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          progress3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reward = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          reward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reward_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          reward_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_pick = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          is_pick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActiveInfoRet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActiveInfoRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 active_id = 1;
  if (this->active_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_active_id(), target);
  }

  // int32 sub_active_id = 2;
  if (this->sub_active_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sub_active_id(), target);
  }

  // int32 param1 = 3;
  if (this->param1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_param1(), target);
  }

  // int32 param2 = 4;
  if (this->param2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_param2(), target);
  }

  // int32 param3 = 5;
  if (this->param3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_param3(), target);
  }

  // int32 progress1 = 6;
  if (this->progress1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_progress1(), target);
  }

  // int32 progress2 = 7;
  if (this->progress2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_progress2(), target);
  }

  // int32 progress3 = 8;
  if (this->progress3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_progress3(), target);
  }

  // int32 reward = 9;
  if (this->reward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_reward(), target);
  }

  // int32 reward_type = 10;
  if (this->reward_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_reward_type(), target);
  }

  // bool is_pick = 11;
  if (this->is_pick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_is_pick(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActiveInfoRet)
  return target;
}

size_t ActiveInfoRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActiveInfoRet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 active_id = 1;
  if (this->active_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_active_id());
  }

  // int32 sub_active_id = 2;
  if (this->sub_active_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sub_active_id());
  }

  // int32 param1 = 3;
  if (this->param1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_param1());
  }

  // int32 param2 = 4;
  if (this->param2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_param2());
  }

  // int32 param3 = 5;
  if (this->param3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_param3());
  }

  // int32 progress1 = 6;
  if (this->progress1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_progress1());
  }

  // int32 progress2 = 7;
  if (this->progress2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_progress2());
  }

  // int32 progress3 = 8;
  if (this->progress3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_progress3());
  }

  // int32 reward = 9;
  if (this->reward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reward());
  }

  // int32 reward_type = 10;
  if (this->reward_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reward_type());
  }

  // bool is_pick = 11;
  if (this->is_pick() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActiveInfoRet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ActiveInfoRet)
  GOOGLE_DCHECK_NE(&from, this);
  const ActiveInfoRet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActiveInfoRet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ActiveInfoRet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ActiveInfoRet)
    MergeFrom(*source);
  }
}

void ActiveInfoRet::MergeFrom(const ActiveInfoRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActiveInfoRet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.active_id() != 0) {
    _internal_set_active_id(from._internal_active_id());
  }
  if (from.sub_active_id() != 0) {
    _internal_set_sub_active_id(from._internal_sub_active_id());
  }
  if (from.param1() != 0) {
    _internal_set_param1(from._internal_param1());
  }
  if (from.param2() != 0) {
    _internal_set_param2(from._internal_param2());
  }
  if (from.param3() != 0) {
    _internal_set_param3(from._internal_param3());
  }
  if (from.progress1() != 0) {
    _internal_set_progress1(from._internal_progress1());
  }
  if (from.progress2() != 0) {
    _internal_set_progress2(from._internal_progress2());
  }
  if (from.progress3() != 0) {
    _internal_set_progress3(from._internal_progress3());
  }
  if (from.reward() != 0) {
    _internal_set_reward(from._internal_reward());
  }
  if (from.reward_type() != 0) {
    _internal_set_reward_type(from._internal_reward_type());
  }
  if (from.is_pick() != 0) {
    _internal_set_is_pick(from._internal_is_pick());
  }
}

void ActiveInfoRet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ActiveInfoRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActiveInfoRet::CopyFrom(const ActiveInfoRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActiveInfoRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveInfoRet::IsInitialized() const {
  return true;
}

void ActiveInfoRet::InternalSwap(ActiveInfoRet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActiveInfoRet, is_pick_)
      + sizeof(ActiveInfoRet::is_pick_)
      - PROTOBUF_FIELD_OFFSET(ActiveInfoRet, active_id_)>(
          reinterpret_cast<char*>(&active_id_),
          reinterpret_cast<char*>(&other->active_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActiveInfoRet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgActiveInfoSCRet::_Internal {
 public:
};

MsgActiveInfoSCRet::MsgActiveInfoSCRet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vec_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgActiveInfoSCRet)
}
MsgActiveInfoSCRet::MsgActiveInfoSCRet(const MsgActiveInfoSCRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vec_info_(from.vec_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MsgActiveInfoSCRet)
}

void MsgActiveInfoSCRet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgActiveInfoSCRet_Login_2eproto.base);
}

MsgActiveInfoSCRet::~MsgActiveInfoSCRet() {
  // @@protoc_insertion_point(destructor:MsgActiveInfoSCRet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgActiveInfoSCRet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgActiveInfoSCRet::ArenaDtor(void* object) {
  MsgActiveInfoSCRet* _this = reinterpret_cast< MsgActiveInfoSCRet* >(object);
  (void)_this;
}
void MsgActiveInfoSCRet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgActiveInfoSCRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgActiveInfoSCRet& MsgActiveInfoSCRet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgActiveInfoSCRet_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgActiveInfoSCRet::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgActiveInfoSCRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vec_info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgActiveInfoSCRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ActiveInfoRet vec_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vec_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgActiveInfoSCRet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgActiveInfoSCRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ActiveInfoRet vec_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vec_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vec_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgActiveInfoSCRet)
  return target;
}

size_t MsgActiveInfoSCRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgActiveInfoSCRet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ActiveInfoRet vec_info = 1;
  total_size += 1UL * this->_internal_vec_info_size();
  for (const auto& msg : this->vec_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgActiveInfoSCRet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgActiveInfoSCRet)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgActiveInfoSCRet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgActiveInfoSCRet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgActiveInfoSCRet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgActiveInfoSCRet)
    MergeFrom(*source);
  }
}

void MsgActiveInfoSCRet::MergeFrom(const MsgActiveInfoSCRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgActiveInfoSCRet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vec_info_.MergeFrom(from.vec_info_);
}

void MsgActiveInfoSCRet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgActiveInfoSCRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgActiveInfoSCRet::CopyFrom(const MsgActiveInfoSCRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgActiveInfoSCRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgActiveInfoSCRet::IsInitialized() const {
  return true;
}

void MsgActiveInfoSCRet::InternalSwap(MsgActiveInfoSCRet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vec_info_.InternalSwap(&other->vec_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgActiveInfoSCRet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgActiveInfoCSPick::_Internal {
 public:
};

MsgActiveInfoCSPick::MsgActiveInfoCSPick(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgActiveInfoCSPick)
}
MsgActiveInfoCSPick::MsgActiveInfoCSPick(const MsgActiveInfoCSPick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sub_active_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(sub_active_id_));
  // @@protoc_insertion_point(copy_constructor:MsgActiveInfoCSPick)
}

void MsgActiveInfoCSPick::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sub_active_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(sub_active_id_));
}

MsgActiveInfoCSPick::~MsgActiveInfoCSPick() {
  // @@protoc_insertion_point(destructor:MsgActiveInfoCSPick)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgActiveInfoCSPick::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgActiveInfoCSPick::ArenaDtor(void* object) {
  MsgActiveInfoCSPick* _this = reinterpret_cast< MsgActiveInfoCSPick* >(object);
  (void)_this;
}
void MsgActiveInfoCSPick::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgActiveInfoCSPick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgActiveInfoCSPick& MsgActiveInfoCSPick::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgActiveInfoCSPick_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgActiveInfoCSPick::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgActiveInfoCSPick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sub_active_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(sub_active_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgActiveInfoCSPick::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 active_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          active_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sub_active_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sub_active_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgActiveInfoCSPick::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgActiveInfoCSPick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // int32 active_id = 2;
  if (this->active_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_active_id(), target);
  }

  // int32 sub_active_id = 3;
  if (this->sub_active_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sub_active_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgActiveInfoCSPick)
  return target;
}

size_t MsgActiveInfoCSPick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgActiveInfoCSPick)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // int32 active_id = 2;
  if (this->active_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_active_id());
  }

  // int32 sub_active_id = 3;
  if (this->sub_active_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sub_active_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgActiveInfoCSPick::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgActiveInfoCSPick)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgActiveInfoCSPick* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgActiveInfoCSPick>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgActiveInfoCSPick)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgActiveInfoCSPick)
    MergeFrom(*source);
  }
}

void MsgActiveInfoCSPick::MergeFrom(const MsgActiveInfoCSPick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgActiveInfoCSPick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.active_id() != 0) {
    _internal_set_active_id(from._internal_active_id());
  }
  if (from.sub_active_id() != 0) {
    _internal_set_sub_active_id(from._internal_sub_active_id());
  }
}

void MsgActiveInfoCSPick::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgActiveInfoCSPick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgActiveInfoCSPick::CopyFrom(const MsgActiveInfoCSPick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgActiveInfoCSPick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgActiveInfoCSPick::IsInitialized() const {
  return true;
}

void MsgActiveInfoCSPick::InternalSwap(MsgActiveInfoCSPick* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgActiveInfoCSPick, sub_active_id_)
      + sizeof(MsgActiveInfoCSPick::sub_active_id_)
      - PROTOBUF_FIELD_OFFSET(MsgActiveInfoCSPick, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgActiveInfoCSPick::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgActiveInfoSCPick::_Internal {
 public:
};

MsgActiveInfoSCPick::MsgActiveInfoSCPick(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgActiveInfoSCPick)
}
MsgActiveInfoSCPick::MsgActiveInfoSCPick(const MsgActiveInfoSCPick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&active_id_, &from.active_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&res_) -
    reinterpret_cast<char*>(&active_id_)) + sizeof(res_));
  // @@protoc_insertion_point(copy_constructor:MsgActiveInfoSCPick)
}

void MsgActiveInfoSCPick::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&active_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&res_) -
      reinterpret_cast<char*>(&active_id_)) + sizeof(res_));
}

MsgActiveInfoSCPick::~MsgActiveInfoSCPick() {
  // @@protoc_insertion_point(destructor:MsgActiveInfoSCPick)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgActiveInfoSCPick::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgActiveInfoSCPick::ArenaDtor(void* object) {
  MsgActiveInfoSCPick* _this = reinterpret_cast< MsgActiveInfoSCPick* >(object);
  (void)_this;
}
void MsgActiveInfoSCPick::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgActiveInfoSCPick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgActiveInfoSCPick& MsgActiveInfoSCPick::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgActiveInfoSCPick_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgActiveInfoSCPick::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgActiveInfoSCPick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&active_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&res_) -
      reinterpret_cast<char*>(&active_id_)) + sizeof(res_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgActiveInfoSCPick::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 active_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          active_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sub_active_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sub_active_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 param1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          param1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 param2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          param2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 param3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          param3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 progress1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          progress1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 progress2 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          progress2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 progress3 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          progress3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reward = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          reward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reward_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          reward_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_pick = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          is_pick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool res = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          res_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgActiveInfoSCPick::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgActiveInfoSCPick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 active_id = 1;
  if (this->active_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_active_id(), target);
  }

  // int32 sub_active_id = 2;
  if (this->sub_active_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sub_active_id(), target);
  }

  // int32 param1 = 3;
  if (this->param1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_param1(), target);
  }

  // int32 param2 = 4;
  if (this->param2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_param2(), target);
  }

  // int32 param3 = 5;
  if (this->param3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_param3(), target);
  }

  // int32 progress1 = 6;
  if (this->progress1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_progress1(), target);
  }

  // int32 progress2 = 7;
  if (this->progress2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_progress2(), target);
  }

  // int32 progress3 = 8;
  if (this->progress3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_progress3(), target);
  }

  // int32 reward = 9;
  if (this->reward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_reward(), target);
  }

  // int32 reward_type = 10;
  if (this->reward_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_reward_type(), target);
  }

  // int32 is_pick = 11;
  if (this->is_pick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_is_pick(), target);
  }

  // bool res = 12;
  if (this->res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgActiveInfoSCPick)
  return target;
}

size_t MsgActiveInfoSCPick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgActiveInfoSCPick)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 active_id = 1;
  if (this->active_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_active_id());
  }

  // int32 sub_active_id = 2;
  if (this->sub_active_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sub_active_id());
  }

  // int32 param1 = 3;
  if (this->param1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_param1());
  }

  // int32 param2 = 4;
  if (this->param2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_param2());
  }

  // int32 param3 = 5;
  if (this->param3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_param3());
  }

  // int32 progress1 = 6;
  if (this->progress1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_progress1());
  }

  // int32 progress2 = 7;
  if (this->progress2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_progress2());
  }

  // int32 progress3 = 8;
  if (this->progress3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_progress3());
  }

  // int32 reward = 9;
  if (this->reward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reward());
  }

  // int32 reward_type = 10;
  if (this->reward_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reward_type());
  }

  // int32 is_pick = 11;
  if (this->is_pick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_pick());
  }

  // bool res = 12;
  if (this->res() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgActiveInfoSCPick::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgActiveInfoSCPick)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgActiveInfoSCPick* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgActiveInfoSCPick>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgActiveInfoSCPick)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgActiveInfoSCPick)
    MergeFrom(*source);
  }
}

void MsgActiveInfoSCPick::MergeFrom(const MsgActiveInfoSCPick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgActiveInfoSCPick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.active_id() != 0) {
    _internal_set_active_id(from._internal_active_id());
  }
  if (from.sub_active_id() != 0) {
    _internal_set_sub_active_id(from._internal_sub_active_id());
  }
  if (from.param1() != 0) {
    _internal_set_param1(from._internal_param1());
  }
  if (from.param2() != 0) {
    _internal_set_param2(from._internal_param2());
  }
  if (from.param3() != 0) {
    _internal_set_param3(from._internal_param3());
  }
  if (from.progress1() != 0) {
    _internal_set_progress1(from._internal_progress1());
  }
  if (from.progress2() != 0) {
    _internal_set_progress2(from._internal_progress2());
  }
  if (from.progress3() != 0) {
    _internal_set_progress3(from._internal_progress3());
  }
  if (from.reward() != 0) {
    _internal_set_reward(from._internal_reward());
  }
  if (from.reward_type() != 0) {
    _internal_set_reward_type(from._internal_reward_type());
  }
  if (from.is_pick() != 0) {
    _internal_set_is_pick(from._internal_is_pick());
  }
  if (from.res() != 0) {
    _internal_set_res(from._internal_res());
  }
}

void MsgActiveInfoSCPick::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgActiveInfoSCPick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgActiveInfoSCPick::CopyFrom(const MsgActiveInfoSCPick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgActiveInfoSCPick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgActiveInfoSCPick::IsInitialized() const {
  return true;
}

void MsgActiveInfoSCPick::InternalSwap(MsgActiveInfoSCPick* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgActiveInfoSCPick, res_)
      + sizeof(MsgActiveInfoSCPick::res_)
      - PROTOBUF_FIELD_OFFSET(MsgActiveInfoSCPick, active_id_)>(
          reinterpret_cast<char*>(&active_id_),
          reinterpret_cast<char*>(&other->active_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgActiveInfoSCPick::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgModifySignature::_Internal {
 public:
};

MsgModifySignature::MsgModifySignature(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgModifySignature)
}
MsgModifySignature::MsgModifySignature(const MsgModifySignature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArena());
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:MsgModifySignature)
}

void MsgModifySignature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgModifySignature_Login_2eproto.base);
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0;
}

MsgModifySignature::~MsgModifySignature() {
  // @@protoc_insertion_point(destructor:MsgModifySignature)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgModifySignature::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgModifySignature::ArenaDtor(void* object) {
  MsgModifySignature* _this = reinterpret_cast< MsgModifySignature* >(object);
  (void)_this;
}
void MsgModifySignature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgModifySignature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgModifySignature& MsgModifySignature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgModifySignature_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgModifySignature::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgModifySignature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_.ClearToEmpty();
  user_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgModifySignature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgModifySignature.signature"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgModifySignature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgModifySignature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // string signature = 2;
  if (this->signature().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signature().data(), static_cast<int>(this->_internal_signature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgModifySignature.signature");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgModifySignature)
  return target;
}

size_t MsgModifySignature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgModifySignature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string signature = 2;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signature());
  }

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgModifySignature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgModifySignature)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgModifySignature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgModifySignature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgModifySignature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgModifySignature)
    MergeFrom(*source);
  }
}

void MsgModifySignature::MergeFrom(const MsgModifySignature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgModifySignature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.signature().size() > 0) {
    _internal_set_signature(from._internal_signature());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void MsgModifySignature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgModifySignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgModifySignature::CopyFrom(const MsgModifySignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgModifySignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgModifySignature::IsInitialized() const {
  return true;
}

void MsgModifySignature::InternalSwap(MsgModifySignature* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgModifySignature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgTransferOperate::_Internal {
 public:
};

MsgTransferOperate::MsgTransferOperate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgTransferOperate)
}
MsgTransferOperate::MsgTransferOperate(const MsgTransferOperate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&transfer_gold_, &from.transfer_gold_,
    static_cast<size_t>(reinterpret_cast<char*>(&recv_user_id_) -
    reinterpret_cast<char*>(&transfer_gold_)) + sizeof(recv_user_id_));
  // @@protoc_insertion_point(copy_constructor:MsgTransferOperate)
}

void MsgTransferOperate::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&transfer_gold_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&recv_user_id_) -
      reinterpret_cast<char*>(&transfer_gold_)) + sizeof(recv_user_id_));
}

MsgTransferOperate::~MsgTransferOperate() {
  // @@protoc_insertion_point(destructor:MsgTransferOperate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgTransferOperate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgTransferOperate::ArenaDtor(void* object) {
  MsgTransferOperate* _this = reinterpret_cast< MsgTransferOperate* >(object);
  (void)_this;
}
void MsgTransferOperate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgTransferOperate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgTransferOperate& MsgTransferOperate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgTransferOperate_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgTransferOperate::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgTransferOperate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&transfer_gold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recv_user_id_) -
      reinterpret_cast<char*>(&transfer_gold_)) + sizeof(recv_user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgTransferOperate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 recv_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          recv_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 transfer_gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          transfer_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgTransferOperate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgTransferOperate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 recv_user_id = 1;
  if (this->recv_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_recv_user_id(), target);
  }

  // int64 transfer_gold = 2;
  if (this->transfer_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_transfer_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgTransferOperate)
  return target;
}

size_t MsgTransferOperate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgTransferOperate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 transfer_gold = 2;
  if (this->transfer_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_transfer_gold());
  }

  // int32 recv_user_id = 1;
  if (this->recv_user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_recv_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgTransferOperate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgTransferOperate)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgTransferOperate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgTransferOperate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgTransferOperate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgTransferOperate)
    MergeFrom(*source);
  }
}

void MsgTransferOperate::MergeFrom(const MsgTransferOperate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgTransferOperate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transfer_gold() != 0) {
    _internal_set_transfer_gold(from._internal_transfer_gold());
  }
  if (from.recv_user_id() != 0) {
    _internal_set_recv_user_id(from._internal_recv_user_id());
  }
}

void MsgTransferOperate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgTransferOperate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTransferOperate::CopyFrom(const MsgTransferOperate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgTransferOperate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTransferOperate::IsInitialized() const {
  return true;
}

void MsgTransferOperate::InternalSwap(MsgTransferOperate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgTransferOperate, recv_user_id_)
      + sizeof(MsgTransferOperate::recv_user_id_)
      - PROTOBUF_FIELD_OFFSET(MsgTransferOperate, transfer_gold_)>(
          reinterpret_cast<char*>(&transfer_gold_),
          reinterpret_cast<char*>(&other->transfer_gold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgTransferOperate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgTopInfo::_Internal {
 public:
};

MsgTopInfo::MsgTopInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgTopInfo)
}
MsgTopInfo::MsgTopInfo(const MsgTopInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  head_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_head_url().empty()) {
    head_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_head_url(), 
      GetArena());
  }
  nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick_name().empty()) {
    nick_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nick_name(), 
      GetArena());
  }
  ::memcpy(&rank_id_, &from.rank_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&avatar_frame_) -
    reinterpret_cast<char*>(&rank_id_)) + sizeof(avatar_frame_));
  // @@protoc_insertion_point(copy_constructor:MsgTopInfo)
}

void MsgTopInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgTopInfo_Login_2eproto.base);
  head_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&rank_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&avatar_frame_) -
      reinterpret_cast<char*>(&rank_id_)) + sizeof(avatar_frame_));
}

MsgTopInfo::~MsgTopInfo() {
  // @@protoc_insertion_point(destructor:MsgTopInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgTopInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  head_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nick_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgTopInfo::ArenaDtor(void* object) {
  MsgTopInfo* _this = reinterpret_cast< MsgTopInfo* >(object);
  (void)_this;
}
void MsgTopInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgTopInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgTopInfo& MsgTopInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgTopInfo_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgTopInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgTopInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  head_url_.ClearToEmpty();
  nick_name_.ClearToEmpty();
  ::memset(&rank_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avatar_frame_) -
      reinterpret_cast<char*>(&rank_id_)) + sizeof(avatar_frame_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgTopInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 rank_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rank_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 vip_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          vip_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 avatar_frame = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          avatar_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string head_url = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_head_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgTopInfo.head_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nick_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_nick_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgTopInfo.nick_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgTopInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgTopInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rank_id = 1;
  if (this->rank_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_rank_id(), target);
  }

  // int32 user_id = 2;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_user_id(), target);
  }

  // uint64 gold = 3;
  if (this->gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_gold(), target);
  }

  // uint32 vip_level = 4;
  if (this->vip_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_vip_level(), target);
  }

  // int32 avatar_frame = 5;
  if (this->avatar_frame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_avatar_frame(), target);
  }

  // string head_url = 6;
  if (this->head_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_head_url().data(), static_cast<int>(this->_internal_head_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgTopInfo.head_url");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_head_url(), target);
  }

  // string nick_name = 7;
  if (this->nick_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick_name().data(), static_cast<int>(this->_internal_nick_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgTopInfo.nick_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_nick_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgTopInfo)
  return target;
}

size_t MsgTopInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgTopInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string head_url = 6;
  if (this->head_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_head_url());
  }

  // string nick_name = 7;
  if (this->nick_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick_name());
  }

  // int32 rank_id = 1;
  if (this->rank_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rank_id());
  }

  // int32 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // uint64 gold = 3;
  if (this->gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gold());
  }

  // uint32 vip_level = 4;
  if (this->vip_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_vip_level());
  }

  // int32 avatar_frame = 5;
  if (this->avatar_frame() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_avatar_frame());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgTopInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgTopInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgTopInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgTopInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgTopInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgTopInfo)
    MergeFrom(*source);
  }
}

void MsgTopInfo::MergeFrom(const MsgTopInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgTopInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.head_url().size() > 0) {
    _internal_set_head_url(from._internal_head_url());
  }
  if (from.nick_name().size() > 0) {
    _internal_set_nick_name(from._internal_nick_name());
  }
  if (from.rank_id() != 0) {
    _internal_set_rank_id(from._internal_rank_id());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
  if (from.vip_level() != 0) {
    _internal_set_vip_level(from._internal_vip_level());
  }
  if (from.avatar_frame() != 0) {
    _internal_set_avatar_frame(from._internal_avatar_frame());
  }
}

void MsgTopInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgTopInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTopInfo::CopyFrom(const MsgTopInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgTopInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTopInfo::IsInitialized() const {
  return true;
}

void MsgTopInfo::InternalSwap(MsgTopInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  head_url_.Swap(&other->head_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nick_name_.Swap(&other->nick_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgTopInfo, avatar_frame_)
      + sizeof(MsgTopInfo::avatar_frame_)
      - PROTOBUF_FIELD_OFFSET(MsgTopInfo, rank_id_)>(
          reinterpret_cast<char*>(&rank_id_),
          reinterpret_cast<char*>(&other->rank_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgTopInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgGetRank::_Internal {
 public:
};

MsgGetRank::MsgGetRank(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgGetRank)
}
MsgGetRank::MsgGetRank(const MsgGetRank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rank_type_, &from.rank_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_row_) -
    reinterpret_cast<char*>(&rank_type_)) + sizeof(max_row_));
  // @@protoc_insertion_point(copy_constructor:MsgGetRank)
}

void MsgGetRank::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&rank_type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&max_row_) -
      reinterpret_cast<char*>(&rank_type_)) + sizeof(max_row_));
}

MsgGetRank::~MsgGetRank() {
  // @@protoc_insertion_point(destructor:MsgGetRank)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgGetRank::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgGetRank::ArenaDtor(void* object) {
  MsgGetRank* _this = reinterpret_cast< MsgGetRank* >(object);
  (void)_this;
}
void MsgGetRank::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgGetRank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgGetRank& MsgGetRank::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgGetRank_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgGetRank::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgGetRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&rank_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_row_) -
      reinterpret_cast<char*>(&rank_type_)) + sizeof(max_row_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgGetRank::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 rank_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rank_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 current_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          current_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_row = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          max_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgGetRank::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgGetRank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rank_type = 1;
  if (this->rank_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_rank_type(), target);
  }

  // int32 user_id = 2;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_user_id(), target);
  }

  // int32 current_page = 3;
  if (this->current_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_current_page(), target);
  }

  // int32 max_row = 4;
  if (this->max_row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_row(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgGetRank)
  return target;
}

size_t MsgGetRank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgGetRank)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 rank_type = 1;
  if (this->rank_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rank_type());
  }

  // int32 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // int32 current_page = 3;
  if (this->current_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_current_page());
  }

  // int32 max_row = 4;
  if (this->max_row() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_row());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgGetRank::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgGetRank)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgGetRank* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgGetRank>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgGetRank)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgGetRank)
    MergeFrom(*source);
  }
}

void MsgGetRank::MergeFrom(const MsgGetRank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgGetRank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rank_type() != 0) {
    _internal_set_rank_type(from._internal_rank_type());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.current_page() != 0) {
    _internal_set_current_page(from._internal_current_page());
  }
  if (from.max_row() != 0) {
    _internal_set_max_row(from._internal_max_row());
  }
}

void MsgGetRank::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgGetRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGetRank::CopyFrom(const MsgGetRank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgGetRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGetRank::IsInitialized() const {
  return true;
}

void MsgGetRank::InternalSwap(MsgGetRank* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgGetRank, max_row_)
      + sizeof(MsgGetRank::max_row_)
      - PROTOBUF_FIELD_OFFSET(MsgGetRank, rank_type_)>(
          reinterpret_cast<char*>(&rank_type_),
          reinterpret_cast<char*>(&other->rank_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgGetRank::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgTopListResp::_Internal {
 public:
};

MsgTopListResp::MsgTopListResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lists_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgTopListResp)
}
MsgTopListResp::MsgTopListResp(const MsgTopListResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lists_(from.lists_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_end_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(is_end_));
  // @@protoc_insertion_point(copy_constructor:MsgTopListResp)
}

void MsgTopListResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgTopListResp_Login_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_end_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(is_end_));
}

MsgTopListResp::~MsgTopListResp() {
  // @@protoc_insertion_point(destructor:MsgTopListResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgTopListResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgTopListResp::ArenaDtor(void* object) {
  MsgTopListResp* _this = reinterpret_cast< MsgTopListResp* >(object);
  (void)_this;
}
void MsgTopListResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgTopListResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgTopListResp& MsgTopListResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgTopListResp_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgTopListResp::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgTopListResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lists_.Clear();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_end_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(is_end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgTopListResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rank_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rank_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 this_rank_ndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          this_rank_ndex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 this_gold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          this_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_end = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .MsgTopInfo lists = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lists(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgTopListResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgTopListResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // int32 rank_type = 2;
  if (this->rank_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rank_type(), target);
  }

  // int32 this_rank_ndex = 3;
  if (this->this_rank_ndex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_this_rank_ndex(), target);
  }

  // int64 this_gold = 4;
  if (this->this_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_this_gold(), target);
  }

  // int32 is_end = 5;
  if (this->is_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_is_end(), target);
  }

  // repeated .MsgTopInfo lists = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lists_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_lists(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgTopListResp)
  return target;
}

size_t MsgTopListResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgTopListResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MsgTopInfo lists = 6;
  total_size += 1UL * this->_internal_lists_size();
  for (const auto& msg : this->lists_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // int32 rank_type = 2;
  if (this->rank_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rank_type());
  }

  // int64 this_gold = 4;
  if (this->this_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_this_gold());
  }

  // int32 this_rank_ndex = 3;
  if (this->this_rank_ndex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_this_rank_ndex());
  }

  // int32 is_end = 5;
  if (this->is_end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_end());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgTopListResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgTopListResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgTopListResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgTopListResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgTopListResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgTopListResp)
    MergeFrom(*source);
  }
}

void MsgTopListResp::MergeFrom(const MsgTopListResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgTopListResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lists_.MergeFrom(from.lists_);
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.rank_type() != 0) {
    _internal_set_rank_type(from._internal_rank_type());
  }
  if (from.this_gold() != 0) {
    _internal_set_this_gold(from._internal_this_gold());
  }
  if (from.this_rank_ndex() != 0) {
    _internal_set_this_rank_ndex(from._internal_this_rank_ndex());
  }
  if (from.is_end() != 0) {
    _internal_set_is_end(from._internal_is_end());
  }
}

void MsgTopListResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgTopListResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTopListResp::CopyFrom(const MsgTopListResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgTopListResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTopListResp::IsInitialized() const {
  return true;
}

void MsgTopListResp::InternalSwap(MsgTopListResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lists_.InternalSwap(&other->lists_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgTopListResp, is_end_)
      + sizeof(MsgTopListResp::is_end_)
      - PROTOBUF_FIELD_OFFSET(MsgTopListResp, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgTopListResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgTransferOperateResp::_Internal {
 public:
};

MsgTransferOperateResp::MsgTransferOperateResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgTransferOperateResp)
}
MsgTransferOperateResp::MsgTransferOperateResp(const MsgTransferOperateResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_gold_, &from.user_gold_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_value_) -
    reinterpret_cast<char*>(&user_gold_)) + sizeof(ret_value_));
  // @@protoc_insertion_point(copy_constructor:MsgTransferOperateResp)
}

void MsgTransferOperateResp::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_gold_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ret_value_) -
      reinterpret_cast<char*>(&user_gold_)) + sizeof(ret_value_));
}

MsgTransferOperateResp::~MsgTransferOperateResp() {
  // @@protoc_insertion_point(destructor:MsgTransferOperateResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgTransferOperateResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgTransferOperateResp::ArenaDtor(void* object) {
  MsgTransferOperateResp* _this = reinterpret_cast< MsgTransferOperateResp* >(object);
  (void)_this;
}
void MsgTransferOperateResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgTransferOperateResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgTransferOperateResp& MsgTransferOperateResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgTransferOperateResp_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgTransferOperateResp::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgTransferOperateResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_gold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_value_) -
      reinterpret_cast<char*>(&user_gold_)) + sizeof(ret_value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgTransferOperateResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 user_gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          user_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgTransferOperateResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgTransferOperateResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_value = 1;
  if (this->ret_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret_value(), target);
  }

  // int64 user_gold = 2;
  if (this->user_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_user_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgTransferOperateResp)
  return target;
}

size_t MsgTransferOperateResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgTransferOperateResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 user_gold = 2;
  if (this->user_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_gold());
  }

  // int32 ret_value = 1;
  if (this->ret_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgTransferOperateResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgTransferOperateResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgTransferOperateResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgTransferOperateResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgTransferOperateResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgTransferOperateResp)
    MergeFrom(*source);
  }
}

void MsgTransferOperateResp::MergeFrom(const MsgTransferOperateResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgTransferOperateResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_gold() != 0) {
    _internal_set_user_gold(from._internal_user_gold());
  }
  if (from.ret_value() != 0) {
    _internal_set_ret_value(from._internal_ret_value());
  }
}

void MsgTransferOperateResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgTransferOperateResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTransferOperateResp::CopyFrom(const MsgTransferOperateResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgTransferOperateResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTransferOperateResp::IsInitialized() const {
  return true;
}

void MsgTransferOperateResp::InternalSwap(MsgTransferOperateResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgTransferOperateResp, ret_value_)
      + sizeof(MsgTransferOperateResp::ret_value_)
      - PROTOBUF_FIELD_OFFSET(MsgTransferOperateResp, user_gold_)>(
          reinterpret_cast<char*>(&user_gold_),
          reinterpret_cast<char*>(&other->user_gold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgTransferOperateResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgTransferOperateSyncResp::_Internal {
 public:
};

MsgTransferOperateSyncResp::MsgTransferOperateSyncResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgTransferOperateSyncResp)
}
MsgTransferOperateSyncResp::MsgTransferOperateSyncResp(const MsgTransferOperateSyncResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ret_value_, &from.ret_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&transfer_id_) -
    reinterpret_cast<char*>(&ret_value_)) + sizeof(transfer_id_));
  // @@protoc_insertion_point(copy_constructor:MsgTransferOperateSyncResp)
}

void MsgTransferOperateSyncResp::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ret_value_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&transfer_id_) -
      reinterpret_cast<char*>(&ret_value_)) + sizeof(transfer_id_));
}

MsgTransferOperateSyncResp::~MsgTransferOperateSyncResp() {
  // @@protoc_insertion_point(destructor:MsgTransferOperateSyncResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgTransferOperateSyncResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgTransferOperateSyncResp::ArenaDtor(void* object) {
  MsgTransferOperateSyncResp* _this = reinterpret_cast< MsgTransferOperateSyncResp* >(object);
  (void)_this;
}
void MsgTransferOperateSyncResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgTransferOperateSyncResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgTransferOperateSyncResp& MsgTransferOperateSyncResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgTransferOperateSyncResp_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgTransferOperateSyncResp::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgTransferOperateSyncResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ret_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transfer_id_) -
      reinterpret_cast<char*>(&ret_value_)) + sizeof(transfer_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgTransferOperateSyncResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 send_user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          send_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 add_gold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          add_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 receive_state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          receive_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 transfer_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          transfer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgTransferOperateSyncResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgTransferOperateSyncResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_value = 1;
  if (this->ret_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret_value(), target);
  }

  // int32 send_user_id = 3;
  if (this->send_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_send_user_id(), target);
  }

  // int64 add_gold = 4;
  if (this->add_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_add_gold(), target);
  }

  // int64 receive_state = 6;
  if (this->receive_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_receive_state(), target);
  }

  // int64 transfer_id = 7;
  if (this->transfer_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_transfer_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgTransferOperateSyncResp)
  return target;
}

size_t MsgTransferOperateSyncResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgTransferOperateSyncResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ret_value = 1;
  if (this->ret_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret_value());
  }

  // int32 send_user_id = 3;
  if (this->send_user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_send_user_id());
  }

  // int64 add_gold = 4;
  if (this->add_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_add_gold());
  }

  // int64 receive_state = 6;
  if (this->receive_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_receive_state());
  }

  // int64 transfer_id = 7;
  if (this->transfer_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_transfer_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgTransferOperateSyncResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgTransferOperateSyncResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgTransferOperateSyncResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgTransferOperateSyncResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgTransferOperateSyncResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgTransferOperateSyncResp)
    MergeFrom(*source);
  }
}

void MsgTransferOperateSyncResp::MergeFrom(const MsgTransferOperateSyncResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgTransferOperateSyncResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ret_value() != 0) {
    _internal_set_ret_value(from._internal_ret_value());
  }
  if (from.send_user_id() != 0) {
    _internal_set_send_user_id(from._internal_send_user_id());
  }
  if (from.add_gold() != 0) {
    _internal_set_add_gold(from._internal_add_gold());
  }
  if (from.receive_state() != 0) {
    _internal_set_receive_state(from._internal_receive_state());
  }
  if (from.transfer_id() != 0) {
    _internal_set_transfer_id(from._internal_transfer_id());
  }
}

void MsgTransferOperateSyncResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgTransferOperateSyncResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTransferOperateSyncResp::CopyFrom(const MsgTransferOperateSyncResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgTransferOperateSyncResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTransferOperateSyncResp::IsInitialized() const {
  return true;
}

void MsgTransferOperateSyncResp::InternalSwap(MsgTransferOperateSyncResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgTransferOperateSyncResp, transfer_id_)
      + sizeof(MsgTransferOperateSyncResp::transfer_id_)
      - PROTOBUF_FIELD_OFFSET(MsgTransferOperateSyncResp, ret_value_)>(
          reinterpret_cast<char*>(&ret_value_),
          reinterpret_cast<char*>(&other->ret_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgTransferOperateSyncResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgTransferReceiveResp::_Internal {
 public:
};

MsgTransferReceiveResp::MsgTransferReceiveResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgTransferReceiveResp)
}
MsgTransferReceiveResp::MsgTransferReceiveResp(const MsgTransferReceiveResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&change_gold_, &from.change_gold_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_value_) -
    reinterpret_cast<char*>(&change_gold_)) + sizeof(ret_value_));
  // @@protoc_insertion_point(copy_constructor:MsgTransferReceiveResp)
}

void MsgTransferReceiveResp::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&change_gold_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ret_value_) -
      reinterpret_cast<char*>(&change_gold_)) + sizeof(ret_value_));
}

MsgTransferReceiveResp::~MsgTransferReceiveResp() {
  // @@protoc_insertion_point(destructor:MsgTransferReceiveResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgTransferReceiveResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgTransferReceiveResp::ArenaDtor(void* object) {
  MsgTransferReceiveResp* _this = reinterpret_cast< MsgTransferReceiveResp* >(object);
  (void)_this;
}
void MsgTransferReceiveResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgTransferReceiveResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgTransferReceiveResp& MsgTransferReceiveResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgTransferReceiveResp_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgTransferReceiveResp::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgTransferReceiveResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&change_gold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_value_) -
      reinterpret_cast<char*>(&change_gold_)) + sizeof(ret_value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgTransferReceiveResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 change_gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          change_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgTransferReceiveResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgTransferReceiveResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_value = 1;
  if (this->ret_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret_value(), target);
  }

  // int64 change_gold = 2;
  if (this->change_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_change_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgTransferReceiveResp)
  return target;
}

size_t MsgTransferReceiveResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgTransferReceiveResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 change_gold = 2;
  if (this->change_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_change_gold());
  }

  // int32 ret_value = 1;
  if (this->ret_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgTransferReceiveResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgTransferReceiveResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgTransferReceiveResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgTransferReceiveResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgTransferReceiveResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgTransferReceiveResp)
    MergeFrom(*source);
  }
}

void MsgTransferReceiveResp::MergeFrom(const MsgTransferReceiveResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgTransferReceiveResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.change_gold() != 0) {
    _internal_set_change_gold(from._internal_change_gold());
  }
  if (from.ret_value() != 0) {
    _internal_set_ret_value(from._internal_ret_value());
  }
}

void MsgTransferReceiveResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgTransferReceiveResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTransferReceiveResp::CopyFrom(const MsgTransferReceiveResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgTransferReceiveResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTransferReceiveResp::IsInitialized() const {
  return true;
}

void MsgTransferReceiveResp::InternalSwap(MsgTransferReceiveResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgTransferReceiveResp, ret_value_)
      + sizeof(MsgTransferReceiveResp::ret_value_)
      - PROTOBUF_FIELD_OFFSET(MsgTransferReceiveResp, change_gold_)>(
          reinterpret_cast<char*>(&change_gold_),
          reinterpret_cast<char*>(&other->change_gold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgTransferReceiveResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgTransferRecord::_Internal {
 public:
};

MsgTransferRecord::MsgTransferRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgTransferRecord)
}
MsgTransferRecord::MsgTransferRecord(const MsgTransferRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nickname().empty()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArena());
  }
  timer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_timer().empty()) {
    timer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timer(), 
      GetArena());
  }
  ::memcpy(&transfer_gold_, &from.transfer_gold_,
    static_cast<size_t>(reinterpret_cast<char*>(&receive_state_) -
    reinterpret_cast<char*>(&transfer_gold_)) + sizeof(receive_state_));
  // @@protoc_insertion_point(copy_constructor:MsgTransferRecord)
}

void MsgTransferRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgTransferRecord_Login_2eproto.base);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&transfer_gold_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&receive_state_) -
      reinterpret_cast<char*>(&transfer_gold_)) + sizeof(receive_state_));
}

MsgTransferRecord::~MsgTransferRecord() {
  // @@protoc_insertion_point(destructor:MsgTransferRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgTransferRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgTransferRecord::ArenaDtor(void* object) {
  MsgTransferRecord* _this = reinterpret_cast< MsgTransferRecord* >(object);
  (void)_this;
}
void MsgTransferRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgTransferRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgTransferRecord& MsgTransferRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgTransferRecord_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgTransferRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgTransferRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nickname_.ClearToEmpty();
  timer_.ClearToEmpty();
  ::memset(&transfer_gold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&receive_state_) -
      reinterpret_cast<char*>(&transfer_gold_)) + sizeof(receive_state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgTransferRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 send_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          send_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgTransferRecord.nickname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 transfer_gold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          transfer_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string timer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_timer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgTransferRecord.timer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 recv_user_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          recv_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 receive_state = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          receive_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 transfer_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          transfer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgTransferRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgTransferRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 send_user_id = 1;
  if (this->send_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_send_user_id(), target);
  }

  // string nickname = 2;
  if (this->nickname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgTransferRecord.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // int64 transfer_gold = 3;
  if (this->transfer_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_transfer_gold(), target);
  }

  // string timer = 5;
  if (this->timer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timer().data(), static_cast<int>(this->_internal_timer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgTransferRecord.timer");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_timer(), target);
  }

  // int32 recv_user_id = 6;
  if (this->recv_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_recv_user_id(), target);
  }

  // int32 receive_state = 7;
  if (this->receive_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_receive_state(), target);
  }

  // int64 transfer_id = 8;
  if (this->transfer_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_transfer_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgTransferRecord)
  return target;
}

size_t MsgTransferRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgTransferRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickname = 2;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string timer = 5;
  if (this->timer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timer());
  }

  // int64 transfer_gold = 3;
  if (this->transfer_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_transfer_gold());
  }

  // int32 send_user_id = 1;
  if (this->send_user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_send_user_id());
  }

  // int32 recv_user_id = 6;
  if (this->recv_user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_recv_user_id());
  }

  // int64 transfer_id = 8;
  if (this->transfer_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_transfer_id());
  }

  // int32 receive_state = 7;
  if (this->receive_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_receive_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgTransferRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgTransferRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgTransferRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgTransferRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgTransferRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgTransferRecord)
    MergeFrom(*source);
  }
}

void MsgTransferRecord::MergeFrom(const MsgTransferRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgTransferRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nickname().size() > 0) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (from.timer().size() > 0) {
    _internal_set_timer(from._internal_timer());
  }
  if (from.transfer_gold() != 0) {
    _internal_set_transfer_gold(from._internal_transfer_gold());
  }
  if (from.send_user_id() != 0) {
    _internal_set_send_user_id(from._internal_send_user_id());
  }
  if (from.recv_user_id() != 0) {
    _internal_set_recv_user_id(from._internal_recv_user_id());
  }
  if (from.transfer_id() != 0) {
    _internal_set_transfer_id(from._internal_transfer_id());
  }
  if (from.receive_state() != 0) {
    _internal_set_receive_state(from._internal_receive_state());
  }
}

void MsgTransferRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgTransferRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTransferRecord::CopyFrom(const MsgTransferRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgTransferRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTransferRecord::IsInitialized() const {
  return true;
}

void MsgTransferRecord::InternalSwap(MsgTransferRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nickname_.Swap(&other->nickname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  timer_.Swap(&other->timer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgTransferRecord, receive_state_)
      + sizeof(MsgTransferRecord::receive_state_)
      - PROTOBUF_FIELD_OFFSET(MsgTransferRecord, transfer_gold_)>(
          reinterpret_cast<char*>(&transfer_gold_),
          reinterpret_cast<char*>(&other->transfer_gold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgTransferRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgTransferRecordResp::_Internal {
 public:
};

MsgTransferRecordResp::MsgTransferRecordResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  records_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgTransferRecordResp)
}
MsgTransferRecordResp::MsgTransferRecordResp(const MsgTransferRecordResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      records_(from.records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MsgTransferRecordResp)
}

void MsgTransferRecordResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgTransferRecordResp_Login_2eproto.base);
}

MsgTransferRecordResp::~MsgTransferRecordResp() {
  // @@protoc_insertion_point(destructor:MsgTransferRecordResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgTransferRecordResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgTransferRecordResp::ArenaDtor(void* object) {
  MsgTransferRecordResp* _this = reinterpret_cast< MsgTransferRecordResp* >(object);
  (void)_this;
}
void MsgTransferRecordResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgTransferRecordResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgTransferRecordResp& MsgTransferRecordResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgTransferRecordResp_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgTransferRecordResp::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgTransferRecordResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  records_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgTransferRecordResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .MsgTransferRecord records = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgTransferRecordResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgTransferRecordResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MsgTransferRecord records = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgTransferRecordResp)
  return target;
}

size_t MsgTransferRecordResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgTransferRecordResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MsgTransferRecord records = 1;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgTransferRecordResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgTransferRecordResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgTransferRecordResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgTransferRecordResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgTransferRecordResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgTransferRecordResp)
    MergeFrom(*source);
  }
}

void MsgTransferRecordResp::MergeFrom(const MsgTransferRecordResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgTransferRecordResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  records_.MergeFrom(from.records_);
}

void MsgTransferRecordResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgTransferRecordResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTransferRecordResp::CopyFrom(const MsgTransferRecordResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgTransferRecordResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTransferRecordResp::IsInitialized() const {
  return true;
}

void MsgTransferRecordResp::InternalSwap(MsgTransferRecordResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  records_.InternalSwap(&other->records_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgTransferRecordResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgPhoneCode::_Internal {
 public:
};

MsgPhoneCode::MsgPhoneCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgPhoneCode)
}
MsgPhoneCode::MsgPhoneCode(const MsgPhoneCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  area_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_area_code().empty()) {
    area_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_area_code(), 
      GetArena());
  }
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phone().empty()) {
    phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phone(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:MsgPhoneCode)
}

void MsgPhoneCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgPhoneCode_Login_2eproto.base);
  area_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MsgPhoneCode::~MsgPhoneCode() {
  // @@protoc_insertion_point(destructor:MsgPhoneCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgPhoneCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  area_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgPhoneCode::ArenaDtor(void* object) {
  MsgPhoneCode* _this = reinterpret_cast< MsgPhoneCode* >(object);
  (void)_this;
}
void MsgPhoneCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgPhoneCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgPhoneCode& MsgPhoneCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgPhoneCode_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgPhoneCode::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgPhoneCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  area_code_.ClearToEmpty();
  phone_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgPhoneCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string area_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_area_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgPhoneCode.area_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string phone = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_phone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgPhoneCode.phone"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgPhoneCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPhoneCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string area_code = 1;
  if (this->area_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_area_code().data(), static_cast<int>(this->_internal_area_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgPhoneCode.area_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_area_code(), target);
  }

  // string phone = 2;
  if (this->phone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone().data(), static_cast<int>(this->_internal_phone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgPhoneCode.phone");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_phone(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPhoneCode)
  return target;
}

size_t MsgPhoneCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgPhoneCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string area_code = 1;
  if (this->area_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_area_code());
  }

  // string phone = 2;
  if (this->phone().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgPhoneCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgPhoneCode)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgPhoneCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgPhoneCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgPhoneCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgPhoneCode)
    MergeFrom(*source);
  }
}

void MsgPhoneCode::MergeFrom(const MsgPhoneCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgPhoneCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.area_code().size() > 0) {
    _internal_set_area_code(from._internal_area_code());
  }
  if (from.phone().size() > 0) {
    _internal_set_phone(from._internal_phone());
  }
}

void MsgPhoneCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgPhoneCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPhoneCode::CopyFrom(const MsgPhoneCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgPhoneCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPhoneCode::IsInitialized() const {
  return true;
}

void MsgPhoneCode::InternalSwap(MsgPhoneCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  area_code_.Swap(&other->area_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  phone_.Swap(&other->phone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgPhoneCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgItem::_Internal {
 public:
};

MsgItem::MsgItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgItem)
}
MsgItem::MsgItem(const MsgItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_num_, &from.item_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&item_num_)) + sizeof(item_id_));
  // @@protoc_insertion_point(copy_constructor:MsgItem)
}

void MsgItem::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&item_num_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&item_id_) -
      reinterpret_cast<char*>(&item_num_)) + sizeof(item_id_));
}

MsgItem::~MsgItem() {
  // @@protoc_insertion_point(destructor:MsgItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgItem::ArenaDtor(void* object) {
  MsgItem* _this = reinterpret_cast< MsgItem* >(object);
  (void)_this;
}
void MsgItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgItem& MsgItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgItem_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgItem::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&item_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_id_) -
      reinterpret_cast<char*>(&item_num_)) + sizeof(item_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 item_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          item_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 item_id = 1;
  if (this->item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_item_id(), target);
  }

  // int64 item_num = 2;
  if (this->item_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_item_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgItem)
  return target;
}

size_t MsgItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 item_num = 2;
  if (this->item_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_item_num());
  }

  // int32 item_id = 1;
  if (this->item_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_item_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgItem)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgItem)
    MergeFrom(*source);
  }
}

void MsgItem::MergeFrom(const MsgItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.item_num() != 0) {
    _internal_set_item_num(from._internal_item_num());
  }
  if (from.item_id() != 0) {
    _internal_set_item_id(from._internal_item_id());
  }
}

void MsgItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgItem::CopyFrom(const MsgItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgItem::IsInitialized() const {
  return true;
}

void MsgItem::InternalSwap(MsgItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgItem, item_id_)
      + sizeof(MsgItem::item_id_)
      - PROTOBUF_FIELD_OFFSET(MsgItem, item_num_)>(
          reinterpret_cast<char*>(&item_num_),
          reinterpret_cast<char*>(&other->item_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgPlayerItem::_Internal {
 public:
};

MsgPlayerItem::MsgPlayerItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  item_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgPlayerItem)
}
MsgPlayerItem::MsgPlayerItem(const MsgPlayerItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      item_(from.item_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MsgPlayerItem)
}

void MsgPlayerItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgPlayerItem_Login_2eproto.base);
}

MsgPlayerItem::~MsgPlayerItem() {
  // @@protoc_insertion_point(destructor:MsgPlayerItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgPlayerItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgPlayerItem::ArenaDtor(void* object) {
  MsgPlayerItem* _this = reinterpret_cast< MsgPlayerItem* >(object);
  (void)_this;
}
void MsgPlayerItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgPlayerItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgPlayerItem& MsgPlayerItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgPlayerItem_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgPlayerItem::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgPlayerItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgPlayerItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .MsgItem item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgPlayerItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPlayerItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MsgItem item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_item(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPlayerItem)
  return target;
}

size_t MsgPlayerItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgPlayerItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MsgItem item = 1;
  total_size += 1UL * this->_internal_item_size();
  for (const auto& msg : this->item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgPlayerItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgPlayerItem)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgPlayerItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgPlayerItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgPlayerItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgPlayerItem)
    MergeFrom(*source);
  }
}

void MsgPlayerItem::MergeFrom(const MsgPlayerItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgPlayerItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void MsgPlayerItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgPlayerItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerItem::CopyFrom(const MsgPlayerItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgPlayerItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerItem::IsInitialized() const {
  return true;
}

void MsgPlayerItem::InternalSwap(MsgPlayerItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  item_.InternalSwap(&other->item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgPlayerItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgTransferQueryNickname::_Internal {
 public:
};

MsgTransferQueryNickname::MsgTransferQueryNickname(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgTransferQueryNickname)
}
MsgTransferQueryNickname::MsgTransferQueryNickname(const MsgTransferQueryNickname& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nickname().empty()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArena());
  }
  ::memcpy(&ret_value_, &from.ret_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&tax_) -
    reinterpret_cast<char*>(&ret_value_)) + sizeof(tax_));
  // @@protoc_insertion_point(copy_constructor:MsgTransferQueryNickname)
}

void MsgTransferQueryNickname::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgTransferQueryNickname_Login_2eproto.base);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ret_value_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&tax_) -
      reinterpret_cast<char*>(&ret_value_)) + sizeof(tax_));
}

MsgTransferQueryNickname::~MsgTransferQueryNickname() {
  // @@protoc_insertion_point(destructor:MsgTransferQueryNickname)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgTransferQueryNickname::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgTransferQueryNickname::ArenaDtor(void* object) {
  MsgTransferQueryNickname* _this = reinterpret_cast< MsgTransferQueryNickname* >(object);
  (void)_this;
}
void MsgTransferQueryNickname::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgTransferQueryNickname::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgTransferQueryNickname& MsgTransferQueryNickname::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgTransferQueryNickname_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgTransferQueryNickname::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgTransferQueryNickname)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nickname_.ClearToEmpty();
  ::memset(&ret_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tax_) -
      reinterpret_cast<char*>(&ret_value_)) + sizeof(tax_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgTransferQueryNickname::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret_Value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgTransferQueryNickname.nickname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tax = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgTransferQueryNickname::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgTransferQueryNickname)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_Value = 1;
  if (this->ret_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret_value(), target);
  }

  // string nickname = 2;
  if (this->nickname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgTransferQueryNickname.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // int32 tax = 3;
  if (this->tax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_tax(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgTransferQueryNickname)
  return target;
}

size_t MsgTransferQueryNickname::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgTransferQueryNickname)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickname = 2;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // int32 ret_Value = 1;
  if (this->ret_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret_value());
  }

  // int32 tax = 3;
  if (this->tax() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tax());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgTransferQueryNickname::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgTransferQueryNickname)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgTransferQueryNickname* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgTransferQueryNickname>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgTransferQueryNickname)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgTransferQueryNickname)
    MergeFrom(*source);
  }
}

void MsgTransferQueryNickname::MergeFrom(const MsgTransferQueryNickname& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgTransferQueryNickname)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nickname().size() > 0) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (from.ret_value() != 0) {
    _internal_set_ret_value(from._internal_ret_value());
  }
  if (from.tax() != 0) {
    _internal_set_tax(from._internal_tax());
  }
}

void MsgTransferQueryNickname::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgTransferQueryNickname)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTransferQueryNickname::CopyFrom(const MsgTransferQueryNickname& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgTransferQueryNickname)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTransferQueryNickname::IsInitialized() const {
  return true;
}

void MsgTransferQueryNickname::InternalSwap(MsgTransferQueryNickname* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nickname_.Swap(&other->nickname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgTransferQueryNickname, tax_)
      + sizeof(MsgTransferQueryNickname::tax_)
      - PROTOBUF_FIELD_OFFSET(MsgTransferQueryNickname, ret_value_)>(
          reinterpret_cast<char*>(&ret_value_),
          reinterpret_cast<char*>(&other->ret_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgTransferQueryNickname::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgSubagentInformation::_Internal {
 public:
};

MsgSubagentInformation::MsgSubagentInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgSubagentInformation)
}
MsgSubagentInformation::MsgSubagentInformation(const MsgSubagentInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  agent_nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_agent_nickname().empty()) {
    agent_nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_agent_nickname(), 
      GetArena());
  }
  ::memcpy(&agent_user_id_, &from.agent_user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&vip_level_) -
    reinterpret_cast<char*>(&agent_user_id_)) + sizeof(vip_level_));
  // @@protoc_insertion_point(copy_constructor:MsgSubagentInformation)
}

void MsgSubagentInformation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgSubagentInformation_Login_2eproto.base);
  agent_nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&agent_user_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&vip_level_) -
      reinterpret_cast<char*>(&agent_user_id_)) + sizeof(vip_level_));
}

MsgSubagentInformation::~MsgSubagentInformation() {
  // @@protoc_insertion_point(destructor:MsgSubagentInformation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgSubagentInformation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  agent_nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgSubagentInformation::ArenaDtor(void* object) {
  MsgSubagentInformation* _this = reinterpret_cast< MsgSubagentInformation* >(object);
  (void)_this;
}
void MsgSubagentInformation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgSubagentInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgSubagentInformation& MsgSubagentInformation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgSubagentInformation_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgSubagentInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgSubagentInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agent_nickname_.ClearToEmpty();
  ::memset(&agent_user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vip_level_) -
      reinterpret_cast<char*>(&agent_user_id_)) + sizeof(vip_level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgSubagentInformation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string agent_nickname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_agent_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgSubagentInformation.agent_nickname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 agent_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          agent_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool agent_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          agent_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_shift_to = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          total_shift_to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_roll_out = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          total_roll_out_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vip_level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          vip_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgSubagentInformation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgSubagentInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string agent_nickname = 1;
  if (this->agent_nickname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agent_nickname().data(), static_cast<int>(this->_internal_agent_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgSubagentInformation.agent_nickname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_agent_nickname(), target);
  }

  // int32 agent_user_id = 2;
  if (this->agent_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_agent_user_id(), target);
  }

  // bool agent_type = 3;
  if (this->agent_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_agent_type(), target);
  }

  // int64 total_shift_to = 4;
  if (this->total_shift_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_total_shift_to(), target);
  }

  // int64 total_roll_out = 5;
  if (this->total_roll_out() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_total_roll_out(), target);
  }

  // int32 vip_level = 6;
  if (this->vip_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_vip_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgSubagentInformation)
  return target;
}

size_t MsgSubagentInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgSubagentInformation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string agent_nickname = 1;
  if (this->agent_nickname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agent_nickname());
  }

  // int32 agent_user_id = 2;
  if (this->agent_user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_agent_user_id());
  }

  // bool agent_type = 3;
  if (this->agent_type() != 0) {
    total_size += 1 + 1;
  }

  // int64 total_shift_to = 4;
  if (this->total_shift_to() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_shift_to());
  }

  // int64 total_roll_out = 5;
  if (this->total_roll_out() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_roll_out());
  }

  // int32 vip_level = 6;
  if (this->vip_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vip_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgSubagentInformation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgSubagentInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgSubagentInformation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgSubagentInformation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgSubagentInformation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgSubagentInformation)
    MergeFrom(*source);
  }
}

void MsgSubagentInformation::MergeFrom(const MsgSubagentInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgSubagentInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.agent_nickname().size() > 0) {
    _internal_set_agent_nickname(from._internal_agent_nickname());
  }
  if (from.agent_user_id() != 0) {
    _internal_set_agent_user_id(from._internal_agent_user_id());
  }
  if (from.agent_type() != 0) {
    _internal_set_agent_type(from._internal_agent_type());
  }
  if (from.total_shift_to() != 0) {
    _internal_set_total_shift_to(from._internal_total_shift_to());
  }
  if (from.total_roll_out() != 0) {
    _internal_set_total_roll_out(from._internal_total_roll_out());
  }
  if (from.vip_level() != 0) {
    _internal_set_vip_level(from._internal_vip_level());
  }
}

void MsgSubagentInformation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgSubagentInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSubagentInformation::CopyFrom(const MsgSubagentInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgSubagentInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSubagentInformation::IsInitialized() const {
  return true;
}

void MsgSubagentInformation::InternalSwap(MsgSubagentInformation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  agent_nickname_.Swap(&other->agent_nickname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgSubagentInformation, vip_level_)
      + sizeof(MsgSubagentInformation::vip_level_)
      - PROTOBUF_FIELD_OFFSET(MsgSubagentInformation, agent_user_id_)>(
          reinterpret_cast<char*>(&agent_user_id_),
          reinterpret_cast<char*>(&other->agent_user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgSubagentInformation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgTtotalSubagentInformation::_Internal {
 public:
};

MsgTtotalSubagentInformation::MsgTtotalSubagentInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  agent_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgTtotalSubagentInformation)
}
MsgTtotalSubagentInformation::MsgTtotalSubagentInformation(const MsgTtotalSubagentInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      agent_info_(from.agent_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MsgTtotalSubagentInformation)
}

void MsgTtotalSubagentInformation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgTtotalSubagentInformation_Login_2eproto.base);
}

MsgTtotalSubagentInformation::~MsgTtotalSubagentInformation() {
  // @@protoc_insertion_point(destructor:MsgTtotalSubagentInformation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgTtotalSubagentInformation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgTtotalSubagentInformation::ArenaDtor(void* object) {
  MsgTtotalSubagentInformation* _this = reinterpret_cast< MsgTtotalSubagentInformation* >(object);
  (void)_this;
}
void MsgTtotalSubagentInformation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgTtotalSubagentInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgTtotalSubagentInformation& MsgTtotalSubagentInformation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgTtotalSubagentInformation_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgTtotalSubagentInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgTtotalSubagentInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agent_info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgTtotalSubagentInformation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .MsgSubagentInformation agent_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_agent_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgTtotalSubagentInformation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgTtotalSubagentInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MsgSubagentInformation agent_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_agent_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_agent_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgTtotalSubagentInformation)
  return target;
}

size_t MsgTtotalSubagentInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgTtotalSubagentInformation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MsgSubagentInformation agent_info = 1;
  total_size += 1UL * this->_internal_agent_info_size();
  for (const auto& msg : this->agent_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgTtotalSubagentInformation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgTtotalSubagentInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgTtotalSubagentInformation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgTtotalSubagentInformation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgTtotalSubagentInformation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgTtotalSubagentInformation)
    MergeFrom(*source);
  }
}

void MsgTtotalSubagentInformation::MergeFrom(const MsgTtotalSubagentInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgTtotalSubagentInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  agent_info_.MergeFrom(from.agent_info_);
}

void MsgTtotalSubagentInformation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgTtotalSubagentInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTtotalSubagentInformation::CopyFrom(const MsgTtotalSubagentInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgTtotalSubagentInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTtotalSubagentInformation::IsInitialized() const {
  return true;
}

void MsgTtotalSubagentInformation::InternalSwap(MsgTtotalSubagentInformation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  agent_info_.InternalSwap(&other->agent_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgTtotalSubagentInformation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgBindParentInfo::_Internal {
 public:
};

MsgBindParentInfo::MsgBindParentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgBindParentInfo)
}
MsgBindParentInfo::MsgBindParentInfo(const MsgBindParentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar().empty()) {
    avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar(), 
      GetArena());
  }
  nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick_name().empty()) {
    nick_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nick_name(), 
      GetArena());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&avatar_frame_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(avatar_frame_));
  // @@protoc_insertion_point(copy_constructor:MsgBindParentInfo)
}

void MsgBindParentInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgBindParentInfo_Login_2eproto.base);
  avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&avatar_frame_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(avatar_frame_));
}

MsgBindParentInfo::~MsgBindParentInfo() {
  // @@protoc_insertion_point(destructor:MsgBindParentInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgBindParentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  avatar_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nick_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgBindParentInfo::ArenaDtor(void* object) {
  MsgBindParentInfo* _this = reinterpret_cast< MsgBindParentInfo* >(object);
  (void)_this;
}
void MsgBindParentInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgBindParentInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgBindParentInfo& MsgBindParentInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgBindParentInfo_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgBindParentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgBindParentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatar_.ClearToEmpty();
  nick_name_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avatar_frame_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(avatar_frame_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgBindParentInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatar = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_avatar();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgBindParentInfo.avatar"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 avatar_frame = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          avatar_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nick_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_nick_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgBindParentInfo.nick_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgBindParentInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgBindParentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // string avatar = 2;
  if (this->avatar().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar().data(), static_cast<int>(this->_internal_avatar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgBindParentInfo.avatar");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_avatar(), target);
  }

  // int32 avatar_frame = 3;
  if (this->avatar_frame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_avatar_frame(), target);
  }

  // string nick_name = 4;
  if (this->nick_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick_name().data(), static_cast<int>(this->_internal_nick_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgBindParentInfo.nick_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_nick_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgBindParentInfo)
  return target;
}

size_t MsgBindParentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgBindParentInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string avatar = 2;
  if (this->avatar().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar());
  }

  // string nick_name = 4;
  if (this->nick_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick_name());
  }

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // int32 avatar_frame = 3;
  if (this->avatar_frame() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_avatar_frame());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgBindParentInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgBindParentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgBindParentInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgBindParentInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgBindParentInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgBindParentInfo)
    MergeFrom(*source);
  }
}

void MsgBindParentInfo::MergeFrom(const MsgBindParentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgBindParentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.avatar().size() > 0) {
    _internal_set_avatar(from._internal_avatar());
  }
  if (from.nick_name().size() > 0) {
    _internal_set_nick_name(from._internal_nick_name());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.avatar_frame() != 0) {
    _internal_set_avatar_frame(from._internal_avatar_frame());
  }
}

void MsgBindParentInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgBindParentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBindParentInfo::CopyFrom(const MsgBindParentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgBindParentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBindParentInfo::IsInitialized() const {
  return true;
}

void MsgBindParentInfo::InternalSwap(MsgBindParentInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  avatar_.Swap(&other->avatar_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nick_name_.Swap(&other->nick_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgBindParentInfo, avatar_frame_)
      + sizeof(MsgBindParentInfo::avatar_frame_)
      - PROTOBUF_FIELD_OFFSET(MsgBindParentInfo, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgBindParentInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgBindInviteCodeResp::_Internal {
 public:
  static const ::MsgBindParentInfo& info(const MsgBindInviteCodeResp* msg);
};

const ::MsgBindParentInfo&
MsgBindInviteCodeResp::_Internal::info(const MsgBindInviteCodeResp* msg) {
  return *msg->info_;
}
MsgBindInviteCodeResp::MsgBindInviteCodeResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgBindInviteCodeResp)
}
MsgBindInviteCodeResp::MsgBindInviteCodeResp(const MsgBindInviteCodeResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::MsgBindParentInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  ::memcpy(&res_code_, &from.res_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_type_) -
    reinterpret_cast<char*>(&res_code_)) + sizeof(user_type_));
  // @@protoc_insertion_point(copy_constructor:MsgBindInviteCodeResp)
}

void MsgBindInviteCodeResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgBindInviteCodeResp_Login_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&user_type_) -
      reinterpret_cast<char*>(&info_)) + sizeof(user_type_));
}

MsgBindInviteCodeResp::~MsgBindInviteCodeResp() {
  // @@protoc_insertion_point(destructor:MsgBindInviteCodeResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgBindInviteCodeResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void MsgBindInviteCodeResp::ArenaDtor(void* object) {
  MsgBindInviteCodeResp* _this = reinterpret_cast< MsgBindInviteCodeResp* >(object);
  (void)_this;
}
void MsgBindInviteCodeResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgBindInviteCodeResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgBindInviteCodeResp& MsgBindInviteCodeResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgBindInviteCodeResp_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgBindInviteCodeResp::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgBindInviteCodeResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  ::memset(&res_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_type_) -
      reinterpret_cast<char*>(&res_code_)) + sizeof(user_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgBindInviteCodeResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 res_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          res_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 user_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MsgBindParentInfo info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgBindInviteCodeResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgBindInviteCodeResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 res_code = 1;
  if (this->res_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_res_code(), target);
  }

  // int32 user_type = 2;
  if (this->user_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_user_type(), target);
  }

  // .MsgBindParentInfo info = 3;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgBindInviteCodeResp)
  return target;
}

size_t MsgBindInviteCodeResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgBindInviteCodeResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MsgBindParentInfo info = 3;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  // int32 res_code = 1;
  if (this->res_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_res_code());
  }

  // int32 user_type = 2;
  if (this->user_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgBindInviteCodeResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgBindInviteCodeResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgBindInviteCodeResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgBindInviteCodeResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgBindInviteCodeResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgBindInviteCodeResp)
    MergeFrom(*source);
  }
}

void MsgBindInviteCodeResp::MergeFrom(const MsgBindInviteCodeResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgBindInviteCodeResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::MsgBindParentInfo::MergeFrom(from._internal_info());
  }
  if (from.res_code() != 0) {
    _internal_set_res_code(from._internal_res_code());
  }
  if (from.user_type() != 0) {
    _internal_set_user_type(from._internal_user_type());
  }
}

void MsgBindInviteCodeResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgBindInviteCodeResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBindInviteCodeResp::CopyFrom(const MsgBindInviteCodeResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgBindInviteCodeResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBindInviteCodeResp::IsInitialized() const {
  return true;
}

void MsgBindInviteCodeResp::InternalSwap(MsgBindInviteCodeResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgBindInviteCodeResp, user_type_)
      + sizeof(MsgBindInviteCodeResp::user_type_)
      - PROTOBUF_FIELD_OFFSET(MsgBindInviteCodeResp, info_)>(
          reinterpret_cast<char*>(&info_),
          reinterpret_cast<char*>(&other->info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgBindInviteCodeResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgDotRechargeResp::_Internal {
 public:
};

MsgDotRechargeResp::MsgDotRechargeResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  recharge_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgDotRechargeResp)
}
MsgDotRechargeResp::MsgDotRechargeResp(const MsgDotRechargeResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      recharge_info_(from.recharge_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gold_, &from.gold_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_new_recharge_) -
    reinterpret_cast<char*>(&gold_)) + sizeof(is_new_recharge_));
  // @@protoc_insertion_point(copy_constructor:MsgDotRechargeResp)
}

void MsgDotRechargeResp::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gold_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_new_recharge_) -
      reinterpret_cast<char*>(&gold_)) + sizeof(is_new_recharge_));
}

MsgDotRechargeResp::~MsgDotRechargeResp() {
  // @@protoc_insertion_point(destructor:MsgDotRechargeResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgDotRechargeResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgDotRechargeResp::ArenaDtor(void* object) {
  MsgDotRechargeResp* _this = reinterpret_cast< MsgDotRechargeResp* >(object);
  (void)_this;
}
void MsgDotRechargeResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgDotRechargeResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgDotRechargeResp& MsgDotRechargeResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgDotRechargeResp_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgDotRechargeResp::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgDotRechargeResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recharge_info_.Clear();
  ::memset(&gold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_new_recharge_) -
      reinterpret_cast<char*>(&gold_)) + sizeof(is_new_recharge_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDotRechargeResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_new_recharge = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_new_recharge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 recharge_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_recharge_info(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_recharge_info(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgDotRechargeResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDotRechargeResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_new_recharge = 1;
  if (this->is_new_recharge() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_new_recharge(), target);
  }

  // int64 gold = 2;
  if (this->gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_gold(), target);
  }

  // repeated int32 recharge_info = 3;
  {
    int byte_size = _recharge_info_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_recharge_info(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDotRechargeResp)
  return target;
}

size_t MsgDotRechargeResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgDotRechargeResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 recharge_info = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->recharge_info_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _recharge_info_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 gold = 2;
  if (this->gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_gold());
  }

  // bool is_new_recharge = 1;
  if (this->is_new_recharge() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgDotRechargeResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgDotRechargeResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDotRechargeResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgDotRechargeResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgDotRechargeResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgDotRechargeResp)
    MergeFrom(*source);
  }
}

void MsgDotRechargeResp::MergeFrom(const MsgDotRechargeResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgDotRechargeResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  recharge_info_.MergeFrom(from.recharge_info_);
  if (from.gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
  if (from.is_new_recharge() != 0) {
    _internal_set_is_new_recharge(from._internal_is_new_recharge());
  }
}

void MsgDotRechargeResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgDotRechargeResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDotRechargeResp::CopyFrom(const MsgDotRechargeResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgDotRechargeResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDotRechargeResp::IsInitialized() const {
  return true;
}

void MsgDotRechargeResp::InternalSwap(MsgDotRechargeResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  recharge_info_.InternalSwap(&other->recharge_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgDotRechargeResp, is_new_recharge_)
      + sizeof(MsgDotRechargeResp::is_new_recharge_)
      - PROTOBUF_FIELD_OFFSET(MsgDotRechargeResp, gold_)>(
          reinterpret_cast<char*>(&gold_),
          reinterpret_cast<char*>(&other->gold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDotRechargeResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgOnlineActiveConfig::_Internal {
 public:
};

MsgOnlineActiveConfig::MsgOnlineActiveConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgOnlineActiveConfig)
}
MsgOnlineActiveConfig::MsgOnlineActiveConfig(const MsgOnlineActiveConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&times_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(times_));
  // @@protoc_insertion_point(copy_constructor:MsgOnlineActiveConfig)
}

void MsgOnlineActiveConfig::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&times_) -
      reinterpret_cast<char*>(&item_id_)) + sizeof(times_));
}

MsgOnlineActiveConfig::~MsgOnlineActiveConfig() {
  // @@protoc_insertion_point(destructor:MsgOnlineActiveConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgOnlineActiveConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgOnlineActiveConfig::ArenaDtor(void* object) {
  MsgOnlineActiveConfig* _this = reinterpret_cast< MsgOnlineActiveConfig* >(object);
  (void)_this;
}
void MsgOnlineActiveConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgOnlineActiveConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgOnlineActiveConfig& MsgOnlineActiveConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgOnlineActiveConfig_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgOnlineActiveConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgOnlineActiveConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&times_) -
      reinterpret_cast<char*>(&item_id_)) + sizeof(times_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgOnlineActiveConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 item_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          item_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 online_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          online_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 times = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgOnlineActiveConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgOnlineActiveConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 item_id = 1;
  if (this->item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_item_id(), target);
  }

  // int32 item_num = 2;
  if (this->item_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_item_num(), target);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // int32 online_index = 4;
  if (this->online_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_online_index(), target);
  }

  // int32 times = 5;
  if (this->times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_times(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgOnlineActiveConfig)
  return target;
}

size_t MsgOnlineActiveConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgOnlineActiveConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 item_id = 1;
  if (this->item_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_item_id());
  }

  // int32 item_num = 2;
  if (this->item_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_item_num());
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 online_index = 4;
  if (this->online_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_online_index());
  }

  // int32 times = 5;
  if (this->times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_times());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgOnlineActiveConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgOnlineActiveConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgOnlineActiveConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgOnlineActiveConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgOnlineActiveConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgOnlineActiveConfig)
    MergeFrom(*source);
  }
}

void MsgOnlineActiveConfig::MergeFrom(const MsgOnlineActiveConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgOnlineActiveConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.item_id() != 0) {
    _internal_set_item_id(from._internal_item_id());
  }
  if (from.item_num() != 0) {
    _internal_set_item_num(from._internal_item_num());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.online_index() != 0) {
    _internal_set_online_index(from._internal_online_index());
  }
  if (from.times() != 0) {
    _internal_set_times(from._internal_times());
  }
}

void MsgOnlineActiveConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgOnlineActiveConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgOnlineActiveConfig::CopyFrom(const MsgOnlineActiveConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgOnlineActiveConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgOnlineActiveConfig::IsInitialized() const {
  return true;
}

void MsgOnlineActiveConfig::InternalSwap(MsgOnlineActiveConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgOnlineActiveConfig, times_)
      + sizeof(MsgOnlineActiveConfig::times_)
      - PROTOBUF_FIELD_OFFSET(MsgOnlineActiveConfig, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgOnlineActiveConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgOnlineActiveQuery::_Internal {
 public:
};

MsgOnlineActiveQuery::MsgOnlineActiveQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  index_id_(arena),
  online_config_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgOnlineActiveQuery)
}
MsgOnlineActiveQuery::MsgOnlineActiveQuery(const MsgOnlineActiveQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      index_id_(from.index_id_),
      online_config_(from.online_config_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_times_ = from.user_times_;
  // @@protoc_insertion_point(copy_constructor:MsgOnlineActiveQuery)
}

void MsgOnlineActiveQuery::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgOnlineActiveQuery_Login_2eproto.base);
  user_times_ = 0;
}

MsgOnlineActiveQuery::~MsgOnlineActiveQuery() {
  // @@protoc_insertion_point(destructor:MsgOnlineActiveQuery)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgOnlineActiveQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgOnlineActiveQuery::ArenaDtor(void* object) {
  MsgOnlineActiveQuery* _this = reinterpret_cast< MsgOnlineActiveQuery* >(object);
  (void)_this;
}
void MsgOnlineActiveQuery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgOnlineActiveQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgOnlineActiveQuery& MsgOnlineActiveQuery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgOnlineActiveQuery_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgOnlineActiveQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgOnlineActiveQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_id_.Clear();
  online_config_.Clear();
  user_times_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgOnlineActiveQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_times = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 index_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_index_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_index_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .MsgOnlineActiveConfig online_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_online_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgOnlineActiveQuery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgOnlineActiveQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_times = 1;
  if (this->user_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_times(), target);
  }

  // repeated int32 index_id = 2;
  {
    int byte_size = _index_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_index_id(), byte_size, target);
    }
  }

  // repeated .MsgOnlineActiveConfig online_config = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_online_config_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_online_config(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgOnlineActiveQuery)
  return target;
}

size_t MsgOnlineActiveQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgOnlineActiveQuery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 index_id = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->index_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _index_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .MsgOnlineActiveConfig online_config = 3;
  total_size += 1UL * this->_internal_online_config_size();
  for (const auto& msg : this->online_config_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 user_times = 1;
  if (this->user_times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_times());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgOnlineActiveQuery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgOnlineActiveQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgOnlineActiveQuery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgOnlineActiveQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgOnlineActiveQuery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgOnlineActiveQuery)
    MergeFrom(*source);
  }
}

void MsgOnlineActiveQuery::MergeFrom(const MsgOnlineActiveQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgOnlineActiveQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  index_id_.MergeFrom(from.index_id_);
  online_config_.MergeFrom(from.online_config_);
  if (from.user_times() != 0) {
    _internal_set_user_times(from._internal_user_times());
  }
}

void MsgOnlineActiveQuery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgOnlineActiveQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgOnlineActiveQuery::CopyFrom(const MsgOnlineActiveQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgOnlineActiveQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgOnlineActiveQuery::IsInitialized() const {
  return true;
}

void MsgOnlineActiveQuery::InternalSwap(MsgOnlineActiveQuery* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  index_id_.InternalSwap(&other->index_id_);
  online_config_.InternalSwap(&other->online_config_);
  swap(user_times_, other->user_times_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgOnlineActiveQuery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgOlineActiveAward::_Internal {
 public:
};

MsgOlineActiveAward::MsgOlineActiveAward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgOlineActiveAward)
}
MsgOlineActiveAward::MsgOlineActiveAward(const MsgOlineActiveAward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&online_index_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(online_index_));
  // @@protoc_insertion_point(copy_constructor:MsgOlineActiveAward)
}

void MsgOlineActiveAward::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&online_index_) -
      reinterpret_cast<char*>(&item_id_)) + sizeof(online_index_));
}

MsgOlineActiveAward::~MsgOlineActiveAward() {
  // @@protoc_insertion_point(destructor:MsgOlineActiveAward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgOlineActiveAward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgOlineActiveAward::ArenaDtor(void* object) {
  MsgOlineActiveAward* _this = reinterpret_cast< MsgOlineActiveAward* >(object);
  (void)_this;
}
void MsgOlineActiveAward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgOlineActiveAward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgOlineActiveAward& MsgOlineActiveAward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgOlineActiveAward_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgOlineActiveAward::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgOlineActiveAward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_index_) -
      reinterpret_cast<char*>(&item_id_)) + sizeof(online_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgOlineActiveAward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 item_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          item_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 online_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          online_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgOlineActiveAward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgOlineActiveAward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 item_id = 1;
  if (this->item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_item_id(), target);
  }

  // int32 item_num = 2;
  if (this->item_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_item_num(), target);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // int32 online_index = 4;
  if (this->online_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_online_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgOlineActiveAward)
  return target;
}

size_t MsgOlineActiveAward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgOlineActiveAward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 item_id = 1;
  if (this->item_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_item_id());
  }

  // int32 item_num = 2;
  if (this->item_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_item_num());
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 online_index = 4;
  if (this->online_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_online_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgOlineActiveAward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgOlineActiveAward)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgOlineActiveAward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgOlineActiveAward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgOlineActiveAward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgOlineActiveAward)
    MergeFrom(*source);
  }
}

void MsgOlineActiveAward::MergeFrom(const MsgOlineActiveAward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgOlineActiveAward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.item_id() != 0) {
    _internal_set_item_id(from._internal_item_id());
  }
  if (from.item_num() != 0) {
    _internal_set_item_num(from._internal_item_num());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.online_index() != 0) {
    _internal_set_online_index(from._internal_online_index());
  }
}

void MsgOlineActiveAward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgOlineActiveAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgOlineActiveAward::CopyFrom(const MsgOlineActiveAward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgOlineActiveAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgOlineActiveAward::IsInitialized() const {
  return true;
}

void MsgOlineActiveAward::InternalSwap(MsgOlineActiveAward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgOlineActiveAward, online_index_)
      + sizeof(MsgOlineActiveAward::online_index_)
      - PROTOBUF_FIELD_OFFSET(MsgOlineActiveAward, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgOlineActiveAward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgCDKExchange::_Internal {
 public:
};

MsgCDKExchange::MsgCDKExchange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgCDKExchange)
}
MsgCDKExchange::MsgCDKExchange(const MsgCDKExchange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_type_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(item_type_));
  // @@protoc_insertion_point(copy_constructor:MsgCDKExchange)
}

void MsgCDKExchange::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&item_type_) -
      reinterpret_cast<char*>(&item_id_)) + sizeof(item_type_));
}

MsgCDKExchange::~MsgCDKExchange() {
  // @@protoc_insertion_point(destructor:MsgCDKExchange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgCDKExchange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgCDKExchange::ArenaDtor(void* object) {
  MsgCDKExchange* _this = reinterpret_cast< MsgCDKExchange* >(object);
  (void)_this;
}
void MsgCDKExchange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgCDKExchange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgCDKExchange& MsgCDKExchange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgCDKExchange_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgCDKExchange::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgCDKExchange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_type_) -
      reinterpret_cast<char*>(&item_id_)) + sizeof(item_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgCDKExchange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 item_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          item_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 item_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          item_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgCDKExchange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgCDKExchange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 item_id = 1;
  if (this->item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_item_id(), target);
  }

  // int32 item_num = 2;
  if (this->item_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_item_num(), target);
  }

  // int32 item_type = 3;
  if (this->item_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_item_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgCDKExchange)
  return target;
}

size_t MsgCDKExchange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgCDKExchange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 item_id = 1;
  if (this->item_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_item_id());
  }

  // int32 item_num = 2;
  if (this->item_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_item_num());
  }

  // int32 item_type = 3;
  if (this->item_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_item_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgCDKExchange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgCDKExchange)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgCDKExchange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgCDKExchange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgCDKExchange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgCDKExchange)
    MergeFrom(*source);
  }
}

void MsgCDKExchange::MergeFrom(const MsgCDKExchange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgCDKExchange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.item_id() != 0) {
    _internal_set_item_id(from._internal_item_id());
  }
  if (from.item_num() != 0) {
    _internal_set_item_num(from._internal_item_num());
  }
  if (from.item_type() != 0) {
    _internal_set_item_type(from._internal_item_type());
  }
}

void MsgCDKExchange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgCDKExchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCDKExchange::CopyFrom(const MsgCDKExchange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgCDKExchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCDKExchange::IsInitialized() const {
  return true;
}

void MsgCDKExchange::InternalSwap(MsgCDKExchange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgCDKExchange, item_type_)
      + sizeof(MsgCDKExchange::item_type_)
      - PROTOBUF_FIELD_OFFSET(MsgCDKExchange, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgCDKExchange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgCDKExchangeResp::_Internal {
 public:
};

MsgCDKExchangeResp::MsgCDKExchangeResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgCDKExchangeResp)
}
MsgCDKExchangeResp::MsgCDKExchangeResp(const MsgCDKExchangeResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      info_(from.info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ret_code_ = from.ret_code_;
  // @@protoc_insertion_point(copy_constructor:MsgCDKExchangeResp)
}

void MsgCDKExchangeResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgCDKExchangeResp_Login_2eproto.base);
  ret_code_ = 0;
}

MsgCDKExchangeResp::~MsgCDKExchangeResp() {
  // @@protoc_insertion_point(destructor:MsgCDKExchangeResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgCDKExchangeResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgCDKExchangeResp::ArenaDtor(void* object) {
  MsgCDKExchangeResp* _this = reinterpret_cast< MsgCDKExchangeResp* >(object);
  (void)_this;
}
void MsgCDKExchangeResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgCDKExchangeResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgCDKExchangeResp& MsgCDKExchangeResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgCDKExchangeResp_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgCDKExchangeResp::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgCDKExchangeResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.Clear();
  ret_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgCDKExchangeResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .MsgCDKExchange info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgCDKExchangeResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgCDKExchangeResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret_code(), target);
  }

  // repeated .MsgCDKExchange info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgCDKExchangeResp)
  return target;
}

size_t MsgCDKExchangeResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgCDKExchangeResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MsgCDKExchange info = 2;
  total_size += 1UL * this->_internal_info_size();
  for (const auto& msg : this->info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgCDKExchangeResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgCDKExchangeResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgCDKExchangeResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgCDKExchangeResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgCDKExchangeResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgCDKExchangeResp)
    MergeFrom(*source);
  }
}

void MsgCDKExchangeResp::MergeFrom(const MsgCDKExchangeResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgCDKExchangeResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_.MergeFrom(from.info_);
  if (from.ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
}

void MsgCDKExchangeResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgCDKExchangeResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCDKExchangeResp::CopyFrom(const MsgCDKExchangeResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgCDKExchangeResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCDKExchangeResp::IsInitialized() const {
  return true;
}

void MsgCDKExchangeResp::InternalSwap(MsgCDKExchangeResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  info_.InternalSwap(&other->info_);
  swap(ret_code_, other->ret_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgCDKExchangeResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgPersonalDetailsRespAdd::_Internal {
 public:
};

MsgPersonalDetailsRespAdd::MsgPersonalDetailsRespAdd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgPersonalDetailsRespAdd)
}
MsgPersonalDetailsRespAdd::MsgPersonalDetailsRespAdd(const MsgPersonalDetailsRespAdd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:MsgPersonalDetailsRespAdd)
}

void MsgPersonalDetailsRespAdd::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgPersonalDetailsRespAdd_Login_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

MsgPersonalDetailsRespAdd::~MsgPersonalDetailsRespAdd() {
  // @@protoc_insertion_point(destructor:MsgPersonalDetailsRespAdd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgPersonalDetailsRespAdd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgPersonalDetailsRespAdd::ArenaDtor(void* object) {
  MsgPersonalDetailsRespAdd* _this = reinterpret_cast< MsgPersonalDetailsRespAdd* >(object);
  (void)_this;
}
void MsgPersonalDetailsRespAdd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgPersonalDetailsRespAdd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgPersonalDetailsRespAdd& MsgPersonalDetailsRespAdd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgPersonalDetailsRespAdd_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgPersonalDetailsRespAdd::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgPersonalDetailsRespAdd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgPersonalDetailsRespAdd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgPersonalDetailsRespAdd.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgPersonalDetailsRespAdd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPersonalDetailsRespAdd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgPersonalDetailsRespAdd.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPersonalDetailsRespAdd)
  return target;
}

size_t MsgPersonalDetailsRespAdd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgPersonalDetailsRespAdd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgPersonalDetailsRespAdd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgPersonalDetailsRespAdd)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgPersonalDetailsRespAdd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgPersonalDetailsRespAdd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgPersonalDetailsRespAdd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgPersonalDetailsRespAdd)
    MergeFrom(*source);
  }
}

void MsgPersonalDetailsRespAdd::MergeFrom(const MsgPersonalDetailsRespAdd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgPersonalDetailsRespAdd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {
    _internal_set_msg(from._internal_msg());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void MsgPersonalDetailsRespAdd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgPersonalDetailsRespAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPersonalDetailsRespAdd::CopyFrom(const MsgPersonalDetailsRespAdd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgPersonalDetailsRespAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPersonalDetailsRespAdd::IsInitialized() const {
  return true;
}

void MsgPersonalDetailsRespAdd::InternalSwap(MsgPersonalDetailsRespAdd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgPersonalDetailsRespAdd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgInviteUserInfo::_Internal {
 public:
};

MsgInviteUserInfo::MsgInviteUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgInviteUserInfo)
}
MsgInviteUserInfo::MsgInviteUserInfo(const MsgInviteUserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invite_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_invite_time().empty()) {
    invite_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invite_time(), 
      GetArena());
  }
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nickname().empty()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArena());
  }
  ::memcpy(&vip_level_, &from.vip_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&beautiful_id_) -
    reinterpret_cast<char*>(&vip_level_)) + sizeof(beautiful_id_));
  // @@protoc_insertion_point(copy_constructor:MsgInviteUserInfo)
}

void MsgInviteUserInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgInviteUserInfo_Login_2eproto.base);
  invite_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&vip_level_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&beautiful_id_) -
      reinterpret_cast<char*>(&vip_level_)) + sizeof(beautiful_id_));
}

MsgInviteUserInfo::~MsgInviteUserInfo() {
  // @@protoc_insertion_point(destructor:MsgInviteUserInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgInviteUserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  invite_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgInviteUserInfo::ArenaDtor(void* object) {
  MsgInviteUserInfo* _this = reinterpret_cast< MsgInviteUserInfo* >(object);
  (void)_this;
}
void MsgInviteUserInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgInviteUserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgInviteUserInfo& MsgInviteUserInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgInviteUserInfo_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgInviteUserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgInviteUserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  invite_time_.ClearToEmpty();
  nickname_.ClearToEmpty();
  ::memset(&vip_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&beautiful_id_) -
      reinterpret_cast<char*>(&vip_level_)) + sizeof(beautiful_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgInviteUserInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 vip_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          vip_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string invite_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_invite_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgInviteUserInfo.invite_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 beautiful_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          beautiful_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nickname = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgInviteUserInfo.nickname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgInviteUserInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgInviteUserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vip_level = 1;
  if (this->vip_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_vip_level(), target);
  }

  // string invite_time = 2;
  if (this->invite_time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_invite_time().data(), static_cast<int>(this->_internal_invite_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgInviteUserInfo.invite_time");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_invite_time(), target);
  }

  // int32 beautiful_id = 3;
  if (this->beautiful_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_beautiful_id(), target);
  }

  // string nickname = 4;
  if (this->nickname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgInviteUserInfo.nickname");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_nickname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgInviteUserInfo)
  return target;
}

size_t MsgInviteUserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgInviteUserInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string invite_time = 2;
  if (this->invite_time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invite_time());
  }

  // string nickname = 4;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // int32 vip_level = 1;
  if (this->vip_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vip_level());
  }

  // int32 beautiful_id = 3;
  if (this->beautiful_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_beautiful_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgInviteUserInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgInviteUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgInviteUserInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgInviteUserInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgInviteUserInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgInviteUserInfo)
    MergeFrom(*source);
  }
}

void MsgInviteUserInfo::MergeFrom(const MsgInviteUserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgInviteUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.invite_time().size() > 0) {
    _internal_set_invite_time(from._internal_invite_time());
  }
  if (from.nickname().size() > 0) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (from.vip_level() != 0) {
    _internal_set_vip_level(from._internal_vip_level());
  }
  if (from.beautiful_id() != 0) {
    _internal_set_beautiful_id(from._internal_beautiful_id());
  }
}

void MsgInviteUserInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgInviteUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgInviteUserInfo::CopyFrom(const MsgInviteUserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgInviteUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgInviteUserInfo::IsInitialized() const {
  return true;
}

void MsgInviteUserInfo::InternalSwap(MsgInviteUserInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  invite_time_.Swap(&other->invite_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nickname_.Swap(&other->nickname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgInviteUserInfo, beautiful_id_)
      + sizeof(MsgInviteUserInfo::beautiful_id_)
      - PROTOBUF_FIELD_OFFSET(MsgInviteUserInfo, vip_level_)>(
          reinterpret_cast<char*>(&vip_level_),
          reinterpret_cast<char*>(&other->vip_level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgInviteUserInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgInviteUserResp::_Internal {
 public:
};

MsgInviteUserResp::MsgInviteUserResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgInviteUserResp)
}
MsgInviteUserResp::MsgInviteUserResp(const MsgInviteUserResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      info_(from.info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MsgInviteUserResp)
}

void MsgInviteUserResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgInviteUserResp_Login_2eproto.base);
}

MsgInviteUserResp::~MsgInviteUserResp() {
  // @@protoc_insertion_point(destructor:MsgInviteUserResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgInviteUserResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgInviteUserResp::ArenaDtor(void* object) {
  MsgInviteUserResp* _this = reinterpret_cast< MsgInviteUserResp* >(object);
  (void)_this;
}
void MsgInviteUserResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgInviteUserResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgInviteUserResp& MsgInviteUserResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgInviteUserResp_Login_2eproto.base);
  return *internal_default_instance();
}


void MsgInviteUserResp::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgInviteUserResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgInviteUserResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .MsgInviteUserInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgInviteUserResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgInviteUserResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MsgInviteUserInfo info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgInviteUserResp)
  return target;
}

size_t MsgInviteUserResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgInviteUserResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MsgInviteUserInfo info = 1;
  total_size += 1UL * this->_internal_info_size();
  for (const auto& msg : this->info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgInviteUserResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgInviteUserResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgInviteUserResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgInviteUserResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgInviteUserResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgInviteUserResp)
    MergeFrom(*source);
  }
}

void MsgInviteUserResp::MergeFrom(const MsgInviteUserResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgInviteUserResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_.MergeFrom(from.info_);
}

void MsgInviteUserResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgInviteUserResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgInviteUserResp::CopyFrom(const MsgInviteUserResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgInviteUserResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgInviteUserResp::IsInitialized() const {
  return true;
}

void MsgInviteUserResp::InternalSwap(MsgInviteUserResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  info_.InternalSwap(&other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgInviteUserResp::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MsgPlayerLogin* Arena::CreateMaybeMessage< ::MsgPlayerLogin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgPlayerLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgPlayerLoginResp* Arena::CreateMaybeMessage< ::MsgPlayerLoginResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgPlayerLoginResp >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgModifyPassword* Arena::CreateMaybeMessage< ::MsgModifyPassword >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgModifyPassword >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgBindPhone* Arena::CreateMaybeMessage< ::MsgBindPhone >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgBindPhone >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgCommonKV* Arena::CreateMaybeMessage< ::MsgCommonKV >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgCommonKV >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgCheckInInfo* Arena::CreateMaybeMessage< ::MsgCheckInInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgCheckInInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgTurntableHistoryData* Arena::CreateMaybeMessage< ::MsgTurntableHistoryData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgTurntableHistoryData >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgTurnPlayInfo* Arena::CreateMaybeMessage< ::MsgTurnPlayInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgTurnPlayInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgTurnCfg* Arena::CreateMaybeMessage< ::MsgTurnCfg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgTurnCfg >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgTurntableData* Arena::CreateMaybeMessage< ::MsgTurntableData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgTurntableData >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgTurntable* Arena::CreateMaybeMessage< ::MsgTurntable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgTurntable >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgTurntableResp* Arena::CreateMaybeMessage< ::MsgTurntableResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgTurntableResp >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgMailsInfo* Arena::CreateMaybeMessage< ::MsgMailsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgMailsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgMailData* Arena::CreateMaybeMessage< ::MsgMailData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgMailData >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgShareData* Arena::CreateMaybeMessage< ::MsgShareData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgShareData >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgBindParentData* Arena::CreateMaybeMessage< ::MsgBindParentData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgBindParentData >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgInviteAwardInfo* Arena::CreateMaybeMessage< ::MsgInviteAwardInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgInviteAwardInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgInviteAwardConfig* Arena::CreateMaybeMessage< ::MsgInviteAwardConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgInviteAwardConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgRechargeInfo* Arena::CreateMaybeMessage< ::MsgRechargeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgRechargeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgQueryRebateRecordInfo* Arena::CreateMaybeMessage< ::MsgQueryRebateRecordInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgQueryRebateRecordInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgQueryRebateRecord* Arena::CreateMaybeMessage< ::MsgQueryRebateRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgQueryRebateRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgForgetPassword* Arena::CreateMaybeMessage< ::MsgForgetPassword >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgForgetPassword >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgVIPInfo* Arena::CreateMaybeMessage< ::MsgVIPInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgVIPInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgVIPConfig* Arena::CreateMaybeMessage< ::MsgVIPConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgVIPConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgUpgradeVIP* Arena::CreateMaybeMessage< ::MsgUpgradeVIP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgUpgradeVIP >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgGetAvatarInfo* Arena::CreateMaybeMessage< ::MsgGetAvatarInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgGetAvatarInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgPlayerInfo* Arena::CreateMaybeMessage< ::MsgPlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgPlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ActiveInfoRet* Arena::CreateMaybeMessage< ::ActiveInfoRet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ActiveInfoRet >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgActiveInfoSCRet* Arena::CreateMaybeMessage< ::MsgActiveInfoSCRet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgActiveInfoSCRet >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgActiveInfoCSPick* Arena::CreateMaybeMessage< ::MsgActiveInfoCSPick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgActiveInfoCSPick >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgActiveInfoSCPick* Arena::CreateMaybeMessage< ::MsgActiveInfoSCPick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgActiveInfoSCPick >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgModifySignature* Arena::CreateMaybeMessage< ::MsgModifySignature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgModifySignature >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgTransferOperate* Arena::CreateMaybeMessage< ::MsgTransferOperate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgTransferOperate >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgTopInfo* Arena::CreateMaybeMessage< ::MsgTopInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgTopInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgGetRank* Arena::CreateMaybeMessage< ::MsgGetRank >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgGetRank >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgTopListResp* Arena::CreateMaybeMessage< ::MsgTopListResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgTopListResp >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgTransferOperateResp* Arena::CreateMaybeMessage< ::MsgTransferOperateResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgTransferOperateResp >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgTransferOperateSyncResp* Arena::CreateMaybeMessage< ::MsgTransferOperateSyncResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgTransferOperateSyncResp >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgTransferReceiveResp* Arena::CreateMaybeMessage< ::MsgTransferReceiveResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgTransferReceiveResp >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgTransferRecord* Arena::CreateMaybeMessage< ::MsgTransferRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgTransferRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgTransferRecordResp* Arena::CreateMaybeMessage< ::MsgTransferRecordResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgTransferRecordResp >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgPhoneCode* Arena::CreateMaybeMessage< ::MsgPhoneCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgPhoneCode >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgItem* Arena::CreateMaybeMessage< ::MsgItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgItem >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgPlayerItem* Arena::CreateMaybeMessage< ::MsgPlayerItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgPlayerItem >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgTransferQueryNickname* Arena::CreateMaybeMessage< ::MsgTransferQueryNickname >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgTransferQueryNickname >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgSubagentInformation* Arena::CreateMaybeMessage< ::MsgSubagentInformation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgSubagentInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgTtotalSubagentInformation* Arena::CreateMaybeMessage< ::MsgTtotalSubagentInformation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgTtotalSubagentInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgBindParentInfo* Arena::CreateMaybeMessage< ::MsgBindParentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgBindParentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgBindInviteCodeResp* Arena::CreateMaybeMessage< ::MsgBindInviteCodeResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgBindInviteCodeResp >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgDotRechargeResp* Arena::CreateMaybeMessage< ::MsgDotRechargeResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgDotRechargeResp >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgOnlineActiveConfig* Arena::CreateMaybeMessage< ::MsgOnlineActiveConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgOnlineActiveConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgOnlineActiveQuery* Arena::CreateMaybeMessage< ::MsgOnlineActiveQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgOnlineActiveQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgOlineActiveAward* Arena::CreateMaybeMessage< ::MsgOlineActiveAward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgOlineActiveAward >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgCDKExchange* Arena::CreateMaybeMessage< ::MsgCDKExchange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgCDKExchange >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgCDKExchangeResp* Arena::CreateMaybeMessage< ::MsgCDKExchangeResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgCDKExchangeResp >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgPersonalDetailsRespAdd* Arena::CreateMaybeMessage< ::MsgPersonalDetailsRespAdd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgPersonalDetailsRespAdd >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgInviteUserInfo* Arena::CreateMaybeMessage< ::MsgInviteUserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgInviteUserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgInviteUserResp* Arena::CreateMaybeMessage< ::MsgInviteUserResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgInviteUserResp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
