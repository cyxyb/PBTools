// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Login.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Login_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Login_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Login_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Login_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Login_2eproto;
class MsgBindPhone;
class MsgBindPhoneDefaultTypeInternal;
extern MsgBindPhoneDefaultTypeInternal _MsgBindPhone_default_instance_;
class MsgModifyPassword;
class MsgModifyPasswordDefaultTypeInternal;
extern MsgModifyPasswordDefaultTypeInternal _MsgModifyPassword_default_instance_;
class MsgPlayerLogin;
class MsgPlayerLoginDefaultTypeInternal;
extern MsgPlayerLoginDefaultTypeInternal _MsgPlayerLogin_default_instance_;
class MsgPlayerLoginResp;
class MsgPlayerLoginRespDefaultTypeInternal;
extern MsgPlayerLoginRespDefaultTypeInternal _MsgPlayerLoginResp_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::MsgBindPhone* Arena::CreateMaybeMessage<::MsgBindPhone>(Arena*);
template<> ::MsgModifyPassword* Arena::CreateMaybeMessage<::MsgModifyPassword>(Arena*);
template<> ::MsgPlayerLogin* Arena::CreateMaybeMessage<::MsgPlayerLogin>(Arena*);
template<> ::MsgPlayerLoginResp* Arena::CreateMaybeMessage<::MsgPlayerLoginResp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class MsgPlayerLogin PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgPlayerLogin) */ {
 public:
  inline MsgPlayerLogin() : MsgPlayerLogin(nullptr) {}
  virtual ~MsgPlayerLogin();

  MsgPlayerLogin(const MsgPlayerLogin& from);
  MsgPlayerLogin(MsgPlayerLogin&& from) noexcept
    : MsgPlayerLogin() {
    *this = ::std::move(from);
  }

  inline MsgPlayerLogin& operator=(const MsgPlayerLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgPlayerLogin& operator=(MsgPlayerLogin&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgPlayerLogin& default_instance();

  static inline const MsgPlayerLogin* internal_default_instance() {
    return reinterpret_cast<const MsgPlayerLogin*>(
               &_MsgPlayerLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgPlayerLogin& a, MsgPlayerLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgPlayerLogin* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgPlayerLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgPlayerLogin* New() const final {
    return CreateMaybeMessage<MsgPlayerLogin>(nullptr);
  }

  MsgPlayerLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgPlayerLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgPlayerLogin& from);
  void MergeFrom(const MsgPlayerLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgPlayerLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgPlayerLogin";
  }
  protected:
  explicit MsgPlayerLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Login_2eproto);
    return ::descriptor_table_Login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kMachineNumFieldNumber = 7,
    kUserIpFieldNumber = 8,
    kAvatarFieldNumber = 10,
    kNicknameFieldNumber = 11,
    kPhoneFieldNumber = 12,
    kPlatformIdFieldNumber = 3,
    kChannelIdFieldNumber = 4,
    kClientTypeFieldNumber = 5,
    kLoginTypeFieldNumber = 6,
    kIsDrainFieldNumber = 9,
    kCodeFieldNumber = 13,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string machine_num = 7;
  void clear_machine_num();
  const std::string& machine_num() const;
  void set_machine_num(const std::string& value);
  void set_machine_num(std::string&& value);
  void set_machine_num(const char* value);
  void set_machine_num(const char* value, size_t size);
  std::string* mutable_machine_num();
  std::string* release_machine_num();
  void set_allocated_machine_num(std::string* machine_num);
  private:
  const std::string& _internal_machine_num() const;
  void _internal_set_machine_num(const std::string& value);
  std::string* _internal_mutable_machine_num();
  public:

  // string user_ip = 8;
  void clear_user_ip();
  const std::string& user_ip() const;
  void set_user_ip(const std::string& value);
  void set_user_ip(std::string&& value);
  void set_user_ip(const char* value);
  void set_user_ip(const char* value, size_t size);
  std::string* mutable_user_ip();
  std::string* release_user_ip();
  void set_allocated_user_ip(std::string* user_ip);
  private:
  const std::string& _internal_user_ip() const;
  void _internal_set_user_ip(const std::string& value);
  std::string* _internal_mutable_user_ip();
  public:

  // string avatar = 10;
  void clear_avatar();
  const std::string& avatar() const;
  void set_avatar(const std::string& value);
  void set_avatar(std::string&& value);
  void set_avatar(const char* value);
  void set_avatar(const char* value, size_t size);
  std::string* mutable_avatar();
  std::string* release_avatar();
  void set_allocated_avatar(std::string* avatar);
  private:
  const std::string& _internal_avatar() const;
  void _internal_set_avatar(const std::string& value);
  std::string* _internal_mutable_avatar();
  public:

  // string nickname = 11;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string phone = 12;
  void clear_phone();
  const std::string& phone() const;
  void set_phone(const std::string& value);
  void set_phone(std::string&& value);
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  std::string* mutable_phone();
  std::string* release_phone();
  void set_allocated_phone(std::string* phone);
  private:
  const std::string& _internal_phone() const;
  void _internal_set_phone(const std::string& value);
  std::string* _internal_mutable_phone();
  public:

  // int32 platform_id = 3;
  void clear_platform_id();
  ::PROTOBUF_NAMESPACE_ID::int32 platform_id() const;
  void set_platform_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_platform_id() const;
  void _internal_set_platform_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 channel_id = 4;
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::int32 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 client_type = 5;
  void clear_client_type();
  ::PROTOBUF_NAMESPACE_ID::int32 client_type() const;
  void set_client_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_type() const;
  void _internal_set_client_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 login_type = 6;
  void clear_login_type();
  ::PROTOBUF_NAMESPACE_ID::int32 login_type() const;
  void set_login_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_login_type() const;
  void _internal_set_login_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_drain = 9;
  void clear_is_drain();
  bool is_drain() const;
  void set_is_drain(bool value);
  private:
  bool _internal_is_drain() const;
  void _internal_set_is_drain(bool value);
  public:

  // int32 code = 13;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgPlayerLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr machine_num_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_;
  ::PROTOBUF_NAMESPACE_ID::int32 platform_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 login_type_;
  bool is_drain_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Login_2eproto;
};
// -------------------------------------------------------------------

class MsgPlayerLoginResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgPlayerLoginResp) */ {
 public:
  inline MsgPlayerLoginResp() : MsgPlayerLoginResp(nullptr) {}
  virtual ~MsgPlayerLoginResp();

  MsgPlayerLoginResp(const MsgPlayerLoginResp& from);
  MsgPlayerLoginResp(MsgPlayerLoginResp&& from) noexcept
    : MsgPlayerLoginResp() {
    *this = ::std::move(from);
  }

  inline MsgPlayerLoginResp& operator=(const MsgPlayerLoginResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgPlayerLoginResp& operator=(MsgPlayerLoginResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgPlayerLoginResp& default_instance();

  static inline const MsgPlayerLoginResp* internal_default_instance() {
    return reinterpret_cast<const MsgPlayerLoginResp*>(
               &_MsgPlayerLoginResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MsgPlayerLoginResp& a, MsgPlayerLoginResp& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgPlayerLoginResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgPlayerLoginResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgPlayerLoginResp* New() const final {
    return CreateMaybeMessage<MsgPlayerLoginResp>(nullptr);
  }

  MsgPlayerLoginResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgPlayerLoginResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgPlayerLoginResp& from);
  void MergeFrom(const MsgPlayerLoginResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgPlayerLoginResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgPlayerLoginResp";
  }
  protected:
  explicit MsgPlayerLoginResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Login_2eproto);
    return ::descriptor_table_Login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 4,
    kNicknameFieldNumber = 5,
    kAvatarFieldNumber = 6,
    kPhoneNumFieldNumber = 11,
    kResCodeFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kBeautifulIdFieldNumber = 3,
    kUserTypeFieldNumber = 8,
    kCoinFieldNumber = 10,
    kFirstRechargeFieldNumber = 7,
    kIsDrainFieldNumber = 9,
  };
  // string account = 4;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // bytes nickname = 5;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const void* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string avatar = 6;
  void clear_avatar();
  const std::string& avatar() const;
  void set_avatar(const std::string& value);
  void set_avatar(std::string&& value);
  void set_avatar(const char* value);
  void set_avatar(const char* value, size_t size);
  std::string* mutable_avatar();
  std::string* release_avatar();
  void set_allocated_avatar(std::string* avatar);
  private:
  const std::string& _internal_avatar() const;
  void _internal_set_avatar(const std::string& value);
  std::string* _internal_mutable_avatar();
  public:

  // string phone_num = 11;
  void clear_phone_num();
  const std::string& phone_num() const;
  void set_phone_num(const std::string& value);
  void set_phone_num(std::string&& value);
  void set_phone_num(const char* value);
  void set_phone_num(const char* value, size_t size);
  std::string* mutable_phone_num();
  std::string* release_phone_num();
  void set_allocated_phone_num(std::string* phone_num);
  private:
  const std::string& _internal_phone_num() const;
  void _internal_set_phone_num(const std::string& value);
  std::string* _internal_mutable_phone_num();
  public:

  // int32 res_code = 1;
  void clear_res_code();
  ::PROTOBUF_NAMESPACE_ID::int32 res_code() const;
  void set_res_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_res_code() const;
  void _internal_set_res_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 user_id = 2;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 beautiful_id = 3;
  void clear_beautiful_id();
  ::PROTOBUF_NAMESPACE_ID::int32 beautiful_id() const;
  void set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_beautiful_id() const;
  void _internal_set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 user_type = 8;
  void clear_user_type();
  ::PROTOBUF_NAMESPACE_ID::int32 user_type() const;
  void set_user_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_type() const;
  void _internal_set_user_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint64 coin = 10;
  void clear_coin();
  ::PROTOBUF_NAMESPACE_ID::uint64 coin() const;
  void set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_coin() const;
  void _internal_set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool first_recharge = 7;
  void clear_first_recharge();
  bool first_recharge() const;
  void set_first_recharge(bool value);
  private:
  bool _internal_first_recharge() const;
  void _internal_set_first_recharge(bool value);
  public:

  // bool is_drain = 9;
  void clear_is_drain();
  bool is_drain() const;
  void set_is_drain(bool value);
  private:
  bool _internal_is_drain() const;
  void _internal_set_is_drain(bool value);
  public:

  // @@protoc_insertion_point(class_scope:MsgPlayerLoginResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 res_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 beautiful_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 coin_;
  bool first_recharge_;
  bool is_drain_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Login_2eproto;
};
// -------------------------------------------------------------------

class MsgModifyPassword PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgModifyPassword) */ {
 public:
  inline MsgModifyPassword() : MsgModifyPassword(nullptr) {}
  virtual ~MsgModifyPassword();

  MsgModifyPassword(const MsgModifyPassword& from);
  MsgModifyPassword(MsgModifyPassword&& from) noexcept
    : MsgModifyPassword() {
    *this = ::std::move(from);
  }

  inline MsgModifyPassword& operator=(const MsgModifyPassword& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgModifyPassword& operator=(MsgModifyPassword&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgModifyPassword& default_instance();

  static inline const MsgModifyPassword* internal_default_instance() {
    return reinterpret_cast<const MsgModifyPassword*>(
               &_MsgModifyPassword_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MsgModifyPassword& a, MsgModifyPassword& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgModifyPassword* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgModifyPassword* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgModifyPassword* New() const final {
    return CreateMaybeMessage<MsgModifyPassword>(nullptr);
  }

  MsgModifyPassword* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgModifyPassword>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgModifyPassword& from);
  void MergeFrom(const MsgModifyPassword& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgModifyPassword* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgModifyPassword";
  }
  protected:
  explicit MsgModifyPassword(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Login_2eproto);
    return ::descriptor_table_Login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldPasswordFieldNumber = 1,
    kNewPasswordFieldNumber = 2,
  };
  // string old_password = 1;
  void clear_old_password();
  const std::string& old_password() const;
  void set_old_password(const std::string& value);
  void set_old_password(std::string&& value);
  void set_old_password(const char* value);
  void set_old_password(const char* value, size_t size);
  std::string* mutable_old_password();
  std::string* release_old_password();
  void set_allocated_old_password(std::string* old_password);
  private:
  const std::string& _internal_old_password() const;
  void _internal_set_old_password(const std::string& value);
  std::string* _internal_mutable_old_password();
  public:

  // string new_password = 2;
  void clear_new_password();
  const std::string& new_password() const;
  void set_new_password(const std::string& value);
  void set_new_password(std::string&& value);
  void set_new_password(const char* value);
  void set_new_password(const char* value, size_t size);
  std::string* mutable_new_password();
  std::string* release_new_password();
  void set_allocated_new_password(std::string* new_password);
  private:
  const std::string& _internal_new_password() const;
  void _internal_set_new_password(const std::string& value);
  std::string* _internal_mutable_new_password();
  public:

  // @@protoc_insertion_point(class_scope:MsgModifyPassword)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr old_password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Login_2eproto;
};
// -------------------------------------------------------------------

class MsgBindPhone PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgBindPhone) */ {
 public:
  inline MsgBindPhone() : MsgBindPhone(nullptr) {}
  virtual ~MsgBindPhone();

  MsgBindPhone(const MsgBindPhone& from);
  MsgBindPhone(MsgBindPhone&& from) noexcept
    : MsgBindPhone() {
    *this = ::std::move(from);
  }

  inline MsgBindPhone& operator=(const MsgBindPhone& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgBindPhone& operator=(MsgBindPhone&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgBindPhone& default_instance();

  static inline const MsgBindPhone* internal_default_instance() {
    return reinterpret_cast<const MsgBindPhone*>(
               &_MsgBindPhone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MsgBindPhone& a, MsgBindPhone& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgBindPhone* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgBindPhone* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgBindPhone* New() const final {
    return CreateMaybeMessage<MsgBindPhone>(nullptr);
  }

  MsgBindPhone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgBindPhone>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgBindPhone& from);
  void MergeFrom(const MsgBindPhone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgBindPhone* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgBindPhone";
  }
  protected:
  explicit MsgBindPhone(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Login_2eproto);
    return ::descriptor_table_Login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhoneNumFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string phone_num = 2;
  void clear_phone_num();
  const std::string& phone_num() const;
  void set_phone_num(const std::string& value);
  void set_phone_num(std::string&& value);
  void set_phone_num(const char* value);
  void set_phone_num(const char* value, size_t size);
  std::string* mutable_phone_num();
  std::string* release_phone_num();
  void set_allocated_phone_num(std::string* phone_num);
  private:
  const std::string& _internal_phone_num() const;
  void _internal_set_phone_num(const std::string& value);
  std::string* _internal_mutable_phone_num();
  public:

  // string password = 3;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgBindPhone)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_num_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Login_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgPlayerLogin

// string account = 1;
inline void MsgPlayerLogin::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& MsgPlayerLogin::account() const {
  // @@protoc_insertion_point(field_get:MsgPlayerLogin.account)
  return _internal_account();
}
inline void MsgPlayerLogin::set_account(const std::string& value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:MsgPlayerLogin.account)
}
inline std::string* MsgPlayerLogin::mutable_account() {
  // @@protoc_insertion_point(field_mutable:MsgPlayerLogin.account)
  return _internal_mutable_account();
}
inline const std::string& MsgPlayerLogin::_internal_account() const {
  return account_.Get();
}
inline void MsgPlayerLogin::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgPlayerLogin::set_account(std::string&& value) {
  
  account_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgPlayerLogin.account)
}
inline void MsgPlayerLogin::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgPlayerLogin.account)
}
inline void MsgPlayerLogin::set_account(const char* value,
    size_t size) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgPlayerLogin.account)
}
inline std::string* MsgPlayerLogin::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgPlayerLogin::release_account() {
  // @@protoc_insertion_point(field_release:MsgPlayerLogin.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgPlayerLogin::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgPlayerLogin.account)
}

// string password = 2;
inline void MsgPlayerLogin::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& MsgPlayerLogin::password() const {
  // @@protoc_insertion_point(field_get:MsgPlayerLogin.password)
  return _internal_password();
}
inline void MsgPlayerLogin::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:MsgPlayerLogin.password)
}
inline std::string* MsgPlayerLogin::mutable_password() {
  // @@protoc_insertion_point(field_mutable:MsgPlayerLogin.password)
  return _internal_mutable_password();
}
inline const std::string& MsgPlayerLogin::_internal_password() const {
  return password_.Get();
}
inline void MsgPlayerLogin::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgPlayerLogin::set_password(std::string&& value) {
  
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgPlayerLogin.password)
}
inline void MsgPlayerLogin::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgPlayerLogin.password)
}
inline void MsgPlayerLogin::set_password(const char* value,
    size_t size) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgPlayerLogin.password)
}
inline std::string* MsgPlayerLogin::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgPlayerLogin::release_password() {
  // @@protoc_insertion_point(field_release:MsgPlayerLogin.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgPlayerLogin::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgPlayerLogin.password)
}

// int32 platform_id = 3;
inline void MsgPlayerLogin::clear_platform_id() {
  platform_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerLogin::_internal_platform_id() const {
  return platform_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerLogin::platform_id() const {
  // @@protoc_insertion_point(field_get:MsgPlayerLogin.platform_id)
  return _internal_platform_id();
}
inline void MsgPlayerLogin::_internal_set_platform_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  platform_id_ = value;
}
inline void MsgPlayerLogin::set_platform_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_platform_id(value);
  // @@protoc_insertion_point(field_set:MsgPlayerLogin.platform_id)
}

// int32 channel_id = 4;
inline void MsgPlayerLogin::clear_channel_id() {
  channel_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerLogin::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerLogin::channel_id() const {
  // @@protoc_insertion_point(field_get:MsgPlayerLogin.channel_id)
  return _internal_channel_id();
}
inline void MsgPlayerLogin::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_id_ = value;
}
inline void MsgPlayerLogin::set_channel_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:MsgPlayerLogin.channel_id)
}

// int32 client_type = 5;
inline void MsgPlayerLogin::clear_client_type() {
  client_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerLogin::_internal_client_type() const {
  return client_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerLogin::client_type() const {
  // @@protoc_insertion_point(field_get:MsgPlayerLogin.client_type)
  return _internal_client_type();
}
inline void MsgPlayerLogin::_internal_set_client_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_type_ = value;
}
inline void MsgPlayerLogin::set_client_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_type(value);
  // @@protoc_insertion_point(field_set:MsgPlayerLogin.client_type)
}

// int32 login_type = 6;
inline void MsgPlayerLogin::clear_login_type() {
  login_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerLogin::_internal_login_type() const {
  return login_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerLogin::login_type() const {
  // @@protoc_insertion_point(field_get:MsgPlayerLogin.login_type)
  return _internal_login_type();
}
inline void MsgPlayerLogin::_internal_set_login_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  login_type_ = value;
}
inline void MsgPlayerLogin::set_login_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_login_type(value);
  // @@protoc_insertion_point(field_set:MsgPlayerLogin.login_type)
}

// string machine_num = 7;
inline void MsgPlayerLogin::clear_machine_num() {
  machine_num_.ClearToEmpty();
}
inline const std::string& MsgPlayerLogin::machine_num() const {
  // @@protoc_insertion_point(field_get:MsgPlayerLogin.machine_num)
  return _internal_machine_num();
}
inline void MsgPlayerLogin::set_machine_num(const std::string& value) {
  _internal_set_machine_num(value);
  // @@protoc_insertion_point(field_set:MsgPlayerLogin.machine_num)
}
inline std::string* MsgPlayerLogin::mutable_machine_num() {
  // @@protoc_insertion_point(field_mutable:MsgPlayerLogin.machine_num)
  return _internal_mutable_machine_num();
}
inline const std::string& MsgPlayerLogin::_internal_machine_num() const {
  return machine_num_.Get();
}
inline void MsgPlayerLogin::_internal_set_machine_num(const std::string& value) {
  
  machine_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgPlayerLogin::set_machine_num(std::string&& value) {
  
  machine_num_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgPlayerLogin.machine_num)
}
inline void MsgPlayerLogin::set_machine_num(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  machine_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgPlayerLogin.machine_num)
}
inline void MsgPlayerLogin::set_machine_num(const char* value,
    size_t size) {
  
  machine_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgPlayerLogin.machine_num)
}
inline std::string* MsgPlayerLogin::_internal_mutable_machine_num() {
  
  return machine_num_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgPlayerLogin::release_machine_num() {
  // @@protoc_insertion_point(field_release:MsgPlayerLogin.machine_num)
  return machine_num_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgPlayerLogin::set_allocated_machine_num(std::string* machine_num) {
  if (machine_num != nullptr) {
    
  } else {
    
  }
  machine_num_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), machine_num,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgPlayerLogin.machine_num)
}

// string user_ip = 8;
inline void MsgPlayerLogin::clear_user_ip() {
  user_ip_.ClearToEmpty();
}
inline const std::string& MsgPlayerLogin::user_ip() const {
  // @@protoc_insertion_point(field_get:MsgPlayerLogin.user_ip)
  return _internal_user_ip();
}
inline void MsgPlayerLogin::set_user_ip(const std::string& value) {
  _internal_set_user_ip(value);
  // @@protoc_insertion_point(field_set:MsgPlayerLogin.user_ip)
}
inline std::string* MsgPlayerLogin::mutable_user_ip() {
  // @@protoc_insertion_point(field_mutable:MsgPlayerLogin.user_ip)
  return _internal_mutable_user_ip();
}
inline const std::string& MsgPlayerLogin::_internal_user_ip() const {
  return user_ip_.Get();
}
inline void MsgPlayerLogin::_internal_set_user_ip(const std::string& value) {
  
  user_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgPlayerLogin::set_user_ip(std::string&& value) {
  
  user_ip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgPlayerLogin.user_ip)
}
inline void MsgPlayerLogin::set_user_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgPlayerLogin.user_ip)
}
inline void MsgPlayerLogin::set_user_ip(const char* value,
    size_t size) {
  
  user_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgPlayerLogin.user_ip)
}
inline std::string* MsgPlayerLogin::_internal_mutable_user_ip() {
  
  return user_ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgPlayerLogin::release_user_ip() {
  // @@protoc_insertion_point(field_release:MsgPlayerLogin.user_ip)
  return user_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgPlayerLogin::set_allocated_user_ip(std::string* user_ip) {
  if (user_ip != nullptr) {
    
  } else {
    
  }
  user_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgPlayerLogin.user_ip)
}

// bool is_drain = 9;
inline void MsgPlayerLogin::clear_is_drain() {
  is_drain_ = false;
}
inline bool MsgPlayerLogin::_internal_is_drain() const {
  return is_drain_;
}
inline bool MsgPlayerLogin::is_drain() const {
  // @@protoc_insertion_point(field_get:MsgPlayerLogin.is_drain)
  return _internal_is_drain();
}
inline void MsgPlayerLogin::_internal_set_is_drain(bool value) {
  
  is_drain_ = value;
}
inline void MsgPlayerLogin::set_is_drain(bool value) {
  _internal_set_is_drain(value);
  // @@protoc_insertion_point(field_set:MsgPlayerLogin.is_drain)
}

// string avatar = 10;
inline void MsgPlayerLogin::clear_avatar() {
  avatar_.ClearToEmpty();
}
inline const std::string& MsgPlayerLogin::avatar() const {
  // @@protoc_insertion_point(field_get:MsgPlayerLogin.avatar)
  return _internal_avatar();
}
inline void MsgPlayerLogin::set_avatar(const std::string& value) {
  _internal_set_avatar(value);
  // @@protoc_insertion_point(field_set:MsgPlayerLogin.avatar)
}
inline std::string* MsgPlayerLogin::mutable_avatar() {
  // @@protoc_insertion_point(field_mutable:MsgPlayerLogin.avatar)
  return _internal_mutable_avatar();
}
inline const std::string& MsgPlayerLogin::_internal_avatar() const {
  return avatar_.Get();
}
inline void MsgPlayerLogin::_internal_set_avatar(const std::string& value) {
  
  avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgPlayerLogin::set_avatar(std::string&& value) {
  
  avatar_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgPlayerLogin.avatar)
}
inline void MsgPlayerLogin::set_avatar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgPlayerLogin.avatar)
}
inline void MsgPlayerLogin::set_avatar(const char* value,
    size_t size) {
  
  avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgPlayerLogin.avatar)
}
inline std::string* MsgPlayerLogin::_internal_mutable_avatar() {
  
  return avatar_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgPlayerLogin::release_avatar() {
  // @@protoc_insertion_point(field_release:MsgPlayerLogin.avatar)
  return avatar_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgPlayerLogin::set_allocated_avatar(std::string* avatar) {
  if (avatar != nullptr) {
    
  } else {
    
  }
  avatar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgPlayerLogin.avatar)
}

// string nickname = 11;
inline void MsgPlayerLogin::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& MsgPlayerLogin::nickname() const {
  // @@protoc_insertion_point(field_get:MsgPlayerLogin.nickname)
  return _internal_nickname();
}
inline void MsgPlayerLogin::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:MsgPlayerLogin.nickname)
}
inline std::string* MsgPlayerLogin::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:MsgPlayerLogin.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& MsgPlayerLogin::_internal_nickname() const {
  return nickname_.Get();
}
inline void MsgPlayerLogin::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgPlayerLogin::set_nickname(std::string&& value) {
  
  nickname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgPlayerLogin.nickname)
}
inline void MsgPlayerLogin::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgPlayerLogin.nickname)
}
inline void MsgPlayerLogin::set_nickname(const char* value,
    size_t size) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgPlayerLogin.nickname)
}
inline std::string* MsgPlayerLogin::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgPlayerLogin::release_nickname() {
  // @@protoc_insertion_point(field_release:MsgPlayerLogin.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgPlayerLogin::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgPlayerLogin.nickname)
}

// string phone = 12;
inline void MsgPlayerLogin::clear_phone() {
  phone_.ClearToEmpty();
}
inline const std::string& MsgPlayerLogin::phone() const {
  // @@protoc_insertion_point(field_get:MsgPlayerLogin.phone)
  return _internal_phone();
}
inline void MsgPlayerLogin::set_phone(const std::string& value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:MsgPlayerLogin.phone)
}
inline std::string* MsgPlayerLogin::mutable_phone() {
  // @@protoc_insertion_point(field_mutable:MsgPlayerLogin.phone)
  return _internal_mutable_phone();
}
inline const std::string& MsgPlayerLogin::_internal_phone() const {
  return phone_.Get();
}
inline void MsgPlayerLogin::_internal_set_phone(const std::string& value) {
  
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgPlayerLogin::set_phone(std::string&& value) {
  
  phone_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgPlayerLogin.phone)
}
inline void MsgPlayerLogin::set_phone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgPlayerLogin.phone)
}
inline void MsgPlayerLogin::set_phone(const char* value,
    size_t size) {
  
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgPlayerLogin.phone)
}
inline std::string* MsgPlayerLogin::_internal_mutable_phone() {
  
  return phone_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgPlayerLogin::release_phone() {
  // @@protoc_insertion_point(field_release:MsgPlayerLogin.phone)
  return phone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgPlayerLogin::set_allocated_phone(std::string* phone) {
  if (phone != nullptr) {
    
  } else {
    
  }
  phone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgPlayerLogin.phone)
}

// int32 code = 13;
inline void MsgPlayerLogin::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerLogin::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerLogin::code() const {
  // @@protoc_insertion_point(field_get:MsgPlayerLogin.code)
  return _internal_code();
}
inline void MsgPlayerLogin::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void MsgPlayerLogin::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:MsgPlayerLogin.code)
}

// -------------------------------------------------------------------

// MsgPlayerLoginResp

// int32 res_code = 1;
inline void MsgPlayerLoginResp::clear_res_code() {
  res_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerLoginResp::_internal_res_code() const {
  return res_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerLoginResp::res_code() const {
  // @@protoc_insertion_point(field_get:MsgPlayerLoginResp.res_code)
  return _internal_res_code();
}
inline void MsgPlayerLoginResp::_internal_set_res_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  res_code_ = value;
}
inline void MsgPlayerLoginResp::set_res_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_res_code(value);
  // @@protoc_insertion_point(field_set:MsgPlayerLoginResp.res_code)
}

// int32 user_id = 2;
inline void MsgPlayerLoginResp::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerLoginResp::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerLoginResp::user_id() const {
  // @@protoc_insertion_point(field_get:MsgPlayerLoginResp.user_id)
  return _internal_user_id();
}
inline void MsgPlayerLoginResp::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void MsgPlayerLoginResp::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:MsgPlayerLoginResp.user_id)
}

// int32 beautiful_id = 3;
inline void MsgPlayerLoginResp::clear_beautiful_id() {
  beautiful_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerLoginResp::_internal_beautiful_id() const {
  return beautiful_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerLoginResp::beautiful_id() const {
  // @@protoc_insertion_point(field_get:MsgPlayerLoginResp.beautiful_id)
  return _internal_beautiful_id();
}
inline void MsgPlayerLoginResp::_internal_set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  beautiful_id_ = value;
}
inline void MsgPlayerLoginResp::set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_beautiful_id(value);
  // @@protoc_insertion_point(field_set:MsgPlayerLoginResp.beautiful_id)
}

// string account = 4;
inline void MsgPlayerLoginResp::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& MsgPlayerLoginResp::account() const {
  // @@protoc_insertion_point(field_get:MsgPlayerLoginResp.account)
  return _internal_account();
}
inline void MsgPlayerLoginResp::set_account(const std::string& value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:MsgPlayerLoginResp.account)
}
inline std::string* MsgPlayerLoginResp::mutable_account() {
  // @@protoc_insertion_point(field_mutable:MsgPlayerLoginResp.account)
  return _internal_mutable_account();
}
inline const std::string& MsgPlayerLoginResp::_internal_account() const {
  return account_.Get();
}
inline void MsgPlayerLoginResp::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgPlayerLoginResp::set_account(std::string&& value) {
  
  account_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgPlayerLoginResp.account)
}
inline void MsgPlayerLoginResp::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgPlayerLoginResp.account)
}
inline void MsgPlayerLoginResp::set_account(const char* value,
    size_t size) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgPlayerLoginResp.account)
}
inline std::string* MsgPlayerLoginResp::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgPlayerLoginResp::release_account() {
  // @@protoc_insertion_point(field_release:MsgPlayerLoginResp.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgPlayerLoginResp::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgPlayerLoginResp.account)
}

// bytes nickname = 5;
inline void MsgPlayerLoginResp::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& MsgPlayerLoginResp::nickname() const {
  // @@protoc_insertion_point(field_get:MsgPlayerLoginResp.nickname)
  return _internal_nickname();
}
inline void MsgPlayerLoginResp::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:MsgPlayerLoginResp.nickname)
}
inline std::string* MsgPlayerLoginResp::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:MsgPlayerLoginResp.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& MsgPlayerLoginResp::_internal_nickname() const {
  return nickname_.Get();
}
inline void MsgPlayerLoginResp::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgPlayerLoginResp::set_nickname(std::string&& value) {
  
  nickname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgPlayerLoginResp.nickname)
}
inline void MsgPlayerLoginResp::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgPlayerLoginResp.nickname)
}
inline void MsgPlayerLoginResp::set_nickname(const void* value,
    size_t size) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgPlayerLoginResp.nickname)
}
inline std::string* MsgPlayerLoginResp::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgPlayerLoginResp::release_nickname() {
  // @@protoc_insertion_point(field_release:MsgPlayerLoginResp.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgPlayerLoginResp::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgPlayerLoginResp.nickname)
}

// string avatar = 6;
inline void MsgPlayerLoginResp::clear_avatar() {
  avatar_.ClearToEmpty();
}
inline const std::string& MsgPlayerLoginResp::avatar() const {
  // @@protoc_insertion_point(field_get:MsgPlayerLoginResp.avatar)
  return _internal_avatar();
}
inline void MsgPlayerLoginResp::set_avatar(const std::string& value) {
  _internal_set_avatar(value);
  // @@protoc_insertion_point(field_set:MsgPlayerLoginResp.avatar)
}
inline std::string* MsgPlayerLoginResp::mutable_avatar() {
  // @@protoc_insertion_point(field_mutable:MsgPlayerLoginResp.avatar)
  return _internal_mutable_avatar();
}
inline const std::string& MsgPlayerLoginResp::_internal_avatar() const {
  return avatar_.Get();
}
inline void MsgPlayerLoginResp::_internal_set_avatar(const std::string& value) {
  
  avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgPlayerLoginResp::set_avatar(std::string&& value) {
  
  avatar_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgPlayerLoginResp.avatar)
}
inline void MsgPlayerLoginResp::set_avatar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgPlayerLoginResp.avatar)
}
inline void MsgPlayerLoginResp::set_avatar(const char* value,
    size_t size) {
  
  avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgPlayerLoginResp.avatar)
}
inline std::string* MsgPlayerLoginResp::_internal_mutable_avatar() {
  
  return avatar_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgPlayerLoginResp::release_avatar() {
  // @@protoc_insertion_point(field_release:MsgPlayerLoginResp.avatar)
  return avatar_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgPlayerLoginResp::set_allocated_avatar(std::string* avatar) {
  if (avatar != nullptr) {
    
  } else {
    
  }
  avatar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgPlayerLoginResp.avatar)
}

// bool first_recharge = 7;
inline void MsgPlayerLoginResp::clear_first_recharge() {
  first_recharge_ = false;
}
inline bool MsgPlayerLoginResp::_internal_first_recharge() const {
  return first_recharge_;
}
inline bool MsgPlayerLoginResp::first_recharge() const {
  // @@protoc_insertion_point(field_get:MsgPlayerLoginResp.first_recharge)
  return _internal_first_recharge();
}
inline void MsgPlayerLoginResp::_internal_set_first_recharge(bool value) {
  
  first_recharge_ = value;
}
inline void MsgPlayerLoginResp::set_first_recharge(bool value) {
  _internal_set_first_recharge(value);
  // @@protoc_insertion_point(field_set:MsgPlayerLoginResp.first_recharge)
}

// int32 user_type = 8;
inline void MsgPlayerLoginResp::clear_user_type() {
  user_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerLoginResp::_internal_user_type() const {
  return user_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerLoginResp::user_type() const {
  // @@protoc_insertion_point(field_get:MsgPlayerLoginResp.user_type)
  return _internal_user_type();
}
inline void MsgPlayerLoginResp::_internal_set_user_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_type_ = value;
}
inline void MsgPlayerLoginResp::set_user_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_type(value);
  // @@protoc_insertion_point(field_set:MsgPlayerLoginResp.user_type)
}

// bool is_drain = 9;
inline void MsgPlayerLoginResp::clear_is_drain() {
  is_drain_ = false;
}
inline bool MsgPlayerLoginResp::_internal_is_drain() const {
  return is_drain_;
}
inline bool MsgPlayerLoginResp::is_drain() const {
  // @@protoc_insertion_point(field_get:MsgPlayerLoginResp.is_drain)
  return _internal_is_drain();
}
inline void MsgPlayerLoginResp::_internal_set_is_drain(bool value) {
  
  is_drain_ = value;
}
inline void MsgPlayerLoginResp::set_is_drain(bool value) {
  _internal_set_is_drain(value);
  // @@protoc_insertion_point(field_set:MsgPlayerLoginResp.is_drain)
}

// uint64 coin = 10;
inline void MsgPlayerLoginResp::clear_coin() {
  coin_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MsgPlayerLoginResp::_internal_coin() const {
  return coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MsgPlayerLoginResp::coin() const {
  // @@protoc_insertion_point(field_get:MsgPlayerLoginResp.coin)
  return _internal_coin();
}
inline void MsgPlayerLoginResp::_internal_set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  coin_ = value;
}
inline void MsgPlayerLoginResp::set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_coin(value);
  // @@protoc_insertion_point(field_set:MsgPlayerLoginResp.coin)
}

// string phone_num = 11;
inline void MsgPlayerLoginResp::clear_phone_num() {
  phone_num_.ClearToEmpty();
}
inline const std::string& MsgPlayerLoginResp::phone_num() const {
  // @@protoc_insertion_point(field_get:MsgPlayerLoginResp.phone_num)
  return _internal_phone_num();
}
inline void MsgPlayerLoginResp::set_phone_num(const std::string& value) {
  _internal_set_phone_num(value);
  // @@protoc_insertion_point(field_set:MsgPlayerLoginResp.phone_num)
}
inline std::string* MsgPlayerLoginResp::mutable_phone_num() {
  // @@protoc_insertion_point(field_mutable:MsgPlayerLoginResp.phone_num)
  return _internal_mutable_phone_num();
}
inline const std::string& MsgPlayerLoginResp::_internal_phone_num() const {
  return phone_num_.Get();
}
inline void MsgPlayerLoginResp::_internal_set_phone_num(const std::string& value) {
  
  phone_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgPlayerLoginResp::set_phone_num(std::string&& value) {
  
  phone_num_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgPlayerLoginResp.phone_num)
}
inline void MsgPlayerLoginResp::set_phone_num(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgPlayerLoginResp.phone_num)
}
inline void MsgPlayerLoginResp::set_phone_num(const char* value,
    size_t size) {
  
  phone_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgPlayerLoginResp.phone_num)
}
inline std::string* MsgPlayerLoginResp::_internal_mutable_phone_num() {
  
  return phone_num_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgPlayerLoginResp::release_phone_num() {
  // @@protoc_insertion_point(field_release:MsgPlayerLoginResp.phone_num)
  return phone_num_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgPlayerLoginResp::set_allocated_phone_num(std::string* phone_num) {
  if (phone_num != nullptr) {
    
  } else {
    
  }
  phone_num_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone_num,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgPlayerLoginResp.phone_num)
}

// -------------------------------------------------------------------

// MsgModifyPassword

// string old_password = 1;
inline void MsgModifyPassword::clear_old_password() {
  old_password_.ClearToEmpty();
}
inline const std::string& MsgModifyPassword::old_password() const {
  // @@protoc_insertion_point(field_get:MsgModifyPassword.old_password)
  return _internal_old_password();
}
inline void MsgModifyPassword::set_old_password(const std::string& value) {
  _internal_set_old_password(value);
  // @@protoc_insertion_point(field_set:MsgModifyPassword.old_password)
}
inline std::string* MsgModifyPassword::mutable_old_password() {
  // @@protoc_insertion_point(field_mutable:MsgModifyPassword.old_password)
  return _internal_mutable_old_password();
}
inline const std::string& MsgModifyPassword::_internal_old_password() const {
  return old_password_.Get();
}
inline void MsgModifyPassword::_internal_set_old_password(const std::string& value) {
  
  old_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgModifyPassword::set_old_password(std::string&& value) {
  
  old_password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgModifyPassword.old_password)
}
inline void MsgModifyPassword::set_old_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  old_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgModifyPassword.old_password)
}
inline void MsgModifyPassword::set_old_password(const char* value,
    size_t size) {
  
  old_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgModifyPassword.old_password)
}
inline std::string* MsgModifyPassword::_internal_mutable_old_password() {
  
  return old_password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgModifyPassword::release_old_password() {
  // @@protoc_insertion_point(field_release:MsgModifyPassword.old_password)
  return old_password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgModifyPassword::set_allocated_old_password(std::string* old_password) {
  if (old_password != nullptr) {
    
  } else {
    
  }
  old_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), old_password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgModifyPassword.old_password)
}

// string new_password = 2;
inline void MsgModifyPassword::clear_new_password() {
  new_password_.ClearToEmpty();
}
inline const std::string& MsgModifyPassword::new_password() const {
  // @@protoc_insertion_point(field_get:MsgModifyPassword.new_password)
  return _internal_new_password();
}
inline void MsgModifyPassword::set_new_password(const std::string& value) {
  _internal_set_new_password(value);
  // @@protoc_insertion_point(field_set:MsgModifyPassword.new_password)
}
inline std::string* MsgModifyPassword::mutable_new_password() {
  // @@protoc_insertion_point(field_mutable:MsgModifyPassword.new_password)
  return _internal_mutable_new_password();
}
inline const std::string& MsgModifyPassword::_internal_new_password() const {
  return new_password_.Get();
}
inline void MsgModifyPassword::_internal_set_new_password(const std::string& value) {
  
  new_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgModifyPassword::set_new_password(std::string&& value) {
  
  new_password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgModifyPassword.new_password)
}
inline void MsgModifyPassword::set_new_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  new_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgModifyPassword.new_password)
}
inline void MsgModifyPassword::set_new_password(const char* value,
    size_t size) {
  
  new_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgModifyPassword.new_password)
}
inline std::string* MsgModifyPassword::_internal_mutable_new_password() {
  
  return new_password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgModifyPassword::release_new_password() {
  // @@protoc_insertion_point(field_release:MsgModifyPassword.new_password)
  return new_password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgModifyPassword::set_allocated_new_password(std::string* new_password) {
  if (new_password != nullptr) {
    
  } else {
    
  }
  new_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgModifyPassword.new_password)
}

// -------------------------------------------------------------------

// MsgBindPhone

// int32 code = 1;
inline void MsgBindPhone::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgBindPhone::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgBindPhone::code() const {
  // @@protoc_insertion_point(field_get:MsgBindPhone.code)
  return _internal_code();
}
inline void MsgBindPhone::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void MsgBindPhone::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:MsgBindPhone.code)
}

// string phone_num = 2;
inline void MsgBindPhone::clear_phone_num() {
  phone_num_.ClearToEmpty();
}
inline const std::string& MsgBindPhone::phone_num() const {
  // @@protoc_insertion_point(field_get:MsgBindPhone.phone_num)
  return _internal_phone_num();
}
inline void MsgBindPhone::set_phone_num(const std::string& value) {
  _internal_set_phone_num(value);
  // @@protoc_insertion_point(field_set:MsgBindPhone.phone_num)
}
inline std::string* MsgBindPhone::mutable_phone_num() {
  // @@protoc_insertion_point(field_mutable:MsgBindPhone.phone_num)
  return _internal_mutable_phone_num();
}
inline const std::string& MsgBindPhone::_internal_phone_num() const {
  return phone_num_.Get();
}
inline void MsgBindPhone::_internal_set_phone_num(const std::string& value) {
  
  phone_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgBindPhone::set_phone_num(std::string&& value) {
  
  phone_num_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgBindPhone.phone_num)
}
inline void MsgBindPhone::set_phone_num(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgBindPhone.phone_num)
}
inline void MsgBindPhone::set_phone_num(const char* value,
    size_t size) {
  
  phone_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgBindPhone.phone_num)
}
inline std::string* MsgBindPhone::_internal_mutable_phone_num() {
  
  return phone_num_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgBindPhone::release_phone_num() {
  // @@protoc_insertion_point(field_release:MsgBindPhone.phone_num)
  return phone_num_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgBindPhone::set_allocated_phone_num(std::string* phone_num) {
  if (phone_num != nullptr) {
    
  } else {
    
  }
  phone_num_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone_num,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgBindPhone.phone_num)
}

// string password = 3;
inline void MsgBindPhone::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& MsgBindPhone::password() const {
  // @@protoc_insertion_point(field_get:MsgBindPhone.password)
  return _internal_password();
}
inline void MsgBindPhone::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:MsgBindPhone.password)
}
inline std::string* MsgBindPhone::mutable_password() {
  // @@protoc_insertion_point(field_mutable:MsgBindPhone.password)
  return _internal_mutable_password();
}
inline const std::string& MsgBindPhone::_internal_password() const {
  return password_.Get();
}
inline void MsgBindPhone::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgBindPhone::set_password(std::string&& value) {
  
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgBindPhone.password)
}
inline void MsgBindPhone::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgBindPhone.password)
}
inline void MsgBindPhone::set_password(const char* value,
    size_t size) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgBindPhone.password)
}
inline std::string* MsgBindPhone::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgBindPhone::release_password() {
  // @@protoc_insertion_point(field_release:MsgBindPhone.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgBindPhone::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgBindPhone.password)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Login_2eproto
