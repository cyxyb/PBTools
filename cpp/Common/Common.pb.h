// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Common_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Common_2eproto;
class MsgCommonBool;
class MsgCommonBoolDefaultTypeInternal;
extern MsgCommonBoolDefaultTypeInternal _MsgCommonBool_default_instance_;
class MsgCommonN32;
class MsgCommonN32DefaultTypeInternal;
extern MsgCommonN32DefaultTypeInternal _MsgCommonN32_default_instance_;
class MsgCommonN64;
class MsgCommonN64DefaultTypeInternal;
extern MsgCommonN64DefaultTypeInternal _MsgCommonN64_default_instance_;
class MsgCommonStr;
class MsgCommonStrDefaultTypeInternal;
extern MsgCommonStrDefaultTypeInternal _MsgCommonStr_default_instance_;
class MsgGameServerInfo;
class MsgGameServerInfoDefaultTypeInternal;
extern MsgGameServerInfoDefaultTypeInternal _MsgGameServerInfo_default_instance_;
class MsgGameServerList;
class MsgGameServerListDefaultTypeInternal;
extern MsgGameServerListDefaultTypeInternal _MsgGameServerList_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::MsgCommonBool* Arena::CreateMaybeMessage<::MsgCommonBool>(Arena*);
template<> ::MsgCommonN32* Arena::CreateMaybeMessage<::MsgCommonN32>(Arena*);
template<> ::MsgCommonN64* Arena::CreateMaybeMessage<::MsgCommonN64>(Arena*);
template<> ::MsgCommonStr* Arena::CreateMaybeMessage<::MsgCommonStr>(Arena*);
template<> ::MsgGameServerInfo* Arena::CreateMaybeMessage<::MsgGameServerInfo>(Arena*);
template<> ::MsgGameServerList* Arena::CreateMaybeMessage<::MsgGameServerList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class MsgCommonBool PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgCommonBool) */ {
 public:
  inline MsgCommonBool() : MsgCommonBool(nullptr) {}
  virtual ~MsgCommonBool();

  MsgCommonBool(const MsgCommonBool& from);
  MsgCommonBool(MsgCommonBool&& from) noexcept
    : MsgCommonBool() {
    *this = ::std::move(from);
  }

  inline MsgCommonBool& operator=(const MsgCommonBool& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgCommonBool& operator=(MsgCommonBool&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgCommonBool& default_instance();

  static inline const MsgCommonBool* internal_default_instance() {
    return reinterpret_cast<const MsgCommonBool*>(
               &_MsgCommonBool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgCommonBool& a, MsgCommonBool& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgCommonBool* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgCommonBool* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgCommonBool* New() const final {
    return CreateMaybeMessage<MsgCommonBool>(nullptr);
  }

  MsgCommonBool* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgCommonBool>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgCommonBool& from);
  void MergeFrom(const MsgCommonBool& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgCommonBool* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgCommonBool";
  }
  protected:
  explicit MsgCommonBool(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2eproto);
    return ::descriptor_table_Common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bool value = 1;
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:MsgCommonBool)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2eproto;
};
// -------------------------------------------------------------------

class MsgCommonN32 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgCommonN32) */ {
 public:
  inline MsgCommonN32() : MsgCommonN32(nullptr) {}
  virtual ~MsgCommonN32();

  MsgCommonN32(const MsgCommonN32& from);
  MsgCommonN32(MsgCommonN32&& from) noexcept
    : MsgCommonN32() {
    *this = ::std::move(from);
  }

  inline MsgCommonN32& operator=(const MsgCommonN32& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgCommonN32& operator=(MsgCommonN32&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgCommonN32& default_instance();

  static inline const MsgCommonN32* internal_default_instance() {
    return reinterpret_cast<const MsgCommonN32*>(
               &_MsgCommonN32_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MsgCommonN32& a, MsgCommonN32& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgCommonN32* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgCommonN32* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgCommonN32* New() const final {
    return CreateMaybeMessage<MsgCommonN32>(nullptr);
  }

  MsgCommonN32* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgCommonN32>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgCommonN32& from);
  void MergeFrom(const MsgCommonN32& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgCommonN32* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgCommonN32";
  }
  protected:
  explicit MsgCommonN32(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2eproto);
    return ::descriptor_table_Common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int32 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgCommonN32)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2eproto;
};
// -------------------------------------------------------------------

class MsgCommonN64 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgCommonN64) */ {
 public:
  inline MsgCommonN64() : MsgCommonN64(nullptr) {}
  virtual ~MsgCommonN64();

  MsgCommonN64(const MsgCommonN64& from);
  MsgCommonN64(MsgCommonN64&& from) noexcept
    : MsgCommonN64() {
    *this = ::std::move(from);
  }

  inline MsgCommonN64& operator=(const MsgCommonN64& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgCommonN64& operator=(MsgCommonN64&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgCommonN64& default_instance();

  static inline const MsgCommonN64* internal_default_instance() {
    return reinterpret_cast<const MsgCommonN64*>(
               &_MsgCommonN64_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MsgCommonN64& a, MsgCommonN64& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgCommonN64* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgCommonN64* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgCommonN64* New() const final {
    return CreateMaybeMessage<MsgCommonN64>(nullptr);
  }

  MsgCommonN64* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgCommonN64>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgCommonN64& from);
  void MergeFrom(const MsgCommonN64& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgCommonN64* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgCommonN64";
  }
  protected:
  explicit MsgCommonN64(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2eproto);
    return ::descriptor_table_Common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int64 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgCommonN64)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2eproto;
};
// -------------------------------------------------------------------

class MsgCommonStr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgCommonStr) */ {
 public:
  inline MsgCommonStr() : MsgCommonStr(nullptr) {}
  virtual ~MsgCommonStr();

  MsgCommonStr(const MsgCommonStr& from);
  MsgCommonStr(MsgCommonStr&& from) noexcept
    : MsgCommonStr() {
    *this = ::std::move(from);
  }

  inline MsgCommonStr& operator=(const MsgCommonStr& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgCommonStr& operator=(MsgCommonStr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgCommonStr& default_instance();

  static inline const MsgCommonStr* internal_default_instance() {
    return reinterpret_cast<const MsgCommonStr*>(
               &_MsgCommonStr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MsgCommonStr& a, MsgCommonStr& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgCommonStr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgCommonStr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgCommonStr* New() const final {
    return CreateMaybeMessage<MsgCommonStr>(nullptr);
  }

  MsgCommonStr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgCommonStr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgCommonStr& from);
  void MergeFrom(const MsgCommonStr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgCommonStr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgCommonStr";
  }
  protected:
  explicit MsgCommonStr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2eproto);
    return ::descriptor_table_Common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:MsgCommonStr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2eproto;
};
// -------------------------------------------------------------------

class MsgGameServerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgGameServerInfo) */ {
 public:
  inline MsgGameServerInfo() : MsgGameServerInfo(nullptr) {}
  virtual ~MsgGameServerInfo();

  MsgGameServerInfo(const MsgGameServerInfo& from);
  MsgGameServerInfo(MsgGameServerInfo&& from) noexcept
    : MsgGameServerInfo() {
    *this = ::std::move(from);
  }

  inline MsgGameServerInfo& operator=(const MsgGameServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgGameServerInfo& operator=(MsgGameServerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgGameServerInfo& default_instance();

  static inline const MsgGameServerInfo* internal_default_instance() {
    return reinterpret_cast<const MsgGameServerInfo*>(
               &_MsgGameServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MsgGameServerInfo& a, MsgGameServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgGameServerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgGameServerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgGameServerInfo* New() const final {
    return CreateMaybeMessage<MsgGameServerInfo>(nullptr);
  }

  MsgGameServerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgGameServerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgGameServerInfo& from);
  void MergeFrom(const MsgGameServerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgGameServerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgGameServerInfo";
  }
  protected:
  explicit MsgGameServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2eproto);
    return ::descriptor_table_Common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kPortFieldNumber = 2,
    kServerIdFieldNumber = 3,
    kOnlineNumFieldNumber = 4,
    kKindIdFieldNumber = 5,
    kRoomLevelFieldNumber = 6,
    kLimitGoldFieldNumber = 7,
    kMaxPlayerFieldNumber = 8,
  };
  // int32 ip = 1;
  void clear_ip();
  ::PROTOBUF_NAMESPACE_ID::int32 ip() const;
  void set_ip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ip() const;
  void _internal_set_ip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 server_id = 3;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 online_num = 4;
  void clear_online_num();
  ::PROTOBUF_NAMESPACE_ID::int32 online_num() const;
  void set_online_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_online_num() const;
  void _internal_set_online_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 kind_id = 5;
  void clear_kind_id();
  ::PROTOBUF_NAMESPACE_ID::int32 kind_id() const;
  void set_kind_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_kind_id() const;
  void _internal_set_kind_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 room_level = 6;
  void clear_room_level();
  ::PROTOBUF_NAMESPACE_ID::int32 room_level() const;
  void set_room_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_room_level() const;
  void _internal_set_room_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 limit_gold = 7;
  void clear_limit_gold();
  ::PROTOBUF_NAMESPACE_ID::int32 limit_gold() const;
  void set_limit_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_limit_gold() const;
  void _internal_set_limit_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_player = 8;
  void clear_max_player();
  ::PROTOBUF_NAMESPACE_ID::int32 max_player() const;
  void set_max_player(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_player() const;
  void _internal_set_max_player(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgGameServerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 online_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 kind_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 room_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_gold_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_player_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2eproto;
};
// -------------------------------------------------------------------

class MsgGameServerList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgGameServerList) */ {
 public:
  inline MsgGameServerList() : MsgGameServerList(nullptr) {}
  virtual ~MsgGameServerList();

  MsgGameServerList(const MsgGameServerList& from);
  MsgGameServerList(MsgGameServerList&& from) noexcept
    : MsgGameServerList() {
    *this = ::std::move(from);
  }

  inline MsgGameServerList& operator=(const MsgGameServerList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgGameServerList& operator=(MsgGameServerList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgGameServerList& default_instance();

  static inline const MsgGameServerList* internal_default_instance() {
    return reinterpret_cast<const MsgGameServerList*>(
               &_MsgGameServerList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MsgGameServerList& a, MsgGameServerList& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgGameServerList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgGameServerList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgGameServerList* New() const final {
    return CreateMaybeMessage<MsgGameServerList>(nullptr);
  }

  MsgGameServerList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgGameServerList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgGameServerList& from);
  void MergeFrom(const MsgGameServerList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgGameServerList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgGameServerList";
  }
  protected:
  explicit MsgGameServerList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2eproto);
    return ::descriptor_table_Common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameServerListFieldNumber = 1,
  };
  // repeated .MsgGameServerInfo game_server_list = 1;
  int game_server_list_size() const;
  private:
  int _internal_game_server_list_size() const;
  public:
  void clear_game_server_list();
  ::MsgGameServerInfo* mutable_game_server_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MsgGameServerInfo >*
      mutable_game_server_list();
  private:
  const ::MsgGameServerInfo& _internal_game_server_list(int index) const;
  ::MsgGameServerInfo* _internal_add_game_server_list();
  public:
  const ::MsgGameServerInfo& game_server_list(int index) const;
  ::MsgGameServerInfo* add_game_server_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MsgGameServerInfo >&
      game_server_list() const;

  // @@protoc_insertion_point(class_scope:MsgGameServerList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MsgGameServerInfo > game_server_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgCommonBool

// bool value = 1;
inline void MsgCommonBool::clear_value() {
  value_ = false;
}
inline bool MsgCommonBool::_internal_value() const {
  return value_;
}
inline bool MsgCommonBool::value() const {
  // @@protoc_insertion_point(field_get:MsgCommonBool.value)
  return _internal_value();
}
inline void MsgCommonBool::_internal_set_value(bool value) {
  
  value_ = value;
}
inline void MsgCommonBool::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:MsgCommonBool.value)
}

// -------------------------------------------------------------------

// MsgCommonN32

// int32 value = 1;
inline void MsgCommonN32::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgCommonN32::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgCommonN32::value() const {
  // @@protoc_insertion_point(field_get:MsgCommonN32.value)
  return _internal_value();
}
inline void MsgCommonN32::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void MsgCommonN32::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:MsgCommonN32.value)
}

// -------------------------------------------------------------------

// MsgCommonN64

// int64 value = 1;
inline void MsgCommonN64::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgCommonN64::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgCommonN64::value() const {
  // @@protoc_insertion_point(field_get:MsgCommonN64.value)
  return _internal_value();
}
inline void MsgCommonN64::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
}
inline void MsgCommonN64::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:MsgCommonN64.value)
}

// -------------------------------------------------------------------

// MsgCommonStr

// string value = 1;
inline void MsgCommonStr::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& MsgCommonStr::value() const {
  // @@protoc_insertion_point(field_get:MsgCommonStr.value)
  return _internal_value();
}
inline void MsgCommonStr::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:MsgCommonStr.value)
}
inline std::string* MsgCommonStr::mutable_value() {
  // @@protoc_insertion_point(field_mutable:MsgCommonStr.value)
  return _internal_mutable_value();
}
inline const std::string& MsgCommonStr::_internal_value() const {
  return value_.Get();
}
inline void MsgCommonStr::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgCommonStr::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgCommonStr.value)
}
inline void MsgCommonStr::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgCommonStr.value)
}
inline void MsgCommonStr::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgCommonStr.value)
}
inline std::string* MsgCommonStr::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgCommonStr::release_value() {
  // @@protoc_insertion_point(field_release:MsgCommonStr.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgCommonStr::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgCommonStr.value)
}

// -------------------------------------------------------------------

// MsgGameServerInfo

// int32 ip = 1;
inline void MsgGameServerInfo::clear_ip() {
  ip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgGameServerInfo::_internal_ip() const {
  return ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgGameServerInfo::ip() const {
  // @@protoc_insertion_point(field_get:MsgGameServerInfo.ip)
  return _internal_ip();
}
inline void MsgGameServerInfo::_internal_set_ip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ip_ = value;
}
inline void MsgGameServerInfo::set_ip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:MsgGameServerInfo.ip)
}

// int32 port = 2;
inline void MsgGameServerInfo::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgGameServerInfo::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgGameServerInfo::port() const {
  // @@protoc_insertion_point(field_get:MsgGameServerInfo.port)
  return _internal_port();
}
inline void MsgGameServerInfo::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void MsgGameServerInfo::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:MsgGameServerInfo.port)
}

// int32 server_id = 3;
inline void MsgGameServerInfo::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgGameServerInfo::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgGameServerInfo::server_id() const {
  // @@protoc_insertion_point(field_get:MsgGameServerInfo.server_id)
  return _internal_server_id();
}
inline void MsgGameServerInfo::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
}
inline void MsgGameServerInfo::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:MsgGameServerInfo.server_id)
}

// int32 online_num = 4;
inline void MsgGameServerInfo::clear_online_num() {
  online_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgGameServerInfo::_internal_online_num() const {
  return online_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgGameServerInfo::online_num() const {
  // @@protoc_insertion_point(field_get:MsgGameServerInfo.online_num)
  return _internal_online_num();
}
inline void MsgGameServerInfo::_internal_set_online_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  online_num_ = value;
}
inline void MsgGameServerInfo::set_online_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_online_num(value);
  // @@protoc_insertion_point(field_set:MsgGameServerInfo.online_num)
}

// int32 kind_id = 5;
inline void MsgGameServerInfo::clear_kind_id() {
  kind_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgGameServerInfo::_internal_kind_id() const {
  return kind_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgGameServerInfo::kind_id() const {
  // @@protoc_insertion_point(field_get:MsgGameServerInfo.kind_id)
  return _internal_kind_id();
}
inline void MsgGameServerInfo::_internal_set_kind_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  kind_id_ = value;
}
inline void MsgGameServerInfo::set_kind_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_kind_id(value);
  // @@protoc_insertion_point(field_set:MsgGameServerInfo.kind_id)
}

// int32 room_level = 6;
inline void MsgGameServerInfo::clear_room_level() {
  room_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgGameServerInfo::_internal_room_level() const {
  return room_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgGameServerInfo::room_level() const {
  // @@protoc_insertion_point(field_get:MsgGameServerInfo.room_level)
  return _internal_room_level();
}
inline void MsgGameServerInfo::_internal_set_room_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  room_level_ = value;
}
inline void MsgGameServerInfo::set_room_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_room_level(value);
  // @@protoc_insertion_point(field_set:MsgGameServerInfo.room_level)
}

// int32 limit_gold = 7;
inline void MsgGameServerInfo::clear_limit_gold() {
  limit_gold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgGameServerInfo::_internal_limit_gold() const {
  return limit_gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgGameServerInfo::limit_gold() const {
  // @@protoc_insertion_point(field_get:MsgGameServerInfo.limit_gold)
  return _internal_limit_gold();
}
inline void MsgGameServerInfo::_internal_set_limit_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limit_gold_ = value;
}
inline void MsgGameServerInfo::set_limit_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_limit_gold(value);
  // @@protoc_insertion_point(field_set:MsgGameServerInfo.limit_gold)
}

// int32 max_player = 8;
inline void MsgGameServerInfo::clear_max_player() {
  max_player_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgGameServerInfo::_internal_max_player() const {
  return max_player_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgGameServerInfo::max_player() const {
  // @@protoc_insertion_point(field_get:MsgGameServerInfo.max_player)
  return _internal_max_player();
}
inline void MsgGameServerInfo::_internal_set_max_player(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_player_ = value;
}
inline void MsgGameServerInfo::set_max_player(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_player(value);
  // @@protoc_insertion_point(field_set:MsgGameServerInfo.max_player)
}

// -------------------------------------------------------------------

// MsgGameServerList

// repeated .MsgGameServerInfo game_server_list = 1;
inline int MsgGameServerList::_internal_game_server_list_size() const {
  return game_server_list_.size();
}
inline int MsgGameServerList::game_server_list_size() const {
  return _internal_game_server_list_size();
}
inline void MsgGameServerList::clear_game_server_list() {
  game_server_list_.Clear();
}
inline ::MsgGameServerInfo* MsgGameServerList::mutable_game_server_list(int index) {
  // @@protoc_insertion_point(field_mutable:MsgGameServerList.game_server_list)
  return game_server_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MsgGameServerInfo >*
MsgGameServerList::mutable_game_server_list() {
  // @@protoc_insertion_point(field_mutable_list:MsgGameServerList.game_server_list)
  return &game_server_list_;
}
inline const ::MsgGameServerInfo& MsgGameServerList::_internal_game_server_list(int index) const {
  return game_server_list_.Get(index);
}
inline const ::MsgGameServerInfo& MsgGameServerList::game_server_list(int index) const {
  // @@protoc_insertion_point(field_get:MsgGameServerList.game_server_list)
  return _internal_game_server_list(index);
}
inline ::MsgGameServerInfo* MsgGameServerList::_internal_add_game_server_list() {
  return game_server_list_.Add();
}
inline ::MsgGameServerInfo* MsgGameServerList::add_game_server_list() {
  // @@protoc_insertion_point(field_add:MsgGameServerList.game_server_list)
  return _internal_add_game_server_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MsgGameServerInfo >&
MsgGameServerList::game_server_list() const {
  // @@protoc_insertion_point(field_list:MsgGameServerList.game_server_list)
  return game_server_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Common_2eproto
