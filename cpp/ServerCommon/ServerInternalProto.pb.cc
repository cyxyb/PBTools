// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerInternalProto.proto

#include "ServerInternalProto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ServerInternalProto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgDBPlayerReconnectData_ServerInternalProto_2eproto;
class MsgRegisterServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgRegisterServer> _instance;
} _MsgRegisterServer_default_instance_;
class MsgRegisterGameServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgRegisterGameServer> _instance;
} _MsgRegisterGameServer_default_instance_;
class MsgRegisterChatServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgRegisterChatServer> _instance;
} _MsgRegisterChatServer_default_instance_;
class MsgApplyRobotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgApplyRobot> _instance;
} _MsgApplyRobot_default_instance_;
class MsgApplyRobotRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgApplyRobotResp> _instance;
} _MsgApplyRobotResp_default_instance_;
class MsgCreateRobotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgCreateRobot> _instance;
} _MsgCreateRobot_default_instance_;
class MsgCreateRobotRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgCreateRobotResp> _instance;
} _MsgCreateRobotResp_default_instance_;
class MsgSendPhoneCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgSendPhoneCode> _instance;
} _MsgSendPhoneCode_default_instance_;
class MsgUpdateGameServerOnlineNumDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgUpdateGameServerOnlineNum> _instance;
} _MsgUpdateGameServerOnlineNum_default_instance_;
class MsgGameServerUnRegisterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgGameServerUnRegister> _instance;
} _MsgGameServerUnRegister_default_instance_;
class MsgLoadCheatRateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgLoadCheatRate> _instance;
} _MsgLoadCheatRate_default_instance_;
class MsgRelayServerRegisterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgRelayServerRegister> _instance;
} _MsgRelayServerRegister_default_instance_;
class MsgRelayServerAddMailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgRelayServerAddMail> _instance;
} _MsgRelayServerAddMail_default_instance_;
class MsgRelayServerRechargeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgRelayServerRecharge> _instance;
} _MsgRelayServerRecharge_default_instance_;
class MsgDBUpdateOnlineNumDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgDBUpdateOnlineNum> _instance;
} _MsgDBUpdateOnlineNum_default_instance_;
class MsgDBRegisterLoginDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgDBRegisterLogin> _instance;
} _MsgDBRegisterLogin_default_instance_;
class MsgPlayerAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgPlayerAttribute> _instance;
} _MsgPlayerAttribute_default_instance_;
class MsgLoginPlayerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgLoginPlayerInfo> _instance;
} _MsgLoginPlayerInfo_default_instance_;
class MsgDBLoginOutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgDBLoginOut> _instance;
} _MsgDBLoginOut_default_instance_;
class MsgDBUpdatePlayerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgDBUpdatePlayerInfo> _instance;
} _MsgDBUpdatePlayerInfo_default_instance_;
class MsgDBMailDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgDBMailData> _instance;
} _MsgDBMailData_default_instance_;
class MsgDBMailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgDBMail> _instance;
} _MsgDBMail_default_instance_;
class MsgDBRegisterGameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgDBRegisterGame> _instance;
} _MsgDBRegisterGame_default_instance_;
class MsgDBLoadRobotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgDBLoadRobot> _instance;
} _MsgDBLoadRobot_default_instance_;
class MsgDBGamePlayerLoginDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgDBGamePlayerLogin> _instance;
} _MsgDBGamePlayerLogin_default_instance_;
class MsgDBPlayerReconnectDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgDBPlayerReconnectData> _instance;
} _MsgDBPlayerReconnectData_default_instance_;
class MsgDBGamePlayerLoginRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgDBGamePlayerLoginResp> _instance;
} _MsgDBGamePlayerLoginResp_default_instance_;
class MsgDBWriteScoreDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgDBWriteScore> _instance;
} _MsgDBWriteScore_default_instance_;
class MsgDBWriteScoreRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgDBWriteScoreResp> _instance;
} _MsgDBWriteScoreResp_default_instance_;
class MsgDBFingerGuessWriteScoreDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgDBFingerGuessWriteScore> _instance;
} _MsgDBFingerGuessWriteScore_default_instance_;
class MsgDBFingerGuessWriteScoreRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgDBFingerGuessWriteScoreResp> _instance;
} _MsgDBFingerGuessWriteScoreResp_default_instance_;
class MsgDBFingerGuessQueryRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgDBFingerGuessQueryRecord> _instance;
} _MsgDBFingerGuessQueryRecord_default_instance_;
class MsgDBModifyAvatarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgDBModifyAvatar> _instance;
} _MsgDBModifyAvatar_default_instance_;
class MsgDBUpdateJackpotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgDBUpdateJackpot> _instance;
} _MsgDBUpdateJackpot_default_instance_;
class MsgDBBankChangePasswordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgDBBankChangePassword> _instance;
} _MsgDBBankChangePassword_default_instance_;
class MsgDBBankOperateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgDBBankOperate> _instance;
} _MsgDBBankOperate_default_instance_;
class MsgDBBankTakeOutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgDBBankTakeOut> _instance;
} _MsgDBBankTakeOut_default_instance_;
class MsgDBBankTransferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgDBBankTransfer> _instance;
} _MsgDBBankTransfer_default_instance_;
class MsgStorageCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgStorageCode> _instance;
} _MsgStorageCode_default_instance_;
class MsgDBBindPhoneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgDBBindPhone> _instance;
} _MsgDBBindPhone_default_instance_;
class MsgDBBindPhoneResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgDBBindPhoneRes> _instance;
} _MsgDBBindPhoneRes_default_instance_;
static void InitDefaultsscc_info_MsgApplyRobot_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgApplyRobot_default_instance_;
    new (ptr) ::MsgApplyRobot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgApplyRobot_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgApplyRobot_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgApplyRobotResp_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgApplyRobotResp_default_instance_;
    new (ptr) ::MsgApplyRobotResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgApplyRobotResp_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgApplyRobotResp_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgCreateRobot_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgCreateRobot_default_instance_;
    new (ptr) ::MsgCreateRobot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgCreateRobot_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgCreateRobot_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgCreateRobotResp_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgCreateRobotResp_default_instance_;
    new (ptr) ::MsgCreateRobotResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgCreateRobotResp_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgCreateRobotResp_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgDBBankChangePassword_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgDBBankChangePassword_default_instance_;
    new (ptr) ::MsgDBBankChangePassword();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgDBBankChangePassword_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgDBBankChangePassword_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgDBBankOperate_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgDBBankOperate_default_instance_;
    new (ptr) ::MsgDBBankOperate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgDBBankOperate_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgDBBankOperate_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgDBBankTakeOut_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgDBBankTakeOut_default_instance_;
    new (ptr) ::MsgDBBankTakeOut();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgDBBankTakeOut_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgDBBankTakeOut_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgDBBankTransfer_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgDBBankTransfer_default_instance_;
    new (ptr) ::MsgDBBankTransfer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgDBBankTransfer_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgDBBankTransfer_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgDBBindPhone_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgDBBindPhone_default_instance_;
    new (ptr) ::MsgDBBindPhone();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgDBBindPhone_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgDBBindPhone_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgDBBindPhoneRes_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgDBBindPhoneRes_default_instance_;
    new (ptr) ::MsgDBBindPhoneRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgDBBindPhoneRes_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgDBBindPhoneRes_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgDBFingerGuessQueryRecord_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgDBFingerGuessQueryRecord_default_instance_;
    new (ptr) ::MsgDBFingerGuessQueryRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgDBFingerGuessQueryRecord_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgDBFingerGuessQueryRecord_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgDBFingerGuessWriteScore_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgDBFingerGuessWriteScore_default_instance_;
    new (ptr) ::MsgDBFingerGuessWriteScore();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgDBFingerGuessWriteScore_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgDBFingerGuessWriteScore_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgDBFingerGuessWriteScoreResp_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgDBFingerGuessWriteScoreResp_default_instance_;
    new (ptr) ::MsgDBFingerGuessWriteScoreResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgDBFingerGuessWriteScoreResp_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgDBFingerGuessWriteScoreResp_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgDBGamePlayerLogin_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgDBGamePlayerLogin_default_instance_;
    new (ptr) ::MsgDBGamePlayerLogin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgDBGamePlayerLogin_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgDBGamePlayerLogin_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgDBGamePlayerLoginResp_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgDBGamePlayerLoginResp_default_instance_;
    new (ptr) ::MsgDBGamePlayerLoginResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgDBGamePlayerLoginResp_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgDBGamePlayerLoginResp_ServerInternalProto_2eproto}, {
      &scc_info_MsgDBPlayerReconnectData_ServerInternalProto_2eproto.base,}};

static void InitDefaultsscc_info_MsgDBLoadRobot_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgDBLoadRobot_default_instance_;
    new (ptr) ::MsgDBLoadRobot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgDBLoadRobot_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgDBLoadRobot_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgDBLoginOut_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgDBLoginOut_default_instance_;
    new (ptr) ::MsgDBLoginOut();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgDBLoginOut_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgDBLoginOut_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgDBMail_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgDBMail_default_instance_;
    new (ptr) ::MsgDBMail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgDBMail_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgDBMail_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgDBMailData_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgDBMailData_default_instance_;
    new (ptr) ::MsgDBMailData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgDBMailData_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgDBMailData_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgDBModifyAvatar_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgDBModifyAvatar_default_instance_;
    new (ptr) ::MsgDBModifyAvatar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgDBModifyAvatar_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgDBModifyAvatar_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgDBPlayerReconnectData_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgDBPlayerReconnectData_default_instance_;
    new (ptr) ::MsgDBPlayerReconnectData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgDBPlayerReconnectData_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgDBPlayerReconnectData_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgDBRegisterGame_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgDBRegisterGame_default_instance_;
    new (ptr) ::MsgDBRegisterGame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgDBRegisterGame_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgDBRegisterGame_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgDBRegisterLogin_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgDBRegisterLogin_default_instance_;
    new (ptr) ::MsgDBRegisterLogin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgDBRegisterLogin_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgDBRegisterLogin_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgDBUpdateJackpot_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgDBUpdateJackpot_default_instance_;
    new (ptr) ::MsgDBUpdateJackpot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgDBUpdateJackpot_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgDBUpdateJackpot_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgDBUpdateOnlineNum_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgDBUpdateOnlineNum_default_instance_;
    new (ptr) ::MsgDBUpdateOnlineNum();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgDBUpdateOnlineNum_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgDBUpdateOnlineNum_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgDBUpdatePlayerInfo_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgDBUpdatePlayerInfo_default_instance_;
    new (ptr) ::MsgDBUpdatePlayerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgDBUpdatePlayerInfo_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgDBUpdatePlayerInfo_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgDBWriteScore_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgDBWriteScore_default_instance_;
    new (ptr) ::MsgDBWriteScore();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgDBWriteScore_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgDBWriteScore_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgDBWriteScoreResp_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgDBWriteScoreResp_default_instance_;
    new (ptr) ::MsgDBWriteScoreResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgDBWriteScoreResp_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgDBWriteScoreResp_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgGameServerUnRegister_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgGameServerUnRegister_default_instance_;
    new (ptr) ::MsgGameServerUnRegister();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgGameServerUnRegister_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgGameServerUnRegister_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgLoadCheatRate_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgLoadCheatRate_default_instance_;
    new (ptr) ::MsgLoadCheatRate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgLoadCheatRate_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgLoadCheatRate_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgLoginPlayerInfo_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgLoginPlayerInfo_default_instance_;
    new (ptr) ::MsgLoginPlayerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgLoginPlayerInfo_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgLoginPlayerInfo_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgPlayerAttribute_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgPlayerAttribute_default_instance_;
    new (ptr) ::MsgPlayerAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgPlayerAttribute_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgPlayerAttribute_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgRegisterChatServer_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgRegisterChatServer_default_instance_;
    new (ptr) ::MsgRegisterChatServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgRegisterChatServer_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgRegisterChatServer_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgRegisterGameServer_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgRegisterGameServer_default_instance_;
    new (ptr) ::MsgRegisterGameServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgRegisterGameServer_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgRegisterGameServer_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgRegisterServer_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgRegisterServer_default_instance_;
    new (ptr) ::MsgRegisterServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgRegisterServer_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgRegisterServer_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgRelayServerAddMail_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgRelayServerAddMail_default_instance_;
    new (ptr) ::MsgRelayServerAddMail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgRelayServerAddMail_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgRelayServerAddMail_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgRelayServerRecharge_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgRelayServerRecharge_default_instance_;
    new (ptr) ::MsgRelayServerRecharge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgRelayServerRecharge_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgRelayServerRecharge_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgRelayServerRegister_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgRelayServerRegister_default_instance_;
    new (ptr) ::MsgRelayServerRegister();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgRelayServerRegister_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgRelayServerRegister_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgSendPhoneCode_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgSendPhoneCode_default_instance_;
    new (ptr) ::MsgSendPhoneCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgSendPhoneCode_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgSendPhoneCode_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgStorageCode_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgStorageCode_default_instance_;
    new (ptr) ::MsgStorageCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgStorageCode_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgStorageCode_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgUpdateGameServerOnlineNum_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgUpdateGameServerOnlineNum_default_instance_;
    new (ptr) ::MsgUpdateGameServerOnlineNum();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgUpdateGameServerOnlineNum_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgUpdateGameServerOnlineNum_ServerInternalProto_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ServerInternalProto_2eproto[41];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ServerInternalProto_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ServerInternalProto_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ServerInternalProto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgRegisterServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgRegisterServer, ip_),
  PROTOBUF_FIELD_OFFSET(::MsgRegisterServer, port_),
  PROTOBUF_FIELD_OFFSET(::MsgRegisterServer, server_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgRegisterGameServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgRegisterGameServer, ip_),
  PROTOBUF_FIELD_OFFSET(::MsgRegisterGameServer, port_),
  PROTOBUF_FIELD_OFFSET(::MsgRegisterGameServer, server_id_),
  PROTOBUF_FIELD_OFFSET(::MsgRegisterGameServer, kind_id_),
  PROTOBUF_FIELD_OFFSET(::MsgRegisterGameServer, room_level_),
  PROTOBUF_FIELD_OFFSET(::MsgRegisterGameServer, limit_gold_),
  PROTOBUF_FIELD_OFFSET(::MsgRegisterGameServer, max_player_),
  PROTOBUF_FIELD_OFFSET(::MsgRegisterGameServer, room_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgRegisterChatServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgRegisterChatServer, ip_),
  PROTOBUF_FIELD_OFFSET(::MsgRegisterChatServer, port_),
  PROTOBUF_FIELD_OFFSET(::MsgRegisterChatServer, server_id_),
  PROTOBUF_FIELD_OFFSET(::MsgRegisterChatServer, max_player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgApplyRobot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgApplyRobot, server_id_),
  PROTOBUF_FIELD_OFFSET(::MsgApplyRobot, apply_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgApplyRobotResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgApplyRobotResp, robot_user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgCreateRobot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgCreateRobot, server_id_),
  PROTOBUF_FIELD_OFFSET(::MsgCreateRobot, generate_num_),
  PROTOBUF_FIELD_OFFSET(::MsgCreateRobot, client_socket_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgCreateRobotResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgCreateRobotResp, server_id_),
  PROTOBUF_FIELD_OFFSET(::MsgCreateRobotResp, user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgCreateRobotResp, client_socket_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgSendPhoneCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgSendPhoneCode, phone_),
  PROTOBUF_FIELD_OFFSET(::MsgSendPhoneCode, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgUpdateGameServerOnlineNum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgUpdateGameServerOnlineNum, server_id_),
  PROTOBUF_FIELD_OFFSET(::MsgUpdateGameServerOnlineNum, kind_id_),
  PROTOBUF_FIELD_OFFSET(::MsgUpdateGameServerOnlineNum, room_level_),
  PROTOBUF_FIELD_OFFSET(::MsgUpdateGameServerOnlineNum, online_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgGameServerUnRegister, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgGameServerUnRegister, server_id_),
  PROTOBUF_FIELD_OFFSET(::MsgGameServerUnRegister, kind_id_),
  PROTOBUF_FIELD_OFFSET(::MsgGameServerUnRegister, room_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgLoadCheatRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgLoadCheatRate, blood_score_),
  PROTOBUF_FIELD_OFFSET(::MsgLoadCheatRate, cheat_rate_),
  PROTOBUF_FIELD_OFFSET(::MsgLoadCheatRate, fail_min_line_score_),
  PROTOBUF_FIELD_OFFSET(::MsgLoadCheatRate, fail_max_line_score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgRelayServerRegister, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgRelayServerRegister, server_id_),
  PROTOBUF_FIELD_OFFSET(::MsgRelayServerRegister, server_port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgRelayServerAddMail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgRelayServerAddMail, to_user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgRelayServerAddMail, title_),
  PROTOBUF_FIELD_OFFSET(::MsgRelayServerAddMail, content_),
  PROTOBUF_FIELD_OFFSET(::MsgRelayServerAddMail, num_),
  PROTOBUF_FIELD_OFFSET(::MsgRelayServerAddMail, type_),
  PROTOBUF_FIELD_OFFSET(::MsgRelayServerAddMail, from_user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgRelayServerRecharge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgRelayServerRecharge, user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgRelayServerRecharge, gold_),
  PROTOBUF_FIELD_OFFSET(::MsgRelayServerRecharge, game_coin_),
  PROTOBUF_FIELD_OFFSET(::MsgRelayServerRecharge, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgDBUpdateOnlineNum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgDBUpdateOnlineNum, server_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBUpdateOnlineNum, port_),
  PROTOBUF_FIELD_OFFSET(::MsgDBUpdateOnlineNum, online_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgDBRegisterLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgDBRegisterLogin, server_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBRegisterLogin, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgPlayerAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgPlayerAttribute, user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerAttribute, beautiful_id_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerAttribute, user_type_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerAttribute, phone_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerAttribute, coin_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerAttribute, bank_coin_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerAttribute, head_id_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerAttribute, nickname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgLoginPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgLoginPlayerInfo, res_code_),
  PROTOBUF_FIELD_OFFSET(::MsgLoginPlayerInfo, user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgLoginPlayerInfo, beautiful_id_),
  PROTOBUF_FIELD_OFFSET(::MsgLoginPlayerInfo, account_),
  PROTOBUF_FIELD_OFFSET(::MsgLoginPlayerInfo, nickname_),
  PROTOBUF_FIELD_OFFSET(::MsgLoginPlayerInfo, avatar_),
  PROTOBUF_FIELD_OFFSET(::MsgLoginPlayerInfo, first_recharge_),
  PROTOBUF_FIELD_OFFSET(::MsgLoginPlayerInfo, user_type_),
  PROTOBUF_FIELD_OFFSET(::MsgLoginPlayerInfo, is_drain_),
  PROTOBUF_FIELD_OFFSET(::MsgLoginPlayerInfo, coin_),
  PROTOBUF_FIELD_OFFSET(::MsgLoginPlayerInfo, phone_num_),
  PROTOBUF_FIELD_OFFSET(::MsgLoginPlayerInfo, password_),
  PROTOBUF_FIELD_OFFSET(::MsgLoginPlayerInfo, vip_level_),
  PROTOBUF_FIELD_OFFSET(::MsgLoginPlayerInfo, avatar_frame_),
  PROTOBUF_FIELD_OFFSET(::MsgLoginPlayerInfo, channel_id_),
  PROTOBUF_FIELD_OFFSET(::MsgLoginPlayerInfo, bank_password_),
  PROTOBUF_FIELD_OFFSET(::MsgLoginPlayerInfo, bank_gold_),
  PROTOBUF_FIELD_OFFSET(::MsgLoginPlayerInfo, invite_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgDBLoginOut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgDBLoginOut, user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBLoginOut, online_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgDBUpdatePlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgDBUpdatePlayerInfo, user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBUpdatePlayerInfo, beautiful_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBUpdatePlayerInfo, user_type_),
  PROTOBUF_FIELD_OFFSET(::MsgDBUpdatePlayerInfo, phone_),
  PROTOBUF_FIELD_OFFSET(::MsgDBUpdatePlayerInfo, nickname_),
  PROTOBUF_FIELD_OFFSET(::MsgDBUpdatePlayerInfo, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgDBMailData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgDBMailData, user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBMailData, mail_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgDBMail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgDBMail, mail_guid_),
  PROTOBUF_FIELD_OFFSET(::MsgDBMail, mail_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBMail, sender_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBMail, recver_beautiful_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBMail, mail_title_),
  PROTOBUF_FIELD_OFFSET(::MsgDBMail, mail_content_),
  PROTOBUF_FIELD_OFFSET(::MsgDBMail, gold_),
  PROTOBUF_FIELD_OFFSET(::MsgDBMail, send_time_),
  PROTOBUF_FIELD_OFFSET(::MsgDBMail, is_custom_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgDBRegisterGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgDBRegisterGame, server_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBRegisterGame, server_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgDBLoadRobot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgDBLoadRobot, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgDBGamePlayerLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgDBGamePlayerLogin, user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBGamePlayerLogin, password_),
  PROTOBUF_FIELD_OFFSET(::MsgDBGamePlayerLogin, ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgDBPlayerReconnectData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgDBPlayerReconnectData, user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBPlayerReconnectData, server_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBPlayerReconnectData, multiple_),
  PROTOBUF_FIELD_OFFSET(::MsgDBPlayerReconnectData, score_bonus_),
  PROTOBUF_FIELD_OFFSET(::MsgDBPlayerReconnectData, left_free_game_cnt_),
  PROTOBUF_FIELD_OFFSET(::MsgDBPlayerReconnectData, small_game_type_),
  PROTOBUF_FIELD_OFFSET(::MsgDBPlayerReconnectData, small_game_fail_cnt_),
  PROTOBUF_FIELD_OFFSET(::MsgDBPlayerReconnectData, param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgDBGamePlayerLoginResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgDBGamePlayerLoginResp, res_code_),
  PROTOBUF_FIELD_OFFSET(::MsgDBGamePlayerLoginResp, user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBGamePlayerLoginResp, beautiful_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBGamePlayerLoginResp, nickname_),
  PROTOBUF_FIELD_OFFSET(::MsgDBGamePlayerLoginResp, avatar_),
  PROTOBUF_FIELD_OFFSET(::MsgDBGamePlayerLoginResp, coin_),
  PROTOBUF_FIELD_OFFSET(::MsgDBGamePlayerLoginResp, password_),
  PROTOBUF_FIELD_OFFSET(::MsgDBGamePlayerLoginResp, cheat_rate_),
  PROTOBUF_FIELD_OFFSET(::MsgDBGamePlayerLoginResp, vip_),
  PROTOBUF_FIELD_OFFSET(::MsgDBGamePlayerLoginResp, reconnect_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgDBWriteScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgDBWriteScore, user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBWriteScore, bet_),
  PROTOBUF_FIELD_OFFSET(::MsgDBWriteScore, score_),
  PROTOBUF_FIELD_OFFSET(::MsgDBWriteScore, is_up_rank_),
  PROTOBUF_FIELD_OFFSET(::MsgDBWriteScore, game_details_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgDBWriteScoreResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgDBWriteScoreResp, user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBWriteScoreResp, player_cheat_rate_),
  PROTOBUF_FIELD_OFFSET(::MsgDBWriteScoreResp, player_cheat_score_),
  PROTOBUF_FIELD_OFFSET(::MsgDBWriteScoreResp, system_cheat_rate_),
  PROTOBUF_FIELD_OFFSET(::MsgDBWriteScoreResp, system_cheat_score_),
  PROTOBUF_FIELD_OFFSET(::MsgDBWriteScoreResp, system_blood_min_line_),
  PROTOBUF_FIELD_OFFSET(::MsgDBWriteScoreResp, system_blood_max_line_),
  PROTOBUF_FIELD_OFFSET(::MsgDBWriteScoreResp, player_score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgDBFingerGuessWriteScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgDBFingerGuessWriteScore, banker_user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBFingerGuessWriteScore, player_user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBFingerGuessWriteScore, result_),
  PROTOBUF_FIELD_OFFSET(::MsgDBFingerGuessWriteScore, bet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgDBFingerGuessWriteScoreResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgDBFingerGuessWriteScoreResp, win_user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBFingerGuessWriteScoreResp, lose_user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBFingerGuessWriteScoreResp, win_user_gold_),
  PROTOBUF_FIELD_OFFSET(::MsgDBFingerGuessWriteScoreResp, lose_user_gold_),
  PROTOBUF_FIELD_OFFSET(::MsgDBFingerGuessWriteScoreResp, time_),
  PROTOBUF_FIELD_OFFSET(::MsgDBFingerGuessWriteScoreResp, result_),
  PROTOBUF_FIELD_OFFSET(::MsgDBFingerGuessWriteScoreResp, bet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgDBFingerGuessQueryRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgDBFingerGuessQueryRecord, page_),
  PROTOBUF_FIELD_OFFSET(::MsgDBFingerGuessQueryRecord, num_),
  PROTOBUF_FIELD_OFFSET(::MsgDBFingerGuessQueryRecord, type_),
  PROTOBUF_FIELD_OFFSET(::MsgDBFingerGuessQueryRecord, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgDBModifyAvatar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgDBModifyAvatar, user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBModifyAvatar, avatar_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgDBUpdateJackpot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgDBUpdateJackpot, server_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBUpdateJackpot, jackpot_),
  PROTOBUF_FIELD_OFFSET(::MsgDBUpdateJackpot, fake_jackpot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgDBBankChangePassword, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgDBBankChangePassword, user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBBankChangePassword, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgDBBankOperate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgDBBankOperate, user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBBankOperate, gold_),
  PROTOBUF_FIELD_OFFSET(::MsgDBBankOperate, operate_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgDBBankTakeOut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgDBBankTakeOut, ret_value_),
  PROTOBUF_FIELD_OFFSET(::MsgDBBankTakeOut, user_gold_),
  PROTOBUF_FIELD_OFFSET(::MsgDBBankTakeOut, bank_gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgDBBankTransfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgDBBankTransfer, from_user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBBankTransfer, recv_user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBBankTransfer, transfer_gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgStorageCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgStorageCode, user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgStorageCode, phone_),
  PROTOBUF_FIELD_OFFSET(::MsgStorageCode, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgDBBindPhone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgDBBindPhone, user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBBindPhone, invite_code_),
  PROTOBUF_FIELD_OFFSET(::MsgDBBindPhone, phone_),
  PROTOBUF_FIELD_OFFSET(::MsgDBBindPhone, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgDBBindPhoneRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgDBBindPhoneRes, res_code_),
  PROTOBUF_FIELD_OFFSET(::MsgDBBindPhoneRes, phone_),
  PROTOBUF_FIELD_OFFSET(::MsgDBBindPhoneRes, password_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::MsgRegisterServer)},
  { 8, -1, sizeof(::MsgRegisterGameServer)},
  { 21, -1, sizeof(::MsgRegisterChatServer)},
  { 30, -1, sizeof(::MsgApplyRobot)},
  { 37, -1, sizeof(::MsgApplyRobotResp)},
  { 43, -1, sizeof(::MsgCreateRobot)},
  { 51, -1, sizeof(::MsgCreateRobotResp)},
  { 59, -1, sizeof(::MsgSendPhoneCode)},
  { 66, -1, sizeof(::MsgUpdateGameServerOnlineNum)},
  { 75, -1, sizeof(::MsgGameServerUnRegister)},
  { 83, -1, sizeof(::MsgLoadCheatRate)},
  { 92, -1, sizeof(::MsgRelayServerRegister)},
  { 99, -1, sizeof(::MsgRelayServerAddMail)},
  { 110, -1, sizeof(::MsgRelayServerRecharge)},
  { 119, -1, sizeof(::MsgDBUpdateOnlineNum)},
  { 127, -1, sizeof(::MsgDBRegisterLogin)},
  { 134, -1, sizeof(::MsgPlayerAttribute)},
  { 147, -1, sizeof(::MsgLoginPlayerInfo)},
  { 170, -1, sizeof(::MsgDBLoginOut)},
  { 177, -1, sizeof(::MsgDBUpdatePlayerInfo)},
  { 188, -1, sizeof(::MsgDBMailData)},
  { 195, -1, sizeof(::MsgDBMail)},
  { 209, -1, sizeof(::MsgDBRegisterGame)},
  { 216, -1, sizeof(::MsgDBLoadRobot)},
  { 222, -1, sizeof(::MsgDBGamePlayerLogin)},
  { 230, -1, sizeof(::MsgDBPlayerReconnectData)},
  { 243, -1, sizeof(::MsgDBGamePlayerLoginResp)},
  { 258, -1, sizeof(::MsgDBWriteScore)},
  { 268, -1, sizeof(::MsgDBWriteScoreResp)},
  { 281, -1, sizeof(::MsgDBFingerGuessWriteScore)},
  { 290, -1, sizeof(::MsgDBFingerGuessWriteScoreResp)},
  { 302, -1, sizeof(::MsgDBFingerGuessQueryRecord)},
  { 311, -1, sizeof(::MsgDBModifyAvatar)},
  { 318, -1, sizeof(::MsgDBUpdateJackpot)},
  { 326, -1, sizeof(::MsgDBBankChangePassword)},
  { 333, -1, sizeof(::MsgDBBankOperate)},
  { 341, -1, sizeof(::MsgDBBankTakeOut)},
  { 349, -1, sizeof(::MsgDBBankTransfer)},
  { 357, -1, sizeof(::MsgStorageCode)},
  { 365, -1, sizeof(::MsgDBBindPhone)},
  { 374, -1, sizeof(::MsgDBBindPhoneRes)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgRegisterServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgRegisterGameServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgRegisterChatServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgApplyRobot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgApplyRobotResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgCreateRobot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgCreateRobotResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgSendPhoneCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgUpdateGameServerOnlineNum_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgGameServerUnRegister_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgLoadCheatRate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgRelayServerRegister_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgRelayServerAddMail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgRelayServerRecharge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgDBUpdateOnlineNum_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgDBRegisterLogin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgPlayerAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgLoginPlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgDBLoginOut_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgDBUpdatePlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgDBMailData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgDBMail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgDBRegisterGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgDBLoadRobot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgDBGamePlayerLogin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgDBPlayerReconnectData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgDBGamePlayerLoginResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgDBWriteScore_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgDBWriteScoreResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgDBFingerGuessWriteScore_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgDBFingerGuessWriteScoreResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgDBFingerGuessQueryRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgDBModifyAvatar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgDBUpdateJackpot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgDBBankChangePassword_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgDBBankOperate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgDBBankTakeOut_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgDBBankTransfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgStorageCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgDBBindPhone_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgDBBindPhoneRes_default_instance_),
};

const char descriptor_table_protodef_ServerInternalProto_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031ServerInternalProto.proto\"@\n\021MsgRegist"
  "erServer\022\n\n\002ip\030\001 \001(\005\022\014\n\004port\030\002 \001(\005\022\021\n\tse"
  "rver_id\030\003 \001(\005\"\244\001\n\025MsgRegisterGameServer\022"
  "\n\n\002ip\030\001 \001(\005\022\014\n\004port\030\002 \001(\005\022\021\n\tserver_id\030\003"
  " \001(\005\022\017\n\007kind_id\030\004 \001(\005\022\022\n\nroom_level\030\005 \001("
  "\005\022\022\n\nlimit_gold\030\006 \001(\005\022\022\n\nmax_player\030\007 \001("
  "\005\022\021\n\troom_name\030\010 \001(\t\"X\n\025MsgRegisterChatS"
  "erver\022\n\n\002ip\030\001 \001(\005\022\014\n\004port\030\002 \001(\005\022\021\n\tserve"
  "r_id\030\003 \001(\005\022\022\n\nmax_player\030\004 \001(\005\"5\n\rMsgApp"
  "lyRobot\022\021\n\tserver_id\030\001 \001(\005\022\021\n\tapply_num\030"
  "\002 \001(\005\"*\n\021MsgApplyRobotResp\022\025\n\rrobot_user"
  "_id\030\001 \003(\005\"S\n\016MsgCreateRobot\022\021\n\tserver_id"
  "\030\001 \001(\005\022\024\n\014generate_num\030\002 \001(\005\022\030\n\020client_s"
  "ocket_id\030\003 \001(\005\"R\n\022MsgCreateRobotResp\022\021\n\t"
  "server_id\030\001 \001(\005\022\017\n\007user_id\030\002 \003(\005\022\030\n\020clie"
  "nt_socket_id\030\003 \001(\005\"/\n\020MsgSendPhoneCode\022\r"
  "\n\005phone\030\001 \001(\t\022\014\n\004code\030\002 \001(\005\"j\n\034MsgUpdate"
  "GameServerOnlineNum\022\021\n\tserver_id\030\001 \001(\005\022\017"
  "\n\007kind_id\030\002 \001(\005\022\022\n\nroom_level\030\003 \001(\005\022\022\n\no"
  "nline_num\030\004 \001(\005\"Q\n\027MsgGameServerUnRegist"
  "er\022\021\n\tserver_id\030\001 \001(\005\022\017\n\007kind_id\030\002 \001(\005\022\022"
  "\n\nroom_level\030\003 \001(\005\"u\n\020MsgLoadCheatRate\022\023"
  "\n\013blood_score\030\001 \001(\003\022\022\n\ncheat_rate\030\002 \001(\005\022"
  "\033\n\023fail_min_line_score\030\003 \001(\003\022\033\n\023fail_max"
  "_line_score\030\004 \001(\003\"@\n\026MsgRelayServerRegis"
  "ter\022\021\n\tserver_id\030\001 \001(\005\022\023\n\013server_port\030\002 "
  "\001(\005\"|\n\025MsgRelayServerAddMail\022\022\n\nto_user_"
  "id\030\001 \001(\005\022\r\n\005title\030\002 \001(\t\022\017\n\007content\030\003 \001(\t"
  "\022\013\n\003num\030\004 \001(\003\022\014\n\004type\030\005 \001(\005\022\024\n\014from_user"
  "_id\030\006 \001(\005\"X\n\026MsgRelayServerRecharge\022\017\n\007u"
  "ser_id\030\001 \001(\005\022\014\n\004gold\030\002 \001(\005\022\021\n\tgame_coin\030"
  "\003 \001(\005\022\014\n\004type\030\004 \001(\005\"K\n\024MsgDBUpdateOnline"
  "Num\022\021\n\tserver_id\030\001 \001(\005\022\014\n\004port\030\002 \001(\005\022\022\n\n"
  "online_num\030\003 \001(\005\"5\n\022MsgDBRegisterLogin\022\021"
  "\n\tserver_id\030\001 \001(\005\022\014\n\004port\030\002 \001(\005\"\241\001\n\022MsgP"
  "layerAttribute\022\017\n\007user_id\030\001 \001(\005\022\024\n\014beaut"
  "iful_id\030\002 \001(\005\022\021\n\tuser_type\030\003 \001(\005\022\r\n\005phon"
  "e\030\004 \001(\t\022\014\n\004coin\030\005 \001(\003\022\021\n\tbank_coin\030\006 \001(\003"
  "\022\017\n\007head_id\030\007 \001(\005\022\020\n\010nickname\030\010 \001(\t\"\354\002\n\022"
  "MsgLoginPlayerInfo\022\020\n\010res_code\030\001 \001(\005\022\017\n\007"
  "user_id\030\002 \001(\005\022\024\n\014beautiful_id\030\003 \001(\005\022\017\n\007a"
  "ccount\030\004 \001(\t\022\020\n\010nickname\030\005 \001(\t\022\016\n\006avatar"
  "\030\006 \001(\t\022\026\n\016first_recharge\030\007 \001(\010\022\021\n\tuser_t"
  "ype\030\010 \001(\005\022\020\n\010is_drain\030\t \001(\010\022\014\n\004coin\030\n \001("
  "\004\022\021\n\tphone_num\030\013 \001(\t\022\020\n\010password\030\014 \001(\t\022\021"
  "\n\tvip_level\030\r \001(\005\022\024\n\014avatar_frame\030\016 \001(\005\022"
  "\022\n\nchannel_id\030\017 \001(\005\022\025\n\rbank_password\030\020 \001"
  "(\t\022\021\n\tbank_gold\030\021 \001(\004\022\023\n\013invite_code\030\022 \001"
  "(\t\"5\n\rMsgDBLoginOut\022\017\n\007user_id\030\001 \001(\005\022\023\n\013"
  "online_time\030\002 \001(\005\"\204\001\n\025MsgDBUpdatePlayerI"
  "nfo\022\017\n\007user_id\030\001 \001(\005\022\024\n\014beautiful_id\030\002 \001"
  "(\005\022\021\n\tuser_type\030\003 \001(\005\022\r\n\005phone\030\004 \001(\t\022\020\n\010"
  "nickname\030\005 \001(\t\022\020\n\010password\030\006 \001(\t\"1\n\rMsgD"
  "BMailData\022\017\n\007user_id\030\001 \001(\005\022\017\n\007mail_id\030\002 "
  "\001(\005\"\275\001\n\tMsgDBMail\022\021\n\tmail_guid\030\001 \001(\005\022\017\n\007"
  "mail_id\030\002 \001(\005\022\021\n\tsender_id\030\003 \001(\005\022\033\n\023recv"
  "er_beautiful_id\030\004 \001(\005\022\022\n\nmail_title\030\005 \001("
  "\t\022\024\n\014mail_content\030\006 \001(\t\022\014\n\004gold\030\007 \001(\003\022\021\n"
  "\tsend_time\030\010 \001(\003\022\021\n\tis_custom\030\t \001(\005\";\n\021M"
  "sgDBRegisterGame\022\021\n\tserver_id\030\001 \001(\005\022\023\n\013s"
  "erver_name\030\002 \001(\t\"!\n\016MsgDBLoadRobot\022\017\n\007us"
  "er_id\030\001 \003(\005\"E\n\024MsgDBGamePlayerLogin\022\017\n\007u"
  "ser_id\030\001 \001(\005\022\020\n\010password\030\002 \001(\t\022\n\n\002ip\030\003 \001"
  "(\005\"\306\001\n\030MsgDBPlayerReconnectData\022\017\n\007user_"
  "id\030\001 \001(\005\022\021\n\tserver_id\030\002 \001(\005\022\020\n\010multiple\030"
  "\003 \001(\005\022\023\n\013score_bonus\030\004 \001(\005\022\032\n\022left_free_"
  "game_cnt\030\005 \001(\005\022\027\n\017small_game_type\030\006 \001(\005\022"
  "\033\n\023small_game_fail_cnt\030\007 \001(\005\022\r\n\005param\030\010 "
  "\003(\005\"\351\001\n\030MsgDBGamePlayerLoginResp\022\020\n\010res_"
  "code\030\001 \001(\005\022\017\n\007user_id\030\002 \001(\005\022\024\n\014beautiful"
  "_id\030\003 \001(\005\022\020\n\010nickname\030\004 \001(\t\022\016\n\006avatar\030\005 "
  "\001(\t\022\014\n\004coin\030\006 \001(\004\022\020\n\010password\030\007 \001(\t\022\022\n\nc"
  "heat_rate\030\010 \001(\005\022\013\n\003vip\030\t \001(\010\0221\n\016reconnec"
  "t_data\030\n \001(\0132\031.MsgDBPlayerReconnectData\""
  "h\n\017MsgDBWriteScore\022\017\n\007user_id\030\001 \001(\005\022\013\n\003b"
  "et\030\002 \001(\005\022\r\n\005score\030\003 \001(\003\022\022\n\nis_up_rank\030\004 "
  "\001(\005\022\024\n\014game_details\030\005 \001(\t\"\350\001\n\023MsgDBWrite"
  "ScoreResp\022\017\n\007user_id\030\001 \001(\005\022\031\n\021player_che"
  "at_rate\030\002 \001(\005\022\032\n\022player_cheat_score\030\003 \001("
  "\005\022\031\n\021system_cheat_rate\030\004 \001(\005\022\032\n\022system_c"
  "heat_score\030\005 \001(\003\022\035\n\025system_blood_min_lin"
  "e\030\006 \001(\003\022\035\n\025system_blood_max_line\030\007 \001(\003\022\024"
  "\n\014player_score\030\010 \001(\003\"i\n\032MsgDBFingerGuess"
  "WriteScore\022\026\n\016banker_user_id\030\001 \001(\005\022\026\n\016pl"
  "ayer_user_id\030\002 \001(\005\022\016\n\006result\030\003 \001(\005\022\013\n\003be"
  "t\030\004 \001(\003\"\245\001\n\036MsgDBFingerGuessWriteScoreRe"
  "sp\022\023\n\013win_user_id\030\001 \001(\005\022\024\n\014lose_user_id\030"
  "\002 \001(\005\022\025\n\rwin_user_gold\030\003 \001(\003\022\026\n\016lose_use"
  "r_gold\030\004 \001(\003\022\014\n\004time\030\005 \001(\005\022\016\n\006result\030\006 \001"
  "(\005\022\013\n\003bet\030\007 \001(\003\"W\n\033MsgDBFingerGuessQuery"
  "Record\022\014\n\004page\030\001 \001(\005\022\013\n\003num\030\002 \001(\005\022\014\n\004typ"
  "e\030\003 \001(\005\022\017\n\007user_id\030\004 \001(\005\"4\n\021MsgDBModifyA"
  "vatar\022\017\n\007user_id\030\001 \001(\005\022\016\n\006avatar\030\002 \001(\t\"N"
  "\n\022MsgDBUpdateJackpot\022\021\n\tserver_id\030\001 \001(\005\022"
  "\017\n\007jackpot\030\002 \001(\003\022\024\n\014fake_jackpot\030\003 \001(\003\"<"
  "\n\027MsgDBBankChangePassword\022\017\n\007user_id\030\001 \001"
  "(\005\022\020\n\010Password\030\002 \001(\t\"G\n\020MsgDBBankOperate"
  "\022\017\n\007user_id\030\001 \001(\005\022\014\n\004gold\030\002 \001(\003\022\024\n\014opera"
  "te_type\030\003 \001(\005\"K\n\020MsgDBBankTakeOut\022\021\n\tret"
  "_value\030\001 \001(\005\022\021\n\tuser_gold\030\002 \001(\003\022\021\n\tbank_"
  "gold\030\003 \001(\003\"V\n\021MsgDBBankTransfer\022\024\n\014from_"
  "user_id\030\001 \001(\005\022\024\n\014recv_user_id\030\002 \001(\005\022\025\n\rt"
  "ransfer_gold\030\003 \001(\003\">\n\016MsgStorageCode\022\017\n\007"
  "user_id\030\001 \001(\005\022\r\n\005phone\030\002 \001(\t\022\014\n\004code\030\003 \001"
  "(\005\"W\n\016MsgDBBindPhone\022\017\n\007user_id\030\001 \001(\005\022\023\n"
  "\013invite_code\030\002 \001(\t\022\r\n\005phone\030\003 \001(\t\022\020\n\010pas"
  "sword\030\004 \001(\t\"F\n\021MsgDBBindPhoneRes\022\020\n\010res_"
  "code\030\001 \001(\005\022\r\n\005phone\030\002 \001(\t\022\020\n\010password\030\003 "
  "\001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ServerInternalProto_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ServerInternalProto_2eproto_sccs[41] = {
  &scc_info_MsgApplyRobot_ServerInternalProto_2eproto.base,
  &scc_info_MsgApplyRobotResp_ServerInternalProto_2eproto.base,
  &scc_info_MsgCreateRobot_ServerInternalProto_2eproto.base,
  &scc_info_MsgCreateRobotResp_ServerInternalProto_2eproto.base,
  &scc_info_MsgDBBankChangePassword_ServerInternalProto_2eproto.base,
  &scc_info_MsgDBBankOperate_ServerInternalProto_2eproto.base,
  &scc_info_MsgDBBankTakeOut_ServerInternalProto_2eproto.base,
  &scc_info_MsgDBBankTransfer_ServerInternalProto_2eproto.base,
  &scc_info_MsgDBBindPhone_ServerInternalProto_2eproto.base,
  &scc_info_MsgDBBindPhoneRes_ServerInternalProto_2eproto.base,
  &scc_info_MsgDBFingerGuessQueryRecord_ServerInternalProto_2eproto.base,
  &scc_info_MsgDBFingerGuessWriteScore_ServerInternalProto_2eproto.base,
  &scc_info_MsgDBFingerGuessWriteScoreResp_ServerInternalProto_2eproto.base,
  &scc_info_MsgDBGamePlayerLogin_ServerInternalProto_2eproto.base,
  &scc_info_MsgDBGamePlayerLoginResp_ServerInternalProto_2eproto.base,
  &scc_info_MsgDBLoadRobot_ServerInternalProto_2eproto.base,
  &scc_info_MsgDBLoginOut_ServerInternalProto_2eproto.base,
  &scc_info_MsgDBMail_ServerInternalProto_2eproto.base,
  &scc_info_MsgDBMailData_ServerInternalProto_2eproto.base,
  &scc_info_MsgDBModifyAvatar_ServerInternalProto_2eproto.base,
  &scc_info_MsgDBPlayerReconnectData_ServerInternalProto_2eproto.base,
  &scc_info_MsgDBRegisterGame_ServerInternalProto_2eproto.base,
  &scc_info_MsgDBRegisterLogin_ServerInternalProto_2eproto.base,
  &scc_info_MsgDBUpdateJackpot_ServerInternalProto_2eproto.base,
  &scc_info_MsgDBUpdateOnlineNum_ServerInternalProto_2eproto.base,
  &scc_info_MsgDBUpdatePlayerInfo_ServerInternalProto_2eproto.base,
  &scc_info_MsgDBWriteScore_ServerInternalProto_2eproto.base,
  &scc_info_MsgDBWriteScoreResp_ServerInternalProto_2eproto.base,
  &scc_info_MsgGameServerUnRegister_ServerInternalProto_2eproto.base,
  &scc_info_MsgLoadCheatRate_ServerInternalProto_2eproto.base,
  &scc_info_MsgLoginPlayerInfo_ServerInternalProto_2eproto.base,
  &scc_info_MsgPlayerAttribute_ServerInternalProto_2eproto.base,
  &scc_info_MsgRegisterChatServer_ServerInternalProto_2eproto.base,
  &scc_info_MsgRegisterGameServer_ServerInternalProto_2eproto.base,
  &scc_info_MsgRegisterServer_ServerInternalProto_2eproto.base,
  &scc_info_MsgRelayServerAddMail_ServerInternalProto_2eproto.base,
  &scc_info_MsgRelayServerRecharge_ServerInternalProto_2eproto.base,
  &scc_info_MsgRelayServerRegister_ServerInternalProto_2eproto.base,
  &scc_info_MsgSendPhoneCode_ServerInternalProto_2eproto.base,
  &scc_info_MsgStorageCode_ServerInternalProto_2eproto.base,
  &scc_info_MsgUpdateGameServerOnlineNum_ServerInternalProto_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ServerInternalProto_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ServerInternalProto_2eproto = {
  false, false, descriptor_table_protodef_ServerInternalProto_2eproto, "ServerInternalProto.proto", 4331,
  &descriptor_table_ServerInternalProto_2eproto_once, descriptor_table_ServerInternalProto_2eproto_sccs, descriptor_table_ServerInternalProto_2eproto_deps, 41, 0,
  schemas, file_default_instances, TableStruct_ServerInternalProto_2eproto::offsets,
  file_level_metadata_ServerInternalProto_2eproto, 41, file_level_enum_descriptors_ServerInternalProto_2eproto, file_level_service_descriptors_ServerInternalProto_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ServerInternalProto_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ServerInternalProto_2eproto)), true);

// ===================================================================

class MsgRegisterServer::_Internal {
 public:
};

MsgRegisterServer::MsgRegisterServer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgRegisterServer)
}
MsgRegisterServer::MsgRegisterServer(const MsgRegisterServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ip_, &from.ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_id_) -
    reinterpret_cast<char*>(&ip_)) + sizeof(server_id_));
  // @@protoc_insertion_point(copy_constructor:MsgRegisterServer)
}

void MsgRegisterServer::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ip_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&server_id_) -
      reinterpret_cast<char*>(&ip_)) + sizeof(server_id_));
}

MsgRegisterServer::~MsgRegisterServer() {
  // @@protoc_insertion_point(destructor:MsgRegisterServer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgRegisterServer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgRegisterServer::ArenaDtor(void* object) {
  MsgRegisterServer* _this = reinterpret_cast< MsgRegisterServer* >(object);
  (void)_this;
}
void MsgRegisterServer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgRegisterServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgRegisterServer& MsgRegisterServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgRegisterServer_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgRegisterServer::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgRegisterServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_id_) -
      reinterpret_cast<char*>(&ip_)) + sizeof(server_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgRegisterServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 server_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgRegisterServer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRegisterServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ip = 1;
  if (this->ip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ip(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  // int32 server_id = 3;
  if (this->server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_server_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRegisterServer)
  return target;
}

size_t MsgRegisterServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgRegisterServer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ip = 1;
  if (this->ip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ip());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  // int32 server_id = 3;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgRegisterServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgRegisterServer)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgRegisterServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgRegisterServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgRegisterServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgRegisterServer)
    MergeFrom(*source);
  }
}

void MsgRegisterServer::MergeFrom(const MsgRegisterServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgRegisterServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip() != 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
}

void MsgRegisterServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgRegisterServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRegisterServer::CopyFrom(const MsgRegisterServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgRegisterServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRegisterServer::IsInitialized() const {
  return true;
}

void MsgRegisterServer::InternalSwap(MsgRegisterServer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgRegisterServer, server_id_)
      + sizeof(MsgRegisterServer::server_id_)
      - PROTOBUF_FIELD_OFFSET(MsgRegisterServer, ip_)>(
          reinterpret_cast<char*>(&ip_),
          reinterpret_cast<char*>(&other->ip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgRegisterServer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgRegisterGameServer::_Internal {
 public:
};

MsgRegisterGameServer::MsgRegisterGameServer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgRegisterGameServer)
}
MsgRegisterGameServer::MsgRegisterGameServer(const MsgRegisterGameServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  room_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_room_name().empty()) {
    room_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_room_name(), 
      GetArena());
  }
  ::memcpy(&ip_, &from.ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_player_) -
    reinterpret_cast<char*>(&ip_)) + sizeof(max_player_));
  // @@protoc_insertion_point(copy_constructor:MsgRegisterGameServer)
}

void MsgRegisterGameServer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgRegisterGameServer_ServerInternalProto_2eproto.base);
  room_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ip_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&max_player_) -
      reinterpret_cast<char*>(&ip_)) + sizeof(max_player_));
}

MsgRegisterGameServer::~MsgRegisterGameServer() {
  // @@protoc_insertion_point(destructor:MsgRegisterGameServer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgRegisterGameServer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  room_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgRegisterGameServer::ArenaDtor(void* object) {
  MsgRegisterGameServer* _this = reinterpret_cast< MsgRegisterGameServer* >(object);
  (void)_this;
}
void MsgRegisterGameServer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgRegisterGameServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgRegisterGameServer& MsgRegisterGameServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgRegisterGameServer_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgRegisterGameServer::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgRegisterGameServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_name_.ClearToEmpty();
  ::memset(&ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_player_) -
      reinterpret_cast<char*>(&ip_)) + sizeof(max_player_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgRegisterGameServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 server_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 kind_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          kind_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 room_level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          room_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 limit_gold = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          limit_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_player = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          max_player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string room_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_room_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgRegisterGameServer.room_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgRegisterGameServer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRegisterGameServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ip = 1;
  if (this->ip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ip(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  // int32 server_id = 3;
  if (this->server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_server_id(), target);
  }

  // int32 kind_id = 4;
  if (this->kind_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_kind_id(), target);
  }

  // int32 room_level = 5;
  if (this->room_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_room_level(), target);
  }

  // int32 limit_gold = 6;
  if (this->limit_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_limit_gold(), target);
  }

  // int32 max_player = 7;
  if (this->max_player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_max_player(), target);
  }

  // string room_name = 8;
  if (this->room_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_name().data(), static_cast<int>(this->_internal_room_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgRegisterGameServer.room_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_room_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRegisterGameServer)
  return target;
}

size_t MsgRegisterGameServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgRegisterGameServer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room_name = 8;
  if (this->room_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_name());
  }

  // int32 ip = 1;
  if (this->ip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ip());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  // int32 server_id = 3;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_id());
  }

  // int32 kind_id = 4;
  if (this->kind_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_kind_id());
  }

  // int32 room_level = 5;
  if (this->room_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_room_level());
  }

  // int32 limit_gold = 6;
  if (this->limit_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_limit_gold());
  }

  // int32 max_player = 7;
  if (this->max_player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_player());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgRegisterGameServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgRegisterGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgRegisterGameServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgRegisterGameServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgRegisterGameServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgRegisterGameServer)
    MergeFrom(*source);
  }
}

void MsgRegisterGameServer::MergeFrom(const MsgRegisterGameServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgRegisterGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.room_name().size() > 0) {
    _internal_set_room_name(from._internal_room_name());
  }
  if (from.ip() != 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from.kind_id() != 0) {
    _internal_set_kind_id(from._internal_kind_id());
  }
  if (from.room_level() != 0) {
    _internal_set_room_level(from._internal_room_level());
  }
  if (from.limit_gold() != 0) {
    _internal_set_limit_gold(from._internal_limit_gold());
  }
  if (from.max_player() != 0) {
    _internal_set_max_player(from._internal_max_player());
  }
}

void MsgRegisterGameServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgRegisterGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRegisterGameServer::CopyFrom(const MsgRegisterGameServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgRegisterGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRegisterGameServer::IsInitialized() const {
  return true;
}

void MsgRegisterGameServer::InternalSwap(MsgRegisterGameServer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  room_name_.Swap(&other->room_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgRegisterGameServer, max_player_)
      + sizeof(MsgRegisterGameServer::max_player_)
      - PROTOBUF_FIELD_OFFSET(MsgRegisterGameServer, ip_)>(
          reinterpret_cast<char*>(&ip_),
          reinterpret_cast<char*>(&other->ip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgRegisterGameServer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgRegisterChatServer::_Internal {
 public:
};

MsgRegisterChatServer::MsgRegisterChatServer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgRegisterChatServer)
}
MsgRegisterChatServer::MsgRegisterChatServer(const MsgRegisterChatServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ip_, &from.ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_player_) -
    reinterpret_cast<char*>(&ip_)) + sizeof(max_player_));
  // @@protoc_insertion_point(copy_constructor:MsgRegisterChatServer)
}

void MsgRegisterChatServer::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ip_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&max_player_) -
      reinterpret_cast<char*>(&ip_)) + sizeof(max_player_));
}

MsgRegisterChatServer::~MsgRegisterChatServer() {
  // @@protoc_insertion_point(destructor:MsgRegisterChatServer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgRegisterChatServer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgRegisterChatServer::ArenaDtor(void* object) {
  MsgRegisterChatServer* _this = reinterpret_cast< MsgRegisterChatServer* >(object);
  (void)_this;
}
void MsgRegisterChatServer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgRegisterChatServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgRegisterChatServer& MsgRegisterChatServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgRegisterChatServer_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgRegisterChatServer::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgRegisterChatServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_player_) -
      reinterpret_cast<char*>(&ip_)) + sizeof(max_player_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgRegisterChatServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 server_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_player = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          max_player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgRegisterChatServer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRegisterChatServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ip = 1;
  if (this->ip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ip(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  // int32 server_id = 3;
  if (this->server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_server_id(), target);
  }

  // int32 max_player = 4;
  if (this->max_player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_player(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRegisterChatServer)
  return target;
}

size_t MsgRegisterChatServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgRegisterChatServer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ip = 1;
  if (this->ip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ip());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  // int32 server_id = 3;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_id());
  }

  // int32 max_player = 4;
  if (this->max_player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_player());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgRegisterChatServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgRegisterChatServer)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgRegisterChatServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgRegisterChatServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgRegisterChatServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgRegisterChatServer)
    MergeFrom(*source);
  }
}

void MsgRegisterChatServer::MergeFrom(const MsgRegisterChatServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgRegisterChatServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip() != 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from.max_player() != 0) {
    _internal_set_max_player(from._internal_max_player());
  }
}

void MsgRegisterChatServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgRegisterChatServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRegisterChatServer::CopyFrom(const MsgRegisterChatServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgRegisterChatServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRegisterChatServer::IsInitialized() const {
  return true;
}

void MsgRegisterChatServer::InternalSwap(MsgRegisterChatServer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgRegisterChatServer, max_player_)
      + sizeof(MsgRegisterChatServer::max_player_)
      - PROTOBUF_FIELD_OFFSET(MsgRegisterChatServer, ip_)>(
          reinterpret_cast<char*>(&ip_),
          reinterpret_cast<char*>(&other->ip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgRegisterChatServer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgApplyRobot::_Internal {
 public:
};

MsgApplyRobot::MsgApplyRobot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgApplyRobot)
}
MsgApplyRobot::MsgApplyRobot(const MsgApplyRobot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&apply_num_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(apply_num_));
  // @@protoc_insertion_point(copy_constructor:MsgApplyRobot)
}

void MsgApplyRobot::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&server_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&apply_num_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(apply_num_));
}

MsgApplyRobot::~MsgApplyRobot() {
  // @@protoc_insertion_point(destructor:MsgApplyRobot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgApplyRobot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgApplyRobot::ArenaDtor(void* object) {
  MsgApplyRobot* _this = reinterpret_cast< MsgApplyRobot* >(object);
  (void)_this;
}
void MsgApplyRobot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgApplyRobot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgApplyRobot& MsgApplyRobot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgApplyRobot_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgApplyRobot::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgApplyRobot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&apply_num_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(apply_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgApplyRobot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 apply_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          apply_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgApplyRobot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgApplyRobot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_server_id(), target);
  }

  // int32 apply_num = 2;
  if (this->apply_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_apply_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgApplyRobot)
  return target;
}

size_t MsgApplyRobot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgApplyRobot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_id());
  }

  // int32 apply_num = 2;
  if (this->apply_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_apply_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgApplyRobot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgApplyRobot)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgApplyRobot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgApplyRobot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgApplyRobot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgApplyRobot)
    MergeFrom(*source);
  }
}

void MsgApplyRobot::MergeFrom(const MsgApplyRobot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgApplyRobot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from.apply_num() != 0) {
    _internal_set_apply_num(from._internal_apply_num());
  }
}

void MsgApplyRobot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgApplyRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgApplyRobot::CopyFrom(const MsgApplyRobot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgApplyRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgApplyRobot::IsInitialized() const {
  return true;
}

void MsgApplyRobot::InternalSwap(MsgApplyRobot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgApplyRobot, apply_num_)
      + sizeof(MsgApplyRobot::apply_num_)
      - PROTOBUF_FIELD_OFFSET(MsgApplyRobot, server_id_)>(
          reinterpret_cast<char*>(&server_id_),
          reinterpret_cast<char*>(&other->server_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgApplyRobot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgApplyRobotResp::_Internal {
 public:
};

MsgApplyRobotResp::MsgApplyRobotResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  robot_user_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgApplyRobotResp)
}
MsgApplyRobotResp::MsgApplyRobotResp(const MsgApplyRobotResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      robot_user_id_(from.robot_user_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MsgApplyRobotResp)
}

void MsgApplyRobotResp::SharedCtor() {
}

MsgApplyRobotResp::~MsgApplyRobotResp() {
  // @@protoc_insertion_point(destructor:MsgApplyRobotResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgApplyRobotResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgApplyRobotResp::ArenaDtor(void* object) {
  MsgApplyRobotResp* _this = reinterpret_cast< MsgApplyRobotResp* >(object);
  (void)_this;
}
void MsgApplyRobotResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgApplyRobotResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgApplyRobotResp& MsgApplyRobotResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgApplyRobotResp_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgApplyRobotResp::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgApplyRobotResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robot_user_id_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgApplyRobotResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 robot_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_robot_user_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_robot_user_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgApplyRobotResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgApplyRobotResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 robot_user_id = 1;
  {
    int byte_size = _robot_user_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_robot_user_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgApplyRobotResp)
  return target;
}

size_t MsgApplyRobotResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgApplyRobotResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 robot_user_id = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->robot_user_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _robot_user_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgApplyRobotResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgApplyRobotResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgApplyRobotResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgApplyRobotResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgApplyRobotResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgApplyRobotResp)
    MergeFrom(*source);
  }
}

void MsgApplyRobotResp::MergeFrom(const MsgApplyRobotResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgApplyRobotResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  robot_user_id_.MergeFrom(from.robot_user_id_);
}

void MsgApplyRobotResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgApplyRobotResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgApplyRobotResp::CopyFrom(const MsgApplyRobotResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgApplyRobotResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgApplyRobotResp::IsInitialized() const {
  return true;
}

void MsgApplyRobotResp::InternalSwap(MsgApplyRobotResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  robot_user_id_.InternalSwap(&other->robot_user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgApplyRobotResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgCreateRobot::_Internal {
 public:
};

MsgCreateRobot::MsgCreateRobot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgCreateRobot)
}
MsgCreateRobot::MsgCreateRobot(const MsgCreateRobot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_socket_id_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(client_socket_id_));
  // @@protoc_insertion_point(copy_constructor:MsgCreateRobot)
}

void MsgCreateRobot::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&server_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&client_socket_id_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(client_socket_id_));
}

MsgCreateRobot::~MsgCreateRobot() {
  // @@protoc_insertion_point(destructor:MsgCreateRobot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgCreateRobot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgCreateRobot::ArenaDtor(void* object) {
  MsgCreateRobot* _this = reinterpret_cast< MsgCreateRobot* >(object);
  (void)_this;
}
void MsgCreateRobot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgCreateRobot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgCreateRobot& MsgCreateRobot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgCreateRobot_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgCreateRobot::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgCreateRobot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_socket_id_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(client_socket_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgCreateRobot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 generate_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          generate_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 client_socket_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          client_socket_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgCreateRobot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgCreateRobot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_server_id(), target);
  }

  // int32 generate_num = 2;
  if (this->generate_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_generate_num(), target);
  }

  // int32 client_socket_id = 3;
  if (this->client_socket_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_client_socket_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgCreateRobot)
  return target;
}

size_t MsgCreateRobot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgCreateRobot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_id());
  }

  // int32 generate_num = 2;
  if (this->generate_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_generate_num());
  }

  // int32 client_socket_id = 3;
  if (this->client_socket_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_client_socket_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgCreateRobot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgCreateRobot)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgCreateRobot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgCreateRobot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgCreateRobot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgCreateRobot)
    MergeFrom(*source);
  }
}

void MsgCreateRobot::MergeFrom(const MsgCreateRobot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgCreateRobot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from.generate_num() != 0) {
    _internal_set_generate_num(from._internal_generate_num());
  }
  if (from.client_socket_id() != 0) {
    _internal_set_client_socket_id(from._internal_client_socket_id());
  }
}

void MsgCreateRobot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgCreateRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCreateRobot::CopyFrom(const MsgCreateRobot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgCreateRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCreateRobot::IsInitialized() const {
  return true;
}

void MsgCreateRobot::InternalSwap(MsgCreateRobot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgCreateRobot, client_socket_id_)
      + sizeof(MsgCreateRobot::client_socket_id_)
      - PROTOBUF_FIELD_OFFSET(MsgCreateRobot, server_id_)>(
          reinterpret_cast<char*>(&server_id_),
          reinterpret_cast<char*>(&other->server_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgCreateRobot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgCreateRobotResp::_Internal {
 public:
};

MsgCreateRobotResp::MsgCreateRobotResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  user_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgCreateRobotResp)
}
MsgCreateRobotResp::MsgCreateRobotResp(const MsgCreateRobotResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      user_id_(from.user_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_socket_id_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(client_socket_id_));
  // @@protoc_insertion_point(copy_constructor:MsgCreateRobotResp)
}

void MsgCreateRobotResp::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&server_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&client_socket_id_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(client_socket_id_));
}

MsgCreateRobotResp::~MsgCreateRobotResp() {
  // @@protoc_insertion_point(destructor:MsgCreateRobotResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgCreateRobotResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgCreateRobotResp::ArenaDtor(void* object) {
  MsgCreateRobotResp* _this = reinterpret_cast< MsgCreateRobotResp* >(object);
  (void)_this;
}
void MsgCreateRobotResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgCreateRobotResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgCreateRobotResp& MsgCreateRobotResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgCreateRobotResp_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgCreateRobotResp::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgCreateRobotResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.Clear();
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_socket_id_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(client_socket_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgCreateRobotResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_user_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_user_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 client_socket_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          client_socket_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgCreateRobotResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgCreateRobotResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_server_id(), target);
  }

  // repeated int32 user_id = 2;
  {
    int byte_size = _user_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_user_id(), byte_size, target);
    }
  }

  // int32 client_socket_id = 3;
  if (this->client_socket_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_client_socket_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgCreateRobotResp)
  return target;
}

size_t MsgCreateRobotResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgCreateRobotResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 user_id = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->user_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _user_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_id());
  }

  // int32 client_socket_id = 3;
  if (this->client_socket_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_client_socket_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgCreateRobotResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgCreateRobotResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgCreateRobotResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgCreateRobotResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgCreateRobotResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgCreateRobotResp)
    MergeFrom(*source);
  }
}

void MsgCreateRobotResp::MergeFrom(const MsgCreateRobotResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgCreateRobotResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_id_.MergeFrom(from.user_id_);
  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from.client_socket_id() != 0) {
    _internal_set_client_socket_id(from._internal_client_socket_id());
  }
}

void MsgCreateRobotResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgCreateRobotResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCreateRobotResp::CopyFrom(const MsgCreateRobotResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgCreateRobotResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCreateRobotResp::IsInitialized() const {
  return true;
}

void MsgCreateRobotResp::InternalSwap(MsgCreateRobotResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_id_.InternalSwap(&other->user_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgCreateRobotResp, client_socket_id_)
      + sizeof(MsgCreateRobotResp::client_socket_id_)
      - PROTOBUF_FIELD_OFFSET(MsgCreateRobotResp, server_id_)>(
          reinterpret_cast<char*>(&server_id_),
          reinterpret_cast<char*>(&other->server_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgCreateRobotResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgSendPhoneCode::_Internal {
 public:
};

MsgSendPhoneCode::MsgSendPhoneCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgSendPhoneCode)
}
MsgSendPhoneCode::MsgSendPhoneCode(const MsgSendPhoneCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phone().empty()) {
    phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phone(), 
      GetArena());
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:MsgSendPhoneCode)
}

void MsgSendPhoneCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgSendPhoneCode_ServerInternalProto_2eproto.base);
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

MsgSendPhoneCode::~MsgSendPhoneCode() {
  // @@protoc_insertion_point(destructor:MsgSendPhoneCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgSendPhoneCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  phone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgSendPhoneCode::ArenaDtor(void* object) {
  MsgSendPhoneCode* _this = reinterpret_cast< MsgSendPhoneCode* >(object);
  (void)_this;
}
void MsgSendPhoneCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgSendPhoneCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgSendPhoneCode& MsgSendPhoneCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgSendPhoneCode_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgSendPhoneCode::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgSendPhoneCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phone_.ClearToEmpty();
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgSendPhoneCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string phone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_phone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgSendPhoneCode.phone"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgSendPhoneCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgSendPhoneCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string phone = 1;
  if (this->phone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone().data(), static_cast<int>(this->_internal_phone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgSendPhoneCode.phone");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_phone(), target);
  }

  // int32 code = 2;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgSendPhoneCode)
  return target;
}

size_t MsgSendPhoneCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgSendPhoneCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string phone = 1;
  if (this->phone().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone());
  }

  // int32 code = 2;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgSendPhoneCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgSendPhoneCode)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgSendPhoneCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgSendPhoneCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgSendPhoneCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgSendPhoneCode)
    MergeFrom(*source);
  }
}

void MsgSendPhoneCode::MergeFrom(const MsgSendPhoneCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgSendPhoneCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.phone().size() > 0) {
    _internal_set_phone(from._internal_phone());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void MsgSendPhoneCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgSendPhoneCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSendPhoneCode::CopyFrom(const MsgSendPhoneCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgSendPhoneCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSendPhoneCode::IsInitialized() const {
  return true;
}

void MsgSendPhoneCode::InternalSwap(MsgSendPhoneCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  phone_.Swap(&other->phone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgSendPhoneCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgUpdateGameServerOnlineNum::_Internal {
 public:
};

MsgUpdateGameServerOnlineNum::MsgUpdateGameServerOnlineNum(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgUpdateGameServerOnlineNum)
}
MsgUpdateGameServerOnlineNum::MsgUpdateGameServerOnlineNum(const MsgUpdateGameServerOnlineNum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&online_num_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(online_num_));
  // @@protoc_insertion_point(copy_constructor:MsgUpdateGameServerOnlineNum)
}

void MsgUpdateGameServerOnlineNum::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&server_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&online_num_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(online_num_));
}

MsgUpdateGameServerOnlineNum::~MsgUpdateGameServerOnlineNum() {
  // @@protoc_insertion_point(destructor:MsgUpdateGameServerOnlineNum)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgUpdateGameServerOnlineNum::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgUpdateGameServerOnlineNum::ArenaDtor(void* object) {
  MsgUpdateGameServerOnlineNum* _this = reinterpret_cast< MsgUpdateGameServerOnlineNum* >(object);
  (void)_this;
}
void MsgUpdateGameServerOnlineNum::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgUpdateGameServerOnlineNum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgUpdateGameServerOnlineNum& MsgUpdateGameServerOnlineNum::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgUpdateGameServerOnlineNum_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgUpdateGameServerOnlineNum::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgUpdateGameServerOnlineNum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_num_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(online_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgUpdateGameServerOnlineNum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 kind_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          kind_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 room_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          room_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 online_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          online_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgUpdateGameServerOnlineNum::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgUpdateGameServerOnlineNum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_server_id(), target);
  }

  // int32 kind_id = 2;
  if (this->kind_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_kind_id(), target);
  }

  // int32 room_level = 3;
  if (this->room_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_room_level(), target);
  }

  // int32 online_num = 4;
  if (this->online_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_online_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgUpdateGameServerOnlineNum)
  return target;
}

size_t MsgUpdateGameServerOnlineNum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgUpdateGameServerOnlineNum)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_id());
  }

  // int32 kind_id = 2;
  if (this->kind_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_kind_id());
  }

  // int32 room_level = 3;
  if (this->room_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_room_level());
  }

  // int32 online_num = 4;
  if (this->online_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_online_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgUpdateGameServerOnlineNum::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgUpdateGameServerOnlineNum)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgUpdateGameServerOnlineNum* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgUpdateGameServerOnlineNum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgUpdateGameServerOnlineNum)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgUpdateGameServerOnlineNum)
    MergeFrom(*source);
  }
}

void MsgUpdateGameServerOnlineNum::MergeFrom(const MsgUpdateGameServerOnlineNum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgUpdateGameServerOnlineNum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from.kind_id() != 0) {
    _internal_set_kind_id(from._internal_kind_id());
  }
  if (from.room_level() != 0) {
    _internal_set_room_level(from._internal_room_level());
  }
  if (from.online_num() != 0) {
    _internal_set_online_num(from._internal_online_num());
  }
}

void MsgUpdateGameServerOnlineNum::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgUpdateGameServerOnlineNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUpdateGameServerOnlineNum::CopyFrom(const MsgUpdateGameServerOnlineNum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgUpdateGameServerOnlineNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUpdateGameServerOnlineNum::IsInitialized() const {
  return true;
}

void MsgUpdateGameServerOnlineNum::InternalSwap(MsgUpdateGameServerOnlineNum* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgUpdateGameServerOnlineNum, online_num_)
      + sizeof(MsgUpdateGameServerOnlineNum::online_num_)
      - PROTOBUF_FIELD_OFFSET(MsgUpdateGameServerOnlineNum, server_id_)>(
          reinterpret_cast<char*>(&server_id_),
          reinterpret_cast<char*>(&other->server_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgUpdateGameServerOnlineNum::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgGameServerUnRegister::_Internal {
 public:
};

MsgGameServerUnRegister::MsgGameServerUnRegister(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgGameServerUnRegister)
}
MsgGameServerUnRegister::MsgGameServerUnRegister(const MsgGameServerUnRegister& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&room_level_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(room_level_));
  // @@protoc_insertion_point(copy_constructor:MsgGameServerUnRegister)
}

void MsgGameServerUnRegister::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&server_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&room_level_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(room_level_));
}

MsgGameServerUnRegister::~MsgGameServerUnRegister() {
  // @@protoc_insertion_point(destructor:MsgGameServerUnRegister)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgGameServerUnRegister::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgGameServerUnRegister::ArenaDtor(void* object) {
  MsgGameServerUnRegister* _this = reinterpret_cast< MsgGameServerUnRegister* >(object);
  (void)_this;
}
void MsgGameServerUnRegister::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgGameServerUnRegister::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgGameServerUnRegister& MsgGameServerUnRegister::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgGameServerUnRegister_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgGameServerUnRegister::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgGameServerUnRegister)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&room_level_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(room_level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgGameServerUnRegister::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 kind_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          kind_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 room_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          room_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgGameServerUnRegister::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgGameServerUnRegister)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_server_id(), target);
  }

  // int32 kind_id = 2;
  if (this->kind_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_kind_id(), target);
  }

  // int32 room_level = 3;
  if (this->room_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_room_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgGameServerUnRegister)
  return target;
}

size_t MsgGameServerUnRegister::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgGameServerUnRegister)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_id());
  }

  // int32 kind_id = 2;
  if (this->kind_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_kind_id());
  }

  // int32 room_level = 3;
  if (this->room_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_room_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgGameServerUnRegister::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgGameServerUnRegister)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgGameServerUnRegister* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgGameServerUnRegister>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgGameServerUnRegister)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgGameServerUnRegister)
    MergeFrom(*source);
  }
}

void MsgGameServerUnRegister::MergeFrom(const MsgGameServerUnRegister& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgGameServerUnRegister)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from.kind_id() != 0) {
    _internal_set_kind_id(from._internal_kind_id());
  }
  if (from.room_level() != 0) {
    _internal_set_room_level(from._internal_room_level());
  }
}

void MsgGameServerUnRegister::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgGameServerUnRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGameServerUnRegister::CopyFrom(const MsgGameServerUnRegister& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgGameServerUnRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGameServerUnRegister::IsInitialized() const {
  return true;
}

void MsgGameServerUnRegister::InternalSwap(MsgGameServerUnRegister* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgGameServerUnRegister, room_level_)
      + sizeof(MsgGameServerUnRegister::room_level_)
      - PROTOBUF_FIELD_OFFSET(MsgGameServerUnRegister, server_id_)>(
          reinterpret_cast<char*>(&server_id_),
          reinterpret_cast<char*>(&other->server_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgGameServerUnRegister::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgLoadCheatRate::_Internal {
 public:
};

MsgLoadCheatRate::MsgLoadCheatRate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgLoadCheatRate)
}
MsgLoadCheatRate::MsgLoadCheatRate(const MsgLoadCheatRate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&blood_score_, &from.blood_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&cheat_rate_) -
    reinterpret_cast<char*>(&blood_score_)) + sizeof(cheat_rate_));
  // @@protoc_insertion_point(copy_constructor:MsgLoadCheatRate)
}

void MsgLoadCheatRate::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&blood_score_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&cheat_rate_) -
      reinterpret_cast<char*>(&blood_score_)) + sizeof(cheat_rate_));
}

MsgLoadCheatRate::~MsgLoadCheatRate() {
  // @@protoc_insertion_point(destructor:MsgLoadCheatRate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgLoadCheatRate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgLoadCheatRate::ArenaDtor(void* object) {
  MsgLoadCheatRate* _this = reinterpret_cast< MsgLoadCheatRate* >(object);
  (void)_this;
}
void MsgLoadCheatRate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgLoadCheatRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgLoadCheatRate& MsgLoadCheatRate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgLoadCheatRate_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgLoadCheatRate::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgLoadCheatRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&blood_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cheat_rate_) -
      reinterpret_cast<char*>(&blood_score_)) + sizeof(cheat_rate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgLoadCheatRate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 blood_score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          blood_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cheat_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cheat_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 fail_min_line_score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fail_min_line_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 fail_max_line_score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          fail_max_line_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgLoadCheatRate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgLoadCheatRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 blood_score = 1;
  if (this->blood_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_blood_score(), target);
  }

  // int32 cheat_rate = 2;
  if (this->cheat_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cheat_rate(), target);
  }

  // int64 fail_min_line_score = 3;
  if (this->fail_min_line_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_fail_min_line_score(), target);
  }

  // int64 fail_max_line_score = 4;
  if (this->fail_max_line_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_fail_max_line_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgLoadCheatRate)
  return target;
}

size_t MsgLoadCheatRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgLoadCheatRate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 blood_score = 1;
  if (this->blood_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_blood_score());
  }

  // int64 fail_min_line_score = 3;
  if (this->fail_min_line_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fail_min_line_score());
  }

  // int64 fail_max_line_score = 4;
  if (this->fail_max_line_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fail_max_line_score());
  }

  // int32 cheat_rate = 2;
  if (this->cheat_rate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cheat_rate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgLoadCheatRate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgLoadCheatRate)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgLoadCheatRate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgLoadCheatRate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgLoadCheatRate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgLoadCheatRate)
    MergeFrom(*source);
  }
}

void MsgLoadCheatRate::MergeFrom(const MsgLoadCheatRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgLoadCheatRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.blood_score() != 0) {
    _internal_set_blood_score(from._internal_blood_score());
  }
  if (from.fail_min_line_score() != 0) {
    _internal_set_fail_min_line_score(from._internal_fail_min_line_score());
  }
  if (from.fail_max_line_score() != 0) {
    _internal_set_fail_max_line_score(from._internal_fail_max_line_score());
  }
  if (from.cheat_rate() != 0) {
    _internal_set_cheat_rate(from._internal_cheat_rate());
  }
}

void MsgLoadCheatRate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgLoadCheatRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLoadCheatRate::CopyFrom(const MsgLoadCheatRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgLoadCheatRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLoadCheatRate::IsInitialized() const {
  return true;
}

void MsgLoadCheatRate::InternalSwap(MsgLoadCheatRate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgLoadCheatRate, cheat_rate_)
      + sizeof(MsgLoadCheatRate::cheat_rate_)
      - PROTOBUF_FIELD_OFFSET(MsgLoadCheatRate, blood_score_)>(
          reinterpret_cast<char*>(&blood_score_),
          reinterpret_cast<char*>(&other->blood_score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgLoadCheatRate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgRelayServerRegister::_Internal {
 public:
};

MsgRelayServerRegister::MsgRelayServerRegister(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgRelayServerRegister)
}
MsgRelayServerRegister::MsgRelayServerRegister(const MsgRelayServerRegister& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_port_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(server_port_));
  // @@protoc_insertion_point(copy_constructor:MsgRelayServerRegister)
}

void MsgRelayServerRegister::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&server_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&server_port_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(server_port_));
}

MsgRelayServerRegister::~MsgRelayServerRegister() {
  // @@protoc_insertion_point(destructor:MsgRelayServerRegister)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgRelayServerRegister::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgRelayServerRegister::ArenaDtor(void* object) {
  MsgRelayServerRegister* _this = reinterpret_cast< MsgRelayServerRegister* >(object);
  (void)_this;
}
void MsgRelayServerRegister::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgRelayServerRegister::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgRelayServerRegister& MsgRelayServerRegister::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgRelayServerRegister_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgRelayServerRegister::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgRelayServerRegister)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_port_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(server_port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgRelayServerRegister::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 server_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgRelayServerRegister::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRelayServerRegister)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_server_id(), target);
  }

  // int32 server_port = 2;
  if (this->server_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_server_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRelayServerRegister)
  return target;
}

size_t MsgRelayServerRegister::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgRelayServerRegister)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_id());
  }

  // int32 server_port = 2;
  if (this->server_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgRelayServerRegister::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgRelayServerRegister)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgRelayServerRegister* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgRelayServerRegister>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgRelayServerRegister)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgRelayServerRegister)
    MergeFrom(*source);
  }
}

void MsgRelayServerRegister::MergeFrom(const MsgRelayServerRegister& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgRelayServerRegister)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from.server_port() != 0) {
    _internal_set_server_port(from._internal_server_port());
  }
}

void MsgRelayServerRegister::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgRelayServerRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRelayServerRegister::CopyFrom(const MsgRelayServerRegister& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgRelayServerRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRelayServerRegister::IsInitialized() const {
  return true;
}

void MsgRelayServerRegister::InternalSwap(MsgRelayServerRegister* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgRelayServerRegister, server_port_)
      + sizeof(MsgRelayServerRegister::server_port_)
      - PROTOBUF_FIELD_OFFSET(MsgRelayServerRegister, server_id_)>(
          reinterpret_cast<char*>(&server_id_),
          reinterpret_cast<char*>(&other->server_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgRelayServerRegister::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgRelayServerAddMail::_Internal {
 public:
};

MsgRelayServerAddMail::MsgRelayServerAddMail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgRelayServerAddMail)
}
MsgRelayServerAddMail::MsgRelayServerAddMail(const MsgRelayServerAddMail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArena());
  }
  ::memcpy(&to_user_id_, &from.to_user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&from_user_id_) -
    reinterpret_cast<char*>(&to_user_id_)) + sizeof(from_user_id_));
  // @@protoc_insertion_point(copy_constructor:MsgRelayServerAddMail)
}

void MsgRelayServerAddMail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgRelayServerAddMail_ServerInternalProto_2eproto.base);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&to_user_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&from_user_id_) -
      reinterpret_cast<char*>(&to_user_id_)) + sizeof(from_user_id_));
}

MsgRelayServerAddMail::~MsgRelayServerAddMail() {
  // @@protoc_insertion_point(destructor:MsgRelayServerAddMail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgRelayServerAddMail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgRelayServerAddMail::ArenaDtor(void* object) {
  MsgRelayServerAddMail* _this = reinterpret_cast< MsgRelayServerAddMail* >(object);
  (void)_this;
}
void MsgRelayServerAddMail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgRelayServerAddMail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgRelayServerAddMail& MsgRelayServerAddMail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgRelayServerAddMail_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgRelayServerAddMail::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgRelayServerAddMail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmpty();
  content_.ClearToEmpty();
  ::memset(&to_user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&from_user_id_) -
      reinterpret_cast<char*>(&to_user_id_)) + sizeof(from_user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgRelayServerAddMail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 to_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          to_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgRelayServerAddMail.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgRelayServerAddMail.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 from_user_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          from_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgRelayServerAddMail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRelayServerAddMail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 to_user_id = 1;
  if (this->to_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_to_user_id(), target);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgRelayServerAddMail.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // string content = 3;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgRelayServerAddMail.content");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_content(), target);
  }

  // int64 num = 4;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_num(), target);
  }

  // int32 type = 5;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_type(), target);
  }

  // int32 from_user_id = 6;
  if (this->from_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_from_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRelayServerAddMail)
  return target;
}

size_t MsgRelayServerAddMail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgRelayServerAddMail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string content = 3;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // int32 to_user_id = 1;
  if (this->to_user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_to_user_id());
  }

  // int32 type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int64 num = 4;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num());
  }

  // int32 from_user_id = 6;
  if (this->from_user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_from_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgRelayServerAddMail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgRelayServerAddMail)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgRelayServerAddMail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgRelayServerAddMail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgRelayServerAddMail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgRelayServerAddMail)
    MergeFrom(*source);
  }
}

void MsgRelayServerAddMail::MergeFrom(const MsgRelayServerAddMail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgRelayServerAddMail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.title().size() > 0) {
    _internal_set_title(from._internal_title());
  }
  if (from.content().size() > 0) {
    _internal_set_content(from._internal_content());
  }
  if (from.to_user_id() != 0) {
    _internal_set_to_user_id(from._internal_to_user_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
  if (from.from_user_id() != 0) {
    _internal_set_from_user_id(from._internal_from_user_id());
  }
}

void MsgRelayServerAddMail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgRelayServerAddMail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRelayServerAddMail::CopyFrom(const MsgRelayServerAddMail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgRelayServerAddMail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRelayServerAddMail::IsInitialized() const {
  return true;
}

void MsgRelayServerAddMail::InternalSwap(MsgRelayServerAddMail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgRelayServerAddMail, from_user_id_)
      + sizeof(MsgRelayServerAddMail::from_user_id_)
      - PROTOBUF_FIELD_OFFSET(MsgRelayServerAddMail, to_user_id_)>(
          reinterpret_cast<char*>(&to_user_id_),
          reinterpret_cast<char*>(&other->to_user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgRelayServerAddMail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgRelayServerRecharge::_Internal {
 public:
};

MsgRelayServerRecharge::MsgRelayServerRecharge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgRelayServerRecharge)
}
MsgRelayServerRecharge::MsgRelayServerRecharge(const MsgRelayServerRecharge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:MsgRelayServerRecharge)
}

void MsgRelayServerRecharge::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(type_));
}

MsgRelayServerRecharge::~MsgRelayServerRecharge() {
  // @@protoc_insertion_point(destructor:MsgRelayServerRecharge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgRelayServerRecharge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgRelayServerRecharge::ArenaDtor(void* object) {
  MsgRelayServerRecharge* _this = reinterpret_cast< MsgRelayServerRecharge* >(object);
  (void)_this;
}
void MsgRelayServerRecharge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgRelayServerRecharge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgRelayServerRecharge& MsgRelayServerRecharge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgRelayServerRecharge_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgRelayServerRecharge::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgRelayServerRecharge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgRelayServerRecharge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 game_coin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          game_coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgRelayServerRecharge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRelayServerRecharge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // int32 gold = 2;
  if (this->gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_gold(), target);
  }

  // int32 game_coin = 3;
  if (this->game_coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_game_coin(), target);
  }

  // int32 type = 4;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRelayServerRecharge)
  return target;
}

size_t MsgRelayServerRecharge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgRelayServerRecharge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // int32 gold = 2;
  if (this->gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gold());
  }

  // int32 game_coin = 3;
  if (this->game_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_coin());
  }

  // int32 type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgRelayServerRecharge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgRelayServerRecharge)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgRelayServerRecharge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgRelayServerRecharge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgRelayServerRecharge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgRelayServerRecharge)
    MergeFrom(*source);
  }
}

void MsgRelayServerRecharge::MergeFrom(const MsgRelayServerRecharge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgRelayServerRecharge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
  if (from.game_coin() != 0) {
    _internal_set_game_coin(from._internal_game_coin());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void MsgRelayServerRecharge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgRelayServerRecharge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRelayServerRecharge::CopyFrom(const MsgRelayServerRecharge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgRelayServerRecharge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRelayServerRecharge::IsInitialized() const {
  return true;
}

void MsgRelayServerRecharge::InternalSwap(MsgRelayServerRecharge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgRelayServerRecharge, type_)
      + sizeof(MsgRelayServerRecharge::type_)
      - PROTOBUF_FIELD_OFFSET(MsgRelayServerRecharge, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgRelayServerRecharge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgDBUpdateOnlineNum::_Internal {
 public:
};

MsgDBUpdateOnlineNum::MsgDBUpdateOnlineNum(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgDBUpdateOnlineNum)
}
MsgDBUpdateOnlineNum::MsgDBUpdateOnlineNum(const MsgDBUpdateOnlineNum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&online_num_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(online_num_));
  // @@protoc_insertion_point(copy_constructor:MsgDBUpdateOnlineNum)
}

void MsgDBUpdateOnlineNum::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&server_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&online_num_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(online_num_));
}

MsgDBUpdateOnlineNum::~MsgDBUpdateOnlineNum() {
  // @@protoc_insertion_point(destructor:MsgDBUpdateOnlineNum)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgDBUpdateOnlineNum::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgDBUpdateOnlineNum::ArenaDtor(void* object) {
  MsgDBUpdateOnlineNum* _this = reinterpret_cast< MsgDBUpdateOnlineNum* >(object);
  (void)_this;
}
void MsgDBUpdateOnlineNum::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgDBUpdateOnlineNum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgDBUpdateOnlineNum& MsgDBUpdateOnlineNum::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgDBUpdateOnlineNum_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgDBUpdateOnlineNum::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgDBUpdateOnlineNum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_num_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(online_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDBUpdateOnlineNum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 online_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          online_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgDBUpdateOnlineNum::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDBUpdateOnlineNum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_server_id(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  // int32 online_num = 3;
  if (this->online_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_online_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDBUpdateOnlineNum)
  return target;
}

size_t MsgDBUpdateOnlineNum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgDBUpdateOnlineNum)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_id());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  // int32 online_num = 3;
  if (this->online_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_online_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgDBUpdateOnlineNum::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgDBUpdateOnlineNum)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDBUpdateOnlineNum* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgDBUpdateOnlineNum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgDBUpdateOnlineNum)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgDBUpdateOnlineNum)
    MergeFrom(*source);
  }
}

void MsgDBUpdateOnlineNum::MergeFrom(const MsgDBUpdateOnlineNum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgDBUpdateOnlineNum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.online_num() != 0) {
    _internal_set_online_num(from._internal_online_num());
  }
}

void MsgDBUpdateOnlineNum::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgDBUpdateOnlineNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBUpdateOnlineNum::CopyFrom(const MsgDBUpdateOnlineNum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgDBUpdateOnlineNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBUpdateOnlineNum::IsInitialized() const {
  return true;
}

void MsgDBUpdateOnlineNum::InternalSwap(MsgDBUpdateOnlineNum* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgDBUpdateOnlineNum, online_num_)
      + sizeof(MsgDBUpdateOnlineNum::online_num_)
      - PROTOBUF_FIELD_OFFSET(MsgDBUpdateOnlineNum, server_id_)>(
          reinterpret_cast<char*>(&server_id_),
          reinterpret_cast<char*>(&other->server_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDBUpdateOnlineNum::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgDBRegisterLogin::_Internal {
 public:
};

MsgDBRegisterLogin::MsgDBRegisterLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgDBRegisterLogin)
}
MsgDBRegisterLogin::MsgDBRegisterLogin(const MsgDBRegisterLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:MsgDBRegisterLogin)
}

void MsgDBRegisterLogin::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&server_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(port_));
}

MsgDBRegisterLogin::~MsgDBRegisterLogin() {
  // @@protoc_insertion_point(destructor:MsgDBRegisterLogin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgDBRegisterLogin::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgDBRegisterLogin::ArenaDtor(void* object) {
  MsgDBRegisterLogin* _this = reinterpret_cast< MsgDBRegisterLogin* >(object);
  (void)_this;
}
void MsgDBRegisterLogin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgDBRegisterLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgDBRegisterLogin& MsgDBRegisterLogin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgDBRegisterLogin_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgDBRegisterLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgDBRegisterLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDBRegisterLogin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgDBRegisterLogin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDBRegisterLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_server_id(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDBRegisterLogin)
  return target;
}

size_t MsgDBRegisterLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgDBRegisterLogin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_id());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgDBRegisterLogin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgDBRegisterLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDBRegisterLogin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgDBRegisterLogin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgDBRegisterLogin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgDBRegisterLogin)
    MergeFrom(*source);
  }
}

void MsgDBRegisterLogin::MergeFrom(const MsgDBRegisterLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgDBRegisterLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void MsgDBRegisterLogin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgDBRegisterLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBRegisterLogin::CopyFrom(const MsgDBRegisterLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgDBRegisterLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBRegisterLogin::IsInitialized() const {
  return true;
}

void MsgDBRegisterLogin::InternalSwap(MsgDBRegisterLogin* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgDBRegisterLogin, port_)
      + sizeof(MsgDBRegisterLogin::port_)
      - PROTOBUF_FIELD_OFFSET(MsgDBRegisterLogin, server_id_)>(
          reinterpret_cast<char*>(&server_id_),
          reinterpret_cast<char*>(&other->server_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDBRegisterLogin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgPlayerAttribute::_Internal {
 public:
};

MsgPlayerAttribute::MsgPlayerAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgPlayerAttribute)
}
MsgPlayerAttribute::MsgPlayerAttribute(const MsgPlayerAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phone().empty()) {
    phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phone(), 
      GetArena());
  }
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nickname().empty()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArena());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&bank_coin_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(bank_coin_));
  // @@protoc_insertion_point(copy_constructor:MsgPlayerAttribute)
}

void MsgPlayerAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgPlayerAttribute_ServerInternalProto_2eproto.base);
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bank_coin_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(bank_coin_));
}

MsgPlayerAttribute::~MsgPlayerAttribute() {
  // @@protoc_insertion_point(destructor:MsgPlayerAttribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgPlayerAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  phone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgPlayerAttribute::ArenaDtor(void* object) {
  MsgPlayerAttribute* _this = reinterpret_cast< MsgPlayerAttribute* >(object);
  (void)_this;
}
void MsgPlayerAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgPlayerAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgPlayerAttribute& MsgPlayerAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgPlayerAttribute_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgPlayerAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgPlayerAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phone_.ClearToEmpty();
  nickname_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bank_coin_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(bank_coin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgPlayerAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 beautiful_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          beautiful_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 user_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string phone = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_phone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgPlayerAttribute.phone"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 coin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 bank_coin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          bank_coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 head_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          head_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nickname = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgPlayerAttribute.nickname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgPlayerAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPlayerAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // int32 beautiful_id = 2;
  if (this->beautiful_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_beautiful_id(), target);
  }

  // int32 user_type = 3;
  if (this->user_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_user_type(), target);
  }

  // string phone = 4;
  if (this->phone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone().data(), static_cast<int>(this->_internal_phone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgPlayerAttribute.phone");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_phone(), target);
  }

  // int64 coin = 5;
  if (this->coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_coin(), target);
  }

  // int64 bank_coin = 6;
  if (this->bank_coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_bank_coin(), target);
  }

  // int32 head_id = 7;
  if (this->head_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_head_id(), target);
  }

  // string nickname = 8;
  if (this->nickname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgPlayerAttribute.nickname");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_nickname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPlayerAttribute)
  return target;
}

size_t MsgPlayerAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgPlayerAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string phone = 4;
  if (this->phone().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone());
  }

  // string nickname = 8;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // int32 beautiful_id = 2;
  if (this->beautiful_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_beautiful_id());
  }

  // int64 coin = 5;
  if (this->coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_coin());
  }

  // int32 user_type = 3;
  if (this->user_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_type());
  }

  // int32 head_id = 7;
  if (this->head_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_head_id());
  }

  // int64 bank_coin = 6;
  if (this->bank_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_bank_coin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgPlayerAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgPlayerAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgPlayerAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgPlayerAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgPlayerAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgPlayerAttribute)
    MergeFrom(*source);
  }
}

void MsgPlayerAttribute::MergeFrom(const MsgPlayerAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgPlayerAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.phone().size() > 0) {
    _internal_set_phone(from._internal_phone());
  }
  if (from.nickname().size() > 0) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.beautiful_id() != 0) {
    _internal_set_beautiful_id(from._internal_beautiful_id());
  }
  if (from.coin() != 0) {
    _internal_set_coin(from._internal_coin());
  }
  if (from.user_type() != 0) {
    _internal_set_user_type(from._internal_user_type());
  }
  if (from.head_id() != 0) {
    _internal_set_head_id(from._internal_head_id());
  }
  if (from.bank_coin() != 0) {
    _internal_set_bank_coin(from._internal_bank_coin());
  }
}

void MsgPlayerAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgPlayerAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerAttribute::CopyFrom(const MsgPlayerAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgPlayerAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerAttribute::IsInitialized() const {
  return true;
}

void MsgPlayerAttribute::InternalSwap(MsgPlayerAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  phone_.Swap(&other->phone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nickname_.Swap(&other->nickname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgPlayerAttribute, bank_coin_)
      + sizeof(MsgPlayerAttribute::bank_coin_)
      - PROTOBUF_FIELD_OFFSET(MsgPlayerAttribute, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgPlayerAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgLoginPlayerInfo::_Internal {
 public:
};

MsgLoginPlayerInfo::MsgLoginPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgLoginPlayerInfo)
}
MsgLoginPlayerInfo::MsgLoginPlayerInfo(const MsgLoginPlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArena());
  }
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nickname().empty()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArena());
  }
  avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar().empty()) {
    avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar(), 
      GetArena());
  }
  phone_num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phone_num().empty()) {
    phone_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phone_num(), 
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArena());
  }
  bank_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bank_password().empty()) {
    bank_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bank_password(), 
      GetArena());
  }
  invite_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_invite_code().empty()) {
    invite_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invite_code(), 
      GetArena());
  }
  ::memcpy(&res_code_, &from.res_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&bank_gold_) -
    reinterpret_cast<char*>(&res_code_)) + sizeof(bank_gold_));
  // @@protoc_insertion_point(copy_constructor:MsgLoginPlayerInfo)
}

void MsgLoginPlayerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgLoginPlayerInfo_ServerInternalProto_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bank_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invite_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&res_code_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bank_gold_) -
      reinterpret_cast<char*>(&res_code_)) + sizeof(bank_gold_));
}

MsgLoginPlayerInfo::~MsgLoginPlayerInfo() {
  // @@protoc_insertion_point(destructor:MsgLoginPlayerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgLoginPlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_num_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bank_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invite_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgLoginPlayerInfo::ArenaDtor(void* object) {
  MsgLoginPlayerInfo* _this = reinterpret_cast< MsgLoginPlayerInfo* >(object);
  (void)_this;
}
void MsgLoginPlayerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgLoginPlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgLoginPlayerInfo& MsgLoginPlayerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgLoginPlayerInfo_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgLoginPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgLoginPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  nickname_.ClearToEmpty();
  avatar_.ClearToEmpty();
  phone_num_.ClearToEmpty();
  password_.ClearToEmpty();
  bank_password_.ClearToEmpty();
  invite_code_.ClearToEmpty();
  ::memset(&res_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bank_gold_) -
      reinterpret_cast<char*>(&res_code_)) + sizeof(bank_gold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgLoginPlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 res_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          res_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 beautiful_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          beautiful_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string account = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgLoginPlayerInfo.account"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nickname = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgLoginPlayerInfo.nickname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatar = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_avatar();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgLoginPlayerInfo.avatar"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool first_recharge = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          first_recharge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 user_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_drain = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          is_drain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 coin = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string phone_num = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_phone_num();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgLoginPlayerInfo.phone_num"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgLoginPlayerInfo.password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vip_level = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          vip_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 avatar_frame = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          avatar_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 channel_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bank_password = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_bank_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgLoginPlayerInfo.bank_password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 bank_gold = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          bank_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string invite_code = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_invite_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgLoginPlayerInfo.invite_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgLoginPlayerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgLoginPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 res_code = 1;
  if (this->res_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_res_code(), target);
  }

  // int32 user_id = 2;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_user_id(), target);
  }

  // int32 beautiful_id = 3;
  if (this->beautiful_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_beautiful_id(), target);
  }

  // string account = 4;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgLoginPlayerInfo.account");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_account(), target);
  }

  // string nickname = 5;
  if (this->nickname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgLoginPlayerInfo.nickname");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_nickname(), target);
  }

  // string avatar = 6;
  if (this->avatar().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar().data(), static_cast<int>(this->_internal_avatar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgLoginPlayerInfo.avatar");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_avatar(), target);
  }

  // bool first_recharge = 7;
  if (this->first_recharge() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_first_recharge(), target);
  }

  // int32 user_type = 8;
  if (this->user_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_user_type(), target);
  }

  // bool is_drain = 9;
  if (this->is_drain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_drain(), target);
  }

  // uint64 coin = 10;
  if (this->coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_coin(), target);
  }

  // string phone_num = 11;
  if (this->phone_num().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone_num().data(), static_cast<int>(this->_internal_phone_num().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgLoginPlayerInfo.phone_num");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_phone_num(), target);
  }

  // string password = 12;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgLoginPlayerInfo.password");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_password(), target);
  }

  // int32 vip_level = 13;
  if (this->vip_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_vip_level(), target);
  }

  // int32 avatar_frame = 14;
  if (this->avatar_frame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_avatar_frame(), target);
  }

  // int32 channel_id = 15;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_channel_id(), target);
  }

  // string bank_password = 16;
  if (this->bank_password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bank_password().data(), static_cast<int>(this->_internal_bank_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgLoginPlayerInfo.bank_password");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_bank_password(), target);
  }

  // uint64 bank_gold = 17;
  if (this->bank_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->_internal_bank_gold(), target);
  }

  // string invite_code = 18;
  if (this->invite_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_invite_code().data(), static_cast<int>(this->_internal_invite_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgLoginPlayerInfo.invite_code");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_invite_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgLoginPlayerInfo)
  return target;
}

size_t MsgLoginPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgLoginPlayerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 4;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // string nickname = 5;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string avatar = 6;
  if (this->avatar().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar());
  }

  // string phone_num = 11;
  if (this->phone_num().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone_num());
  }

  // string password = 12;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // string bank_password = 16;
  if (this->bank_password().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bank_password());
  }

  // string invite_code = 18;
  if (this->invite_code().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invite_code());
  }

  // int32 res_code = 1;
  if (this->res_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_res_code());
  }

  // int32 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // int32 beautiful_id = 3;
  if (this->beautiful_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_beautiful_id());
  }

  // int32 user_type = 8;
  if (this->user_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_type());
  }

  // bool first_recharge = 7;
  if (this->first_recharge() != 0) {
    total_size += 1 + 1;
  }

  // bool is_drain = 9;
  if (this->is_drain() != 0) {
    total_size += 1 + 1;
  }

  // int32 vip_level = 13;
  if (this->vip_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vip_level());
  }

  // uint64 coin = 10;
  if (this->coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_coin());
  }

  // int32 avatar_frame = 14;
  if (this->avatar_frame() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_avatar_frame());
  }

  // int32 channel_id = 15;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channel_id());
  }

  // uint64 bank_gold = 17;
  if (this->bank_gold() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_bank_gold());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgLoginPlayerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgLoginPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgLoginPlayerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgLoginPlayerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgLoginPlayerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgLoginPlayerInfo)
    MergeFrom(*source);
  }
}

void MsgLoginPlayerInfo::MergeFrom(const MsgLoginPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgLoginPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {
    _internal_set_account(from._internal_account());
  }
  if (from.nickname().size() > 0) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (from.avatar().size() > 0) {
    _internal_set_avatar(from._internal_avatar());
  }
  if (from.phone_num().size() > 0) {
    _internal_set_phone_num(from._internal_phone_num());
  }
  if (from.password().size() > 0) {
    _internal_set_password(from._internal_password());
  }
  if (from.bank_password().size() > 0) {
    _internal_set_bank_password(from._internal_bank_password());
  }
  if (from.invite_code().size() > 0) {
    _internal_set_invite_code(from._internal_invite_code());
  }
  if (from.res_code() != 0) {
    _internal_set_res_code(from._internal_res_code());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.beautiful_id() != 0) {
    _internal_set_beautiful_id(from._internal_beautiful_id());
  }
  if (from.user_type() != 0) {
    _internal_set_user_type(from._internal_user_type());
  }
  if (from.first_recharge() != 0) {
    _internal_set_first_recharge(from._internal_first_recharge());
  }
  if (from.is_drain() != 0) {
    _internal_set_is_drain(from._internal_is_drain());
  }
  if (from.vip_level() != 0) {
    _internal_set_vip_level(from._internal_vip_level());
  }
  if (from.coin() != 0) {
    _internal_set_coin(from._internal_coin());
  }
  if (from.avatar_frame() != 0) {
    _internal_set_avatar_frame(from._internal_avatar_frame());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.bank_gold() != 0) {
    _internal_set_bank_gold(from._internal_bank_gold());
  }
}

void MsgLoginPlayerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgLoginPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLoginPlayerInfo::CopyFrom(const MsgLoginPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgLoginPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLoginPlayerInfo::IsInitialized() const {
  return true;
}

void MsgLoginPlayerInfo::InternalSwap(MsgLoginPlayerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nickname_.Swap(&other->nickname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  avatar_.Swap(&other->avatar_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  phone_num_.Swap(&other->phone_num_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bank_password_.Swap(&other->bank_password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  invite_code_.Swap(&other->invite_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgLoginPlayerInfo, bank_gold_)
      + sizeof(MsgLoginPlayerInfo::bank_gold_)
      - PROTOBUF_FIELD_OFFSET(MsgLoginPlayerInfo, res_code_)>(
          reinterpret_cast<char*>(&res_code_),
          reinterpret_cast<char*>(&other->res_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgLoginPlayerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgDBLoginOut::_Internal {
 public:
};

MsgDBLoginOut::MsgDBLoginOut(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgDBLoginOut)
}
MsgDBLoginOut::MsgDBLoginOut(const MsgDBLoginOut& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&online_time_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(online_time_));
  // @@protoc_insertion_point(copy_constructor:MsgDBLoginOut)
}

void MsgDBLoginOut::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&online_time_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(online_time_));
}

MsgDBLoginOut::~MsgDBLoginOut() {
  // @@protoc_insertion_point(destructor:MsgDBLoginOut)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgDBLoginOut::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgDBLoginOut::ArenaDtor(void* object) {
  MsgDBLoginOut* _this = reinterpret_cast< MsgDBLoginOut* >(object);
  (void)_this;
}
void MsgDBLoginOut::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgDBLoginOut::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgDBLoginOut& MsgDBLoginOut::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgDBLoginOut_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgDBLoginOut::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgDBLoginOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_time_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(online_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDBLoginOut::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 online_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          online_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgDBLoginOut::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDBLoginOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // int32 online_time = 2;
  if (this->online_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_online_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDBLoginOut)
  return target;
}

size_t MsgDBLoginOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgDBLoginOut)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // int32 online_time = 2;
  if (this->online_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_online_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgDBLoginOut::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgDBLoginOut)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDBLoginOut* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgDBLoginOut>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgDBLoginOut)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgDBLoginOut)
    MergeFrom(*source);
  }
}

void MsgDBLoginOut::MergeFrom(const MsgDBLoginOut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgDBLoginOut)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.online_time() != 0) {
    _internal_set_online_time(from._internal_online_time());
  }
}

void MsgDBLoginOut::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgDBLoginOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBLoginOut::CopyFrom(const MsgDBLoginOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgDBLoginOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBLoginOut::IsInitialized() const {
  return true;
}

void MsgDBLoginOut::InternalSwap(MsgDBLoginOut* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgDBLoginOut, online_time_)
      + sizeof(MsgDBLoginOut::online_time_)
      - PROTOBUF_FIELD_OFFSET(MsgDBLoginOut, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDBLoginOut::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgDBUpdatePlayerInfo::_Internal {
 public:
};

MsgDBUpdatePlayerInfo::MsgDBUpdatePlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgDBUpdatePlayerInfo)
}
MsgDBUpdatePlayerInfo::MsgDBUpdatePlayerInfo(const MsgDBUpdatePlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phone().empty()) {
    phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phone(), 
      GetArena());
  }
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nickname().empty()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArena());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_type_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(user_type_));
  // @@protoc_insertion_point(copy_constructor:MsgDBUpdatePlayerInfo)
}

void MsgDBUpdatePlayerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgDBUpdatePlayerInfo_ServerInternalProto_2eproto.base);
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&user_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(user_type_));
}

MsgDBUpdatePlayerInfo::~MsgDBUpdatePlayerInfo() {
  // @@protoc_insertion_point(destructor:MsgDBUpdatePlayerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgDBUpdatePlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  phone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgDBUpdatePlayerInfo::ArenaDtor(void* object) {
  MsgDBUpdatePlayerInfo* _this = reinterpret_cast< MsgDBUpdatePlayerInfo* >(object);
  (void)_this;
}
void MsgDBUpdatePlayerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgDBUpdatePlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgDBUpdatePlayerInfo& MsgDBUpdatePlayerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgDBUpdatePlayerInfo_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgDBUpdatePlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgDBUpdatePlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phone_.ClearToEmpty();
  nickname_.ClearToEmpty();
  password_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(user_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDBUpdatePlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 beautiful_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          beautiful_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 user_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string phone = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_phone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgDBUpdatePlayerInfo.phone"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nickname = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgDBUpdatePlayerInfo.nickname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgDBUpdatePlayerInfo.password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgDBUpdatePlayerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDBUpdatePlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // int32 beautiful_id = 2;
  if (this->beautiful_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_beautiful_id(), target);
  }

  // int32 user_type = 3;
  if (this->user_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_user_type(), target);
  }

  // string phone = 4;
  if (this->phone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone().data(), static_cast<int>(this->_internal_phone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgDBUpdatePlayerInfo.phone");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_phone(), target);
  }

  // string nickname = 5;
  if (this->nickname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgDBUpdatePlayerInfo.nickname");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_nickname(), target);
  }

  // string password = 6;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgDBUpdatePlayerInfo.password");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDBUpdatePlayerInfo)
  return target;
}

size_t MsgDBUpdatePlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgDBUpdatePlayerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string phone = 4;
  if (this->phone().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone());
  }

  // string nickname = 5;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string password = 6;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // int32 beautiful_id = 2;
  if (this->beautiful_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_beautiful_id());
  }

  // int32 user_type = 3;
  if (this->user_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgDBUpdatePlayerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgDBUpdatePlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDBUpdatePlayerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgDBUpdatePlayerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgDBUpdatePlayerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgDBUpdatePlayerInfo)
    MergeFrom(*source);
  }
}

void MsgDBUpdatePlayerInfo::MergeFrom(const MsgDBUpdatePlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgDBUpdatePlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.phone().size() > 0) {
    _internal_set_phone(from._internal_phone());
  }
  if (from.nickname().size() > 0) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (from.password().size() > 0) {
    _internal_set_password(from._internal_password());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.beautiful_id() != 0) {
    _internal_set_beautiful_id(from._internal_beautiful_id());
  }
  if (from.user_type() != 0) {
    _internal_set_user_type(from._internal_user_type());
  }
}

void MsgDBUpdatePlayerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgDBUpdatePlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBUpdatePlayerInfo::CopyFrom(const MsgDBUpdatePlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgDBUpdatePlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBUpdatePlayerInfo::IsInitialized() const {
  return true;
}

void MsgDBUpdatePlayerInfo::InternalSwap(MsgDBUpdatePlayerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  phone_.Swap(&other->phone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nickname_.Swap(&other->nickname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgDBUpdatePlayerInfo, user_type_)
      + sizeof(MsgDBUpdatePlayerInfo::user_type_)
      - PROTOBUF_FIELD_OFFSET(MsgDBUpdatePlayerInfo, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDBUpdatePlayerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgDBMailData::_Internal {
 public:
};

MsgDBMailData::MsgDBMailData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgDBMailData)
}
MsgDBMailData::MsgDBMailData(const MsgDBMailData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&mail_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(mail_id_));
  // @@protoc_insertion_point(copy_constructor:MsgDBMailData)
}

void MsgDBMailData::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&mail_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(mail_id_));
}

MsgDBMailData::~MsgDBMailData() {
  // @@protoc_insertion_point(destructor:MsgDBMailData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgDBMailData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgDBMailData::ArenaDtor(void* object) {
  MsgDBMailData* _this = reinterpret_cast< MsgDBMailData* >(object);
  (void)_this;
}
void MsgDBMailData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgDBMailData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgDBMailData& MsgDBMailData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgDBMailData_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgDBMailData::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgDBMailData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mail_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(mail_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDBMailData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mail_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mail_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgDBMailData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDBMailData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // int32 mail_id = 2;
  if (this->mail_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mail_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDBMailData)
  return target;
}

size_t MsgDBMailData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgDBMailData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // int32 mail_id = 2;
  if (this->mail_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mail_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgDBMailData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgDBMailData)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDBMailData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgDBMailData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgDBMailData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgDBMailData)
    MergeFrom(*source);
  }
}

void MsgDBMailData::MergeFrom(const MsgDBMailData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgDBMailData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.mail_id() != 0) {
    _internal_set_mail_id(from._internal_mail_id());
  }
}

void MsgDBMailData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgDBMailData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBMailData::CopyFrom(const MsgDBMailData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgDBMailData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBMailData::IsInitialized() const {
  return true;
}

void MsgDBMailData::InternalSwap(MsgDBMailData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgDBMailData, mail_id_)
      + sizeof(MsgDBMailData::mail_id_)
      - PROTOBUF_FIELD_OFFSET(MsgDBMailData, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDBMailData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgDBMail::_Internal {
 public:
};

MsgDBMail::MsgDBMail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgDBMail)
}
MsgDBMail::MsgDBMail(const MsgDBMail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mail_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mail_title().empty()) {
    mail_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mail_title(), 
      GetArena());
  }
  mail_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mail_content().empty()) {
    mail_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mail_content(), 
      GetArena());
  }
  ::memcpy(&mail_guid_, &from.mail_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_custom_) -
    reinterpret_cast<char*>(&mail_guid_)) + sizeof(is_custom_));
  // @@protoc_insertion_point(copy_constructor:MsgDBMail)
}

void MsgDBMail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgDBMail_ServerInternalProto_2eproto.base);
  mail_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mail_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&mail_guid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_custom_) -
      reinterpret_cast<char*>(&mail_guid_)) + sizeof(is_custom_));
}

MsgDBMail::~MsgDBMail() {
  // @@protoc_insertion_point(destructor:MsgDBMail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgDBMail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mail_title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mail_content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgDBMail::ArenaDtor(void* object) {
  MsgDBMail* _this = reinterpret_cast< MsgDBMail* >(object);
  (void)_this;
}
void MsgDBMail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgDBMail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgDBMail& MsgDBMail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgDBMail_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgDBMail::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgDBMail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mail_title_.ClearToEmpty();
  mail_content_.ClearToEmpty();
  ::memset(&mail_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_custom_) -
      reinterpret_cast<char*>(&mail_guid_)) + sizeof(is_custom_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDBMail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mail_guid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mail_guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mail_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mail_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sender_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 recver_beautiful_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          recver_beautiful_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mail_title = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_mail_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgDBMail.mail_title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mail_content = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_mail_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgDBMail.mail_content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 gold = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 send_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          send_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_custom = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          is_custom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgDBMail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDBMail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mail_guid = 1;
  if (this->mail_guid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mail_guid(), target);
  }

  // int32 mail_id = 2;
  if (this->mail_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mail_id(), target);
  }

  // int32 sender_id = 3;
  if (this->sender_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sender_id(), target);
  }

  // int32 recver_beautiful_id = 4;
  if (this->recver_beautiful_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_recver_beautiful_id(), target);
  }

  // string mail_title = 5;
  if (this->mail_title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mail_title().data(), static_cast<int>(this->_internal_mail_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgDBMail.mail_title");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_mail_title(), target);
  }

  // string mail_content = 6;
  if (this->mail_content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mail_content().data(), static_cast<int>(this->_internal_mail_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgDBMail.mail_content");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_mail_content(), target);
  }

  // int64 gold = 7;
  if (this->gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_gold(), target);
  }

  // int64 send_time = 8;
  if (this->send_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_send_time(), target);
  }

  // int32 is_custom = 9;
  if (this->is_custom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_is_custom(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDBMail)
  return target;
}

size_t MsgDBMail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgDBMail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mail_title = 5;
  if (this->mail_title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mail_title());
  }

  // string mail_content = 6;
  if (this->mail_content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mail_content());
  }

  // int32 mail_guid = 1;
  if (this->mail_guid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mail_guid());
  }

  // int32 mail_id = 2;
  if (this->mail_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mail_id());
  }

  // int32 sender_id = 3;
  if (this->sender_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sender_id());
  }

  // int32 recver_beautiful_id = 4;
  if (this->recver_beautiful_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_recver_beautiful_id());
  }

  // int64 gold = 7;
  if (this->gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_gold());
  }

  // int64 send_time = 8;
  if (this->send_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_send_time());
  }

  // int32 is_custom = 9;
  if (this->is_custom() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_custom());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgDBMail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgDBMail)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDBMail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgDBMail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgDBMail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgDBMail)
    MergeFrom(*source);
  }
}

void MsgDBMail::MergeFrom(const MsgDBMail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgDBMail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mail_title().size() > 0) {
    _internal_set_mail_title(from._internal_mail_title());
  }
  if (from.mail_content().size() > 0) {
    _internal_set_mail_content(from._internal_mail_content());
  }
  if (from.mail_guid() != 0) {
    _internal_set_mail_guid(from._internal_mail_guid());
  }
  if (from.mail_id() != 0) {
    _internal_set_mail_id(from._internal_mail_id());
  }
  if (from.sender_id() != 0) {
    _internal_set_sender_id(from._internal_sender_id());
  }
  if (from.recver_beautiful_id() != 0) {
    _internal_set_recver_beautiful_id(from._internal_recver_beautiful_id());
  }
  if (from.gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
  if (from.send_time() != 0) {
    _internal_set_send_time(from._internal_send_time());
  }
  if (from.is_custom() != 0) {
    _internal_set_is_custom(from._internal_is_custom());
  }
}

void MsgDBMail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgDBMail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBMail::CopyFrom(const MsgDBMail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgDBMail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBMail::IsInitialized() const {
  return true;
}

void MsgDBMail::InternalSwap(MsgDBMail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mail_title_.Swap(&other->mail_title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mail_content_.Swap(&other->mail_content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgDBMail, is_custom_)
      + sizeof(MsgDBMail::is_custom_)
      - PROTOBUF_FIELD_OFFSET(MsgDBMail, mail_guid_)>(
          reinterpret_cast<char*>(&mail_guid_),
          reinterpret_cast<char*>(&other->mail_guid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDBMail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgDBRegisterGame::_Internal {
 public:
};

MsgDBRegisterGame::MsgDBRegisterGame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgDBRegisterGame)
}
MsgDBRegisterGame::MsgDBRegisterGame(const MsgDBRegisterGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  server_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_server_name().empty()) {
    server_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_server_name(), 
      GetArena());
  }
  server_id_ = from.server_id_;
  // @@protoc_insertion_point(copy_constructor:MsgDBRegisterGame)
}

void MsgDBRegisterGame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgDBRegisterGame_ServerInternalProto_2eproto.base);
  server_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_id_ = 0;
}

MsgDBRegisterGame::~MsgDBRegisterGame() {
  // @@protoc_insertion_point(destructor:MsgDBRegisterGame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgDBRegisterGame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  server_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgDBRegisterGame::ArenaDtor(void* object) {
  MsgDBRegisterGame* _this = reinterpret_cast< MsgDBRegisterGame* >(object);
  (void)_this;
}
void MsgDBRegisterGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgDBRegisterGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgDBRegisterGame& MsgDBRegisterGame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgDBRegisterGame_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgDBRegisterGame::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgDBRegisterGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_name_.ClearToEmpty();
  server_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDBRegisterGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string server_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_server_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgDBRegisterGame.server_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgDBRegisterGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDBRegisterGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_server_id(), target);
  }

  // string server_name = 2;
  if (this->server_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_name().data(), static_cast<int>(this->_internal_server_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgDBRegisterGame.server_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_server_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDBRegisterGame)
  return target;
}

size_t MsgDBRegisterGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgDBRegisterGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string server_name = 2;
  if (this->server_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_name());
  }

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgDBRegisterGame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgDBRegisterGame)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDBRegisterGame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgDBRegisterGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgDBRegisterGame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgDBRegisterGame)
    MergeFrom(*source);
  }
}

void MsgDBRegisterGame::MergeFrom(const MsgDBRegisterGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgDBRegisterGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_name().size() > 0) {
    _internal_set_server_name(from._internal_server_name());
  }
  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
}

void MsgDBRegisterGame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgDBRegisterGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBRegisterGame::CopyFrom(const MsgDBRegisterGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgDBRegisterGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBRegisterGame::IsInitialized() const {
  return true;
}

void MsgDBRegisterGame::InternalSwap(MsgDBRegisterGame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  server_name_.Swap(&other->server_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(server_id_, other->server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDBRegisterGame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgDBLoadRobot::_Internal {
 public:
};

MsgDBLoadRobot::MsgDBLoadRobot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  user_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgDBLoadRobot)
}
MsgDBLoadRobot::MsgDBLoadRobot(const MsgDBLoadRobot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      user_id_(from.user_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MsgDBLoadRobot)
}

void MsgDBLoadRobot::SharedCtor() {
}

MsgDBLoadRobot::~MsgDBLoadRobot() {
  // @@protoc_insertion_point(destructor:MsgDBLoadRobot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgDBLoadRobot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgDBLoadRobot::ArenaDtor(void* object) {
  MsgDBLoadRobot* _this = reinterpret_cast< MsgDBLoadRobot* >(object);
  (void)_this;
}
void MsgDBLoadRobot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgDBLoadRobot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgDBLoadRobot& MsgDBLoadRobot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgDBLoadRobot_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgDBLoadRobot::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgDBLoadRobot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDBLoadRobot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_user_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_user_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgDBLoadRobot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDBLoadRobot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 user_id = 1;
  {
    int byte_size = _user_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_user_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDBLoadRobot)
  return target;
}

size_t MsgDBLoadRobot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgDBLoadRobot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 user_id = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->user_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _user_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgDBLoadRobot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgDBLoadRobot)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDBLoadRobot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgDBLoadRobot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgDBLoadRobot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgDBLoadRobot)
    MergeFrom(*source);
  }
}

void MsgDBLoadRobot::MergeFrom(const MsgDBLoadRobot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgDBLoadRobot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_id_.MergeFrom(from.user_id_);
}

void MsgDBLoadRobot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgDBLoadRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBLoadRobot::CopyFrom(const MsgDBLoadRobot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgDBLoadRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBLoadRobot::IsInitialized() const {
  return true;
}

void MsgDBLoadRobot::InternalSwap(MsgDBLoadRobot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_id_.InternalSwap(&other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDBLoadRobot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgDBGamePlayerLogin::_Internal {
 public:
};

MsgDBGamePlayerLogin::MsgDBGamePlayerLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgDBGamePlayerLogin)
}
MsgDBGamePlayerLogin::MsgDBGamePlayerLogin(const MsgDBGamePlayerLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArena());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ip_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(ip_));
  // @@protoc_insertion_point(copy_constructor:MsgDBGamePlayerLogin)
}

void MsgDBGamePlayerLogin::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgDBGamePlayerLogin_ServerInternalProto_2eproto.base);
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ip_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(ip_));
}

MsgDBGamePlayerLogin::~MsgDBGamePlayerLogin() {
  // @@protoc_insertion_point(destructor:MsgDBGamePlayerLogin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgDBGamePlayerLogin::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgDBGamePlayerLogin::ArenaDtor(void* object) {
  MsgDBGamePlayerLogin* _this = reinterpret_cast< MsgDBGamePlayerLogin* >(object);
  (void)_this;
}
void MsgDBGamePlayerLogin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgDBGamePlayerLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgDBGamePlayerLogin& MsgDBGamePlayerLogin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgDBGamePlayerLogin_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgDBGamePlayerLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgDBGamePlayerLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  password_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ip_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(ip_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDBGamePlayerLogin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgDBGamePlayerLogin.password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgDBGamePlayerLogin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDBGamePlayerLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgDBGamePlayerLogin.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  // int32 ip = 3;
  if (this->ip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDBGamePlayerLogin)
  return target;
}

size_t MsgDBGamePlayerLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgDBGamePlayerLogin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // int32 ip = 3;
  if (this->ip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ip());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgDBGamePlayerLogin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgDBGamePlayerLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDBGamePlayerLogin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgDBGamePlayerLogin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgDBGamePlayerLogin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgDBGamePlayerLogin)
    MergeFrom(*source);
  }
}

void MsgDBGamePlayerLogin::MergeFrom(const MsgDBGamePlayerLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgDBGamePlayerLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.password().size() > 0) {
    _internal_set_password(from._internal_password());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.ip() != 0) {
    _internal_set_ip(from._internal_ip());
  }
}

void MsgDBGamePlayerLogin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgDBGamePlayerLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBGamePlayerLogin::CopyFrom(const MsgDBGamePlayerLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgDBGamePlayerLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBGamePlayerLogin::IsInitialized() const {
  return true;
}

void MsgDBGamePlayerLogin::InternalSwap(MsgDBGamePlayerLogin* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgDBGamePlayerLogin, ip_)
      + sizeof(MsgDBGamePlayerLogin::ip_)
      - PROTOBUF_FIELD_OFFSET(MsgDBGamePlayerLogin, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDBGamePlayerLogin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgDBPlayerReconnectData::_Internal {
 public:
};

MsgDBPlayerReconnectData::MsgDBPlayerReconnectData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  param_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgDBPlayerReconnectData)
}
MsgDBPlayerReconnectData::MsgDBPlayerReconnectData(const MsgDBPlayerReconnectData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      param_(from.param_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&small_game_fail_cnt_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(small_game_fail_cnt_));
  // @@protoc_insertion_point(copy_constructor:MsgDBPlayerReconnectData)
}

void MsgDBPlayerReconnectData::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&small_game_fail_cnt_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(small_game_fail_cnt_));
}

MsgDBPlayerReconnectData::~MsgDBPlayerReconnectData() {
  // @@protoc_insertion_point(destructor:MsgDBPlayerReconnectData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgDBPlayerReconnectData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgDBPlayerReconnectData::ArenaDtor(void* object) {
  MsgDBPlayerReconnectData* _this = reinterpret_cast< MsgDBPlayerReconnectData* >(object);
  (void)_this;
}
void MsgDBPlayerReconnectData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgDBPlayerReconnectData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgDBPlayerReconnectData& MsgDBPlayerReconnectData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgDBPlayerReconnectData_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgDBPlayerReconnectData::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgDBPlayerReconnectData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  param_.Clear();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&small_game_fail_cnt_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(small_game_fail_cnt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDBPlayerReconnectData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 server_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 multiple = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score_bonus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          score_bonus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 left_free_game_cnt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          left_free_game_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 small_game_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          small_game_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 small_game_fail_cnt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          small_game_fail_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 param = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_param(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_param(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgDBPlayerReconnectData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDBPlayerReconnectData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // int32 server_id = 2;
  if (this->server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_server_id(), target);
  }

  // int32 multiple = 3;
  if (this->multiple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_multiple(), target);
  }

  // int32 score_bonus = 4;
  if (this->score_bonus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_score_bonus(), target);
  }

  // int32 left_free_game_cnt = 5;
  if (this->left_free_game_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_left_free_game_cnt(), target);
  }

  // int32 small_game_type = 6;
  if (this->small_game_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_small_game_type(), target);
  }

  // int32 small_game_fail_cnt = 7;
  if (this->small_game_fail_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_small_game_fail_cnt(), target);
  }

  // repeated int32 param = 8;
  {
    int byte_size = _param_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_param(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDBPlayerReconnectData)
  return target;
}

size_t MsgDBPlayerReconnectData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgDBPlayerReconnectData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 param = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->param_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _param_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // int32 server_id = 2;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_id());
  }

  // int32 multiple = 3;
  if (this->multiple() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_multiple());
  }

  // int32 score_bonus = 4;
  if (this->score_bonus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score_bonus());
  }

  // int32 left_free_game_cnt = 5;
  if (this->left_free_game_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_left_free_game_cnt());
  }

  // int32 small_game_type = 6;
  if (this->small_game_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_small_game_type());
  }

  // int32 small_game_fail_cnt = 7;
  if (this->small_game_fail_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_small_game_fail_cnt());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgDBPlayerReconnectData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgDBPlayerReconnectData)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDBPlayerReconnectData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgDBPlayerReconnectData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgDBPlayerReconnectData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgDBPlayerReconnectData)
    MergeFrom(*source);
  }
}

void MsgDBPlayerReconnectData::MergeFrom(const MsgDBPlayerReconnectData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgDBPlayerReconnectData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  param_.MergeFrom(from.param_);
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from.multiple() != 0) {
    _internal_set_multiple(from._internal_multiple());
  }
  if (from.score_bonus() != 0) {
    _internal_set_score_bonus(from._internal_score_bonus());
  }
  if (from.left_free_game_cnt() != 0) {
    _internal_set_left_free_game_cnt(from._internal_left_free_game_cnt());
  }
  if (from.small_game_type() != 0) {
    _internal_set_small_game_type(from._internal_small_game_type());
  }
  if (from.small_game_fail_cnt() != 0) {
    _internal_set_small_game_fail_cnt(from._internal_small_game_fail_cnt());
  }
}

void MsgDBPlayerReconnectData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgDBPlayerReconnectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBPlayerReconnectData::CopyFrom(const MsgDBPlayerReconnectData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgDBPlayerReconnectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBPlayerReconnectData::IsInitialized() const {
  return true;
}

void MsgDBPlayerReconnectData::InternalSwap(MsgDBPlayerReconnectData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  param_.InternalSwap(&other->param_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgDBPlayerReconnectData, small_game_fail_cnt_)
      + sizeof(MsgDBPlayerReconnectData::small_game_fail_cnt_)
      - PROTOBUF_FIELD_OFFSET(MsgDBPlayerReconnectData, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDBPlayerReconnectData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgDBGamePlayerLoginResp::_Internal {
 public:
  static const ::MsgDBPlayerReconnectData& reconnect_data(const MsgDBGamePlayerLoginResp* msg);
};

const ::MsgDBPlayerReconnectData&
MsgDBGamePlayerLoginResp::_Internal::reconnect_data(const MsgDBGamePlayerLoginResp* msg) {
  return *msg->reconnect_data_;
}
MsgDBGamePlayerLoginResp::MsgDBGamePlayerLoginResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgDBGamePlayerLoginResp)
}
MsgDBGamePlayerLoginResp::MsgDBGamePlayerLoginResp(const MsgDBGamePlayerLoginResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nickname().empty()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArena());
  }
  avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar().empty()) {
    avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar(), 
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArena());
  }
  if (from._internal_has_reconnect_data()) {
    reconnect_data_ = new ::MsgDBPlayerReconnectData(*from.reconnect_data_);
  } else {
    reconnect_data_ = nullptr;
  }
  ::memcpy(&res_code_, &from.res_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&vip_) -
    reinterpret_cast<char*>(&res_code_)) + sizeof(vip_));
  // @@protoc_insertion_point(copy_constructor:MsgDBGamePlayerLoginResp)
}

void MsgDBGamePlayerLoginResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgDBGamePlayerLoginResp_ServerInternalProto_2eproto.base);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&reconnect_data_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&vip_) -
      reinterpret_cast<char*>(&reconnect_data_)) + sizeof(vip_));
}

MsgDBGamePlayerLoginResp::~MsgDBGamePlayerLoginResp() {
  // @@protoc_insertion_point(destructor:MsgDBGamePlayerLoginResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgDBGamePlayerLoginResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete reconnect_data_;
}

void MsgDBGamePlayerLoginResp::ArenaDtor(void* object) {
  MsgDBGamePlayerLoginResp* _this = reinterpret_cast< MsgDBGamePlayerLoginResp* >(object);
  (void)_this;
}
void MsgDBGamePlayerLoginResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgDBGamePlayerLoginResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgDBGamePlayerLoginResp& MsgDBGamePlayerLoginResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgDBGamePlayerLoginResp_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgDBGamePlayerLoginResp::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgDBGamePlayerLoginResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nickname_.ClearToEmpty();
  avatar_.ClearToEmpty();
  password_.ClearToEmpty();
  if (GetArena() == nullptr && reconnect_data_ != nullptr) {
    delete reconnect_data_;
  }
  reconnect_data_ = nullptr;
  ::memset(&res_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vip_) -
      reinterpret_cast<char*>(&res_code_)) + sizeof(vip_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDBGamePlayerLoginResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 res_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          res_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 beautiful_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          beautiful_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nickname = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgDBGamePlayerLoginResp.nickname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatar = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_avatar();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgDBGamePlayerLoginResp.avatar"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 coin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgDBGamePlayerLoginResp.password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cheat_rate = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          cheat_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool vip = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MsgDBPlayerReconnectData reconnect_data = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_reconnect_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgDBGamePlayerLoginResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDBGamePlayerLoginResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 res_code = 1;
  if (this->res_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_res_code(), target);
  }

  // int32 user_id = 2;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_user_id(), target);
  }

  // int32 beautiful_id = 3;
  if (this->beautiful_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_beautiful_id(), target);
  }

  // string nickname = 4;
  if (this->nickname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgDBGamePlayerLoginResp.nickname");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_nickname(), target);
  }

  // string avatar = 5;
  if (this->avatar().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar().data(), static_cast<int>(this->_internal_avatar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgDBGamePlayerLoginResp.avatar");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_avatar(), target);
  }

  // uint64 coin = 6;
  if (this->coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_coin(), target);
  }

  // string password = 7;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgDBGamePlayerLoginResp.password");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_password(), target);
  }

  // int32 cheat_rate = 8;
  if (this->cheat_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_cheat_rate(), target);
  }

  // bool vip = 9;
  if (this->vip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_vip(), target);
  }

  // .MsgDBPlayerReconnectData reconnect_data = 10;
  if (this->has_reconnect_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::reconnect_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDBGamePlayerLoginResp)
  return target;
}

size_t MsgDBGamePlayerLoginResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgDBGamePlayerLoginResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickname = 4;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string avatar = 5;
  if (this->avatar().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar());
  }

  // string password = 7;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // .MsgDBPlayerReconnectData reconnect_data = 10;
  if (this->has_reconnect_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reconnect_data_);
  }

  // int32 res_code = 1;
  if (this->res_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_res_code());
  }

  // int32 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // int32 beautiful_id = 3;
  if (this->beautiful_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_beautiful_id());
  }

  // int32 cheat_rate = 8;
  if (this->cheat_rate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cheat_rate());
  }

  // uint64 coin = 6;
  if (this->coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_coin());
  }

  // bool vip = 9;
  if (this->vip() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgDBGamePlayerLoginResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgDBGamePlayerLoginResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDBGamePlayerLoginResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgDBGamePlayerLoginResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgDBGamePlayerLoginResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgDBGamePlayerLoginResp)
    MergeFrom(*source);
  }
}

void MsgDBGamePlayerLoginResp::MergeFrom(const MsgDBGamePlayerLoginResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgDBGamePlayerLoginResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nickname().size() > 0) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (from.avatar().size() > 0) {
    _internal_set_avatar(from._internal_avatar());
  }
  if (from.password().size() > 0) {
    _internal_set_password(from._internal_password());
  }
  if (from.has_reconnect_data()) {
    _internal_mutable_reconnect_data()->::MsgDBPlayerReconnectData::MergeFrom(from._internal_reconnect_data());
  }
  if (from.res_code() != 0) {
    _internal_set_res_code(from._internal_res_code());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.beautiful_id() != 0) {
    _internal_set_beautiful_id(from._internal_beautiful_id());
  }
  if (from.cheat_rate() != 0) {
    _internal_set_cheat_rate(from._internal_cheat_rate());
  }
  if (from.coin() != 0) {
    _internal_set_coin(from._internal_coin());
  }
  if (from.vip() != 0) {
    _internal_set_vip(from._internal_vip());
  }
}

void MsgDBGamePlayerLoginResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgDBGamePlayerLoginResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBGamePlayerLoginResp::CopyFrom(const MsgDBGamePlayerLoginResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgDBGamePlayerLoginResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBGamePlayerLoginResp::IsInitialized() const {
  return true;
}

void MsgDBGamePlayerLoginResp::InternalSwap(MsgDBGamePlayerLoginResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nickname_.Swap(&other->nickname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  avatar_.Swap(&other->avatar_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgDBGamePlayerLoginResp, vip_)
      + sizeof(MsgDBGamePlayerLoginResp::vip_)
      - PROTOBUF_FIELD_OFFSET(MsgDBGamePlayerLoginResp, reconnect_data_)>(
          reinterpret_cast<char*>(&reconnect_data_),
          reinterpret_cast<char*>(&other->reconnect_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDBGamePlayerLoginResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgDBWriteScore::_Internal {
 public:
};

MsgDBWriteScore::MsgDBWriteScore(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgDBWriteScore)
}
MsgDBWriteScore::MsgDBWriteScore(const MsgDBWriteScore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_details_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_game_details().empty()) {
    game_details_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_details(), 
      GetArena());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_up_rank_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(is_up_rank_));
  // @@protoc_insertion_point(copy_constructor:MsgDBWriteScore)
}

void MsgDBWriteScore::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgDBWriteScore_ServerInternalProto_2eproto.base);
  game_details_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_up_rank_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(is_up_rank_));
}

MsgDBWriteScore::~MsgDBWriteScore() {
  // @@protoc_insertion_point(destructor:MsgDBWriteScore)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgDBWriteScore::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  game_details_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgDBWriteScore::ArenaDtor(void* object) {
  MsgDBWriteScore* _this = reinterpret_cast< MsgDBWriteScore* >(object);
  (void)_this;
}
void MsgDBWriteScore::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgDBWriteScore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgDBWriteScore& MsgDBWriteScore::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgDBWriteScore_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgDBWriteScore::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgDBWriteScore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_details_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_up_rank_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(is_up_rank_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDBWriteScore::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_up_rank = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_up_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string game_details = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_game_details();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgDBWriteScore.game_details"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgDBWriteScore::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDBWriteScore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // int32 bet = 2;
  if (this->bet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bet(), target);
  }

  // int64 score = 3;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_score(), target);
  }

  // int32 is_up_rank = 4;
  if (this->is_up_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_is_up_rank(), target);
  }

  // string game_details = 5;
  if (this->game_details().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_game_details().data(), static_cast<int>(this->_internal_game_details().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgDBWriteScore.game_details");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_game_details(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDBWriteScore)
  return target;
}

size_t MsgDBWriteScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgDBWriteScore)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string game_details = 5;
  if (this->game_details().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_game_details());
  }

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // int32 bet = 2;
  if (this->bet() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bet());
  }

  // int64 score = 3;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_score());
  }

  // int32 is_up_rank = 4;
  if (this->is_up_rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_up_rank());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgDBWriteScore::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgDBWriteScore)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDBWriteScore* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgDBWriteScore>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgDBWriteScore)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgDBWriteScore)
    MergeFrom(*source);
  }
}

void MsgDBWriteScore::MergeFrom(const MsgDBWriteScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgDBWriteScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.game_details().size() > 0) {
    _internal_set_game_details(from._internal_game_details());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.bet() != 0) {
    _internal_set_bet(from._internal_bet());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.is_up_rank() != 0) {
    _internal_set_is_up_rank(from._internal_is_up_rank());
  }
}

void MsgDBWriteScore::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgDBWriteScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBWriteScore::CopyFrom(const MsgDBWriteScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgDBWriteScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBWriteScore::IsInitialized() const {
  return true;
}

void MsgDBWriteScore::InternalSwap(MsgDBWriteScore* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  game_details_.Swap(&other->game_details_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgDBWriteScore, is_up_rank_)
      + sizeof(MsgDBWriteScore::is_up_rank_)
      - PROTOBUF_FIELD_OFFSET(MsgDBWriteScore, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDBWriteScore::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgDBWriteScoreResp::_Internal {
 public:
};

MsgDBWriteScoreResp::MsgDBWriteScoreResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgDBWriteScoreResp)
}
MsgDBWriteScoreResp::MsgDBWriteScoreResp(const MsgDBWriteScoreResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_score_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(player_score_));
  // @@protoc_insertion_point(copy_constructor:MsgDBWriteScoreResp)
}

void MsgDBWriteScoreResp::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&player_score_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(player_score_));
}

MsgDBWriteScoreResp::~MsgDBWriteScoreResp() {
  // @@protoc_insertion_point(destructor:MsgDBWriteScoreResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgDBWriteScoreResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgDBWriteScoreResp::ArenaDtor(void* object) {
  MsgDBWriteScoreResp* _this = reinterpret_cast< MsgDBWriteScoreResp* >(object);
  (void)_this;
}
void MsgDBWriteScoreResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgDBWriteScoreResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgDBWriteScoreResp& MsgDBWriteScoreResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgDBWriteScoreResp_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgDBWriteScoreResp::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgDBWriteScoreResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_score_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(player_score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDBWriteScoreResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 player_cheat_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          player_cheat_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 player_cheat_score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          player_cheat_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 system_cheat_rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          system_cheat_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 system_cheat_score = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          system_cheat_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 system_blood_min_line = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          system_blood_min_line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 system_blood_max_line = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          system_blood_max_line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 player_score = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          player_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgDBWriteScoreResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDBWriteScoreResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // int32 player_cheat_rate = 2;
  if (this->player_cheat_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_cheat_rate(), target);
  }

  // int32 player_cheat_score = 3;
  if (this->player_cheat_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_player_cheat_score(), target);
  }

  // int32 system_cheat_rate = 4;
  if (this->system_cheat_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_system_cheat_rate(), target);
  }

  // int64 system_cheat_score = 5;
  if (this->system_cheat_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_system_cheat_score(), target);
  }

  // int64 system_blood_min_line = 6;
  if (this->system_blood_min_line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_system_blood_min_line(), target);
  }

  // int64 system_blood_max_line = 7;
  if (this->system_blood_max_line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_system_blood_max_line(), target);
  }

  // int64 player_score = 8;
  if (this->player_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_player_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDBWriteScoreResp)
  return target;
}

size_t MsgDBWriteScoreResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgDBWriteScoreResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // int32 player_cheat_rate = 2;
  if (this->player_cheat_rate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_cheat_rate());
  }

  // int32 player_cheat_score = 3;
  if (this->player_cheat_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_cheat_score());
  }

  // int32 system_cheat_rate = 4;
  if (this->system_cheat_rate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_system_cheat_rate());
  }

  // int64 system_cheat_score = 5;
  if (this->system_cheat_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_system_cheat_score());
  }

  // int64 system_blood_min_line = 6;
  if (this->system_blood_min_line() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_system_blood_min_line());
  }

  // int64 system_blood_max_line = 7;
  if (this->system_blood_max_line() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_system_blood_max_line());
  }

  // int64 player_score = 8;
  if (this->player_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_player_score());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgDBWriteScoreResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgDBWriteScoreResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDBWriteScoreResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgDBWriteScoreResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgDBWriteScoreResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgDBWriteScoreResp)
    MergeFrom(*source);
  }
}

void MsgDBWriteScoreResp::MergeFrom(const MsgDBWriteScoreResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgDBWriteScoreResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.player_cheat_rate() != 0) {
    _internal_set_player_cheat_rate(from._internal_player_cheat_rate());
  }
  if (from.player_cheat_score() != 0) {
    _internal_set_player_cheat_score(from._internal_player_cheat_score());
  }
  if (from.system_cheat_rate() != 0) {
    _internal_set_system_cheat_rate(from._internal_system_cheat_rate());
  }
  if (from.system_cheat_score() != 0) {
    _internal_set_system_cheat_score(from._internal_system_cheat_score());
  }
  if (from.system_blood_min_line() != 0) {
    _internal_set_system_blood_min_line(from._internal_system_blood_min_line());
  }
  if (from.system_blood_max_line() != 0) {
    _internal_set_system_blood_max_line(from._internal_system_blood_max_line());
  }
  if (from.player_score() != 0) {
    _internal_set_player_score(from._internal_player_score());
  }
}

void MsgDBWriteScoreResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgDBWriteScoreResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBWriteScoreResp::CopyFrom(const MsgDBWriteScoreResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgDBWriteScoreResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBWriteScoreResp::IsInitialized() const {
  return true;
}

void MsgDBWriteScoreResp::InternalSwap(MsgDBWriteScoreResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgDBWriteScoreResp, player_score_)
      + sizeof(MsgDBWriteScoreResp::player_score_)
      - PROTOBUF_FIELD_OFFSET(MsgDBWriteScoreResp, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDBWriteScoreResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgDBFingerGuessWriteScore::_Internal {
 public:
};

MsgDBFingerGuessWriteScore::MsgDBFingerGuessWriteScore(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgDBFingerGuessWriteScore)
}
MsgDBFingerGuessWriteScore::MsgDBFingerGuessWriteScore(const MsgDBFingerGuessWriteScore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&banker_user_id_, &from.banker_user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&banker_user_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:MsgDBFingerGuessWriteScore)
}

void MsgDBFingerGuessWriteScore::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&banker_user_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&banker_user_id_)) + sizeof(result_));
}

MsgDBFingerGuessWriteScore::~MsgDBFingerGuessWriteScore() {
  // @@protoc_insertion_point(destructor:MsgDBFingerGuessWriteScore)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgDBFingerGuessWriteScore::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgDBFingerGuessWriteScore::ArenaDtor(void* object) {
  MsgDBFingerGuessWriteScore* _this = reinterpret_cast< MsgDBFingerGuessWriteScore* >(object);
  (void)_this;
}
void MsgDBFingerGuessWriteScore::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgDBFingerGuessWriteScore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgDBFingerGuessWriteScore& MsgDBFingerGuessWriteScore::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgDBFingerGuessWriteScore_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgDBFingerGuessWriteScore::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgDBFingerGuessWriteScore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&banker_user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&banker_user_id_)) + sizeof(result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDBFingerGuessWriteScore::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 banker_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          banker_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 player_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          player_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 bet = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgDBFingerGuessWriteScore::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDBFingerGuessWriteScore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 banker_user_id = 1;
  if (this->banker_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_banker_user_id(), target);
  }

  // int32 player_user_id = 2;
  if (this->player_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_user_id(), target);
  }

  // int32 result = 3;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_result(), target);
  }

  // int64 bet = 4;
  if (this->bet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_bet(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDBFingerGuessWriteScore)
  return target;
}

size_t MsgDBFingerGuessWriteScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgDBFingerGuessWriteScore)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 banker_user_id = 1;
  if (this->banker_user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_banker_user_id());
  }

  // int32 player_user_id = 2;
  if (this->player_user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_user_id());
  }

  // int64 bet = 4;
  if (this->bet() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_bet());
  }

  // int32 result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgDBFingerGuessWriteScore::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgDBFingerGuessWriteScore)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDBFingerGuessWriteScore* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgDBFingerGuessWriteScore>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgDBFingerGuessWriteScore)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgDBFingerGuessWriteScore)
    MergeFrom(*source);
  }
}

void MsgDBFingerGuessWriteScore::MergeFrom(const MsgDBFingerGuessWriteScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgDBFingerGuessWriteScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.banker_user_id() != 0) {
    _internal_set_banker_user_id(from._internal_banker_user_id());
  }
  if (from.player_user_id() != 0) {
    _internal_set_player_user_id(from._internal_player_user_id());
  }
  if (from.bet() != 0) {
    _internal_set_bet(from._internal_bet());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void MsgDBFingerGuessWriteScore::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgDBFingerGuessWriteScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBFingerGuessWriteScore::CopyFrom(const MsgDBFingerGuessWriteScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgDBFingerGuessWriteScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBFingerGuessWriteScore::IsInitialized() const {
  return true;
}

void MsgDBFingerGuessWriteScore::InternalSwap(MsgDBFingerGuessWriteScore* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgDBFingerGuessWriteScore, result_)
      + sizeof(MsgDBFingerGuessWriteScore::result_)
      - PROTOBUF_FIELD_OFFSET(MsgDBFingerGuessWriteScore, banker_user_id_)>(
          reinterpret_cast<char*>(&banker_user_id_),
          reinterpret_cast<char*>(&other->banker_user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDBFingerGuessWriteScore::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgDBFingerGuessWriteScoreResp::_Internal {
 public:
};

MsgDBFingerGuessWriteScoreResp::MsgDBFingerGuessWriteScoreResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgDBFingerGuessWriteScoreResp)
}
MsgDBFingerGuessWriteScoreResp::MsgDBFingerGuessWriteScoreResp(const MsgDBFingerGuessWriteScoreResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&win_user_id_, &from.win_user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&bet_) -
    reinterpret_cast<char*>(&win_user_id_)) + sizeof(bet_));
  // @@protoc_insertion_point(copy_constructor:MsgDBFingerGuessWriteScoreResp)
}

void MsgDBFingerGuessWriteScoreResp::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&win_user_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bet_) -
      reinterpret_cast<char*>(&win_user_id_)) + sizeof(bet_));
}

MsgDBFingerGuessWriteScoreResp::~MsgDBFingerGuessWriteScoreResp() {
  // @@protoc_insertion_point(destructor:MsgDBFingerGuessWriteScoreResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgDBFingerGuessWriteScoreResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgDBFingerGuessWriteScoreResp::ArenaDtor(void* object) {
  MsgDBFingerGuessWriteScoreResp* _this = reinterpret_cast< MsgDBFingerGuessWriteScoreResp* >(object);
  (void)_this;
}
void MsgDBFingerGuessWriteScoreResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgDBFingerGuessWriteScoreResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgDBFingerGuessWriteScoreResp& MsgDBFingerGuessWriteScoreResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgDBFingerGuessWriteScoreResp_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgDBFingerGuessWriteScoreResp::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgDBFingerGuessWriteScoreResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&win_user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bet_) -
      reinterpret_cast<char*>(&win_user_id_)) + sizeof(bet_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDBFingerGuessWriteScoreResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 win_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          win_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lose_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          lose_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 win_user_gold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          win_user_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 lose_user_gold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lose_user_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 result = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 bet = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          bet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgDBFingerGuessWriteScoreResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDBFingerGuessWriteScoreResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 win_user_id = 1;
  if (this->win_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_win_user_id(), target);
  }

  // int32 lose_user_id = 2;
  if (this->lose_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_lose_user_id(), target);
  }

  // int64 win_user_gold = 3;
  if (this->win_user_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_win_user_gold(), target);
  }

  // int64 lose_user_gold = 4;
  if (this->lose_user_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_lose_user_gold(), target);
  }

  // int32 time = 5;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_time(), target);
  }

  // int32 result = 6;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_result(), target);
  }

  // int64 bet = 7;
  if (this->bet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_bet(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDBFingerGuessWriteScoreResp)
  return target;
}

size_t MsgDBFingerGuessWriteScoreResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgDBFingerGuessWriteScoreResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 win_user_id = 1;
  if (this->win_user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_win_user_id());
  }

  // int32 lose_user_id = 2;
  if (this->lose_user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lose_user_id());
  }

  // int64 win_user_gold = 3;
  if (this->win_user_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_win_user_gold());
  }

  // int64 lose_user_gold = 4;
  if (this->lose_user_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lose_user_gold());
  }

  // int32 time = 5;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());
  }

  // int32 result = 6;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  // int64 bet = 7;
  if (this->bet() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_bet());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgDBFingerGuessWriteScoreResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgDBFingerGuessWriteScoreResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDBFingerGuessWriteScoreResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgDBFingerGuessWriteScoreResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgDBFingerGuessWriteScoreResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgDBFingerGuessWriteScoreResp)
    MergeFrom(*source);
  }
}

void MsgDBFingerGuessWriteScoreResp::MergeFrom(const MsgDBFingerGuessWriteScoreResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgDBFingerGuessWriteScoreResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.win_user_id() != 0) {
    _internal_set_win_user_id(from._internal_win_user_id());
  }
  if (from.lose_user_id() != 0) {
    _internal_set_lose_user_id(from._internal_lose_user_id());
  }
  if (from.win_user_gold() != 0) {
    _internal_set_win_user_gold(from._internal_win_user_gold());
  }
  if (from.lose_user_gold() != 0) {
    _internal_set_lose_user_gold(from._internal_lose_user_gold());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.bet() != 0) {
    _internal_set_bet(from._internal_bet());
  }
}

void MsgDBFingerGuessWriteScoreResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgDBFingerGuessWriteScoreResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBFingerGuessWriteScoreResp::CopyFrom(const MsgDBFingerGuessWriteScoreResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgDBFingerGuessWriteScoreResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBFingerGuessWriteScoreResp::IsInitialized() const {
  return true;
}

void MsgDBFingerGuessWriteScoreResp::InternalSwap(MsgDBFingerGuessWriteScoreResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgDBFingerGuessWriteScoreResp, bet_)
      + sizeof(MsgDBFingerGuessWriteScoreResp::bet_)
      - PROTOBUF_FIELD_OFFSET(MsgDBFingerGuessWriteScoreResp, win_user_id_)>(
          reinterpret_cast<char*>(&win_user_id_),
          reinterpret_cast<char*>(&other->win_user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDBFingerGuessWriteScoreResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgDBFingerGuessQueryRecord::_Internal {
 public:
};

MsgDBFingerGuessQueryRecord::MsgDBFingerGuessQueryRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgDBFingerGuessQueryRecord)
}
MsgDBFingerGuessQueryRecord::MsgDBFingerGuessQueryRecord(const MsgDBFingerGuessQueryRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&page_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:MsgDBFingerGuessQueryRecord)
}

void MsgDBFingerGuessQueryRecord::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&page_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&page_)) + sizeof(user_id_));
}

MsgDBFingerGuessQueryRecord::~MsgDBFingerGuessQueryRecord() {
  // @@protoc_insertion_point(destructor:MsgDBFingerGuessQueryRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgDBFingerGuessQueryRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgDBFingerGuessQueryRecord::ArenaDtor(void* object) {
  MsgDBFingerGuessQueryRecord* _this = reinterpret_cast< MsgDBFingerGuessQueryRecord* >(object);
  (void)_this;
}
void MsgDBFingerGuessQueryRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgDBFingerGuessQueryRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgDBFingerGuessQueryRecord& MsgDBFingerGuessQueryRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgDBFingerGuessQueryRecord_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgDBFingerGuessQueryRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgDBFingerGuessQueryRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&page_)) + sizeof(user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDBFingerGuessQueryRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgDBFingerGuessQueryRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDBFingerGuessQueryRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 page = 1;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_page(), target);
  }

  // int32 num = 2;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num(), target);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // int32 user_id = 4;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDBFingerGuessQueryRecord)
  return target;
}

size_t MsgDBFingerGuessQueryRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgDBFingerGuessQueryRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 page = 1;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_page());
  }

  // int32 num = 2;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 user_id = 4;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgDBFingerGuessQueryRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgDBFingerGuessQueryRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDBFingerGuessQueryRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgDBFingerGuessQueryRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgDBFingerGuessQueryRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgDBFingerGuessQueryRecord)
    MergeFrom(*source);
  }
}

void MsgDBFingerGuessQueryRecord::MergeFrom(const MsgDBFingerGuessQueryRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgDBFingerGuessQueryRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void MsgDBFingerGuessQueryRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgDBFingerGuessQueryRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBFingerGuessQueryRecord::CopyFrom(const MsgDBFingerGuessQueryRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgDBFingerGuessQueryRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBFingerGuessQueryRecord::IsInitialized() const {
  return true;
}

void MsgDBFingerGuessQueryRecord::InternalSwap(MsgDBFingerGuessQueryRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgDBFingerGuessQueryRecord, user_id_)
      + sizeof(MsgDBFingerGuessQueryRecord::user_id_)
      - PROTOBUF_FIELD_OFFSET(MsgDBFingerGuessQueryRecord, page_)>(
          reinterpret_cast<char*>(&page_),
          reinterpret_cast<char*>(&other->page_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDBFingerGuessQueryRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgDBModifyAvatar::_Internal {
 public:
};

MsgDBModifyAvatar::MsgDBModifyAvatar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgDBModifyAvatar)
}
MsgDBModifyAvatar::MsgDBModifyAvatar(const MsgDBModifyAvatar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar().empty()) {
    avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar(), 
      GetArena());
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:MsgDBModifyAvatar)
}

void MsgDBModifyAvatar::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgDBModifyAvatar_ServerInternalProto_2eproto.base);
  avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0;
}

MsgDBModifyAvatar::~MsgDBModifyAvatar() {
  // @@protoc_insertion_point(destructor:MsgDBModifyAvatar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgDBModifyAvatar::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  avatar_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgDBModifyAvatar::ArenaDtor(void* object) {
  MsgDBModifyAvatar* _this = reinterpret_cast< MsgDBModifyAvatar* >(object);
  (void)_this;
}
void MsgDBModifyAvatar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgDBModifyAvatar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgDBModifyAvatar& MsgDBModifyAvatar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgDBModifyAvatar_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgDBModifyAvatar::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgDBModifyAvatar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatar_.ClearToEmpty();
  user_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDBModifyAvatar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatar = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_avatar();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgDBModifyAvatar.avatar"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgDBModifyAvatar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDBModifyAvatar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // string avatar = 2;
  if (this->avatar().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar().data(), static_cast<int>(this->_internal_avatar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgDBModifyAvatar.avatar");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_avatar(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDBModifyAvatar)
  return target;
}

size_t MsgDBModifyAvatar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgDBModifyAvatar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string avatar = 2;
  if (this->avatar().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar());
  }

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgDBModifyAvatar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgDBModifyAvatar)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDBModifyAvatar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgDBModifyAvatar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgDBModifyAvatar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgDBModifyAvatar)
    MergeFrom(*source);
  }
}

void MsgDBModifyAvatar::MergeFrom(const MsgDBModifyAvatar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgDBModifyAvatar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.avatar().size() > 0) {
    _internal_set_avatar(from._internal_avatar());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void MsgDBModifyAvatar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgDBModifyAvatar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBModifyAvatar::CopyFrom(const MsgDBModifyAvatar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgDBModifyAvatar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBModifyAvatar::IsInitialized() const {
  return true;
}

void MsgDBModifyAvatar::InternalSwap(MsgDBModifyAvatar* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  avatar_.Swap(&other->avatar_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDBModifyAvatar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgDBUpdateJackpot::_Internal {
 public:
};

MsgDBUpdateJackpot::MsgDBUpdateJackpot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgDBUpdateJackpot)
}
MsgDBUpdateJackpot::MsgDBUpdateJackpot(const MsgDBUpdateJackpot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&jackpot_, &from.jackpot_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_id_) -
    reinterpret_cast<char*>(&jackpot_)) + sizeof(server_id_));
  // @@protoc_insertion_point(copy_constructor:MsgDBUpdateJackpot)
}

void MsgDBUpdateJackpot::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&jackpot_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&server_id_) -
      reinterpret_cast<char*>(&jackpot_)) + sizeof(server_id_));
}

MsgDBUpdateJackpot::~MsgDBUpdateJackpot() {
  // @@protoc_insertion_point(destructor:MsgDBUpdateJackpot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgDBUpdateJackpot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgDBUpdateJackpot::ArenaDtor(void* object) {
  MsgDBUpdateJackpot* _this = reinterpret_cast< MsgDBUpdateJackpot* >(object);
  (void)_this;
}
void MsgDBUpdateJackpot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgDBUpdateJackpot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgDBUpdateJackpot& MsgDBUpdateJackpot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgDBUpdateJackpot_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgDBUpdateJackpot::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgDBUpdateJackpot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&jackpot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_id_) -
      reinterpret_cast<char*>(&jackpot_)) + sizeof(server_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDBUpdateJackpot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 jackpot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          jackpot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 fake_jackpot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fake_jackpot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgDBUpdateJackpot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDBUpdateJackpot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_server_id(), target);
  }

  // int64 jackpot = 2;
  if (this->jackpot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_jackpot(), target);
  }

  // int64 fake_jackpot = 3;
  if (this->fake_jackpot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_fake_jackpot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDBUpdateJackpot)
  return target;
}

size_t MsgDBUpdateJackpot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgDBUpdateJackpot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 jackpot = 2;
  if (this->jackpot() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_jackpot());
  }

  // int64 fake_jackpot = 3;
  if (this->fake_jackpot() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fake_jackpot());
  }

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgDBUpdateJackpot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgDBUpdateJackpot)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDBUpdateJackpot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgDBUpdateJackpot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgDBUpdateJackpot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgDBUpdateJackpot)
    MergeFrom(*source);
  }
}

void MsgDBUpdateJackpot::MergeFrom(const MsgDBUpdateJackpot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgDBUpdateJackpot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.jackpot() != 0) {
    _internal_set_jackpot(from._internal_jackpot());
  }
  if (from.fake_jackpot() != 0) {
    _internal_set_fake_jackpot(from._internal_fake_jackpot());
  }
  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
}

void MsgDBUpdateJackpot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgDBUpdateJackpot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBUpdateJackpot::CopyFrom(const MsgDBUpdateJackpot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgDBUpdateJackpot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBUpdateJackpot::IsInitialized() const {
  return true;
}

void MsgDBUpdateJackpot::InternalSwap(MsgDBUpdateJackpot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgDBUpdateJackpot, server_id_)
      + sizeof(MsgDBUpdateJackpot::server_id_)
      - PROTOBUF_FIELD_OFFSET(MsgDBUpdateJackpot, jackpot_)>(
          reinterpret_cast<char*>(&jackpot_),
          reinterpret_cast<char*>(&other->jackpot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDBUpdateJackpot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgDBBankChangePassword::_Internal {
 public:
};

MsgDBBankChangePassword::MsgDBBankChangePassword(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgDBBankChangePassword)
}
MsgDBBankChangePassword::MsgDBBankChangePassword(const MsgDBBankChangePassword& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArena());
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:MsgDBBankChangePassword)
}

void MsgDBBankChangePassword::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgDBBankChangePassword_ServerInternalProto_2eproto.base);
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0;
}

MsgDBBankChangePassword::~MsgDBBankChangePassword() {
  // @@protoc_insertion_point(destructor:MsgDBBankChangePassword)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgDBBankChangePassword::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgDBBankChangePassword::ArenaDtor(void* object) {
  MsgDBBankChangePassword* _this = reinterpret_cast< MsgDBBankChangePassword* >(object);
  (void)_this;
}
void MsgDBBankChangePassword::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgDBBankChangePassword::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgDBBankChangePassword& MsgDBBankChangePassword::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgDBBankChangePassword_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgDBBankChangePassword::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgDBBankChangePassword)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  password_.ClearToEmpty();
  user_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDBBankChangePassword::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgDBBankChangePassword.Password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgDBBankChangePassword::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDBBankChangePassword)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // string Password = 2;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgDBBankChangePassword.Password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDBBankChangePassword)
  return target;
}

size_t MsgDBBankChangePassword::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgDBBankChangePassword)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgDBBankChangePassword::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgDBBankChangePassword)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDBBankChangePassword* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgDBBankChangePassword>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgDBBankChangePassword)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgDBBankChangePassword)
    MergeFrom(*source);
  }
}

void MsgDBBankChangePassword::MergeFrom(const MsgDBBankChangePassword& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgDBBankChangePassword)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.password().size() > 0) {
    _internal_set_password(from._internal_password());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void MsgDBBankChangePassword::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgDBBankChangePassword)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBBankChangePassword::CopyFrom(const MsgDBBankChangePassword& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgDBBankChangePassword)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBBankChangePassword::IsInitialized() const {
  return true;
}

void MsgDBBankChangePassword::InternalSwap(MsgDBBankChangePassword* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDBBankChangePassword::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgDBBankOperate::_Internal {
 public:
};

MsgDBBankOperate::MsgDBBankOperate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgDBBankOperate)
}
MsgDBBankOperate::MsgDBBankOperate(const MsgDBBankOperate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gold_, &from.gold_,
    static_cast<size_t>(reinterpret_cast<char*>(&operate_type_) -
    reinterpret_cast<char*>(&gold_)) + sizeof(operate_type_));
  // @@protoc_insertion_point(copy_constructor:MsgDBBankOperate)
}

void MsgDBBankOperate::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gold_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&operate_type_) -
      reinterpret_cast<char*>(&gold_)) + sizeof(operate_type_));
}

MsgDBBankOperate::~MsgDBBankOperate() {
  // @@protoc_insertion_point(destructor:MsgDBBankOperate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgDBBankOperate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgDBBankOperate::ArenaDtor(void* object) {
  MsgDBBankOperate* _this = reinterpret_cast< MsgDBBankOperate* >(object);
  (void)_this;
}
void MsgDBBankOperate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgDBBankOperate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgDBBankOperate& MsgDBBankOperate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgDBBankOperate_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgDBBankOperate::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgDBBankOperate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operate_type_) -
      reinterpret_cast<char*>(&gold_)) + sizeof(operate_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDBBankOperate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 operate_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          operate_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgDBBankOperate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDBBankOperate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // int64 gold = 2;
  if (this->gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_gold(), target);
  }

  // int32 operate_type = 3;
  if (this->operate_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_operate_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDBBankOperate)
  return target;
}

size_t MsgDBBankOperate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgDBBankOperate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 gold = 2;
  if (this->gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_gold());
  }

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // int32 operate_type = 3;
  if (this->operate_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_operate_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgDBBankOperate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgDBBankOperate)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDBBankOperate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgDBBankOperate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgDBBankOperate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgDBBankOperate)
    MergeFrom(*source);
  }
}

void MsgDBBankOperate::MergeFrom(const MsgDBBankOperate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgDBBankOperate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.operate_type() != 0) {
    _internal_set_operate_type(from._internal_operate_type());
  }
}

void MsgDBBankOperate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgDBBankOperate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBBankOperate::CopyFrom(const MsgDBBankOperate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgDBBankOperate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBBankOperate::IsInitialized() const {
  return true;
}

void MsgDBBankOperate::InternalSwap(MsgDBBankOperate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgDBBankOperate, operate_type_)
      + sizeof(MsgDBBankOperate::operate_type_)
      - PROTOBUF_FIELD_OFFSET(MsgDBBankOperate, gold_)>(
          reinterpret_cast<char*>(&gold_),
          reinterpret_cast<char*>(&other->gold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDBBankOperate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgDBBankTakeOut::_Internal {
 public:
};

MsgDBBankTakeOut::MsgDBBankTakeOut(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgDBBankTakeOut)
}
MsgDBBankTakeOut::MsgDBBankTakeOut(const MsgDBBankTakeOut& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_gold_, &from.user_gold_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_value_) -
    reinterpret_cast<char*>(&user_gold_)) + sizeof(ret_value_));
  // @@protoc_insertion_point(copy_constructor:MsgDBBankTakeOut)
}

void MsgDBBankTakeOut::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_gold_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ret_value_) -
      reinterpret_cast<char*>(&user_gold_)) + sizeof(ret_value_));
}

MsgDBBankTakeOut::~MsgDBBankTakeOut() {
  // @@protoc_insertion_point(destructor:MsgDBBankTakeOut)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgDBBankTakeOut::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgDBBankTakeOut::ArenaDtor(void* object) {
  MsgDBBankTakeOut* _this = reinterpret_cast< MsgDBBankTakeOut* >(object);
  (void)_this;
}
void MsgDBBankTakeOut::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgDBBankTakeOut::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgDBBankTakeOut& MsgDBBankTakeOut::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgDBBankTakeOut_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgDBBankTakeOut::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgDBBankTakeOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_gold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_value_) -
      reinterpret_cast<char*>(&user_gold_)) + sizeof(ret_value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDBBankTakeOut::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 user_gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          user_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 bank_gold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bank_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgDBBankTakeOut::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDBBankTakeOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_value = 1;
  if (this->ret_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret_value(), target);
  }

  // int64 user_gold = 2;
  if (this->user_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_user_gold(), target);
  }

  // int64 bank_gold = 3;
  if (this->bank_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_bank_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDBBankTakeOut)
  return target;
}

size_t MsgDBBankTakeOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgDBBankTakeOut)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 user_gold = 2;
  if (this->user_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_gold());
  }

  // int64 bank_gold = 3;
  if (this->bank_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_bank_gold());
  }

  // int32 ret_value = 1;
  if (this->ret_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgDBBankTakeOut::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgDBBankTakeOut)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDBBankTakeOut* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgDBBankTakeOut>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgDBBankTakeOut)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgDBBankTakeOut)
    MergeFrom(*source);
  }
}

void MsgDBBankTakeOut::MergeFrom(const MsgDBBankTakeOut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgDBBankTakeOut)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_gold() != 0) {
    _internal_set_user_gold(from._internal_user_gold());
  }
  if (from.bank_gold() != 0) {
    _internal_set_bank_gold(from._internal_bank_gold());
  }
  if (from.ret_value() != 0) {
    _internal_set_ret_value(from._internal_ret_value());
  }
}

void MsgDBBankTakeOut::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgDBBankTakeOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBBankTakeOut::CopyFrom(const MsgDBBankTakeOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgDBBankTakeOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBBankTakeOut::IsInitialized() const {
  return true;
}

void MsgDBBankTakeOut::InternalSwap(MsgDBBankTakeOut* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgDBBankTakeOut, ret_value_)
      + sizeof(MsgDBBankTakeOut::ret_value_)
      - PROTOBUF_FIELD_OFFSET(MsgDBBankTakeOut, user_gold_)>(
          reinterpret_cast<char*>(&user_gold_),
          reinterpret_cast<char*>(&other->user_gold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDBBankTakeOut::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgDBBankTransfer::_Internal {
 public:
};

MsgDBBankTransfer::MsgDBBankTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgDBBankTransfer)
}
MsgDBBankTransfer::MsgDBBankTransfer(const MsgDBBankTransfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&from_user_id_, &from.from_user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&transfer_gold_) -
    reinterpret_cast<char*>(&from_user_id_)) + sizeof(transfer_gold_));
  // @@protoc_insertion_point(copy_constructor:MsgDBBankTransfer)
}

void MsgDBBankTransfer::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&from_user_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&transfer_gold_) -
      reinterpret_cast<char*>(&from_user_id_)) + sizeof(transfer_gold_));
}

MsgDBBankTransfer::~MsgDBBankTransfer() {
  // @@protoc_insertion_point(destructor:MsgDBBankTransfer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgDBBankTransfer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgDBBankTransfer::ArenaDtor(void* object) {
  MsgDBBankTransfer* _this = reinterpret_cast< MsgDBBankTransfer* >(object);
  (void)_this;
}
void MsgDBBankTransfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgDBBankTransfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgDBBankTransfer& MsgDBBankTransfer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgDBBankTransfer_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgDBBankTransfer::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgDBBankTransfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transfer_gold_) -
      reinterpret_cast<char*>(&from_user_id_)) + sizeof(transfer_gold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDBBankTransfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 from_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 recv_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          recv_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 transfer_gold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          transfer_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgDBBankTransfer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDBBankTransfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 from_user_id = 1;
  if (this->from_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_from_user_id(), target);
  }

  // int32 recv_user_id = 2;
  if (this->recv_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_recv_user_id(), target);
  }

  // int64 transfer_gold = 3;
  if (this->transfer_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_transfer_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDBBankTransfer)
  return target;
}

size_t MsgDBBankTransfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgDBBankTransfer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 from_user_id = 1;
  if (this->from_user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_from_user_id());
  }

  // int32 recv_user_id = 2;
  if (this->recv_user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_recv_user_id());
  }

  // int64 transfer_gold = 3;
  if (this->transfer_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_transfer_gold());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgDBBankTransfer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgDBBankTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDBBankTransfer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgDBBankTransfer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgDBBankTransfer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgDBBankTransfer)
    MergeFrom(*source);
  }
}

void MsgDBBankTransfer::MergeFrom(const MsgDBBankTransfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgDBBankTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from_user_id() != 0) {
    _internal_set_from_user_id(from._internal_from_user_id());
  }
  if (from.recv_user_id() != 0) {
    _internal_set_recv_user_id(from._internal_recv_user_id());
  }
  if (from.transfer_gold() != 0) {
    _internal_set_transfer_gold(from._internal_transfer_gold());
  }
}

void MsgDBBankTransfer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgDBBankTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBBankTransfer::CopyFrom(const MsgDBBankTransfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgDBBankTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBBankTransfer::IsInitialized() const {
  return true;
}

void MsgDBBankTransfer::InternalSwap(MsgDBBankTransfer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgDBBankTransfer, transfer_gold_)
      + sizeof(MsgDBBankTransfer::transfer_gold_)
      - PROTOBUF_FIELD_OFFSET(MsgDBBankTransfer, from_user_id_)>(
          reinterpret_cast<char*>(&from_user_id_),
          reinterpret_cast<char*>(&other->from_user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDBBankTransfer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgStorageCode::_Internal {
 public:
};

MsgStorageCode::MsgStorageCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgStorageCode)
}
MsgStorageCode::MsgStorageCode(const MsgStorageCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phone().empty()) {
    phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phone(), 
      GetArena());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:MsgStorageCode)
}

void MsgStorageCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgStorageCode_ServerInternalProto_2eproto.base);
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(code_));
}

MsgStorageCode::~MsgStorageCode() {
  // @@protoc_insertion_point(destructor:MsgStorageCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgStorageCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  phone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgStorageCode::ArenaDtor(void* object) {
  MsgStorageCode* _this = reinterpret_cast< MsgStorageCode* >(object);
  (void)_this;
}
void MsgStorageCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgStorageCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgStorageCode& MsgStorageCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgStorageCode_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgStorageCode::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgStorageCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phone_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgStorageCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string phone = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_phone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgStorageCode.phone"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgStorageCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgStorageCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // string phone = 2;
  if (this->phone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone().data(), static_cast<int>(this->_internal_phone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgStorageCode.phone");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_phone(), target);
  }

  // int32 code = 3;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgStorageCode)
  return target;
}

size_t MsgStorageCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgStorageCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string phone = 2;
  if (this->phone().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone());
  }

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // int32 code = 3;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgStorageCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgStorageCode)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgStorageCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgStorageCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgStorageCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgStorageCode)
    MergeFrom(*source);
  }
}

void MsgStorageCode::MergeFrom(const MsgStorageCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgStorageCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.phone().size() > 0) {
    _internal_set_phone(from._internal_phone());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void MsgStorageCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgStorageCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgStorageCode::CopyFrom(const MsgStorageCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgStorageCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgStorageCode::IsInitialized() const {
  return true;
}

void MsgStorageCode::InternalSwap(MsgStorageCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  phone_.Swap(&other->phone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgStorageCode, code_)
      + sizeof(MsgStorageCode::code_)
      - PROTOBUF_FIELD_OFFSET(MsgStorageCode, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgStorageCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgDBBindPhone::_Internal {
 public:
};

MsgDBBindPhone::MsgDBBindPhone(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgDBBindPhone)
}
MsgDBBindPhone::MsgDBBindPhone(const MsgDBBindPhone& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invite_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_invite_code().empty()) {
    invite_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invite_code(), 
      GetArena());
  }
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phone().empty()) {
    phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phone(), 
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArena());
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:MsgDBBindPhone)
}

void MsgDBBindPhone::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgDBBindPhone_ServerInternalProto_2eproto.base);
  invite_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0;
}

MsgDBBindPhone::~MsgDBBindPhone() {
  // @@protoc_insertion_point(destructor:MsgDBBindPhone)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgDBBindPhone::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  invite_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgDBBindPhone::ArenaDtor(void* object) {
  MsgDBBindPhone* _this = reinterpret_cast< MsgDBBindPhone* >(object);
  (void)_this;
}
void MsgDBBindPhone::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgDBBindPhone::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgDBBindPhone& MsgDBBindPhone::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgDBBindPhone_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgDBBindPhone::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgDBBindPhone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  invite_code_.ClearToEmpty();
  phone_.ClearToEmpty();
  password_.ClearToEmpty();
  user_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDBBindPhone::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string invite_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_invite_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgDBBindPhone.invite_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string phone = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_phone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgDBBindPhone.phone"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgDBBindPhone.password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgDBBindPhone::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDBBindPhone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // string invite_code = 2;
  if (this->invite_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_invite_code().data(), static_cast<int>(this->_internal_invite_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgDBBindPhone.invite_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_invite_code(), target);
  }

  // string phone = 3;
  if (this->phone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone().data(), static_cast<int>(this->_internal_phone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgDBBindPhone.phone");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_phone(), target);
  }

  // string password = 4;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgDBBindPhone.password");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDBBindPhone)
  return target;
}

size_t MsgDBBindPhone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgDBBindPhone)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string invite_code = 2;
  if (this->invite_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invite_code());
  }

  // string phone = 3;
  if (this->phone().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone());
  }

  // string password = 4;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgDBBindPhone::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgDBBindPhone)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDBBindPhone* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgDBBindPhone>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgDBBindPhone)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgDBBindPhone)
    MergeFrom(*source);
  }
}

void MsgDBBindPhone::MergeFrom(const MsgDBBindPhone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgDBBindPhone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.invite_code().size() > 0) {
    _internal_set_invite_code(from._internal_invite_code());
  }
  if (from.phone().size() > 0) {
    _internal_set_phone(from._internal_phone());
  }
  if (from.password().size() > 0) {
    _internal_set_password(from._internal_password());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void MsgDBBindPhone::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgDBBindPhone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBBindPhone::CopyFrom(const MsgDBBindPhone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgDBBindPhone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBBindPhone::IsInitialized() const {
  return true;
}

void MsgDBBindPhone::InternalSwap(MsgDBBindPhone* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  invite_code_.Swap(&other->invite_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  phone_.Swap(&other->phone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDBBindPhone::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgDBBindPhoneRes::_Internal {
 public:
};

MsgDBBindPhoneRes::MsgDBBindPhoneRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgDBBindPhoneRes)
}
MsgDBBindPhoneRes::MsgDBBindPhoneRes(const MsgDBBindPhoneRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phone().empty()) {
    phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phone(), 
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArena());
  }
  res_code_ = from.res_code_;
  // @@protoc_insertion_point(copy_constructor:MsgDBBindPhoneRes)
}

void MsgDBBindPhoneRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgDBBindPhoneRes_ServerInternalProto_2eproto.base);
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  res_code_ = 0;
}

MsgDBBindPhoneRes::~MsgDBBindPhoneRes() {
  // @@protoc_insertion_point(destructor:MsgDBBindPhoneRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgDBBindPhoneRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  phone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgDBBindPhoneRes::ArenaDtor(void* object) {
  MsgDBBindPhoneRes* _this = reinterpret_cast< MsgDBBindPhoneRes* >(object);
  (void)_this;
}
void MsgDBBindPhoneRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgDBBindPhoneRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgDBBindPhoneRes& MsgDBBindPhoneRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgDBBindPhoneRes_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgDBBindPhoneRes::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgDBBindPhoneRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phone_.ClearToEmpty();
  password_.ClearToEmpty();
  res_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDBBindPhoneRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 res_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          res_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string phone = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_phone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgDBBindPhoneRes.phone"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgDBBindPhoneRes.password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgDBBindPhoneRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDBBindPhoneRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 res_code = 1;
  if (this->res_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_res_code(), target);
  }

  // string phone = 2;
  if (this->phone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone().data(), static_cast<int>(this->_internal_phone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgDBBindPhoneRes.phone");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_phone(), target);
  }

  // string password = 3;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgDBBindPhoneRes.password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDBBindPhoneRes)
  return target;
}

size_t MsgDBBindPhoneRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgDBBindPhoneRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string phone = 2;
  if (this->phone().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone());
  }

  // string password = 3;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // int32 res_code = 1;
  if (this->res_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_res_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgDBBindPhoneRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgDBBindPhoneRes)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDBBindPhoneRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgDBBindPhoneRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgDBBindPhoneRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgDBBindPhoneRes)
    MergeFrom(*source);
  }
}

void MsgDBBindPhoneRes::MergeFrom(const MsgDBBindPhoneRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgDBBindPhoneRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.phone().size() > 0) {
    _internal_set_phone(from._internal_phone());
  }
  if (from.password().size() > 0) {
    _internal_set_password(from._internal_password());
  }
  if (from.res_code() != 0) {
    _internal_set_res_code(from._internal_res_code());
  }
}

void MsgDBBindPhoneRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgDBBindPhoneRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBBindPhoneRes::CopyFrom(const MsgDBBindPhoneRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgDBBindPhoneRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBBindPhoneRes::IsInitialized() const {
  return true;
}

void MsgDBBindPhoneRes::InternalSwap(MsgDBBindPhoneRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  phone_.Swap(&other->phone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(res_code_, other->res_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDBBindPhoneRes::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MsgRegisterServer* Arena::CreateMaybeMessage< ::MsgRegisterServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgRegisterServer >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgRegisterGameServer* Arena::CreateMaybeMessage< ::MsgRegisterGameServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgRegisterGameServer >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgRegisterChatServer* Arena::CreateMaybeMessage< ::MsgRegisterChatServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgRegisterChatServer >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgApplyRobot* Arena::CreateMaybeMessage< ::MsgApplyRobot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgApplyRobot >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgApplyRobotResp* Arena::CreateMaybeMessage< ::MsgApplyRobotResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgApplyRobotResp >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgCreateRobot* Arena::CreateMaybeMessage< ::MsgCreateRobot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgCreateRobot >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgCreateRobotResp* Arena::CreateMaybeMessage< ::MsgCreateRobotResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgCreateRobotResp >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgSendPhoneCode* Arena::CreateMaybeMessage< ::MsgSendPhoneCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgSendPhoneCode >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgUpdateGameServerOnlineNum* Arena::CreateMaybeMessage< ::MsgUpdateGameServerOnlineNum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgUpdateGameServerOnlineNum >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgGameServerUnRegister* Arena::CreateMaybeMessage< ::MsgGameServerUnRegister >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgGameServerUnRegister >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgLoadCheatRate* Arena::CreateMaybeMessage< ::MsgLoadCheatRate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgLoadCheatRate >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgRelayServerRegister* Arena::CreateMaybeMessage< ::MsgRelayServerRegister >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgRelayServerRegister >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgRelayServerAddMail* Arena::CreateMaybeMessage< ::MsgRelayServerAddMail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgRelayServerAddMail >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgRelayServerRecharge* Arena::CreateMaybeMessage< ::MsgRelayServerRecharge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgRelayServerRecharge >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgDBUpdateOnlineNum* Arena::CreateMaybeMessage< ::MsgDBUpdateOnlineNum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgDBUpdateOnlineNum >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgDBRegisterLogin* Arena::CreateMaybeMessage< ::MsgDBRegisterLogin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgDBRegisterLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgPlayerAttribute* Arena::CreateMaybeMessage< ::MsgPlayerAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgPlayerAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgLoginPlayerInfo* Arena::CreateMaybeMessage< ::MsgLoginPlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgLoginPlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgDBLoginOut* Arena::CreateMaybeMessage< ::MsgDBLoginOut >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgDBLoginOut >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgDBUpdatePlayerInfo* Arena::CreateMaybeMessage< ::MsgDBUpdatePlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgDBUpdatePlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgDBMailData* Arena::CreateMaybeMessage< ::MsgDBMailData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgDBMailData >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgDBMail* Arena::CreateMaybeMessage< ::MsgDBMail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgDBMail >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgDBRegisterGame* Arena::CreateMaybeMessage< ::MsgDBRegisterGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgDBRegisterGame >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgDBLoadRobot* Arena::CreateMaybeMessage< ::MsgDBLoadRobot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgDBLoadRobot >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgDBGamePlayerLogin* Arena::CreateMaybeMessage< ::MsgDBGamePlayerLogin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgDBGamePlayerLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgDBPlayerReconnectData* Arena::CreateMaybeMessage< ::MsgDBPlayerReconnectData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgDBPlayerReconnectData >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgDBGamePlayerLoginResp* Arena::CreateMaybeMessage< ::MsgDBGamePlayerLoginResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgDBGamePlayerLoginResp >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgDBWriteScore* Arena::CreateMaybeMessage< ::MsgDBWriteScore >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgDBWriteScore >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgDBWriteScoreResp* Arena::CreateMaybeMessage< ::MsgDBWriteScoreResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgDBWriteScoreResp >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgDBFingerGuessWriteScore* Arena::CreateMaybeMessage< ::MsgDBFingerGuessWriteScore >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgDBFingerGuessWriteScore >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgDBFingerGuessWriteScoreResp* Arena::CreateMaybeMessage< ::MsgDBFingerGuessWriteScoreResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgDBFingerGuessWriteScoreResp >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgDBFingerGuessQueryRecord* Arena::CreateMaybeMessage< ::MsgDBFingerGuessQueryRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgDBFingerGuessQueryRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgDBModifyAvatar* Arena::CreateMaybeMessage< ::MsgDBModifyAvatar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgDBModifyAvatar >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgDBUpdateJackpot* Arena::CreateMaybeMessage< ::MsgDBUpdateJackpot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgDBUpdateJackpot >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgDBBankChangePassword* Arena::CreateMaybeMessage< ::MsgDBBankChangePassword >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgDBBankChangePassword >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgDBBankOperate* Arena::CreateMaybeMessage< ::MsgDBBankOperate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgDBBankOperate >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgDBBankTakeOut* Arena::CreateMaybeMessage< ::MsgDBBankTakeOut >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgDBBankTakeOut >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgDBBankTransfer* Arena::CreateMaybeMessage< ::MsgDBBankTransfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgDBBankTransfer >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgStorageCode* Arena::CreateMaybeMessage< ::MsgStorageCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgStorageCode >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgDBBindPhone* Arena::CreateMaybeMessage< ::MsgDBBindPhone >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgDBBindPhone >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgDBBindPhoneRes* Arena::CreateMaybeMessage< ::MsgDBBindPhoneRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgDBBindPhoneRes >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
