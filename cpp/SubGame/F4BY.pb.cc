// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: F4BY.proto

#include "F4BY.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnniversaryStage1Result_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnniversaryStage2Result_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnniversaryStage3Result_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AwardDetail_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AwardPoolRecord_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AwardProp_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BigRewardInfo_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChestBrief_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Decimal_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EffectInfo_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExchangeShopInfo_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FishTrace_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrozenFish_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GunInfo_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GunSpecEffect_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JumpHighArena_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LuckyRecord_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LuckyTaskInfo_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchPackAddition_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MissionInfo_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MultiInfo_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Obj_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Object_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Object2_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Object3_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OpenChestReward_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OwnRecord_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Package_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PropInfo_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RewardInfo_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SCHitFish_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScallopLottery_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SevenDayDetail_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SevenDayTask_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StationBase_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SyncPropInfoX_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TreasureHuntConfig_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserAwardItem_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserSyncPropInfo_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VipInfo_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WheelObject_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WingsInfo_F4BY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_F4BY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WingsSpecEffect_F4BY_2eproto;
namespace F4BY {
class SC_SceneInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_SceneInfo> _instance;
} _SC_SceneInfo_default_instance_;
class CommonRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommonResp> _instance;
} _CommonResp_default_instance_;
class ObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Object> _instance;
} _Object_default_instance_;
class ObjDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Obj> _instance;
} _Obj_default_instance_;
class Object1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Object1> _instance;
} _Object1_default_instance_;
class Object2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Object2> _instance;
} _Object2_default_instance_;
class Object3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Object3> _instance;
} _Object3_default_instance_;
class WheelObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WheelObject> _instance;
} _WheelObject_default_instance_;
class DecimalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Decimal> _instance;
} _Decimal_default_instance_;
class CSLoginGameWithTokenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSLoginGameWithToken> _instance;
} _CSLoginGameWithToken_default_instance_;
class SCLoginGameWithTokenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCLoginGameWithToken> _instance;
} _SCLoginGameWithToken_default_instance_;
class CSUserReadyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSUserReady> _instance;
} _CSUserReady_default_instance_;
class EffectInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EffectInfo> _instance;
} _EffectInfo_default_instance_;
class StationBaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StationBase> _instance;
} _StationBase_default_instance_;
class SCUserReadyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCUserReady> _instance;
} _SCUserReady_default_instance_;
class SCNotifyLoginDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCNotifyLogin> _instance;
} _SCNotifyLogin_default_instance_;
class CSNotifyLogoutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSNotifyLogout> _instance;
} _CSNotifyLogout_default_instance_;
class SCNotifyLogoutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCNotifyLogout> _instance;
} _SCNotifyLogout_default_instance_;
class CSSetProbabilityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSetProbability> _instance;
} _CSSetProbability_default_instance_;
class SCSetProbabilityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSetProbability> _instance;
} _SCSetProbability_default_instance_;
class CSSetWingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSetWings> _instance;
} _CSSetWings_default_instance_;
class SCSetWingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSetWings> _instance;
} _SCSetWings_default_instance_;
class CSUserShootDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSUserShoot> _instance;
} _CSUserShoot_default_instance_;
class SCUserShootDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCUserShoot> _instance;
} _SCUserShoot_default_instance_;
class CSHitFishDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSHitFish> _instance;
} _CSHitFish_default_instance_;
class MultiInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiInfo> _instance;
} _MultiInfo_default_instance_;
class SCHitFishDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCHitFish> _instance;
} _SCHitFish_default_instance_;
class SCHitSpecialFishDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCHitSpecialFish> _instance;
} _SCHitSpecialFish_default_instance_;
class SyncPropInfoXDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncPropInfoX> _instance;
} _SyncPropInfoX_default_instance_;
class UserSyncPropInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserSyncPropInfo> _instance;
} _UserSyncPropInfo_default_instance_;
class CSSyncPropInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSyncPropInfo> _instance;
} _CSSyncPropInfo_default_instance_;
class SCSyncPropInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSyncPropInfo> _instance;
} _SCSyncPropInfo_default_instance_;
class CSSyncMoneyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSyncMoney> _instance;
} _CSSyncMoney_default_instance_;
class SCSyncMoneyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSyncMoney> _instance;
} _SCSyncMoney_default_instance_;
class FishTraceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FishTrace> _instance;
} _FishTrace_default_instance_;
class SCFishTracesListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCFishTracesList> _instance;
} _SCFishTracesList_default_instance_;
class CSSyncFishReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSyncFishReq> _instance;
} _CSSyncFishReq_default_instance_;
class SCSyncFishReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSyncFishReq> _instance;
} _SCSyncFishReq_default_instance_;
class CSSyncFishRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSyncFishRsp> _instance;
} _CSSyncFishRsp_default_instance_;
class SCSyncFishRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSyncFishRsp> _instance;
} _SCSyncFishRsp_default_instance_;
class SCChangeSceneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCChangeScene> _instance;
} _SCChangeScene_default_instance_;
class CSFishOutsideScreenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSFishOutsideScreen> _instance;
} _CSFishOutsideScreen_default_instance_;
class CSLockFishDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSLockFish> _instance;
} _CSLockFish_default_instance_;
class SCLockFishDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCLockFish> _instance;
} _SCLockFish_default_instance_;
class CSCrazySkillDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSCrazySkill> _instance;
} _CSCrazySkill_default_instance_;
class SCCrazySkillDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCCrazySkill> _instance;
} _SCCrazySkill_default_instance_;
class CSTrebleSkillDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSTrebleSkill> _instance;
} _CSTrebleSkill_default_instance_;
class SCTrebleSkillDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCTrebleSkill> _instance;
} _SCTrebleSkill_default_instance_;
class CSUserRunBackgroundDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSUserRunBackground> _instance;
} _CSUserRunBackground_default_instance_;
class SCUserRunBackgroundDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCUserRunBackground> _instance;
} _SCUserRunBackground_default_instance_;
class CSHeartBeatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSHeartBeat> _instance;
} _CSHeartBeat_default_instance_;
class SCHeartBeatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCHeartBeat> _instance;
} _SCHeartBeat_default_instance_;
class GunSpecEffectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GunSpecEffect> _instance;
} _GunSpecEffect_default_instance_;
class WingsSpecEffectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WingsSpecEffect> _instance;
} _WingsSpecEffect_default_instance_;
class WingsInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WingsInfo> _instance;
} _WingsInfo_default_instance_;
class GunInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GunInfo> _instance;
} _GunInfo_default_instance_;
class VipInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VipInfo> _instance;
} _VipInfo_default_instance_;
class PropInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PropInfo> _instance;
} _PropInfo_default_instance_;
class CSUserInfoNotifyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSUserInfoNotify> _instance;
} _CSUserInfoNotify_default_instance_;
class SCUserInfoNotifyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCUserInfoNotify> _instance;
} _SCUserInfoNotify_default_instance_;
class SCGameInfoNotifyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGameInfoNotify> _instance;
} _SCGameInfoNotify_default_instance_;
class SCInfoRedDotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCInfoRedDot> _instance;
} _SCInfoRedDot_default_instance_;
class JumpHighArenaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JumpHighArena> _instance;
} _JumpHighArena_default_instance_;
class SCActivityInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCActivityInfo> _instance;
} _SCActivityInfo_default_instance_;
class CSChatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSChat> _instance;
} _CSChat_default_instance_;
class SCChatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCChat> _instance;
} _SCChat_default_instance_;
class SCGainAwardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGainAward> _instance;
} _SCGainAward_default_instance_;
class CSAwardPoolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSAwardPool> _instance;
} _CSAwardPool_default_instance_;
class SCAwardPoolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCAwardPool> _instance;
} _SCAwardPool_default_instance_;
class CSPropStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSPropStatus> _instance;
} _CSPropStatus_default_instance_;
class SCPropStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPropStatus> _instance;
} _SCPropStatus_default_instance_;
class GivenCardAwardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GivenCardAward> _instance;
} _GivenCardAward_default_instance_;
class UserAwardItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserAwardItem> _instance;
} _UserAwardItem_default_instance_;
class CSUserPoolInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSUserPoolInfo> _instance;
} _CSUserPoolInfo_default_instance_;
class SCUserPoolInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCUserPoolInfo> _instance;
} _SCUserPoolInfo_default_instance_;
class CSUserPoolStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSUserPoolStatus> _instance;
} _CSUserPoolStatus_default_instance_;
class SCUserPoolStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCUserPoolStatus> _instance;
} _SCUserPoolStatus_default_instance_;
class CSUserPoolPreDrawDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSUserPoolPreDraw> _instance;
} _CSUserPoolPreDraw_default_instance_;
class SCUserPoolPreDrawDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCUserPoolPreDraw> _instance;
} _SCUserPoolPreDraw_default_instance_;
class CSUserPoolDrawDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSUserPoolDraw> _instance;
} _CSUserPoolDraw_default_instance_;
class SCUserPoolDrawDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCUserPoolDraw> _instance;
} _SCUserPoolDraw_default_instance_;
class SCUserPoolAddDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCUserPoolAdd> _instance;
} _SCUserPoolAdd_default_instance_;
class CSUserPoolDoubleInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSUserPoolDoubleInfo> _instance;
} _CSUserPoolDoubleInfo_default_instance_;
class SCUserPoolDoubleInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCUserPoolDoubleInfo> _instance;
} _SCUserPoolDoubleInfo_default_instance_;
class CSUserPoolDoubleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSUserPoolDouble> _instance;
} _CSUserPoolDouble_default_instance_;
class SCUserPoolDoubleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCUserPoolDouble> _instance;
} _SCUserPoolDouble_default_instance_;
class CSLuckyPoolInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSLuckyPoolInfo> _instance;
} _CSLuckyPoolInfo_default_instance_;
class SCLuckyPoolInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCLuckyPoolInfo> _instance;
} _SCLuckyPoolInfo_default_instance_;
class CSLuckyPoolDrawDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSLuckyPoolDraw> _instance;
} _CSLuckyPoolDraw_default_instance_;
class SCLuckyPoolDrawDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCLuckyPoolDraw> _instance;
} _SCLuckyPoolDraw_default_instance_;
class CSTorpedoPreShootDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSTorpedoPreShoot> _instance;
} _CSTorpedoPreShoot_default_instance_;
class SCTorpedoPreShootDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCTorpedoPreShoot> _instance;
} _SCTorpedoPreShoot_default_instance_;
class CSTorpedoCancelShootDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSTorpedoCancelShoot> _instance;
} _CSTorpedoCancelShoot_default_instance_;
class SCTorpedoCancelShootDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCTorpedoCancelShoot> _instance;
} _SCTorpedoCancelShoot_default_instance_;
class CSTorpedoShootDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSTorpedoShoot> _instance;
} _CSTorpedoShoot_default_instance_;
class SCTorpedoShootDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCTorpedoShoot> _instance;
} _SCTorpedoShoot_default_instance_;
class CSTorpedoHitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSTorpedoHit> _instance;
} _CSTorpedoHit_default_instance_;
class SCTorpedoHitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCTorpedoHit> _instance;
} _SCTorpedoHit_default_instance_;
class CSCallFishDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSCallFish> _instance;
} _CSCallFish_default_instance_;
class SCCallFishDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCCallFish> _instance;
} _SCCallFish_default_instance_;
class SCComTaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCComTask> _instance;
} _SCComTask_default_instance_;
class SCTaskInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCTaskInfo> _instance;
} _SCTaskInfo_default_instance_;
class CSSaveSkillTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSaveSkillTime> _instance;
} _CSSaveSkillTime_default_instance_;
class SevenDayTaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SevenDayTask> _instance;
} _SevenDayTask_default_instance_;
class SevenDayDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SevenDayDetail> _instance;
} _SevenDayDetail_default_instance_;
class CSSevenDayInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSevenDayInfo> _instance;
} _CSSevenDayInfo_default_instance_;
class SCSevenDayInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSevenDayInfo> _instance;
} _SCSevenDayInfo_default_instance_;
class CSSevenDayAwardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSevenDayAward> _instance;
} _CSSevenDayAward_default_instance_;
class SCSevenDayAwardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSevenDayAward> _instance;
} _SCSevenDayAward_default_instance_;
class SCVipChargeAwardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCVipChargeAward> _instance;
} _SCVipChargeAward_default_instance_;
class CSClickStatisticDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSClickStatistic> _instance;
} _CSClickStatistic_default_instance_;
class CSNewClickStatisticDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSNewClickStatistic> _instance;
} _CSNewClickStatistic_default_instance_;
class CSUserLogDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSUserLog> _instance;
} _CSUserLog_default_instance_;
class CSUserEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSUserEvent> _instance;
} _CSUserEvent_default_instance_;
class CSGetAwardPoolRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSGetAwardPoolRecord> _instance;
} _CSGetAwardPoolRecord_default_instance_;
class AwardPoolRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AwardPoolRecord> _instance;
} _AwardPoolRecord_default_instance_;
class SCGetAwardPoolRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGetAwardPoolRecord> _instance;
} _SCGetAwardPoolRecord_default_instance_;
class SCPropDropNotifyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPropDropNotify> _instance;
} _SCPropDropNotify_default_instance_;
class CSUsePropDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSUseProp> _instance;
} _CSUseProp_default_instance_;
class SCUsePropDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCUseProp> _instance;
} _SCUseProp_default_instance_;
class SCFrozenTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCFrozenTime> _instance;
} _SCFrozenTime_default_instance_;
class SCTreasureFishInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCTreasureFishInfo> _instance;
} _SCTreasureFishInfo_default_instance_;
class SCTreasureFishCatchedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCTreasureFishCatched> _instance;
} _SCTreasureFishCatched_default_instance_;
class MatchPackAdditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchPackAddition> _instance;
} _MatchPackAddition_default_instance_;
class CSMatchPackAdditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSMatchPackAddition> _instance;
} _CSMatchPackAddition_default_instance_;
class SCMatchPackAdditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCMatchPackAddition> _instance;
} _SCMatchPackAddition_default_instance_;
class SCMatchPackInvailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCMatchPackInvail> _instance;
} _SCMatchPackInvail_default_instance_;
class CSMatchPackBuyingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSMatchPackBuying> _instance;
} _CSMatchPackBuying_default_instance_;
class AwardDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AwardDetail> _instance;
} _AwardDetail_default_instance_;
class LuckyAwardNotifyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LuckyAwardNotify> _instance;
} _LuckyAwardNotify_default_instance_;
class CSGameItemSwitchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSGameItemSwitch> _instance;
} _CSGameItemSwitch_default_instance_;
class SCGameItemSwitchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGameItemSwitch> _instance;
} _SCGameItemSwitch_default_instance_;
class AwardPropDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AwardProp> _instance;
} _AwardProp_default_instance_;
class LuckyTaskInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LuckyTaskInfo> _instance;
} _LuckyTaskInfo_default_instance_;
class CSLuckyDrawInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSLuckyDrawInfo> _instance;
} _CSLuckyDrawInfo_default_instance_;
class SCLuckyDrawInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCLuckyDrawInfo> _instance;
} _SCLuckyDrawInfo_default_instance_;
class CSGetLuckyTaskAwardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSGetLuckyTaskAward> _instance;
} _CSGetLuckyTaskAward_default_instance_;
class SCGetLuckyTaskAwardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGetLuckyTaskAward> _instance;
} _SCGetLuckyTaskAward_default_instance_;
class CSGetLuckyNumDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSGetLuckyNum> _instance;
} _CSGetLuckyNum_default_instance_;
class SCGetLuckyNumDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGetLuckyNum> _instance;
} _SCGetLuckyNum_default_instance_;
class CSLuckyRedDotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSLuckyRedDot> _instance;
} _CSLuckyRedDot_default_instance_;
class SCLuckyRedDotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCLuckyRedDot> _instance;
} _SCLuckyRedDot_default_instance_;
class LuckyRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LuckyRecord> _instance;
} _LuckyRecord_default_instance_;
class OwnRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OwnRecord> _instance;
} _OwnRecord_default_instance_;
class CSLuckyRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSLuckyRecord> _instance;
} _CSLuckyRecord_default_instance_;
class SCLuckyRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCLuckyRecord> _instance;
} _SCLuckyRecord_default_instance_;
class SCOwnRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCOwnRecord> _instance;
} _SCOwnRecord_default_instance_;
class CSBombInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSBombInfo> _instance;
} _CSBombInfo_default_instance_;
class SCSyncBombDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSyncBomb> _instance;
} _SCSyncBomb_default_instance_;
class SCSyncBombFinishDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSyncBombFinish> _instance;
} _SCSyncBombFinish_default_instance_;
class CSBombHitFishInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSBombHitFishInfo> _instance;
} _CSBombHitFishInfo_default_instance_;
class SCGetMagicCubeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCGetMagicCube> _instance;
} _SCGetMagicCube_default_instance_;
class SCMagicCubeBulletInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCMagicCubeBulletInfo> _instance;
} _SCMagicCubeBulletInfo_default_instance_;
class CSPreHitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSPreHit> _instance;
} _CSPreHit_default_instance_;
class SCPreHitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPreHit> _instance;
} _SCPreHit_default_instance_;
class CSPreShootDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSPreShoot> _instance;
} _CSPreShoot_default_instance_;
class SCPreShootDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPreShoot> _instance;
} _SCPreShoot_default_instance_;
class FrozenFishDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrozenFish> _instance;
} _FrozenFish_default_instance_;
class SCFrozenFishDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCFrozenFish> _instance;
} _SCFrozenFish_default_instance_;
class SCValentineDayFishDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCValentineDayFish> _instance;
} _SCValentineDayFish_default_instance_;
class SCKiRinFishDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCKiRinFish> _instance;
} _SCKiRinFish_default_instance_;
class SCNvWaFishCaptureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCNvWaFishCapture> _instance;
} _SCNvWaFishCapture_default_instance_;
class SCBombGlobeFishInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCBombGlobeFishInfo> _instance;
} _SCBombGlobeFishInfo_default_instance_;
class CSBombGlobeFishHitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSBombGlobeFishHit> _instance;
} _CSBombGlobeFishHit_default_instance_;
class SCAnniversaryShowSelectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCAnniversaryShowSelect> _instance;
} _SCAnniversaryShowSelect_default_instance_;
class CSAnniversarySelectReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSAnniversarySelectReq> _instance;
} _CSAnniversarySelectReq_default_instance_;
class AnniversaryStage1ResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnniversaryStage1Result> _instance;
} _AnniversaryStage1Result_default_instance_;
class AnniversaryStage2ResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnniversaryStage2Result> _instance;
} _AnniversaryStage2Result_default_instance_;
class AnniversaryStage3ResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnniversaryStage3Result> _instance;
} _AnniversaryStage3Result_default_instance_;
class SCAnniversarySelectResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCAnniversarySelectResult> _instance;
} _SCAnniversarySelectResult_default_instance_;
class CSAnniversaryHitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSAnniversaryHit> _instance;
} _CSAnniversaryHit_default_instance_;
class SCSyncAnniversaryHitStageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSyncAnniversaryHitStage> _instance;
} _SCSyncAnniversaryHitStage_default_instance_;
class ScallopLotteryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScallopLottery> _instance;
} _ScallopLottery_default_instance_;
class SCCaptureScallopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCCaptureScallop> _instance;
} _SCCaptureScallop_default_instance_;
class CSOpenScallopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSOpenScallop> _instance;
} _CSOpenScallop_default_instance_;
class SCOpenScallopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCOpenScallop> _instance;
} _SCOpenScallop_default_instance_;
class SCSettleScallopLotteryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSettleScallopLottery> _instance;
} _SCSettleScallopLottery_default_instance_;
class SCSyncScallopLotteryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSyncScallopLottery> _instance;
} _SCSyncScallopLottery_default_instance_;
class OpenChestRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpenChestReward> _instance;
} _OpenChestReward_default_instance_;
class SCUpdateChestStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCUpdateChestStatus> _instance;
} _SCUpdateChestStatus_default_instance_;
class CSChestConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSChestConfig> _instance;
} _CSChestConfig_default_instance_;
class ChestBriefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChestBrief> _instance;
} _ChestBrief_default_instance_;
class SCChestConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCChestConfig> _instance;
} _SCChestConfig_default_instance_;
class SCOpenChestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCOpenChest> _instance;
} _SCOpenChest_default_instance_;
class CSSelectChestRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSelectChestReward> _instance;
} _CSSelectChestReward_default_instance_;
class SCSelectChestRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSelectChestReward> _instance;
} _SCSelectChestReward_default_instance_;
class CSChestSetAutoSelectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSChestSetAutoSelect> _instance;
} _CSChestSetAutoSelect_default_instance_;
class SCChestSetAutoSelectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCChestSetAutoSelect> _instance;
} _SCChestSetAutoSelect_default_instance_;
class CSChestSetEnableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSChestSetEnable> _instance;
} _CSChestSetEnable_default_instance_;
class SCChestSetEnableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCChestSetEnable> _instance;
} _SCChestSetEnable_default_instance_;
class SCSpecEffectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSpecEffect> _instance;
} _SCSpecEffect_default_instance_;
class SCTortoiseExplodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCTortoiseExplode> _instance;
} _SCTortoiseExplode_default_instance_;
class RewardInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RewardInfo> _instance;
} _RewardInfo_default_instance_;
class MissionInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MissionInfo> _instance;
} _MissionInfo_default_instance_;
class BigRewardInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BigRewardInfo> _instance;
} _BigRewardInfo_default_instance_;
class TreasureHuntConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TreasureHuntConfig> _instance;
} _TreasureHuntConfig_default_instance_;
class CSSyncConfigsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSyncConfigs> _instance;
} _CSSyncConfigs_default_instance_;
class SCSyncConfigsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCSyncConfigs> _instance;
} _SCSyncConfigs_default_instance_;
class CSDrawRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSDrawReward> _instance;
} _CSDrawReward_default_instance_;
class SCDrawRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCDrawReward> _instance;
} _SCDrawReward_default_instance_;
class CSTreasureHuntMissionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSTreasureHuntMission> _instance;
} _CSTreasureHuntMission_default_instance_;
class SCTreasureHuntMissionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCTreasureHuntMission> _instance;
} _SCTreasureHuntMission_default_instance_;
class CSReceiveMissionRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSReceiveMissionReward> _instance;
} _CSReceiveMissionReward_default_instance_;
class SCReceiveMissionRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCReceiveMissionReward> _instance;
} _SCReceiveMissionReward_default_instance_;
class CSDrawTimesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSDrawTimes> _instance;
} _CSDrawTimes_default_instance_;
class SCDrawTimesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCDrawTimes> _instance;
} _SCDrawTimes_default_instance_;
class CSVerifyActivityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSVerifyActivity> _instance;
} _CSVerifyActivity_default_instance_;
class SCVerifyActivityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCVerifyActivity> _instance;
} _SCVerifyActivity_default_instance_;
class PackageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Package> _instance;
} _Package_default_instance_;
class CSTreasureHuntPackageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSTreasureHuntPackage> _instance;
} _CSTreasureHuntPackage_default_instance_;
class SCTreasureHuntPackageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCTreasureHuntPackage> _instance;
} _SCTreasureHuntPackage_default_instance_;
class ExchangeShopInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExchangeShopInfo> _instance;
} _ExchangeShopInfo_default_instance_;
class CSExchangeShopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSExchangeShop> _instance;
} _CSExchangeShop_default_instance_;
class SCExchangeShopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCExchangeShop> _instance;
} _SCExchangeShop_default_instance_;
class CSPurchasePackageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSPurchasePackage> _instance;
} _CSPurchasePackage_default_instance_;
class SCPurchasePackageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCPurchasePackage> _instance;
} _SCPurchasePackage_default_instance_;
class CSVerifyTermChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSVerifyTermChange> _instance;
} _CSVerifyTermChange_default_instance_;
class SCVerifyTermChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCVerifyTermChange> _instance;
} _SCVerifyTermChange_default_instance_;
class SCWaterDropInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCWaterDropInfo> _instance;
} _SCWaterDropInfo_default_instance_;
class CSBuyGunDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSBuyGun> _instance;
} _CSBuyGun_default_instance_;
class SCBuyGunDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCBuyGun> _instance;
} _SCBuyGun_default_instance_;
class CSBuyWingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSBuyWings> _instance;
} _CSBuyWings_default_instance_;
class SCBuyWingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCBuyWings> _instance;
} _SCBuyWings_default_instance_;
class SCNotifyActStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCNotifyActStatus> _instance;
} _SCNotifyActStatus_default_instance_;
class CSSetDoubleShootDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSSetDoubleShoot> _instance;
} _CSSetDoubleShoot_default_instance_;
class CSFreePoolInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSFreePoolInfo> _instance;
} _CSFreePoolInfo_default_instance_;
class CSFreePoolLotteryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSFreePoolLottery> _instance;
} _CSFreePoolLottery_default_instance_;
class CSFreePoolOpenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSFreePoolOpen> _instance;
} _CSFreePoolOpen_default_instance_;
}  // namespace F4BY
static void InitDefaultsscc_info_AnniversaryStage1Result_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_AnniversaryStage1Result_default_instance_;
    new (ptr) ::F4BY::AnniversaryStage1Result();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnniversaryStage1Result_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AnniversaryStage1Result_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_AnniversaryStage2Result_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_AnniversaryStage2Result_default_instance_;
    new (ptr) ::F4BY::AnniversaryStage2Result();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnniversaryStage2Result_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AnniversaryStage2Result_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_AnniversaryStage3Result_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_AnniversaryStage3Result_default_instance_;
    new (ptr) ::F4BY::AnniversaryStage3Result();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnniversaryStage3Result_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AnniversaryStage3Result_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_AwardDetail_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_AwardDetail_default_instance_;
    new (ptr) ::F4BY::AwardDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AwardDetail_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AwardDetail_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_AwardPoolRecord_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_AwardPoolRecord_default_instance_;
    new (ptr) ::F4BY::AwardPoolRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AwardPoolRecord_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AwardPoolRecord_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_AwardProp_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_AwardProp_default_instance_;
    new (ptr) ::F4BY::AwardProp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AwardProp_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AwardProp_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_BigRewardInfo_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_BigRewardInfo_default_instance_;
    new (ptr) ::F4BY::BigRewardInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BigRewardInfo_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BigRewardInfo_F4BY_2eproto}, {
      &scc_info_RewardInfo_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_CSAnniversaryHit_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSAnniversaryHit_default_instance_;
    new (ptr) ::F4BY::CSAnniversaryHit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSAnniversaryHit_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSAnniversaryHit_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSAnniversarySelectReq_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSAnniversarySelectReq_default_instance_;
    new (ptr) ::F4BY::CSAnniversarySelectReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSAnniversarySelectReq_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSAnniversarySelectReq_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSAwardPool_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSAwardPool_default_instance_;
    new (ptr) ::F4BY::CSAwardPool();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSAwardPool_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSAwardPool_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSBombGlobeFishHit_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSBombGlobeFishHit_default_instance_;
    new (ptr) ::F4BY::CSBombGlobeFishHit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSBombGlobeFishHit_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSBombGlobeFishHit_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSBombHitFishInfo_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSBombHitFishInfo_default_instance_;
    new (ptr) ::F4BY::CSBombHitFishInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSBombHitFishInfo_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSBombHitFishInfo_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSBombInfo_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSBombInfo_default_instance_;
    new (ptr) ::F4BY::CSBombInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSBombInfo_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSBombInfo_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSBuyGun_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSBuyGun_default_instance_;
    new (ptr) ::F4BY::CSBuyGun();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSBuyGun_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSBuyGun_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSBuyWings_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSBuyWings_default_instance_;
    new (ptr) ::F4BY::CSBuyWings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSBuyWings_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSBuyWings_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSCallFish_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSCallFish_default_instance_;
    new (ptr) ::F4BY::CSCallFish();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSCallFish_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSCallFish_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSChat_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSChat_default_instance_;
    new (ptr) ::F4BY::CSChat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSChat_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSChat_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSChestConfig_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSChestConfig_default_instance_;
    new (ptr) ::F4BY::CSChestConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSChestConfig_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSChestConfig_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSChestSetAutoSelect_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSChestSetAutoSelect_default_instance_;
    new (ptr) ::F4BY::CSChestSetAutoSelect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSChestSetAutoSelect_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSChestSetAutoSelect_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSChestSetEnable_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSChestSetEnable_default_instance_;
    new (ptr) ::F4BY::CSChestSetEnable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSChestSetEnable_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSChestSetEnable_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSClickStatistic_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSClickStatistic_default_instance_;
    new (ptr) ::F4BY::CSClickStatistic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSClickStatistic_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSClickStatistic_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSCrazySkill_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSCrazySkill_default_instance_;
    new (ptr) ::F4BY::CSCrazySkill();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSCrazySkill_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSCrazySkill_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSDrawReward_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSDrawReward_default_instance_;
    new (ptr) ::F4BY::CSDrawReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSDrawReward_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSDrawReward_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSDrawTimes_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSDrawTimes_default_instance_;
    new (ptr) ::F4BY::CSDrawTimes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSDrawTimes_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSDrawTimes_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSExchangeShop_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSExchangeShop_default_instance_;
    new (ptr) ::F4BY::CSExchangeShop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSExchangeShop_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSExchangeShop_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSFishOutsideScreen_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSFishOutsideScreen_default_instance_;
    new (ptr) ::F4BY::CSFishOutsideScreen();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSFishOutsideScreen_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSFishOutsideScreen_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSFreePoolInfo_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSFreePoolInfo_default_instance_;
    new (ptr) ::F4BY::CSFreePoolInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSFreePoolInfo_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSFreePoolInfo_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSFreePoolLottery_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSFreePoolLottery_default_instance_;
    new (ptr) ::F4BY::CSFreePoolLottery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSFreePoolLottery_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSFreePoolLottery_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSFreePoolOpen_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSFreePoolOpen_default_instance_;
    new (ptr) ::F4BY::CSFreePoolOpen();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSFreePoolOpen_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSFreePoolOpen_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSGameItemSwitch_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSGameItemSwitch_default_instance_;
    new (ptr) ::F4BY::CSGameItemSwitch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSGameItemSwitch_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSGameItemSwitch_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSGetAwardPoolRecord_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSGetAwardPoolRecord_default_instance_;
    new (ptr) ::F4BY::CSGetAwardPoolRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSGetAwardPoolRecord_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSGetAwardPoolRecord_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSGetLuckyNum_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSGetLuckyNum_default_instance_;
    new (ptr) ::F4BY::CSGetLuckyNum();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSGetLuckyNum_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSGetLuckyNum_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSGetLuckyTaskAward_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSGetLuckyTaskAward_default_instance_;
    new (ptr) ::F4BY::CSGetLuckyTaskAward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSGetLuckyTaskAward_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSGetLuckyTaskAward_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSHeartBeat_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSHeartBeat_default_instance_;
    new (ptr) ::F4BY::CSHeartBeat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSHeartBeat_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSHeartBeat_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSHitFish_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSHitFish_default_instance_;
    new (ptr) ::F4BY::CSHitFish();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSHitFish_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSHitFish_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSLockFish_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSLockFish_default_instance_;
    new (ptr) ::F4BY::CSLockFish();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSLockFish_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSLockFish_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSLoginGameWithToken_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSLoginGameWithToken_default_instance_;
    new (ptr) ::F4BY::CSLoginGameWithToken();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSLoginGameWithToken_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSLoginGameWithToken_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSLuckyDrawInfo_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSLuckyDrawInfo_default_instance_;
    new (ptr) ::F4BY::CSLuckyDrawInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSLuckyDrawInfo_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSLuckyDrawInfo_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSLuckyPoolDraw_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSLuckyPoolDraw_default_instance_;
    new (ptr) ::F4BY::CSLuckyPoolDraw();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSLuckyPoolDraw_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSLuckyPoolDraw_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSLuckyPoolInfo_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSLuckyPoolInfo_default_instance_;
    new (ptr) ::F4BY::CSLuckyPoolInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSLuckyPoolInfo_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSLuckyPoolInfo_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSLuckyRecord_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSLuckyRecord_default_instance_;
    new (ptr) ::F4BY::CSLuckyRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSLuckyRecord_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSLuckyRecord_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSLuckyRedDot_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSLuckyRedDot_default_instance_;
    new (ptr) ::F4BY::CSLuckyRedDot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSLuckyRedDot_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSLuckyRedDot_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSMatchPackAddition_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSMatchPackAddition_default_instance_;
    new (ptr) ::F4BY::CSMatchPackAddition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSMatchPackAddition_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSMatchPackAddition_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSMatchPackBuying_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSMatchPackBuying_default_instance_;
    new (ptr) ::F4BY::CSMatchPackBuying();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSMatchPackBuying_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSMatchPackBuying_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSNewClickStatistic_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSNewClickStatistic_default_instance_;
    new (ptr) ::F4BY::CSNewClickStatistic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSNewClickStatistic_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSNewClickStatistic_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSNotifyLogout_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSNotifyLogout_default_instance_;
    new (ptr) ::F4BY::CSNotifyLogout();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSNotifyLogout_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSNotifyLogout_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSOpenScallop_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSOpenScallop_default_instance_;
    new (ptr) ::F4BY::CSOpenScallop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSOpenScallop_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSOpenScallop_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSPreHit_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSPreHit_default_instance_;
    new (ptr) ::F4BY::CSPreHit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSPreHit_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSPreHit_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSPreShoot_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSPreShoot_default_instance_;
    new (ptr) ::F4BY::CSPreShoot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSPreShoot_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSPreShoot_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSPropStatus_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSPropStatus_default_instance_;
    new (ptr) ::F4BY::CSPropStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSPropStatus_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSPropStatus_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSPurchasePackage_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSPurchasePackage_default_instance_;
    new (ptr) ::F4BY::CSPurchasePackage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSPurchasePackage_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSPurchasePackage_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSReceiveMissionReward_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSReceiveMissionReward_default_instance_;
    new (ptr) ::F4BY::CSReceiveMissionReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSReceiveMissionReward_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSReceiveMissionReward_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSSaveSkillTime_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSSaveSkillTime_default_instance_;
    new (ptr) ::F4BY::CSSaveSkillTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSSaveSkillTime_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSSaveSkillTime_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSSelectChestReward_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSSelectChestReward_default_instance_;
    new (ptr) ::F4BY::CSSelectChestReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSSelectChestReward_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSSelectChestReward_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSSetDoubleShoot_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSSetDoubleShoot_default_instance_;
    new (ptr) ::F4BY::CSSetDoubleShoot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSSetDoubleShoot_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSSetDoubleShoot_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSSetProbability_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSSetProbability_default_instance_;
    new (ptr) ::F4BY::CSSetProbability();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSSetProbability_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSSetProbability_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSSetWings_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSSetWings_default_instance_;
    new (ptr) ::F4BY::CSSetWings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSSetWings_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSSetWings_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSSevenDayAward_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSSevenDayAward_default_instance_;
    new (ptr) ::F4BY::CSSevenDayAward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSSevenDayAward_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSSevenDayAward_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSSevenDayInfo_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSSevenDayInfo_default_instance_;
    new (ptr) ::F4BY::CSSevenDayInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSSevenDayInfo_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSSevenDayInfo_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSSyncConfigs_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSSyncConfigs_default_instance_;
    new (ptr) ::F4BY::CSSyncConfigs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSSyncConfigs_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSSyncConfigs_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSSyncFishReq_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSSyncFishReq_default_instance_;
    new (ptr) ::F4BY::CSSyncFishReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSSyncFishReq_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSSyncFishReq_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSSyncFishRsp_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSSyncFishRsp_default_instance_;
    new (ptr) ::F4BY::CSSyncFishRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CSSyncFishRsp_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CSSyncFishRsp_F4BY_2eproto}, {
      &scc_info_FishTrace_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_CSSyncMoney_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSSyncMoney_default_instance_;
    new (ptr) ::F4BY::CSSyncMoney();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSSyncMoney_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSSyncMoney_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSSyncPropInfo_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSSyncPropInfo_default_instance_;
    new (ptr) ::F4BY::CSSyncPropInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CSSyncPropInfo_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CSSyncPropInfo_F4BY_2eproto}, {
      &scc_info_SyncPropInfoX_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_CSTorpedoCancelShoot_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSTorpedoCancelShoot_default_instance_;
    new (ptr) ::F4BY::CSTorpedoCancelShoot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSTorpedoCancelShoot_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSTorpedoCancelShoot_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSTorpedoHit_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSTorpedoHit_default_instance_;
    new (ptr) ::F4BY::CSTorpedoHit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSTorpedoHit_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSTorpedoHit_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSTorpedoPreShoot_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSTorpedoPreShoot_default_instance_;
    new (ptr) ::F4BY::CSTorpedoPreShoot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSTorpedoPreShoot_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSTorpedoPreShoot_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSTorpedoShoot_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSTorpedoShoot_default_instance_;
    new (ptr) ::F4BY::CSTorpedoShoot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSTorpedoShoot_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSTorpedoShoot_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSTreasureHuntMission_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSTreasureHuntMission_default_instance_;
    new (ptr) ::F4BY::CSTreasureHuntMission();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSTreasureHuntMission_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSTreasureHuntMission_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSTreasureHuntPackage_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSTreasureHuntPackage_default_instance_;
    new (ptr) ::F4BY::CSTreasureHuntPackage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSTreasureHuntPackage_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSTreasureHuntPackage_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSTrebleSkill_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSTrebleSkill_default_instance_;
    new (ptr) ::F4BY::CSTrebleSkill();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSTrebleSkill_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSTrebleSkill_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSUseProp_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSUseProp_default_instance_;
    new (ptr) ::F4BY::CSUseProp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSUseProp_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSUseProp_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSUserEvent_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSUserEvent_default_instance_;
    new (ptr) ::F4BY::CSUserEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSUserEvent_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSUserEvent_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSUserInfoNotify_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSUserInfoNotify_default_instance_;
    new (ptr) ::F4BY::CSUserInfoNotify();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSUserInfoNotify_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSUserInfoNotify_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSUserLog_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSUserLog_default_instance_;
    new (ptr) ::F4BY::CSUserLog();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSUserLog_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSUserLog_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSUserPoolDouble_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSUserPoolDouble_default_instance_;
    new (ptr) ::F4BY::CSUserPoolDouble();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSUserPoolDouble_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSUserPoolDouble_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSUserPoolDoubleInfo_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSUserPoolDoubleInfo_default_instance_;
    new (ptr) ::F4BY::CSUserPoolDoubleInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSUserPoolDoubleInfo_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSUserPoolDoubleInfo_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSUserPoolDraw_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSUserPoolDraw_default_instance_;
    new (ptr) ::F4BY::CSUserPoolDraw();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSUserPoolDraw_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSUserPoolDraw_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSUserPoolInfo_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSUserPoolInfo_default_instance_;
    new (ptr) ::F4BY::CSUserPoolInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSUserPoolInfo_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSUserPoolInfo_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSUserPoolPreDraw_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSUserPoolPreDraw_default_instance_;
    new (ptr) ::F4BY::CSUserPoolPreDraw();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSUserPoolPreDraw_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSUserPoolPreDraw_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSUserPoolStatus_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSUserPoolStatus_default_instance_;
    new (ptr) ::F4BY::CSUserPoolStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSUserPoolStatus_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSUserPoolStatus_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSUserReady_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSUserReady_default_instance_;
    new (ptr) ::F4BY::CSUserReady();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSUserReady_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSUserReady_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSUserRunBackground_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSUserRunBackground_default_instance_;
    new (ptr) ::F4BY::CSUserRunBackground();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSUserRunBackground_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSUserRunBackground_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSUserShoot_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSUserShoot_default_instance_;
    new (ptr) ::F4BY::CSUserShoot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSUserShoot_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSUserShoot_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSVerifyActivity_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSVerifyActivity_default_instance_;
    new (ptr) ::F4BY::CSVerifyActivity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSVerifyActivity_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSVerifyActivity_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_CSVerifyTermChange_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CSVerifyTermChange_default_instance_;
    new (ptr) ::F4BY::CSVerifyTermChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSVerifyTermChange_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSVerifyTermChange_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_ChestBrief_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_ChestBrief_default_instance_;
    new (ptr) ::F4BY::ChestBrief();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChestBrief_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChestBrief_F4BY_2eproto}, {
      &scc_info_OpenChestReward_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_CommonResp_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_CommonResp_default_instance_;
    new (ptr) ::F4BY::CommonResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommonResp_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommonResp_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_Decimal_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_Decimal_default_instance_;
    new (ptr) ::F4BY::Decimal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Decimal_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Decimal_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_EffectInfo_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_EffectInfo_default_instance_;
    new (ptr) ::F4BY::EffectInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EffectInfo_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EffectInfo_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_ExchangeShopInfo_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_ExchangeShopInfo_default_instance_;
    new (ptr) ::F4BY::ExchangeShopInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExchangeShopInfo_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ExchangeShopInfo_F4BY_2eproto}, {
      &scc_info_Package_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_FishTrace_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_FishTrace_default_instance_;
    new (ptr) ::F4BY::FishTrace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FishTrace_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FishTrace_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_FrozenFish_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_FrozenFish_default_instance_;
    new (ptr) ::F4BY::FrozenFish();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrozenFish_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FrozenFish_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_GivenCardAward_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_GivenCardAward_default_instance_;
    new (ptr) ::F4BY::GivenCardAward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GivenCardAward_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GivenCardAward_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_GunInfo_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_GunInfo_default_instance_;
    new (ptr) ::F4BY::GunInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GunInfo_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GunInfo_F4BY_2eproto}, {
      &scc_info_GunSpecEffect_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_GunSpecEffect_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_GunSpecEffect_default_instance_;
    new (ptr) ::F4BY::GunSpecEffect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GunSpecEffect_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GunSpecEffect_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_JumpHighArena_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_JumpHighArena_default_instance_;
    new (ptr) ::F4BY::JumpHighArena();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JumpHighArena_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JumpHighArena_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_LuckyAwardNotify_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_LuckyAwardNotify_default_instance_;
    new (ptr) ::F4BY::LuckyAwardNotify();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LuckyAwardNotify_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LuckyAwardNotify_F4BY_2eproto}, {
      &scc_info_AwardDetail_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_LuckyRecord_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_LuckyRecord_default_instance_;
    new (ptr) ::F4BY::LuckyRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LuckyRecord_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LuckyRecord_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_LuckyTaskInfo_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_LuckyTaskInfo_default_instance_;
    new (ptr) ::F4BY::LuckyTaskInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LuckyTaskInfo_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LuckyTaskInfo_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_MatchPackAddition_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_MatchPackAddition_default_instance_;
    new (ptr) ::F4BY::MatchPackAddition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchPackAddition_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MatchPackAddition_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_MissionInfo_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_MissionInfo_default_instance_;
    new (ptr) ::F4BY::MissionInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MissionInfo_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MissionInfo_F4BY_2eproto}, {
      &scc_info_RewardInfo_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_MultiInfo_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_MultiInfo_default_instance_;
    new (ptr) ::F4BY::MultiInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MultiInfo_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MultiInfo_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_Obj_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_Obj_default_instance_;
    new (ptr) ::F4BY::Obj();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Obj_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Obj_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_Object_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_Object_default_instance_;
    new (ptr) ::F4BY::Object();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Object_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Object_F4BY_2eproto}, {
      &scc_info_MultiInfo_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_Object1_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_Object1_default_instance_;
    new (ptr) ::F4BY::Object1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Object1_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Object1_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_Object2_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_Object2_default_instance_;
    new (ptr) ::F4BY::Object2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Object2_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Object2_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_Object3_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_Object3_default_instance_;
    new (ptr) ::F4BY::Object3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Object3_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Object3_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_OpenChestReward_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_OpenChestReward_default_instance_;
    new (ptr) ::F4BY::OpenChestReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OpenChestReward_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OpenChestReward_F4BY_2eproto}, {
      &scc_info_Decimal_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_OwnRecord_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_OwnRecord_default_instance_;
    new (ptr) ::F4BY::OwnRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OwnRecord_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OwnRecord_F4BY_2eproto}, {
      &scc_info_AwardProp_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_Package_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_Package_default_instance_;
    new (ptr) ::F4BY::Package();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Package_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Package_F4BY_2eproto}, {
      &scc_info_RewardInfo_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_PropInfo_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_PropInfo_default_instance_;
    new (ptr) ::F4BY::PropInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PropInfo_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PropInfo_F4BY_2eproto}, {
      &scc_info_Object_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_RewardInfo_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_RewardInfo_default_instance_;
    new (ptr) ::F4BY::RewardInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RewardInfo_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RewardInfo_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCActivityInfo_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCActivityInfo_default_instance_;
    new (ptr) ::F4BY::SCActivityInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCActivityInfo_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCActivityInfo_F4BY_2eproto}, {
      &scc_info_JumpHighArena_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCAnniversarySelectResult_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCAnniversarySelectResult_default_instance_;
    new (ptr) ::F4BY::SCAnniversarySelectResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_SCAnniversarySelectResult_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_SCAnniversarySelectResult_F4BY_2eproto}, {
      &scc_info_MultiInfo_F4BY_2eproto.base,
      &scc_info_AnniversaryStage1Result_F4BY_2eproto.base,
      &scc_info_AnniversaryStage2Result_F4BY_2eproto.base,
      &scc_info_AnniversaryStage3Result_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCAnniversaryShowSelect_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCAnniversaryShowSelect_default_instance_;
    new (ptr) ::F4BY::SCAnniversaryShowSelect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCAnniversaryShowSelect_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCAnniversaryShowSelect_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCAwardPool_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCAwardPool_default_instance_;
    new (ptr) ::F4BY::SCAwardPool();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCAwardPool_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCAwardPool_F4BY_2eproto}, {
      &scc_info_Object3_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCBombGlobeFishInfo_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCBombGlobeFishInfo_default_instance_;
    new (ptr) ::F4BY::SCBombGlobeFishInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCBombGlobeFishInfo_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCBombGlobeFishInfo_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCBuyGun_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCBuyGun_default_instance_;
    new (ptr) ::F4BY::SCBuyGun();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCBuyGun_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCBuyGun_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCBuyWings_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCBuyWings_default_instance_;
    new (ptr) ::F4BY::SCBuyWings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCBuyWings_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCBuyWings_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCCallFish_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCCallFish_default_instance_;
    new (ptr) ::F4BY::SCCallFish();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCCallFish_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCCallFish_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCCaptureScallop_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCCaptureScallop_default_instance_;
    new (ptr) ::F4BY::SCCaptureScallop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SCCaptureScallop_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SCCaptureScallop_F4BY_2eproto}, {
      &scc_info_ScallopLottery_F4BY_2eproto.base,
      &scc_info_Obj_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCChangeScene_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCChangeScene_default_instance_;
    new (ptr) ::F4BY::SCChangeScene();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCChangeScene_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCChangeScene_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCChat_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCChat_default_instance_;
    new (ptr) ::F4BY::SCChat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCChat_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCChat_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCChestConfig_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCChestConfig_default_instance_;
    new (ptr) ::F4BY::SCChestConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCChestConfig_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCChestConfig_F4BY_2eproto}, {
      &scc_info_ChestBrief_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCChestSetAutoSelect_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCChestSetAutoSelect_default_instance_;
    new (ptr) ::F4BY::SCChestSetAutoSelect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCChestSetAutoSelect_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCChestSetAutoSelect_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCChestSetEnable_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCChestSetEnable_default_instance_;
    new (ptr) ::F4BY::SCChestSetEnable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCChestSetEnable_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCChestSetEnable_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCComTask_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCComTask_default_instance_;
    new (ptr) ::F4BY::SCComTask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCComTask_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCComTask_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCCrazySkill_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCCrazySkill_default_instance_;
    new (ptr) ::F4BY::SCCrazySkill();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCCrazySkill_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCCrazySkill_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCDrawReward_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCDrawReward_default_instance_;
    new (ptr) ::F4BY::SCDrawReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCDrawReward_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCDrawReward_F4BY_2eproto}, {
      &scc_info_RewardInfo_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCDrawTimes_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCDrawTimes_default_instance_;
    new (ptr) ::F4BY::SCDrawTimes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCDrawTimes_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCDrawTimes_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCExchangeShop_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCExchangeShop_default_instance_;
    new (ptr) ::F4BY::SCExchangeShop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCExchangeShop_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCExchangeShop_F4BY_2eproto}, {
      &scc_info_ExchangeShopInfo_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCFishTracesList_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCFishTracesList_default_instance_;
    new (ptr) ::F4BY::SCFishTracesList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCFishTracesList_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCFishTracesList_F4BY_2eproto}, {
      &scc_info_FishTrace_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCFrozenFish_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCFrozenFish_default_instance_;
    new (ptr) ::F4BY::SCFrozenFish();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCFrozenFish_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCFrozenFish_F4BY_2eproto}, {
      &scc_info_FrozenFish_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCFrozenTime_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCFrozenTime_default_instance_;
    new (ptr) ::F4BY::SCFrozenTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCFrozenTime_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCFrozenTime_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCGainAward_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCGainAward_default_instance_;
    new (ptr) ::F4BY::SCGainAward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCGainAward_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCGainAward_F4BY_2eproto}, {
      &scc_info_Object_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCGameInfoNotify_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCGameInfoNotify_default_instance_;
    new (ptr) ::F4BY::SCGameInfoNotify();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCGameInfoNotify_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCGameInfoNotify_F4BY_2eproto}, {
      &scc_info_Object3_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCGameItemSwitch_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCGameItemSwitch_default_instance_;
    new (ptr) ::F4BY::SCGameItemSwitch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCGameItemSwitch_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCGameItemSwitch_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCGetAwardPoolRecord_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCGetAwardPoolRecord_default_instance_;
    new (ptr) ::F4BY::SCGetAwardPoolRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCGetAwardPoolRecord_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCGetAwardPoolRecord_F4BY_2eproto}, {
      &scc_info_AwardPoolRecord_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCGetLuckyNum_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCGetLuckyNum_default_instance_;
    new (ptr) ::F4BY::SCGetLuckyNum();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCGetLuckyNum_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCGetLuckyNum_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCGetLuckyTaskAward_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCGetLuckyTaskAward_default_instance_;
    new (ptr) ::F4BY::SCGetLuckyTaskAward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCGetLuckyTaskAward_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCGetLuckyTaskAward_F4BY_2eproto}, {
      &scc_info_LuckyTaskInfo_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCGetMagicCube_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCGetMagicCube_default_instance_;
    new (ptr) ::F4BY::SCGetMagicCube();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCGetMagicCube_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCGetMagicCube_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCHeartBeat_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCHeartBeat_default_instance_;
    new (ptr) ::F4BY::SCHeartBeat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCHeartBeat_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCHeartBeat_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCHitFish_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCHitFish_default_instance_;
    new (ptr) ::F4BY::SCHitFish();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SCHitFish_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SCHitFish_F4BY_2eproto}, {
      &scc_info_MultiInfo_F4BY_2eproto.base,
      &scc_info_Object_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCHitSpecialFish_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCHitSpecialFish_default_instance_;
    new (ptr) ::F4BY::SCHitSpecialFish();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SCHitSpecialFish_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SCHitSpecialFish_F4BY_2eproto}, {
      &scc_info_Object_F4BY_2eproto.base,
      &scc_info_WheelObject_F4BY_2eproto.base,
      &scc_info_MultiInfo_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCInfoRedDot_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCInfoRedDot_default_instance_;
    new (ptr) ::F4BY::SCInfoRedDot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCInfoRedDot_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCInfoRedDot_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCKiRinFish_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCKiRinFish_default_instance_;
    new (ptr) ::F4BY::SCKiRinFish();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCKiRinFish_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCKiRinFish_F4BY_2eproto}, {
      &scc_info_SCHitFish_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCLockFish_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCLockFish_default_instance_;
    new (ptr) ::F4BY::SCLockFish();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCLockFish_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCLockFish_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCLoginGameWithToken_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCLoginGameWithToken_default_instance_;
    new (ptr) ::F4BY::SCLoginGameWithToken();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCLoginGameWithToken_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCLoginGameWithToken_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCLuckyDrawInfo_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCLuckyDrawInfo_default_instance_;
    new (ptr) ::F4BY::SCLuckyDrawInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SCLuckyDrawInfo_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SCLuckyDrawInfo_F4BY_2eproto}, {
      &scc_info_AwardProp_F4BY_2eproto.base,
      &scc_info_LuckyTaskInfo_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCLuckyPoolDraw_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCLuckyPoolDraw_default_instance_;
    new (ptr) ::F4BY::SCLuckyPoolDraw();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCLuckyPoolDraw_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCLuckyPoolDraw_F4BY_2eproto}, {
      &scc_info_Object3_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCLuckyPoolInfo_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCLuckyPoolInfo_default_instance_;
    new (ptr) ::F4BY::SCLuckyPoolInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCLuckyPoolInfo_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCLuckyPoolInfo_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCLuckyRecord_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCLuckyRecord_default_instance_;
    new (ptr) ::F4BY::SCLuckyRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCLuckyRecord_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCLuckyRecord_F4BY_2eproto}, {
      &scc_info_LuckyRecord_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCLuckyRedDot_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCLuckyRedDot_default_instance_;
    new (ptr) ::F4BY::SCLuckyRedDot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCLuckyRedDot_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCLuckyRedDot_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCMagicCubeBulletInfo_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCMagicCubeBulletInfo_default_instance_;
    new (ptr) ::F4BY::SCMagicCubeBulletInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCMagicCubeBulletInfo_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCMagicCubeBulletInfo_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCMatchPackAddition_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCMatchPackAddition_default_instance_;
    new (ptr) ::F4BY::SCMatchPackAddition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCMatchPackAddition_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCMatchPackAddition_F4BY_2eproto}, {
      &scc_info_MatchPackAddition_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCMatchPackInvail_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCMatchPackInvail_default_instance_;
    new (ptr) ::F4BY::SCMatchPackInvail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCMatchPackInvail_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCMatchPackInvail_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCNotifyActStatus_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCNotifyActStatus_default_instance_;
    new (ptr) ::F4BY::SCNotifyActStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCNotifyActStatus_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCNotifyActStatus_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCNotifyLogin_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCNotifyLogin_default_instance_;
    new (ptr) ::F4BY::SCNotifyLogin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCNotifyLogin_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCNotifyLogin_F4BY_2eproto}, {
      &scc_info_StationBase_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCNotifyLogout_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCNotifyLogout_default_instance_;
    new (ptr) ::F4BY::SCNotifyLogout();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCNotifyLogout_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCNotifyLogout_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCNvWaFishCapture_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCNvWaFishCapture_default_instance_;
    new (ptr) ::F4BY::SCNvWaFishCapture();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCNvWaFishCapture_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCNvWaFishCapture_F4BY_2eproto}, {
      &scc_info_MultiInfo_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCOpenChest_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCOpenChest_default_instance_;
    new (ptr) ::F4BY::SCOpenChest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCOpenChest_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCOpenChest_F4BY_2eproto}, {
      &scc_info_OpenChestReward_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCOpenScallop_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCOpenScallop_default_instance_;
    new (ptr) ::F4BY::SCOpenScallop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCOpenScallop_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCOpenScallop_F4BY_2eproto}, {
      &scc_info_ScallopLottery_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCOwnRecord_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCOwnRecord_default_instance_;
    new (ptr) ::F4BY::SCOwnRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCOwnRecord_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCOwnRecord_F4BY_2eproto}, {
      &scc_info_OwnRecord_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCPreHit_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCPreHit_default_instance_;
    new (ptr) ::F4BY::SCPreHit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCPreHit_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCPreHit_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCPreShoot_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCPreShoot_default_instance_;
    new (ptr) ::F4BY::SCPreShoot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCPreShoot_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCPreShoot_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCPropDropNotify_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCPropDropNotify_default_instance_;
    new (ptr) ::F4BY::SCPropDropNotify();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCPropDropNotify_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCPropDropNotify_F4BY_2eproto}, {
      &scc_info_Object_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCPropStatus_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCPropStatus_default_instance_;
    new (ptr) ::F4BY::SCPropStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCPropStatus_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCPropStatus_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCPurchasePackage_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCPurchasePackage_default_instance_;
    new (ptr) ::F4BY::SCPurchasePackage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCPurchasePackage_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCPurchasePackage_F4BY_2eproto}, {
      &scc_info_Package_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCReceiveMissionReward_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCReceiveMissionReward_default_instance_;
    new (ptr) ::F4BY::SCReceiveMissionReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCReceiveMissionReward_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCReceiveMissionReward_F4BY_2eproto}, {
      &scc_info_RewardInfo_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCSelectChestReward_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCSelectChestReward_default_instance_;
    new (ptr) ::F4BY::SCSelectChestReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCSelectChestReward_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCSelectChestReward_F4BY_2eproto}, {
      &scc_info_OpenChestReward_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCSetProbability_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCSetProbability_default_instance_;
    new (ptr) ::F4BY::SCSetProbability();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCSetProbability_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCSetProbability_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCSetWings_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCSetWings_default_instance_;
    new (ptr) ::F4BY::SCSetWings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCSetWings_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCSetWings_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCSettleScallopLottery_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCSettleScallopLottery_default_instance_;
    new (ptr) ::F4BY::SCSettleScallopLottery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SCSettleScallopLottery_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SCSettleScallopLottery_F4BY_2eproto}, {
      &scc_info_ScallopLottery_F4BY_2eproto.base,
      &scc_info_MultiInfo_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCSevenDayAward_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCSevenDayAward_default_instance_;
    new (ptr) ::F4BY::SCSevenDayAward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCSevenDayAward_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCSevenDayAward_F4BY_2eproto}, {
      &scc_info_SevenDayDetail_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCSevenDayInfo_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCSevenDayInfo_default_instance_;
    new (ptr) ::F4BY::SCSevenDayInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCSevenDayInfo_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCSevenDayInfo_F4BY_2eproto}, {
      &scc_info_SevenDayDetail_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCSpecEffect_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCSpecEffect_default_instance_;
    new (ptr) ::F4BY::SCSpecEffect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCSpecEffect_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCSpecEffect_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCSyncAnniversaryHitStage_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCSyncAnniversaryHitStage_default_instance_;
    new (ptr) ::F4BY::SCSyncAnniversaryHitStage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCSyncAnniversaryHitStage_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCSyncAnniversaryHitStage_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCSyncBomb_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCSyncBomb_default_instance_;
    new (ptr) ::F4BY::SCSyncBomb();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCSyncBomb_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCSyncBomb_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCSyncBombFinish_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCSyncBombFinish_default_instance_;
    new (ptr) ::F4BY::SCSyncBombFinish();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCSyncBombFinish_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCSyncBombFinish_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCSyncConfigs_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCSyncConfigs_default_instance_;
    new (ptr) ::F4BY::SCSyncConfigs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCSyncConfigs_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCSyncConfigs_F4BY_2eproto}, {
      &scc_info_TreasureHuntConfig_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCSyncFishReq_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCSyncFishReq_default_instance_;
    new (ptr) ::F4BY::SCSyncFishReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCSyncFishReq_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCSyncFishReq_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCSyncFishRsp_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCSyncFishRsp_default_instance_;
    new (ptr) ::F4BY::SCSyncFishRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCSyncFishRsp_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCSyncFishRsp_F4BY_2eproto}, {
      &scc_info_FishTrace_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCSyncMoney_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCSyncMoney_default_instance_;
    new (ptr) ::F4BY::SCSyncMoney();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCSyncMoney_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCSyncMoney_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCSyncPropInfo_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCSyncPropInfo_default_instance_;
    new (ptr) ::F4BY::SCSyncPropInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCSyncPropInfo_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCSyncPropInfo_F4BY_2eproto}, {
      &scc_info_UserSyncPropInfo_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCSyncScallopLottery_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCSyncScallopLottery_default_instance_;
    new (ptr) ::F4BY::SCSyncScallopLottery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SCSyncScallopLottery_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SCSyncScallopLottery_F4BY_2eproto}, {
      &scc_info_ScallopLottery_F4BY_2eproto.base,
      &scc_info_Obj_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCTaskInfo_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCTaskInfo_default_instance_;
    new (ptr) ::F4BY::SCTaskInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCTaskInfo_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCTaskInfo_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCTorpedoCancelShoot_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCTorpedoCancelShoot_default_instance_;
    new (ptr) ::F4BY::SCTorpedoCancelShoot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCTorpedoCancelShoot_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCTorpedoCancelShoot_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCTorpedoHit_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCTorpedoHit_default_instance_;
    new (ptr) ::F4BY::SCTorpedoHit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCTorpedoHit_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCTorpedoHit_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCTorpedoPreShoot_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCTorpedoPreShoot_default_instance_;
    new (ptr) ::F4BY::SCTorpedoPreShoot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCTorpedoPreShoot_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCTorpedoPreShoot_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCTorpedoShoot_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCTorpedoShoot_default_instance_;
    new (ptr) ::F4BY::SCTorpedoShoot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCTorpedoShoot_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCTorpedoShoot_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCTortoiseExplode_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCTortoiseExplode_default_instance_;
    new (ptr) ::F4BY::SCTortoiseExplode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCTortoiseExplode_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCTortoiseExplode_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCTreasureFishCatched_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCTreasureFishCatched_default_instance_;
    new (ptr) ::F4BY::SCTreasureFishCatched();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCTreasureFishCatched_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCTreasureFishCatched_F4BY_2eproto}, {
      &scc_info_MultiInfo_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCTreasureFishInfo_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCTreasureFishInfo_default_instance_;
    new (ptr) ::F4BY::SCTreasureFishInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCTreasureFishInfo_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCTreasureFishInfo_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCTreasureHuntMission_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCTreasureHuntMission_default_instance_;
    new (ptr) ::F4BY::SCTreasureHuntMission();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCTreasureHuntMission_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCTreasureHuntMission_F4BY_2eproto}, {
      &scc_info_MissionInfo_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCTreasureHuntPackage_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCTreasureHuntPackage_default_instance_;
    new (ptr) ::F4BY::SCTreasureHuntPackage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCTreasureHuntPackage_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCTreasureHuntPackage_F4BY_2eproto}, {
      &scc_info_Package_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCTrebleSkill_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCTrebleSkill_default_instance_;
    new (ptr) ::F4BY::SCTrebleSkill();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCTrebleSkill_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCTrebleSkill_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCUpdateChestStatus_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCUpdateChestStatus_default_instance_;
    new (ptr) ::F4BY::SCUpdateChestStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCUpdateChestStatus_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCUpdateChestStatus_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCUseProp_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCUseProp_default_instance_;
    new (ptr) ::F4BY::SCUseProp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCUseProp_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCUseProp_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCUserInfoNotify_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCUserInfoNotify_default_instance_;
    new (ptr) ::F4BY::SCUserInfoNotify();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_SCUserInfoNotify_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_SCUserInfoNotify_F4BY_2eproto}, {
      &scc_info_GunInfo_F4BY_2eproto.base,
      &scc_info_WingsInfo_F4BY_2eproto.base,
      &scc_info_VipInfo_F4BY_2eproto.base,
      &scc_info_PropInfo_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCUserPoolAdd_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCUserPoolAdd_default_instance_;
    new (ptr) ::F4BY::SCUserPoolAdd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCUserPoolAdd_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCUserPoolAdd_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCUserPoolDouble_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCUserPoolDouble_default_instance_;
    new (ptr) ::F4BY::SCUserPoolDouble();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCUserPoolDouble_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCUserPoolDouble_F4BY_2eproto}, {
      &scc_info_Object3_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCUserPoolDoubleInfo_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCUserPoolDoubleInfo_default_instance_;
    new (ptr) ::F4BY::SCUserPoolDoubleInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCUserPoolDoubleInfo_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCUserPoolDoubleInfo_F4BY_2eproto}, {
      &scc_info_Object2_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCUserPoolDraw_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCUserPoolDraw_default_instance_;
    new (ptr) ::F4BY::SCUserPoolDraw();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SCUserPoolDraw_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SCUserPoolDraw_F4BY_2eproto}, {
      &scc_info_Object2_F4BY_2eproto.base,
      &scc_info_Object_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCUserPoolInfo_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCUserPoolInfo_default_instance_;
    new (ptr) ::F4BY::SCUserPoolInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCUserPoolInfo_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCUserPoolInfo_F4BY_2eproto}, {
      &scc_info_UserAwardItem_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCUserPoolPreDraw_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCUserPoolPreDraw_default_instance_;
    new (ptr) ::F4BY::SCUserPoolPreDraw();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCUserPoolPreDraw_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCUserPoolPreDraw_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCUserPoolStatus_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCUserPoolStatus_default_instance_;
    new (ptr) ::F4BY::SCUserPoolStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCUserPoolStatus_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCUserPoolStatus_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCUserReady_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCUserReady_default_instance_;
    new (ptr) ::F4BY::SCUserReady();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCUserReady_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCUserReady_F4BY_2eproto}, {
      &scc_info_StationBase_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCUserRunBackground_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCUserRunBackground_default_instance_;
    new (ptr) ::F4BY::SCUserRunBackground();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCUserRunBackground_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCUserRunBackground_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCUserShoot_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCUserShoot_default_instance_;
    new (ptr) ::F4BY::SCUserShoot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCUserShoot_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCUserShoot_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCValentineDayFish_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCValentineDayFish_default_instance_;
    new (ptr) ::F4BY::SCValentineDayFish();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCValentineDayFish_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCValentineDayFish_F4BY_2eproto}, {
      &scc_info_SCHitFish_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCVerifyActivity_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCVerifyActivity_default_instance_;
    new (ptr) ::F4BY::SCVerifyActivity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCVerifyActivity_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCVerifyActivity_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCVerifyTermChange_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCVerifyTermChange_default_instance_;
    new (ptr) ::F4BY::SCVerifyTermChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCVerifyTermChange_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCVerifyTermChange_F4BY_2eproto}, {
      &scc_info_RewardInfo_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SCVipChargeAward_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCVipChargeAward_default_instance_;
    new (ptr) ::F4BY::SCVipChargeAward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCVipChargeAward_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCVipChargeAward_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SCWaterDropInfo_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SCWaterDropInfo_default_instance_;
    new (ptr) ::F4BY::SCWaterDropInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCWaterDropInfo_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCWaterDropInfo_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_SC_SceneInfo_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SC_SceneInfo_default_instance_;
    new (ptr) ::F4BY::SC_SceneInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SC_SceneInfo_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SC_SceneInfo_F4BY_2eproto}, {
      &scc_info_StationBase_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_ScallopLottery_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_ScallopLottery_default_instance_;
    new (ptr) ::F4BY::ScallopLottery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScallopLottery_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScallopLottery_F4BY_2eproto}, {
      &scc_info_Obj_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SevenDayDetail_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SevenDayDetail_default_instance_;
    new (ptr) ::F4BY::SevenDayDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SevenDayDetail_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SevenDayDetail_F4BY_2eproto}, {
      &scc_info_SevenDayTask_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SevenDayTask_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SevenDayTask_default_instance_;
    new (ptr) ::F4BY::SevenDayTask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SevenDayTask_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SevenDayTask_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_StationBase_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_StationBase_default_instance_;
    new (ptr) ::F4BY::StationBase();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StationBase_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StationBase_F4BY_2eproto}, {
      &scc_info_Decimal_F4BY_2eproto.base,
      &scc_info_EffectInfo_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_SyncPropInfoX_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_SyncPropInfoX_default_instance_;
    new (ptr) ::F4BY::SyncPropInfoX();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SyncPropInfoX_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SyncPropInfoX_F4BY_2eproto}, {
      &scc_info_Object_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_TreasureHuntConfig_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_TreasureHuntConfig_default_instance_;
    new (ptr) ::F4BY::TreasureHuntConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TreasureHuntConfig_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TreasureHuntConfig_F4BY_2eproto}, {
      &scc_info_BigRewardInfo_F4BY_2eproto.base,
      &scc_info_RewardInfo_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_UserAwardItem_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_UserAwardItem_default_instance_;
    new (ptr) ::F4BY::UserAwardItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserAwardItem_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserAwardItem_F4BY_2eproto}, {
      &scc_info_Object2_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_UserSyncPropInfo_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_UserSyncPropInfo_default_instance_;
    new (ptr) ::F4BY::UserSyncPropInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserSyncPropInfo_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserSyncPropInfo_F4BY_2eproto}, {
      &scc_info_SyncPropInfoX_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_VipInfo_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_VipInfo_default_instance_;
    new (ptr) ::F4BY::VipInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VipInfo_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VipInfo_F4BY_2eproto}, {}};

static void InitDefaultsscc_info_WheelObject_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_WheelObject_default_instance_;
    new (ptr) ::F4BY::WheelObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WheelObject_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WheelObject_F4BY_2eproto}, {
      &scc_info_Object3_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_WingsInfo_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_WingsInfo_default_instance_;
    new (ptr) ::F4BY::WingsInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WingsInfo_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WingsInfo_F4BY_2eproto}, {
      &scc_info_WingsSpecEffect_F4BY_2eproto.base,}};

static void InitDefaultsscc_info_WingsSpecEffect_F4BY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::F4BY::_WingsSpecEffect_default_instance_;
    new (ptr) ::F4BY::WingsSpecEffect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WingsSpecEffect_F4BY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WingsSpecEffect_F4BY_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_F4BY_2eproto[228];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_F4BY_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_F4BY_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_F4BY_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SC_SceneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SC_SceneInfo, bet_list_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SC_SceneInfo, station_base_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CommonResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CommonResp, code_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CommonResp, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::Object, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::Object, id_),
  PROTOBUF_FIELD_OFFSET(::F4BY::Object, count_),
  PROTOBUF_FIELD_OFFSET(::F4BY::Object, ratio_),
  PROTOBUF_FIELD_OFFSET(::F4BY::Object, time_),
  PROTOBUF_FIELD_OFFSET(::F4BY::Object, multiple_),
  PROTOBUF_FIELD_OFFSET(::F4BY::Object, uid_),
  PROTOBUF_FIELD_OFFSET(::F4BY::Object, originid_),
  PROTOBUF_FIELD_OFFSET(::F4BY::Object, multi_list_),
  PROTOBUF_FIELD_OFFSET(::F4BY::Object, origin_uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::Obj, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::Obj, id_),
  PROTOBUF_FIELD_OFFSET(::F4BY::Obj, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::Object1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::Object1, key_),
  PROTOBUF_FIELD_OFFSET(::F4BY::Object1, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::Object2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::Object2, key_),
  PROTOBUF_FIELD_OFFSET(::F4BY::Object2, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::Object3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::Object3, key_),
  PROTOBUF_FIELD_OFFSET(::F4BY::Object3, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::WheelObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::WheelObject, wheels_),
  PROTOBUF_FIELD_OFFSET(::F4BY::WheelObject, ratio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::Decimal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::Decimal, num_),
  PROTOBUF_FIELD_OFFSET(::F4BY::Decimal, denom_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSLoginGameWithToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSLoginGameWithToken, playerid_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSLoginGameWithToken, token_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSLoginGameWithToken, ostype_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSLoginGameWithToken, tableid_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSLoginGameWithToken, last_tableid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCLoginGameWithToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCLoginGameWithToken, scene_index_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCLoginGameWithToken, tableid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSUserReady, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSUserReady, playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::EffectInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::EffectInfo, effect_id_),
  PROTOBUF_FIELD_OFFSET(::F4BY::EffectInfo, is_global_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::StationBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::StationBase, gun_ratio_),
  PROTOBUF_FIELD_OFFSET(::F4BY::StationBase, gun_level_),
  PROTOBUF_FIELD_OFFSET(::F4BY::StationBase, user_score_),
  PROTOBUF_FIELD_OFFSET(::F4BY::StationBase, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::StationBase, player_name_),
  PROTOBUF_FIELD_OFFSET(::F4BY::StationBase, player_id_),
  PROTOBUF_FIELD_OFFSET(::F4BY::StationBase, vip_),
  PROTOBUF_FIELD_OFFSET(::F4BY::StationBase, status_),
  PROTOBUF_FIELD_OFFSET(::F4BY::StationBase, crazy_skill_open_),
  PROTOBUF_FIELD_OFFSET(::F4BY::StationBase, user_ticket_),
  PROTOBUF_FIELD_OFFSET(::F4BY::StationBase, effect_),
  PROTOBUF_FIELD_OFFSET(::F4BY::StationBase, extra_data_),
  PROTOBUF_FIELD_OFFSET(::F4BY::StationBase, red_packet_ticket_),
  PROTOBUF_FIELD_OFFSET(::F4BY::StationBase, effect_info_),
  PROTOBUF_FIELD_OFFSET(::F4BY::StationBase, wings_props_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserReady, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserReady, station_base_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCNotifyLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCNotifyLogin, station_base_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSNotifyLogout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCNotifyLogout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCNotifyLogout, chair_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSSetProbability, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSSetProbability, add_or_del_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSSetProbability, gun_level_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSSetProbability, is_use_auto_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSetProbability, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSetProbability, code_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSetProbability, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSetProbability, gun_ratio_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSetProbability, gun_level_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSetProbability, msg_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSetProbability, is_unlock_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSetProbability, extra_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSSetWings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSSetWings, wings_prop_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSetWings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSetWings, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSetWings, wings_prop_id_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSetWings, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSUserShoot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSUserShoot, angle_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSUserShoot, bullet_id_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSUserShoot, ratio_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSUserShoot, bullet_type_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSUserShoot, is_offset_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSUserShoot, chair_id_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSUserShoot, extra_mul_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserShoot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserShoot, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserShoot, angle_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserShoot, score_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserShoot, bullet_type_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserShoot, bullet_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSHitFish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSHitFish, fish_uid_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSHitFish, bullet_id_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSHitFish, screen_fishes_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSHitFish, chair_id_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSHitFish, ratio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::MultiInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::MultiInfo, bt_type_),
  PROTOBUF_FIELD_OFFSET(::F4BY::MultiInfo, bt_multi_),
  PROTOBUF_FIELD_OFFSET(::F4BY::MultiInfo, bt_base_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCHitFish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCHitFish, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCHitFish, fish_uid_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCHitFish, earn_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCHitFish, user_score_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCHitFish, fish_value_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCHitFish, multiple_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCHitFish, hit_bullet_type_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCHitFish, magic_cube_multi_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCHitFish, multi_list_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCHitFish, origin_uid_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCHitFish, drop_props_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCHitSpecialFish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCHitSpecialFish, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCHitSpecialFish, fish_uid_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCHitSpecialFish, earn_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCHitSpecialFish, fish_value_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCHitSpecialFish, user_score_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCHitSpecialFish, death_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCHitSpecialFish, grow_stage_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCHitSpecialFish, multiple_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCHitSpecialFish, shock_fishes_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCHitSpecialFish, drop_props_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCHitSpecialFish, wheel_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCHitSpecialFish, hit_bullet_type_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCHitSpecialFish, prop_no_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCHitSpecialFish, magic_cube_multi_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCHitSpecialFish, multi_list_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCHitSpecialFish, origin_uid_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCHitSpecialFish, dragon_score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SyncPropInfoX, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SyncPropInfoX, prop_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SyncPropInfoX, x_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SyncPropInfoX, y_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SyncPropInfoX, angle_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SyncPropInfoX, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::UserSyncPropInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::UserSyncPropInfo, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::UserSyncPropInfo, props_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSSyncPropInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSSyncPropInfo, info_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSSyncPropInfo, chair_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncPropInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncPropInfo, users_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSSyncMoney, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSSyncMoney, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncMoney, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncMoney, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncMoney, score_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncMoney, type_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncMoney, delta_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncMoney, ticket_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncMoney, vip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::FishTrace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::FishTrace, fish_uid_),
  PROTOBUF_FIELD_OFFSET(::F4BY::FishTrace, fish_type_),
  PROTOBUF_FIELD_OFFSET(::F4BY::FishTrace, fish_layer_),
  PROTOBUF_FIELD_OFFSET(::F4BY::FishTrace, fish_stage_),
  PROTOBUF_FIELD_OFFSET(::F4BY::FishTrace, is_aced_),
  PROTOBUF_FIELD_OFFSET(::F4BY::FishTrace, alive_time_),
  PROTOBUF_FIELD_OFFSET(::F4BY::FishTrace, beads_list_),
  PROTOBUF_FIELD_OFFSET(::F4BY::FishTrace, fish_torpedoid_),
  PROTOBUF_FIELD_OFFSET(::F4BY::FishTrace, fish_road_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCFishTracesList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCFishTracesList, fish_traces_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCFishTracesList, fish_road_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCFishTracesList, fish_array_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCFishTracesList, create_interval_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCFishTracesList, is_called_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCFishTracesList, after_tide_first_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCFishTracesList, call_type_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCFishTracesList, move_delay_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCFishTracesList, road_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCFishTracesList, move_t_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSSyncFishReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSSyncFishReq, chair_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncFishReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncFishReq, req_player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSSyncFishRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSSyncFishRsp, fish_traces_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSSyncFishRsp, fish_road_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSSyncFishRsp, fish_array_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSSyncFishRsp, move_delay_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSSyncFishRsp, road_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSSyncFishRsp, move_t_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSSyncFishRsp, finish_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSSyncFishRsp, req_player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncFishRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncFishRsp, fish_traces_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncFishRsp, fish_road_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncFishRsp, fish_array_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncFishRsp, move_delay_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncFishRsp, road_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncFishRsp, move_t_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncFishRsp, create_interval_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncFishRsp, is_called_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncFishRsp, call_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCChangeScene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCChangeScene, scene_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSFishOutsideScreen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSFishOutsideScreen, fish_uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSLockFish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSLockFish, fish_uid_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSLockFish, is_open_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSLockFish, chair_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCLockFish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCLockFish, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCLockFish, fish_uid_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCLockFish, is_open_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSCrazySkill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSCrazySkill, is_open_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCCrazySkill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCCrazySkill, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCCrazySkill, is_open_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSTrebleSkill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSTrebleSkill, is_open_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTrebleSkill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTrebleSkill, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTrebleSkill, is_open_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSUserRunBackground, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSUserRunBackground, background_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserRunBackground, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserRunBackground, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserRunBackground, background_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSHeartBeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCHeartBeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::GunSpecEffect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::GunSpecEffect, ratiolimit_),
  PROTOBUF_FIELD_OFFSET(::F4BY::GunSpecEffect, hitchangerate_),
  PROTOBUF_FIELD_OFFSET(::F4BY::GunSpecEffect, moneychangerate_),
  PROTOBUF_FIELD_OFFSET(::F4BY::GunSpecEffect, violencerate_),
  PROTOBUF_FIELD_OFFSET(::F4BY::GunSpecEffect, speedrate_),
  PROTOBUF_FIELD_OFFSET(::F4BY::GunSpecEffect, advanced_),
  PROTOBUF_FIELD_OFFSET(::F4BY::GunSpecEffect, double_tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::WingsSpecEffect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::WingsSpecEffect, speedrate_),
  PROTOBUF_FIELD_OFFSET(::F4BY::WingsSpecEffect, ratiolimit_),
  PROTOBUF_FIELD_OFFSET(::F4BY::WingsSpecEffect, hitchangerate_),
  PROTOBUF_FIELD_OFFSET(::F4BY::WingsSpecEffect, moneychangerate_),
  PROTOBUF_FIELD_OFFSET(::F4BY::WingsSpecEffect, advanced_),
  PROTOBUF_FIELD_OFFSET(::F4BY::WingsSpecEffect, double_tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::WingsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::WingsInfo, wings_id_),
  PROTOBUF_FIELD_OFFSET(::F4BY::WingsInfo, enable_),
  PROTOBUF_FIELD_OFFSET(::F4BY::WingsInfo, wings_spec_effect_),
  PROTOBUF_FIELD_OFFSET(::F4BY::WingsInfo, receive_type_),
  PROTOBUF_FIELD_OFFSET(::F4BY::WingsInfo, activity_id_),
  PROTOBUF_FIELD_OFFSET(::F4BY::WingsInfo, price_),
  PROTOBUF_FIELD_OFFSET(::F4BY::WingsInfo, new_enable_),
  PROTOBUF_FIELD_OFFSET(::F4BY::WingsInfo, double_tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::GunInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::GunInfo, gun_level_),
  PROTOBUF_FIELD_OFFSET(::F4BY::GunInfo, ratio_min_),
  PROTOBUF_FIELD_OFFSET(::F4BY::GunInfo, ratio_max_),
  PROTOBUF_FIELD_OFFSET(::F4BY::GunInfo, enable_),
  PROTOBUF_FIELD_OFFSET(::F4BY::GunInfo, new_enable_),
  PROTOBUF_FIELD_OFFSET(::F4BY::GunInfo, is_vip_),
  PROTOBUF_FIELD_OFFSET(::F4BY::GunInfo, vip_limit_),
  PROTOBUF_FIELD_OFFSET(::F4BY::GunInfo, is_member_),
  PROTOBUF_FIELD_OFFSET(::F4BY::GunInfo, member_sec_),
  PROTOBUF_FIELD_OFFSET(::F4BY::GunInfo, extra_data_),
  PROTOBUF_FIELD_OFFSET(::F4BY::GunInfo, gunspeceffect_),
  PROTOBUF_FIELD_OFFSET(::F4BY::GunInfo, price_),
  PROTOBUF_FIELD_OFFSET(::F4BY::GunInfo, attack_speed_),
  PROTOBUF_FIELD_OFFSET(::F4BY::GunInfo, rage_),
  PROTOBUF_FIELD_OFFSET(::F4BY::GunInfo, activity_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::VipInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::VipInfo, old_vip_),
  PROTOBUF_FIELD_OFFSET(::F4BY::VipInfo, cur_vip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::PropInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::PropInfo, enable_),
  PROTOBUF_FIELD_OFFSET(::F4BY::PropInfo, prop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSUserInfoNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSUserInfoNotify, broadcast_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserInfoNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserInfoNotify, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserInfoNotify, gun_info_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserInfoNotify, wings_info_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserInfoNotify, vip_info_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserInfoNotify, prop_info_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserInfoNotify, last_gun_level_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserInfoNotify, last_ratio_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserInfoNotify, last_wings_propid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCGameInfoNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCGameInfoNotify, user_pool_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCGameInfoNotify, award_fish_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCGameInfoNotify, user_pool_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCInfoRedDot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCInfoRedDot, seven_day_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCInfoRedDot, red_dot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::JumpHighArena, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::JumpHighArena, is_open_),
  PROTOBUF_FIELD_OFFSET(::F4BY::JumpHighArena, vip_),
  PROTOBUF_FIELD_OFFSET(::F4BY::JumpHighArena, coin_),
  PROTOBUF_FIELD_OFFSET(::F4BY::JumpHighArena, game_time_),
  PROTOBUF_FIELD_OFFSET(::F4BY::JumpHighArena, tips_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCActivityInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCActivityInfo, jump_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCActivityInfo, limit_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCActivityInfo, pool_is_open_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSChat, msg_type_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSChat, msg_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSChat, chair_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCChat, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCChat, msg_type_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCChat, msg_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCGainAward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCGainAward, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCGainAward, score_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCGainAward, award_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSAwardPool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCAwardPool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCAwardPool, pool_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSPropStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSPropStatus, prop_id_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSPropStatus, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCPropStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCPropStatus, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCPropStatus, prop_id_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCPropStatus, status_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCPropStatus, bt_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::GivenCardAward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::GivenCardAward, card_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::GivenCardAward, base_),
  PROTOBUF_FIELD_OFFSET(::F4BY::GivenCardAward, multiple_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::UserAwardItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::UserAwardItem, index_),
  PROTOBUF_FIELD_OFFSET(::F4BY::UserAwardItem, item_max_),
  PROTOBUF_FIELD_OFFSET(::F4BY::UserAwardItem, name_),
  PROTOBUF_FIELD_OFFSET(::F4BY::UserAwardItem, goods_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSUserPoolInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSUserPoolInfo, open_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserPoolInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserPoolInfo, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserPoolInfo, open_page_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserPoolInfo, status_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserPoolInfo, count_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserPoolInfo, pool_max_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserPoolInfo, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSUserPoolStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSUserPoolStatus, open_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserPoolStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserPoolStatus, open_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSUserPoolPreDraw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSUserPoolPreDraw, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserPoolPreDraw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserPoolPreDraw, code_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserPoolPreDraw, level_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserPoolPreDraw, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSUserPoolDraw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserPoolDraw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserPoolDraw, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserPoolDraw, goods_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserPoolDraw, award_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserPoolDraw, award_cnt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserPoolAdd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserPoolAdd, add_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserPoolAdd, count_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserPoolAdd, first_max_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserPoolAdd, pool_max_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserPoolAdd, status_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserPoolAdd, level_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSUserPoolDoubleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserPoolDoubleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserPoolDoubleInfo, cost_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserPoolDoubleInfo, item_before_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserPoolDoubleInfo, item_double_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSUserPoolDouble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSUserPoolDouble, is_double_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserPoolDouble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserPoolDouble, code_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserPoolDouble, result_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserPoolDouble, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserPoolDouble, item_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUserPoolDouble, extra_item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSLuckyPoolInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCLuckyPoolInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCLuckyPoolInfo, count_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCLuckyPoolInfo, max_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSLuckyPoolDraw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCLuckyPoolDraw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCLuckyPoolDraw, item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSTorpedoPreShoot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSTorpedoPreShoot, propid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTorpedoPreShoot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTorpedoPreShoot, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTorpedoPreShoot, propid_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTorpedoPreShoot, code_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTorpedoPreShoot, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSTorpedoCancelShoot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTorpedoCancelShoot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTorpedoCancelShoot, chair_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSTorpedoShoot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSTorpedoShoot, fish_uid_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSTorpedoShoot, x_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSTorpedoShoot, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTorpedoShoot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTorpedoShoot, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTorpedoShoot, fish_uid_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTorpedoShoot, x_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTorpedoShoot, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSTorpedoHit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTorpedoHit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTorpedoHit, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTorpedoHit, earn_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTorpedoHit, score_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTorpedoHit, propid_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTorpedoHit, remain_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTorpedoHit, fish_uid_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTorpedoHit, x_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTorpedoHit, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSCallFish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSCallFish, call_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCCallFish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCCallFish, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCCallFish, propid_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCCallFish, remain_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCCallFish, code_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCCallFish, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCComTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCComTask, gun_ratio_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCComTask, gun_level_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCComTask, award_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCComTask, ticket_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTaskInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTaskInfo, gun_ratio_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTaskInfo, gun_level_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTaskInfo, cur_num_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTaskInfo, total_num_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTaskInfo, vip_level_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTaskInfo, is_unlock_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTaskInfo, award_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTaskInfo, is_vip_unlock_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTaskInfo, ticket_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSSaveSkillTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSSaveSkillTime, auto__),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSSaveSkillTime, lock_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSSaveSkillTime, angry_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSSaveSkillTime, treble_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SevenDayTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SevenDayTask, index_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SevenDayTask, fish_id_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SevenDayTask, total_num_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SevenDayTask, cur_num_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SevenDayTask, status_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SevenDayTask, award_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SevenDayDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SevenDayDetail, day_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SevenDayDetail, box_status_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SevenDayDetail, task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSSevenDayInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSevenDayInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSevenDayInfo, start_date_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSevenDayInfo, end_date_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSevenDayInfo, cur_day_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSevenDayInfo, get_remain_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSevenDayInfo, remain_score_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSevenDayInfo, ticket_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSevenDayInfo, detail_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSevenDayInfo, gun_enable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSSevenDayAward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSSevenDayAward, day_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSSevenDayAward, index_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSSevenDayAward, get_award_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSevenDayAward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSevenDayAward, score_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSevenDayAward, ticket_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSevenDayAward, task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCVipChargeAward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCVipChargeAward, score_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCVipChargeAward, ticket_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSClickStatistic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSClickStatistic, num_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSClickStatistic, not_repeat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSNewClickStatistic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSNewClickStatistic, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSUserLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSUserLog, type_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSUserLog, score_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSUserLog, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSUserEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSUserEvent, id_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSUserEvent, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSGetAwardPoolRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::AwardPoolRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::AwardPoolRecord, time_),
  PROTOBUF_FIELD_OFFSET(::F4BY::AwardPoolRecord, name_),
  PROTOBUF_FIELD_OFFSET(::F4BY::AwardPoolRecord, poolid_),
  PROTOBUF_FIELD_OFFSET(::F4BY::AwardPoolRecord, award_),
  PROTOBUF_FIELD_OFFSET(::F4BY::AwardPoolRecord, playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCGetAwardPoolRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCGetAwardPoolRecord, records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCPropDropNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCPropDropNotify, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCPropDropNotify, fish_uid_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCPropDropNotify, drop_props_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSUseProp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSUseProp, prop_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUseProp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUseProp, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUseProp, prop_id_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUseProp, remain_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUseProp, code_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUseProp, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCFrozenTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCFrozenTime, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCFrozenTime, is_frozen_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCFrozenTime, frozen_cd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTreasureFishInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTreasureFishInfo, fish_uid_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTreasureFishInfo, cur_stage_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTreasureFishInfo, accum_money_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTreasureFishInfo, fish_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTreasureFishCatched, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTreasureFishCatched, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTreasureFishCatched, ratio_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTreasureFishCatched, fish_uid_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTreasureFishCatched, fish_value_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTreasureFishCatched, accum_money_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTreasureFishCatched, multiple_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTreasureFishCatched, death_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTreasureFishCatched, earn_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTreasureFishCatched, user_score_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTreasureFishCatched, display_multiple_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTreasureFishCatched, cur_stage_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTreasureFishCatched, magic_cube_multi_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTreasureFishCatched, multi_list_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTreasureFishCatched, origin_uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::MatchPackAddition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::MatchPackAddition, id_),
  PROTOBUF_FIELD_OFFSET(::F4BY::MatchPackAddition, is_buy_),
  PROTOBUF_FIELD_OFFSET(::F4BY::MatchPackAddition, score_addition_),
  PROTOBUF_FIELD_OFFSET(::F4BY::MatchPackAddition, reaward_addition_),
  PROTOBUF_FIELD_OFFSET(::F4BY::MatchPackAddition, card_),
  PROTOBUF_FIELD_OFFSET(::F4BY::MatchPackAddition, sec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSMatchPackAddition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCMatchPackAddition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCMatchPackAddition, addition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCMatchPackInvail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCMatchPackInvail, packid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSMatchPackBuying, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSMatchPackBuying, packid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::AwardDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::AwardDetail, playerid_),
  PROTOBUF_FIELD_OFFSET(::F4BY::AwardDetail, nums_),
  PROTOBUF_FIELD_OFFSET(::F4BY::AwardDetail, period_),
  PROTOBUF_FIELD_OFFSET(::F4BY::AwardDetail, vip_),
  PROTOBUF_FIELD_OFFSET(::F4BY::AwardDetail, nick_),
  PROTOBUF_FIELD_OFFSET(::F4BY::AwardDetail, photo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::LuckyAwardNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::LuckyAwardNotify, awardtype_),
  PROTOBUF_FIELD_OFFSET(::F4BY::LuckyAwardNotify, detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSGameItemSwitch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCGameItemSwitch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCGameItemSwitch, lucky_task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::AwardProp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::AwardProp, prop_id_),
  PROTOBUF_FIELD_OFFSET(::F4BY::AwardProp, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::LuckyTaskInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::LuckyTaskInfo, id_),
  PROTOBUF_FIELD_OFFSET(::F4BY::LuckyTaskInfo, status_),
  PROTOBUF_FIELD_OFFSET(::F4BY::LuckyTaskInfo, score_),
  PROTOBUF_FIELD_OFFSET(::F4BY::LuckyTaskInfo, text_),
  PROTOBUF_FIELD_OFFSET(::F4BY::LuckyTaskInfo, amount_),
  PROTOBUF_FIELD_OFFSET(::F4BY::LuckyTaskInfo, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSLuckyDrawInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCLuckyDrawInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCLuckyDrawInfo, hour_remain_sec_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCLuckyDrawInfo, day_remain_sec_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCLuckyDrawInfo, hour_reward_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCLuckyDrawInfo, day_reward_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCLuckyDrawInfo, day_lucky_nums_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCLuckyDrawInfo, score_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCLuckyDrawInfo, hour_total_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCLuckyDrawInfo, day_total_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCLuckyDrawInfo, hour_award_num_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCLuckyDrawInfo, day_award_num_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCLuckyDrawInfo, next_start_tick_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCLuckyDrawInfo, task_info_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCLuckyDrawInfo, exchange_score_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCLuckyDrawInfo, next_remain_sec_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCLuckyDrawInfo, hour_lucky_nums_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSGetLuckyTaskAward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSGetLuckyTaskAward, task_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCGetLuckyTaskAward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCGetLuckyTaskAward, task_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCGetLuckyTaskAward, score_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCGetLuckyTaskAward, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSGetLuckyNum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSGetLuckyNum, times_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCGetLuckyNum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCGetLuckyNum, score_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCGetLuckyNum, error_code_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCGetLuckyNum, lucky_nums_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSLuckyRedDot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCLuckyRedDot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCLuckyRedDot, show_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::LuckyRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::LuckyRecord, vip_),
  PROTOBUF_FIELD_OFFSET(::F4BY::LuckyRecord, times_),
  PROTOBUF_FIELD_OFFSET(::F4BY::LuckyRecord, lucky_num_),
  PROTOBUF_FIELD_OFFSET(::F4BY::LuckyRecord, tick_),
  PROTOBUF_FIELD_OFFSET(::F4BY::LuckyRecord, nick_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::OwnRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::OwnRecord, reward_),
  PROTOBUF_FIELD_OFFSET(::F4BY::OwnRecord, status_),
  PROTOBUF_FIELD_OFFSET(::F4BY::OwnRecord, tick_),
  PROTOBUF_FIELD_OFFSET(::F4BY::OwnRecord, lucky_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSLuckyRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSLuckyRecord, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCLuckyRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCLuckyRecord, type_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCLuckyRecord, record_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCOwnRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCOwnRecord, record_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSBombInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSBombInfo, x_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSBombInfo, y_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSBombInfo, chair_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncBomb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncBomb, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncBomb, bombid_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncBomb, curstatus_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncBomb, x_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncBomb, y_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncBomb, nextx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncBomb, nexty_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncBomb, score_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncBomb, isfinish_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncBombFinish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncBombFinish, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncBombFinish, bombid_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncBombFinish, returnmoney_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSBombHitFishInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSBombHitFishInfo, bombid_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSBombHitFishInfo, fishid_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSBombHitFishInfo, chair_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCGetMagicCube, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCGetMagicCube, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCGetMagicCube, bullettype_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCGetMagicCube, createweapon_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCGetMagicCube, issyncinfo_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCGetMagicCube, isfinish_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCGetMagicCube, gunratio_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCGetMagicCube, magic_cube_multi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCMagicCubeBulletInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCMagicCubeBulletInfo, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCMagicCubeBulletInfo, totalnum_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCMagicCubeBulletInfo, curnum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSPreHit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSPreHit, screen_fish_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCPreHit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCPreHit, err_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCPreHit, fish_uid_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCPreHit, chair_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSPreShoot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSPreShoot, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSPreShoot, angle_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSPreShoot, shoot_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCPreShoot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCPreShoot, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCPreShoot, angle_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCPreShoot, shoot_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::FrozenFish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::FrozenFish, fish_id_),
  PROTOBUF_FIELD_OFFSET(::F4BY::FrozenFish, frozen_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCFrozenFish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCFrozenFish, frozenfish_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCValentineDayFish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCValentineDayFish, fish_info_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCValentineDayFish, bt_ratio_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCValentineDayFish, rand_multi_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCValentineDayFish, ball_multi_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCValentineDayFish, uid_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCKiRinFish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCKiRinFish, fish_info_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCKiRinFish, bt_ratio_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCKiRinFish, multi_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCKiRinFish, is_senior_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCKiRinFish, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCNvWaFishCapture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCNvWaFishCapture, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCNvWaFishCapture, fish_uid_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCNvWaFishCapture, ratio_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCNvWaFishCapture, nvwa_multiple_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCNvWaFishCapture, bt_kind_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCNvWaFishCapture, multi_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCBombGlobeFishInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCBombGlobeFishInfo, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCBombGlobeFishInfo, ratio_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCBombGlobeFishInfo, fish_uid_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCBombGlobeFishInfo, stage_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCBombGlobeFishInfo, bombid_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCBombGlobeFishInfo, total_earn_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCBombGlobeFishInfo, self_bombid_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCBombGlobeFishInfo, originid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSBombGlobeFishHit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSBombGlobeFishHit, bombid_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSBombGlobeFishHit, bt_type_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSBombGlobeFishHit, screen_fishes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCAnniversaryShowSelect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCAnniversaryShowSelect, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCAnniversaryShowSelect, show_select_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCAnniversaryShowSelect, remain_time_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCAnniversaryShowSelect, stage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSAnniversarySelectReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSAnniversarySelectReq, stage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::AnniversaryStage1Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::AnniversaryStage1Result, score_),
  PROTOBUF_FIELD_OFFSET(::F4BY::AnniversaryStage1Result, fish_uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::AnniversaryStage2Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::AnniversaryStage2Result, score_list_),
  PROTOBUF_FIELD_OFFSET(::F4BY::AnniversaryStage2Result, drop_times_),
  PROTOBUF_FIELD_OFFSET(::F4BY::AnniversaryStage2Result, multiple_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::AnniversaryStage3Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::AnniversaryStage3Result, origin_id_),
  PROTOBUF_FIELD_OFFSET(::F4BY::AnniversaryStage3Result, self_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCAnniversarySelectResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCAnniversarySelectResult, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCAnniversarySelectResult, stage_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCAnniversarySelectResult, bt_ratio_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCAnniversarySelectResult, multi_list_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCAnniversarySelectResult, total_earn_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCAnniversarySelectResult, death_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCAnniversarySelectResult, result1_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCAnniversarySelectResult, result2_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCAnniversarySelectResult, result3_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSAnniversaryHit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSAnniversaryHit, bombid_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSAnniversaryHit, bt_type_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSAnniversaryHit, screen_fishes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncAnniversaryHitStage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncAnniversaryHitStage, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncAnniversaryHitStage, origin_id_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncAnniversaryHitStage, self_id_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncAnniversaryHitStage, stage_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncAnniversaryHitStage, total_earn_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncAnniversaryHitStage, invalid_earn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::ScallopLottery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::ScallopLottery, id_),
  PROTOBUF_FIELD_OFFSET(::F4BY::ScallopLottery, type_),
  PROTOBUF_FIELD_OFFSET(::F4BY::ScallopLottery, status_),
  PROTOBUF_FIELD_OFFSET(::F4BY::ScallopLottery, reward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCCaptureScallop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCCaptureScallop, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCCaptureScallop, fish_uid_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCCaptureScallop, ratio_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCCaptureScallop, time_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCCaptureScallop, lottery_list_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCCaptureScallop, reward_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSOpenScallop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSOpenScallop, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCOpenScallop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCOpenScallop, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCOpenScallop, scallop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSettleScallopLottery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSettleScallopLottery, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSettleScallopLottery, earn_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSettleScallopLottery, lottery_list_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSettleScallopLottery, multi_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncScallopLottery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncScallopLottery, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncScallopLottery, ratio_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncScallopLottery, time_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncScallopLottery, lottery_list_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncScallopLottery, reward_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::OpenChestReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::OpenChestReward, id_),
  PROTOBUF_FIELD_OFFSET(::F4BY::OpenChestReward, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUpdateChestStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUpdateChestStatus, is_active_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUpdateChestStatus, chest_type_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUpdateChestStatus, total_progress_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUpdateChestStatus, remain_progress_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUpdateChestStatus, guide_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCUpdateChestStatus, available_reward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSChestConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::ChestBrief, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::ChestBrief, chest_type_),
  PROTOBUF_FIELD_OFFSET(::F4BY::ChestBrief, reward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCChestConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCChestConfig, end_time_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCChestConfig, chest_brief_list_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCChestConfig, min_ratio_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCChestConfig, auto_open_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCChestConfig, auto_option_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCChestConfig, is_enable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCOpenChest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCOpenChest, reward_list_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCOpenChest, auto_option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSSelectChestReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSSelectChestReward, select_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSelectChestReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSelectChestReward, reward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSChestSetAutoSelect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSChestSetAutoSelect, auto_option_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSChestSetAutoSelect, auto_open_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCChestSetAutoSelect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCChestSetAutoSelect, auto_option_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCChestSetAutoSelect, auto_open_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSChestSetEnable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSChestSetEnable, is_enable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCChestSetEnable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCChestSetEnable, is_enable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSpecEffect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSpecEffect, costmoney_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSpecEffect, earnmoney_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTortoiseExplode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTortoiseExplode, chair_idx_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTortoiseExplode, fish_uid_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTortoiseExplode, bullet_id_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTortoiseExplode, ratio_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTortoiseExplode, max_effect_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::RewardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::RewardInfo, prop_id_),
  PROTOBUF_FIELD_OFFSET(::F4BY::RewardInfo, prop_num_),
  PROTOBUF_FIELD_OFFSET(::F4BY::RewardInfo, quality_),
  PROTOBUF_FIELD_OFFSET(::F4BY::RewardInfo, spec_show_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::MissionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::MissionInfo, draw_times_),
  PROTOBUF_FIELD_OFFSET(::F4BY::MissionInfo, reward_list_),
  PROTOBUF_FIELD_OFFSET(::F4BY::MissionInfo, complete_),
  PROTOBUF_FIELD_OFFSET(::F4BY::MissionInfo, receive_),
  PROTOBUF_FIELD_OFFSET(::F4BY::MissionInfo, mission_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::BigRewardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::BigRewardInfo, big_reward_times_),
  PROTOBUF_FIELD_OFFSET(::F4BY::BigRewardInfo, draw_rewardlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::TreasureHuntConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::TreasureHuntConfig, term_),
  PROTOBUF_FIELD_OFFSET(::F4BY::TreasureHuntConfig, start_time_),
  PROTOBUF_FIELD_OFFSET(::F4BY::TreasureHuntConfig, end_time_),
  PROTOBUF_FIELD_OFFSET(::F4BY::TreasureHuntConfig, enable_),
  PROTOBUF_FIELD_OFFSET(::F4BY::TreasureHuntConfig, big_reward_info_),
  PROTOBUF_FIELD_OFFSET(::F4BY::TreasureHuntConfig, reward_list_),
  PROTOBUF_FIELD_OFFSET(::F4BY::TreasureHuntConfig, min_draw_),
  PROTOBUF_FIELD_OFFSET(::F4BY::TreasureHuntConfig, max_draw_),
  PROTOBUF_FIELD_OFFSET(::F4BY::TreasureHuntConfig, topic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSSyncConfigs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSSyncConfigs, config_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncConfigs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCSyncConfigs, treasure_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSDrawReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSDrawReward, num_),
  PROTOBUF_FIELD_OFFSET(::F4BY::CSDrawReward, draw_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCDrawReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCDrawReward, reward_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSTreasureHuntMission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTreasureHuntMission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTreasureHuntMission, mission_list_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTreasureHuntMission, draw_times_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSReceiveMissionReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSReceiveMissionReward, mission_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCReceiveMissionReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCReceiveMissionReward, reward_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSDrawTimes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCDrawTimes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCDrawTimes, total_draw_times_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCDrawTimes, big_reward_process_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCDrawTimes, free_draw_times_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCDrawTimes, draw_tickers_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSVerifyActivity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSVerifyActivity, activity_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCVerifyActivity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCVerifyActivity, open_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCVerifyActivity, activity_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::Package, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::Package, package_id_),
  PROTOBUF_FIELD_OFFSET(::F4BY::Package, limit_),
  PROTOBUF_FIELD_OFFSET(::F4BY::Package, consume_price_),
  PROTOBUF_FIELD_OFFSET(::F4BY::Package, limit_type_),
  PROTOBUF_FIELD_OFFSET(::F4BY::Package, consume_props_),
  PROTOBUF_FIELD_OFFSET(::F4BY::Package, purchase_times_),
  PROTOBUF_FIELD_OFFSET(::F4BY::Package, reward_list_),
  PROTOBUF_FIELD_OFFSET(::F4BY::Package, lock_),
  PROTOBUF_FIELD_OFFSET(::F4BY::Package, vip_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSTreasureHuntPackage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSTreasureHuntPackage, package_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTreasureHuntPackage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTreasureHuntPackage, package_list_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCTreasureHuntPackage, package_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::ExchangeShopInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::ExchangeShopInfo, level_),
  PROTOBUF_FIELD_OFFSET(::F4BY::ExchangeShopInfo, package_list_),
  PROTOBUF_FIELD_OFFSET(::F4BY::ExchangeShopInfo, unlock_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSExchangeShop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCExchangeShop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCExchangeShop, exchangeshoplist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSPurchasePackage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSPurchasePackage, package_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCPurchasePackage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCPurchasePackage, package_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSVerifyTermChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCVerifyTermChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCVerifyTermChange, change_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCVerifyTermChange, reward_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCWaterDropInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCWaterDropInfo, enable_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCWaterDropInfo, drop_count_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCWaterDropInfo, fragment_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSBuyGun, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSBuyGun, gun_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCBuyGun, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCBuyGun, gun_level_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCBuyGun, price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSBuyWings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSBuyWings, wings_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCBuyWings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCBuyWings, wings_id_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCBuyWings, price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCNotifyActStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::SCNotifyActStatus, act_type_),
  PROTOBUF_FIELD_OFFSET(::F4BY::SCNotifyActStatus, act_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSSetDoubleShoot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSSetDoubleShoot, extra_mul_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSFreePoolInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSFreePoolInfo, preparelottery_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSFreePoolLottery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSFreePoolLottery, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSFreePoolOpen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::F4BY::CSFreePoolOpen, openfreepool_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::F4BY::SC_SceneInfo)},
  { 7, -1, sizeof(::F4BY::CommonResp)},
  { 14, -1, sizeof(::F4BY::Object)},
  { 28, -1, sizeof(::F4BY::Obj)},
  { 35, -1, sizeof(::F4BY::Object1)},
  { 42, -1, sizeof(::F4BY::Object2)},
  { 49, -1, sizeof(::F4BY::Object3)},
  { 56, -1, sizeof(::F4BY::WheelObject)},
  { 63, -1, sizeof(::F4BY::Decimal)},
  { 70, -1, sizeof(::F4BY::CSLoginGameWithToken)},
  { 80, -1, sizeof(::F4BY::SCLoginGameWithToken)},
  { 87, -1, sizeof(::F4BY::CSUserReady)},
  { 93, -1, sizeof(::F4BY::EffectInfo)},
  { 100, -1, sizeof(::F4BY::StationBase)},
  { 120, -1, sizeof(::F4BY::SCUserReady)},
  { 126, -1, sizeof(::F4BY::SCNotifyLogin)},
  { 132, -1, sizeof(::F4BY::CSNotifyLogout)},
  { 137, -1, sizeof(::F4BY::SCNotifyLogout)},
  { 143, -1, sizeof(::F4BY::CSSetProbability)},
  { 151, -1, sizeof(::F4BY::SCSetProbability)},
  { 163, -1, sizeof(::F4BY::CSSetWings)},
  { 169, -1, sizeof(::F4BY::SCSetWings)},
  { 177, -1, sizeof(::F4BY::CSUserShoot)},
  { 189, -1, sizeof(::F4BY::SCUserShoot)},
  { 199, -1, sizeof(::F4BY::CSHitFish)},
  { 209, -1, sizeof(::F4BY::MultiInfo)},
  { 217, -1, sizeof(::F4BY::SCHitFish)},
  { 233, -1, sizeof(::F4BY::SCHitSpecialFish)},
  { 255, -1, sizeof(::F4BY::SyncPropInfoX)},
  { 265, -1, sizeof(::F4BY::UserSyncPropInfo)},
  { 272, -1, sizeof(::F4BY::CSSyncPropInfo)},
  { 279, -1, sizeof(::F4BY::SCSyncPropInfo)},
  { 285, -1, sizeof(::F4BY::CSSyncMoney)},
  { 291, -1, sizeof(::F4BY::SCSyncMoney)},
  { 302, -1, sizeof(::F4BY::FishTrace)},
  { 316, -1, sizeof(::F4BY::SCFishTracesList)},
  { 331, -1, sizeof(::F4BY::CSSyncFishReq)},
  { 337, -1, sizeof(::F4BY::SCSyncFishReq)},
  { 343, -1, sizeof(::F4BY::CSSyncFishRsp)},
  { 356, -1, sizeof(::F4BY::SCSyncFishRsp)},
  { 370, -1, sizeof(::F4BY::SCChangeScene)},
  { 376, -1, sizeof(::F4BY::CSFishOutsideScreen)},
  { 382, -1, sizeof(::F4BY::CSLockFish)},
  { 390, -1, sizeof(::F4BY::SCLockFish)},
  { 398, -1, sizeof(::F4BY::CSCrazySkill)},
  { 404, -1, sizeof(::F4BY::SCCrazySkill)},
  { 411, -1, sizeof(::F4BY::CSTrebleSkill)},
  { 417, -1, sizeof(::F4BY::SCTrebleSkill)},
  { 424, -1, sizeof(::F4BY::CSUserRunBackground)},
  { 430, -1, sizeof(::F4BY::SCUserRunBackground)},
  { 437, -1, sizeof(::F4BY::CSHeartBeat)},
  { 442, -1, sizeof(::F4BY::SCHeartBeat)},
  { 447, -1, sizeof(::F4BY::GunSpecEffect)},
  { 459, -1, sizeof(::F4BY::WingsSpecEffect)},
  { 470, -1, sizeof(::F4BY::WingsInfo)},
  { 483, -1, sizeof(::F4BY::GunInfo)},
  { 503, -1, sizeof(::F4BY::VipInfo)},
  { 510, -1, sizeof(::F4BY::PropInfo)},
  { 517, -1, sizeof(::F4BY::CSUserInfoNotify)},
  { 523, -1, sizeof(::F4BY::SCUserInfoNotify)},
  { 536, -1, sizeof(::F4BY::SCGameInfoNotify)},
  { 544, -1, sizeof(::F4BY::SCInfoRedDot)},
  { 551, -1, sizeof(::F4BY::JumpHighArena)},
  { 561, -1, sizeof(::F4BY::SCActivityInfo)},
  { 569, -1, sizeof(::F4BY::CSChat)},
  { 577, -1, sizeof(::F4BY::SCChat)},
  { 585, -1, sizeof(::F4BY::SCGainAward)},
  { 593, -1, sizeof(::F4BY::CSAwardPool)},
  { 598, -1, sizeof(::F4BY::SCAwardPool)},
  { 604, -1, sizeof(::F4BY::CSPropStatus)},
  { 611, -1, sizeof(::F4BY::SCPropStatus)},
  { 620, -1, sizeof(::F4BY::GivenCardAward)},
  { 628, -1, sizeof(::F4BY::UserAwardItem)},
  { 637, -1, sizeof(::F4BY::CSUserPoolInfo)},
  { 643, -1, sizeof(::F4BY::SCUserPoolInfo)},
  { 654, -1, sizeof(::F4BY::CSUserPoolStatus)},
  { 660, -1, sizeof(::F4BY::SCUserPoolStatus)},
  { 666, -1, sizeof(::F4BY::CSUserPoolPreDraw)},
  { 672, -1, sizeof(::F4BY::SCUserPoolPreDraw)},
  { 680, -1, sizeof(::F4BY::CSUserPoolDraw)},
  { 685, -1, sizeof(::F4BY::SCUserPoolDraw)},
  { 694, -1, sizeof(::F4BY::SCUserPoolAdd)},
  { 705, -1, sizeof(::F4BY::CSUserPoolDoubleInfo)},
  { 710, -1, sizeof(::F4BY::SCUserPoolDoubleInfo)},
  { 718, -1, sizeof(::F4BY::CSUserPoolDouble)},
  { 724, -1, sizeof(::F4BY::SCUserPoolDouble)},
  { 734, -1, sizeof(::F4BY::CSLuckyPoolInfo)},
  { 739, -1, sizeof(::F4BY::SCLuckyPoolInfo)},
  { 746, -1, sizeof(::F4BY::CSLuckyPoolDraw)},
  { 751, -1, sizeof(::F4BY::SCLuckyPoolDraw)},
  { 757, -1, sizeof(::F4BY::CSTorpedoPreShoot)},
  { 763, -1, sizeof(::F4BY::SCTorpedoPreShoot)},
  { 772, -1, sizeof(::F4BY::CSTorpedoCancelShoot)},
  { 777, -1, sizeof(::F4BY::SCTorpedoCancelShoot)},
  { 783, -1, sizeof(::F4BY::CSTorpedoShoot)},
  { 791, -1, sizeof(::F4BY::SCTorpedoShoot)},
  { 800, -1, sizeof(::F4BY::CSTorpedoHit)},
  { 805, -1, sizeof(::F4BY::SCTorpedoHit)},
  { 818, -1, sizeof(::F4BY::CSCallFish)},
  { 824, -1, sizeof(::F4BY::SCCallFish)},
  { 834, -1, sizeof(::F4BY::SCComTask)},
  { 843, -1, sizeof(::F4BY::SCTaskInfo)},
  { 857, -1, sizeof(::F4BY::CSSaveSkillTime)},
  { 866, -1, sizeof(::F4BY::SevenDayTask)},
  { 877, -1, sizeof(::F4BY::SevenDayDetail)},
  { 885, -1, sizeof(::F4BY::CSSevenDayInfo)},
  { 890, -1, sizeof(::F4BY::SCSevenDayInfo)},
  { 903, -1, sizeof(::F4BY::CSSevenDayAward)},
  { 911, -1, sizeof(::F4BY::SCSevenDayAward)},
  { 919, -1, sizeof(::F4BY::SCVipChargeAward)},
  { 926, -1, sizeof(::F4BY::CSClickStatistic)},
  { 933, -1, sizeof(::F4BY::CSNewClickStatistic)},
  { 939, -1, sizeof(::F4BY::CSUserLog)},
  { 947, -1, sizeof(::F4BY::CSUserEvent)},
  { 954, -1, sizeof(::F4BY::CSGetAwardPoolRecord)},
  { 959, -1, sizeof(::F4BY::AwardPoolRecord)},
  { 969, -1, sizeof(::F4BY::SCGetAwardPoolRecord)},
  { 975, -1, sizeof(::F4BY::SCPropDropNotify)},
  { 983, -1, sizeof(::F4BY::CSUseProp)},
  { 989, -1, sizeof(::F4BY::SCUseProp)},
  { 999, -1, sizeof(::F4BY::SCFrozenTime)},
  { 1007, -1, sizeof(::F4BY::SCTreasureFishInfo)},
  { 1016, -1, sizeof(::F4BY::SCTreasureFishCatched)},
  { 1035, -1, sizeof(::F4BY::MatchPackAddition)},
  { 1046, -1, sizeof(::F4BY::CSMatchPackAddition)},
  { 1051, -1, sizeof(::F4BY::SCMatchPackAddition)},
  { 1057, -1, sizeof(::F4BY::SCMatchPackInvail)},
  { 1063, -1, sizeof(::F4BY::CSMatchPackBuying)},
  { 1069, -1, sizeof(::F4BY::AwardDetail)},
  { 1080, -1, sizeof(::F4BY::LuckyAwardNotify)},
  { 1087, -1, sizeof(::F4BY::CSGameItemSwitch)},
  { 1092, -1, sizeof(::F4BY::SCGameItemSwitch)},
  { 1098, -1, sizeof(::F4BY::AwardProp)},
  { 1105, -1, sizeof(::F4BY::LuckyTaskInfo)},
  { 1116, -1, sizeof(::F4BY::CSLuckyDrawInfo)},
  { 1121, -1, sizeof(::F4BY::SCLuckyDrawInfo)},
  { 1141, -1, sizeof(::F4BY::CSGetLuckyTaskAward)},
  { 1147, -1, sizeof(::F4BY::SCGetLuckyTaskAward)},
  { 1155, -1, sizeof(::F4BY::CSGetLuckyNum)},
  { 1161, -1, sizeof(::F4BY::SCGetLuckyNum)},
  { 1169, -1, sizeof(::F4BY::CSLuckyRedDot)},
  { 1174, -1, sizeof(::F4BY::SCLuckyRedDot)},
  { 1180, -1, sizeof(::F4BY::LuckyRecord)},
  { 1190, -1, sizeof(::F4BY::OwnRecord)},
  { 1199, -1, sizeof(::F4BY::CSLuckyRecord)},
  { 1205, -1, sizeof(::F4BY::SCLuckyRecord)},
  { 1212, -1, sizeof(::F4BY::SCOwnRecord)},
  { 1218, -1, sizeof(::F4BY::CSBombInfo)},
  { 1226, -1, sizeof(::F4BY::SCSyncBomb)},
  { 1240, -1, sizeof(::F4BY::SCSyncBombFinish)},
  { 1248, -1, sizeof(::F4BY::CSBombHitFishInfo)},
  { 1256, -1, sizeof(::F4BY::SCGetMagicCube)},
  { 1268, -1, sizeof(::F4BY::SCMagicCubeBulletInfo)},
  { 1276, -1, sizeof(::F4BY::CSPreHit)},
  { 1282, -1, sizeof(::F4BY::SCPreHit)},
  { 1290, -1, sizeof(::F4BY::CSPreShoot)},
  { 1298, -1, sizeof(::F4BY::SCPreShoot)},
  { 1306, -1, sizeof(::F4BY::FrozenFish)},
  { 1313, -1, sizeof(::F4BY::SCFrozenFish)},
  { 1319, -1, sizeof(::F4BY::SCValentineDayFish)},
  { 1329, -1, sizeof(::F4BY::SCKiRinFish)},
  { 1339, -1, sizeof(::F4BY::SCNvWaFishCapture)},
  { 1350, -1, sizeof(::F4BY::SCBombGlobeFishInfo)},
  { 1363, -1, sizeof(::F4BY::CSBombGlobeFishHit)},
  { 1371, -1, sizeof(::F4BY::SCAnniversaryShowSelect)},
  { 1380, -1, sizeof(::F4BY::CSAnniversarySelectReq)},
  { 1386, -1, sizeof(::F4BY::AnniversaryStage1Result)},
  { 1393, -1, sizeof(::F4BY::AnniversaryStage2Result)},
  { 1401, -1, sizeof(::F4BY::AnniversaryStage3Result)},
  { 1408, -1, sizeof(::F4BY::SCAnniversarySelectResult)},
  { 1422, -1, sizeof(::F4BY::CSAnniversaryHit)},
  { 1430, -1, sizeof(::F4BY::SCSyncAnniversaryHitStage)},
  { 1441, -1, sizeof(::F4BY::ScallopLottery)},
  { 1450, -1, sizeof(::F4BY::SCCaptureScallop)},
  { 1461, -1, sizeof(::F4BY::CSOpenScallop)},
  { 1467, -1, sizeof(::F4BY::SCOpenScallop)},
  { 1474, -1, sizeof(::F4BY::SCSettleScallopLottery)},
  { 1483, -1, sizeof(::F4BY::SCSyncScallopLottery)},
  { 1493, -1, sizeof(::F4BY::OpenChestReward)},
  { 1500, -1, sizeof(::F4BY::SCUpdateChestStatus)},
  { 1511, -1, sizeof(::F4BY::CSChestConfig)},
  { 1516, -1, sizeof(::F4BY::ChestBrief)},
  { 1523, -1, sizeof(::F4BY::SCChestConfig)},
  { 1534, -1, sizeof(::F4BY::SCOpenChest)},
  { 1541, -1, sizeof(::F4BY::CSSelectChestReward)},
  { 1547, -1, sizeof(::F4BY::SCSelectChestReward)},
  { 1553, -1, sizeof(::F4BY::CSChestSetAutoSelect)},
  { 1560, -1, sizeof(::F4BY::SCChestSetAutoSelect)},
  { 1567, -1, sizeof(::F4BY::CSChestSetEnable)},
  { 1573, -1, sizeof(::F4BY::SCChestSetEnable)},
  { 1579, -1, sizeof(::F4BY::SCSpecEffect)},
  { 1586, -1, sizeof(::F4BY::SCTortoiseExplode)},
  { 1596, -1, sizeof(::F4BY::RewardInfo)},
  { 1605, -1, sizeof(::F4BY::MissionInfo)},
  { 1615, -1, sizeof(::F4BY::BigRewardInfo)},
  { 1622, -1, sizeof(::F4BY::TreasureHuntConfig)},
  { 1636, -1, sizeof(::F4BY::CSSyncConfigs)},
  { 1642, -1, sizeof(::F4BY::SCSyncConfigs)},
  { 1648, -1, sizeof(::F4BY::CSDrawReward)},
  { 1655, -1, sizeof(::F4BY::SCDrawReward)},
  { 1661, -1, sizeof(::F4BY::CSTreasureHuntMission)},
  { 1666, -1, sizeof(::F4BY::SCTreasureHuntMission)},
  { 1673, -1, sizeof(::F4BY::CSReceiveMissionReward)},
  { 1679, -1, sizeof(::F4BY::SCReceiveMissionReward)},
  { 1685, -1, sizeof(::F4BY::CSDrawTimes)},
  { 1690, -1, sizeof(::F4BY::SCDrawTimes)},
  { 1699, -1, sizeof(::F4BY::CSVerifyActivity)},
  { 1705, -1, sizeof(::F4BY::SCVerifyActivity)},
  { 1712, -1, sizeof(::F4BY::Package)},
  { 1726, -1, sizeof(::F4BY::CSTreasureHuntPackage)},
  { 1732, -1, sizeof(::F4BY::SCTreasureHuntPackage)},
  { 1739, -1, sizeof(::F4BY::ExchangeShopInfo)},
  { 1747, -1, sizeof(::F4BY::CSExchangeShop)},
  { 1752, -1, sizeof(::F4BY::SCExchangeShop)},
  { 1758, -1, sizeof(::F4BY::CSPurchasePackage)},
  { 1764, -1, sizeof(::F4BY::SCPurchasePackage)},
  { 1770, -1, sizeof(::F4BY::CSVerifyTermChange)},
  { 1775, -1, sizeof(::F4BY::SCVerifyTermChange)},
  { 1782, -1, sizeof(::F4BY::SCWaterDropInfo)},
  { 1790, -1, sizeof(::F4BY::CSBuyGun)},
  { 1796, -1, sizeof(::F4BY::SCBuyGun)},
  { 1803, -1, sizeof(::F4BY::CSBuyWings)},
  { 1809, -1, sizeof(::F4BY::SCBuyWings)},
  { 1816, -1, sizeof(::F4BY::SCNotifyActStatus)},
  { 1823, -1, sizeof(::F4BY::CSSetDoubleShoot)},
  { 1829, -1, sizeof(::F4BY::CSFreePoolInfo)},
  { 1835, -1, sizeof(::F4BY::CSFreePoolLottery)},
  { 1841, -1, sizeof(::F4BY::CSFreePoolOpen)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SC_SceneInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CommonResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_Object_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_Obj_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_Object1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_Object2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_Object3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_WheelObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_Decimal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSLoginGameWithToken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCLoginGameWithToken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSUserReady_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_EffectInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_StationBase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCUserReady_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCNotifyLogin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSNotifyLogout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCNotifyLogout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSSetProbability_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCSetProbability_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSSetWings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCSetWings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSUserShoot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCUserShoot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSHitFish_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_MultiInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCHitFish_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCHitSpecialFish_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SyncPropInfoX_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_UserSyncPropInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSSyncPropInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCSyncPropInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSSyncMoney_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCSyncMoney_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_FishTrace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCFishTracesList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSSyncFishReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCSyncFishReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSSyncFishRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCSyncFishRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCChangeScene_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSFishOutsideScreen_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSLockFish_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCLockFish_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSCrazySkill_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCCrazySkill_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSTrebleSkill_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCTrebleSkill_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSUserRunBackground_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCUserRunBackground_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSHeartBeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCHeartBeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_GunSpecEffect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_WingsSpecEffect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_WingsInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_GunInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_VipInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_PropInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSUserInfoNotify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCUserInfoNotify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCGameInfoNotify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCInfoRedDot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_JumpHighArena_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCActivityInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSChat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCChat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCGainAward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSAwardPool_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCAwardPool_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSPropStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCPropStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_GivenCardAward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_UserAwardItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSUserPoolInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCUserPoolInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSUserPoolStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCUserPoolStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSUserPoolPreDraw_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCUserPoolPreDraw_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSUserPoolDraw_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCUserPoolDraw_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCUserPoolAdd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSUserPoolDoubleInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCUserPoolDoubleInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSUserPoolDouble_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCUserPoolDouble_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSLuckyPoolInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCLuckyPoolInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSLuckyPoolDraw_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCLuckyPoolDraw_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSTorpedoPreShoot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCTorpedoPreShoot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSTorpedoCancelShoot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCTorpedoCancelShoot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSTorpedoShoot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCTorpedoShoot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSTorpedoHit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCTorpedoHit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSCallFish_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCCallFish_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCComTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCTaskInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSSaveSkillTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SevenDayTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SevenDayDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSSevenDayInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCSevenDayInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSSevenDayAward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCSevenDayAward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCVipChargeAward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSClickStatistic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSNewClickStatistic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSUserLog_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSUserEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSGetAwardPoolRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_AwardPoolRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCGetAwardPoolRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCPropDropNotify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSUseProp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCUseProp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCFrozenTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCTreasureFishInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCTreasureFishCatched_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_MatchPackAddition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSMatchPackAddition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCMatchPackAddition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCMatchPackInvail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSMatchPackBuying_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_AwardDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_LuckyAwardNotify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSGameItemSwitch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCGameItemSwitch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_AwardProp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_LuckyTaskInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSLuckyDrawInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCLuckyDrawInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSGetLuckyTaskAward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCGetLuckyTaskAward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSGetLuckyNum_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCGetLuckyNum_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSLuckyRedDot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCLuckyRedDot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_LuckyRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_OwnRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSLuckyRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCLuckyRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCOwnRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSBombInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCSyncBomb_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCSyncBombFinish_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSBombHitFishInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCGetMagicCube_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCMagicCubeBulletInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSPreHit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCPreHit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSPreShoot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCPreShoot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_FrozenFish_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCFrozenFish_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCValentineDayFish_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCKiRinFish_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCNvWaFishCapture_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCBombGlobeFishInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSBombGlobeFishHit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCAnniversaryShowSelect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSAnniversarySelectReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_AnniversaryStage1Result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_AnniversaryStage2Result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_AnniversaryStage3Result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCAnniversarySelectResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSAnniversaryHit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCSyncAnniversaryHitStage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_ScallopLottery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCCaptureScallop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSOpenScallop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCOpenScallop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCSettleScallopLottery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCSyncScallopLottery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_OpenChestReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCUpdateChestStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSChestConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_ChestBrief_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCChestConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCOpenChest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSSelectChestReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCSelectChestReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSChestSetAutoSelect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCChestSetAutoSelect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSChestSetEnable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCChestSetEnable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCSpecEffect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCTortoiseExplode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_RewardInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_MissionInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_BigRewardInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_TreasureHuntConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSSyncConfigs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCSyncConfigs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSDrawReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCDrawReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSTreasureHuntMission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCTreasureHuntMission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSReceiveMissionReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCReceiveMissionReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSDrawTimes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCDrawTimes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSVerifyActivity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCVerifyActivity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_Package_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSTreasureHuntPackage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCTreasureHuntPackage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_ExchangeShopInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSExchangeShop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCExchangeShop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSPurchasePackage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCPurchasePackage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSVerifyTermChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCVerifyTermChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCWaterDropInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSBuyGun_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCBuyGun_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSBuyWings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCBuyWings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_SCNotifyActStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSSetDoubleShoot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSFreePoolInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSFreePoolLottery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::F4BY::_CSFreePoolOpen_default_instance_),
};

const char descriptor_table_protodef_F4BY_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nF4BY.proto\022\004F4BY\"N\n\014SC_SceneInfo\022\020\n\010be"
  "t_list\030\001 \003(\005\022,\n\021station_base_list\030\002 \003(\0132"
  "\021.F4BY.StationBase\"+\n\nCommonResp\022\014\n\004code"
  "\030\001 \001(\005\022\017\n\007message\030\002 \001(\t\"\252\001\n\006Object\022\n\n\002id"
  "\030\001 \001(\005\022\r\n\005count\030\002 \001(\005\022\r\n\005ratio\030\003 \001(\005\022\014\n\004"
  "time\030\004 \001(\002\022\020\n\010multiple\030\005 \001(\005\022\013\n\003uid\030\006 \001("
  "\005\022\020\n\010originId\030\007 \001(\005\022#\n\nmulti_list\030\010 \003(\0132"
  "\017.F4BY.MultiInfo\022\022\n\norigin_uid\030\t \001(\005\" \n\003"
  "Obj\022\n\n\002id\030\001 \001(\005\022\r\n\005value\030\002 \001(\005\"%\n\007Object"
  "1\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\005\"%\n\007Object2"
  "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"%\n\007Object3\022"
  "\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005\";\n\013WheelObje"
  "ct\022\035\n\006wheels\030\001 \003(\0132\r.F4BY.Object3\022\r\n\005rat"
  "io\030\002 \001(\005\"%\n\007Decimal\022\013\n\003num\030\001 \001(\005\022\r\n\005deno"
  "m\030\002 \001(\005\"n\n\024CSLoginGameWithToken\022\020\n\010playe"
  "rId\030\001 \001(\005\022\r\n\005token\030\002 \001(\t\022\016\n\006oSType\030\003 \001(\005"
  "\022\017\n\007tableId\030\004 \001(\005\022\024\n\014last_tableId\030\005 \001(\005\""
  "<\n\024SCLoginGameWithToken\022\023\n\013scene_index\030\001"
  " \001(\005\022\017\n\007tableId\030\002 \001(\005\"\037\n\013CSUserReady\022\020\n\010"
  "playerId\030\001 \001(\005\"2\n\nEffectInfo\022\021\n\teffect_i"
  "d\030\001 \001(\005\022\021\n\tis_global\030\002 \001(\010\"\333\002\n\013StationBa"
  "se\022\021\n\tgun_ratio\030\001 \001(\005\022\021\n\tgun_level\030\002 \001(\005"
  "\022\022\n\nuser_score\030\003 \001(\003\022\021\n\tchair_idx\030\004 \001(\005\022"
  "\023\n\013player_name\030\005 \001(\t\022\021\n\tplayer_id\030\006 \001(\005\022"
  "\013\n\003vip\030\007 \001(\005\022\016\n\006status\030\010 \001(\005\022\030\n\020crazy_sk"
  "ill_open\030\t \001(\010\022\023\n\013user_ticket\030\n \001(\005\022\016\n\006e"
  "ffect\030\013 \001(\005\022\022\n\nextra_data\030\014 \001(\005\022(\n\021red_p"
  "acket_ticket\030\r \001(\0132\r.F4BY.Decimal\022%\n\013eff"
  "ect_info\030\016 \001(\0132\020.F4BY.EffectInfo\022\026\n\016wing"
  "s_props_id\030\017 \001(\005\";\n\013SCUserReady\022,\n\021stati"
  "on_base_list\030\001 \003(\0132\021.F4BY.StationBase\"=\n"
  "\rSCNotifyLogin\022,\n\021station_base_list\030\001 \001("
  "\0132\021.F4BY.StationBase\"\020\n\016CSNotifyLogout\"#"
  "\n\016SCNotifyLogout\022\021\n\tchair_idx\030\001 \001(\005\"N\n\020C"
  "SSetProbability\022\022\n\nadd_or_del\030\001 \001(\005\022\021\n\tg"
  "un_level\030\002 \001(\005\022\023\n\013is_use_auto\030\003 \001(\010\"\215\001\n\020"
  "SCSetProbability\022\014\n\004code\030\001 \001(\005\022\021\n\tchair_"
  "idx\030\002 \001(\005\022\021\n\tgun_ratio\030\003 \001(\005\022\021\n\tgun_leve"
  "l\030\004 \001(\005\022\013\n\003msg\030\005 \001(\t\022\021\n\tis_unlock\030\006 \001(\010\022"
  "\022\n\nextra_data\030\007 \001(\005\"#\n\nCSSetWings\022\025\n\rwin"
  "gs_prop_id\030\001 \001(\005\"D\n\nSCSetWings\022\021\n\tchair_"
  "idx\030\001 \001(\005\022\025\n\rwings_prop_id\030\002 \001(\005\022\014\n\004code"
  "\030\003 \001(\005\"\213\001\n\013CSUserShoot\022\r\n\005angle\030\001 \001(\005\022\021\n"
  "\tbullet_id\030\002 \003(\005\022\r\n\005ratio\030\003 \001(\005\022\023\n\013bulle"
  "t_type\030\004 \001(\005\022\021\n\tis_offset\030\005 \001(\010\022\020\n\010chair"
  "_id\030\006 \001(\005\022\021\n\textra_mul\030\007 \001(\005\"j\n\013SCUserSh"
  "oot\022\021\n\tchair_idx\030\001 \001(\005\022\r\n\005angle\030\002 \001(\005\022\r\n"
  "\005score\030\003 \001(\005\022\023\n\013bullet_type\030\004 \001(\005\022\025\n\rbul"
  "let_offset\030\005 \001(\010\"h\n\tCSHitFish\022\020\n\010fish_ui"
  "d\030\001 \001(\005\022\021\n\tbullet_id\030\002 \001(\005\022\025\n\rscreen_fis"
  "hes\030\003 \003(\005\022\020\n\010chair_id\030\004 \001(\005\022\r\n\005ratio\030\005 \001"
  "(\005\"\?\n\tMultiInfo\022\017\n\007bt_type\030\001 \001(\005\022\020\n\010bt_m"
  "ulti\030\002 \001(\005\022\017\n\007bt_base\030\003 \001(\005\"\206\002\n\tSCHitFis"
  "h\022\021\n\tchair_idx\030\001 \001(\005\022\020\n\010fish_uid\030\002 \001(\005\022\014"
  "\n\004earn\030\003 \001(\005\022\022\n\nuser_score\030\004 \001(\003\022\022\n\nfish"
  "_value\030\005 \001(\005\022\020\n\010multiple\030\006 \001(\005\022\027\n\017hit_bu"
  "llet_type\030\007 \001(\005\022\030\n\020magic_cube_multi\030\010 \001("
  "\005\022#\n\nmulti_list\030\t \003(\0132\017.F4BY.MultiInfo\022\022"
  "\n\norigin_uid\030\n \001(\005\022 \n\ndrop_props\030\013 \003(\0132\014"
  ".F4BY.Object\"\235\003\n\020SCHitSpecialFish\022\021\n\tcha"
  "ir_idx\030\001 \001(\005\022\020\n\010fish_uid\030\002 \001(\005\022\014\n\004earn\030\003"
  " \001(\005\022\022\n\nfish_value\030\004 \001(\005\022\022\n\nuser_score\030\005"
  " \001(\003\022\r\n\005death\030\006 \001(\010\022\022\n\ngrow_stage\030\007 \001(\005\022"
  "\020\n\010multiple\030\010 \001(\005\022\"\n\014shock_fishes\030\t \003(\0132"
  "\014.F4BY.Object\022 \n\ndrop_props\030\n \003(\0132\014.F4BY"
  ".Object\022 \n\005wheel\030\013 \001(\0132\021.F4BY.WheelObjec"
  "t\022\027\n\017hit_bullet_type\030\014 \001(\005\022\017\n\007prop_no\030\r "
  "\001(\005\022\030\n\020magic_cube_multi\030\016 \001(\005\022#\n\nmulti_l"
  "ist\030\017 \003(\0132\017.F4BY.MultiInfo\022\022\n\norigin_uid"
  "\030\020 \001(\005\022\024\n\014dragon_score\030\021 \001(\005\"`\n\rSyncProp"
  "InfoX\022\032\n\004prop\030\001 \001(\0132\014.F4BY.Object\022\t\n\001x\030\002"
  " \001(\002\022\t\n\001y\030\003 \001(\002\022\r\n\005angle\030\004 \001(\002\022\016\n\006status"
  "\030\005 \001(\005\"I\n\020UserSyncPropInfo\022\021\n\tchair_idx\030"
  "\001 \001(\005\022\"\n\005props\030\002 \003(\0132\023.F4BY.SyncPropInfo"
  "X\"F\n\016CSSyncPropInfo\022!\n\004info\030\001 \001(\0132\023.F4BY"
  ".SyncPropInfoX\022\021\n\tchair_idx\030\002 \001(\005\"7\n\016SCS"
  "yncPropInfo\022%\n\005users\030\001 \003(\0132\026.F4BY.UserSy"
  "ncPropInfo\"\033\n\013CSSyncMoney\022\014\n\004type\030\001 \001(\005\""
  "i\n\013SCSyncMoney\022\021\n\tchair_idx\030\001 \001(\005\022\r\n\005sco"
  "re\030\002 \001(\005\022\014\n\004type\030\003 \001(\005\022\r\n\005delta\030\004 \001(\005\022\016\n"
  "\006ticket\030\005 \001(\005\022\013\n\003vip\030\006 \001(\005\"\274\001\n\tFishTrace"
  "\022\020\n\010fish_uid\030\001 \001(\005\022\021\n\tfish_type\030\002 \001(\005\022\022\n"
  "\nfish_layer\030\003 \001(\005\022\022\n\nfish_stage\030\004 \001(\005\022\017\n"
  "\007is_aced\030\005 \001(\010\022\022\n\nalive_time\030\006 \001(\005\022\022\n\nbe"
  "ads_list\030\007 \003(\005\022\026\n\016fish_torpedoId\030\010 \001(\005\022\021"
  "\n\tfish_road\030\t \001(\005\"\202\002\n\020SCFishTracesList\022$"
  "\n\013fish_traces\030\001 \003(\0132\017.F4BY.FishTrace\022\021\n\t"
  "fish_road\030\002 \001(\005\022\022\n\nfish_array\030\003 \001(\005\022\027\n\017c"
  "reate_interval\030\004 \001(\005\022\021\n\tis_called\030\005 \001(\010\022"
  "\030\n\020after_tide_first\030\006 \001(\010\022%\n\tcall_type\030\007"
  " \001(\0162\022.F4BY.CallFishType\022\022\n\nmove_delay\030\010"
  " \001(\002\022\020\n\010road_idx\030\t \001(\005\022\016\n\006move_t\030\n \001(\002\"!"
  "\n\rCSSyncFishReq\022\020\n\010chair_id\030\001 \001(\005\"&\n\rSCS"
  "yncFishReq\022\025\n\rreq_player_id\030\001 \001(\005\"\271\001\n\rCS"
  "SyncFishRsp\022$\n\013fish_traces\030\001 \003(\0132\017.F4BY."
  "FishTrace\022\021\n\tfish_road\030\002 \001(\005\022\022\n\nfish_arr"
  "ay\030\003 \001(\005\022\022\n\nmove_delay\030\004 \001(\002\022\020\n\010road_idx"
  "\030\005 \001(\005\022\016\n\006move_t\030\006 \001(\002\022\016\n\006finish\030\007 \001(\010\022\025"
  "\n\rreq_player_id\030\010 \001(\005\"\345\001\n\rSCSyncFishRsp\022"
  "$\n\013fish_traces\030\001 \003(\0132\017.F4BY.FishTrace\022\021\n"
  "\tfish_road\030\002 \001(\005\022\022\n\nfish_array\030\003 \001(\005\022\022\n\n"
  "move_delay\030\004 \001(\002\022\020\n\010road_idx\030\005 \001(\005\022\016\n\006mo"
  "ve_t\030\006 \001(\002\022\027\n\017create_interval\030\007 \001(\002\022\021\n\ti"
  "s_called\030\010 \001(\010\022%\n\tcall_type\030\t \001(\0162\022.F4BY"
  ".CallFishType\"$\n\rSCChangeScene\022\023\n\013scene_"
  "index\030\001 \001(\005\"\'\n\023CSFishOutsideScreen\022\020\n\010fi"
  "sh_uid\030\001 \001(\005\"B\n\nCSLockFish\022\020\n\010fish_uid\030\001"
  " \001(\005\022\017\n\007is_open\030\002 \001(\010\022\021\n\tchair_idx\030\003 \001(\005"
  "\"B\n\nSCLockFish\022\021\n\tchair_idx\030\001 \001(\005\022\020\n\010fis"
  "h_uid\030\002 \001(\005\022\017\n\007is_open\030\003 \001(\010\"\037\n\014CSCrazyS"
  "kill\022\017\n\007is_open\030\001 \001(\010\"2\n\014SCCrazySkill\022\021\n"
  "\tchair_idx\030\001 \001(\005\022\017\n\007is_open\030\002 \001(\010\" \n\rCST"
  "rebleSkill\022\017\n\007is_open\030\001 \001(\010\"3\n\rSCTrebleS"
  "kill\022\021\n\tchair_idx\030\001 \001(\005\022\017\n\007is_open\030\002 \001(\010"
  "\")\n\023CSUserRunBackground\022\022\n\nbackground\030\001 "
  "\001(\010\"<\n\023SCUserRunBackground\022\021\n\tchair_idx\030"
  "\001 \001(\005\022\022\n\nbackground\030\002 \001(\010\"\r\n\013CSHeartBeat"
  "\"\r\n\013SCHeartBeat\"\242\001\n\rGunSpecEffect\022\022\n\nrat"
  "ioLimit\030\001 \001(\005\022\025\n\rhitChangeRate\030\002 \001(\002\022\027\n\017"
  "moneyChangeRate\030\003 \001(\002\022\024\n\014violenceRate\030\004 "
  "\001(\002\022\021\n\tspeedRate\030\005 \001(\002\022\020\n\010advanced\030\006 \001(\010"
  "\022\022\n\ndouble_tag\030\007 \001(\010\"\216\001\n\017WingsSpecEffect"
  "\022\021\n\tspeedRate\030\001 \001(\002\022\022\n\nratioLimit\030\002 \001(\005\022"
  "\025\n\rhitChangeRate\030\003 \001(\002\022\027\n\017moneyChangeRat"
  "e\030\004 \001(\002\022\020\n\010advanced\030\005 \001(\010\022\022\n\ndouble_tag\030"
  "\006 \001(\010\"\301\001\n\tWingsInfo\022\020\n\010wings_id\030\001 \001(\005\022\016\n"
  "\006enable\030\002 \001(\010\0220\n\021wings_spec_effect\030\003 \001(\013"
  "2\025.F4BY.WingsSpecEffect\022\024\n\014receive_type\030"
  "\004 \001(\005\022\023\n\013activity_id\030\005 \001(\005\022\r\n\005price\030\006 \001("
  "\005\022\022\n\nnew_enable\030\007 \001(\010\022\022\n\ndouble_tag\030\010 \001("
  "\010\"\270\002\n\007GunInfo\022\021\n\tgun_level\030\001 \001(\005\022\021\n\trati"
  "o_min\030\002 \001(\005\022\021\n\tratio_max\030\003 \001(\005\022\016\n\006enable"
  "\030\004 \001(\010\022\022\n\nnew_enable\030\005 \001(\010\022\016\n\006is_vip\030\006 \001"
  "(\010\022\021\n\tvip_limit\030\007 \001(\005\022\021\n\tis_member\030\010 \001(\010"
  "\022\022\n\nmember_sec\030\t \001(\005\022\022\n\nextra_data\030\n \001(\005"
  "\022*\n\rgunSpecEffect\030\013 \001(\0132\023.F4BY.GunSpecEf"
  "fect\022\r\n\005price\030\014 \001(\005\022\024\n\014attack_speed\030\r \001("
  "\002\022\014\n\004rage\030\016 \001(\002\022\023\n\013activity_id\030\017 \001(\005\"+\n\007"
  "VipInfo\022\017\n\007old_vip\030\001 \001(\005\022\017\n\007cur_vip\030\002 \001("
  "\005\"6\n\010PropInfo\022\016\n\006enable\030\001 \001(\010\022\032\n\004prop\030\002 "
  "\001(\0132\014.F4BY.Object\"%\n\020CSUserInfoNotify\022\021\n"
  "\tbroadcast\030\001 \001(\010\"\366\001\n\020SCUserInfoNotify\022\021\n"
  "\tchair_idx\030\001 \001(\005\022\037\n\010gun_info\030\002 \003(\0132\r.F4B"
  "Y.GunInfo\022#\n\nwings_info\030\003 \003(\0132\017.F4BY.Win"
  "gsInfo\022\037\n\010vip_info\030\004 \001(\0132\r.F4BY.VipInfo\022"
  "!\n\tprop_info\030\005 \003(\0132\016.F4BY.PropInfo\022\026\n\016la"
  "st_gun_level\030\006 \001(\005\022\022\n\nlast_ratio\030\007 \001(\005\022\031"
  "\n\021last_wings_propId\030\010 \001(\005\"a\n\020SCGameInfoN"
  "otify\022\021\n\tuser_pool\030\001 \001(\010\022\022\n\naward_fish\030\002"
  " \003(\005\022&\n\017user_pool_limit\030\003 \003(\0132\r.F4BY.Obj"
  "ect3\"2\n\014SCInfoRedDot\022\021\n\tseven_day\030\001 \001(\010\022"
  "\017\n\007red_dot\030\002 \001(\010\"\\\n\rJumpHighArena\022\017\n\007is_"
  "open\030\001 \001(\010\022\013\n\003vip\030\002 \001(\005\022\014\n\004coin\030\003 \001(\005\022\021\n"
  "\tgame_time\030\004 \001(\005\022\014\n\004tips\030\005 \001(\t\"X\n\016SCActi"
  "vityInfo\022!\n\004jump\030\001 \001(\0132\023.F4BY.JumpHighAr"
  "ena\022\r\n\005limit\030\002 \001(\005\022\024\n\014pool_is_open\030\003 \001(\010"
  "\">\n\006CSChat\022\020\n\010msg_type\030\001 \001(\005\022\017\n\007msg_idx\030"
  "\002 \001(\005\022\021\n\tchair_idx\030\003 \001(\005\">\n\006SCChat\022\021\n\tch"
  "air_idx\030\001 \001(\005\022\020\n\010msg_type\030\002 \001(\005\022\017\n\007msg_i"
  "dx\030\003 \001(\005\"L\n\013SCGainAward\022\021\n\tchair_idx\030\001 \001"
  "(\005\022\r\n\005score\030\002 \001(\005\022\033\n\005award\030\003 \001(\0132\014.F4BY."
  "Object\"\r\n\013CSAwardPool\"*\n\013SCAwardPool\022\033\n\004"
  "pool\030\001 \003(\0132\r.F4BY.Object3\"/\n\014CSPropStatu"
  "s\022\017\n\007prop_id\030\001 \001(\005\022\016\n\006status\030\002 \001(\005\"Q\n\014SC"
  "PropStatus\022\021\n\tchair_idx\030\001 \001(\005\022\017\n\007prop_id"
  "\030\002 \001(\005\022\016\n\006status\030\003 \001(\005\022\r\n\005bt_id\030\004 \001(\005\"B\n"
  "\016GivenCardAward\022\020\n\010card_idx\030\001 \001(\005\022\014\n\004bas"
  "e\030\002 \001(\005\022\020\n\010multiple\030\003 \001(\005\"\\\n\rUserAwardIt"
  "em\022\r\n\005index\030\001 \001(\005\022\020\n\010item_max\030\002 \001(\005\022\014\n\004n"
  "ame\030\003 \001(\t\022\034\n\005goods\030\004 \003(\0132\r.F4BY.Object2\""
  "#\n\016CSUserPoolInfo\022\021\n\topen_page\030\001 \001(\010\"\213\001\n"
  "\016SCUserPoolInfo\022\021\n\tchair_idx\030\001 \001(\005\022\021\n\top"
  "en_page\030\002 \001(\010\022\016\n\006status\030\003 \001(\010\022\r\n\005count\030\004"
  " \001(\005\022\020\n\010pool_max\030\005 \001(\005\022\"\n\005items\030\006 \003(\0132\023."
  "F4BY.UserAwardItem\" \n\020CSUserPoolStatus\022\014"
  "\n\004open\030\001 \001(\010\" \n\020SCUserPoolStatus\022\014\n\004open"
  "\030\001 \001(\010\"\"\n\021CSUserPoolPreDraw\022\r\n\005level\030\001 \001"
  "(\005\"=\n\021SCUserPoolPreDraw\022\014\n\004code\030\001 \001(\005\022\r\n"
  "\005level\030\002 \001(\005\022\013\n\003msg\030\003 \001(\t\"\020\n\016CSUserPoolD"
  "raw\"\200\001\n\016SCUserPoolDraw\022\021\n\tchair_idx\030\001 \001("
  "\005\022\034\n\005goods\030\002 \003(\0132\r.F4BY.Object2\022\034\n\005award"
  "\030\003 \001(\0132\r.F4BY.Object2\022\037\n\taward_cnt\030\004 \001(\013"
  "2\014.F4BY.Object\"t\n\rSCUserPoolAdd\022\013\n\003add\030\001"
  " \001(\005\022\r\n\005count\030\002 \001(\005\022\021\n\tfirst_max\030\003 \001(\005\022\020"
  "\n\010pool_max\030\004 \001(\005\022\016\n\006status\030\005 \001(\010\022\022\n\nleve"
  "l_name\030\006 \001(\t\"\026\n\024CSUserPoolDoubleInfo\"l\n\024"
  "SCUserPoolDoubleInfo\022\014\n\004cost\030\001 \001(\005\022\"\n\013it"
  "em_before\030\002 \001(\0132\r.F4BY.Object2\022\"\n\013item_d"
  "ouble\030\003 \001(\0132\r.F4BY.Object2\"%\n\020CSUserPool"
  "Double\022\021\n\tis_double\030\001 \001(\010\"\203\001\n\020SCUserPool"
  "Double\022\014\n\004code\030\001 \001(\005\022\016\n\006result\030\002 \001(\005\022\021\n\t"
  "chair_idx\030\003 \001(\005\022\033\n\004item\030\004 \001(\0132\r.F4BY.Obj"
  "ect3\022!\n\nextra_item\030\005 \001(\0132\r.F4BY.Object3\""
  "\021\n\017CSLuckyPoolInfo\"-\n\017SCLuckyPoolInfo\022\r\n"
  "\005count\030\001 \001(\005\022\013\n\003max\030\002 \001(\005\"\021\n\017CSLuckyPool"
  "Draw\".\n\017SCLuckyPoolDraw\022\033\n\004item\030\001 \001(\0132\r."
  "F4BY.Object3\"#\n\021CSTorpedoPreShoot\022\016\n\006pro"
  "pId\030\001 \001(\005\"Q\n\021SCTorpedoPreShoot\022\021\n\tchair_"
  "idx\030\001 \001(\005\022\016\n\006propId\030\002 \001(\005\022\014\n\004code\030\003 \001(\005\022"
  "\013\n\003msg\030\004 \001(\t\"\026\n\024CSTorpedoCancelShoot\")\n\024"
  "SCTorpedoCancelShoot\022\021\n\tchair_idx\030\001 \001(\005\""
  "8\n\016CSTorpedoShoot\022\020\n\010fish_uid\030\001 \001(\005\022\t\n\001x"
  "\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\"K\n\016SCTorpedoShoot\022\021\n\tc"
  "hair_idx\030\001 \001(\005\022\020\n\010fish_uid\030\002 \001(\005\022\t\n\001x\030\003 "
  "\001(\002\022\t\n\001y\030\004 \001(\002\"\016\n\014CSTorpedoHit\"\206\001\n\014SCTor"
  "pedoHit\022\021\n\tchair_idx\030\001 \001(\005\022\014\n\004earn\030\002 \001(\005"
  "\022\r\n\005score\030\003 \001(\005\022\016\n\006propId\030\004 \001(\005\022\016\n\006remai"
  "n\030\005 \001(\005\022\020\n\010fish_uid\030\006 \001(\005\022\t\n\001x\030\007 \001(\002\022\t\n\001"
  "y\030\010 \001(\002\"3\n\nCSCallFish\022%\n\tcall_type\030\001 \001(\016"
  "2\022.F4BY.CallFishType\"Z\n\nSCCallFish\022\021\n\tch"
  "air_idx\030\001 \001(\005\022\016\n\006propId\030\002 \001(\005\022\016\n\006remain\030"
  "\003 \001(\005\022\014\n\004code\030\004 \001(\005\022\013\n\003msg\030\005 \001(\t\"P\n\tSCCo"
  "mTask\022\021\n\tgun_ratio\030\001 \001(\005\022\021\n\tgun_level\030\002 "
  "\001(\005\022\r\n\005award\030\003 \001(\005\022\016\n\006ticket\030\004 \001(\005\"\262\001\n\nS"
  "CTaskInfo\022\021\n\tgun_ratio\030\001 \001(\005\022\021\n\tgun_leve"
  "l\030\002 \001(\005\022\017\n\007cur_num\030\003 \001(\005\022\021\n\ttotal_num\030\004 "
  "\001(\005\022\021\n\tvip_level\030\005 \001(\005\022\021\n\tis_unlock\030\006 \001("
  "\010\022\r\n\005award\030\007 \001(\005\022\025\n\ris_vip_unlock\030\010 \001(\010\022"
  "\016\n\006ticket\030\t \001(\005\"L\n\017CSSaveSkillTime\022\014\n\004au"
  "to\030\001 \001(\005\022\014\n\004lock\030\002 \001(\005\022\r\n\005angry\030\003 \001(\005\022\016\n"
  "\006treble\030\004 \001(\005\"q\n\014SevenDayTask\022\r\n\005index\030\001"
  " \001(\005\022\017\n\007fish_id\030\002 \001(\005\022\021\n\ttotal_num\030\003 \001(\005"
  "\022\017\n\007cur_num\030\004 \001(\005\022\016\n\006status\030\005 \001(\005\022\r\n\005awa"
  "rd\030\006 \001(\005\"S\n\016SevenDayDetail\022\013\n\003day\030\001 \001(\005\022"
  "\022\n\nbox_status\030\002 \001(\005\022 \n\004task\030\003 \001(\0132\022.F4BY"
  ".SevenDayTask\"\020\n\016CSSevenDayInfo\"\273\001\n\016SCSe"
  "venDayInfo\022\022\n\nstart_date\030\001 \001(\t\022\020\n\010end_da"
  "te\030\002 \001(\t\022\017\n\007cur_day\030\003 \001(\005\022\022\n\nget_remain\030"
  "\004 \001(\005\022\024\n\014remain_score\030\005 \001(\005\022\016\n\006ticket\030\006 "
  "\001(\005\022$\n\006detail\030\007 \001(\0132\024.F4BY.SevenDayDetai"
  "l\022\022\n\ngun_enable\030\010 \001(\005\"E\n\017CSSevenDayAward"
  "\022\013\n\003day\030\001 \001(\005\022\r\n\005index\030\002 \001(\005\022\026\n\016get_awar"
  "d_type\030\003 \001(\005\"T\n\017SCSevenDayAward\022\r\n\005score"
  "\030\001 \001(\005\022\016\n\006ticket\030\002 \001(\005\022\"\n\004task\030\003 \001(\0132\024.F"
  "4BY.SevenDayDetail\"1\n\020SCVipChargeAward\022\r"
  "\n\005score\030\001 \001(\005\022\016\n\006ticket\030\002 \001(\005\"3\n\020CSClick"
  "Statistic\022\013\n\003num\030\001 \001(\t\022\022\n\nnot_repeat\030\002 \001"
  "(\010\"\"\n\023CSNewClickStatistic\022\013\n\003num\030\001 \001(\t\"9"
  "\n\tCSUserLog\022\014\n\004type\030\001 \001(\005\022\r\n\005score\030\002 \001(\t"
  "\022\017\n\007content\030\003 \001(\t\")\n\013CSUserEvent\022\n\n\002id\030\001"
  " \001(\005\022\016\n\006status\030\002 \001(\005\"\026\n\024CSGetAwardPoolRe"
  "cord\"^\n\017AwardPoolRecord\022\014\n\004time\030\001 \001(\t\022\014\n"
  "\004name\030\002 \001(\t\022\016\n\006poolId\030\003 \001(\005\022\r\n\005award\030\004 \001"
  "(\005\022\020\n\010playerId\030\005 \001(\005\">\n\024SCGetAwardPoolRe"
  "cord\022&\n\007records\030\001 \003(\0132\025.F4BY.AwardPoolRe"
  "cord\"Y\n\020SCPropDropNotify\022\021\n\tchair_idx\030\001 "
  "\001(\005\022\020\n\010fish_uid\030\002 \001(\005\022 \n\ndrop_props\030\003 \003("
  "\0132\014.F4BY.Object\"\034\n\tCSUseProp\022\017\n\007prop_id\030"
  "\001 \001(\005\"Z\n\tSCUseProp\022\021\n\tchair_idx\030\001 \001(\005\022\017\n"
  "\007prop_id\030\002 \001(\005\022\016\n\006remain\030\003 \001(\005\022\014\n\004code\030\004"
  " \001(\005\022\013\n\003msg\030\005 \001(\t\"G\n\014SCFrozenTime\022\021\n\tcha"
  "ir_idx\030\001 \001(\005\022\021\n\tis_frozen\030\002 \001(\010\022\021\n\tfroze"
  "n_cd\030\003 \001(\002\"b\n\022SCTreasureFishInfo\022\020\n\010fish"
  "_uid\030\001 \001(\005\022\021\n\tcur_stage\030\002 \001(\005\022\023\n\013accum_m"
  "oney\030\003 \001(\005\022\022\n\nfish_value\030\004 \001(\005\"\267\002\n\025SCTre"
  "asureFishCatched\022\021\n\tchair_idx\030\001 \001(\005\022\r\n\005r"
  "atio\030\002 \001(\005\022\020\n\010fish_uid\030\003 \001(\005\022\022\n\nfish_val"
  "ue\030\004 \001(\005\022\023\n\013accum_money\030\005 \001(\005\022\020\n\010multipl"
  "e\030\006 \001(\005\022\r\n\005death\030\007 \001(\010\022\014\n\004earn\030\010 \001(\005\022\022\n\n"
  "user_score\030\t \001(\003\022\030\n\020display_multiple\030\n \001"
  "(\010\022\021\n\tcur_stage\030\013 \001(\005\022\030\n\020magic_cube_mult"
  "i\030\014 \001(\005\022#\n\nmulti_list\030\r \003(\0132\017.F4BY.Multi"
  "Info\022\022\n\norigin_uid\030\016 \001(\005\"|\n\021MatchPackAdd"
  "ition\022\n\n\002id\030\001 \001(\t\022\016\n\006is_buy\030\002 \001(\010\022\026\n\016sco"
  "re_addition\030\003 \001(\002\022\030\n\020reaward_addition\030\004 "
  "\001(\002\022\014\n\004card\030\005 \001(\005\022\013\n\003sec\030\006 \001(\005\"\025\n\023CSMatc"
  "hPackAddition\"@\n\023SCMatchPackAddition\022)\n\010"
  "addition\030\001 \003(\0132\027.F4BY.MatchPackAddition\""
  "#\n\021SCMatchPackInvail\022\016\n\006packId\030\001 \001(\t\"#\n\021"
  "CSMatchPackBuying\022\016\n\006packId\030\001 \001(\t\"g\n\013Awa"
  "rdDetail\022\020\n\010playerId\030\001 \001(\005\022\014\n\004nums\030\002 \001(\005"
  "\022\016\n\006period\030\003 \001(\005\022\013\n\003vip\030\004 \001(\005\022\014\n\004nick\030\005 "
  "\001(\t\022\r\n\005photo\030\006 \001(\t\"H\n\020LuckyAwardNotify\022\021"
  "\n\tawardType\030\001 \001(\005\022!\n\006detail\030\002 \003(\0132\021.F4BY"
  ".AwardDetail\"\022\n\020CSGameItemSwitch\"&\n\020SCGa"
  "meItemSwitch\022\022\n\nlucky_task\030\001 \001(\010\")\n\tAwar"
  "dProp\022\017\n\007prop_id\030\001 \001(\005\022\013\n\003num\030\002 \001(\005\"h\n\rL"
  "uckyTaskInfo\022\n\n\002id\030\001 \001(\005\022\016\n\006status\030\002 \001(\005"
  "\022\r\n\005score\030\003 \001(\005\022\014\n\004text\030\004 \001(\t\022\016\n\006amount\030"
  "\005 \001(\005\022\016\n\006target\030\006 \001(\005\"\021\n\017CSLuckyDrawInfo"
  "\"\225\003\n\017SCLuckyDrawInfo\022\027\n\017hour_remain_sec\030"
  "\001 \001(\005\022\026\n\016day_remain_sec\030\002 \001(\005\022$\n\013hour_re"
  "ward\030\003 \003(\0132\017.F4BY.AwardProp\022#\n\nday_rewar"
  "d\030\004 \003(\0132\017.F4BY.AwardProp\022\026\n\016day_lucky_nu"
  "ms\030\005 \003(\005\022\r\n\005score\030\006 \001(\005\022\022\n\nhour_total\030\007 "
  "\001(\005\022\021\n\tday_total\030\010 \001(\005\022\026\n\016hour_award_num"
  "\030\t \001(\005\022\025\n\rday_award_num\030\n \001(\005\022\027\n\017next_st"
  "art_tick\030\013 \001(\005\022&\n\ttask_info\030\014 \003(\0132\023.F4BY"
  ".LuckyTaskInfo\022\026\n\016exchange_score\030\r \001(\005\022\027"
  "\n\017next_remain_sec\030\016 \001(\005\022\027\n\017hour_lucky_nu"
  "ms\030\017 \003(\005\"&\n\023CSGetLuckyTaskAward\022\017\n\007task_"
  "id\030\001 \001(\005\"U\n\023SCGetLuckyTaskAward\022!\n\004task\030"
  "\001 \001(\0132\023.F4BY.LuckyTaskInfo\022\r\n\005score\030\002 \001("
  "\005\022\014\n\004code\030\003 \001(\005\"\036\n\rCSGetLuckyNum\022\r\n\005time"
  "s\030\001 \001(\005\"F\n\rSCGetLuckyNum\022\r\n\005score\030\001 \001(\005\022"
  "\022\n\nerror_code\030\002 \001(\005\022\022\n\nlucky_nums\030\003 \003(\005\""
  "\017\n\rCSLuckyRedDot\"\035\n\rSCLuckyRedDot\022\014\n\004sho"
  "w\030\001 \001(\010\"]\n\013LuckyRecord\022\013\n\003vip\030\001 \001(\005\022\r\n\005t"
  "imes\030\002 \001(\005\022\021\n\tlucky_num\030\003 \001(\005\022\014\n\004tick\030\004 "
  "\001(\005\022\021\n\tnick_name\030\005 \001(\t\"]\n\tOwnRecord\022\037\n\006r"
  "eward\030\001 \003(\0132\017.F4BY.AwardProp\022\016\n\006status\030\002"
  " \001(\005\022\014\n\004tick\030\003 \001(\005\022\021\n\tlucky_num\030\004 \001(\005\"\035\n"
  "\rCSLuckyRecord\022\014\n\004type\030\001 \001(\005\"@\n\rSCLuckyR"
  "ecord\022\014\n\004type\030\001 \001(\005\022!\n\006record\030\002 \003(\0132\021.F4"
  "BY.LuckyRecord\".\n\013SCOwnRecord\022\037\n\006record\030"
  "\001 \003(\0132\017.F4BY.OwnRecord\"5\n\nCSBombInfo\022\t\n\001"
  "x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\021\n\tchair_idx\030\003 \001(\005\"\227\001"
  "\n\nSCSyncBomb\022\021\n\tchair_idx\030\001 \001(\005\022\016\n\006bombI"
  "d\030\002 \001(\005\022\021\n\tcurStatus\030\003 \001(\005\022\t\n\001x\030\004 \001(\002\022\t\n"
  "\001y\030\005 \001(\002\022\r\n\005nextX\030\006 \001(\002\022\r\n\005nextY\030\007 \001(\002\022\r"
  "\n\005score\030\010 \001(\005\022\020\n\010isFinish\030\t \001(\010\"J\n\020SCSyn"
  "cBombFinish\022\021\n\tchair_idx\030\001 \001(\005\022\016\n\006bombId"
  "\030\002 \001(\005\022\023\n\013returnMoney\030\003 \001(\005\"F\n\021CSBombHit"
  "FishInfo\022\016\n\006bombId\030\001 \001(\005\022\016\n\006fishId\030\002 \003(\005"
  "\022\021\n\tchair_idx\030\003 \001(\005\"\237\001\n\016SCGetMagicCube\022\021"
  "\n\tchair_idx\030\001 \001(\005\022\022\n\nbulletType\030\002 \001(\005\022\024\n"
  "\014createWeapon\030\003 \001(\010\022\022\n\nisSyncInfo\030\004 \001(\010\022"
  "\020\n\010isFinish\030\005 \001(\010\022\020\n\010gunRatio\030\006 \001(\005\022\030\n\020m"
  "agic_cube_multi\030\007 \001(\005\"L\n\025SCMagicCubeBull"
  "etInfo\022\021\n\tchair_idx\030\001 \001(\005\022\020\n\010totalNum\030\002 "
  "\001(\005\022\016\n\006curNum\030\003 \001(\005\"\037\n\010CSPreHit\022\023\n\013scree"
  "n_fish\030\001 \003(\005\";\n\010SCPreHit\022\013\n\003err\030\001 \001(\005\022\020\n"
  "\010fish_uid\030\002 \001(\005\022\020\n\010chair_id\030\003 \001(\005\"B\n\nCSP"
  "reShoot\022\021\n\tchair_idx\030\001 \001(\005\022\r\n\005angle\030\002 \001("
  "\005\022\022\n\nshoot_type\030\003 \001(\005\"B\n\nSCPreShoot\022\021\n\tc"
  "hair_idx\030\001 \001(\005\022\r\n\005angle\030\002 \001(\005\022\022\n\nshoot_t"
  "ype\030\003 \001(\005\"2\n\nFrozenFish\022\017\n\007fish_id\030\001 \001(\005"
  "\022\023\n\013frozen_time\030\002 \001(\005\"4\n\014SCFrozenFish\022$\n"
  "\nfrozenFish\030\001 \003(\0132\020.F4BY.FrozenFish\"\204\001\n\022"
  "SCValentineDayFish\022\"\n\tfish_info\030\001 \001(\0132\017."
  "F4BY.SCHitFish\022\020\n\010bt_ratio\030\002 \001(\005\022\022\n\nrand"
  "_multi\030\003 \001(\005\022\022\n\nball_multi\030\004 \001(\005\022\020\n\010uid_"
  "list\030\005 \003(\005\"t\n\013SCKiRinFish\022\"\n\tfish_info\030\001"
  " \001(\0132\017.F4BY.SCHitFish\022\020\n\010bt_ratio\030\002 \001(\005\022"
  "\r\n\005multi\030\003 \001(\005\022\021\n\tis_senior\030\004 \001(\010\022\r\n\005lev"
  "el\030\005 \001(\005\"\224\001\n\021SCNvWaFishCapture\022\021\n\tchair_"
  "idx\030\001 \001(\005\022\020\n\010fish_uid\030\002 \001(\005\022\r\n\005ratio\030\003 \001"
  "(\005\022\025\n\rnvwa_multiple\030\004 \001(\005\022\017\n\007bt_kind\030\005 \001"
  "(\005\022#\n\nmulti_list\030\006 \003(\0132\017.F4BY.MultiInfo\""
  "\243\001\n\023SCBombGlobeFishInfo\022\021\n\tchair_idx\030\001 \001"
  "(\005\022\r\n\005ratio\030\002 \001(\005\022\020\n\010fish_uid\030\003 \001(\005\022\r\n\005s"
  "tage\030\004 \001(\005\022\016\n\006bombId\030\005 \001(\005\022\022\n\ntotal_earn"
  "\030\006 \001(\005\022\023\n\013self_bombId\030\007 \001(\005\022\020\n\010originId\030"
  "\010 \001(\005\"L\n\022CSBombGlobeFishHit\022\016\n\006bombId\030\001 "
  "\001(\005\022\017\n\007bt_type\030\002 \001(\005\022\025\n\rscreen_fishes\030\003 "
  "\003(\005\"e\n\027SCAnniversaryShowSelect\022\021\n\tchair_"
  "idx\030\001 \001(\005\022\023\n\013show_select\030\002 \001(\010\022\023\n\013remain"
  "_time\030\003 \001(\005\022\r\n\005stage\030\004 \001(\005\"\'\n\026CSAnnivers"
  "arySelectReq\022\r\n\005stage\030\001 \001(\005\":\n\027Anniversa"
  "ryStage1Result\022\r\n\005score\030\001 \001(\005\022\020\n\010fish_ui"
  "d\030\002 \001(\005\"S\n\027AnniversaryStage2Result\022\022\n\nsc"
  "ore_list\030\001 \003(\005\022\022\n\ndrop_times\030\002 \001(\005\022\020\n\010mu"
  "ltiple\030\003 \001(\005\"=\n\027AnniversaryStage3Result\022"
  "\021\n\torigin_id\030\001 \001(\005\022\017\n\007self_id\030\002 \001(\005\"\247\002\n\031"
  "SCAnniversarySelectResult\022\021\n\tchair_idx\030\001"
  " \001(\005\022\r\n\005stage\030\002 \001(\005\022\020\n\010bt_ratio\030\003 \001(\005\022#\n"
  "\nmulti_list\030\004 \003(\0132\017.F4BY.MultiInfo\022\022\n\nto"
  "tal_earn\030\005 \001(\005\022\r\n\005death\030\006 \001(\010\022.\n\007result1"
  "\030\007 \001(\0132\035.F4BY.AnniversaryStage1Result\022.\n"
  "\007result2\030\010 \001(\0132\035.F4BY.AnniversaryStage2R"
  "esult\022.\n\007result3\030\t \001(\0132\035.F4BY.Anniversar"
  "yStage3Result\"J\n\020CSAnniversaryHit\022\016\n\006bom"
  "bId\030\001 \001(\005\022\017\n\007bt_type\030\002 \001(\005\022\025\n\rscreen_fis"
  "hes\030\003 \003(\005\"\213\001\n\031SCSyncAnniversaryHitStage\022"
  "\021\n\tchair_idx\030\001 \001(\005\022\021\n\torigin_id\030\002 \001(\005\022\017\n"
  "\007self_id\030\003 \001(\005\022\r\n\005stage\030\004 \001(\005\022\022\n\ntotal_e"
  "arn\030\005 \001(\005\022\024\n\014invalid_earn\030\006 \001(\005\"U\n\016Scall"
  "opLottery\022\n\n\002id\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\016\n\006s"
  "tatus\030\003 \001(\005\022\031\n\006reward\030\004 \001(\0132\t.F4BY.Obj\"\242"
  "\001\n\020SCCaptureScallop\022\021\n\tchair_idx\030\001 \001(\005\022\020"
  "\n\010fish_uid\030\002 \001(\005\022\r\n\005ratio\030\003 \001(\005\022\014\n\004time\030"
  "\004 \001(\005\022*\n\014lottery_list\030\005 \003(\0132\024.F4BY.Scall"
  "opLottery\022 \n\rreward_config\030\006 \003(\0132\t.F4BY."
  "Obj\"\033\n\rCSOpenScallop\022\n\n\002id\030\001 \001(\005\"I\n\rSCOp"
  "enScallop\022\021\n\tchair_idx\030\001 \001(\005\022%\n\007scallop\030"
  "\002 \001(\0132\024.F4BY.ScallopLottery\"\212\001\n\026SCSettle"
  "ScallopLottery\022\021\n\tchair_idx\030\001 \001(\005\022\014\n\004ear"
  "n\030\002 \001(\005\022*\n\014lottery_list\030\003 \003(\0132\024.F4BY.Sca"
  "llopLottery\022#\n\nmulti_list\030\004 \003(\0132\017.F4BY.M"
  "ultiInfo\"\224\001\n\024SCSyncScallopLottery\022\021\n\tcha"
  "ir_idx\030\001 \001(\005\022\r\n\005ratio\030\002 \001(\005\022\014\n\004time\030\003 \001("
  "\005\022*\n\014lottery_list\030\004 \003(\0132\024.F4BY.ScallopLo"
  "ttery\022 \n\rreward_config\030\005 \003(\0132\t.F4BY.Obj\""
  "9\n\017OpenChestReward\022\n\n\002id\030\001 \001(\005\022\032\n\003num\030\002 "
  "\001(\0132\r.F4BY.Decimal\"\247\001\n\023SCUpdateChestStat"
  "us\022\021\n\tis_active\030\001 \001(\010\022#\n\nchest_type\030\002 \001("
  "\0162\017.F4BY.ChestType\022\026\n\016total_progress\030\003 \001"
  "(\005\022\027\n\017remain_progress\030\004 \001(\005\022\r\n\005guide\030\005 \001"
  "(\010\022\030\n\020available_reward\030\006 \001(\005\"\017\n\rCSChestC"
  "onfig\"X\n\nChestBrief\022#\n\nchest_type\030\001 \001(\0162"
  "\017.F4BY.ChestType\022%\n\006reward\030\002 \003(\0132\025.F4BY."
  "OpenChestReward\"\270\001\n\rSCChestConfig\022\020\n\010end"
  "_time\030\001 \001(\005\022*\n\020chest_brief_list\030\002 \003(\0132\020."
  "F4BY.ChestBrief\022\021\n\tmin_ratio\030\003 \001(\005\022\021\n\tau"
  "to_open\030\004 \001(\010\0220\n\013auto_option\030\005 \001(\0162\033.F4B"
  "Y.ChestAutoSelectOption\022\021\n\tis_enable\030\006 \001"
  "(\010\"k\n\013SCOpenChest\022*\n\013reward_list\030\001 \003(\0132\025"
  ".F4BY.OpenChestReward\0220\n\013auto_option\030\002 \001"
  "(\0162\033.F4BY.ChestAutoSelectOption\"+\n\023CSSel"
  "ectChestReward\022\024\n\014select_index\030\001 \001(\005\"<\n\023"
  "SCSelectChestReward\022%\n\006reward\030\001 \001(\0132\025.F4"
  "BY.OpenChestReward\"[\n\024CSChestSetAutoSele"
  "ct\0220\n\013auto_option\030\001 \001(\0162\033.F4BY.ChestAuto"
  "SelectOption\022\021\n\tauto_open\030\002 \001(\010\"[\n\024SCChe"
  "stSetAutoSelect\0220\n\013auto_option\030\001 \001(\0162\033.F"
  "4BY.ChestAutoSelectOption\022\021\n\tauto_open\030\002"
  " \001(\010\"%\n\020CSChestSetEnable\022\021\n\tis_enable\030\001 "
  "\001(\010\"%\n\020SCChestSetEnable\022\021\n\tis_enable\030\001 \001"
  "(\010\"4\n\014SCSpecEffect\022\021\n\tcostMoney\030\001 \001(\005\022\021\n"
  "\tearnMoney\030\002 \001(\005\"n\n\021SCTortoiseExplode\022\021\n"
  "\tchair_idx\030\001 \001(\005\022\020\n\010fish_uid\030\002 \001(\005\022\021\n\tbu"
  "llet_id\030\003 \001(\005\022\r\n\005ratio\030\004 \001(\005\022\022\n\nmax_effe"
  "ct\030\005 \001(\005\"S\n\nRewardInfo\022\017\n\007prop_id\030\001 \001(\005\022"
  "\020\n\010prop_num\030\002 \001(\005\022\017\n\007quality\030\003 \001(\005\022\021\n\tsp"
  "ec_show\030\004 \001(\010\"\177\n\013MissionInfo\022\022\n\ndraw_tim"
  "es\030\001 \001(\005\022%\n\013reward_list\030\002 \003(\0132\020.F4BY.Rew"
  "ardInfo\022\020\n\010complete\030\003 \001(\010\022\017\n\007receive\030\004 \001"
  "(\010\022\022\n\nmission_id\030\005 \001(\005\"T\n\rBigRewardInfo\022"
  "\030\n\020big_reward_times\030\001 \001(\005\022)\n\017draw_reward"
  "List\030\002 \003(\0132\020.F4BY.RewardInfo\"\340\001\n\022Treasur"
  "eHuntConfig\022\014\n\004term\030\001 \001(\005\022\022\n\nstart_time\030"
  "\002 \001(\005\022\020\n\010end_time\030\003 \001(\005\022\016\n\006enable\030\004 \001(\010\022"
  ",\n\017big_reward_info\030\005 \001(\0132\023.F4BY.BigRewar"
  "dInfo\022%\n\013reward_list\030\006 \003(\0132\020.F4BY.Reward"
  "Info\022\020\n\010min_draw\030\007 \001(\005\022\020\n\010max_draw\030\010 \001(\005"
  "\022\r\n\005topic\030\t \001(\005\"$\n\rCSSyncConfigs\022\023\n\013conf"
  "ig_type\030\001 \001(\005\"B\n\rSCSyncConfigs\0221\n\017treasu"
  "re_config\030\001 \001(\0132\030.F4BY.TreasureHuntConfi"
  "g\".\n\014CSDrawReward\022\013\n\003num\030\001 \001(\005\022\021\n\tdraw_t"
  "ype\030\002 \001(\005\"5\n\014SCDrawReward\022%\n\013reward_list"
  "\030\001 \003(\0132\020.F4BY.RewardInfo\"\027\n\025CSTreasureHu"
  "ntMission\"T\n\025SCTreasureHuntMission\022\'\n\014mi"
  "ssion_list\030\001 \003(\0132\021.F4BY.MissionInfo\022\022\n\nd"
  "raw_times\030\002 \001(\005\",\n\026CSReceiveMissionRewar"
  "d\022\022\n\nmission_id\030\001 \001(\005\"\?\n\026SCReceiveMissio"
  "nReward\022%\n\013reward_list\030\001 \003(\0132\020.F4BY.Rewa"
  "rdInfo\"\r\n\013CSDrawTimes\"v\n\013SCDrawTimes\022\030\n\020"
  "total_draw_times\030\001 \001(\005\022\032\n\022big_reward_pro"
  "cess\030\002 \001(\005\022\027\n\017free_draw_times\030\003 \001(\005\022\030\n\020d"
  "raw_tickers_num\030\004 \001(\005\"\'\n\020CSVerifyActivit"
  "y\022\023\n\013activity_id\030\001 \001(\005\"5\n\020SCVerifyActivi"
  "ty\022\014\n\004open\030\001 \001(\010\022\023\n\013activity_id\030\002 \001(\005\"\316\001"
  "\n\007Package\022\022\n\npackage_id\030\001 \001(\005\022\r\n\005limit\030\002"
  " \001(\005\022\025\n\rconsume_price\030\003 \001(\005\022\022\n\nlimit_typ"
  "e\030\004 \001(\005\022\025\n\rconsume_props\030\005 \001(\005\022\026\n\016purcha"
  "se_times\030\006 \001(\005\022%\n\013reward_list\030\007 \003(\0132\020.F4"
  "BY.RewardInfo\022\014\n\004lock\030\010 \001(\010\022\021\n\tvip_limit"
  "\030\t \001(\005\"-\n\025CSTreasureHuntPackage\022\024\n\014packa"
  "ge_type\030\001 \001(\005\"R\n\025SCTreasureHuntPackage\022#"
  "\n\014package_list\030\001 \003(\0132\r.F4BY.Package\022\024\n\014p"
  "ackage_type\030\002 \001(\005\"V\n\020ExchangeShopInfo\022\r\n"
  "\005level\030\001 \001(\005\022#\n\014package_list\030\002 \003(\0132\r.F4B"
  "Y.Package\022\016\n\006unlock\030\003 \001(\010\"\020\n\016CSExchangeS"
  "hop\"B\n\016SCExchangeShop\0220\n\020exchangeShopLis"
  "t\030\001 \003(\0132\026.F4BY.ExchangeShopInfo\"\'\n\021CSPur"
  "chasePackage\022\022\n\npackage_id\030\001 \001(\005\"3\n\021SCPu"
  "rchasePackage\022\036\n\007package\030\001 \001(\0132\r.F4BY.Pa"
  "ckage\"\024\n\022CSVerifyTermChange\"K\n\022SCVerifyT"
  "ermChange\022\016\n\006change\030\001 \001(\010\022%\n\013reward_list"
  "\030\002 \003(\0132\020.F4BY.RewardInfo\"M\n\017SCWaterDropI"
  "nfo\022\016\n\006enable\030\001 \001(\010\022\022\n\ndrop_count\030\002 \001(\005\022"
  "\026\n\016fragment_count\030\003 \001(\005\"\035\n\010CSBuyGun\022\021\n\tg"
  "un_level\030\001 \001(\005\",\n\010SCBuyGun\022\021\n\tgun_level\030"
  "\001 \001(\005\022\r\n\005price\030\002 \001(\005\"\036\n\nCSBuyWings\022\020\n\010wi"
  "ngs_id\030\001 \001(\005\"-\n\nSCBuyWings\022\020\n\010wings_id\030\001"
  " \001(\005\022\r\n\005price\030\002 \001(\005\"9\n\021SCNotifyActStatus"
  "\022\020\n\010act_type\030\001 \001(\005\022\022\n\nact_status\030\002 \001(\005\"%"
  "\n\020CSSetDoubleShoot\022\021\n\textra_mul\030\001 \001(\005\"(\n"
  "\016CSFreePoolInfo\022\026\n\016prepareLottery\030\001 \001(\010\""
  "\"\n\021CSFreePoolLottery\022\r\n\005level\030\001 \001(\005\"&\n\016C"
  "SFreePoolOpen\022\024\n\014openFreePool\030\001 \001(\010*\226\023\n\r"
  "EMsgIDSubGame\022\010\n\004None\020\000\022\016\n\tHeartBeat\020\350\007\022"
  "\027\n\022LoginGameWithToken\020\351\007\022\016\n\tUserReady\020\352\007"
  "\022\023\n\016SetProbability\020\353\007\022\023\n\016FishTracesList\020"
  "\354\007\022\020\n\013ChangeScene\020\355\007\022\026\n\021FishOutsideScree"
  "n\020\356\007\022\r\n\010LockFish\020\357\007\022\016\n\tUserShoot\020\360\007\022\014\n\007H"
  "itFish\020\361\007\022\017\n\nCrazySkill\020\362\007\022\016\n\tSyncMoney\020"
  "\363\007\022\021\n\014NotifyLogout\020\364\007\022\020\n\013SyncFishReq\020\365\007\022"
  "\020\n\013SyncFishRsp\020\366\007\022\026\n\021UserRunBackground\020\367"
  "\007\022\023\n\016HitSpecialFish\020\370\007\022\021\n\014SyncPropInfo\020\371"
  "\007\022\020\n\013NotifyLogin\020\372\007\022\020\n\013TrebleSkill\020\373\007\022\014\n"
  "\007UserLog\020\374\007\022\016\n\tUserEvent\020\375\007\022\023\n\016UserInfoN"
  "otify\020\201\010\022\023\n\016GameInfoNotify\020\202\010\022\t\n\004Chat\020\203\010"
  "\022\016\n\tGainAward\020\204\010\022\017\n\nPropStatus\020\205\010\022\023\n\016Pro"
  "pDropNotify\020\206\010\022\014\n\007UseProp\020\207\010\022\017\n\nFrozenTi"
  "me\020\210\010\022\021\n\014UserPoolInfo\020\222\010\022\023\n\016UserPoolStat"
  "us\020\223\010\022\024\n\017UserPoolPreDraw\020\224\010\022\021\n\014UserPoolD"
  "raw\020\225\010\022\020\n\013UserPoolAdd\020\226\010\022\024\n\017TorpedoPreSh"
  "oot\020\227\010\022\027\n\022TorpedoCancelShoot\020\230\010\022\021\n\014Torpe"
  "doShoot\020\231\010\022\017\n\nTorpedoHit\020\232\010\022\r\n\010CallFish\020"
  "\233\010\022\014\n\007ComTask\020\234\010\022\r\n\010TaskInfo\020\235\010\022\022\n\rSaveS"
  "killTime\020\236\010\022\021\n\014SevenDayInfo\020\237\010\022\022\n\rSevenD"
  "ayAward\020\240\010\022\023\n\016VipChargeAward\020\241\010\022\017\n\nInfoR"
  "edDot\020\242\010\022\021\n\014ActivityInfo\020\243\010\022\023\n\016ClickStat"
  "istic\020\244\010\022\016\n\tAwardPool\020\245\010\022\026\n\021NewClickStat"
  "istic\020\246\010\022\027\n\022GetAwardPoolRecord\020\247\010\022\025\n\020Tre"
  "asureFishInfo\020\250\010\022\030\n\023TreasureFishCatched\020"
  "\251\010\022\027\n\022MatchPackAdditionX\020\252\010\022\024\n\017MatchPack"
  "Invail\020\253\010\022\024\n\017MatchPackBuying\020\254\010\022\023\n\016GameI"
  "temSwitch\020\255\010\022\022\n\rLuckyDrawInfo\020\256\010\022\026\n\021GetL"
  "uckyTaskAward\020\257\010\022\020\n\013LuckyRedDot\020\260\010\022\020\n\013Ge"
  "tLuckyNum\020\261\010\022\023\n\016GetLuckyRecord\020\262\010\022\021\n\014Get"
  "OwnRecord\020\263\010\022\027\n\022UserPoolDoubleInfo\020\314\010\022\023\n"
  "\016UserPoolDouble\020\315\010\022\022\n\rLuckyPoolInfo\020\316\010\022\022"
  "\n\rLuckyPoolDraw\020\317\010\022\r\n\010BombInfo\020\326\010\022\024\n\017Bom"
  "bHitFishInfo\020\327\010\022\r\n\010SyncBomb\020\330\010\022\023\n\016SyncBo"
  "mbFinish\020\331\010\022\021\n\014GetMagicCube\020\332\010\022\030\n\023SyncMa"
  "gicCubeBtInfo\020\333\010\022\013\n\006PreHit\020\334\010\022\r\n\010PreShoo"
  "t\020\335\010\022\031\n\024SyncValentineDayFish\020\336\010\022\026\n\021BombG"
  "lobeFishInfo\020\337\010\022\025\n\020BombGlobeFishHit\020\340\010\022\032"
  "\n\025AnniversaryShowSelect\020\355\010\022\031\n\024Anniversar"
  "ySelectReq\020\356\010\022\034\n\027AnniversarySelectResult"
  "\020\357\010\022\023\n\016AnniversaryHit\020\360\010\022\034\n\027SyncAnnivers"
  "aryHitStage\020\361\010\022\026\n\021SyncKiRinHitStage\020\362\010\022\024"
  "\n\017NvWaFishCapture\020\363\010\022\023\n\016CaptureScallop\020\365"
  "\010\022\031\n\024SettleScallopLottery\020\366\010\022\027\n\022SyncScal"
  "lopLottery\020\367\010\022\020\n\013OpenScallop\020\370\010\022\026\n\021Updat"
  "eChestStatus\020\371\010\022\020\n\013ChestConfig\020\372\010\022\016\n\tOpe"
  "nChest\020\373\010\022\026\n\021SelectChestReward\020\374\010\022\027\n\022Che"
  "stSetAutoSelect\020\375\010\022\017\n\nSpecEffect\020\376\010\022\023\n\016C"
  "hestSetEnable\020\377\010\022\022\n\rFrozenFishRep\020\260\t\022\024\n\017"
  "TortoiseExplode\020\272\t\022\r\n\010SetWings\020\273\t\022\020\n\013Syn"
  "cConfigs\020\274\t\022\017\n\nDrawReward\020\275\t\022\030\n\023Treasure"
  "HuntMission\020\276\t\022\031\n\024ReceiveMissionReward\020\277"
  "\t\022\016\n\tDrawTimes\020\301\t\022\023\n\016VerifyActivity\020\302\t\022\021"
  "\n\014ExchangeShop\020\303\t\022\030\n\023TreasureHuntPackage"
  "\020\304\t\022\024\n\017PurchasePackage\020\305\t\022\025\n\020VerifyTermC"
  "hange\020\306\t\022\013\n\006BuyGun\020\307\t\022\r\n\010BuyWings\020\310\t\022\022\n\r"
  "WaterDropInfo\020\316\t\022\024\n\017NotifyActStatus\020\317\t\022\023"
  "\n\016SetDoubleShoot\020\320\t\022\027\n\021LotteryResult3002"
  "\020\241\234\001\022\027\n\021LotteryResult3005\020\242\234\001\022\022\n\014FreePoo"
  "lInfo\020\211\244\001\022\025\n\017FreePoolLottery\020\212\244\001\022\022\n\014Free"
  "PoolOpen\020\213\244\001*\373\007\n\007ErrCode\022\010\n\004Succ\020\000\022\027\n\022Al"
  "readyInOtherGame\020\361\001\022\t\n\004Fail\020\350\007\022\030\n\023LoadPr"
  "opsDataFailed\020\221N\022\032\n\025CanNotFindPlayerPoin"
  "t\020\222N\022\025\n\020ParameterIsWrong\020\223N\022\020\n\013LackOfMon"
  "ey\020\224N\022\031\n\024FreeTimesChangeRatio\020\225N\022\r\n\010IsNo"
  "tSup\020\226N\022\026\n\021DeserializeFailed\020\227N\022\023\n\016Playe"
  "rNotExist\020\230N\022\027\n\022PlayerAlreadyLogin\020\231N\022\031\n"
  "\024LoadPlayerDataFailed\020\232N\022\025\n\020AllocTableFa"
  "iled\020\233N\022\021\n\014DefendPlugIn\020\234N\022\026\n\021QPEnterRoo"
  "mFailed\020\235N\022\034\n\027QPBaseUserInfoGetFailed\020\236N"
  "\022\025\n\020QPReadGoldFailed\020\237N\022\024\n\017ThisTableIsFu"
  "ll\020\240N\022\021\n\014PropNoEnough\020\241N\022\022\n\rPropRoomLimi"
  "t\020\242N\022\016\n\tPropUsing\020\243N\022\021\n\014PropNotExist\020\244N\022"
  "\024\n\017PropUsingSetGun\020\245N\022\023\n\016ThisRoomIsFull\020"
  "\246N\022\021\n\014ServerClosed\020\247N\022\r\n\010PropHave\020\250N\022\022\n\r"
  "PropCanNotBuy\020\251N\022\023\n\016UserPoolNoMeet\020\256N\022\025\n"
  "\020UserPoolToHigher\020\257N\022\027\n\022CallFishTideComi"
  "ng\020\260N\022\021\n\014CallFishFull\020\261N\022\025\n\020UserPoolLoad"
  "Fail\020\262N\022\031\n\024FrozenFishTideComing\020\263N\022\024\n\017Fr"
  "ozenNotEnough\020\264N\022\021\n\014FrozenWaitCD\020\265N\022\023\n\016F"
  "rozenFishTide\020\266N\022\021\n\014IllegalParam\020\270N\022\020\n\013C"
  "onfigError\020\271N\022\030\n\023PreventCheatWarning\020\272N\022"
  "\022\n\rOpenChestFail\020\302N\022\032\n\025SelectChestReward"
  "Fail\020\303N\022\035\n\030NotMetTaskConditionError\020\304N\022\021"
  "\n\014DrawNumError\020\305N\022\027\n\022PurchaseLimitError\020"
  "\306N\022\036\n\031TreasureHuntNotStartError\020\307N*\347\001\n\rU"
  "serEventType\022\031\n\025UserEventTypeHideIcon\020\000\022"
  "\033\n\027UserEventTypeCrazySkill\020\001\022\031\n\025UserEven"
  "tTypeUserPool\020\002\022\033\n\027UserEventTypeMultiSho"
  "ot\020\003\022\026\n\022UserEventTypeStore\020\004\022\034\n\030UserEven"
  "tTypeCustomTable\020\005\022\034\n\030UserEventTypeChang"
  "eTable\020\006\022\022\n\016UserLogTypeMax\020\007*7\n\014CallFish"
  "Type\022\022\n\016CallTypeNormal\020\000\022\023\n\017CallTypeSpec"
  "ial\020\001*s\n\tChestType\022\021\n\rChestTypeNone\020\000\022\026\n"
  "\022ChestTypePorcelain\020\001\022\023\n\017ChestTypeBronze"
  "\020\002\022\023\n\017ChestTypeSilver\020\003\022\021\n\rChestTypeGold"
  "\020\004*V\n\025ChestAutoSelectOption\022\035\n\031ChestAuto"
  "SelectOptionNone\020\000\022\023\n\017RedPacketTicket\020\001\022"
  "\t\n\005Money\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_F4BY_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_F4BY_2eproto_sccs[228] = {
  &scc_info_AnniversaryStage1Result_F4BY_2eproto.base,
  &scc_info_AnniversaryStage2Result_F4BY_2eproto.base,
  &scc_info_AnniversaryStage3Result_F4BY_2eproto.base,
  &scc_info_AwardDetail_F4BY_2eproto.base,
  &scc_info_AwardPoolRecord_F4BY_2eproto.base,
  &scc_info_AwardProp_F4BY_2eproto.base,
  &scc_info_BigRewardInfo_F4BY_2eproto.base,
  &scc_info_CSAnniversaryHit_F4BY_2eproto.base,
  &scc_info_CSAnniversarySelectReq_F4BY_2eproto.base,
  &scc_info_CSAwardPool_F4BY_2eproto.base,
  &scc_info_CSBombGlobeFishHit_F4BY_2eproto.base,
  &scc_info_CSBombHitFishInfo_F4BY_2eproto.base,
  &scc_info_CSBombInfo_F4BY_2eproto.base,
  &scc_info_CSBuyGun_F4BY_2eproto.base,
  &scc_info_CSBuyWings_F4BY_2eproto.base,
  &scc_info_CSCallFish_F4BY_2eproto.base,
  &scc_info_CSChat_F4BY_2eproto.base,
  &scc_info_CSChestConfig_F4BY_2eproto.base,
  &scc_info_CSChestSetAutoSelect_F4BY_2eproto.base,
  &scc_info_CSChestSetEnable_F4BY_2eproto.base,
  &scc_info_CSClickStatistic_F4BY_2eproto.base,
  &scc_info_CSCrazySkill_F4BY_2eproto.base,
  &scc_info_CSDrawReward_F4BY_2eproto.base,
  &scc_info_CSDrawTimes_F4BY_2eproto.base,
  &scc_info_CSExchangeShop_F4BY_2eproto.base,
  &scc_info_CSFishOutsideScreen_F4BY_2eproto.base,
  &scc_info_CSFreePoolInfo_F4BY_2eproto.base,
  &scc_info_CSFreePoolLottery_F4BY_2eproto.base,
  &scc_info_CSFreePoolOpen_F4BY_2eproto.base,
  &scc_info_CSGameItemSwitch_F4BY_2eproto.base,
  &scc_info_CSGetAwardPoolRecord_F4BY_2eproto.base,
  &scc_info_CSGetLuckyNum_F4BY_2eproto.base,
  &scc_info_CSGetLuckyTaskAward_F4BY_2eproto.base,
  &scc_info_CSHeartBeat_F4BY_2eproto.base,
  &scc_info_CSHitFish_F4BY_2eproto.base,
  &scc_info_CSLockFish_F4BY_2eproto.base,
  &scc_info_CSLoginGameWithToken_F4BY_2eproto.base,
  &scc_info_CSLuckyDrawInfo_F4BY_2eproto.base,
  &scc_info_CSLuckyPoolDraw_F4BY_2eproto.base,
  &scc_info_CSLuckyPoolInfo_F4BY_2eproto.base,
  &scc_info_CSLuckyRecord_F4BY_2eproto.base,
  &scc_info_CSLuckyRedDot_F4BY_2eproto.base,
  &scc_info_CSMatchPackAddition_F4BY_2eproto.base,
  &scc_info_CSMatchPackBuying_F4BY_2eproto.base,
  &scc_info_CSNewClickStatistic_F4BY_2eproto.base,
  &scc_info_CSNotifyLogout_F4BY_2eproto.base,
  &scc_info_CSOpenScallop_F4BY_2eproto.base,
  &scc_info_CSPreHit_F4BY_2eproto.base,
  &scc_info_CSPreShoot_F4BY_2eproto.base,
  &scc_info_CSPropStatus_F4BY_2eproto.base,
  &scc_info_CSPurchasePackage_F4BY_2eproto.base,
  &scc_info_CSReceiveMissionReward_F4BY_2eproto.base,
  &scc_info_CSSaveSkillTime_F4BY_2eproto.base,
  &scc_info_CSSelectChestReward_F4BY_2eproto.base,
  &scc_info_CSSetDoubleShoot_F4BY_2eproto.base,
  &scc_info_CSSetProbability_F4BY_2eproto.base,
  &scc_info_CSSetWings_F4BY_2eproto.base,
  &scc_info_CSSevenDayAward_F4BY_2eproto.base,
  &scc_info_CSSevenDayInfo_F4BY_2eproto.base,
  &scc_info_CSSyncConfigs_F4BY_2eproto.base,
  &scc_info_CSSyncFishReq_F4BY_2eproto.base,
  &scc_info_CSSyncFishRsp_F4BY_2eproto.base,
  &scc_info_CSSyncMoney_F4BY_2eproto.base,
  &scc_info_CSSyncPropInfo_F4BY_2eproto.base,
  &scc_info_CSTorpedoCancelShoot_F4BY_2eproto.base,
  &scc_info_CSTorpedoHit_F4BY_2eproto.base,
  &scc_info_CSTorpedoPreShoot_F4BY_2eproto.base,
  &scc_info_CSTorpedoShoot_F4BY_2eproto.base,
  &scc_info_CSTreasureHuntMission_F4BY_2eproto.base,
  &scc_info_CSTreasureHuntPackage_F4BY_2eproto.base,
  &scc_info_CSTrebleSkill_F4BY_2eproto.base,
  &scc_info_CSUseProp_F4BY_2eproto.base,
  &scc_info_CSUserEvent_F4BY_2eproto.base,
  &scc_info_CSUserInfoNotify_F4BY_2eproto.base,
  &scc_info_CSUserLog_F4BY_2eproto.base,
  &scc_info_CSUserPoolDouble_F4BY_2eproto.base,
  &scc_info_CSUserPoolDoubleInfo_F4BY_2eproto.base,
  &scc_info_CSUserPoolDraw_F4BY_2eproto.base,
  &scc_info_CSUserPoolInfo_F4BY_2eproto.base,
  &scc_info_CSUserPoolPreDraw_F4BY_2eproto.base,
  &scc_info_CSUserPoolStatus_F4BY_2eproto.base,
  &scc_info_CSUserReady_F4BY_2eproto.base,
  &scc_info_CSUserRunBackground_F4BY_2eproto.base,
  &scc_info_CSUserShoot_F4BY_2eproto.base,
  &scc_info_CSVerifyActivity_F4BY_2eproto.base,
  &scc_info_CSVerifyTermChange_F4BY_2eproto.base,
  &scc_info_ChestBrief_F4BY_2eproto.base,
  &scc_info_CommonResp_F4BY_2eproto.base,
  &scc_info_Decimal_F4BY_2eproto.base,
  &scc_info_EffectInfo_F4BY_2eproto.base,
  &scc_info_ExchangeShopInfo_F4BY_2eproto.base,
  &scc_info_FishTrace_F4BY_2eproto.base,
  &scc_info_FrozenFish_F4BY_2eproto.base,
  &scc_info_GivenCardAward_F4BY_2eproto.base,
  &scc_info_GunInfo_F4BY_2eproto.base,
  &scc_info_GunSpecEffect_F4BY_2eproto.base,
  &scc_info_JumpHighArena_F4BY_2eproto.base,
  &scc_info_LuckyAwardNotify_F4BY_2eproto.base,
  &scc_info_LuckyRecord_F4BY_2eproto.base,
  &scc_info_LuckyTaskInfo_F4BY_2eproto.base,
  &scc_info_MatchPackAddition_F4BY_2eproto.base,
  &scc_info_MissionInfo_F4BY_2eproto.base,
  &scc_info_MultiInfo_F4BY_2eproto.base,
  &scc_info_Obj_F4BY_2eproto.base,
  &scc_info_Object_F4BY_2eproto.base,
  &scc_info_Object1_F4BY_2eproto.base,
  &scc_info_Object2_F4BY_2eproto.base,
  &scc_info_Object3_F4BY_2eproto.base,
  &scc_info_OpenChestReward_F4BY_2eproto.base,
  &scc_info_OwnRecord_F4BY_2eproto.base,
  &scc_info_Package_F4BY_2eproto.base,
  &scc_info_PropInfo_F4BY_2eproto.base,
  &scc_info_RewardInfo_F4BY_2eproto.base,
  &scc_info_SCActivityInfo_F4BY_2eproto.base,
  &scc_info_SCAnniversarySelectResult_F4BY_2eproto.base,
  &scc_info_SCAnniversaryShowSelect_F4BY_2eproto.base,
  &scc_info_SCAwardPool_F4BY_2eproto.base,
  &scc_info_SCBombGlobeFishInfo_F4BY_2eproto.base,
  &scc_info_SCBuyGun_F4BY_2eproto.base,
  &scc_info_SCBuyWings_F4BY_2eproto.base,
  &scc_info_SCCallFish_F4BY_2eproto.base,
  &scc_info_SCCaptureScallop_F4BY_2eproto.base,
  &scc_info_SCChangeScene_F4BY_2eproto.base,
  &scc_info_SCChat_F4BY_2eproto.base,
  &scc_info_SCChestConfig_F4BY_2eproto.base,
  &scc_info_SCChestSetAutoSelect_F4BY_2eproto.base,
  &scc_info_SCChestSetEnable_F4BY_2eproto.base,
  &scc_info_SCComTask_F4BY_2eproto.base,
  &scc_info_SCCrazySkill_F4BY_2eproto.base,
  &scc_info_SCDrawReward_F4BY_2eproto.base,
  &scc_info_SCDrawTimes_F4BY_2eproto.base,
  &scc_info_SCExchangeShop_F4BY_2eproto.base,
  &scc_info_SCFishTracesList_F4BY_2eproto.base,
  &scc_info_SCFrozenFish_F4BY_2eproto.base,
  &scc_info_SCFrozenTime_F4BY_2eproto.base,
  &scc_info_SCGainAward_F4BY_2eproto.base,
  &scc_info_SCGameInfoNotify_F4BY_2eproto.base,
  &scc_info_SCGameItemSwitch_F4BY_2eproto.base,
  &scc_info_SCGetAwardPoolRecord_F4BY_2eproto.base,
  &scc_info_SCGetLuckyNum_F4BY_2eproto.base,
  &scc_info_SCGetLuckyTaskAward_F4BY_2eproto.base,
  &scc_info_SCGetMagicCube_F4BY_2eproto.base,
  &scc_info_SCHeartBeat_F4BY_2eproto.base,
  &scc_info_SCHitFish_F4BY_2eproto.base,
  &scc_info_SCHitSpecialFish_F4BY_2eproto.base,
  &scc_info_SCInfoRedDot_F4BY_2eproto.base,
  &scc_info_SCKiRinFish_F4BY_2eproto.base,
  &scc_info_SCLockFish_F4BY_2eproto.base,
  &scc_info_SCLoginGameWithToken_F4BY_2eproto.base,
  &scc_info_SCLuckyDrawInfo_F4BY_2eproto.base,
  &scc_info_SCLuckyPoolDraw_F4BY_2eproto.base,
  &scc_info_SCLuckyPoolInfo_F4BY_2eproto.base,
  &scc_info_SCLuckyRecord_F4BY_2eproto.base,
  &scc_info_SCLuckyRedDot_F4BY_2eproto.base,
  &scc_info_SCMagicCubeBulletInfo_F4BY_2eproto.base,
  &scc_info_SCMatchPackAddition_F4BY_2eproto.base,
  &scc_info_SCMatchPackInvail_F4BY_2eproto.base,
  &scc_info_SCNotifyActStatus_F4BY_2eproto.base,
  &scc_info_SCNotifyLogin_F4BY_2eproto.base,
  &scc_info_SCNotifyLogout_F4BY_2eproto.base,
  &scc_info_SCNvWaFishCapture_F4BY_2eproto.base,
  &scc_info_SCOpenChest_F4BY_2eproto.base,
  &scc_info_SCOpenScallop_F4BY_2eproto.base,
  &scc_info_SCOwnRecord_F4BY_2eproto.base,
  &scc_info_SCPreHit_F4BY_2eproto.base,
  &scc_info_SCPreShoot_F4BY_2eproto.base,
  &scc_info_SCPropDropNotify_F4BY_2eproto.base,
  &scc_info_SCPropStatus_F4BY_2eproto.base,
  &scc_info_SCPurchasePackage_F4BY_2eproto.base,
  &scc_info_SCReceiveMissionReward_F4BY_2eproto.base,
  &scc_info_SCSelectChestReward_F4BY_2eproto.base,
  &scc_info_SCSetProbability_F4BY_2eproto.base,
  &scc_info_SCSetWings_F4BY_2eproto.base,
  &scc_info_SCSettleScallopLottery_F4BY_2eproto.base,
  &scc_info_SCSevenDayAward_F4BY_2eproto.base,
  &scc_info_SCSevenDayInfo_F4BY_2eproto.base,
  &scc_info_SCSpecEffect_F4BY_2eproto.base,
  &scc_info_SCSyncAnniversaryHitStage_F4BY_2eproto.base,
  &scc_info_SCSyncBomb_F4BY_2eproto.base,
  &scc_info_SCSyncBombFinish_F4BY_2eproto.base,
  &scc_info_SCSyncConfigs_F4BY_2eproto.base,
  &scc_info_SCSyncFishReq_F4BY_2eproto.base,
  &scc_info_SCSyncFishRsp_F4BY_2eproto.base,
  &scc_info_SCSyncMoney_F4BY_2eproto.base,
  &scc_info_SCSyncPropInfo_F4BY_2eproto.base,
  &scc_info_SCSyncScallopLottery_F4BY_2eproto.base,
  &scc_info_SCTaskInfo_F4BY_2eproto.base,
  &scc_info_SCTorpedoCancelShoot_F4BY_2eproto.base,
  &scc_info_SCTorpedoHit_F4BY_2eproto.base,
  &scc_info_SCTorpedoPreShoot_F4BY_2eproto.base,
  &scc_info_SCTorpedoShoot_F4BY_2eproto.base,
  &scc_info_SCTortoiseExplode_F4BY_2eproto.base,
  &scc_info_SCTreasureFishCatched_F4BY_2eproto.base,
  &scc_info_SCTreasureFishInfo_F4BY_2eproto.base,
  &scc_info_SCTreasureHuntMission_F4BY_2eproto.base,
  &scc_info_SCTreasureHuntPackage_F4BY_2eproto.base,
  &scc_info_SCTrebleSkill_F4BY_2eproto.base,
  &scc_info_SCUpdateChestStatus_F4BY_2eproto.base,
  &scc_info_SCUseProp_F4BY_2eproto.base,
  &scc_info_SCUserInfoNotify_F4BY_2eproto.base,
  &scc_info_SCUserPoolAdd_F4BY_2eproto.base,
  &scc_info_SCUserPoolDouble_F4BY_2eproto.base,
  &scc_info_SCUserPoolDoubleInfo_F4BY_2eproto.base,
  &scc_info_SCUserPoolDraw_F4BY_2eproto.base,
  &scc_info_SCUserPoolInfo_F4BY_2eproto.base,
  &scc_info_SCUserPoolPreDraw_F4BY_2eproto.base,
  &scc_info_SCUserPoolStatus_F4BY_2eproto.base,
  &scc_info_SCUserReady_F4BY_2eproto.base,
  &scc_info_SCUserRunBackground_F4BY_2eproto.base,
  &scc_info_SCUserShoot_F4BY_2eproto.base,
  &scc_info_SCValentineDayFish_F4BY_2eproto.base,
  &scc_info_SCVerifyActivity_F4BY_2eproto.base,
  &scc_info_SCVerifyTermChange_F4BY_2eproto.base,
  &scc_info_SCVipChargeAward_F4BY_2eproto.base,
  &scc_info_SCWaterDropInfo_F4BY_2eproto.base,
  &scc_info_SC_SceneInfo_F4BY_2eproto.base,
  &scc_info_ScallopLottery_F4BY_2eproto.base,
  &scc_info_SevenDayDetail_F4BY_2eproto.base,
  &scc_info_SevenDayTask_F4BY_2eproto.base,
  &scc_info_StationBase_F4BY_2eproto.base,
  &scc_info_SyncPropInfoX_F4BY_2eproto.base,
  &scc_info_TreasureHuntConfig_F4BY_2eproto.base,
  &scc_info_UserAwardItem_F4BY_2eproto.base,
  &scc_info_UserSyncPropInfo_F4BY_2eproto.base,
  &scc_info_VipInfo_F4BY_2eproto.base,
  &scc_info_WheelObject_F4BY_2eproto.base,
  &scc_info_WingsInfo_F4BY_2eproto.base,
  &scc_info_WingsSpecEffect_F4BY_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_F4BY_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_F4BY_2eproto = {
  false, false, descriptor_table_protodef_F4BY_2eproto, "F4BY.proto", 22818,
  &descriptor_table_F4BY_2eproto_once, descriptor_table_F4BY_2eproto_sccs, descriptor_table_F4BY_2eproto_deps, 228, 0,
  schemas, file_default_instances, TableStruct_F4BY_2eproto::offsets,
  file_level_metadata_F4BY_2eproto, 228, file_level_enum_descriptors_F4BY_2eproto, file_level_service_descriptors_F4BY_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_F4BY_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_F4BY_2eproto)), true);
namespace F4BY {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDSubGame_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_F4BY_2eproto);
  return file_level_enum_descriptors_F4BY_2eproto[0];
}
bool EMsgIDSubGame_IsValid(int value) {
  switch (value) {
    case 0:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 1017:
    case 1018:
    case 1019:
    case 1020:
    case 1021:
    case 1025:
    case 1026:
    case 1027:
    case 1028:
    case 1029:
    case 1030:
    case 1031:
    case 1032:
    case 1042:
    case 1043:
    case 1044:
    case 1045:
    case 1046:
    case 1047:
    case 1048:
    case 1049:
    case 1050:
    case 1051:
    case 1052:
    case 1053:
    case 1054:
    case 1055:
    case 1056:
    case 1057:
    case 1058:
    case 1059:
    case 1060:
    case 1061:
    case 1062:
    case 1063:
    case 1064:
    case 1065:
    case 1066:
    case 1067:
    case 1068:
    case 1069:
    case 1070:
    case 1071:
    case 1072:
    case 1073:
    case 1074:
    case 1075:
    case 1100:
    case 1101:
    case 1102:
    case 1103:
    case 1110:
    case 1111:
    case 1112:
    case 1113:
    case 1114:
    case 1115:
    case 1116:
    case 1117:
    case 1118:
    case 1119:
    case 1120:
    case 1133:
    case 1134:
    case 1135:
    case 1136:
    case 1137:
    case 1138:
    case 1139:
    case 1141:
    case 1142:
    case 1143:
    case 1144:
    case 1145:
    case 1146:
    case 1147:
    case 1148:
    case 1149:
    case 1150:
    case 1151:
    case 1200:
    case 1210:
    case 1211:
    case 1212:
    case 1213:
    case 1214:
    case 1215:
    case 1217:
    case 1218:
    case 1219:
    case 1220:
    case 1221:
    case 1222:
    case 1223:
    case 1224:
    case 1230:
    case 1231:
    case 1232:
    case 20001:
    case 20002:
    case 21001:
    case 21002:
    case 21003:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_F4BY_2eproto);
  return file_level_enum_descriptors_F4BY_2eproto[1];
}
bool ErrCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 241:
    case 1000:
    case 10001:
    case 10002:
    case 10003:
    case 10004:
    case 10005:
    case 10006:
    case 10007:
    case 10008:
    case 10009:
    case 10010:
    case 10011:
    case 10012:
    case 10013:
    case 10014:
    case 10015:
    case 10016:
    case 10017:
    case 10018:
    case 10019:
    case 10020:
    case 10021:
    case 10022:
    case 10023:
    case 10024:
    case 10025:
    case 10030:
    case 10031:
    case 10032:
    case 10033:
    case 10034:
    case 10035:
    case 10036:
    case 10037:
    case 10038:
    case 10040:
    case 10041:
    case 10042:
    case 10050:
    case 10051:
    case 10052:
    case 10053:
    case 10054:
    case 10055:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_F4BY_2eproto);
  return file_level_enum_descriptors_F4BY_2eproto[2];
}
bool UserEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CallFishType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_F4BY_2eproto);
  return file_level_enum_descriptors_F4BY_2eproto[3];
}
bool CallFishType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChestType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_F4BY_2eproto);
  return file_level_enum_descriptors_F4BY_2eproto[4];
}
bool ChestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChestAutoSelectOption_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_F4BY_2eproto);
  return file_level_enum_descriptors_F4BY_2eproto[5];
}
bool ChestAutoSelectOption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SC_SceneInfo::_Internal {
 public:
};

SC_SceneInfo::SC_SceneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bet_list_(arena),
  station_base_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SC_SceneInfo)
}
SC_SceneInfo::SC_SceneInfo(const SC_SceneInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bet_list_(from.bet_list_),
      station_base_list_(from.station_base_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:F4BY.SC_SceneInfo)
}

void SC_SceneInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SC_SceneInfo_F4BY_2eproto.base);
}

SC_SceneInfo::~SC_SceneInfo() {
  // @@protoc_insertion_point(destructor:F4BY.SC_SceneInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SC_SceneInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SC_SceneInfo::ArenaDtor(void* object) {
  SC_SceneInfo* _this = reinterpret_cast< SC_SceneInfo* >(object);
  (void)_this;
}
void SC_SceneInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SC_SceneInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_SceneInfo& SC_SceneInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_SceneInfo_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SC_SceneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SC_SceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bet_list_.Clear();
  station_base_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_SceneInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 bet_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bet_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_bet_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .F4BY.StationBase station_base_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_station_base_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_SceneInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SC_SceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 bet_list = 1;
  {
    int byte_size = _bet_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_bet_list(), byte_size, target);
    }
  }

  // repeated .F4BY.StationBase station_base_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_station_base_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_station_base_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SC_SceneInfo)
  return target;
}

size_t SC_SceneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SC_SceneInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 bet_list = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bet_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bet_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .F4BY.StationBase station_base_list = 2;
  total_size += 1UL * this->_internal_station_base_list_size();
  for (const auto& msg : this->station_base_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_SceneInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SC_SceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_SceneInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_SceneInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SC_SceneInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SC_SceneInfo)
    MergeFrom(*source);
  }
}

void SC_SceneInfo::MergeFrom(const SC_SceneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SC_SceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bet_list_.MergeFrom(from.bet_list_);
  station_base_list_.MergeFrom(from.station_base_list_);
}

void SC_SceneInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SC_SceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SceneInfo::CopyFrom(const SC_SceneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SC_SceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_SceneInfo::IsInitialized() const {
  return true;
}

void SC_SceneInfo::InternalSwap(SC_SceneInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bet_list_.InternalSwap(&other->bet_list_);
  station_base_list_.InternalSwap(&other->station_base_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_SceneInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CommonResp::_Internal {
 public:
};

CommonResp::CommonResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CommonResp)
}
CommonResp::CommonResp(const CommonResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:F4BY.CommonResp)
}

void CommonResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommonResp_F4BY_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

CommonResp::~CommonResp() {
  // @@protoc_insertion_point(destructor:F4BY.CommonResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommonResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CommonResp::ArenaDtor(void* object) {
  CommonResp* _this = reinterpret_cast< CommonResp* >(object);
  (void)_this;
}
void CommonResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommonResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommonResp& CommonResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommonResp_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CommonResp::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CommonResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "F4BY.CommonResp.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommonResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CommonResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "F4BY.CommonResp.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CommonResp)
  return target;
}

size_t CommonResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CommonResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CommonResp)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommonResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CommonResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CommonResp)
    MergeFrom(*source);
  }
}

void CommonResp::MergeFrom(const CommonResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CommonResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void CommonResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CommonResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonResp::CopyFrom(const CommonResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CommonResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonResp::IsInitialized() const {
  return true;
}

void CommonResp::InternalSwap(CommonResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Object::_Internal {
 public:
};

Object::Object(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  multi_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.Object)
}
Object::Object(const Object& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      multi_list_(from.multi_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&origin_uid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(origin_uid_));
  // @@protoc_insertion_point(copy_constructor:F4BY.Object)
}

void Object::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Object_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&origin_uid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(origin_uid_));
}

Object::~Object() {
  // @@protoc_insertion_point(destructor:F4BY.Object)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Object::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Object::ArenaDtor(void* object) {
  Object* _this = reinterpret_cast< Object* >(object);
  (void)_this;
}
void Object::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Object::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Object& Object::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Object_F4BY_2eproto.base);
  return *internal_default_instance();
}


void Object::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.Object)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  multi_list_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&origin_uid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(origin_uid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Object::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 multiple = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 originId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          originid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .F4BY.MultiInfo multi_list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_multi_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 origin_uid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          origin_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Object::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.Object)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // int32 ratio = 3;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ratio(), target);
  }

  // float time = 4;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_time(), target);
  }

  // int32 multiple = 5;
  if (this->multiple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_multiple(), target);
  }

  // int32 uid = 6;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_uid(), target);
  }

  // int32 originId = 7;
  if (this->originid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_originid(), target);
  }

  // repeated .F4BY.MultiInfo multi_list = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_multi_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_multi_list(i), target, stream);
  }

  // int32 origin_uid = 9;
  if (this->origin_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_origin_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.Object)
  return target;
}

size_t Object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.Object)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.MultiInfo multi_list = 8;
  total_size += 1UL * this->_internal_multi_list_size();
  for (const auto& msg : this->multi_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  // int32 ratio = 3;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  // float time = 4;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 multiple = 5;
  if (this->multiple() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_multiple());
  }

  // int32 uid = 6;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 originId = 7;
  if (this->originid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_originid());
  }

  // int32 origin_uid = 9;
  if (this->origin_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_origin_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Object::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.Object)
  GOOGLE_DCHECK_NE(&from, this);
  const Object* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Object>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.Object)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.Object)
    MergeFrom(*source);
  }
}

void Object::MergeFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.Object)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  multi_list_.MergeFrom(from.multi_list_);
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
  if (!(from.time() <= 0 && from.time() >= 0)) {
    _internal_set_time(from._internal_time());
  }
  if (from.multiple() != 0) {
    _internal_set_multiple(from._internal_multiple());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.originid() != 0) {
    _internal_set_originid(from._internal_originid());
  }
  if (from.origin_uid() != 0) {
    _internal_set_origin_uid(from._internal_origin_uid());
  }
}

void Object::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object::CopyFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {
  return true;
}

void Object::InternalSwap(Object* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  multi_list_.InternalSwap(&other->multi_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Object, origin_uid_)
      + sizeof(Object::origin_uid_)
      - PROTOBUF_FIELD_OFFSET(Object, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Object::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Obj::_Internal {
 public:
};

Obj::Obj(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.Obj)
}
Obj::Obj(const Obj& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&id_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:F4BY.Obj)
}

void Obj::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&id_)) + sizeof(value_));
}

Obj::~Obj() {
  // @@protoc_insertion_point(destructor:F4BY.Obj)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Obj::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Obj::ArenaDtor(void* object) {
  Obj* _this = reinterpret_cast< Obj* >(object);
  (void)_this;
}
void Obj::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Obj::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Obj& Obj::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Obj_F4BY_2eproto.base);
  return *internal_default_instance();
}


void Obj::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.Obj)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&id_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Obj::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Obj::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.Obj)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.Obj)
  return target;
}

size_t Obj::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.Obj)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Obj::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.Obj)
  GOOGLE_DCHECK_NE(&from, this);
  const Obj* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Obj>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.Obj)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.Obj)
    MergeFrom(*source);
  }
}

void Obj::MergeFrom(const Obj& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.Obj)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Obj::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.Obj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Obj::CopyFrom(const Obj& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.Obj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Obj::IsInitialized() const {
  return true;
}

void Obj::InternalSwap(Obj* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Obj, value_)
      + sizeof(Obj::value_)
      - PROTOBUF_FIELD_OFFSET(Obj, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Obj::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Object1::_Internal {
 public:
};

Object1::Object1(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.Object1)
}
Object1::Object1(const Object1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:F4BY.Object1)
}

void Object1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Object1_F4BY_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
}

Object1::~Object1() {
  // @@protoc_insertion_point(destructor:F4BY.Object1)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Object1::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Object1::ArenaDtor(void* object) {
  Object1* _this = reinterpret_cast< Object1* >(object);
  (void)_this;
}
void Object1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Object1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Object1& Object1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Object1_F4BY_2eproto.base);
  return *internal_default_instance();
}


void Object1::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.Object1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Object1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "F4BY.Object1.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Object1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.Object1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "F4BY.Object1.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // int32 value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.Object1)
  return target;
}

size_t Object1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.Object1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // int32 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Object1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.Object1)
  GOOGLE_DCHECK_NE(&from, this);
  const Object1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Object1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.Object1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.Object1)
    MergeFrom(*source);
  }
}

void Object1::MergeFrom(const Object1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.Object1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Object1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.Object1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object1::CopyFrom(const Object1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.Object1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object1::IsInitialized() const {
  return true;
}

void Object1::InternalSwap(Object1* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Object1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Object2::_Internal {
 public:
};

Object2::Object2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.Object2)
}
Object2::Object2(const Object2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:F4BY.Object2)
}

void Object2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Object2_F4BY_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Object2::~Object2() {
  // @@protoc_insertion_point(destructor:F4BY.Object2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Object2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Object2::ArenaDtor(void* object) {
  Object2* _this = reinterpret_cast< Object2* >(object);
  (void)_this;
}
void Object2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Object2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Object2& Object2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Object2_F4BY_2eproto.base);
  return *internal_default_instance();
}


void Object2::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.Object2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Object2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "F4BY.Object2.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "F4BY.Object2.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Object2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.Object2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "F4BY.Object2.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "F4BY.Object2.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.Object2)
  return target;
}

size_t Object2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.Object2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Object2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.Object2)
  GOOGLE_DCHECK_NE(&from, this);
  const Object2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Object2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.Object2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.Object2)
    MergeFrom(*source);
  }
}

void Object2::MergeFrom(const Object2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.Object2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void Object2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.Object2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object2::CopyFrom(const Object2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.Object2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object2::IsInitialized() const {
  return true;
}

void Object2::InternalSwap(Object2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Object2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Object3::_Internal {
 public:
};

Object3::Object3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.Object3)
}
Object3::Object3(const Object3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&key_, &from.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&key_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:F4BY.Object3)
}

void Object3::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&key_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&key_)) + sizeof(value_));
}

Object3::~Object3() {
  // @@protoc_insertion_point(destructor:F4BY.Object3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Object3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Object3::ArenaDtor(void* object) {
  Object3* _this = reinterpret_cast< Object3* >(object);
  (void)_this;
}
void Object3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Object3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Object3& Object3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Object3_F4BY_2eproto.base);
  return *internal_default_instance();
}


void Object3::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.Object3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&key_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Object3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Object3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.Object3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 key = 1;
  if (this->key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_key(), target);
  }

  // int32 value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.Object3)
  return target;
}

size_t Object3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.Object3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_key());
  }

  // int32 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Object3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.Object3)
  GOOGLE_DCHECK_NE(&from, this);
  const Object3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Object3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.Object3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.Object3)
    MergeFrom(*source);
  }
}

void Object3::MergeFrom(const Object3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.Object3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key() != 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Object3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.Object3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object3::CopyFrom(const Object3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.Object3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object3::IsInitialized() const {
  return true;
}

void Object3::InternalSwap(Object3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Object3, value_)
      + sizeof(Object3::value_)
      - PROTOBUF_FIELD_OFFSET(Object3, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Object3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WheelObject::_Internal {
 public:
};

WheelObject::WheelObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  wheels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.WheelObject)
}
WheelObject::WheelObject(const WheelObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      wheels_(from.wheels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ratio_ = from.ratio_;
  // @@protoc_insertion_point(copy_constructor:F4BY.WheelObject)
}

void WheelObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WheelObject_F4BY_2eproto.base);
  ratio_ = 0;
}

WheelObject::~WheelObject() {
  // @@protoc_insertion_point(destructor:F4BY.WheelObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WheelObject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WheelObject::ArenaDtor(void* object) {
  WheelObject* _this = reinterpret_cast< WheelObject* >(object);
  (void)_this;
}
void WheelObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WheelObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WheelObject& WheelObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WheelObject_F4BY_2eproto.base);
  return *internal_default_instance();
}


void WheelObject::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.WheelObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wheels_.Clear();
  ratio_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WheelObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .F4BY.Object3 wheels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_wheels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WheelObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.WheelObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .F4BY.Object3 wheels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_wheels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_wheels(i), target, stream);
  }

  // int32 ratio = 2;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.WheelObject)
  return target;
}

size_t WheelObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.WheelObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.Object3 wheels = 1;
  total_size += 1UL * this->_internal_wheels_size();
  for (const auto& msg : this->wheels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 ratio = 2;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WheelObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.WheelObject)
  GOOGLE_DCHECK_NE(&from, this);
  const WheelObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WheelObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.WheelObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.WheelObject)
    MergeFrom(*source);
  }
}

void WheelObject::MergeFrom(const WheelObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.WheelObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wheels_.MergeFrom(from.wheels_);
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
}

void WheelObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.WheelObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WheelObject::CopyFrom(const WheelObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.WheelObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WheelObject::IsInitialized() const {
  return true;
}

void WheelObject::InternalSwap(WheelObject* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  wheels_.InternalSwap(&other->wheels_);
  swap(ratio_, other->ratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WheelObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Decimal::_Internal {
 public:
};

Decimal::Decimal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.Decimal)
}
Decimal::Decimal(const Decimal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&num_, &from.num_,
    static_cast<size_t>(reinterpret_cast<char*>(&denom_) -
    reinterpret_cast<char*>(&num_)) + sizeof(denom_));
  // @@protoc_insertion_point(copy_constructor:F4BY.Decimal)
}

void Decimal::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&num_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&denom_) -
      reinterpret_cast<char*>(&num_)) + sizeof(denom_));
}

Decimal::~Decimal() {
  // @@protoc_insertion_point(destructor:F4BY.Decimal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Decimal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Decimal::ArenaDtor(void* object) {
  Decimal* _this = reinterpret_cast< Decimal* >(object);
  (void)_this;
}
void Decimal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Decimal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Decimal& Decimal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Decimal_F4BY_2eproto.base);
  return *internal_default_instance();
}


void Decimal::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.Decimal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&denom_) -
      reinterpret_cast<char*>(&num_)) + sizeof(denom_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Decimal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 denom = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          denom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Decimal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.Decimal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num = 1;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num(), target);
  }

  // int32 denom = 2;
  if (this->denom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_denom(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.Decimal)
  return target;
}

size_t Decimal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.Decimal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 num = 1;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  // int32 denom = 2;
  if (this->denom() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_denom());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Decimal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.Decimal)
  GOOGLE_DCHECK_NE(&from, this);
  const Decimal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Decimal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.Decimal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.Decimal)
    MergeFrom(*source);
  }
}

void Decimal::MergeFrom(const Decimal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.Decimal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
  if (from.denom() != 0) {
    _internal_set_denom(from._internal_denom());
  }
}

void Decimal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.Decimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Decimal::CopyFrom(const Decimal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.Decimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Decimal::IsInitialized() const {
  return true;
}

void Decimal::InternalSwap(Decimal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Decimal, denom_)
      + sizeof(Decimal::denom_)
      - PROTOBUF_FIELD_OFFSET(Decimal, num_)>(
          reinterpret_cast<char*>(&num_),
          reinterpret_cast<char*>(&other->num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Decimal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSLoginGameWithToken::_Internal {
 public:
};

CSLoginGameWithToken::CSLoginGameWithToken(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSLoginGameWithToken)
}
CSLoginGameWithToken::CSLoginGameWithToken(const CSLoginGameWithToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArena());
  }
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_tableid_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(last_tableid_));
  // @@protoc_insertion_point(copy_constructor:F4BY.CSLoginGameWithToken)
}

void CSLoginGameWithToken::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSLoginGameWithToken_F4BY_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&last_tableid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(last_tableid_));
}

CSLoginGameWithToken::~CSLoginGameWithToken() {
  // @@protoc_insertion_point(destructor:F4BY.CSLoginGameWithToken)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSLoginGameWithToken::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSLoginGameWithToken::ArenaDtor(void* object) {
  CSLoginGameWithToken* _this = reinterpret_cast< CSLoginGameWithToken* >(object);
  (void)_this;
}
void CSLoginGameWithToken::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSLoginGameWithToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSLoginGameWithToken& CSLoginGameWithToken::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSLoginGameWithToken_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSLoginGameWithToken::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSLoginGameWithToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty();
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_tableid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(last_tableid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSLoginGameWithToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "F4BY.CSLoginGameWithToken.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 oSType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ostype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tableId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          tableid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 last_tableId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          last_tableid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSLoginGameWithToken::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSLoginGameWithToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "F4BY.CSLoginGameWithToken.token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token(), target);
  }

  // int32 oSType = 3;
  if (this->ostype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ostype(), target);
  }

  // int32 tableId = 4;
  if (this->tableid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_tableid(), target);
  }

  // int32 last_tableId = 5;
  if (this->last_tableid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_last_tableid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSLoginGameWithToken)
  return target;
}

size_t CSLoginGameWithToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSLoginGameWithToken)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  // int32 oSType = 3;
  if (this->ostype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ostype());
  }

  // int32 tableId = 4;
  if (this->tableid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tableid());
  }

  // int32 last_tableId = 5;
  if (this->last_tableid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_last_tableid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSLoginGameWithToken::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSLoginGameWithToken)
  GOOGLE_DCHECK_NE(&from, this);
  const CSLoginGameWithToken* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSLoginGameWithToken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSLoginGameWithToken)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSLoginGameWithToken)
    MergeFrom(*source);
  }
}

void CSLoginGameWithToken::MergeFrom(const CSLoginGameWithToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSLoginGameWithToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.ostype() != 0) {
    _internal_set_ostype(from._internal_ostype());
  }
  if (from.tableid() != 0) {
    _internal_set_tableid(from._internal_tableid());
  }
  if (from.last_tableid() != 0) {
    _internal_set_last_tableid(from._internal_last_tableid());
  }
}

void CSLoginGameWithToken::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSLoginGameWithToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLoginGameWithToken::CopyFrom(const CSLoginGameWithToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSLoginGameWithToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLoginGameWithToken::IsInitialized() const {
  return true;
}

void CSLoginGameWithToken::InternalSwap(CSLoginGameWithToken* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSLoginGameWithToken, last_tableid_)
      + sizeof(CSLoginGameWithToken::last_tableid_)
      - PROTOBUF_FIELD_OFFSET(CSLoginGameWithToken, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSLoginGameWithToken::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCLoginGameWithToken::_Internal {
 public:
};

SCLoginGameWithToken::SCLoginGameWithToken(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCLoginGameWithToken)
}
SCLoginGameWithToken::SCLoginGameWithToken(const SCLoginGameWithToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&scene_index_, &from.scene_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&tableid_) -
    reinterpret_cast<char*>(&scene_index_)) + sizeof(tableid_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCLoginGameWithToken)
}

void SCLoginGameWithToken::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&scene_index_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&tableid_) -
      reinterpret_cast<char*>(&scene_index_)) + sizeof(tableid_));
}

SCLoginGameWithToken::~SCLoginGameWithToken() {
  // @@protoc_insertion_point(destructor:F4BY.SCLoginGameWithToken)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCLoginGameWithToken::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCLoginGameWithToken::ArenaDtor(void* object) {
  SCLoginGameWithToken* _this = reinterpret_cast< SCLoginGameWithToken* >(object);
  (void)_this;
}
void SCLoginGameWithToken::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCLoginGameWithToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCLoginGameWithToken& SCLoginGameWithToken::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCLoginGameWithToken_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCLoginGameWithToken::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCLoginGameWithToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&scene_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tableid_) -
      reinterpret_cast<char*>(&scene_index_)) + sizeof(tableid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCLoginGameWithToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 scene_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          scene_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tableId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tableid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCLoginGameWithToken::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCLoginGameWithToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 scene_index = 1;
  if (this->scene_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_scene_index(), target);
  }

  // int32 tableId = 2;
  if (this->tableid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_tableid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCLoginGameWithToken)
  return target;
}

size_t SCLoginGameWithToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCLoginGameWithToken)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 scene_index = 1;
  if (this->scene_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scene_index());
  }

  // int32 tableId = 2;
  if (this->tableid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tableid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCLoginGameWithToken::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCLoginGameWithToken)
  GOOGLE_DCHECK_NE(&from, this);
  const SCLoginGameWithToken* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCLoginGameWithToken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCLoginGameWithToken)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCLoginGameWithToken)
    MergeFrom(*source);
  }
}

void SCLoginGameWithToken::MergeFrom(const SCLoginGameWithToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCLoginGameWithToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.scene_index() != 0) {
    _internal_set_scene_index(from._internal_scene_index());
  }
  if (from.tableid() != 0) {
    _internal_set_tableid(from._internal_tableid());
  }
}

void SCLoginGameWithToken::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCLoginGameWithToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCLoginGameWithToken::CopyFrom(const SCLoginGameWithToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCLoginGameWithToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCLoginGameWithToken::IsInitialized() const {
  return true;
}

void SCLoginGameWithToken::InternalSwap(SCLoginGameWithToken* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCLoginGameWithToken, tableid_)
      + sizeof(SCLoginGameWithToken::tableid_)
      - PROTOBUF_FIELD_OFFSET(SCLoginGameWithToken, scene_index_)>(
          reinterpret_cast<char*>(&scene_index_),
          reinterpret_cast<char*>(&other->scene_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCLoginGameWithToken::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSUserReady::_Internal {
 public:
};

CSUserReady::CSUserReady(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSUserReady)
}
CSUserReady::CSUserReady(const CSUserReady& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:F4BY.CSUserReady)
}

void CSUserReady::SharedCtor() {
  playerid_ = 0;
}

CSUserReady::~CSUserReady() {
  // @@protoc_insertion_point(destructor:F4BY.CSUserReady)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSUserReady::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSUserReady::ArenaDtor(void* object) {
  CSUserReady* _this = reinterpret_cast< CSUserReady* >(object);
  (void)_this;
}
void CSUserReady::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSUserReady::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSUserReady& CSUserReady::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSUserReady_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSUserReady::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSUserReady)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSUserReady::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSUserReady::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSUserReady)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSUserReady)
  return target;
}

size_t CSUserReady::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSUserReady)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSUserReady::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSUserReady)
  GOOGLE_DCHECK_NE(&from, this);
  const CSUserReady* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSUserReady>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSUserReady)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSUserReady)
    MergeFrom(*source);
  }
}

void CSUserReady::MergeFrom(const CSUserReady& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSUserReady)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
}

void CSUserReady::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSUserReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSUserReady::CopyFrom(const CSUserReady& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSUserReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSUserReady::IsInitialized() const {
  return true;
}

void CSUserReady::InternalSwap(CSUserReady* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(playerid_, other->playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSUserReady::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EffectInfo::_Internal {
 public:
};

EffectInfo::EffectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.EffectInfo)
}
EffectInfo::EffectInfo(const EffectInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&effect_id_, &from.effect_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_global_) -
    reinterpret_cast<char*>(&effect_id_)) + sizeof(is_global_));
  // @@protoc_insertion_point(copy_constructor:F4BY.EffectInfo)
}

void EffectInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&effect_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_global_) -
      reinterpret_cast<char*>(&effect_id_)) + sizeof(is_global_));
}

EffectInfo::~EffectInfo() {
  // @@protoc_insertion_point(destructor:F4BY.EffectInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EffectInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EffectInfo::ArenaDtor(void* object) {
  EffectInfo* _this = reinterpret_cast< EffectInfo* >(object);
  (void)_this;
}
void EffectInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EffectInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EffectInfo& EffectInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EffectInfo_F4BY_2eproto.base);
  return *internal_default_instance();
}


void EffectInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.EffectInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&effect_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_global_) -
      reinterpret_cast<char*>(&effect_id_)) + sizeof(is_global_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EffectInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 effect_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          effect_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_global = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_global_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EffectInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.EffectInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 effect_id = 1;
  if (this->effect_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_effect_id(), target);
  }

  // bool is_global = 2;
  if (this->is_global() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_global(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.EffectInfo)
  return target;
}

size_t EffectInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.EffectInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 effect_id = 1;
  if (this->effect_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_effect_id());
  }

  // bool is_global = 2;
  if (this->is_global() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EffectInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.EffectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EffectInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EffectInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.EffectInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.EffectInfo)
    MergeFrom(*source);
  }
}

void EffectInfo::MergeFrom(const EffectInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.EffectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.effect_id() != 0) {
    _internal_set_effect_id(from._internal_effect_id());
  }
  if (from.is_global() != 0) {
    _internal_set_is_global(from._internal_is_global());
  }
}

void EffectInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.EffectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EffectInfo::CopyFrom(const EffectInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.EffectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EffectInfo::IsInitialized() const {
  return true;
}

void EffectInfo::InternalSwap(EffectInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EffectInfo, is_global_)
      + sizeof(EffectInfo::is_global_)
      - PROTOBUF_FIELD_OFFSET(EffectInfo, effect_id_)>(
          reinterpret_cast<char*>(&effect_id_),
          reinterpret_cast<char*>(&other->effect_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EffectInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StationBase::_Internal {
 public:
  static const ::F4BY::Decimal& red_packet_ticket(const StationBase* msg);
  static const ::F4BY::EffectInfo& effect_info(const StationBase* msg);
};

const ::F4BY::Decimal&
StationBase::_Internal::red_packet_ticket(const StationBase* msg) {
  return *msg->red_packet_ticket_;
}
const ::F4BY::EffectInfo&
StationBase::_Internal::effect_info(const StationBase* msg) {
  return *msg->effect_info_;
}
StationBase::StationBase(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.StationBase)
}
StationBase::StationBase(const StationBase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_player_name().empty()) {
    player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_player_name(), 
      GetArena());
  }
  if (from._internal_has_red_packet_ticket()) {
    red_packet_ticket_ = new ::F4BY::Decimal(*from.red_packet_ticket_);
  } else {
    red_packet_ticket_ = nullptr;
  }
  if (from._internal_has_effect_info()) {
    effect_info_ = new ::F4BY::EffectInfo(*from.effect_info_);
  } else {
    effect_info_ = nullptr;
  }
  ::memcpy(&gun_ratio_, &from.gun_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&wings_props_id_) -
    reinterpret_cast<char*>(&gun_ratio_)) + sizeof(wings_props_id_));
  // @@protoc_insertion_point(copy_constructor:F4BY.StationBase)
}

void StationBase::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StationBase_F4BY_2eproto.base);
  player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&red_packet_ticket_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&wings_props_id_) -
      reinterpret_cast<char*>(&red_packet_ticket_)) + sizeof(wings_props_id_));
}

StationBase::~StationBase() {
  // @@protoc_insertion_point(destructor:F4BY.StationBase)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StationBase::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  player_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete red_packet_ticket_;
  if (this != internal_default_instance()) delete effect_info_;
}

void StationBase::ArenaDtor(void* object) {
  StationBase* _this = reinterpret_cast< StationBase* >(object);
  (void)_this;
}
void StationBase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StationBase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StationBase& StationBase::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StationBase_F4BY_2eproto.base);
  return *internal_default_instance();
}


void StationBase::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.StationBase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_name_.ClearToEmpty();
  if (GetArena() == nullptr && red_packet_ticket_ != nullptr) {
    delete red_packet_ticket_;
  }
  red_packet_ticket_ = nullptr;
  if (GetArena() == nullptr && effect_info_ != nullptr) {
    delete effect_info_;
  }
  effect_info_ = nullptr;
  ::memset(&gun_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wings_props_id_) -
      reinterpret_cast<char*>(&gun_ratio_)) + sizeof(wings_props_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StationBase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 gun_ratio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gun_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gun_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gun_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 user_score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          user_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chair_idx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string player_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_player_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "F4BY.StationBase.player_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 player_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vip = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool crazy_skill_open = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          crazy_skill_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 user_ticket = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          user_ticket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 effect = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          effect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 extra_data = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          extra_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .F4BY.Decimal red_packet_ticket = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_red_packet_ticket(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .F4BY.EffectInfo effect_info = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_effect_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 wings_props_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          wings_props_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StationBase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.StationBase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gun_ratio = 1;
  if (this->gun_ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_gun_ratio(), target);
  }

  // int32 gun_level = 2;
  if (this->gun_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_gun_level(), target);
  }

  // int64 user_score = 3;
  if (this->user_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_user_score(), target);
  }

  // int32 chair_idx = 4;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_chair_idx(), target);
  }

  // string player_name = 5;
  if (this->player_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_player_name().data(), static_cast<int>(this->_internal_player_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "F4BY.StationBase.player_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_player_name(), target);
  }

  // int32 player_id = 6;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_player_id(), target);
  }

  // int32 vip = 7;
  if (this->vip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_vip(), target);
  }

  // int32 status = 8;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_status(), target);
  }

  // bool crazy_skill_open = 9;
  if (this->crazy_skill_open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_crazy_skill_open(), target);
  }

  // int32 user_ticket = 10;
  if (this->user_ticket() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_user_ticket(), target);
  }

  // int32 effect = 11;
  if (this->effect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_effect(), target);
  }

  // int32 extra_data = 12;
  if (this->extra_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_extra_data(), target);
  }

  // .F4BY.Decimal red_packet_ticket = 13;
  if (this->has_red_packet_ticket()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::red_packet_ticket(this), target, stream);
  }

  // .F4BY.EffectInfo effect_info = 14;
  if (this->has_effect_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::effect_info(this), target, stream);
  }

  // int32 wings_props_id = 15;
  if (this->wings_props_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_wings_props_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.StationBase)
  return target;
}

size_t StationBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.StationBase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string player_name = 5;
  if (this->player_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player_name());
  }

  // .F4BY.Decimal red_packet_ticket = 13;
  if (this->has_red_packet_ticket()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *red_packet_ticket_);
  }

  // .F4BY.EffectInfo effect_info = 14;
  if (this->has_effect_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *effect_info_);
  }

  // int32 gun_ratio = 1;
  if (this->gun_ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gun_ratio());
  }

  // int32 gun_level = 2;
  if (this->gun_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gun_level());
  }

  // int64 user_score = 3;
  if (this->user_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_score());
  }

  // int32 chair_idx = 4;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 player_id = 6;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_id());
  }

  // int32 vip = 7;
  if (this->vip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vip());
  }

  // int32 status = 8;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // bool crazy_skill_open = 9;
  if (this->crazy_skill_open() != 0) {
    total_size += 1 + 1;
  }

  // int32 user_ticket = 10;
  if (this->user_ticket() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_ticket());
  }

  // int32 effect = 11;
  if (this->effect() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_effect());
  }

  // int32 extra_data = 12;
  if (this->extra_data() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_extra_data());
  }

  // int32 wings_props_id = 15;
  if (this->wings_props_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wings_props_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StationBase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.StationBase)
  GOOGLE_DCHECK_NE(&from, this);
  const StationBase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StationBase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.StationBase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.StationBase)
    MergeFrom(*source);
  }
}

void StationBase::MergeFrom(const StationBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.StationBase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_name().size() > 0) {
    _internal_set_player_name(from._internal_player_name());
  }
  if (from.has_red_packet_ticket()) {
    _internal_mutable_red_packet_ticket()->::F4BY::Decimal::MergeFrom(from._internal_red_packet_ticket());
  }
  if (from.has_effect_info()) {
    _internal_mutable_effect_info()->::F4BY::EffectInfo::MergeFrom(from._internal_effect_info());
  }
  if (from.gun_ratio() != 0) {
    _internal_set_gun_ratio(from._internal_gun_ratio());
  }
  if (from.gun_level() != 0) {
    _internal_set_gun_level(from._internal_gun_level());
  }
  if (from.user_score() != 0) {
    _internal_set_user_score(from._internal_user_score());
  }
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.vip() != 0) {
    _internal_set_vip(from._internal_vip());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.crazy_skill_open() != 0) {
    _internal_set_crazy_skill_open(from._internal_crazy_skill_open());
  }
  if (from.user_ticket() != 0) {
    _internal_set_user_ticket(from._internal_user_ticket());
  }
  if (from.effect() != 0) {
    _internal_set_effect(from._internal_effect());
  }
  if (from.extra_data() != 0) {
    _internal_set_extra_data(from._internal_extra_data());
  }
  if (from.wings_props_id() != 0) {
    _internal_set_wings_props_id(from._internal_wings_props_id());
  }
}

void StationBase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.StationBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StationBase::CopyFrom(const StationBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.StationBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationBase::IsInitialized() const {
  return true;
}

void StationBase::InternalSwap(StationBase* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  player_name_.Swap(&other->player_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StationBase, wings_props_id_)
      + sizeof(StationBase::wings_props_id_)
      - PROTOBUF_FIELD_OFFSET(StationBase, red_packet_ticket_)>(
          reinterpret_cast<char*>(&red_packet_ticket_),
          reinterpret_cast<char*>(&other->red_packet_ticket_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StationBase::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCUserReady::_Internal {
 public:
};

SCUserReady::SCUserReady(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  station_base_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCUserReady)
}
SCUserReady::SCUserReady(const SCUserReady& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      station_base_list_(from.station_base_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:F4BY.SCUserReady)
}

void SCUserReady::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCUserReady_F4BY_2eproto.base);
}

SCUserReady::~SCUserReady() {
  // @@protoc_insertion_point(destructor:F4BY.SCUserReady)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCUserReady::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCUserReady::ArenaDtor(void* object) {
  SCUserReady* _this = reinterpret_cast< SCUserReady* >(object);
  (void)_this;
}
void SCUserReady::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCUserReady::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCUserReady& SCUserReady::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCUserReady_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCUserReady::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCUserReady)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  station_base_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCUserReady::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .F4BY.StationBase station_base_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_station_base_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCUserReady::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCUserReady)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .F4BY.StationBase station_base_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_station_base_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_station_base_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCUserReady)
  return target;
}

size_t SCUserReady::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCUserReady)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.StationBase station_base_list = 1;
  total_size += 1UL * this->_internal_station_base_list_size();
  for (const auto& msg : this->station_base_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCUserReady::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCUserReady)
  GOOGLE_DCHECK_NE(&from, this);
  const SCUserReady* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCUserReady>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCUserReady)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCUserReady)
    MergeFrom(*source);
  }
}

void SCUserReady::MergeFrom(const SCUserReady& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCUserReady)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  station_base_list_.MergeFrom(from.station_base_list_);
}

void SCUserReady::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCUserReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCUserReady::CopyFrom(const SCUserReady& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCUserReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCUserReady::IsInitialized() const {
  return true;
}

void SCUserReady::InternalSwap(SCUserReady* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  station_base_list_.InternalSwap(&other->station_base_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCUserReady::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCNotifyLogin::_Internal {
 public:
  static const ::F4BY::StationBase& station_base_list(const SCNotifyLogin* msg);
};

const ::F4BY::StationBase&
SCNotifyLogin::_Internal::station_base_list(const SCNotifyLogin* msg) {
  return *msg->station_base_list_;
}
SCNotifyLogin::SCNotifyLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCNotifyLogin)
}
SCNotifyLogin::SCNotifyLogin(const SCNotifyLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_station_base_list()) {
    station_base_list_ = new ::F4BY::StationBase(*from.station_base_list_);
  } else {
    station_base_list_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:F4BY.SCNotifyLogin)
}

void SCNotifyLogin::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCNotifyLogin_F4BY_2eproto.base);
  station_base_list_ = nullptr;
}

SCNotifyLogin::~SCNotifyLogin() {
  // @@protoc_insertion_point(destructor:F4BY.SCNotifyLogin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCNotifyLogin::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete station_base_list_;
}

void SCNotifyLogin::ArenaDtor(void* object) {
  SCNotifyLogin* _this = reinterpret_cast< SCNotifyLogin* >(object);
  (void)_this;
}
void SCNotifyLogin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCNotifyLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCNotifyLogin& SCNotifyLogin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCNotifyLogin_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCNotifyLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCNotifyLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && station_base_list_ != nullptr) {
    delete station_base_list_;
  }
  station_base_list_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCNotifyLogin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .F4BY.StationBase station_base_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_station_base_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCNotifyLogin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCNotifyLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .F4BY.StationBase station_base_list = 1;
  if (this->has_station_base_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::station_base_list(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCNotifyLogin)
  return target;
}

size_t SCNotifyLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCNotifyLogin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .F4BY.StationBase station_base_list = 1;
  if (this->has_station_base_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *station_base_list_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCNotifyLogin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCNotifyLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const SCNotifyLogin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCNotifyLogin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCNotifyLogin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCNotifyLogin)
    MergeFrom(*source);
  }
}

void SCNotifyLogin::MergeFrom(const SCNotifyLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCNotifyLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_station_base_list()) {
    _internal_mutable_station_base_list()->::F4BY::StationBase::MergeFrom(from._internal_station_base_list());
  }
}

void SCNotifyLogin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCNotifyLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCNotifyLogin::CopyFrom(const SCNotifyLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCNotifyLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCNotifyLogin::IsInitialized() const {
  return true;
}

void SCNotifyLogin::InternalSwap(SCNotifyLogin* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(station_base_list_, other->station_base_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCNotifyLogin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSNotifyLogout::_Internal {
 public:
};

CSNotifyLogout::CSNotifyLogout(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSNotifyLogout)
}
CSNotifyLogout::CSNotifyLogout(const CSNotifyLogout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:F4BY.CSNotifyLogout)
}

void CSNotifyLogout::SharedCtor() {
}

CSNotifyLogout::~CSNotifyLogout() {
  // @@protoc_insertion_point(destructor:F4BY.CSNotifyLogout)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSNotifyLogout::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSNotifyLogout::ArenaDtor(void* object) {
  CSNotifyLogout* _this = reinterpret_cast< CSNotifyLogout* >(object);
  (void)_this;
}
void CSNotifyLogout::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSNotifyLogout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSNotifyLogout& CSNotifyLogout::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSNotifyLogout_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSNotifyLogout::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSNotifyLogout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNotifyLogout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSNotifyLogout::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSNotifyLogout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSNotifyLogout)
  return target;
}

size_t CSNotifyLogout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSNotifyLogout)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSNotifyLogout::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSNotifyLogout)
  GOOGLE_DCHECK_NE(&from, this);
  const CSNotifyLogout* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSNotifyLogout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSNotifyLogout)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSNotifyLogout)
    MergeFrom(*source);
  }
}

void CSNotifyLogout::MergeFrom(const CSNotifyLogout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSNotifyLogout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSNotifyLogout::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSNotifyLogout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSNotifyLogout::CopyFrom(const CSNotifyLogout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSNotifyLogout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNotifyLogout::IsInitialized() const {
  return true;
}

void CSNotifyLogout::InternalSwap(CSNotifyLogout* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNotifyLogout::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCNotifyLogout::_Internal {
 public:
};

SCNotifyLogout::SCNotifyLogout(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCNotifyLogout)
}
SCNotifyLogout::SCNotifyLogout(const SCNotifyLogout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chair_idx_ = from.chair_idx_;
  // @@protoc_insertion_point(copy_constructor:F4BY.SCNotifyLogout)
}

void SCNotifyLogout::SharedCtor() {
  chair_idx_ = 0;
}

SCNotifyLogout::~SCNotifyLogout() {
  // @@protoc_insertion_point(destructor:F4BY.SCNotifyLogout)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCNotifyLogout::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCNotifyLogout::ArenaDtor(void* object) {
  SCNotifyLogout* _this = reinterpret_cast< SCNotifyLogout* >(object);
  (void)_this;
}
void SCNotifyLogout::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCNotifyLogout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCNotifyLogout& SCNotifyLogout::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCNotifyLogout_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCNotifyLogout::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCNotifyLogout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chair_idx_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCNotifyLogout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCNotifyLogout::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCNotifyLogout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCNotifyLogout)
  return target;
}

size_t SCNotifyLogout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCNotifyLogout)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCNotifyLogout::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCNotifyLogout)
  GOOGLE_DCHECK_NE(&from, this);
  const SCNotifyLogout* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCNotifyLogout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCNotifyLogout)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCNotifyLogout)
    MergeFrom(*source);
  }
}

void SCNotifyLogout::MergeFrom(const SCNotifyLogout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCNotifyLogout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
}

void SCNotifyLogout::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCNotifyLogout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCNotifyLogout::CopyFrom(const SCNotifyLogout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCNotifyLogout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCNotifyLogout::IsInitialized() const {
  return true;
}

void SCNotifyLogout::InternalSwap(SCNotifyLogout* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(chair_idx_, other->chair_idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCNotifyLogout::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSetProbability::_Internal {
 public:
};

CSSetProbability::CSSetProbability(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSSetProbability)
}
CSSetProbability::CSSetProbability(const CSSetProbability& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&add_or_del_, &from.add_or_del_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_use_auto_) -
    reinterpret_cast<char*>(&add_or_del_)) + sizeof(is_use_auto_));
  // @@protoc_insertion_point(copy_constructor:F4BY.CSSetProbability)
}

void CSSetProbability::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&add_or_del_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_use_auto_) -
      reinterpret_cast<char*>(&add_or_del_)) + sizeof(is_use_auto_));
}

CSSetProbability::~CSSetProbability() {
  // @@protoc_insertion_point(destructor:F4BY.CSSetProbability)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSetProbability::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSSetProbability::ArenaDtor(void* object) {
  CSSetProbability* _this = reinterpret_cast< CSSetProbability* >(object);
  (void)_this;
}
void CSSetProbability::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSetProbability::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSetProbability& CSSetProbability::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSetProbability_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSSetProbability::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSSetProbability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&add_or_del_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_use_auto_) -
      reinterpret_cast<char*>(&add_or_del_)) + sizeof(is_use_auto_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSetProbability::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 add_or_del = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          add_or_del_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gun_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gun_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_use_auto = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_use_auto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSetProbability::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSSetProbability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 add_or_del = 1;
  if (this->add_or_del() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_add_or_del(), target);
  }

  // int32 gun_level = 2;
  if (this->gun_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_gun_level(), target);
  }

  // bool is_use_auto = 3;
  if (this->is_use_auto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_use_auto(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSSetProbability)
  return target;
}

size_t CSSetProbability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSSetProbability)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 add_or_del = 1;
  if (this->add_or_del() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_add_or_del());
  }

  // int32 gun_level = 2;
  if (this->gun_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gun_level());
  }

  // bool is_use_auto = 3;
  if (this->is_use_auto() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSetProbability::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSSetProbability)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSetProbability* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSetProbability>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSSetProbability)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSSetProbability)
    MergeFrom(*source);
  }
}

void CSSetProbability::MergeFrom(const CSSetProbability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSSetProbability)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.add_or_del() != 0) {
    _internal_set_add_or_del(from._internal_add_or_del());
  }
  if (from.gun_level() != 0) {
    _internal_set_gun_level(from._internal_gun_level());
  }
  if (from.is_use_auto() != 0) {
    _internal_set_is_use_auto(from._internal_is_use_auto());
  }
}

void CSSetProbability::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSSetProbability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSetProbability::CopyFrom(const CSSetProbability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSSetProbability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSetProbability::IsInitialized() const {
  return true;
}

void CSSetProbability::InternalSwap(CSSetProbability* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSSetProbability, is_use_auto_)
      + sizeof(CSSetProbability::is_use_auto_)
      - PROTOBUF_FIELD_OFFSET(CSSetProbability, add_or_del_)>(
          reinterpret_cast<char*>(&add_or_del_),
          reinterpret_cast<char*>(&other->add_or_del_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSetProbability::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSetProbability::_Internal {
 public:
};

SCSetProbability::SCSetProbability(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCSetProbability)
}
SCSetProbability::SCSetProbability(const SCSetProbability& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArena());
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&extra_data_) -
    reinterpret_cast<char*>(&code_)) + sizeof(extra_data_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCSetProbability)
}

void SCSetProbability::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCSetProbability_F4BY_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&code_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&extra_data_) -
      reinterpret_cast<char*>(&code_)) + sizeof(extra_data_));
}

SCSetProbability::~SCSetProbability() {
  // @@protoc_insertion_point(destructor:F4BY.SCSetProbability)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSetProbability::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SCSetProbability::ArenaDtor(void* object) {
  SCSetProbability* _this = reinterpret_cast< SCSetProbability* >(object);
  (void)_this;
}
void SCSetProbability::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSetProbability::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSetProbability& SCSetProbability::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSetProbability_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCSetProbability::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCSetProbability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extra_data_) -
      reinterpret_cast<char*>(&code_)) + sizeof(extra_data_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSetProbability::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chair_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gun_ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gun_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gun_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          gun_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "F4BY.SCSetProbability.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_unlock = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_unlock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 extra_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          extra_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSetProbability::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCSetProbability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // int32 chair_idx = 2;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_chair_idx(), target);
  }

  // int32 gun_ratio = 3;
  if (this->gun_ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_gun_ratio(), target);
  }

  // int32 gun_level = 4;
  if (this->gun_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_gun_level(), target);
  }

  // string msg = 5;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "F4BY.SCSetProbability.msg");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_msg(), target);
  }

  // bool is_unlock = 6;
  if (this->is_unlock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_unlock(), target);
  }

  // int32 extra_data = 7;
  if (this->extra_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_extra_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCSetProbability)
  return target;
}

size_t SCSetProbability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCSetProbability)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 5;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  // int32 chair_idx = 2;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 gun_ratio = 3;
  if (this->gun_ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gun_ratio());
  }

  // int32 gun_level = 4;
  if (this->gun_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gun_level());
  }

  // bool is_unlock = 6;
  if (this->is_unlock() != 0) {
    total_size += 1 + 1;
  }

  // int32 extra_data = 7;
  if (this->extra_data() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_extra_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSetProbability::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCSetProbability)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSetProbability* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSetProbability>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCSetProbability)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCSetProbability)
    MergeFrom(*source);
  }
}

void SCSetProbability::MergeFrom(const SCSetProbability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCSetProbability)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {
    _internal_set_msg(from._internal_msg());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.gun_ratio() != 0) {
    _internal_set_gun_ratio(from._internal_gun_ratio());
  }
  if (from.gun_level() != 0) {
    _internal_set_gun_level(from._internal_gun_level());
  }
  if (from.is_unlock() != 0) {
    _internal_set_is_unlock(from._internal_is_unlock());
  }
  if (from.extra_data() != 0) {
    _internal_set_extra_data(from._internal_extra_data());
  }
}

void SCSetProbability::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCSetProbability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSetProbability::CopyFrom(const SCSetProbability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCSetProbability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSetProbability::IsInitialized() const {
  return true;
}

void SCSetProbability::InternalSwap(SCSetProbability* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCSetProbability, extra_data_)
      + sizeof(SCSetProbability::extra_data_)
      - PROTOBUF_FIELD_OFFSET(SCSetProbability, code_)>(
          reinterpret_cast<char*>(&code_),
          reinterpret_cast<char*>(&other->code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSetProbability::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSetWings::_Internal {
 public:
};

CSSetWings::CSSetWings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSSetWings)
}
CSSetWings::CSSetWings(const CSSetWings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  wings_prop_id_ = from.wings_prop_id_;
  // @@protoc_insertion_point(copy_constructor:F4BY.CSSetWings)
}

void CSSetWings::SharedCtor() {
  wings_prop_id_ = 0;
}

CSSetWings::~CSSetWings() {
  // @@protoc_insertion_point(destructor:F4BY.CSSetWings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSetWings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSSetWings::ArenaDtor(void* object) {
  CSSetWings* _this = reinterpret_cast< CSSetWings* >(object);
  (void)_this;
}
void CSSetWings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSetWings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSetWings& CSSetWings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSetWings_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSSetWings::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSSetWings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wings_prop_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSetWings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 wings_prop_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          wings_prop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSetWings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSSetWings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 wings_prop_id = 1;
  if (this->wings_prop_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_wings_prop_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSSetWings)
  return target;
}

size_t CSSetWings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSSetWings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 wings_prop_id = 1;
  if (this->wings_prop_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wings_prop_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSetWings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSSetWings)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSetWings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSetWings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSSetWings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSSetWings)
    MergeFrom(*source);
  }
}

void CSSetWings::MergeFrom(const CSSetWings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSSetWings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.wings_prop_id() != 0) {
    _internal_set_wings_prop_id(from._internal_wings_prop_id());
  }
}

void CSSetWings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSSetWings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSetWings::CopyFrom(const CSSetWings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSSetWings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSetWings::IsInitialized() const {
  return true;
}

void CSSetWings::InternalSwap(CSSetWings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(wings_prop_id_, other->wings_prop_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSetWings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSetWings::_Internal {
 public:
};

SCSetWings::SCSetWings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCSetWings)
}
SCSetWings::SCSetWings(const SCSetWings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCSetWings)
}

void SCSetWings::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(code_));
}

SCSetWings::~SCSetWings() {
  // @@protoc_insertion_point(destructor:F4BY.SCSetWings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSetWings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCSetWings::ArenaDtor(void* object) {
  SCSetWings* _this = reinterpret_cast< SCSetWings* >(object);
  (void)_this;
}
void SCSetWings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSetWings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSetWings& SCSetWings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSetWings_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCSetWings::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCSetWings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSetWings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 wings_prop_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          wings_prop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSetWings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCSetWings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 wings_prop_id = 2;
  if (this->wings_prop_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_wings_prop_id(), target);
  }

  // int32 code = 3;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCSetWings)
  return target;
}

size_t SCSetWings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCSetWings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 wings_prop_id = 2;
  if (this->wings_prop_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wings_prop_id());
  }

  // int32 code = 3;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSetWings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCSetWings)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSetWings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSetWings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCSetWings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCSetWings)
    MergeFrom(*source);
  }
}

void SCSetWings::MergeFrom(const SCSetWings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCSetWings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.wings_prop_id() != 0) {
    _internal_set_wings_prop_id(from._internal_wings_prop_id());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void SCSetWings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCSetWings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSetWings::CopyFrom(const SCSetWings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCSetWings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSetWings::IsInitialized() const {
  return true;
}

void SCSetWings::InternalSwap(SCSetWings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCSetWings, code_)
      + sizeof(SCSetWings::code_)
      - PROTOBUF_FIELD_OFFSET(SCSetWings, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSetWings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSUserShoot::_Internal {
 public:
};

CSUserShoot::CSUserShoot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bullet_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSUserShoot)
}
CSUserShoot::CSUserShoot(const CSUserShoot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bullet_id_(from.bullet_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&angle_, &from.angle_,
    static_cast<size_t>(reinterpret_cast<char*>(&extra_mul_) -
    reinterpret_cast<char*>(&angle_)) + sizeof(extra_mul_));
  // @@protoc_insertion_point(copy_constructor:F4BY.CSUserShoot)
}

void CSUserShoot::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&extra_mul_) -
      reinterpret_cast<char*>(&angle_)) + sizeof(extra_mul_));
}

CSUserShoot::~CSUserShoot() {
  // @@protoc_insertion_point(destructor:F4BY.CSUserShoot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSUserShoot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSUserShoot::ArenaDtor(void* object) {
  CSUserShoot* _this = reinterpret_cast< CSUserShoot* >(object);
  (void)_this;
}
void CSUserShoot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSUserShoot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSUserShoot& CSUserShoot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSUserShoot_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSUserShoot::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSUserShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bullet_id_.Clear();
  ::memset(&angle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extra_mul_) -
      reinterpret_cast<char*>(&angle_)) + sizeof(extra_mul_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSUserShoot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 angle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 bullet_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bullet_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_bullet_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bullet_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bullet_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_offset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chair_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 extra_mul = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          extra_mul_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSUserShoot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSUserShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 angle = 1;
  if (this->angle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_angle(), target);
  }

  // repeated int32 bullet_id = 2;
  {
    int byte_size = _bullet_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_bullet_id(), byte_size, target);
    }
  }

  // int32 ratio = 3;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ratio(), target);
  }

  // int32 bullet_type = 4;
  if (this->bullet_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_bullet_type(), target);
  }

  // bool is_offset = 5;
  if (this->is_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_offset(), target);
  }

  // int32 chair_id = 6;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_chair_id(), target);
  }

  // int32 extra_mul = 7;
  if (this->extra_mul() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_extra_mul(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSUserShoot)
  return target;
}

size_t CSUserShoot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSUserShoot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 bullet_id = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bullet_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bullet_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 angle = 1;
  if (this->angle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_angle());
  }

  // int32 ratio = 3;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  // int32 bullet_type = 4;
  if (this->bullet_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bullet_type());
  }

  // bool is_offset = 5;
  if (this->is_offset() != 0) {
    total_size += 1 + 1;
  }

  // int32 chair_id = 6;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 extra_mul = 7;
  if (this->extra_mul() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_extra_mul());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSUserShoot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSUserShoot)
  GOOGLE_DCHECK_NE(&from, this);
  const CSUserShoot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSUserShoot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSUserShoot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSUserShoot)
    MergeFrom(*source);
  }
}

void CSUserShoot::MergeFrom(const CSUserShoot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSUserShoot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bullet_id_.MergeFrom(from.bullet_id_);
  if (from.angle() != 0) {
    _internal_set_angle(from._internal_angle());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
  if (from.bullet_type() != 0) {
    _internal_set_bullet_type(from._internal_bullet_type());
  }
  if (from.is_offset() != 0) {
    _internal_set_is_offset(from._internal_is_offset());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.extra_mul() != 0) {
    _internal_set_extra_mul(from._internal_extra_mul());
  }
}

void CSUserShoot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSUserShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSUserShoot::CopyFrom(const CSUserShoot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSUserShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSUserShoot::IsInitialized() const {
  return true;
}

void CSUserShoot::InternalSwap(CSUserShoot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bullet_id_.InternalSwap(&other->bullet_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSUserShoot, extra_mul_)
      + sizeof(CSUserShoot::extra_mul_)
      - PROTOBUF_FIELD_OFFSET(CSUserShoot, angle_)>(
          reinterpret_cast<char*>(&angle_),
          reinterpret_cast<char*>(&other->angle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSUserShoot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCUserShoot::_Internal {
 public:
};

SCUserShoot::SCUserShoot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCUserShoot)
}
SCUserShoot::SCUserShoot(const SCUserShoot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&bullet_offset_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(bullet_offset_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCUserShoot)
}

void SCUserShoot::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bullet_offset_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(bullet_offset_));
}

SCUserShoot::~SCUserShoot() {
  // @@protoc_insertion_point(destructor:F4BY.SCUserShoot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCUserShoot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCUserShoot::ArenaDtor(void* object) {
  SCUserShoot* _this = reinterpret_cast< SCUserShoot* >(object);
  (void)_this;
}
void SCUserShoot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCUserShoot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCUserShoot& SCUserShoot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCUserShoot_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCUserShoot::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCUserShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bullet_offset_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(bullet_offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCUserShoot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bullet_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bullet_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bullet_offset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          bullet_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCUserShoot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCUserShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 angle = 2;
  if (this->angle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_angle(), target);
  }

  // int32 score = 3;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_score(), target);
  }

  // int32 bullet_type = 4;
  if (this->bullet_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_bullet_type(), target);
  }

  // bool bullet_offset = 5;
  if (this->bullet_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_bullet_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCUserShoot)
  return target;
}

size_t SCUserShoot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCUserShoot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 angle = 2;
  if (this->angle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_angle());
  }

  // int32 score = 3;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  // int32 bullet_type = 4;
  if (this->bullet_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bullet_type());
  }

  // bool bullet_offset = 5;
  if (this->bullet_offset() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCUserShoot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCUserShoot)
  GOOGLE_DCHECK_NE(&from, this);
  const SCUserShoot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCUserShoot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCUserShoot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCUserShoot)
    MergeFrom(*source);
  }
}

void SCUserShoot::MergeFrom(const SCUserShoot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCUserShoot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.angle() != 0) {
    _internal_set_angle(from._internal_angle());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.bullet_type() != 0) {
    _internal_set_bullet_type(from._internal_bullet_type());
  }
  if (from.bullet_offset() != 0) {
    _internal_set_bullet_offset(from._internal_bullet_offset());
  }
}

void SCUserShoot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCUserShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCUserShoot::CopyFrom(const SCUserShoot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCUserShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCUserShoot::IsInitialized() const {
  return true;
}

void SCUserShoot::InternalSwap(SCUserShoot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCUserShoot, bullet_offset_)
      + sizeof(SCUserShoot::bullet_offset_)
      - PROTOBUF_FIELD_OFFSET(SCUserShoot, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCUserShoot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSHitFish::_Internal {
 public:
};

CSHitFish::CSHitFish(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  screen_fishes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSHitFish)
}
CSHitFish::CSHitFish(const CSHitFish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      screen_fishes_(from.screen_fishes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fish_uid_, &from.fish_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ratio_) -
    reinterpret_cast<char*>(&fish_uid_)) + sizeof(ratio_));
  // @@protoc_insertion_point(copy_constructor:F4BY.CSHitFish)
}

void CSHitFish::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fish_uid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ratio_) -
      reinterpret_cast<char*>(&fish_uid_)) + sizeof(ratio_));
}

CSHitFish::~CSHitFish() {
  // @@protoc_insertion_point(destructor:F4BY.CSHitFish)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSHitFish::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSHitFish::ArenaDtor(void* object) {
  CSHitFish* _this = reinterpret_cast< CSHitFish* >(object);
  (void)_this;
}
void CSHitFish::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSHitFish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSHitFish& CSHitFish::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSHitFish_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSHitFish::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSHitFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  screen_fishes_.Clear();
  ::memset(&fish_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ratio_) -
      reinterpret_cast<char*>(&fish_uid_)) + sizeof(ratio_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSHitFish::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 fish_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fish_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bullet_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bullet_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 screen_fishes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_screen_fishes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_screen_fishes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chair_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSHitFish::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSHitFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fish_uid = 1;
  if (this->fish_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_fish_uid(), target);
  }

  // int32 bullet_id = 2;
  if (this->bullet_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bullet_id(), target);
  }

  // repeated int32 screen_fishes = 3;
  {
    int byte_size = _screen_fishes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_screen_fishes(), byte_size, target);
    }
  }

  // int32 chair_id = 4;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_chair_id(), target);
  }

  // int32 ratio = 5;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSHitFish)
  return target;
}

size_t CSHitFish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSHitFish)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 screen_fishes = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->screen_fishes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _screen_fishes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 fish_uid = 1;
  if (this->fish_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_uid());
  }

  // int32 bullet_id = 2;
  if (this->bullet_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bullet_id());
  }

  // int32 chair_id = 4;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 ratio = 5;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSHitFish::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSHitFish)
  GOOGLE_DCHECK_NE(&from, this);
  const CSHitFish* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSHitFish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSHitFish)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSHitFish)
    MergeFrom(*source);
  }
}

void CSHitFish::MergeFrom(const CSHitFish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSHitFish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  screen_fishes_.MergeFrom(from.screen_fishes_);
  if (from.fish_uid() != 0) {
    _internal_set_fish_uid(from._internal_fish_uid());
  }
  if (from.bullet_id() != 0) {
    _internal_set_bullet_id(from._internal_bullet_id());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
}

void CSHitFish::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSHitFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSHitFish::CopyFrom(const CSHitFish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSHitFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSHitFish::IsInitialized() const {
  return true;
}

void CSHitFish::InternalSwap(CSHitFish* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  screen_fishes_.InternalSwap(&other->screen_fishes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSHitFish, ratio_)
      + sizeof(CSHitFish::ratio_)
      - PROTOBUF_FIELD_OFFSET(CSHitFish, fish_uid_)>(
          reinterpret_cast<char*>(&fish_uid_),
          reinterpret_cast<char*>(&other->fish_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSHitFish::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MultiInfo::_Internal {
 public:
};

MultiInfo::MultiInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.MultiInfo)
}
MultiInfo::MultiInfo(const MultiInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bt_type_, &from.bt_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&bt_base_) -
    reinterpret_cast<char*>(&bt_type_)) + sizeof(bt_base_));
  // @@protoc_insertion_point(copy_constructor:F4BY.MultiInfo)
}

void MultiInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bt_type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bt_base_) -
      reinterpret_cast<char*>(&bt_type_)) + sizeof(bt_base_));
}

MultiInfo::~MultiInfo() {
  // @@protoc_insertion_point(destructor:F4BY.MultiInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultiInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MultiInfo::ArenaDtor(void* object) {
  MultiInfo* _this = reinterpret_cast< MultiInfo* >(object);
  (void)_this;
}
void MultiInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiInfo& MultiInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiInfo_F4BY_2eproto.base);
  return *internal_default_instance();
}


void MultiInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.MultiInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bt_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bt_base_) -
      reinterpret_cast<char*>(&bt_type_)) + sizeof(bt_base_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 bt_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bt_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bt_multi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bt_multi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bt_base = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bt_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.MultiInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bt_type = 1;
  if (this->bt_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bt_type(), target);
  }

  // int32 bt_multi = 2;
  if (this->bt_multi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bt_multi(), target);
  }

  // int32 bt_base = 3;
  if (this->bt_base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_bt_base(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.MultiInfo)
  return target;
}

size_t MultiInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.MultiInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 bt_type = 1;
  if (this->bt_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bt_type());
  }

  // int32 bt_multi = 2;
  if (this->bt_multi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bt_multi());
  }

  // int32 bt_base = 3;
  if (this->bt_base() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bt_base());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.MultiInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.MultiInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.MultiInfo)
    MergeFrom(*source);
  }
}

void MultiInfo::MergeFrom(const MultiInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.MultiInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bt_type() != 0) {
    _internal_set_bt_type(from._internal_bt_type());
  }
  if (from.bt_multi() != 0) {
    _internal_set_bt_multi(from._internal_bt_multi());
  }
  if (from.bt_base() != 0) {
    _internal_set_bt_base(from._internal_bt_base());
  }
}

void MultiInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.MultiInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiInfo::CopyFrom(const MultiInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.MultiInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiInfo::IsInitialized() const {
  return true;
}

void MultiInfo::InternalSwap(MultiInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MultiInfo, bt_base_)
      + sizeof(MultiInfo::bt_base_)
      - PROTOBUF_FIELD_OFFSET(MultiInfo, bt_type_)>(
          reinterpret_cast<char*>(&bt_type_),
          reinterpret_cast<char*>(&other->bt_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCHitFish::_Internal {
 public:
};

SCHitFish::SCHitFish(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  multi_list_(arena),
  drop_props_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCHitFish)
}
SCHitFish::SCHitFish(const SCHitFish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      multi_list_(from.multi_list_),
      drop_props_(from.drop_props_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&origin_uid_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(origin_uid_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCHitFish)
}

void SCHitFish::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCHitFish_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&origin_uid_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(origin_uid_));
}

SCHitFish::~SCHitFish() {
  // @@protoc_insertion_point(destructor:F4BY.SCHitFish)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCHitFish::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCHitFish::ArenaDtor(void* object) {
  SCHitFish* _this = reinterpret_cast< SCHitFish* >(object);
  (void)_this;
}
void SCHitFish::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCHitFish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCHitFish& SCHitFish::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCHitFish_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCHitFish::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCHitFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  multi_list_.Clear();
  drop_props_.Clear();
  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&origin_uid_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(origin_uid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCHitFish::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fish_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 earn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          earn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 user_score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          user_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          fish_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 multiple = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hit_bullet_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          hit_bullet_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 magic_cube_multi = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          magic_cube_multi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .F4BY.MultiInfo multi_list = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_multi_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 origin_uid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          origin_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .F4BY.Object drop_props = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drop_props(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCHitFish::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCHitFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 fish_uid = 2;
  if (this->fish_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fish_uid(), target);
  }

  // int32 earn = 3;
  if (this->earn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_earn(), target);
  }

  // int64 user_score = 4;
  if (this->user_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_user_score(), target);
  }

  // int32 fish_value = 5;
  if (this->fish_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_fish_value(), target);
  }

  // int32 multiple = 6;
  if (this->multiple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_multiple(), target);
  }

  // int32 hit_bullet_type = 7;
  if (this->hit_bullet_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_hit_bullet_type(), target);
  }

  // int32 magic_cube_multi = 8;
  if (this->magic_cube_multi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_magic_cube_multi(), target);
  }

  // repeated .F4BY.MultiInfo multi_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_multi_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_multi_list(i), target, stream);
  }

  // int32 origin_uid = 10;
  if (this->origin_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_origin_uid(), target);
  }

  // repeated .F4BY.Object drop_props = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drop_props_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_drop_props(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCHitFish)
  return target;
}

size_t SCHitFish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCHitFish)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.MultiInfo multi_list = 9;
  total_size += 1UL * this->_internal_multi_list_size();
  for (const auto& msg : this->multi_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .F4BY.Object drop_props = 11;
  total_size += 1UL * this->_internal_drop_props_size();
  for (const auto& msg : this->drop_props_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 fish_uid = 2;
  if (this->fish_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_uid());
  }

  // int64 user_score = 4;
  if (this->user_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_score());
  }

  // int32 earn = 3;
  if (this->earn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_earn());
  }

  // int32 fish_value = 5;
  if (this->fish_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_value());
  }

  // int32 multiple = 6;
  if (this->multiple() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_multiple());
  }

  // int32 hit_bullet_type = 7;
  if (this->hit_bullet_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hit_bullet_type());
  }

  // int32 magic_cube_multi = 8;
  if (this->magic_cube_multi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_magic_cube_multi());
  }

  // int32 origin_uid = 10;
  if (this->origin_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_origin_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCHitFish::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCHitFish)
  GOOGLE_DCHECK_NE(&from, this);
  const SCHitFish* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCHitFish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCHitFish)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCHitFish)
    MergeFrom(*source);
  }
}

void SCHitFish::MergeFrom(const SCHitFish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCHitFish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  multi_list_.MergeFrom(from.multi_list_);
  drop_props_.MergeFrom(from.drop_props_);
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.fish_uid() != 0) {
    _internal_set_fish_uid(from._internal_fish_uid());
  }
  if (from.user_score() != 0) {
    _internal_set_user_score(from._internal_user_score());
  }
  if (from.earn() != 0) {
    _internal_set_earn(from._internal_earn());
  }
  if (from.fish_value() != 0) {
    _internal_set_fish_value(from._internal_fish_value());
  }
  if (from.multiple() != 0) {
    _internal_set_multiple(from._internal_multiple());
  }
  if (from.hit_bullet_type() != 0) {
    _internal_set_hit_bullet_type(from._internal_hit_bullet_type());
  }
  if (from.magic_cube_multi() != 0) {
    _internal_set_magic_cube_multi(from._internal_magic_cube_multi());
  }
  if (from.origin_uid() != 0) {
    _internal_set_origin_uid(from._internal_origin_uid());
  }
}

void SCHitFish::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCHitFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCHitFish::CopyFrom(const SCHitFish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCHitFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCHitFish::IsInitialized() const {
  return true;
}

void SCHitFish::InternalSwap(SCHitFish* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  multi_list_.InternalSwap(&other->multi_list_);
  drop_props_.InternalSwap(&other->drop_props_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCHitFish, origin_uid_)
      + sizeof(SCHitFish::origin_uid_)
      - PROTOBUF_FIELD_OFFSET(SCHitFish, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCHitFish::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCHitSpecialFish::_Internal {
 public:
  static const ::F4BY::WheelObject& wheel(const SCHitSpecialFish* msg);
};

const ::F4BY::WheelObject&
SCHitSpecialFish::_Internal::wheel(const SCHitSpecialFish* msg) {
  return *msg->wheel_;
}
SCHitSpecialFish::SCHitSpecialFish(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  shock_fishes_(arena),
  drop_props_(arena),
  multi_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCHitSpecialFish)
}
SCHitSpecialFish::SCHitSpecialFish(const SCHitSpecialFish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shock_fishes_(from.shock_fishes_),
      drop_props_(from.drop_props_),
      multi_list_(from.multi_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_wheel()) {
    wheel_ = new ::F4BY::WheelObject(*from.wheel_);
  } else {
    wheel_ = nullptr;
  }
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&dragon_score_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(dragon_score_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCHitSpecialFish)
}

void SCHitSpecialFish::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCHitSpecialFish_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&wheel_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&dragon_score_) -
      reinterpret_cast<char*>(&wheel_)) + sizeof(dragon_score_));
}

SCHitSpecialFish::~SCHitSpecialFish() {
  // @@protoc_insertion_point(destructor:F4BY.SCHitSpecialFish)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCHitSpecialFish::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete wheel_;
}

void SCHitSpecialFish::ArenaDtor(void* object) {
  SCHitSpecialFish* _this = reinterpret_cast< SCHitSpecialFish* >(object);
  (void)_this;
}
void SCHitSpecialFish::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCHitSpecialFish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCHitSpecialFish& SCHitSpecialFish::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCHitSpecialFish_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCHitSpecialFish::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCHitSpecialFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shock_fishes_.Clear();
  drop_props_.Clear();
  multi_list_.Clear();
  if (GetArena() == nullptr && wheel_ != nullptr) {
    delete wheel_;
  }
  wheel_ = nullptr;
  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dragon_score_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(dragon_score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCHitSpecialFish::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fish_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 earn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          earn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          fish_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 user_score = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          user_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool death = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          death_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 grow_stage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          grow_stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 multiple = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .F4BY.Object shock_fishes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shock_fishes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .F4BY.Object drop_props = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drop_props(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // .F4BY.WheelObject wheel = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_wheel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hit_bullet_type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          hit_bullet_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 prop_no = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          prop_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 magic_cube_multi = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          magic_cube_multi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .F4BY.MultiInfo multi_list = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_multi_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 origin_uid = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          origin_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dragon_score = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          dragon_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCHitSpecialFish::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCHitSpecialFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 fish_uid = 2;
  if (this->fish_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fish_uid(), target);
  }

  // int32 earn = 3;
  if (this->earn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_earn(), target);
  }

  // int32 fish_value = 4;
  if (this->fish_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_fish_value(), target);
  }

  // int64 user_score = 5;
  if (this->user_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_user_score(), target);
  }

  // bool death = 6;
  if (this->death() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_death(), target);
  }

  // int32 grow_stage = 7;
  if (this->grow_stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_grow_stage(), target);
  }

  // int32 multiple = 8;
  if (this->multiple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_multiple(), target);
  }

  // repeated .F4BY.Object shock_fishes = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shock_fishes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_shock_fishes(i), target, stream);
  }

  // repeated .F4BY.Object drop_props = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drop_props_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_drop_props(i), target, stream);
  }

  // .F4BY.WheelObject wheel = 11;
  if (this->has_wheel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::wheel(this), target, stream);
  }

  // int32 hit_bullet_type = 12;
  if (this->hit_bullet_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_hit_bullet_type(), target);
  }

  // int32 prop_no = 13;
  if (this->prop_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_prop_no(), target);
  }

  // int32 magic_cube_multi = 14;
  if (this->magic_cube_multi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_magic_cube_multi(), target);
  }

  // repeated .F4BY.MultiInfo multi_list = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_multi_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_multi_list(i), target, stream);
  }

  // int32 origin_uid = 16;
  if (this->origin_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_origin_uid(), target);
  }

  // int32 dragon_score = 17;
  if (this->dragon_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_dragon_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCHitSpecialFish)
  return target;
}

size_t SCHitSpecialFish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCHitSpecialFish)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.Object shock_fishes = 9;
  total_size += 1UL * this->_internal_shock_fishes_size();
  for (const auto& msg : this->shock_fishes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .F4BY.Object drop_props = 10;
  total_size += 1UL * this->_internal_drop_props_size();
  for (const auto& msg : this->drop_props_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .F4BY.MultiInfo multi_list = 15;
  total_size += 1UL * this->_internal_multi_list_size();
  for (const auto& msg : this->multi_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .F4BY.WheelObject wheel = 11;
  if (this->has_wheel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *wheel_);
  }

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 fish_uid = 2;
  if (this->fish_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_uid());
  }

  // int32 earn = 3;
  if (this->earn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_earn());
  }

  // int32 fish_value = 4;
  if (this->fish_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_value());
  }

  // int64 user_score = 5;
  if (this->user_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_score());
  }

  // bool death = 6;
  if (this->death() != 0) {
    total_size += 1 + 1;
  }

  // int32 grow_stage = 7;
  if (this->grow_stage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_grow_stage());
  }

  // int32 multiple = 8;
  if (this->multiple() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_multiple());
  }

  // int32 hit_bullet_type = 12;
  if (this->hit_bullet_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hit_bullet_type());
  }

  // int32 prop_no = 13;
  if (this->prop_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prop_no());
  }

  // int32 magic_cube_multi = 14;
  if (this->magic_cube_multi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_magic_cube_multi());
  }

  // int32 origin_uid = 16;
  if (this->origin_uid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_origin_uid());
  }

  // int32 dragon_score = 17;
  if (this->dragon_score() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dragon_score());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCHitSpecialFish::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCHitSpecialFish)
  GOOGLE_DCHECK_NE(&from, this);
  const SCHitSpecialFish* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCHitSpecialFish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCHitSpecialFish)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCHitSpecialFish)
    MergeFrom(*source);
  }
}

void SCHitSpecialFish::MergeFrom(const SCHitSpecialFish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCHitSpecialFish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shock_fishes_.MergeFrom(from.shock_fishes_);
  drop_props_.MergeFrom(from.drop_props_);
  multi_list_.MergeFrom(from.multi_list_);
  if (from.has_wheel()) {
    _internal_mutable_wheel()->::F4BY::WheelObject::MergeFrom(from._internal_wheel());
  }
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.fish_uid() != 0) {
    _internal_set_fish_uid(from._internal_fish_uid());
  }
  if (from.earn() != 0) {
    _internal_set_earn(from._internal_earn());
  }
  if (from.fish_value() != 0) {
    _internal_set_fish_value(from._internal_fish_value());
  }
  if (from.user_score() != 0) {
    _internal_set_user_score(from._internal_user_score());
  }
  if (from.death() != 0) {
    _internal_set_death(from._internal_death());
  }
  if (from.grow_stage() != 0) {
    _internal_set_grow_stage(from._internal_grow_stage());
  }
  if (from.multiple() != 0) {
    _internal_set_multiple(from._internal_multiple());
  }
  if (from.hit_bullet_type() != 0) {
    _internal_set_hit_bullet_type(from._internal_hit_bullet_type());
  }
  if (from.prop_no() != 0) {
    _internal_set_prop_no(from._internal_prop_no());
  }
  if (from.magic_cube_multi() != 0) {
    _internal_set_magic_cube_multi(from._internal_magic_cube_multi());
  }
  if (from.origin_uid() != 0) {
    _internal_set_origin_uid(from._internal_origin_uid());
  }
  if (from.dragon_score() != 0) {
    _internal_set_dragon_score(from._internal_dragon_score());
  }
}

void SCHitSpecialFish::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCHitSpecialFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCHitSpecialFish::CopyFrom(const SCHitSpecialFish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCHitSpecialFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCHitSpecialFish::IsInitialized() const {
  return true;
}

void SCHitSpecialFish::InternalSwap(SCHitSpecialFish* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  shock_fishes_.InternalSwap(&other->shock_fishes_);
  drop_props_.InternalSwap(&other->drop_props_);
  multi_list_.InternalSwap(&other->multi_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCHitSpecialFish, dragon_score_)
      + sizeof(SCHitSpecialFish::dragon_score_)
      - PROTOBUF_FIELD_OFFSET(SCHitSpecialFish, wheel_)>(
          reinterpret_cast<char*>(&wheel_),
          reinterpret_cast<char*>(&other->wheel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCHitSpecialFish::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SyncPropInfoX::_Internal {
 public:
  static const ::F4BY::Object& prop(const SyncPropInfoX* msg);
};

const ::F4BY::Object&
SyncPropInfoX::_Internal::prop(const SyncPropInfoX* msg) {
  return *msg->prop_;
}
SyncPropInfoX::SyncPropInfoX(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SyncPropInfoX)
}
SyncPropInfoX::SyncPropInfoX(const SyncPropInfoX& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_prop()) {
    prop_ = new ::F4BY::Object(*from.prop_);
  } else {
    prop_ = nullptr;
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&x_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SyncPropInfoX)
}

void SyncPropInfoX::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SyncPropInfoX_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&prop_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&prop_)) + sizeof(status_));
}

SyncPropInfoX::~SyncPropInfoX() {
  // @@protoc_insertion_point(destructor:F4BY.SyncPropInfoX)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SyncPropInfoX::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete prop_;
}

void SyncPropInfoX::ArenaDtor(void* object) {
  SyncPropInfoX* _this = reinterpret_cast< SyncPropInfoX* >(object);
  (void)_this;
}
void SyncPropInfoX::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncPropInfoX::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncPropInfoX& SyncPropInfoX::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncPropInfoX_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SyncPropInfoX::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SyncPropInfoX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && prop_ != nullptr) {
    delete prop_;
  }
  prop_ = nullptr;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&x_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncPropInfoX::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .F4BY.Object prop = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_prop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float angle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncPropInfoX::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SyncPropInfoX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .F4BY.Object prop = 1;
  if (this->has_prop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::prop(this), target, stream);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float angle = 4;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_angle(), target);
  }

  // int32 status = 5;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SyncPropInfoX)
  return target;
}

size_t SyncPropInfoX::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SyncPropInfoX)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .F4BY.Object prop = 1;
  if (this->has_prop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prop_);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float angle = 4;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 status = 5;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncPropInfoX::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SyncPropInfoX)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncPropInfoX* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncPropInfoX>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SyncPropInfoX)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SyncPropInfoX)
    MergeFrom(*source);
  }
}

void SyncPropInfoX::MergeFrom(const SyncPropInfoX& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SyncPropInfoX)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_prop()) {
    _internal_mutable_prop()->::F4BY::Object::MergeFrom(from._internal_prop());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.angle() <= 0 && from.angle() >= 0)) {
    _internal_set_angle(from._internal_angle());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void SyncPropInfoX::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SyncPropInfoX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncPropInfoX::CopyFrom(const SyncPropInfoX& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SyncPropInfoX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncPropInfoX::IsInitialized() const {
  return true;
}

void SyncPropInfoX::InternalSwap(SyncPropInfoX* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncPropInfoX, status_)
      + sizeof(SyncPropInfoX::status_)
      - PROTOBUF_FIELD_OFFSET(SyncPropInfoX, prop_)>(
          reinterpret_cast<char*>(&prop_),
          reinterpret_cast<char*>(&other->prop_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncPropInfoX::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UserSyncPropInfo::_Internal {
 public:
};

UserSyncPropInfo::UserSyncPropInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  props_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.UserSyncPropInfo)
}
UserSyncPropInfo::UserSyncPropInfo(const UserSyncPropInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      props_(from.props_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chair_idx_ = from.chair_idx_;
  // @@protoc_insertion_point(copy_constructor:F4BY.UserSyncPropInfo)
}

void UserSyncPropInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserSyncPropInfo_F4BY_2eproto.base);
  chair_idx_ = 0;
}

UserSyncPropInfo::~UserSyncPropInfo() {
  // @@protoc_insertion_point(destructor:F4BY.UserSyncPropInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserSyncPropInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserSyncPropInfo::ArenaDtor(void* object) {
  UserSyncPropInfo* _this = reinterpret_cast< UserSyncPropInfo* >(object);
  (void)_this;
}
void UserSyncPropInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserSyncPropInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserSyncPropInfo& UserSyncPropInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserSyncPropInfo_F4BY_2eproto.base);
  return *internal_default_instance();
}


void UserSyncPropInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.UserSyncPropInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  props_.Clear();
  chair_idx_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserSyncPropInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .F4BY.SyncPropInfoX props = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_props(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserSyncPropInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.UserSyncPropInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // repeated .F4BY.SyncPropInfoX props = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_props_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_props(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.UserSyncPropInfo)
  return target;
}

size_t UserSyncPropInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.UserSyncPropInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.SyncPropInfoX props = 2;
  total_size += 1UL * this->_internal_props_size();
  for (const auto& msg : this->props_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserSyncPropInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.UserSyncPropInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserSyncPropInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserSyncPropInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.UserSyncPropInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.UserSyncPropInfo)
    MergeFrom(*source);
  }
}

void UserSyncPropInfo::MergeFrom(const UserSyncPropInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.UserSyncPropInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  props_.MergeFrom(from.props_);
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
}

void UserSyncPropInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.UserSyncPropInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSyncPropInfo::CopyFrom(const UserSyncPropInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.UserSyncPropInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSyncPropInfo::IsInitialized() const {
  return true;
}

void UserSyncPropInfo::InternalSwap(UserSyncPropInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  props_.InternalSwap(&other->props_);
  swap(chair_idx_, other->chair_idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserSyncPropInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSyncPropInfo::_Internal {
 public:
  static const ::F4BY::SyncPropInfoX& info(const CSSyncPropInfo* msg);
};

const ::F4BY::SyncPropInfoX&
CSSyncPropInfo::_Internal::info(const CSSyncPropInfo* msg) {
  return *msg->info_;
}
CSSyncPropInfo::CSSyncPropInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSSyncPropInfo)
}
CSSyncPropInfo::CSSyncPropInfo(const CSSyncPropInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::F4BY::SyncPropInfoX(*from.info_);
  } else {
    info_ = nullptr;
  }
  chair_idx_ = from.chair_idx_;
  // @@protoc_insertion_point(copy_constructor:F4BY.CSSyncPropInfo)
}

void CSSyncPropInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSSyncPropInfo_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chair_idx_) -
      reinterpret_cast<char*>(&info_)) + sizeof(chair_idx_));
}

CSSyncPropInfo::~CSSyncPropInfo() {
  // @@protoc_insertion_point(destructor:F4BY.CSSyncPropInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSyncPropInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void CSSyncPropInfo::ArenaDtor(void* object) {
  CSSyncPropInfo* _this = reinterpret_cast< CSSyncPropInfo* >(object);
  (void)_this;
}
void CSSyncPropInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSyncPropInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSyncPropInfo& CSSyncPropInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSyncPropInfo_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSSyncPropInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSSyncPropInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  chair_idx_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSyncPropInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .F4BY.SyncPropInfoX info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chair_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSyncPropInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSSyncPropInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .F4BY.SyncPropInfoX info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  // int32 chair_idx = 2;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_chair_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSSyncPropInfo)
  return target;
}

size_t CSSyncPropInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSSyncPropInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .F4BY.SyncPropInfoX info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  // int32 chair_idx = 2;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSyncPropInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSSyncPropInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSyncPropInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSyncPropInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSSyncPropInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSSyncPropInfo)
    MergeFrom(*source);
  }
}

void CSSyncPropInfo::MergeFrom(const CSSyncPropInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSSyncPropInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::F4BY::SyncPropInfoX::MergeFrom(from._internal_info());
  }
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
}

void CSSyncPropInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSSyncPropInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSyncPropInfo::CopyFrom(const CSSyncPropInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSSyncPropInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSyncPropInfo::IsInitialized() const {
  return true;
}

void CSSyncPropInfo::InternalSwap(CSSyncPropInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSSyncPropInfo, chair_idx_)
      + sizeof(CSSyncPropInfo::chair_idx_)
      - PROTOBUF_FIELD_OFFSET(CSSyncPropInfo, info_)>(
          reinterpret_cast<char*>(&info_),
          reinterpret_cast<char*>(&other->info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSyncPropInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSyncPropInfo::_Internal {
 public:
};

SCSyncPropInfo::SCSyncPropInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  users_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCSyncPropInfo)
}
SCSyncPropInfo::SCSyncPropInfo(const SCSyncPropInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      users_(from.users_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:F4BY.SCSyncPropInfo)
}

void SCSyncPropInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCSyncPropInfo_F4BY_2eproto.base);
}

SCSyncPropInfo::~SCSyncPropInfo() {
  // @@protoc_insertion_point(destructor:F4BY.SCSyncPropInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSyncPropInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCSyncPropInfo::ArenaDtor(void* object) {
  SCSyncPropInfo* _this = reinterpret_cast< SCSyncPropInfo* >(object);
  (void)_this;
}
void SCSyncPropInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSyncPropInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSyncPropInfo& SCSyncPropInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSyncPropInfo_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCSyncPropInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCSyncPropInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSyncPropInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .F4BY.UserSyncPropInfo users = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSyncPropInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCSyncPropInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .F4BY.UserSyncPropInfo users = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_users_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_users(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCSyncPropInfo)
  return target;
}

size_t SCSyncPropInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCSyncPropInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.UserSyncPropInfo users = 1;
  total_size += 1UL * this->_internal_users_size();
  for (const auto& msg : this->users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSyncPropInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCSyncPropInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSyncPropInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSyncPropInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCSyncPropInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCSyncPropInfo)
    MergeFrom(*source);
  }
}

void SCSyncPropInfo::MergeFrom(const SCSyncPropInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCSyncPropInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
}

void SCSyncPropInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCSyncPropInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSyncPropInfo::CopyFrom(const SCSyncPropInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCSyncPropInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSyncPropInfo::IsInitialized() const {
  return true;
}

void SCSyncPropInfo::InternalSwap(SCSyncPropInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  users_.InternalSwap(&other->users_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSyncPropInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSyncMoney::_Internal {
 public:
};

CSSyncMoney::CSSyncMoney(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSSyncMoney)
}
CSSyncMoney::CSSyncMoney(const CSSyncMoney& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:F4BY.CSSyncMoney)
}

void CSSyncMoney::SharedCtor() {
  type_ = 0;
}

CSSyncMoney::~CSSyncMoney() {
  // @@protoc_insertion_point(destructor:F4BY.CSSyncMoney)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSyncMoney::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSSyncMoney::ArenaDtor(void* object) {
  CSSyncMoney* _this = reinterpret_cast< CSSyncMoney* >(object);
  (void)_this;
}
void CSSyncMoney::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSyncMoney::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSyncMoney& CSSyncMoney::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSyncMoney_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSSyncMoney::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSSyncMoney)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSyncMoney::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSyncMoney::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSSyncMoney)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSSyncMoney)
  return target;
}

size_t CSSyncMoney::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSSyncMoney)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSyncMoney::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSSyncMoney)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSyncMoney* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSyncMoney>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSSyncMoney)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSSyncMoney)
    MergeFrom(*source);
  }
}

void CSSyncMoney::MergeFrom(const CSSyncMoney& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSSyncMoney)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void CSSyncMoney::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSSyncMoney)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSyncMoney::CopyFrom(const CSSyncMoney& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSSyncMoney)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSyncMoney::IsInitialized() const {
  return true;
}

void CSSyncMoney::InternalSwap(CSSyncMoney* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSyncMoney::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSyncMoney::_Internal {
 public:
};

SCSyncMoney::SCSyncMoney(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCSyncMoney)
}
SCSyncMoney::SCSyncMoney(const SCSyncMoney& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&vip_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(vip_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCSyncMoney)
}

void SCSyncMoney::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&vip_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(vip_));
}

SCSyncMoney::~SCSyncMoney() {
  // @@protoc_insertion_point(destructor:F4BY.SCSyncMoney)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSyncMoney::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCSyncMoney::ArenaDtor(void* object) {
  SCSyncMoney* _this = reinterpret_cast< SCSyncMoney* >(object);
  (void)_this;
}
void SCSyncMoney::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSyncMoney::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSyncMoney& SCSyncMoney::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSyncMoney_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCSyncMoney::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCSyncMoney)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vip_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(vip_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSyncMoney::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 delta = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ticket = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ticket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vip = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSyncMoney::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCSyncMoney)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 score = 2;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_score(), target);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // int32 delta = 4;
  if (this->delta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_delta(), target);
  }

  // int32 ticket = 5;
  if (this->ticket() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_ticket(), target);
  }

  // int32 vip = 6;
  if (this->vip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_vip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCSyncMoney)
  return target;
}

size_t SCSyncMoney::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCSyncMoney)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 score = 2;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 delta = 4;
  if (this->delta() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_delta());
  }

  // int32 ticket = 5;
  if (this->ticket() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ticket());
  }

  // int32 vip = 6;
  if (this->vip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vip());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSyncMoney::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCSyncMoney)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSyncMoney* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSyncMoney>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCSyncMoney)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCSyncMoney)
    MergeFrom(*source);
  }
}

void SCSyncMoney::MergeFrom(const SCSyncMoney& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCSyncMoney)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.delta() != 0) {
    _internal_set_delta(from._internal_delta());
  }
  if (from.ticket() != 0) {
    _internal_set_ticket(from._internal_ticket());
  }
  if (from.vip() != 0) {
    _internal_set_vip(from._internal_vip());
  }
}

void SCSyncMoney::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCSyncMoney)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSyncMoney::CopyFrom(const SCSyncMoney& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCSyncMoney)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSyncMoney::IsInitialized() const {
  return true;
}

void SCSyncMoney::InternalSwap(SCSyncMoney* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCSyncMoney, vip_)
      + sizeof(SCSyncMoney::vip_)
      - PROTOBUF_FIELD_OFFSET(SCSyncMoney, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSyncMoney::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FishTrace::_Internal {
 public:
};

FishTrace::FishTrace(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  beads_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.FishTrace)
}
FishTrace::FishTrace(const FishTrace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      beads_list_(from.beads_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fish_uid_, &from.fish_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&fish_road_) -
    reinterpret_cast<char*>(&fish_uid_)) + sizeof(fish_road_));
  // @@protoc_insertion_point(copy_constructor:F4BY.FishTrace)
}

void FishTrace::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fish_uid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&fish_road_) -
      reinterpret_cast<char*>(&fish_uid_)) + sizeof(fish_road_));
}

FishTrace::~FishTrace() {
  // @@protoc_insertion_point(destructor:F4BY.FishTrace)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FishTrace::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FishTrace::ArenaDtor(void* object) {
  FishTrace* _this = reinterpret_cast< FishTrace* >(object);
  (void)_this;
}
void FishTrace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FishTrace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FishTrace& FishTrace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FishTrace_F4BY_2eproto.base);
  return *internal_default_instance();
}


void FishTrace::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.FishTrace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  beads_list_.Clear();
  ::memset(&fish_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fish_road_) -
      reinterpret_cast<char*>(&fish_uid_)) + sizeof(fish_road_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FishTrace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 fish_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fish_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fish_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_layer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fish_layer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_stage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          fish_stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_aced = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_aced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 alive_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          alive_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 beads_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_beads_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_beads_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_torpedoId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          fish_torpedoid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_road = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          fish_road_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FishTrace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.FishTrace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fish_uid = 1;
  if (this->fish_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_fish_uid(), target);
  }

  // int32 fish_type = 2;
  if (this->fish_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fish_type(), target);
  }

  // int32 fish_layer = 3;
  if (this->fish_layer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_fish_layer(), target);
  }

  // int32 fish_stage = 4;
  if (this->fish_stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_fish_stage(), target);
  }

  // bool is_aced = 5;
  if (this->is_aced() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_aced(), target);
  }

  // int32 alive_time = 6;
  if (this->alive_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_alive_time(), target);
  }

  // repeated int32 beads_list = 7;
  {
    int byte_size = _beads_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_beads_list(), byte_size, target);
    }
  }

  // int32 fish_torpedoId = 8;
  if (this->fish_torpedoid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_fish_torpedoid(), target);
  }

  // int32 fish_road = 9;
  if (this->fish_road() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_fish_road(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.FishTrace)
  return target;
}

size_t FishTrace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.FishTrace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 beads_list = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->beads_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _beads_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 fish_uid = 1;
  if (this->fish_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_uid());
  }

  // int32 fish_type = 2;
  if (this->fish_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_type());
  }

  // int32 fish_layer = 3;
  if (this->fish_layer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_layer());
  }

  // int32 fish_stage = 4;
  if (this->fish_stage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_stage());
  }

  // bool is_aced = 5;
  if (this->is_aced() != 0) {
    total_size += 1 + 1;
  }

  // int32 alive_time = 6;
  if (this->alive_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_alive_time());
  }

  // int32 fish_torpedoId = 8;
  if (this->fish_torpedoid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_torpedoid());
  }

  // int32 fish_road = 9;
  if (this->fish_road() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_road());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FishTrace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.FishTrace)
  GOOGLE_DCHECK_NE(&from, this);
  const FishTrace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FishTrace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.FishTrace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.FishTrace)
    MergeFrom(*source);
  }
}

void FishTrace::MergeFrom(const FishTrace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.FishTrace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  beads_list_.MergeFrom(from.beads_list_);
  if (from.fish_uid() != 0) {
    _internal_set_fish_uid(from._internal_fish_uid());
  }
  if (from.fish_type() != 0) {
    _internal_set_fish_type(from._internal_fish_type());
  }
  if (from.fish_layer() != 0) {
    _internal_set_fish_layer(from._internal_fish_layer());
  }
  if (from.fish_stage() != 0) {
    _internal_set_fish_stage(from._internal_fish_stage());
  }
  if (from.is_aced() != 0) {
    _internal_set_is_aced(from._internal_is_aced());
  }
  if (from.alive_time() != 0) {
    _internal_set_alive_time(from._internal_alive_time());
  }
  if (from.fish_torpedoid() != 0) {
    _internal_set_fish_torpedoid(from._internal_fish_torpedoid());
  }
  if (from.fish_road() != 0) {
    _internal_set_fish_road(from._internal_fish_road());
  }
}

void FishTrace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.FishTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishTrace::CopyFrom(const FishTrace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.FishTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishTrace::IsInitialized() const {
  return true;
}

void FishTrace::InternalSwap(FishTrace* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  beads_list_.InternalSwap(&other->beads_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FishTrace, fish_road_)
      + sizeof(FishTrace::fish_road_)
      - PROTOBUF_FIELD_OFFSET(FishTrace, fish_uid_)>(
          reinterpret_cast<char*>(&fish_uid_),
          reinterpret_cast<char*>(&other->fish_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FishTrace::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCFishTracesList::_Internal {
 public:
};

SCFishTracesList::SCFishTracesList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fish_traces_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCFishTracesList)
}
SCFishTracesList::SCFishTracesList(const SCFishTracesList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fish_traces_(from.fish_traces_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fish_road_, &from.fish_road_,
    static_cast<size_t>(reinterpret_cast<char*>(&move_t_) -
    reinterpret_cast<char*>(&fish_road_)) + sizeof(move_t_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCFishTracesList)
}

void SCFishTracesList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCFishTracesList_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fish_road_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&move_t_) -
      reinterpret_cast<char*>(&fish_road_)) + sizeof(move_t_));
}

SCFishTracesList::~SCFishTracesList() {
  // @@protoc_insertion_point(destructor:F4BY.SCFishTracesList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCFishTracesList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCFishTracesList::ArenaDtor(void* object) {
  SCFishTracesList* _this = reinterpret_cast< SCFishTracesList* >(object);
  (void)_this;
}
void SCFishTracesList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCFishTracesList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCFishTracesList& SCFishTracesList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCFishTracesList_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCFishTracesList::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCFishTracesList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fish_traces_.Clear();
  ::memset(&fish_road_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&move_t_) -
      reinterpret_cast<char*>(&fish_road_)) + sizeof(move_t_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCFishTracesList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .F4BY.FishTrace fish_traces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fish_traces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 fish_road = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fish_road_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_array = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fish_array_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 create_interval = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          create_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_called = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_called_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool after_tide_first = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          after_tide_first_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .F4BY.CallFishType call_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_call_type(static_cast<::F4BY::CallFishType>(val));
        } else goto handle_unusual;
        continue;
      // float move_delay = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          move_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 road_idx = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          road_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float move_t = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          move_t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCFishTracesList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCFishTracesList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .F4BY.FishTrace fish_traces = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fish_traces_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_fish_traces(i), target, stream);
  }

  // int32 fish_road = 2;
  if (this->fish_road() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fish_road(), target);
  }

  // int32 fish_array = 3;
  if (this->fish_array() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_fish_array(), target);
  }

  // int32 create_interval = 4;
  if (this->create_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_create_interval(), target);
  }

  // bool is_called = 5;
  if (this->is_called() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_called(), target);
  }

  // bool after_tide_first = 6;
  if (this->after_tide_first() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_after_tide_first(), target);
  }

  // .F4BY.CallFishType call_type = 7;
  if (this->call_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_call_type(), target);
  }

  // float move_delay = 8;
  if (!(this->move_delay() <= 0 && this->move_delay() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_move_delay(), target);
  }

  // int32 road_idx = 9;
  if (this->road_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_road_idx(), target);
  }

  // float move_t = 10;
  if (!(this->move_t() <= 0 && this->move_t() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_move_t(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCFishTracesList)
  return target;
}

size_t SCFishTracesList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCFishTracesList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.FishTrace fish_traces = 1;
  total_size += 1UL * this->_internal_fish_traces_size();
  for (const auto& msg : this->fish_traces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 fish_road = 2;
  if (this->fish_road() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_road());
  }

  // int32 fish_array = 3;
  if (this->fish_array() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_array());
  }

  // int32 create_interval = 4;
  if (this->create_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_create_interval());
  }

  // bool is_called = 5;
  if (this->is_called() != 0) {
    total_size += 1 + 1;
  }

  // bool after_tide_first = 6;
  if (this->after_tide_first() != 0) {
    total_size += 1 + 1;
  }

  // .F4BY.CallFishType call_type = 7;
  if (this->call_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_call_type());
  }

  // float move_delay = 8;
  if (!(this->move_delay() <= 0 && this->move_delay() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 road_idx = 9;
  if (this->road_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_road_idx());
  }

  // float move_t = 10;
  if (!(this->move_t() <= 0 && this->move_t() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCFishTracesList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCFishTracesList)
  GOOGLE_DCHECK_NE(&from, this);
  const SCFishTracesList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCFishTracesList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCFishTracesList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCFishTracesList)
    MergeFrom(*source);
  }
}

void SCFishTracesList::MergeFrom(const SCFishTracesList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCFishTracesList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fish_traces_.MergeFrom(from.fish_traces_);
  if (from.fish_road() != 0) {
    _internal_set_fish_road(from._internal_fish_road());
  }
  if (from.fish_array() != 0) {
    _internal_set_fish_array(from._internal_fish_array());
  }
  if (from.create_interval() != 0) {
    _internal_set_create_interval(from._internal_create_interval());
  }
  if (from.is_called() != 0) {
    _internal_set_is_called(from._internal_is_called());
  }
  if (from.after_tide_first() != 0) {
    _internal_set_after_tide_first(from._internal_after_tide_first());
  }
  if (from.call_type() != 0) {
    _internal_set_call_type(from._internal_call_type());
  }
  if (!(from.move_delay() <= 0 && from.move_delay() >= 0)) {
    _internal_set_move_delay(from._internal_move_delay());
  }
  if (from.road_idx() != 0) {
    _internal_set_road_idx(from._internal_road_idx());
  }
  if (!(from.move_t() <= 0 && from.move_t() >= 0)) {
    _internal_set_move_t(from._internal_move_t());
  }
}

void SCFishTracesList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCFishTracesList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCFishTracesList::CopyFrom(const SCFishTracesList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCFishTracesList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCFishTracesList::IsInitialized() const {
  return true;
}

void SCFishTracesList::InternalSwap(SCFishTracesList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fish_traces_.InternalSwap(&other->fish_traces_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCFishTracesList, move_t_)
      + sizeof(SCFishTracesList::move_t_)
      - PROTOBUF_FIELD_OFFSET(SCFishTracesList, fish_road_)>(
          reinterpret_cast<char*>(&fish_road_),
          reinterpret_cast<char*>(&other->fish_road_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCFishTracesList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSyncFishReq::_Internal {
 public:
};

CSSyncFishReq::CSSyncFishReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSSyncFishReq)
}
CSSyncFishReq::CSSyncFishReq(const CSSyncFishReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chair_id_ = from.chair_id_;
  // @@protoc_insertion_point(copy_constructor:F4BY.CSSyncFishReq)
}

void CSSyncFishReq::SharedCtor() {
  chair_id_ = 0;
}

CSSyncFishReq::~CSSyncFishReq() {
  // @@protoc_insertion_point(destructor:F4BY.CSSyncFishReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSyncFishReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSSyncFishReq::ArenaDtor(void* object) {
  CSSyncFishReq* _this = reinterpret_cast< CSSyncFishReq* >(object);
  (void)_this;
}
void CSSyncFishReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSyncFishReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSyncFishReq& CSSyncFishReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSyncFishReq_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSSyncFishReq::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSSyncFishReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chair_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSyncFishReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSyncFishReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSSyncFishReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSSyncFishReq)
  return target;
}

size_t CSSyncFishReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSSyncFishReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSyncFishReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSSyncFishReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSyncFishReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSyncFishReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSSyncFishReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSSyncFishReq)
    MergeFrom(*source);
  }
}

void CSSyncFishReq::MergeFrom(const CSSyncFishReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSSyncFishReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
}

void CSSyncFishReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSSyncFishReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSyncFishReq::CopyFrom(const CSSyncFishReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSSyncFishReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSyncFishReq::IsInitialized() const {
  return true;
}

void CSSyncFishReq::InternalSwap(CSSyncFishReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(chair_id_, other->chair_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSyncFishReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSyncFishReq::_Internal {
 public:
};

SCSyncFishReq::SCSyncFishReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCSyncFishReq)
}
SCSyncFishReq::SCSyncFishReq(const SCSyncFishReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  req_player_id_ = from.req_player_id_;
  // @@protoc_insertion_point(copy_constructor:F4BY.SCSyncFishReq)
}

void SCSyncFishReq::SharedCtor() {
  req_player_id_ = 0;
}

SCSyncFishReq::~SCSyncFishReq() {
  // @@protoc_insertion_point(destructor:F4BY.SCSyncFishReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSyncFishReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCSyncFishReq::ArenaDtor(void* object) {
  SCSyncFishReq* _this = reinterpret_cast< SCSyncFishReq* >(object);
  (void)_this;
}
void SCSyncFishReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSyncFishReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSyncFishReq& SCSyncFishReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSyncFishReq_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCSyncFishReq::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCSyncFishReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  req_player_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSyncFishReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 req_player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          req_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSyncFishReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCSyncFishReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 req_player_id = 1;
  if (this->req_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_req_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCSyncFishReq)
  return target;
}

size_t SCSyncFishReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCSyncFishReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 req_player_id = 1;
  if (this->req_player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_req_player_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSyncFishReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCSyncFishReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSyncFishReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSyncFishReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCSyncFishReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCSyncFishReq)
    MergeFrom(*source);
  }
}

void SCSyncFishReq::MergeFrom(const SCSyncFishReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCSyncFishReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.req_player_id() != 0) {
    _internal_set_req_player_id(from._internal_req_player_id());
  }
}

void SCSyncFishReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCSyncFishReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSyncFishReq::CopyFrom(const SCSyncFishReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCSyncFishReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSyncFishReq::IsInitialized() const {
  return true;
}

void SCSyncFishReq::InternalSwap(SCSyncFishReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(req_player_id_, other->req_player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSyncFishReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSyncFishRsp::_Internal {
 public:
};

CSSyncFishRsp::CSSyncFishRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fish_traces_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSSyncFishRsp)
}
CSSyncFishRsp::CSSyncFishRsp(const CSSyncFishRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fish_traces_(from.fish_traces_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fish_road_, &from.fish_road_,
    static_cast<size_t>(reinterpret_cast<char*>(&req_player_id_) -
    reinterpret_cast<char*>(&fish_road_)) + sizeof(req_player_id_));
  // @@protoc_insertion_point(copy_constructor:F4BY.CSSyncFishRsp)
}

void CSSyncFishRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSSyncFishRsp_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fish_road_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&req_player_id_) -
      reinterpret_cast<char*>(&fish_road_)) + sizeof(req_player_id_));
}

CSSyncFishRsp::~CSSyncFishRsp() {
  // @@protoc_insertion_point(destructor:F4BY.CSSyncFishRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSyncFishRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSSyncFishRsp::ArenaDtor(void* object) {
  CSSyncFishRsp* _this = reinterpret_cast< CSSyncFishRsp* >(object);
  (void)_this;
}
void CSSyncFishRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSyncFishRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSyncFishRsp& CSSyncFishRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSyncFishRsp_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSSyncFishRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSSyncFishRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fish_traces_.Clear();
  ::memset(&fish_road_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_player_id_) -
      reinterpret_cast<char*>(&fish_road_)) + sizeof(req_player_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSyncFishRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .F4BY.FishTrace fish_traces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fish_traces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 fish_road = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fish_road_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_array = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fish_array_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float move_delay = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          move_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 road_idx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          road_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float move_t = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          move_t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool finish = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          finish_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 req_player_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          req_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSyncFishRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSSyncFishRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .F4BY.FishTrace fish_traces = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fish_traces_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_fish_traces(i), target, stream);
  }

  // int32 fish_road = 2;
  if (this->fish_road() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fish_road(), target);
  }

  // int32 fish_array = 3;
  if (this->fish_array() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_fish_array(), target);
  }

  // float move_delay = 4;
  if (!(this->move_delay() <= 0 && this->move_delay() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_move_delay(), target);
  }

  // int32 road_idx = 5;
  if (this->road_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_road_idx(), target);
  }

  // float move_t = 6;
  if (!(this->move_t() <= 0 && this->move_t() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_move_t(), target);
  }

  // bool finish = 7;
  if (this->finish() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_finish(), target);
  }

  // int32 req_player_id = 8;
  if (this->req_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_req_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSSyncFishRsp)
  return target;
}

size_t CSSyncFishRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSSyncFishRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.FishTrace fish_traces = 1;
  total_size += 1UL * this->_internal_fish_traces_size();
  for (const auto& msg : this->fish_traces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 fish_road = 2;
  if (this->fish_road() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_road());
  }

  // int32 fish_array = 3;
  if (this->fish_array() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_array());
  }

  // float move_delay = 4;
  if (!(this->move_delay() <= 0 && this->move_delay() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 road_idx = 5;
  if (this->road_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_road_idx());
  }

  // float move_t = 6;
  if (!(this->move_t() <= 0 && this->move_t() >= 0)) {
    total_size += 1 + 4;
  }

  // bool finish = 7;
  if (this->finish() != 0) {
    total_size += 1 + 1;
  }

  // int32 req_player_id = 8;
  if (this->req_player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_req_player_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSyncFishRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSSyncFishRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSyncFishRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSyncFishRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSSyncFishRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSSyncFishRsp)
    MergeFrom(*source);
  }
}

void CSSyncFishRsp::MergeFrom(const CSSyncFishRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSSyncFishRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fish_traces_.MergeFrom(from.fish_traces_);
  if (from.fish_road() != 0) {
    _internal_set_fish_road(from._internal_fish_road());
  }
  if (from.fish_array() != 0) {
    _internal_set_fish_array(from._internal_fish_array());
  }
  if (!(from.move_delay() <= 0 && from.move_delay() >= 0)) {
    _internal_set_move_delay(from._internal_move_delay());
  }
  if (from.road_idx() != 0) {
    _internal_set_road_idx(from._internal_road_idx());
  }
  if (!(from.move_t() <= 0 && from.move_t() >= 0)) {
    _internal_set_move_t(from._internal_move_t());
  }
  if (from.finish() != 0) {
    _internal_set_finish(from._internal_finish());
  }
  if (from.req_player_id() != 0) {
    _internal_set_req_player_id(from._internal_req_player_id());
  }
}

void CSSyncFishRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSSyncFishRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSyncFishRsp::CopyFrom(const CSSyncFishRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSSyncFishRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSyncFishRsp::IsInitialized() const {
  return true;
}

void CSSyncFishRsp::InternalSwap(CSSyncFishRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fish_traces_.InternalSwap(&other->fish_traces_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSSyncFishRsp, req_player_id_)
      + sizeof(CSSyncFishRsp::req_player_id_)
      - PROTOBUF_FIELD_OFFSET(CSSyncFishRsp, fish_road_)>(
          reinterpret_cast<char*>(&fish_road_),
          reinterpret_cast<char*>(&other->fish_road_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSyncFishRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSyncFishRsp::_Internal {
 public:
};

SCSyncFishRsp::SCSyncFishRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fish_traces_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCSyncFishRsp)
}
SCSyncFishRsp::SCSyncFishRsp(const SCSyncFishRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fish_traces_(from.fish_traces_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fish_road_, &from.fish_road_,
    static_cast<size_t>(reinterpret_cast<char*>(&call_type_) -
    reinterpret_cast<char*>(&fish_road_)) + sizeof(call_type_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCSyncFishRsp)
}

void SCSyncFishRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCSyncFishRsp_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fish_road_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&call_type_) -
      reinterpret_cast<char*>(&fish_road_)) + sizeof(call_type_));
}

SCSyncFishRsp::~SCSyncFishRsp() {
  // @@protoc_insertion_point(destructor:F4BY.SCSyncFishRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSyncFishRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCSyncFishRsp::ArenaDtor(void* object) {
  SCSyncFishRsp* _this = reinterpret_cast< SCSyncFishRsp* >(object);
  (void)_this;
}
void SCSyncFishRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSyncFishRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSyncFishRsp& SCSyncFishRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSyncFishRsp_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCSyncFishRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCSyncFishRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fish_traces_.Clear();
  ::memset(&fish_road_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&call_type_) -
      reinterpret_cast<char*>(&fish_road_)) + sizeof(call_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSyncFishRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .F4BY.FishTrace fish_traces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fish_traces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 fish_road = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fish_road_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_array = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fish_array_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float move_delay = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          move_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 road_idx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          road_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float move_t = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          move_t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float create_interval = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          create_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool is_called = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          is_called_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .F4BY.CallFishType call_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_call_type(static_cast<::F4BY::CallFishType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSyncFishRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCSyncFishRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .F4BY.FishTrace fish_traces = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fish_traces_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_fish_traces(i), target, stream);
  }

  // int32 fish_road = 2;
  if (this->fish_road() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fish_road(), target);
  }

  // int32 fish_array = 3;
  if (this->fish_array() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_fish_array(), target);
  }

  // float move_delay = 4;
  if (!(this->move_delay() <= 0 && this->move_delay() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_move_delay(), target);
  }

  // int32 road_idx = 5;
  if (this->road_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_road_idx(), target);
  }

  // float move_t = 6;
  if (!(this->move_t() <= 0 && this->move_t() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_move_t(), target);
  }

  // float create_interval = 7;
  if (!(this->create_interval() <= 0 && this->create_interval() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_create_interval(), target);
  }

  // bool is_called = 8;
  if (this->is_called() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_called(), target);
  }

  // .F4BY.CallFishType call_type = 9;
  if (this->call_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_call_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCSyncFishRsp)
  return target;
}

size_t SCSyncFishRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCSyncFishRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.FishTrace fish_traces = 1;
  total_size += 1UL * this->_internal_fish_traces_size();
  for (const auto& msg : this->fish_traces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 fish_road = 2;
  if (this->fish_road() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_road());
  }

  // int32 fish_array = 3;
  if (this->fish_array() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_array());
  }

  // float move_delay = 4;
  if (!(this->move_delay() <= 0 && this->move_delay() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 road_idx = 5;
  if (this->road_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_road_idx());
  }

  // float move_t = 6;
  if (!(this->move_t() <= 0 && this->move_t() >= 0)) {
    total_size += 1 + 4;
  }

  // float create_interval = 7;
  if (!(this->create_interval() <= 0 && this->create_interval() >= 0)) {
    total_size += 1 + 4;
  }

  // bool is_called = 8;
  if (this->is_called() != 0) {
    total_size += 1 + 1;
  }

  // .F4BY.CallFishType call_type = 9;
  if (this->call_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_call_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSyncFishRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCSyncFishRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSyncFishRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSyncFishRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCSyncFishRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCSyncFishRsp)
    MergeFrom(*source);
  }
}

void SCSyncFishRsp::MergeFrom(const SCSyncFishRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCSyncFishRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fish_traces_.MergeFrom(from.fish_traces_);
  if (from.fish_road() != 0) {
    _internal_set_fish_road(from._internal_fish_road());
  }
  if (from.fish_array() != 0) {
    _internal_set_fish_array(from._internal_fish_array());
  }
  if (!(from.move_delay() <= 0 && from.move_delay() >= 0)) {
    _internal_set_move_delay(from._internal_move_delay());
  }
  if (from.road_idx() != 0) {
    _internal_set_road_idx(from._internal_road_idx());
  }
  if (!(from.move_t() <= 0 && from.move_t() >= 0)) {
    _internal_set_move_t(from._internal_move_t());
  }
  if (!(from.create_interval() <= 0 && from.create_interval() >= 0)) {
    _internal_set_create_interval(from._internal_create_interval());
  }
  if (from.is_called() != 0) {
    _internal_set_is_called(from._internal_is_called());
  }
  if (from.call_type() != 0) {
    _internal_set_call_type(from._internal_call_type());
  }
}

void SCSyncFishRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCSyncFishRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSyncFishRsp::CopyFrom(const SCSyncFishRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCSyncFishRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSyncFishRsp::IsInitialized() const {
  return true;
}

void SCSyncFishRsp::InternalSwap(SCSyncFishRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fish_traces_.InternalSwap(&other->fish_traces_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCSyncFishRsp, call_type_)
      + sizeof(SCSyncFishRsp::call_type_)
      - PROTOBUF_FIELD_OFFSET(SCSyncFishRsp, fish_road_)>(
          reinterpret_cast<char*>(&fish_road_),
          reinterpret_cast<char*>(&other->fish_road_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSyncFishRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCChangeScene::_Internal {
 public:
};

SCChangeScene::SCChangeScene(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCChangeScene)
}
SCChangeScene::SCChangeScene(const SCChangeScene& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  scene_index_ = from.scene_index_;
  // @@protoc_insertion_point(copy_constructor:F4BY.SCChangeScene)
}

void SCChangeScene::SharedCtor() {
  scene_index_ = 0;
}

SCChangeScene::~SCChangeScene() {
  // @@protoc_insertion_point(destructor:F4BY.SCChangeScene)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCChangeScene::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCChangeScene::ArenaDtor(void* object) {
  SCChangeScene* _this = reinterpret_cast< SCChangeScene* >(object);
  (void)_this;
}
void SCChangeScene::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCChangeScene::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCChangeScene& SCChangeScene::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCChangeScene_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCChangeScene::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCChangeScene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scene_index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCChangeScene::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 scene_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          scene_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCChangeScene::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCChangeScene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 scene_index = 1;
  if (this->scene_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_scene_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCChangeScene)
  return target;
}

size_t SCChangeScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCChangeScene)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 scene_index = 1;
  if (this->scene_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scene_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCChangeScene::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCChangeScene)
  GOOGLE_DCHECK_NE(&from, this);
  const SCChangeScene* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCChangeScene>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCChangeScene)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCChangeScene)
    MergeFrom(*source);
  }
}

void SCChangeScene::MergeFrom(const SCChangeScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCChangeScene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.scene_index() != 0) {
    _internal_set_scene_index(from._internal_scene_index());
  }
}

void SCChangeScene::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCChangeScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCChangeScene::CopyFrom(const SCChangeScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCChangeScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCChangeScene::IsInitialized() const {
  return true;
}

void SCChangeScene::InternalSwap(SCChangeScene* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scene_index_, other->scene_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCChangeScene::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSFishOutsideScreen::_Internal {
 public:
};

CSFishOutsideScreen::CSFishOutsideScreen(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSFishOutsideScreen)
}
CSFishOutsideScreen::CSFishOutsideScreen(const CSFishOutsideScreen& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fish_uid_ = from.fish_uid_;
  // @@protoc_insertion_point(copy_constructor:F4BY.CSFishOutsideScreen)
}

void CSFishOutsideScreen::SharedCtor() {
  fish_uid_ = 0;
}

CSFishOutsideScreen::~CSFishOutsideScreen() {
  // @@protoc_insertion_point(destructor:F4BY.CSFishOutsideScreen)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSFishOutsideScreen::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSFishOutsideScreen::ArenaDtor(void* object) {
  CSFishOutsideScreen* _this = reinterpret_cast< CSFishOutsideScreen* >(object);
  (void)_this;
}
void CSFishOutsideScreen::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSFishOutsideScreen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSFishOutsideScreen& CSFishOutsideScreen::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSFishOutsideScreen_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSFishOutsideScreen::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSFishOutsideScreen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fish_uid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSFishOutsideScreen::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 fish_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fish_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSFishOutsideScreen::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSFishOutsideScreen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fish_uid = 1;
  if (this->fish_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_fish_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSFishOutsideScreen)
  return target;
}

size_t CSFishOutsideScreen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSFishOutsideScreen)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 fish_uid = 1;
  if (this->fish_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSFishOutsideScreen::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSFishOutsideScreen)
  GOOGLE_DCHECK_NE(&from, this);
  const CSFishOutsideScreen* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSFishOutsideScreen>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSFishOutsideScreen)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSFishOutsideScreen)
    MergeFrom(*source);
  }
}

void CSFishOutsideScreen::MergeFrom(const CSFishOutsideScreen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSFishOutsideScreen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fish_uid() != 0) {
    _internal_set_fish_uid(from._internal_fish_uid());
  }
}

void CSFishOutsideScreen::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSFishOutsideScreen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSFishOutsideScreen::CopyFrom(const CSFishOutsideScreen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSFishOutsideScreen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFishOutsideScreen::IsInitialized() const {
  return true;
}

void CSFishOutsideScreen::InternalSwap(CSFishOutsideScreen* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(fish_uid_, other->fish_uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSFishOutsideScreen::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSLockFish::_Internal {
 public:
};

CSLockFish::CSLockFish(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSLockFish)
}
CSLockFish::CSLockFish(const CSLockFish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fish_uid_, &from.fish_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&chair_idx_) -
    reinterpret_cast<char*>(&fish_uid_)) + sizeof(chair_idx_));
  // @@protoc_insertion_point(copy_constructor:F4BY.CSLockFish)
}

void CSLockFish::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fish_uid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chair_idx_) -
      reinterpret_cast<char*>(&fish_uid_)) + sizeof(chair_idx_));
}

CSLockFish::~CSLockFish() {
  // @@protoc_insertion_point(destructor:F4BY.CSLockFish)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSLockFish::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSLockFish::ArenaDtor(void* object) {
  CSLockFish* _this = reinterpret_cast< CSLockFish* >(object);
  (void)_this;
}
void CSLockFish::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSLockFish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSLockFish& CSLockFish::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSLockFish_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSLockFish::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSLockFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fish_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) -
      reinterpret_cast<char*>(&fish_uid_)) + sizeof(chair_idx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSLockFish::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 fish_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fish_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_open = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chair_idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSLockFish::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSLockFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fish_uid = 1;
  if (this->fish_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_fish_uid(), target);
  }

  // bool is_open = 2;
  if (this->is_open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_open(), target);
  }

  // int32 chair_idx = 3;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_chair_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSLockFish)
  return target;
}

size_t CSLockFish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSLockFish)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 fish_uid = 1;
  if (this->fish_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_uid());
  }

  // bool is_open = 2;
  if (this->is_open() != 0) {
    total_size += 1 + 1;
  }

  // int32 chair_idx = 3;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSLockFish::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSLockFish)
  GOOGLE_DCHECK_NE(&from, this);
  const CSLockFish* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSLockFish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSLockFish)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSLockFish)
    MergeFrom(*source);
  }
}

void CSLockFish::MergeFrom(const CSLockFish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSLockFish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fish_uid() != 0) {
    _internal_set_fish_uid(from._internal_fish_uid());
  }
  if (from.is_open() != 0) {
    _internal_set_is_open(from._internal_is_open());
  }
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
}

void CSLockFish::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSLockFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLockFish::CopyFrom(const CSLockFish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSLockFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLockFish::IsInitialized() const {
  return true;
}

void CSLockFish::InternalSwap(CSLockFish* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSLockFish, chair_idx_)
      + sizeof(CSLockFish::chair_idx_)
      - PROTOBUF_FIELD_OFFSET(CSLockFish, fish_uid_)>(
          reinterpret_cast<char*>(&fish_uid_),
          reinterpret_cast<char*>(&other->fish_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSLockFish::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCLockFish::_Internal {
 public:
};

SCLockFish::SCLockFish(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCLockFish)
}
SCLockFish::SCLockFish(const SCLockFish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_open_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(is_open_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCLockFish)
}

void SCLockFish::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_open_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(is_open_));
}

SCLockFish::~SCLockFish() {
  // @@protoc_insertion_point(destructor:F4BY.SCLockFish)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCLockFish::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCLockFish::ArenaDtor(void* object) {
  SCLockFish* _this = reinterpret_cast< SCLockFish* >(object);
  (void)_this;
}
void SCLockFish::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCLockFish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCLockFish& SCLockFish::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCLockFish_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCLockFish::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCLockFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_open_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(is_open_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCLockFish::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fish_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_open = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCLockFish::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCLockFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 fish_uid = 2;
  if (this->fish_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fish_uid(), target);
  }

  // bool is_open = 3;
  if (this->is_open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_open(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCLockFish)
  return target;
}

size_t SCLockFish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCLockFish)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 fish_uid = 2;
  if (this->fish_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_uid());
  }

  // bool is_open = 3;
  if (this->is_open() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCLockFish::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCLockFish)
  GOOGLE_DCHECK_NE(&from, this);
  const SCLockFish* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCLockFish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCLockFish)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCLockFish)
    MergeFrom(*source);
  }
}

void SCLockFish::MergeFrom(const SCLockFish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCLockFish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.fish_uid() != 0) {
    _internal_set_fish_uid(from._internal_fish_uid());
  }
  if (from.is_open() != 0) {
    _internal_set_is_open(from._internal_is_open());
  }
}

void SCLockFish::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCLockFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCLockFish::CopyFrom(const SCLockFish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCLockFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCLockFish::IsInitialized() const {
  return true;
}

void SCLockFish::InternalSwap(SCLockFish* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCLockFish, is_open_)
      + sizeof(SCLockFish::is_open_)
      - PROTOBUF_FIELD_OFFSET(SCLockFish, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCLockFish::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSCrazySkill::_Internal {
 public:
};

CSCrazySkill::CSCrazySkill(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSCrazySkill)
}
CSCrazySkill::CSCrazySkill(const CSCrazySkill& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_open_ = from.is_open_;
  // @@protoc_insertion_point(copy_constructor:F4BY.CSCrazySkill)
}

void CSCrazySkill::SharedCtor() {
  is_open_ = false;
}

CSCrazySkill::~CSCrazySkill() {
  // @@protoc_insertion_point(destructor:F4BY.CSCrazySkill)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSCrazySkill::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSCrazySkill::ArenaDtor(void* object) {
  CSCrazySkill* _this = reinterpret_cast< CSCrazySkill* >(object);
  (void)_this;
}
void CSCrazySkill::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSCrazySkill::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSCrazySkill& CSCrazySkill::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSCrazySkill_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSCrazySkill::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSCrazySkill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_open_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSCrazySkill::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_open = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSCrazySkill::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSCrazySkill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_open = 1;
  if (this->is_open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_open(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSCrazySkill)
  return target;
}

size_t CSCrazySkill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSCrazySkill)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_open = 1;
  if (this->is_open() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSCrazySkill::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSCrazySkill)
  GOOGLE_DCHECK_NE(&from, this);
  const CSCrazySkill* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSCrazySkill>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSCrazySkill)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSCrazySkill)
    MergeFrom(*source);
  }
}

void CSCrazySkill::MergeFrom(const CSCrazySkill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSCrazySkill)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_open() != 0) {
    _internal_set_is_open(from._internal_is_open());
  }
}

void CSCrazySkill::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSCrazySkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSCrazySkill::CopyFrom(const CSCrazySkill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSCrazySkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCrazySkill::IsInitialized() const {
  return true;
}

void CSCrazySkill::InternalSwap(CSCrazySkill* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(is_open_, other->is_open_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSCrazySkill::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCCrazySkill::_Internal {
 public:
};

SCCrazySkill::SCCrazySkill(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCCrazySkill)
}
SCCrazySkill::SCCrazySkill(const SCCrazySkill& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_open_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(is_open_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCCrazySkill)
}

void SCCrazySkill::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_open_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(is_open_));
}

SCCrazySkill::~SCCrazySkill() {
  // @@protoc_insertion_point(destructor:F4BY.SCCrazySkill)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCCrazySkill::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCCrazySkill::ArenaDtor(void* object) {
  SCCrazySkill* _this = reinterpret_cast< SCCrazySkill* >(object);
  (void)_this;
}
void SCCrazySkill::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCCrazySkill::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCCrazySkill& SCCrazySkill::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCCrazySkill_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCCrazySkill::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCCrazySkill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_open_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(is_open_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCCrazySkill::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_open = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCCrazySkill::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCCrazySkill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // bool is_open = 2;
  if (this->is_open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_open(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCCrazySkill)
  return target;
}

size_t SCCrazySkill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCCrazySkill)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // bool is_open = 2;
  if (this->is_open() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCCrazySkill::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCCrazySkill)
  GOOGLE_DCHECK_NE(&from, this);
  const SCCrazySkill* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCCrazySkill>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCCrazySkill)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCCrazySkill)
    MergeFrom(*source);
  }
}

void SCCrazySkill::MergeFrom(const SCCrazySkill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCCrazySkill)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.is_open() != 0) {
    _internal_set_is_open(from._internal_is_open());
  }
}

void SCCrazySkill::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCCrazySkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCCrazySkill::CopyFrom(const SCCrazySkill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCCrazySkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCCrazySkill::IsInitialized() const {
  return true;
}

void SCCrazySkill::InternalSwap(SCCrazySkill* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCCrazySkill, is_open_)
      + sizeof(SCCrazySkill::is_open_)
      - PROTOBUF_FIELD_OFFSET(SCCrazySkill, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCCrazySkill::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSTrebleSkill::_Internal {
 public:
};

CSTrebleSkill::CSTrebleSkill(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSTrebleSkill)
}
CSTrebleSkill::CSTrebleSkill(const CSTrebleSkill& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_open_ = from.is_open_;
  // @@protoc_insertion_point(copy_constructor:F4BY.CSTrebleSkill)
}

void CSTrebleSkill::SharedCtor() {
  is_open_ = false;
}

CSTrebleSkill::~CSTrebleSkill() {
  // @@protoc_insertion_point(destructor:F4BY.CSTrebleSkill)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSTrebleSkill::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSTrebleSkill::ArenaDtor(void* object) {
  CSTrebleSkill* _this = reinterpret_cast< CSTrebleSkill* >(object);
  (void)_this;
}
void CSTrebleSkill::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSTrebleSkill::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSTrebleSkill& CSTrebleSkill::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSTrebleSkill_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSTrebleSkill::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSTrebleSkill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_open_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSTrebleSkill::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_open = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSTrebleSkill::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSTrebleSkill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_open = 1;
  if (this->is_open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_open(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSTrebleSkill)
  return target;
}

size_t CSTrebleSkill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSTrebleSkill)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_open = 1;
  if (this->is_open() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSTrebleSkill::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSTrebleSkill)
  GOOGLE_DCHECK_NE(&from, this);
  const CSTrebleSkill* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSTrebleSkill>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSTrebleSkill)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSTrebleSkill)
    MergeFrom(*source);
  }
}

void CSTrebleSkill::MergeFrom(const CSTrebleSkill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSTrebleSkill)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_open() != 0) {
    _internal_set_is_open(from._internal_is_open());
  }
}

void CSTrebleSkill::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSTrebleSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTrebleSkill::CopyFrom(const CSTrebleSkill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSTrebleSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTrebleSkill::IsInitialized() const {
  return true;
}

void CSTrebleSkill::InternalSwap(CSTrebleSkill* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(is_open_, other->is_open_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSTrebleSkill::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCTrebleSkill::_Internal {
 public:
};

SCTrebleSkill::SCTrebleSkill(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCTrebleSkill)
}
SCTrebleSkill::SCTrebleSkill(const SCTrebleSkill& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_open_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(is_open_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCTrebleSkill)
}

void SCTrebleSkill::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_open_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(is_open_));
}

SCTrebleSkill::~SCTrebleSkill() {
  // @@protoc_insertion_point(destructor:F4BY.SCTrebleSkill)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCTrebleSkill::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCTrebleSkill::ArenaDtor(void* object) {
  SCTrebleSkill* _this = reinterpret_cast< SCTrebleSkill* >(object);
  (void)_this;
}
void SCTrebleSkill::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCTrebleSkill::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCTrebleSkill& SCTrebleSkill::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCTrebleSkill_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCTrebleSkill::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCTrebleSkill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_open_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(is_open_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCTrebleSkill::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_open = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCTrebleSkill::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCTrebleSkill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // bool is_open = 2;
  if (this->is_open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_open(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCTrebleSkill)
  return target;
}

size_t SCTrebleSkill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCTrebleSkill)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // bool is_open = 2;
  if (this->is_open() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCTrebleSkill::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCTrebleSkill)
  GOOGLE_DCHECK_NE(&from, this);
  const SCTrebleSkill* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCTrebleSkill>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCTrebleSkill)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCTrebleSkill)
    MergeFrom(*source);
  }
}

void SCTrebleSkill::MergeFrom(const SCTrebleSkill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCTrebleSkill)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.is_open() != 0) {
    _internal_set_is_open(from._internal_is_open());
  }
}

void SCTrebleSkill::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCTrebleSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCTrebleSkill::CopyFrom(const SCTrebleSkill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCTrebleSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCTrebleSkill::IsInitialized() const {
  return true;
}

void SCTrebleSkill::InternalSwap(SCTrebleSkill* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCTrebleSkill, is_open_)
      + sizeof(SCTrebleSkill::is_open_)
      - PROTOBUF_FIELD_OFFSET(SCTrebleSkill, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCTrebleSkill::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSUserRunBackground::_Internal {
 public:
};

CSUserRunBackground::CSUserRunBackground(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSUserRunBackground)
}
CSUserRunBackground::CSUserRunBackground(const CSUserRunBackground& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  background_ = from.background_;
  // @@protoc_insertion_point(copy_constructor:F4BY.CSUserRunBackground)
}

void CSUserRunBackground::SharedCtor() {
  background_ = false;
}

CSUserRunBackground::~CSUserRunBackground() {
  // @@protoc_insertion_point(destructor:F4BY.CSUserRunBackground)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSUserRunBackground::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSUserRunBackground::ArenaDtor(void* object) {
  CSUserRunBackground* _this = reinterpret_cast< CSUserRunBackground* >(object);
  (void)_this;
}
void CSUserRunBackground::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSUserRunBackground::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSUserRunBackground& CSUserRunBackground::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSUserRunBackground_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSUserRunBackground::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSUserRunBackground)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  background_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSUserRunBackground::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool background = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          background_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSUserRunBackground::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSUserRunBackground)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool background = 1;
  if (this->background() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_background(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSUserRunBackground)
  return target;
}

size_t CSUserRunBackground::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSUserRunBackground)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool background = 1;
  if (this->background() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSUserRunBackground::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSUserRunBackground)
  GOOGLE_DCHECK_NE(&from, this);
  const CSUserRunBackground* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSUserRunBackground>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSUserRunBackground)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSUserRunBackground)
    MergeFrom(*source);
  }
}

void CSUserRunBackground::MergeFrom(const CSUserRunBackground& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSUserRunBackground)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.background() != 0) {
    _internal_set_background(from._internal_background());
  }
}

void CSUserRunBackground::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSUserRunBackground)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSUserRunBackground::CopyFrom(const CSUserRunBackground& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSUserRunBackground)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSUserRunBackground::IsInitialized() const {
  return true;
}

void CSUserRunBackground::InternalSwap(CSUserRunBackground* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(background_, other->background_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSUserRunBackground::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCUserRunBackground::_Internal {
 public:
};

SCUserRunBackground::SCUserRunBackground(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCUserRunBackground)
}
SCUserRunBackground::SCUserRunBackground(const SCUserRunBackground& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&background_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(background_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCUserRunBackground)
}

void SCUserRunBackground::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&background_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(background_));
}

SCUserRunBackground::~SCUserRunBackground() {
  // @@protoc_insertion_point(destructor:F4BY.SCUserRunBackground)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCUserRunBackground::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCUserRunBackground::ArenaDtor(void* object) {
  SCUserRunBackground* _this = reinterpret_cast< SCUserRunBackground* >(object);
  (void)_this;
}
void SCUserRunBackground::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCUserRunBackground::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCUserRunBackground& SCUserRunBackground::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCUserRunBackground_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCUserRunBackground::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCUserRunBackground)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&background_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(background_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCUserRunBackground::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool background = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          background_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCUserRunBackground::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCUserRunBackground)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // bool background = 2;
  if (this->background() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_background(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCUserRunBackground)
  return target;
}

size_t SCUserRunBackground::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCUserRunBackground)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // bool background = 2;
  if (this->background() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCUserRunBackground::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCUserRunBackground)
  GOOGLE_DCHECK_NE(&from, this);
  const SCUserRunBackground* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCUserRunBackground>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCUserRunBackground)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCUserRunBackground)
    MergeFrom(*source);
  }
}

void SCUserRunBackground::MergeFrom(const SCUserRunBackground& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCUserRunBackground)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.background() != 0) {
    _internal_set_background(from._internal_background());
  }
}

void SCUserRunBackground::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCUserRunBackground)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCUserRunBackground::CopyFrom(const SCUserRunBackground& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCUserRunBackground)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCUserRunBackground::IsInitialized() const {
  return true;
}

void SCUserRunBackground::InternalSwap(SCUserRunBackground* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCUserRunBackground, background_)
      + sizeof(SCUserRunBackground::background_)
      - PROTOBUF_FIELD_OFFSET(SCUserRunBackground, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCUserRunBackground::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSHeartBeat::_Internal {
 public:
};

CSHeartBeat::CSHeartBeat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSHeartBeat)
}
CSHeartBeat::CSHeartBeat(const CSHeartBeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:F4BY.CSHeartBeat)
}

void CSHeartBeat::SharedCtor() {
}

CSHeartBeat::~CSHeartBeat() {
  // @@protoc_insertion_point(destructor:F4BY.CSHeartBeat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSHeartBeat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSHeartBeat::ArenaDtor(void* object) {
  CSHeartBeat* _this = reinterpret_cast< CSHeartBeat* >(object);
  (void)_this;
}
void CSHeartBeat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSHeartBeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSHeartBeat& CSHeartBeat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSHeartBeat_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSHeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSHeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSHeartBeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSHeartBeat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSHeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSHeartBeat)
  return target;
}

size_t CSHeartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSHeartBeat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSHeartBeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  const CSHeartBeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSHeartBeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSHeartBeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSHeartBeat)
    MergeFrom(*source);
  }
}

void CSHeartBeat::MergeFrom(const CSHeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSHeartBeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSHeartBeat::CopyFrom(const CSHeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSHeartBeat::IsInitialized() const {
  return true;
}

void CSHeartBeat::InternalSwap(CSHeartBeat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSHeartBeat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCHeartBeat::_Internal {
 public:
};

SCHeartBeat::SCHeartBeat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCHeartBeat)
}
SCHeartBeat::SCHeartBeat(const SCHeartBeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:F4BY.SCHeartBeat)
}

void SCHeartBeat::SharedCtor() {
}

SCHeartBeat::~SCHeartBeat() {
  // @@protoc_insertion_point(destructor:F4BY.SCHeartBeat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCHeartBeat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCHeartBeat::ArenaDtor(void* object) {
  SCHeartBeat* _this = reinterpret_cast< SCHeartBeat* >(object);
  (void)_this;
}
void SCHeartBeat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCHeartBeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCHeartBeat& SCHeartBeat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCHeartBeat_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCHeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCHeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCHeartBeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCHeartBeat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCHeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCHeartBeat)
  return target;
}

size_t SCHeartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCHeartBeat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCHeartBeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  const SCHeartBeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCHeartBeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCHeartBeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCHeartBeat)
    MergeFrom(*source);
  }
}

void SCHeartBeat::MergeFrom(const SCHeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SCHeartBeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCHeartBeat::CopyFrom(const SCHeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCHeartBeat::IsInitialized() const {
  return true;
}

void SCHeartBeat::InternalSwap(SCHeartBeat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCHeartBeat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GunSpecEffect::_Internal {
 public:
};

GunSpecEffect::GunSpecEffect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.GunSpecEffect)
}
GunSpecEffect::GunSpecEffect(const GunSpecEffect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ratiolimit_, &from.ratiolimit_,
    static_cast<size_t>(reinterpret_cast<char*>(&double_tag_) -
    reinterpret_cast<char*>(&ratiolimit_)) + sizeof(double_tag_));
  // @@protoc_insertion_point(copy_constructor:F4BY.GunSpecEffect)
}

void GunSpecEffect::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ratiolimit_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&double_tag_) -
      reinterpret_cast<char*>(&ratiolimit_)) + sizeof(double_tag_));
}

GunSpecEffect::~GunSpecEffect() {
  // @@protoc_insertion_point(destructor:F4BY.GunSpecEffect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GunSpecEffect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GunSpecEffect::ArenaDtor(void* object) {
  GunSpecEffect* _this = reinterpret_cast< GunSpecEffect* >(object);
  (void)_this;
}
void GunSpecEffect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GunSpecEffect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GunSpecEffect& GunSpecEffect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GunSpecEffect_F4BY_2eproto.base);
  return *internal_default_instance();
}


void GunSpecEffect::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.GunSpecEffect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ratiolimit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&double_tag_) -
      reinterpret_cast<char*>(&ratiolimit_)) + sizeof(double_tag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GunSpecEffect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ratioLimit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ratiolimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float hitChangeRate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          hitchangerate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float moneyChangeRate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          moneychangerate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float violenceRate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          violencerate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float speedRate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          speedrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool advanced = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          advanced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool double_tag = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          double_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GunSpecEffect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.GunSpecEffect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ratioLimit = 1;
  if (this->ratiolimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ratiolimit(), target);
  }

  // float hitChangeRate = 2;
  if (!(this->hitchangerate() <= 0 && this->hitchangerate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_hitchangerate(), target);
  }

  // float moneyChangeRate = 3;
  if (!(this->moneychangerate() <= 0 && this->moneychangerate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_moneychangerate(), target);
  }

  // float violenceRate = 4;
  if (!(this->violencerate() <= 0 && this->violencerate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_violencerate(), target);
  }

  // float speedRate = 5;
  if (!(this->speedrate() <= 0 && this->speedrate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_speedrate(), target);
  }

  // bool advanced = 6;
  if (this->advanced() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_advanced(), target);
  }

  // bool double_tag = 7;
  if (this->double_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_double_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.GunSpecEffect)
  return target;
}

size_t GunSpecEffect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.GunSpecEffect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ratioLimit = 1;
  if (this->ratiolimit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratiolimit());
  }

  // float hitChangeRate = 2;
  if (!(this->hitchangerate() <= 0 && this->hitchangerate() >= 0)) {
    total_size += 1 + 4;
  }

  // float moneyChangeRate = 3;
  if (!(this->moneychangerate() <= 0 && this->moneychangerate() >= 0)) {
    total_size += 1 + 4;
  }

  // float violenceRate = 4;
  if (!(this->violencerate() <= 0 && this->violencerate() >= 0)) {
    total_size += 1 + 4;
  }

  // float speedRate = 5;
  if (!(this->speedrate() <= 0 && this->speedrate() >= 0)) {
    total_size += 1 + 4;
  }

  // bool advanced = 6;
  if (this->advanced() != 0) {
    total_size += 1 + 1;
  }

  // bool double_tag = 7;
  if (this->double_tag() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GunSpecEffect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.GunSpecEffect)
  GOOGLE_DCHECK_NE(&from, this);
  const GunSpecEffect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GunSpecEffect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.GunSpecEffect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.GunSpecEffect)
    MergeFrom(*source);
  }
}

void GunSpecEffect::MergeFrom(const GunSpecEffect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.GunSpecEffect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ratiolimit() != 0) {
    _internal_set_ratiolimit(from._internal_ratiolimit());
  }
  if (!(from.hitchangerate() <= 0 && from.hitchangerate() >= 0)) {
    _internal_set_hitchangerate(from._internal_hitchangerate());
  }
  if (!(from.moneychangerate() <= 0 && from.moneychangerate() >= 0)) {
    _internal_set_moneychangerate(from._internal_moneychangerate());
  }
  if (!(from.violencerate() <= 0 && from.violencerate() >= 0)) {
    _internal_set_violencerate(from._internal_violencerate());
  }
  if (!(from.speedrate() <= 0 && from.speedrate() >= 0)) {
    _internal_set_speedrate(from._internal_speedrate());
  }
  if (from.advanced() != 0) {
    _internal_set_advanced(from._internal_advanced());
  }
  if (from.double_tag() != 0) {
    _internal_set_double_tag(from._internal_double_tag());
  }
}

void GunSpecEffect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.GunSpecEffect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GunSpecEffect::CopyFrom(const GunSpecEffect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.GunSpecEffect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GunSpecEffect::IsInitialized() const {
  return true;
}

void GunSpecEffect::InternalSwap(GunSpecEffect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GunSpecEffect, double_tag_)
      + sizeof(GunSpecEffect::double_tag_)
      - PROTOBUF_FIELD_OFFSET(GunSpecEffect, ratiolimit_)>(
          reinterpret_cast<char*>(&ratiolimit_),
          reinterpret_cast<char*>(&other->ratiolimit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GunSpecEffect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WingsSpecEffect::_Internal {
 public:
};

WingsSpecEffect::WingsSpecEffect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.WingsSpecEffect)
}
WingsSpecEffect::WingsSpecEffect(const WingsSpecEffect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&speedrate_, &from.speedrate_,
    static_cast<size_t>(reinterpret_cast<char*>(&double_tag_) -
    reinterpret_cast<char*>(&speedrate_)) + sizeof(double_tag_));
  // @@protoc_insertion_point(copy_constructor:F4BY.WingsSpecEffect)
}

void WingsSpecEffect::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&speedrate_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&double_tag_) -
      reinterpret_cast<char*>(&speedrate_)) + sizeof(double_tag_));
}

WingsSpecEffect::~WingsSpecEffect() {
  // @@protoc_insertion_point(destructor:F4BY.WingsSpecEffect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WingsSpecEffect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WingsSpecEffect::ArenaDtor(void* object) {
  WingsSpecEffect* _this = reinterpret_cast< WingsSpecEffect* >(object);
  (void)_this;
}
void WingsSpecEffect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WingsSpecEffect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WingsSpecEffect& WingsSpecEffect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WingsSpecEffect_F4BY_2eproto.base);
  return *internal_default_instance();
}


void WingsSpecEffect::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.WingsSpecEffect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&speedrate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&double_tag_) -
      reinterpret_cast<char*>(&speedrate_)) + sizeof(double_tag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WingsSpecEffect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float speedRate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          speedrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 ratioLimit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ratiolimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float hitChangeRate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          hitchangerate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float moneyChangeRate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          moneychangerate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool advanced = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          advanced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool double_tag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          double_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WingsSpecEffect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.WingsSpecEffect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float speedRate = 1;
  if (!(this->speedrate() <= 0 && this->speedrate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_speedrate(), target);
  }

  // int32 ratioLimit = 2;
  if (this->ratiolimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ratiolimit(), target);
  }

  // float hitChangeRate = 3;
  if (!(this->hitchangerate() <= 0 && this->hitchangerate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_hitchangerate(), target);
  }

  // float moneyChangeRate = 4;
  if (!(this->moneychangerate() <= 0 && this->moneychangerate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_moneychangerate(), target);
  }

  // bool advanced = 5;
  if (this->advanced() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_advanced(), target);
  }

  // bool double_tag = 6;
  if (this->double_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_double_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.WingsSpecEffect)
  return target;
}

size_t WingsSpecEffect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.WingsSpecEffect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float speedRate = 1;
  if (!(this->speedrate() <= 0 && this->speedrate() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 ratioLimit = 2;
  if (this->ratiolimit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratiolimit());
  }

  // float hitChangeRate = 3;
  if (!(this->hitchangerate() <= 0 && this->hitchangerate() >= 0)) {
    total_size += 1 + 4;
  }

  // float moneyChangeRate = 4;
  if (!(this->moneychangerate() <= 0 && this->moneychangerate() >= 0)) {
    total_size += 1 + 4;
  }

  // bool advanced = 5;
  if (this->advanced() != 0) {
    total_size += 1 + 1;
  }

  // bool double_tag = 6;
  if (this->double_tag() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WingsSpecEffect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.WingsSpecEffect)
  GOOGLE_DCHECK_NE(&from, this);
  const WingsSpecEffect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WingsSpecEffect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.WingsSpecEffect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.WingsSpecEffect)
    MergeFrom(*source);
  }
}

void WingsSpecEffect::MergeFrom(const WingsSpecEffect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.WingsSpecEffect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.speedrate() <= 0 && from.speedrate() >= 0)) {
    _internal_set_speedrate(from._internal_speedrate());
  }
  if (from.ratiolimit() != 0) {
    _internal_set_ratiolimit(from._internal_ratiolimit());
  }
  if (!(from.hitchangerate() <= 0 && from.hitchangerate() >= 0)) {
    _internal_set_hitchangerate(from._internal_hitchangerate());
  }
  if (!(from.moneychangerate() <= 0 && from.moneychangerate() >= 0)) {
    _internal_set_moneychangerate(from._internal_moneychangerate());
  }
  if (from.advanced() != 0) {
    _internal_set_advanced(from._internal_advanced());
  }
  if (from.double_tag() != 0) {
    _internal_set_double_tag(from._internal_double_tag());
  }
}

void WingsSpecEffect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.WingsSpecEffect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WingsSpecEffect::CopyFrom(const WingsSpecEffect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.WingsSpecEffect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WingsSpecEffect::IsInitialized() const {
  return true;
}

void WingsSpecEffect::InternalSwap(WingsSpecEffect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WingsSpecEffect, double_tag_)
      + sizeof(WingsSpecEffect::double_tag_)
      - PROTOBUF_FIELD_OFFSET(WingsSpecEffect, speedrate_)>(
          reinterpret_cast<char*>(&speedrate_),
          reinterpret_cast<char*>(&other->speedrate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WingsSpecEffect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WingsInfo::_Internal {
 public:
  static const ::F4BY::WingsSpecEffect& wings_spec_effect(const WingsInfo* msg);
};

const ::F4BY::WingsSpecEffect&
WingsInfo::_Internal::wings_spec_effect(const WingsInfo* msg) {
  return *msg->wings_spec_effect_;
}
WingsInfo::WingsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.WingsInfo)
}
WingsInfo::WingsInfo(const WingsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_wings_spec_effect()) {
    wings_spec_effect_ = new ::F4BY::WingsSpecEffect(*from.wings_spec_effect_);
  } else {
    wings_spec_effect_ = nullptr;
  }
  ::memcpy(&wings_id_, &from.wings_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&wings_id_)) + sizeof(price_));
  // @@protoc_insertion_point(copy_constructor:F4BY.WingsInfo)
}

void WingsInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WingsInfo_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&wings_spec_effect_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&wings_spec_effect_)) + sizeof(price_));
}

WingsInfo::~WingsInfo() {
  // @@protoc_insertion_point(destructor:F4BY.WingsInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WingsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete wings_spec_effect_;
}

void WingsInfo::ArenaDtor(void* object) {
  WingsInfo* _this = reinterpret_cast< WingsInfo* >(object);
  (void)_this;
}
void WingsInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WingsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WingsInfo& WingsInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WingsInfo_F4BY_2eproto.base);
  return *internal_default_instance();
}


void WingsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.WingsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && wings_spec_effect_ != nullptr) {
    delete wings_spec_effect_;
  }
  wings_spec_effect_ = nullptr;
  ::memset(&wings_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&wings_id_)) + sizeof(price_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WingsInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 wings_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          wings_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .F4BY.WingsSpecEffect wings_spec_effect = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_wings_spec_effect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 receive_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          receive_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 activity_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          activity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool new_enable = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          new_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool double_tag = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          double_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WingsInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.WingsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 wings_id = 1;
  if (this->wings_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_wings_id(), target);
  }

  // bool enable = 2;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable(), target);
  }

  // .F4BY.WingsSpecEffect wings_spec_effect = 3;
  if (this->has_wings_spec_effect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::wings_spec_effect(this), target, stream);
  }

  // int32 receive_type = 4;
  if (this->receive_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_receive_type(), target);
  }

  // int32 activity_id = 5;
  if (this->activity_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_activity_id(), target);
  }

  // int32 price = 6;
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_price(), target);
  }

  // bool new_enable = 7;
  if (this->new_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_new_enable(), target);
  }

  // bool double_tag = 8;
  if (this->double_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_double_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.WingsInfo)
  return target;
}

size_t WingsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.WingsInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .F4BY.WingsSpecEffect wings_spec_effect = 3;
  if (this->has_wings_spec_effect()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *wings_spec_effect_);
  }

  // int32 wings_id = 1;
  if (this->wings_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wings_id());
  }

  // int32 receive_type = 4;
  if (this->receive_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_receive_type());
  }

  // int32 activity_id = 5;
  if (this->activity_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_activity_id());
  }

  // bool enable = 2;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // bool new_enable = 7;
  if (this->new_enable() != 0) {
    total_size += 1 + 1;
  }

  // bool double_tag = 8;
  if (this->double_tag() != 0) {
    total_size += 1 + 1;
  }

  // int32 price = 6;
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_price());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WingsInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.WingsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const WingsInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WingsInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.WingsInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.WingsInfo)
    MergeFrom(*source);
  }
}

void WingsInfo::MergeFrom(const WingsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.WingsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_wings_spec_effect()) {
    _internal_mutable_wings_spec_effect()->::F4BY::WingsSpecEffect::MergeFrom(from._internal_wings_spec_effect());
  }
  if (from.wings_id() != 0) {
    _internal_set_wings_id(from._internal_wings_id());
  }
  if (from.receive_type() != 0) {
    _internal_set_receive_type(from._internal_receive_type());
  }
  if (from.activity_id() != 0) {
    _internal_set_activity_id(from._internal_activity_id());
  }
  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
  if (from.new_enable() != 0) {
    _internal_set_new_enable(from._internal_new_enable());
  }
  if (from.double_tag() != 0) {
    _internal_set_double_tag(from._internal_double_tag());
  }
  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
}

void WingsInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.WingsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WingsInfo::CopyFrom(const WingsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.WingsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WingsInfo::IsInitialized() const {
  return true;
}

void WingsInfo::InternalSwap(WingsInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WingsInfo, price_)
      + sizeof(WingsInfo::price_)
      - PROTOBUF_FIELD_OFFSET(WingsInfo, wings_spec_effect_)>(
          reinterpret_cast<char*>(&wings_spec_effect_),
          reinterpret_cast<char*>(&other->wings_spec_effect_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WingsInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GunInfo::_Internal {
 public:
  static const ::F4BY::GunSpecEffect& gunspeceffect(const GunInfo* msg);
};

const ::F4BY::GunSpecEffect&
GunInfo::_Internal::gunspeceffect(const GunInfo* msg) {
  return *msg->gunspeceffect_;
}
GunInfo::GunInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.GunInfo)
}
GunInfo::GunInfo(const GunInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gunspeceffect()) {
    gunspeceffect_ = new ::F4BY::GunSpecEffect(*from.gunspeceffect_);
  } else {
    gunspeceffect_ = nullptr;
  }
  ::memcpy(&gun_level_, &from.gun_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&activity_id_) -
    reinterpret_cast<char*>(&gun_level_)) + sizeof(activity_id_));
  // @@protoc_insertion_point(copy_constructor:F4BY.GunInfo)
}

void GunInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GunInfo_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gunspeceffect_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&activity_id_) -
      reinterpret_cast<char*>(&gunspeceffect_)) + sizeof(activity_id_));
}

GunInfo::~GunInfo() {
  // @@protoc_insertion_point(destructor:F4BY.GunInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GunInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete gunspeceffect_;
}

void GunInfo::ArenaDtor(void* object) {
  GunInfo* _this = reinterpret_cast< GunInfo* >(object);
  (void)_this;
}
void GunInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GunInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GunInfo& GunInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GunInfo_F4BY_2eproto.base);
  return *internal_default_instance();
}


void GunInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.GunInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && gunspeceffect_ != nullptr) {
    delete gunspeceffect_;
  }
  gunspeceffect_ = nullptr;
  ::memset(&gun_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&activity_id_) -
      reinterpret_cast<char*>(&gun_level_)) + sizeof(activity_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GunInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 gun_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gun_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio_min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ratio_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio_max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ratio_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool new_enable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          new_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_vip = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vip_limit = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          vip_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_member = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          is_member_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 member_sec = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          member_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 extra_data = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          extra_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .F4BY.GunSpecEffect gunSpecEffect = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_gunspeceffect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 price = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float attack_speed = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          attack_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rage = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          rage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 activity_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          activity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GunInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.GunInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gun_level = 1;
  if (this->gun_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_gun_level(), target);
  }

  // int32 ratio_min = 2;
  if (this->ratio_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ratio_min(), target);
  }

  // int32 ratio_max = 3;
  if (this->ratio_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ratio_max(), target);
  }

  // bool enable = 4;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_enable(), target);
  }

  // bool new_enable = 5;
  if (this->new_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_new_enable(), target);
  }

  // bool is_vip = 6;
  if (this->is_vip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_vip(), target);
  }

  // int32 vip_limit = 7;
  if (this->vip_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_vip_limit(), target);
  }

  // bool is_member = 8;
  if (this->is_member() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_member(), target);
  }

  // int32 member_sec = 9;
  if (this->member_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_member_sec(), target);
  }

  // int32 extra_data = 10;
  if (this->extra_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_extra_data(), target);
  }

  // .F4BY.GunSpecEffect gunSpecEffect = 11;
  if (this->has_gunspeceffect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::gunspeceffect(this), target, stream);
  }

  // int32 price = 12;
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_price(), target);
  }

  // float attack_speed = 13;
  if (!(this->attack_speed() <= 0 && this->attack_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_attack_speed(), target);
  }

  // float rage = 14;
  if (!(this->rage() <= 0 && this->rage() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_rage(), target);
  }

  // int32 activity_id = 15;
  if (this->activity_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_activity_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.GunInfo)
  return target;
}

size_t GunInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.GunInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .F4BY.GunSpecEffect gunSpecEffect = 11;
  if (this->has_gunspeceffect()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gunspeceffect_);
  }

  // int32 gun_level = 1;
  if (this->gun_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gun_level());
  }

  // int32 ratio_min = 2;
  if (this->ratio_min() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio_min());
  }

  // int32 ratio_max = 3;
  if (this->ratio_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio_max());
  }

  // bool enable = 4;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // bool new_enable = 5;
  if (this->new_enable() != 0) {
    total_size += 1 + 1;
  }

  // bool is_vip = 6;
  if (this->is_vip() != 0) {
    total_size += 1 + 1;
  }

  // bool is_member = 8;
  if (this->is_member() != 0) {
    total_size += 1 + 1;
  }

  // int32 vip_limit = 7;
  if (this->vip_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vip_limit());
  }

  // int32 member_sec = 9;
  if (this->member_sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_member_sec());
  }

  // int32 extra_data = 10;
  if (this->extra_data() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_extra_data());
  }

  // int32 price = 12;
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_price());
  }

  // float attack_speed = 13;
  if (!(this->attack_speed() <= 0 && this->attack_speed() >= 0)) {
    total_size += 1 + 4;
  }

  // float rage = 14;
  if (!(this->rage() <= 0 && this->rage() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 activity_id = 15;
  if (this->activity_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_activity_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GunInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.GunInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GunInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GunInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.GunInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.GunInfo)
    MergeFrom(*source);
  }
}

void GunInfo::MergeFrom(const GunInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.GunInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gunspeceffect()) {
    _internal_mutable_gunspeceffect()->::F4BY::GunSpecEffect::MergeFrom(from._internal_gunspeceffect());
  }
  if (from.gun_level() != 0) {
    _internal_set_gun_level(from._internal_gun_level());
  }
  if (from.ratio_min() != 0) {
    _internal_set_ratio_min(from._internal_ratio_min());
  }
  if (from.ratio_max() != 0) {
    _internal_set_ratio_max(from._internal_ratio_max());
  }
  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
  if (from.new_enable() != 0) {
    _internal_set_new_enable(from._internal_new_enable());
  }
  if (from.is_vip() != 0) {
    _internal_set_is_vip(from._internal_is_vip());
  }
  if (from.is_member() != 0) {
    _internal_set_is_member(from._internal_is_member());
  }
  if (from.vip_limit() != 0) {
    _internal_set_vip_limit(from._internal_vip_limit());
  }
  if (from.member_sec() != 0) {
    _internal_set_member_sec(from._internal_member_sec());
  }
  if (from.extra_data() != 0) {
    _internal_set_extra_data(from._internal_extra_data());
  }
  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (!(from.attack_speed() <= 0 && from.attack_speed() >= 0)) {
    _internal_set_attack_speed(from._internal_attack_speed());
  }
  if (!(from.rage() <= 0 && from.rage() >= 0)) {
    _internal_set_rage(from._internal_rage());
  }
  if (from.activity_id() != 0) {
    _internal_set_activity_id(from._internal_activity_id());
  }
}

void GunInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.GunInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GunInfo::CopyFrom(const GunInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.GunInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GunInfo::IsInitialized() const {
  return true;
}

void GunInfo::InternalSwap(GunInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GunInfo, activity_id_)
      + sizeof(GunInfo::activity_id_)
      - PROTOBUF_FIELD_OFFSET(GunInfo, gunspeceffect_)>(
          reinterpret_cast<char*>(&gunspeceffect_),
          reinterpret_cast<char*>(&other->gunspeceffect_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GunInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VipInfo::_Internal {
 public:
};

VipInfo::VipInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.VipInfo)
}
VipInfo::VipInfo(const VipInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&old_vip_, &from.old_vip_,
    static_cast<size_t>(reinterpret_cast<char*>(&cur_vip_) -
    reinterpret_cast<char*>(&old_vip_)) + sizeof(cur_vip_));
  // @@protoc_insertion_point(copy_constructor:F4BY.VipInfo)
}

void VipInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&old_vip_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&cur_vip_) -
      reinterpret_cast<char*>(&old_vip_)) + sizeof(cur_vip_));
}

VipInfo::~VipInfo() {
  // @@protoc_insertion_point(destructor:F4BY.VipInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VipInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VipInfo::ArenaDtor(void* object) {
  VipInfo* _this = reinterpret_cast< VipInfo* >(object);
  (void)_this;
}
void VipInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VipInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VipInfo& VipInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VipInfo_F4BY_2eproto.base);
  return *internal_default_instance();
}


void VipInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.VipInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&old_vip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_vip_) -
      reinterpret_cast<char*>(&old_vip_)) + sizeof(cur_vip_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VipInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 old_vip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          old_vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cur_vip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cur_vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VipInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.VipInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 old_vip = 1;
  if (this->old_vip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_old_vip(), target);
  }

  // int32 cur_vip = 2;
  if (this->cur_vip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cur_vip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.VipInfo)
  return target;
}

size_t VipInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.VipInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 old_vip = 1;
  if (this->old_vip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_old_vip());
  }

  // int32 cur_vip = 2;
  if (this->cur_vip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur_vip());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VipInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.VipInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VipInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VipInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.VipInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.VipInfo)
    MergeFrom(*source);
  }
}

void VipInfo::MergeFrom(const VipInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.VipInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.old_vip() != 0) {
    _internal_set_old_vip(from._internal_old_vip());
  }
  if (from.cur_vip() != 0) {
    _internal_set_cur_vip(from._internal_cur_vip());
  }
}

void VipInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.VipInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VipInfo::CopyFrom(const VipInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.VipInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VipInfo::IsInitialized() const {
  return true;
}

void VipInfo::InternalSwap(VipInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VipInfo, cur_vip_)
      + sizeof(VipInfo::cur_vip_)
      - PROTOBUF_FIELD_OFFSET(VipInfo, old_vip_)>(
          reinterpret_cast<char*>(&old_vip_),
          reinterpret_cast<char*>(&other->old_vip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VipInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PropInfo::_Internal {
 public:
  static const ::F4BY::Object& prop(const PropInfo* msg);
};

const ::F4BY::Object&
PropInfo::_Internal::prop(const PropInfo* msg) {
  return *msg->prop_;
}
PropInfo::PropInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.PropInfo)
}
PropInfo::PropInfo(const PropInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_prop()) {
    prop_ = new ::F4BY::Object(*from.prop_);
  } else {
    prop_ = nullptr;
  }
  enable_ = from.enable_;
  // @@protoc_insertion_point(copy_constructor:F4BY.PropInfo)
}

void PropInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PropInfo_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&prop_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&enable_) -
      reinterpret_cast<char*>(&prop_)) + sizeof(enable_));
}

PropInfo::~PropInfo() {
  // @@protoc_insertion_point(destructor:F4BY.PropInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PropInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete prop_;
}

void PropInfo::ArenaDtor(void* object) {
  PropInfo* _this = reinterpret_cast< PropInfo* >(object);
  (void)_this;
}
void PropInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PropInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PropInfo& PropInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PropInfo_F4BY_2eproto.base);
  return *internal_default_instance();
}


void PropInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.PropInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && prop_ != nullptr) {
    delete prop_;
  }
  prop_ = nullptr;
  enable_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .F4BY.Object prop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_prop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PropInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.PropInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  // .F4BY.Object prop = 2;
  if (this->has_prop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::prop(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.PropInfo)
  return target;
}

size_t PropInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.PropInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .F4BY.Object prop = 2;
  if (this->has_prop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prop_);
  }

  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.PropInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PropInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PropInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.PropInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.PropInfo)
    MergeFrom(*source);
  }
}

void PropInfo::MergeFrom(const PropInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.PropInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_prop()) {
    _internal_mutable_prop()->::F4BY::Object::MergeFrom(from._internal_prop());
  }
  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
}

void PropInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.PropInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropInfo::CopyFrom(const PropInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.PropInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropInfo::IsInitialized() const {
  return true;
}

void PropInfo::InternalSwap(PropInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PropInfo, enable_)
      + sizeof(PropInfo::enable_)
      - PROTOBUF_FIELD_OFFSET(PropInfo, prop_)>(
          reinterpret_cast<char*>(&prop_),
          reinterpret_cast<char*>(&other->prop_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PropInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSUserInfoNotify::_Internal {
 public:
};

CSUserInfoNotify::CSUserInfoNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSUserInfoNotify)
}
CSUserInfoNotify::CSUserInfoNotify(const CSUserInfoNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  broadcast_ = from.broadcast_;
  // @@protoc_insertion_point(copy_constructor:F4BY.CSUserInfoNotify)
}

void CSUserInfoNotify::SharedCtor() {
  broadcast_ = false;
}

CSUserInfoNotify::~CSUserInfoNotify() {
  // @@protoc_insertion_point(destructor:F4BY.CSUserInfoNotify)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSUserInfoNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSUserInfoNotify::ArenaDtor(void* object) {
  CSUserInfoNotify* _this = reinterpret_cast< CSUserInfoNotify* >(object);
  (void)_this;
}
void CSUserInfoNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSUserInfoNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSUserInfoNotify& CSUserInfoNotify::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSUserInfoNotify_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSUserInfoNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSUserInfoNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcast_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSUserInfoNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool broadcast = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          broadcast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSUserInfoNotify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSUserInfoNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool broadcast = 1;
  if (this->broadcast() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_broadcast(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSUserInfoNotify)
  return target;
}

size_t CSUserInfoNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSUserInfoNotify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool broadcast = 1;
  if (this->broadcast() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSUserInfoNotify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSUserInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const CSUserInfoNotify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSUserInfoNotify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSUserInfoNotify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSUserInfoNotify)
    MergeFrom(*source);
  }
}

void CSUserInfoNotify::MergeFrom(const CSUserInfoNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSUserInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.broadcast() != 0) {
    _internal_set_broadcast(from._internal_broadcast());
  }
}

void CSUserInfoNotify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSUserInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSUserInfoNotify::CopyFrom(const CSUserInfoNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSUserInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSUserInfoNotify::IsInitialized() const {
  return true;
}

void CSUserInfoNotify::InternalSwap(CSUserInfoNotify* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(broadcast_, other->broadcast_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSUserInfoNotify::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCUserInfoNotify::_Internal {
 public:
  static const ::F4BY::VipInfo& vip_info(const SCUserInfoNotify* msg);
};

const ::F4BY::VipInfo&
SCUserInfoNotify::_Internal::vip_info(const SCUserInfoNotify* msg) {
  return *msg->vip_info_;
}
SCUserInfoNotify::SCUserInfoNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  gun_info_(arena),
  wings_info_(arena),
  prop_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCUserInfoNotify)
}
SCUserInfoNotify::SCUserInfoNotify(const SCUserInfoNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      gun_info_(from.gun_info_),
      wings_info_(from.wings_info_),
      prop_info_(from.prop_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vip_info()) {
    vip_info_ = new ::F4BY::VipInfo(*from.vip_info_);
  } else {
    vip_info_ = nullptr;
  }
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_wings_propid_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(last_wings_propid_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCUserInfoNotify)
}

void SCUserInfoNotify::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCUserInfoNotify_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&vip_info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&last_wings_propid_) -
      reinterpret_cast<char*>(&vip_info_)) + sizeof(last_wings_propid_));
}

SCUserInfoNotify::~SCUserInfoNotify() {
  // @@protoc_insertion_point(destructor:F4BY.SCUserInfoNotify)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCUserInfoNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete vip_info_;
}

void SCUserInfoNotify::ArenaDtor(void* object) {
  SCUserInfoNotify* _this = reinterpret_cast< SCUserInfoNotify* >(object);
  (void)_this;
}
void SCUserInfoNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCUserInfoNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCUserInfoNotify& SCUserInfoNotify::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCUserInfoNotify_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCUserInfoNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCUserInfoNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gun_info_.Clear();
  wings_info_.Clear();
  prop_info_.Clear();
  if (GetArena() == nullptr && vip_info_ != nullptr) {
    delete vip_info_;
  }
  vip_info_ = nullptr;
  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_wings_propid_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(last_wings_propid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCUserInfoNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .F4BY.GunInfo gun_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gun_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .F4BY.WingsInfo wings_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_wings_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .F4BY.VipInfo vip_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_vip_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .F4BY.PropInfo prop_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prop_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 last_gun_level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          last_gun_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 last_ratio = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          last_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 last_wings_propId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          last_wings_propid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCUserInfoNotify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCUserInfoNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // repeated .F4BY.GunInfo gun_info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gun_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_gun_info(i), target, stream);
  }

  // repeated .F4BY.WingsInfo wings_info = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_wings_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_wings_info(i), target, stream);
  }

  // .F4BY.VipInfo vip_info = 4;
  if (this->has_vip_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::vip_info(this), target, stream);
  }

  // repeated .F4BY.PropInfo prop_info = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_prop_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_prop_info(i), target, stream);
  }

  // int32 last_gun_level = 6;
  if (this->last_gun_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_last_gun_level(), target);
  }

  // int32 last_ratio = 7;
  if (this->last_ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_last_ratio(), target);
  }

  // int32 last_wings_propId = 8;
  if (this->last_wings_propid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_last_wings_propid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCUserInfoNotify)
  return target;
}

size_t SCUserInfoNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCUserInfoNotify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.GunInfo gun_info = 2;
  total_size += 1UL * this->_internal_gun_info_size();
  for (const auto& msg : this->gun_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .F4BY.WingsInfo wings_info = 3;
  total_size += 1UL * this->_internal_wings_info_size();
  for (const auto& msg : this->wings_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .F4BY.PropInfo prop_info = 5;
  total_size += 1UL * this->_internal_prop_info_size();
  for (const auto& msg : this->prop_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .F4BY.VipInfo vip_info = 4;
  if (this->has_vip_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vip_info_);
  }

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 last_gun_level = 6;
  if (this->last_gun_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_last_gun_level());
  }

  // int32 last_ratio = 7;
  if (this->last_ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_last_ratio());
  }

  // int32 last_wings_propId = 8;
  if (this->last_wings_propid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_last_wings_propid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCUserInfoNotify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCUserInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const SCUserInfoNotify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCUserInfoNotify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCUserInfoNotify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCUserInfoNotify)
    MergeFrom(*source);
  }
}

void SCUserInfoNotify::MergeFrom(const SCUserInfoNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCUserInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gun_info_.MergeFrom(from.gun_info_);
  wings_info_.MergeFrom(from.wings_info_);
  prop_info_.MergeFrom(from.prop_info_);
  if (from.has_vip_info()) {
    _internal_mutable_vip_info()->::F4BY::VipInfo::MergeFrom(from._internal_vip_info());
  }
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.last_gun_level() != 0) {
    _internal_set_last_gun_level(from._internal_last_gun_level());
  }
  if (from.last_ratio() != 0) {
    _internal_set_last_ratio(from._internal_last_ratio());
  }
  if (from.last_wings_propid() != 0) {
    _internal_set_last_wings_propid(from._internal_last_wings_propid());
  }
}

void SCUserInfoNotify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCUserInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCUserInfoNotify::CopyFrom(const SCUserInfoNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCUserInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCUserInfoNotify::IsInitialized() const {
  return true;
}

void SCUserInfoNotify::InternalSwap(SCUserInfoNotify* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gun_info_.InternalSwap(&other->gun_info_);
  wings_info_.InternalSwap(&other->wings_info_);
  prop_info_.InternalSwap(&other->prop_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCUserInfoNotify, last_wings_propid_)
      + sizeof(SCUserInfoNotify::last_wings_propid_)
      - PROTOBUF_FIELD_OFFSET(SCUserInfoNotify, vip_info_)>(
          reinterpret_cast<char*>(&vip_info_),
          reinterpret_cast<char*>(&other->vip_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCUserInfoNotify::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGameInfoNotify::_Internal {
 public:
};

SCGameInfoNotify::SCGameInfoNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  award_fish_(arena),
  user_pool_limit_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCGameInfoNotify)
}
SCGameInfoNotify::SCGameInfoNotify(const SCGameInfoNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      award_fish_(from.award_fish_),
      user_pool_limit_(from.user_pool_limit_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_pool_ = from.user_pool_;
  // @@protoc_insertion_point(copy_constructor:F4BY.SCGameInfoNotify)
}

void SCGameInfoNotify::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCGameInfoNotify_F4BY_2eproto.base);
  user_pool_ = false;
}

SCGameInfoNotify::~SCGameInfoNotify() {
  // @@protoc_insertion_point(destructor:F4BY.SCGameInfoNotify)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGameInfoNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCGameInfoNotify::ArenaDtor(void* object) {
  SCGameInfoNotify* _this = reinterpret_cast< SCGameInfoNotify* >(object);
  (void)_this;
}
void SCGameInfoNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGameInfoNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGameInfoNotify& SCGameInfoNotify::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGameInfoNotify_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCGameInfoNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCGameInfoNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  award_fish_.Clear();
  user_pool_limit_.Clear();
  user_pool_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGameInfoNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool user_pool = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_pool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 award_fish = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_award_fish(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_award_fish(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .F4BY.Object3 user_pool_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user_pool_limit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGameInfoNotify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCGameInfoNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool user_pool = 1;
  if (this->user_pool() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_user_pool(), target);
  }

  // repeated int32 award_fish = 2;
  {
    int byte_size = _award_fish_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_award_fish(), byte_size, target);
    }
  }

  // repeated .F4BY.Object3 user_pool_limit = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_user_pool_limit_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_user_pool_limit(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCGameInfoNotify)
  return target;
}

size_t SCGameInfoNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCGameInfoNotify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 award_fish = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->award_fish_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _award_fish_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .F4BY.Object3 user_pool_limit = 3;
  total_size += 1UL * this->_internal_user_pool_limit_size();
  for (const auto& msg : this->user_pool_limit_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool user_pool = 1;
  if (this->user_pool() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGameInfoNotify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCGameInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGameInfoNotify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGameInfoNotify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCGameInfoNotify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCGameInfoNotify)
    MergeFrom(*source);
  }
}

void SCGameInfoNotify::MergeFrom(const SCGameInfoNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCGameInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  award_fish_.MergeFrom(from.award_fish_);
  user_pool_limit_.MergeFrom(from.user_pool_limit_);
  if (from.user_pool() != 0) {
    _internal_set_user_pool(from._internal_user_pool());
  }
}

void SCGameInfoNotify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCGameInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGameInfoNotify::CopyFrom(const SCGameInfoNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCGameInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGameInfoNotify::IsInitialized() const {
  return true;
}

void SCGameInfoNotify::InternalSwap(SCGameInfoNotify* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  award_fish_.InternalSwap(&other->award_fish_);
  user_pool_limit_.InternalSwap(&other->user_pool_limit_);
  swap(user_pool_, other->user_pool_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGameInfoNotify::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCInfoRedDot::_Internal {
 public:
};

SCInfoRedDot::SCInfoRedDot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCInfoRedDot)
}
SCInfoRedDot::SCInfoRedDot(const SCInfoRedDot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&seven_day_, &from.seven_day_,
    static_cast<size_t>(reinterpret_cast<char*>(&red_dot_) -
    reinterpret_cast<char*>(&seven_day_)) + sizeof(red_dot_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCInfoRedDot)
}

void SCInfoRedDot::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&seven_day_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&red_dot_) -
      reinterpret_cast<char*>(&seven_day_)) + sizeof(red_dot_));
}

SCInfoRedDot::~SCInfoRedDot() {
  // @@protoc_insertion_point(destructor:F4BY.SCInfoRedDot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCInfoRedDot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCInfoRedDot::ArenaDtor(void* object) {
  SCInfoRedDot* _this = reinterpret_cast< SCInfoRedDot* >(object);
  (void)_this;
}
void SCInfoRedDot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCInfoRedDot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCInfoRedDot& SCInfoRedDot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCInfoRedDot_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCInfoRedDot::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCInfoRedDot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&seven_day_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&red_dot_) -
      reinterpret_cast<char*>(&seven_day_)) + sizeof(red_dot_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCInfoRedDot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool seven_day = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seven_day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool red_dot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          red_dot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCInfoRedDot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCInfoRedDot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool seven_day = 1;
  if (this->seven_day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_seven_day(), target);
  }

  // bool red_dot = 2;
  if (this->red_dot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_red_dot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCInfoRedDot)
  return target;
}

size_t SCInfoRedDot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCInfoRedDot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool seven_day = 1;
  if (this->seven_day() != 0) {
    total_size += 1 + 1;
  }

  // bool red_dot = 2;
  if (this->red_dot() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCInfoRedDot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCInfoRedDot)
  GOOGLE_DCHECK_NE(&from, this);
  const SCInfoRedDot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCInfoRedDot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCInfoRedDot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCInfoRedDot)
    MergeFrom(*source);
  }
}

void SCInfoRedDot::MergeFrom(const SCInfoRedDot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCInfoRedDot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seven_day() != 0) {
    _internal_set_seven_day(from._internal_seven_day());
  }
  if (from.red_dot() != 0) {
    _internal_set_red_dot(from._internal_red_dot());
  }
}

void SCInfoRedDot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCInfoRedDot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCInfoRedDot::CopyFrom(const SCInfoRedDot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCInfoRedDot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCInfoRedDot::IsInitialized() const {
  return true;
}

void SCInfoRedDot::InternalSwap(SCInfoRedDot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCInfoRedDot, red_dot_)
      + sizeof(SCInfoRedDot::red_dot_)
      - PROTOBUF_FIELD_OFFSET(SCInfoRedDot, seven_day_)>(
          reinterpret_cast<char*>(&seven_day_),
          reinterpret_cast<char*>(&other->seven_day_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCInfoRedDot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class JumpHighArena::_Internal {
 public:
};

JumpHighArena::JumpHighArena(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.JumpHighArena)
}
JumpHighArena::JumpHighArena(const JumpHighArena& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tips_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tips().empty()) {
    tips_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tips(), 
      GetArena());
  }
  ::memcpy(&is_open_, &from.is_open_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_time_) -
    reinterpret_cast<char*>(&is_open_)) + sizeof(game_time_));
  // @@protoc_insertion_point(copy_constructor:F4BY.JumpHighArena)
}

void JumpHighArena::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JumpHighArena_F4BY_2eproto.base);
  tips_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&is_open_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&game_time_) -
      reinterpret_cast<char*>(&is_open_)) + sizeof(game_time_));
}

JumpHighArena::~JumpHighArena() {
  // @@protoc_insertion_point(destructor:F4BY.JumpHighArena)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JumpHighArena::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tips_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JumpHighArena::ArenaDtor(void* object) {
  JumpHighArena* _this = reinterpret_cast< JumpHighArena* >(object);
  (void)_this;
}
void JumpHighArena::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JumpHighArena::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JumpHighArena& JumpHighArena::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JumpHighArena_F4BY_2eproto.base);
  return *internal_default_instance();
}


void JumpHighArena::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.JumpHighArena)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tips_.ClearToEmpty();
  ::memset(&is_open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_time_) -
      reinterpret_cast<char*>(&is_open_)) + sizeof(game_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JumpHighArena::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_open = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 coin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 game_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tips = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_tips();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "F4BY.JumpHighArena.tips"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JumpHighArena::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.JumpHighArena)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_open = 1;
  if (this->is_open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_open(), target);
  }

  // int32 vip = 2;
  if (this->vip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_vip(), target);
  }

  // int32 coin = 3;
  if (this->coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_coin(), target);
  }

  // int32 game_time = 4;
  if (this->game_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_game_time(), target);
  }

  // string tips = 5;
  if (this->tips().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tips().data(), static_cast<int>(this->_internal_tips().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "F4BY.JumpHighArena.tips");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_tips(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.JumpHighArena)
  return target;
}

size_t JumpHighArena::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.JumpHighArena)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tips = 5;
  if (this->tips().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tips());
  }

  // bool is_open = 1;
  if (this->is_open() != 0) {
    total_size += 1 + 1;
  }

  // int32 vip = 2;
  if (this->vip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vip());
  }

  // int32 coin = 3;
  if (this->coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_coin());
  }

  // int32 game_time = 4;
  if (this->game_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JumpHighArena::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.JumpHighArena)
  GOOGLE_DCHECK_NE(&from, this);
  const JumpHighArena* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JumpHighArena>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.JumpHighArena)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.JumpHighArena)
    MergeFrom(*source);
  }
}

void JumpHighArena::MergeFrom(const JumpHighArena& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.JumpHighArena)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tips().size() > 0) {
    _internal_set_tips(from._internal_tips());
  }
  if (from.is_open() != 0) {
    _internal_set_is_open(from._internal_is_open());
  }
  if (from.vip() != 0) {
    _internal_set_vip(from._internal_vip());
  }
  if (from.coin() != 0) {
    _internal_set_coin(from._internal_coin());
  }
  if (from.game_time() != 0) {
    _internal_set_game_time(from._internal_game_time());
  }
}

void JumpHighArena::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.JumpHighArena)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JumpHighArena::CopyFrom(const JumpHighArena& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.JumpHighArena)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JumpHighArena::IsInitialized() const {
  return true;
}

void JumpHighArena::InternalSwap(JumpHighArena* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tips_.Swap(&other->tips_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JumpHighArena, game_time_)
      + sizeof(JumpHighArena::game_time_)
      - PROTOBUF_FIELD_OFFSET(JumpHighArena, is_open_)>(
          reinterpret_cast<char*>(&is_open_),
          reinterpret_cast<char*>(&other->is_open_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JumpHighArena::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCActivityInfo::_Internal {
 public:
  static const ::F4BY::JumpHighArena& jump(const SCActivityInfo* msg);
};

const ::F4BY::JumpHighArena&
SCActivityInfo::_Internal::jump(const SCActivityInfo* msg) {
  return *msg->jump_;
}
SCActivityInfo::SCActivityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCActivityInfo)
}
SCActivityInfo::SCActivityInfo(const SCActivityInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_jump()) {
    jump_ = new ::F4BY::JumpHighArena(*from.jump_);
  } else {
    jump_ = nullptr;
  }
  ::memcpy(&limit_, &from.limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&pool_is_open_) -
    reinterpret_cast<char*>(&limit_)) + sizeof(pool_is_open_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCActivityInfo)
}

void SCActivityInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCActivityInfo_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&jump_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&pool_is_open_) -
      reinterpret_cast<char*>(&jump_)) + sizeof(pool_is_open_));
}

SCActivityInfo::~SCActivityInfo() {
  // @@protoc_insertion_point(destructor:F4BY.SCActivityInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCActivityInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete jump_;
}

void SCActivityInfo::ArenaDtor(void* object) {
  SCActivityInfo* _this = reinterpret_cast< SCActivityInfo* >(object);
  (void)_this;
}
void SCActivityInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCActivityInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCActivityInfo& SCActivityInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCActivityInfo_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCActivityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCActivityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && jump_ != nullptr) {
    delete jump_;
  }
  jump_ = nullptr;
  ::memset(&limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pool_is_open_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(pool_is_open_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCActivityInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .F4BY.JumpHighArena jump = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_jump(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool pool_is_open = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pool_is_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCActivityInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCActivityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .F4BY.JumpHighArena jump = 1;
  if (this->has_jump()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::jump(this), target, stream);
  }

  // int32 limit = 2;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_limit(), target);
  }

  // bool pool_is_open = 3;
  if (this->pool_is_open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_pool_is_open(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCActivityInfo)
  return target;
}

size_t SCActivityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCActivityInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .F4BY.JumpHighArena jump = 1;
  if (this->has_jump()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *jump_);
  }

  // int32 limit = 2;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_limit());
  }

  // bool pool_is_open = 3;
  if (this->pool_is_open() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCActivityInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCActivityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCActivityInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCActivityInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCActivityInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCActivityInfo)
    MergeFrom(*source);
  }
}

void SCActivityInfo::MergeFrom(const SCActivityInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCActivityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_jump()) {
    _internal_mutable_jump()->::F4BY::JumpHighArena::MergeFrom(from._internal_jump());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  if (from.pool_is_open() != 0) {
    _internal_set_pool_is_open(from._internal_pool_is_open());
  }
}

void SCActivityInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCActivityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCActivityInfo::CopyFrom(const SCActivityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCActivityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCActivityInfo::IsInitialized() const {
  return true;
}

void SCActivityInfo::InternalSwap(SCActivityInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCActivityInfo, pool_is_open_)
      + sizeof(SCActivityInfo::pool_is_open_)
      - PROTOBUF_FIELD_OFFSET(SCActivityInfo, jump_)>(
          reinterpret_cast<char*>(&jump_),
          reinterpret_cast<char*>(&other->jump_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCActivityInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSChat::_Internal {
 public:
};

CSChat::CSChat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSChat)
}
CSChat::CSChat(const CSChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&msg_type_, &from.msg_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&chair_idx_) -
    reinterpret_cast<char*>(&msg_type_)) + sizeof(chair_idx_));
  // @@protoc_insertion_point(copy_constructor:F4BY.CSChat)
}

void CSChat::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&msg_type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chair_idx_) -
      reinterpret_cast<char*>(&msg_type_)) + sizeof(chair_idx_));
}

CSChat::~CSChat() {
  // @@protoc_insertion_point(destructor:F4BY.CSChat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSChat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSChat::ArenaDtor(void* object) {
  CSChat* _this = reinterpret_cast< CSChat* >(object);
  (void)_this;
}
void CSChat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSChat& CSChat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSChat_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSChat::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&msg_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) -
      reinterpret_cast<char*>(&msg_type_)) + sizeof(chair_idx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSChat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 msg_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msg_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 msg_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          msg_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chair_idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSChat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msg_type = 1;
  if (this->msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_msg_type(), target);
  }

  // int32 msg_idx = 2;
  if (this->msg_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_msg_idx(), target);
  }

  // int32 chair_idx = 3;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_chair_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSChat)
  return target;
}

size_t CSChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSChat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 msg_type = 1;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msg_type());
  }

  // int32 msg_idx = 2;
  if (this->msg_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msg_idx());
  }

  // int32 chair_idx = 3;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSChat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSChat)
  GOOGLE_DCHECK_NE(&from, this);
  const CSChat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSChat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSChat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSChat)
    MergeFrom(*source);
  }
}

void CSChat::MergeFrom(const CSChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSChat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_type() != 0) {
    _internal_set_msg_type(from._internal_msg_type());
  }
  if (from.msg_idx() != 0) {
    _internal_set_msg_idx(from._internal_msg_idx());
  }
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
}

void CSChat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSChat::CopyFrom(const CSChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSChat::IsInitialized() const {
  return true;
}

void CSChat::InternalSwap(CSChat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSChat, chair_idx_)
      + sizeof(CSChat::chair_idx_)
      - PROTOBUF_FIELD_OFFSET(CSChat, msg_type_)>(
          reinterpret_cast<char*>(&msg_type_),
          reinterpret_cast<char*>(&other->msg_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSChat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCChat::_Internal {
 public:
};

SCChat::SCChat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCChat)
}
SCChat::SCChat(const SCChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_idx_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(msg_idx_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCChat)
}

void SCChat::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&msg_idx_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(msg_idx_));
}

SCChat::~SCChat() {
  // @@protoc_insertion_point(destructor:F4BY.SCChat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCChat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCChat::ArenaDtor(void* object) {
  SCChat* _this = reinterpret_cast< SCChat* >(object);
  (void)_this;
}
void SCChat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCChat& SCChat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCChat_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCChat::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_idx_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(msg_idx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCChat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 msg_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          msg_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 msg_idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          msg_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCChat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 msg_type = 2;
  if (this->msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_msg_type(), target);
  }

  // int32 msg_idx = 3;
  if (this->msg_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_msg_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCChat)
  return target;
}

size_t SCChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCChat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 msg_type = 2;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msg_type());
  }

  // int32 msg_idx = 3;
  if (this->msg_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msg_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCChat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCChat)
  GOOGLE_DCHECK_NE(&from, this);
  const SCChat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCChat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCChat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCChat)
    MergeFrom(*source);
  }
}

void SCChat::MergeFrom(const SCChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCChat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.msg_type() != 0) {
    _internal_set_msg_type(from._internal_msg_type());
  }
  if (from.msg_idx() != 0) {
    _internal_set_msg_idx(from._internal_msg_idx());
  }
}

void SCChat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCChat::CopyFrom(const SCChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCChat::IsInitialized() const {
  return true;
}

void SCChat::InternalSwap(SCChat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCChat, msg_idx_)
      + sizeof(SCChat::msg_idx_)
      - PROTOBUF_FIELD_OFFSET(SCChat, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCChat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGainAward::_Internal {
 public:
  static const ::F4BY::Object& award(const SCGainAward* msg);
};

const ::F4BY::Object&
SCGainAward::_Internal::award(const SCGainAward* msg) {
  return *msg->award_;
}
SCGainAward::SCGainAward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCGainAward)
}
SCGainAward::SCGainAward(const SCGainAward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_award()) {
    award_ = new ::F4BY::Object(*from.award_);
  } else {
    award_ = nullptr;
  }
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCGainAward)
}

void SCGainAward::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCGainAward_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&award_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&award_)) + sizeof(score_));
}

SCGainAward::~SCGainAward() {
  // @@protoc_insertion_point(destructor:F4BY.SCGainAward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGainAward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete award_;
}

void SCGainAward::ArenaDtor(void* object) {
  SCGainAward* _this = reinterpret_cast< SCGainAward* >(object);
  (void)_this;
}
void SCGainAward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGainAward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGainAward& SCGainAward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGainAward_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCGainAward::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCGainAward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && award_ != nullptr) {
    delete award_;
  }
  award_ = nullptr;
  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGainAward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .F4BY.Object award = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_award(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGainAward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCGainAward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 score = 2;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_score(), target);
  }

  // .F4BY.Object award = 3;
  if (this->has_award()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::award(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCGainAward)
  return target;
}

size_t SCGainAward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCGainAward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .F4BY.Object award = 3;
  if (this->has_award()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *award_);
  }

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 score = 2;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGainAward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCGainAward)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGainAward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGainAward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCGainAward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCGainAward)
    MergeFrom(*source);
  }
}

void SCGainAward::MergeFrom(const SCGainAward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCGainAward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_award()) {
    _internal_mutable_award()->::F4BY::Object::MergeFrom(from._internal_award());
  }
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
}

void SCGainAward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCGainAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGainAward::CopyFrom(const SCGainAward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCGainAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGainAward::IsInitialized() const {
  return true;
}

void SCGainAward::InternalSwap(SCGainAward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCGainAward, score_)
      + sizeof(SCGainAward::score_)
      - PROTOBUF_FIELD_OFFSET(SCGainAward, award_)>(
          reinterpret_cast<char*>(&award_),
          reinterpret_cast<char*>(&other->award_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGainAward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSAwardPool::_Internal {
 public:
};

CSAwardPool::CSAwardPool(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSAwardPool)
}
CSAwardPool::CSAwardPool(const CSAwardPool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:F4BY.CSAwardPool)
}

void CSAwardPool::SharedCtor() {
}

CSAwardPool::~CSAwardPool() {
  // @@protoc_insertion_point(destructor:F4BY.CSAwardPool)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSAwardPool::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSAwardPool::ArenaDtor(void* object) {
  CSAwardPool* _this = reinterpret_cast< CSAwardPool* >(object);
  (void)_this;
}
void CSAwardPool::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSAwardPool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSAwardPool& CSAwardPool::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSAwardPool_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSAwardPool::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSAwardPool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSAwardPool::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSAwardPool::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSAwardPool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSAwardPool)
  return target;
}

size_t CSAwardPool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSAwardPool)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSAwardPool::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSAwardPool)
  GOOGLE_DCHECK_NE(&from, this);
  const CSAwardPool* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSAwardPool>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSAwardPool)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSAwardPool)
    MergeFrom(*source);
  }
}

void CSAwardPool::MergeFrom(const CSAwardPool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSAwardPool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSAwardPool::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSAwardPool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSAwardPool::CopyFrom(const CSAwardPool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSAwardPool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAwardPool::IsInitialized() const {
  return true;
}

void CSAwardPool::InternalSwap(CSAwardPool* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSAwardPool::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCAwardPool::_Internal {
 public:
};

SCAwardPool::SCAwardPool(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pool_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCAwardPool)
}
SCAwardPool::SCAwardPool(const SCAwardPool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pool_(from.pool_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:F4BY.SCAwardPool)
}

void SCAwardPool::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCAwardPool_F4BY_2eproto.base);
}

SCAwardPool::~SCAwardPool() {
  // @@protoc_insertion_point(destructor:F4BY.SCAwardPool)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCAwardPool::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCAwardPool::ArenaDtor(void* object) {
  SCAwardPool* _this = reinterpret_cast< SCAwardPool* >(object);
  (void)_this;
}
void SCAwardPool::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCAwardPool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCAwardPool& SCAwardPool::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCAwardPool_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCAwardPool::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCAwardPool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pool_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCAwardPool::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .F4BY.Object3 pool = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pool(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCAwardPool::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCAwardPool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .F4BY.Object3 pool = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pool_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pool(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCAwardPool)
  return target;
}

size_t SCAwardPool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCAwardPool)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.Object3 pool = 1;
  total_size += 1UL * this->_internal_pool_size();
  for (const auto& msg : this->pool_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCAwardPool::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCAwardPool)
  GOOGLE_DCHECK_NE(&from, this);
  const SCAwardPool* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCAwardPool>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCAwardPool)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCAwardPool)
    MergeFrom(*source);
  }
}

void SCAwardPool::MergeFrom(const SCAwardPool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCAwardPool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pool_.MergeFrom(from.pool_);
}

void SCAwardPool::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCAwardPool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCAwardPool::CopyFrom(const SCAwardPool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCAwardPool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCAwardPool::IsInitialized() const {
  return true;
}

void SCAwardPool::InternalSwap(SCAwardPool* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pool_.InternalSwap(&other->pool_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCAwardPool::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSPropStatus::_Internal {
 public:
};

CSPropStatus::CSPropStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSPropStatus)
}
CSPropStatus::CSPropStatus(const CSPropStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&prop_id_, &from.prop_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&prop_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:F4BY.CSPropStatus)
}

void CSPropStatus::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&prop_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&prop_id_)) + sizeof(status_));
}

CSPropStatus::~CSPropStatus() {
  // @@protoc_insertion_point(destructor:F4BY.CSPropStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSPropStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSPropStatus::ArenaDtor(void* object) {
  CSPropStatus* _this = reinterpret_cast< CSPropStatus* >(object);
  (void)_this;
}
void CSPropStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSPropStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSPropStatus& CSPropStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSPropStatus_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSPropStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSPropStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&prop_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&prop_id_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSPropStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 prop_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          prop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSPropStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSPropStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 prop_id = 1;
  if (this->prop_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_prop_id(), target);
  }

  // int32 status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSPropStatus)
  return target;
}

size_t CSPropStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSPropStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 prop_id = 1;
  if (this->prop_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prop_id());
  }

  // int32 status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSPropStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSPropStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CSPropStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSPropStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSPropStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSPropStatus)
    MergeFrom(*source);
  }
}

void CSPropStatus::MergeFrom(const CSPropStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSPropStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prop_id() != 0) {
    _internal_set_prop_id(from._internal_prop_id());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void CSPropStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSPropStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPropStatus::CopyFrom(const CSPropStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSPropStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPropStatus::IsInitialized() const {
  return true;
}

void CSPropStatus::InternalSwap(CSPropStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSPropStatus, status_)
      + sizeof(CSPropStatus::status_)
      - PROTOBUF_FIELD_OFFSET(CSPropStatus, prop_id_)>(
          reinterpret_cast<char*>(&prop_id_),
          reinterpret_cast<char*>(&other->prop_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSPropStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPropStatus::_Internal {
 public:
};

SCPropStatus::SCPropStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCPropStatus)
}
SCPropStatus::SCPropStatus(const SCPropStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&bt_id_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(bt_id_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCPropStatus)
}

void SCPropStatus::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bt_id_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(bt_id_));
}

SCPropStatus::~SCPropStatus() {
  // @@protoc_insertion_point(destructor:F4BY.SCPropStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPropStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCPropStatus::ArenaDtor(void* object) {
  SCPropStatus* _this = reinterpret_cast< SCPropStatus* >(object);
  (void)_this;
}
void SCPropStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPropStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPropStatus& SCPropStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPropStatus_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCPropStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCPropStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bt_id_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(bt_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPropStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 prop_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          prop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bt_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bt_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPropStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCPropStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 prop_id = 2;
  if (this->prop_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_prop_id(), target);
  }

  // int32 status = 3;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_status(), target);
  }

  // int32 bt_id = 4;
  if (this->bt_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_bt_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCPropStatus)
  return target;
}

size_t SCPropStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCPropStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 prop_id = 2;
  if (this->prop_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prop_id());
  }

  // int32 status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 bt_id = 4;
  if (this->bt_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bt_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPropStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCPropStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPropStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPropStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCPropStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCPropStatus)
    MergeFrom(*source);
  }
}

void SCPropStatus::MergeFrom(const SCPropStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCPropStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.prop_id() != 0) {
    _internal_set_prop_id(from._internal_prop_id());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.bt_id() != 0) {
    _internal_set_bt_id(from._internal_bt_id());
  }
}

void SCPropStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCPropStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPropStatus::CopyFrom(const SCPropStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCPropStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPropStatus::IsInitialized() const {
  return true;
}

void SCPropStatus::InternalSwap(SCPropStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCPropStatus, bt_id_)
      + sizeof(SCPropStatus::bt_id_)
      - PROTOBUF_FIELD_OFFSET(SCPropStatus, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPropStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GivenCardAward::_Internal {
 public:
};

GivenCardAward::GivenCardAward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.GivenCardAward)
}
GivenCardAward::GivenCardAward(const GivenCardAward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&card_idx_, &from.card_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&multiple_) -
    reinterpret_cast<char*>(&card_idx_)) + sizeof(multiple_));
  // @@protoc_insertion_point(copy_constructor:F4BY.GivenCardAward)
}

void GivenCardAward::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&card_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&multiple_) -
      reinterpret_cast<char*>(&card_idx_)) + sizeof(multiple_));
}

GivenCardAward::~GivenCardAward() {
  // @@protoc_insertion_point(destructor:F4BY.GivenCardAward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GivenCardAward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GivenCardAward::ArenaDtor(void* object) {
  GivenCardAward* _this = reinterpret_cast< GivenCardAward* >(object);
  (void)_this;
}
void GivenCardAward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GivenCardAward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GivenCardAward& GivenCardAward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GivenCardAward_F4BY_2eproto.base);
  return *internal_default_instance();
}


void GivenCardAward::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.GivenCardAward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&card_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multiple_) -
      reinterpret_cast<char*>(&card_idx_)) + sizeof(multiple_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GivenCardAward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 card_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          card_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 base = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 multiple = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GivenCardAward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.GivenCardAward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 card_idx = 1;
  if (this->card_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_card_idx(), target);
  }

  // int32 base = 2;
  if (this->base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_base(), target);
  }

  // int32 multiple = 3;
  if (this->multiple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_multiple(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.GivenCardAward)
  return target;
}

size_t GivenCardAward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.GivenCardAward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 card_idx = 1;
  if (this->card_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_card_idx());
  }

  // int32 base = 2;
  if (this->base() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_base());
  }

  // int32 multiple = 3;
  if (this->multiple() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_multiple());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GivenCardAward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.GivenCardAward)
  GOOGLE_DCHECK_NE(&from, this);
  const GivenCardAward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GivenCardAward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.GivenCardAward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.GivenCardAward)
    MergeFrom(*source);
  }
}

void GivenCardAward::MergeFrom(const GivenCardAward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.GivenCardAward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.card_idx() != 0) {
    _internal_set_card_idx(from._internal_card_idx());
  }
  if (from.base() != 0) {
    _internal_set_base(from._internal_base());
  }
  if (from.multiple() != 0) {
    _internal_set_multiple(from._internal_multiple());
  }
}

void GivenCardAward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.GivenCardAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GivenCardAward::CopyFrom(const GivenCardAward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.GivenCardAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GivenCardAward::IsInitialized() const {
  return true;
}

void GivenCardAward::InternalSwap(GivenCardAward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GivenCardAward, multiple_)
      + sizeof(GivenCardAward::multiple_)
      - PROTOBUF_FIELD_OFFSET(GivenCardAward, card_idx_)>(
          reinterpret_cast<char*>(&card_idx_),
          reinterpret_cast<char*>(&other->card_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GivenCardAward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UserAwardItem::_Internal {
 public:
};

UserAwardItem::UserAwardItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  goods_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.UserAwardItem)
}
UserAwardItem::UserAwardItem(const UserAwardItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      goods_(from.goods_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_max_) -
    reinterpret_cast<char*>(&index_)) + sizeof(item_max_));
  // @@protoc_insertion_point(copy_constructor:F4BY.UserAwardItem)
}

void UserAwardItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserAwardItem_F4BY_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&item_max_) -
      reinterpret_cast<char*>(&index_)) + sizeof(item_max_));
}

UserAwardItem::~UserAwardItem() {
  // @@protoc_insertion_point(destructor:F4BY.UserAwardItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserAwardItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserAwardItem::ArenaDtor(void* object) {
  UserAwardItem* _this = reinterpret_cast< UserAwardItem* >(object);
  (void)_this;
}
void UserAwardItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserAwardItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserAwardItem& UserAwardItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserAwardItem_F4BY_2eproto.base);
  return *internal_default_instance();
}


void UserAwardItem::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.UserAwardItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  goods_.Clear();
  name_.ClearToEmpty();
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_max_) -
      reinterpret_cast<char*>(&index_)) + sizeof(item_max_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserAwardItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 item_max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          item_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "F4BY.UserAwardItem.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .F4BY.Object2 goods = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_goods(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserAwardItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.UserAwardItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 item_max = 2;
  if (this->item_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_item_max(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "F4BY.UserAwardItem.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // repeated .F4BY.Object2 goods = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_goods_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_goods(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.UserAwardItem)
  return target;
}

size_t UserAwardItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.UserAwardItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.Object2 goods = 4;
  total_size += 1UL * this->_internal_goods_size();
  for (const auto& msg : this->goods_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // int32 item_max = 2;
  if (this->item_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_item_max());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserAwardItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.UserAwardItem)
  GOOGLE_DCHECK_NE(&from, this);
  const UserAwardItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserAwardItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.UserAwardItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.UserAwardItem)
    MergeFrom(*source);
  }
}

void UserAwardItem::MergeFrom(const UserAwardItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.UserAwardItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  goods_.MergeFrom(from.goods_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.item_max() != 0) {
    _internal_set_item_max(from._internal_item_max());
  }
}

void UserAwardItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.UserAwardItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAwardItem::CopyFrom(const UserAwardItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.UserAwardItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAwardItem::IsInitialized() const {
  return true;
}

void UserAwardItem::InternalSwap(UserAwardItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  goods_.InternalSwap(&other->goods_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserAwardItem, item_max_)
      + sizeof(UserAwardItem::item_max_)
      - PROTOBUF_FIELD_OFFSET(UserAwardItem, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserAwardItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSUserPoolInfo::_Internal {
 public:
};

CSUserPoolInfo::CSUserPoolInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSUserPoolInfo)
}
CSUserPoolInfo::CSUserPoolInfo(const CSUserPoolInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  open_page_ = from.open_page_;
  // @@protoc_insertion_point(copy_constructor:F4BY.CSUserPoolInfo)
}

void CSUserPoolInfo::SharedCtor() {
  open_page_ = false;
}

CSUserPoolInfo::~CSUserPoolInfo() {
  // @@protoc_insertion_point(destructor:F4BY.CSUserPoolInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSUserPoolInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSUserPoolInfo::ArenaDtor(void* object) {
  CSUserPoolInfo* _this = reinterpret_cast< CSUserPoolInfo* >(object);
  (void)_this;
}
void CSUserPoolInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSUserPoolInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSUserPoolInfo& CSUserPoolInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSUserPoolInfo_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSUserPoolInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSUserPoolInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  open_page_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSUserPoolInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool open_page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          open_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSUserPoolInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSUserPoolInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool open_page = 1;
  if (this->open_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_open_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSUserPoolInfo)
  return target;
}

size_t CSUserPoolInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSUserPoolInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool open_page = 1;
  if (this->open_page() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSUserPoolInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSUserPoolInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSUserPoolInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSUserPoolInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSUserPoolInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSUserPoolInfo)
    MergeFrom(*source);
  }
}

void CSUserPoolInfo::MergeFrom(const CSUserPoolInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSUserPoolInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.open_page() != 0) {
    _internal_set_open_page(from._internal_open_page());
  }
}

void CSUserPoolInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSUserPoolInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSUserPoolInfo::CopyFrom(const CSUserPoolInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSUserPoolInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSUserPoolInfo::IsInitialized() const {
  return true;
}

void CSUserPoolInfo::InternalSwap(CSUserPoolInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(open_page_, other->open_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSUserPoolInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCUserPoolInfo::_Internal {
 public:
};

SCUserPoolInfo::SCUserPoolInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCUserPoolInfo)
}
SCUserPoolInfo::SCUserPoolInfo(const SCUserPoolInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&pool_max_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(pool_max_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCUserPoolInfo)
}

void SCUserPoolInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCUserPoolInfo_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&pool_max_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(pool_max_));
}

SCUserPoolInfo::~SCUserPoolInfo() {
  // @@protoc_insertion_point(destructor:F4BY.SCUserPoolInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCUserPoolInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCUserPoolInfo::ArenaDtor(void* object) {
  SCUserPoolInfo* _this = reinterpret_cast< SCUserPoolInfo* >(object);
  (void)_this;
}
void SCUserPoolInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCUserPoolInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCUserPoolInfo& SCUserPoolInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCUserPoolInfo_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCUserPoolInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCUserPoolInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pool_max_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(pool_max_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCUserPoolInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool open_page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          open_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pool_max = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          pool_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .F4BY.UserAwardItem items = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCUserPoolInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCUserPoolInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // bool open_page = 2;
  if (this->open_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_open_page(), target);
  }

  // bool status = 3;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_status(), target);
  }

  // int32 count = 4;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_count(), target);
  }

  // int32 pool_max = 5;
  if (this->pool_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_pool_max(), target);
  }

  // repeated .F4BY.UserAwardItem items = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCUserPoolInfo)
  return target;
}

size_t SCUserPoolInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCUserPoolInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.UserAwardItem items = 6;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // bool open_page = 2;
  if (this->open_page() != 0) {
    total_size += 1 + 1;
  }

  // bool status = 3;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  // int32 count = 4;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  // int32 pool_max = 5;
  if (this->pool_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pool_max());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCUserPoolInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCUserPoolInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCUserPoolInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCUserPoolInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCUserPoolInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCUserPoolInfo)
    MergeFrom(*source);
  }
}

void SCUserPoolInfo::MergeFrom(const SCUserPoolInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCUserPoolInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.open_page() != 0) {
    _internal_set_open_page(from._internal_open_page());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.pool_max() != 0) {
    _internal_set_pool_max(from._internal_pool_max());
  }
}

void SCUserPoolInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCUserPoolInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCUserPoolInfo::CopyFrom(const SCUserPoolInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCUserPoolInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCUserPoolInfo::IsInitialized() const {
  return true;
}

void SCUserPoolInfo::InternalSwap(SCUserPoolInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCUserPoolInfo, pool_max_)
      + sizeof(SCUserPoolInfo::pool_max_)
      - PROTOBUF_FIELD_OFFSET(SCUserPoolInfo, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCUserPoolInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSUserPoolStatus::_Internal {
 public:
};

CSUserPoolStatus::CSUserPoolStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSUserPoolStatus)
}
CSUserPoolStatus::CSUserPoolStatus(const CSUserPoolStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  open_ = from.open_;
  // @@protoc_insertion_point(copy_constructor:F4BY.CSUserPoolStatus)
}

void CSUserPoolStatus::SharedCtor() {
  open_ = false;
}

CSUserPoolStatus::~CSUserPoolStatus() {
  // @@protoc_insertion_point(destructor:F4BY.CSUserPoolStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSUserPoolStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSUserPoolStatus::ArenaDtor(void* object) {
  CSUserPoolStatus* _this = reinterpret_cast< CSUserPoolStatus* >(object);
  (void)_this;
}
void CSUserPoolStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSUserPoolStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSUserPoolStatus& CSUserPoolStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSUserPoolStatus_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSUserPoolStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSUserPoolStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  open_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSUserPoolStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool open = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSUserPoolStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSUserPoolStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool open = 1;
  if (this->open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_open(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSUserPoolStatus)
  return target;
}

size_t CSUserPoolStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSUserPoolStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool open = 1;
  if (this->open() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSUserPoolStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSUserPoolStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CSUserPoolStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSUserPoolStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSUserPoolStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSUserPoolStatus)
    MergeFrom(*source);
  }
}

void CSUserPoolStatus::MergeFrom(const CSUserPoolStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSUserPoolStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.open() != 0) {
    _internal_set_open(from._internal_open());
  }
}

void CSUserPoolStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSUserPoolStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSUserPoolStatus::CopyFrom(const CSUserPoolStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSUserPoolStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSUserPoolStatus::IsInitialized() const {
  return true;
}

void CSUserPoolStatus::InternalSwap(CSUserPoolStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(open_, other->open_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSUserPoolStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCUserPoolStatus::_Internal {
 public:
};

SCUserPoolStatus::SCUserPoolStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCUserPoolStatus)
}
SCUserPoolStatus::SCUserPoolStatus(const SCUserPoolStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  open_ = from.open_;
  // @@protoc_insertion_point(copy_constructor:F4BY.SCUserPoolStatus)
}

void SCUserPoolStatus::SharedCtor() {
  open_ = false;
}

SCUserPoolStatus::~SCUserPoolStatus() {
  // @@protoc_insertion_point(destructor:F4BY.SCUserPoolStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCUserPoolStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCUserPoolStatus::ArenaDtor(void* object) {
  SCUserPoolStatus* _this = reinterpret_cast< SCUserPoolStatus* >(object);
  (void)_this;
}
void SCUserPoolStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCUserPoolStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCUserPoolStatus& SCUserPoolStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCUserPoolStatus_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCUserPoolStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCUserPoolStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  open_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCUserPoolStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool open = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCUserPoolStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCUserPoolStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool open = 1;
  if (this->open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_open(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCUserPoolStatus)
  return target;
}

size_t SCUserPoolStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCUserPoolStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool open = 1;
  if (this->open() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCUserPoolStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCUserPoolStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const SCUserPoolStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCUserPoolStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCUserPoolStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCUserPoolStatus)
    MergeFrom(*source);
  }
}

void SCUserPoolStatus::MergeFrom(const SCUserPoolStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCUserPoolStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.open() != 0) {
    _internal_set_open(from._internal_open());
  }
}

void SCUserPoolStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCUserPoolStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCUserPoolStatus::CopyFrom(const SCUserPoolStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCUserPoolStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCUserPoolStatus::IsInitialized() const {
  return true;
}

void SCUserPoolStatus::InternalSwap(SCUserPoolStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(open_, other->open_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCUserPoolStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSUserPoolPreDraw::_Internal {
 public:
};

CSUserPoolPreDraw::CSUserPoolPreDraw(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSUserPoolPreDraw)
}
CSUserPoolPreDraw::CSUserPoolPreDraw(const CSUserPoolPreDraw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:F4BY.CSUserPoolPreDraw)
}

void CSUserPoolPreDraw::SharedCtor() {
  level_ = 0;
}

CSUserPoolPreDraw::~CSUserPoolPreDraw() {
  // @@protoc_insertion_point(destructor:F4BY.CSUserPoolPreDraw)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSUserPoolPreDraw::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSUserPoolPreDraw::ArenaDtor(void* object) {
  CSUserPoolPreDraw* _this = reinterpret_cast< CSUserPoolPreDraw* >(object);
  (void)_this;
}
void CSUserPoolPreDraw::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSUserPoolPreDraw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSUserPoolPreDraw& CSUserPoolPreDraw::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSUserPoolPreDraw_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSUserPoolPreDraw::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSUserPoolPreDraw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSUserPoolPreDraw::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSUserPoolPreDraw::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSUserPoolPreDraw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 level = 1;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSUserPoolPreDraw)
  return target;
}

size_t CSUserPoolPreDraw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSUserPoolPreDraw)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSUserPoolPreDraw::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSUserPoolPreDraw)
  GOOGLE_DCHECK_NE(&from, this);
  const CSUserPoolPreDraw* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSUserPoolPreDraw>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSUserPoolPreDraw)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSUserPoolPreDraw)
    MergeFrom(*source);
  }
}

void CSUserPoolPreDraw::MergeFrom(const CSUserPoolPreDraw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSUserPoolPreDraw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void CSUserPoolPreDraw::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSUserPoolPreDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSUserPoolPreDraw::CopyFrom(const CSUserPoolPreDraw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSUserPoolPreDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSUserPoolPreDraw::IsInitialized() const {
  return true;
}

void CSUserPoolPreDraw::InternalSwap(CSUserPoolPreDraw* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSUserPoolPreDraw::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCUserPoolPreDraw::_Internal {
 public:
};

SCUserPoolPreDraw::SCUserPoolPreDraw(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCUserPoolPreDraw)
}
SCUserPoolPreDraw::SCUserPoolPreDraw(const SCUserPoolPreDraw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArena());
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&code_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCUserPoolPreDraw)
}

void SCUserPoolPreDraw::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCUserPoolPreDraw_F4BY_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&code_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&code_)) + sizeof(level_));
}

SCUserPoolPreDraw::~SCUserPoolPreDraw() {
  // @@protoc_insertion_point(destructor:F4BY.SCUserPoolPreDraw)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCUserPoolPreDraw::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SCUserPoolPreDraw::ArenaDtor(void* object) {
  SCUserPoolPreDraw* _this = reinterpret_cast< SCUserPoolPreDraw* >(object);
  (void)_this;
}
void SCUserPoolPreDraw::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCUserPoolPreDraw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCUserPoolPreDraw& SCUserPoolPreDraw::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCUserPoolPreDraw_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCUserPoolPreDraw::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCUserPoolPreDraw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&code_)) + sizeof(level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCUserPoolPreDraw::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "F4BY.SCUserPoolPreDraw.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCUserPoolPreDraw::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCUserPoolPreDraw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // int32 level = 2;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_level(), target);
  }

  // string msg = 3;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "F4BY.SCUserPoolPreDraw.msg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCUserPoolPreDraw)
  return target;
}

size_t SCUserPoolPreDraw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCUserPoolPreDraw)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 3;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  // int32 level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCUserPoolPreDraw::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCUserPoolPreDraw)
  GOOGLE_DCHECK_NE(&from, this);
  const SCUserPoolPreDraw* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCUserPoolPreDraw>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCUserPoolPreDraw)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCUserPoolPreDraw)
    MergeFrom(*source);
  }
}

void SCUserPoolPreDraw::MergeFrom(const SCUserPoolPreDraw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCUserPoolPreDraw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {
    _internal_set_msg(from._internal_msg());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void SCUserPoolPreDraw::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCUserPoolPreDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCUserPoolPreDraw::CopyFrom(const SCUserPoolPreDraw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCUserPoolPreDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCUserPoolPreDraw::IsInitialized() const {
  return true;
}

void SCUserPoolPreDraw::InternalSwap(SCUserPoolPreDraw* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCUserPoolPreDraw, level_)
      + sizeof(SCUserPoolPreDraw::level_)
      - PROTOBUF_FIELD_OFFSET(SCUserPoolPreDraw, code_)>(
          reinterpret_cast<char*>(&code_),
          reinterpret_cast<char*>(&other->code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCUserPoolPreDraw::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSUserPoolDraw::_Internal {
 public:
};

CSUserPoolDraw::CSUserPoolDraw(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSUserPoolDraw)
}
CSUserPoolDraw::CSUserPoolDraw(const CSUserPoolDraw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:F4BY.CSUserPoolDraw)
}

void CSUserPoolDraw::SharedCtor() {
}

CSUserPoolDraw::~CSUserPoolDraw() {
  // @@protoc_insertion_point(destructor:F4BY.CSUserPoolDraw)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSUserPoolDraw::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSUserPoolDraw::ArenaDtor(void* object) {
  CSUserPoolDraw* _this = reinterpret_cast< CSUserPoolDraw* >(object);
  (void)_this;
}
void CSUserPoolDraw::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSUserPoolDraw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSUserPoolDraw& CSUserPoolDraw::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSUserPoolDraw_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSUserPoolDraw::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSUserPoolDraw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSUserPoolDraw::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSUserPoolDraw::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSUserPoolDraw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSUserPoolDraw)
  return target;
}

size_t CSUserPoolDraw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSUserPoolDraw)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSUserPoolDraw::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSUserPoolDraw)
  GOOGLE_DCHECK_NE(&from, this);
  const CSUserPoolDraw* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSUserPoolDraw>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSUserPoolDraw)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSUserPoolDraw)
    MergeFrom(*source);
  }
}

void CSUserPoolDraw::MergeFrom(const CSUserPoolDraw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSUserPoolDraw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSUserPoolDraw::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSUserPoolDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSUserPoolDraw::CopyFrom(const CSUserPoolDraw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSUserPoolDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSUserPoolDraw::IsInitialized() const {
  return true;
}

void CSUserPoolDraw::InternalSwap(CSUserPoolDraw* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSUserPoolDraw::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCUserPoolDraw::_Internal {
 public:
  static const ::F4BY::Object2& award(const SCUserPoolDraw* msg);
  static const ::F4BY::Object& award_cnt(const SCUserPoolDraw* msg);
};

const ::F4BY::Object2&
SCUserPoolDraw::_Internal::award(const SCUserPoolDraw* msg) {
  return *msg->award_;
}
const ::F4BY::Object&
SCUserPoolDraw::_Internal::award_cnt(const SCUserPoolDraw* msg) {
  return *msg->award_cnt_;
}
SCUserPoolDraw::SCUserPoolDraw(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  goods_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCUserPoolDraw)
}
SCUserPoolDraw::SCUserPoolDraw(const SCUserPoolDraw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      goods_(from.goods_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_award()) {
    award_ = new ::F4BY::Object2(*from.award_);
  } else {
    award_ = nullptr;
  }
  if (from._internal_has_award_cnt()) {
    award_cnt_ = new ::F4BY::Object(*from.award_cnt_);
  } else {
    award_cnt_ = nullptr;
  }
  chair_idx_ = from.chair_idx_;
  // @@protoc_insertion_point(copy_constructor:F4BY.SCUserPoolDraw)
}

void SCUserPoolDraw::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCUserPoolDraw_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&award_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chair_idx_) -
      reinterpret_cast<char*>(&award_)) + sizeof(chair_idx_));
}

SCUserPoolDraw::~SCUserPoolDraw() {
  // @@protoc_insertion_point(destructor:F4BY.SCUserPoolDraw)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCUserPoolDraw::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete award_;
  if (this != internal_default_instance()) delete award_cnt_;
}

void SCUserPoolDraw::ArenaDtor(void* object) {
  SCUserPoolDraw* _this = reinterpret_cast< SCUserPoolDraw* >(object);
  (void)_this;
}
void SCUserPoolDraw::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCUserPoolDraw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCUserPoolDraw& SCUserPoolDraw::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCUserPoolDraw_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCUserPoolDraw::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCUserPoolDraw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  goods_.Clear();
  if (GetArena() == nullptr && award_ != nullptr) {
    delete award_;
  }
  award_ = nullptr;
  if (GetArena() == nullptr && award_cnt_ != nullptr) {
    delete award_cnt_;
  }
  award_cnt_ = nullptr;
  chair_idx_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCUserPoolDraw::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .F4BY.Object2 goods = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_goods(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .F4BY.Object2 award = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_award(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .F4BY.Object award_cnt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_award_cnt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCUserPoolDraw::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCUserPoolDraw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // repeated .F4BY.Object2 goods = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_goods_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_goods(i), target, stream);
  }

  // .F4BY.Object2 award = 3;
  if (this->has_award()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::award(this), target, stream);
  }

  // .F4BY.Object award_cnt = 4;
  if (this->has_award_cnt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::award_cnt(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCUserPoolDraw)
  return target;
}

size_t SCUserPoolDraw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCUserPoolDraw)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.Object2 goods = 2;
  total_size += 1UL * this->_internal_goods_size();
  for (const auto& msg : this->goods_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .F4BY.Object2 award = 3;
  if (this->has_award()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *award_);
  }

  // .F4BY.Object award_cnt = 4;
  if (this->has_award_cnt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *award_cnt_);
  }

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCUserPoolDraw::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCUserPoolDraw)
  GOOGLE_DCHECK_NE(&from, this);
  const SCUserPoolDraw* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCUserPoolDraw>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCUserPoolDraw)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCUserPoolDraw)
    MergeFrom(*source);
  }
}

void SCUserPoolDraw::MergeFrom(const SCUserPoolDraw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCUserPoolDraw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  goods_.MergeFrom(from.goods_);
  if (from.has_award()) {
    _internal_mutable_award()->::F4BY::Object2::MergeFrom(from._internal_award());
  }
  if (from.has_award_cnt()) {
    _internal_mutable_award_cnt()->::F4BY::Object::MergeFrom(from._internal_award_cnt());
  }
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
}

void SCUserPoolDraw::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCUserPoolDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCUserPoolDraw::CopyFrom(const SCUserPoolDraw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCUserPoolDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCUserPoolDraw::IsInitialized() const {
  return true;
}

void SCUserPoolDraw::InternalSwap(SCUserPoolDraw* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  goods_.InternalSwap(&other->goods_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCUserPoolDraw, chair_idx_)
      + sizeof(SCUserPoolDraw::chair_idx_)
      - PROTOBUF_FIELD_OFFSET(SCUserPoolDraw, award_)>(
          reinterpret_cast<char*>(&award_),
          reinterpret_cast<char*>(&other->award_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCUserPoolDraw::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCUserPoolAdd::_Internal {
 public:
};

SCUserPoolAdd::SCUserPoolAdd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCUserPoolAdd)
}
SCUserPoolAdd::SCUserPoolAdd(const SCUserPoolAdd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  level_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_level_name().empty()) {
    level_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_level_name(), 
      GetArena());
  }
  ::memcpy(&add_, &from.add_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&add_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCUserPoolAdd)
}

void SCUserPoolAdd::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCUserPoolAdd_F4BY_2eproto.base);
  level_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&add_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&add_)) + sizeof(status_));
}

SCUserPoolAdd::~SCUserPoolAdd() {
  // @@protoc_insertion_point(destructor:F4BY.SCUserPoolAdd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCUserPoolAdd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  level_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SCUserPoolAdd::ArenaDtor(void* object) {
  SCUserPoolAdd* _this = reinterpret_cast< SCUserPoolAdd* >(object);
  (void)_this;
}
void SCUserPoolAdd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCUserPoolAdd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCUserPoolAdd& SCUserPoolAdd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCUserPoolAdd_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCUserPoolAdd::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCUserPoolAdd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  level_name_.ClearToEmpty();
  ::memset(&add_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&add_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCUserPoolAdd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 add = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          add_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 first_max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          first_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pool_max = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pool_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string level_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_level_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "F4BY.SCUserPoolAdd.level_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCUserPoolAdd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCUserPoolAdd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 add = 1;
  if (this->add() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_add(), target);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // int32 first_max = 3;
  if (this->first_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_first_max(), target);
  }

  // int32 pool_max = 4;
  if (this->pool_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_pool_max(), target);
  }

  // bool status = 5;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_status(), target);
  }

  // string level_name = 6;
  if (this->level_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_level_name().data(), static_cast<int>(this->_internal_level_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "F4BY.SCUserPoolAdd.level_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_level_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCUserPoolAdd)
  return target;
}

size_t SCUserPoolAdd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCUserPoolAdd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string level_name = 6;
  if (this->level_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_level_name());
  }

  // int32 add = 1;
  if (this->add() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_add());
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  // int32 first_max = 3;
  if (this->first_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_first_max());
  }

  // int32 pool_max = 4;
  if (this->pool_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pool_max());
  }

  // bool status = 5;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCUserPoolAdd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCUserPoolAdd)
  GOOGLE_DCHECK_NE(&from, this);
  const SCUserPoolAdd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCUserPoolAdd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCUserPoolAdd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCUserPoolAdd)
    MergeFrom(*source);
  }
}

void SCUserPoolAdd::MergeFrom(const SCUserPoolAdd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCUserPoolAdd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.level_name().size() > 0) {
    _internal_set_level_name(from._internal_level_name());
  }
  if (from.add() != 0) {
    _internal_set_add(from._internal_add());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.first_max() != 0) {
    _internal_set_first_max(from._internal_first_max());
  }
  if (from.pool_max() != 0) {
    _internal_set_pool_max(from._internal_pool_max());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void SCUserPoolAdd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCUserPoolAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCUserPoolAdd::CopyFrom(const SCUserPoolAdd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCUserPoolAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCUserPoolAdd::IsInitialized() const {
  return true;
}

void SCUserPoolAdd::InternalSwap(SCUserPoolAdd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  level_name_.Swap(&other->level_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCUserPoolAdd, status_)
      + sizeof(SCUserPoolAdd::status_)
      - PROTOBUF_FIELD_OFFSET(SCUserPoolAdd, add_)>(
          reinterpret_cast<char*>(&add_),
          reinterpret_cast<char*>(&other->add_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCUserPoolAdd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSUserPoolDoubleInfo::_Internal {
 public:
};

CSUserPoolDoubleInfo::CSUserPoolDoubleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSUserPoolDoubleInfo)
}
CSUserPoolDoubleInfo::CSUserPoolDoubleInfo(const CSUserPoolDoubleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:F4BY.CSUserPoolDoubleInfo)
}

void CSUserPoolDoubleInfo::SharedCtor() {
}

CSUserPoolDoubleInfo::~CSUserPoolDoubleInfo() {
  // @@protoc_insertion_point(destructor:F4BY.CSUserPoolDoubleInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSUserPoolDoubleInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSUserPoolDoubleInfo::ArenaDtor(void* object) {
  CSUserPoolDoubleInfo* _this = reinterpret_cast< CSUserPoolDoubleInfo* >(object);
  (void)_this;
}
void CSUserPoolDoubleInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSUserPoolDoubleInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSUserPoolDoubleInfo& CSUserPoolDoubleInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSUserPoolDoubleInfo_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSUserPoolDoubleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSUserPoolDoubleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSUserPoolDoubleInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSUserPoolDoubleInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSUserPoolDoubleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSUserPoolDoubleInfo)
  return target;
}

size_t CSUserPoolDoubleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSUserPoolDoubleInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSUserPoolDoubleInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSUserPoolDoubleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSUserPoolDoubleInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSUserPoolDoubleInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSUserPoolDoubleInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSUserPoolDoubleInfo)
    MergeFrom(*source);
  }
}

void CSUserPoolDoubleInfo::MergeFrom(const CSUserPoolDoubleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSUserPoolDoubleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSUserPoolDoubleInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSUserPoolDoubleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSUserPoolDoubleInfo::CopyFrom(const CSUserPoolDoubleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSUserPoolDoubleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSUserPoolDoubleInfo::IsInitialized() const {
  return true;
}

void CSUserPoolDoubleInfo::InternalSwap(CSUserPoolDoubleInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSUserPoolDoubleInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCUserPoolDoubleInfo::_Internal {
 public:
  static const ::F4BY::Object2& item_before(const SCUserPoolDoubleInfo* msg);
  static const ::F4BY::Object2& item_double(const SCUserPoolDoubleInfo* msg);
};

const ::F4BY::Object2&
SCUserPoolDoubleInfo::_Internal::item_before(const SCUserPoolDoubleInfo* msg) {
  return *msg->item_before_;
}
const ::F4BY::Object2&
SCUserPoolDoubleInfo::_Internal::item_double(const SCUserPoolDoubleInfo* msg) {
  return *msg->item_double_;
}
SCUserPoolDoubleInfo::SCUserPoolDoubleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCUserPoolDoubleInfo)
}
SCUserPoolDoubleInfo::SCUserPoolDoubleInfo(const SCUserPoolDoubleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item_before()) {
    item_before_ = new ::F4BY::Object2(*from.item_before_);
  } else {
    item_before_ = nullptr;
  }
  if (from._internal_has_item_double()) {
    item_double_ = new ::F4BY::Object2(*from.item_double_);
  } else {
    item_double_ = nullptr;
  }
  cost_ = from.cost_;
  // @@protoc_insertion_point(copy_constructor:F4BY.SCUserPoolDoubleInfo)
}

void SCUserPoolDoubleInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCUserPoolDoubleInfo_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&item_before_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&cost_) -
      reinterpret_cast<char*>(&item_before_)) + sizeof(cost_));
}

SCUserPoolDoubleInfo::~SCUserPoolDoubleInfo() {
  // @@protoc_insertion_point(destructor:F4BY.SCUserPoolDoubleInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCUserPoolDoubleInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete item_before_;
  if (this != internal_default_instance()) delete item_double_;
}

void SCUserPoolDoubleInfo::ArenaDtor(void* object) {
  SCUserPoolDoubleInfo* _this = reinterpret_cast< SCUserPoolDoubleInfo* >(object);
  (void)_this;
}
void SCUserPoolDoubleInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCUserPoolDoubleInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCUserPoolDoubleInfo& SCUserPoolDoubleInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCUserPoolDoubleInfo_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCUserPoolDoubleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCUserPoolDoubleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && item_before_ != nullptr) {
    delete item_before_;
  }
  item_before_ = nullptr;
  if (GetArena() == nullptr && item_double_ != nullptr) {
    delete item_double_;
  }
  item_double_ = nullptr;
  cost_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCUserPoolDoubleInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 cost = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .F4BY.Object2 item_before = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_item_before(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .F4BY.Object2 item_double = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_item_double(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCUserPoolDoubleInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCUserPoolDoubleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cost = 1;
  if (this->cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cost(), target);
  }

  // .F4BY.Object2 item_before = 2;
  if (this->has_item_before()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::item_before(this), target, stream);
  }

  // .F4BY.Object2 item_double = 3;
  if (this->has_item_double()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::item_double(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCUserPoolDoubleInfo)
  return target;
}

size_t SCUserPoolDoubleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCUserPoolDoubleInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .F4BY.Object2 item_before = 2;
  if (this->has_item_before()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_before_);
  }

  // .F4BY.Object2 item_double = 3;
  if (this->has_item_double()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_double_);
  }

  // int32 cost = 1;
  if (this->cost() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cost());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCUserPoolDoubleInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCUserPoolDoubleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCUserPoolDoubleInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCUserPoolDoubleInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCUserPoolDoubleInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCUserPoolDoubleInfo)
    MergeFrom(*source);
  }
}

void SCUserPoolDoubleInfo::MergeFrom(const SCUserPoolDoubleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCUserPoolDoubleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_item_before()) {
    _internal_mutable_item_before()->::F4BY::Object2::MergeFrom(from._internal_item_before());
  }
  if (from.has_item_double()) {
    _internal_mutable_item_double()->::F4BY::Object2::MergeFrom(from._internal_item_double());
  }
  if (from.cost() != 0) {
    _internal_set_cost(from._internal_cost());
  }
}

void SCUserPoolDoubleInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCUserPoolDoubleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCUserPoolDoubleInfo::CopyFrom(const SCUserPoolDoubleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCUserPoolDoubleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCUserPoolDoubleInfo::IsInitialized() const {
  return true;
}

void SCUserPoolDoubleInfo::InternalSwap(SCUserPoolDoubleInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCUserPoolDoubleInfo, cost_)
      + sizeof(SCUserPoolDoubleInfo::cost_)
      - PROTOBUF_FIELD_OFFSET(SCUserPoolDoubleInfo, item_before_)>(
          reinterpret_cast<char*>(&item_before_),
          reinterpret_cast<char*>(&other->item_before_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCUserPoolDoubleInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSUserPoolDouble::_Internal {
 public:
};

CSUserPoolDouble::CSUserPoolDouble(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSUserPoolDouble)
}
CSUserPoolDouble::CSUserPoolDouble(const CSUserPoolDouble& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_double_ = from.is_double_;
  // @@protoc_insertion_point(copy_constructor:F4BY.CSUserPoolDouble)
}

void CSUserPoolDouble::SharedCtor() {
  is_double_ = false;
}

CSUserPoolDouble::~CSUserPoolDouble() {
  // @@protoc_insertion_point(destructor:F4BY.CSUserPoolDouble)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSUserPoolDouble::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSUserPoolDouble::ArenaDtor(void* object) {
  CSUserPoolDouble* _this = reinterpret_cast< CSUserPoolDouble* >(object);
  (void)_this;
}
void CSUserPoolDouble::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSUserPoolDouble::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSUserPoolDouble& CSUserPoolDouble::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSUserPoolDouble_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSUserPoolDouble::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSUserPoolDouble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_double_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSUserPoolDouble::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_double = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_double_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSUserPoolDouble::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSUserPoolDouble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_double = 1;
  if (this->is_double() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_double(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSUserPoolDouble)
  return target;
}

size_t CSUserPoolDouble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSUserPoolDouble)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_double = 1;
  if (this->is_double() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSUserPoolDouble::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSUserPoolDouble)
  GOOGLE_DCHECK_NE(&from, this);
  const CSUserPoolDouble* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSUserPoolDouble>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSUserPoolDouble)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSUserPoolDouble)
    MergeFrom(*source);
  }
}

void CSUserPoolDouble::MergeFrom(const CSUserPoolDouble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSUserPoolDouble)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_double() != 0) {
    _internal_set_is_double(from._internal_is_double());
  }
}

void CSUserPoolDouble::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSUserPoolDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSUserPoolDouble::CopyFrom(const CSUserPoolDouble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSUserPoolDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSUserPoolDouble::IsInitialized() const {
  return true;
}

void CSUserPoolDouble::InternalSwap(CSUserPoolDouble* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(is_double_, other->is_double_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSUserPoolDouble::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCUserPoolDouble::_Internal {
 public:
  static const ::F4BY::Object3& item(const SCUserPoolDouble* msg);
  static const ::F4BY::Object3& extra_item(const SCUserPoolDouble* msg);
};

const ::F4BY::Object3&
SCUserPoolDouble::_Internal::item(const SCUserPoolDouble* msg) {
  return *msg->item_;
}
const ::F4BY::Object3&
SCUserPoolDouble::_Internal::extra_item(const SCUserPoolDouble* msg) {
  return *msg->extra_item_;
}
SCUserPoolDouble::SCUserPoolDouble(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCUserPoolDouble)
}
SCUserPoolDouble::SCUserPoolDouble(const SCUserPoolDouble& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item()) {
    item_ = new ::F4BY::Object3(*from.item_);
  } else {
    item_ = nullptr;
  }
  if (from._internal_has_extra_item()) {
    extra_item_ = new ::F4BY::Object3(*from.extra_item_);
  } else {
    extra_item_ = nullptr;
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&chair_idx_) -
    reinterpret_cast<char*>(&code_)) + sizeof(chair_idx_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCUserPoolDouble)
}

void SCUserPoolDouble::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCUserPoolDouble_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&item_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chair_idx_) -
      reinterpret_cast<char*>(&item_)) + sizeof(chair_idx_));
}

SCUserPoolDouble::~SCUserPoolDouble() {
  // @@protoc_insertion_point(destructor:F4BY.SCUserPoolDouble)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCUserPoolDouble::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete item_;
  if (this != internal_default_instance()) delete extra_item_;
}

void SCUserPoolDouble::ArenaDtor(void* object) {
  SCUserPoolDouble* _this = reinterpret_cast< SCUserPoolDouble* >(object);
  (void)_this;
}
void SCUserPoolDouble::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCUserPoolDouble::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCUserPoolDouble& SCUserPoolDouble::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCUserPoolDouble_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCUserPoolDouble::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCUserPoolDouble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
  if (GetArena() == nullptr && extra_item_ != nullptr) {
    delete extra_item_;
  }
  extra_item_ = nullptr;
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) -
      reinterpret_cast<char*>(&code_)) + sizeof(chair_idx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCUserPoolDouble::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chair_idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .F4BY.Object3 item = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .F4BY.Object3 extra_item = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCUserPoolDouble::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCUserPoolDouble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // int32 result = 2;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_result(), target);
  }

  // int32 chair_idx = 3;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_chair_idx(), target);
  }

  // .F4BY.Object3 item = 4;
  if (this->has_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::item(this), target, stream);
  }

  // .F4BY.Object3 extra_item = 5;
  if (this->has_extra_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::extra_item(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCUserPoolDouble)
  return target;
}

size_t SCUserPoolDouble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCUserPoolDouble)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .F4BY.Object3 item = 4;
  if (this->has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_);
  }

  // .F4BY.Object3 extra_item = 5;
  if (this->has_extra_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_item_);
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  // int32 result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  // int32 chair_idx = 3;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCUserPoolDouble::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCUserPoolDouble)
  GOOGLE_DCHECK_NE(&from, this);
  const SCUserPoolDouble* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCUserPoolDouble>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCUserPoolDouble)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCUserPoolDouble)
    MergeFrom(*source);
  }
}

void SCUserPoolDouble::MergeFrom(const SCUserPoolDouble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCUserPoolDouble)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_item()) {
    _internal_mutable_item()->::F4BY::Object3::MergeFrom(from._internal_item());
  }
  if (from.has_extra_item()) {
    _internal_mutable_extra_item()->::F4BY::Object3::MergeFrom(from._internal_extra_item());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
}

void SCUserPoolDouble::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCUserPoolDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCUserPoolDouble::CopyFrom(const SCUserPoolDouble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCUserPoolDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCUserPoolDouble::IsInitialized() const {
  return true;
}

void SCUserPoolDouble::InternalSwap(SCUserPoolDouble* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCUserPoolDouble, chair_idx_)
      + sizeof(SCUserPoolDouble::chair_idx_)
      - PROTOBUF_FIELD_OFFSET(SCUserPoolDouble, item_)>(
          reinterpret_cast<char*>(&item_),
          reinterpret_cast<char*>(&other->item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCUserPoolDouble::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSLuckyPoolInfo::_Internal {
 public:
};

CSLuckyPoolInfo::CSLuckyPoolInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSLuckyPoolInfo)
}
CSLuckyPoolInfo::CSLuckyPoolInfo(const CSLuckyPoolInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:F4BY.CSLuckyPoolInfo)
}

void CSLuckyPoolInfo::SharedCtor() {
}

CSLuckyPoolInfo::~CSLuckyPoolInfo() {
  // @@protoc_insertion_point(destructor:F4BY.CSLuckyPoolInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSLuckyPoolInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSLuckyPoolInfo::ArenaDtor(void* object) {
  CSLuckyPoolInfo* _this = reinterpret_cast< CSLuckyPoolInfo* >(object);
  (void)_this;
}
void CSLuckyPoolInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSLuckyPoolInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSLuckyPoolInfo& CSLuckyPoolInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSLuckyPoolInfo_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSLuckyPoolInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSLuckyPoolInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSLuckyPoolInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSLuckyPoolInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSLuckyPoolInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSLuckyPoolInfo)
  return target;
}

size_t CSLuckyPoolInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSLuckyPoolInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSLuckyPoolInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSLuckyPoolInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSLuckyPoolInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSLuckyPoolInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSLuckyPoolInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSLuckyPoolInfo)
    MergeFrom(*source);
  }
}

void CSLuckyPoolInfo::MergeFrom(const CSLuckyPoolInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSLuckyPoolInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSLuckyPoolInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSLuckyPoolInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLuckyPoolInfo::CopyFrom(const CSLuckyPoolInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSLuckyPoolInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLuckyPoolInfo::IsInitialized() const {
  return true;
}

void CSLuckyPoolInfo::InternalSwap(CSLuckyPoolInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSLuckyPoolInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCLuckyPoolInfo::_Internal {
 public:
};

SCLuckyPoolInfo::SCLuckyPoolInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCLuckyPoolInfo)
}
SCLuckyPoolInfo::SCLuckyPoolInfo(const SCLuckyPoolInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&count_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCLuckyPoolInfo)
}

void SCLuckyPoolInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&count_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&count_)) + sizeof(max_));
}

SCLuckyPoolInfo::~SCLuckyPoolInfo() {
  // @@protoc_insertion_point(destructor:F4BY.SCLuckyPoolInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCLuckyPoolInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCLuckyPoolInfo::ArenaDtor(void* object) {
  SCLuckyPoolInfo* _this = reinterpret_cast< SCLuckyPoolInfo* >(object);
  (void)_this;
}
void SCLuckyPoolInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCLuckyPoolInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCLuckyPoolInfo& SCLuckyPoolInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCLuckyPoolInfo_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCLuckyPoolInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCLuckyPoolInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&count_)) + sizeof(max_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCLuckyPoolInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCLuckyPoolInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCLuckyPoolInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_count(), target);
  }

  // int32 max = 2;
  if (this->max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCLuckyPoolInfo)
  return target;
}

size_t SCLuckyPoolInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCLuckyPoolInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  // int32 max = 2;
  if (this->max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCLuckyPoolInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCLuckyPoolInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCLuckyPoolInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCLuckyPoolInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCLuckyPoolInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCLuckyPoolInfo)
    MergeFrom(*source);
  }
}

void SCLuckyPoolInfo::MergeFrom(const SCLuckyPoolInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCLuckyPoolInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.max() != 0) {
    _internal_set_max(from._internal_max());
  }
}

void SCLuckyPoolInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCLuckyPoolInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCLuckyPoolInfo::CopyFrom(const SCLuckyPoolInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCLuckyPoolInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCLuckyPoolInfo::IsInitialized() const {
  return true;
}

void SCLuckyPoolInfo::InternalSwap(SCLuckyPoolInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCLuckyPoolInfo, max_)
      + sizeof(SCLuckyPoolInfo::max_)
      - PROTOBUF_FIELD_OFFSET(SCLuckyPoolInfo, count_)>(
          reinterpret_cast<char*>(&count_),
          reinterpret_cast<char*>(&other->count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCLuckyPoolInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSLuckyPoolDraw::_Internal {
 public:
};

CSLuckyPoolDraw::CSLuckyPoolDraw(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSLuckyPoolDraw)
}
CSLuckyPoolDraw::CSLuckyPoolDraw(const CSLuckyPoolDraw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:F4BY.CSLuckyPoolDraw)
}

void CSLuckyPoolDraw::SharedCtor() {
}

CSLuckyPoolDraw::~CSLuckyPoolDraw() {
  // @@protoc_insertion_point(destructor:F4BY.CSLuckyPoolDraw)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSLuckyPoolDraw::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSLuckyPoolDraw::ArenaDtor(void* object) {
  CSLuckyPoolDraw* _this = reinterpret_cast< CSLuckyPoolDraw* >(object);
  (void)_this;
}
void CSLuckyPoolDraw::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSLuckyPoolDraw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSLuckyPoolDraw& CSLuckyPoolDraw::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSLuckyPoolDraw_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSLuckyPoolDraw::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSLuckyPoolDraw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSLuckyPoolDraw::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSLuckyPoolDraw::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSLuckyPoolDraw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSLuckyPoolDraw)
  return target;
}

size_t CSLuckyPoolDraw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSLuckyPoolDraw)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSLuckyPoolDraw::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSLuckyPoolDraw)
  GOOGLE_DCHECK_NE(&from, this);
  const CSLuckyPoolDraw* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSLuckyPoolDraw>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSLuckyPoolDraw)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSLuckyPoolDraw)
    MergeFrom(*source);
  }
}

void CSLuckyPoolDraw::MergeFrom(const CSLuckyPoolDraw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSLuckyPoolDraw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSLuckyPoolDraw::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSLuckyPoolDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLuckyPoolDraw::CopyFrom(const CSLuckyPoolDraw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSLuckyPoolDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLuckyPoolDraw::IsInitialized() const {
  return true;
}

void CSLuckyPoolDraw::InternalSwap(CSLuckyPoolDraw* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSLuckyPoolDraw::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCLuckyPoolDraw::_Internal {
 public:
  static const ::F4BY::Object3& item(const SCLuckyPoolDraw* msg);
};

const ::F4BY::Object3&
SCLuckyPoolDraw::_Internal::item(const SCLuckyPoolDraw* msg) {
  return *msg->item_;
}
SCLuckyPoolDraw::SCLuckyPoolDraw(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCLuckyPoolDraw)
}
SCLuckyPoolDraw::SCLuckyPoolDraw(const SCLuckyPoolDraw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item()) {
    item_ = new ::F4BY::Object3(*from.item_);
  } else {
    item_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:F4BY.SCLuckyPoolDraw)
}

void SCLuckyPoolDraw::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCLuckyPoolDraw_F4BY_2eproto.base);
  item_ = nullptr;
}

SCLuckyPoolDraw::~SCLuckyPoolDraw() {
  // @@protoc_insertion_point(destructor:F4BY.SCLuckyPoolDraw)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCLuckyPoolDraw::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete item_;
}

void SCLuckyPoolDraw::ArenaDtor(void* object) {
  SCLuckyPoolDraw* _this = reinterpret_cast< SCLuckyPoolDraw* >(object);
  (void)_this;
}
void SCLuckyPoolDraw::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCLuckyPoolDraw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCLuckyPoolDraw& SCLuckyPoolDraw::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCLuckyPoolDraw_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCLuckyPoolDraw::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCLuckyPoolDraw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCLuckyPoolDraw::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .F4BY.Object3 item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCLuckyPoolDraw::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCLuckyPoolDraw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .F4BY.Object3 item = 1;
  if (this->has_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::item(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCLuckyPoolDraw)
  return target;
}

size_t SCLuckyPoolDraw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCLuckyPoolDraw)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .F4BY.Object3 item = 1;
  if (this->has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCLuckyPoolDraw::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCLuckyPoolDraw)
  GOOGLE_DCHECK_NE(&from, this);
  const SCLuckyPoolDraw* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCLuckyPoolDraw>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCLuckyPoolDraw)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCLuckyPoolDraw)
    MergeFrom(*source);
  }
}

void SCLuckyPoolDraw::MergeFrom(const SCLuckyPoolDraw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCLuckyPoolDraw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_item()) {
    _internal_mutable_item()->::F4BY::Object3::MergeFrom(from._internal_item());
  }
}

void SCLuckyPoolDraw::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCLuckyPoolDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCLuckyPoolDraw::CopyFrom(const SCLuckyPoolDraw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCLuckyPoolDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCLuckyPoolDraw::IsInitialized() const {
  return true;
}

void SCLuckyPoolDraw::InternalSwap(SCLuckyPoolDraw* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(item_, other->item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCLuckyPoolDraw::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSTorpedoPreShoot::_Internal {
 public:
};

CSTorpedoPreShoot::CSTorpedoPreShoot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSTorpedoPreShoot)
}
CSTorpedoPreShoot::CSTorpedoPreShoot(const CSTorpedoPreShoot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  propid_ = from.propid_;
  // @@protoc_insertion_point(copy_constructor:F4BY.CSTorpedoPreShoot)
}

void CSTorpedoPreShoot::SharedCtor() {
  propid_ = 0;
}

CSTorpedoPreShoot::~CSTorpedoPreShoot() {
  // @@protoc_insertion_point(destructor:F4BY.CSTorpedoPreShoot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSTorpedoPreShoot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSTorpedoPreShoot::ArenaDtor(void* object) {
  CSTorpedoPreShoot* _this = reinterpret_cast< CSTorpedoPreShoot* >(object);
  (void)_this;
}
void CSTorpedoPreShoot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSTorpedoPreShoot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSTorpedoPreShoot& CSTorpedoPreShoot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSTorpedoPreShoot_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSTorpedoPreShoot::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSTorpedoPreShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  propid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSTorpedoPreShoot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 propId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          propid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSTorpedoPreShoot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSTorpedoPreShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 propId = 1;
  if (this->propid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_propid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSTorpedoPreShoot)
  return target;
}

size_t CSTorpedoPreShoot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSTorpedoPreShoot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 propId = 1;
  if (this->propid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_propid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSTorpedoPreShoot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSTorpedoPreShoot)
  GOOGLE_DCHECK_NE(&from, this);
  const CSTorpedoPreShoot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSTorpedoPreShoot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSTorpedoPreShoot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSTorpedoPreShoot)
    MergeFrom(*source);
  }
}

void CSTorpedoPreShoot::MergeFrom(const CSTorpedoPreShoot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSTorpedoPreShoot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.propid() != 0) {
    _internal_set_propid(from._internal_propid());
  }
}

void CSTorpedoPreShoot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSTorpedoPreShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTorpedoPreShoot::CopyFrom(const CSTorpedoPreShoot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSTorpedoPreShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTorpedoPreShoot::IsInitialized() const {
  return true;
}

void CSTorpedoPreShoot::InternalSwap(CSTorpedoPreShoot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(propid_, other->propid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSTorpedoPreShoot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCTorpedoPreShoot::_Internal {
 public:
};

SCTorpedoPreShoot::SCTorpedoPreShoot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCTorpedoPreShoot)
}
SCTorpedoPreShoot::SCTorpedoPreShoot(const SCTorpedoPreShoot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArena());
  }
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCTorpedoPreShoot)
}

void SCTorpedoPreShoot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCTorpedoPreShoot_F4BY_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(code_));
}

SCTorpedoPreShoot::~SCTorpedoPreShoot() {
  // @@protoc_insertion_point(destructor:F4BY.SCTorpedoPreShoot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCTorpedoPreShoot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SCTorpedoPreShoot::ArenaDtor(void* object) {
  SCTorpedoPreShoot* _this = reinterpret_cast< SCTorpedoPreShoot* >(object);
  (void)_this;
}
void SCTorpedoPreShoot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCTorpedoPreShoot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCTorpedoPreShoot& SCTorpedoPreShoot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCTorpedoPreShoot_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCTorpedoPreShoot::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCTorpedoPreShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCTorpedoPreShoot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 propId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          propid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "F4BY.SCTorpedoPreShoot.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCTorpedoPreShoot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCTorpedoPreShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 propId = 2;
  if (this->propid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_propid(), target);
  }

  // int32 code = 3;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_code(), target);
  }

  // string msg = 4;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "F4BY.SCTorpedoPreShoot.msg");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCTorpedoPreShoot)
  return target;
}

size_t SCTorpedoPreShoot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCTorpedoPreShoot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 4;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 propId = 2;
  if (this->propid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_propid());
  }

  // int32 code = 3;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCTorpedoPreShoot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCTorpedoPreShoot)
  GOOGLE_DCHECK_NE(&from, this);
  const SCTorpedoPreShoot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCTorpedoPreShoot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCTorpedoPreShoot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCTorpedoPreShoot)
    MergeFrom(*source);
  }
}

void SCTorpedoPreShoot::MergeFrom(const SCTorpedoPreShoot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCTorpedoPreShoot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {
    _internal_set_msg(from._internal_msg());
  }
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.propid() != 0) {
    _internal_set_propid(from._internal_propid());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void SCTorpedoPreShoot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCTorpedoPreShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCTorpedoPreShoot::CopyFrom(const SCTorpedoPreShoot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCTorpedoPreShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCTorpedoPreShoot::IsInitialized() const {
  return true;
}

void SCTorpedoPreShoot::InternalSwap(SCTorpedoPreShoot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCTorpedoPreShoot, code_)
      + sizeof(SCTorpedoPreShoot::code_)
      - PROTOBUF_FIELD_OFFSET(SCTorpedoPreShoot, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCTorpedoPreShoot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSTorpedoCancelShoot::_Internal {
 public:
};

CSTorpedoCancelShoot::CSTorpedoCancelShoot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSTorpedoCancelShoot)
}
CSTorpedoCancelShoot::CSTorpedoCancelShoot(const CSTorpedoCancelShoot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:F4BY.CSTorpedoCancelShoot)
}

void CSTorpedoCancelShoot::SharedCtor() {
}

CSTorpedoCancelShoot::~CSTorpedoCancelShoot() {
  // @@protoc_insertion_point(destructor:F4BY.CSTorpedoCancelShoot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSTorpedoCancelShoot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSTorpedoCancelShoot::ArenaDtor(void* object) {
  CSTorpedoCancelShoot* _this = reinterpret_cast< CSTorpedoCancelShoot* >(object);
  (void)_this;
}
void CSTorpedoCancelShoot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSTorpedoCancelShoot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSTorpedoCancelShoot& CSTorpedoCancelShoot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSTorpedoCancelShoot_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSTorpedoCancelShoot::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSTorpedoCancelShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSTorpedoCancelShoot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSTorpedoCancelShoot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSTorpedoCancelShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSTorpedoCancelShoot)
  return target;
}

size_t CSTorpedoCancelShoot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSTorpedoCancelShoot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSTorpedoCancelShoot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSTorpedoCancelShoot)
  GOOGLE_DCHECK_NE(&from, this);
  const CSTorpedoCancelShoot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSTorpedoCancelShoot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSTorpedoCancelShoot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSTorpedoCancelShoot)
    MergeFrom(*source);
  }
}

void CSTorpedoCancelShoot::MergeFrom(const CSTorpedoCancelShoot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSTorpedoCancelShoot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSTorpedoCancelShoot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSTorpedoCancelShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTorpedoCancelShoot::CopyFrom(const CSTorpedoCancelShoot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSTorpedoCancelShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTorpedoCancelShoot::IsInitialized() const {
  return true;
}

void CSTorpedoCancelShoot::InternalSwap(CSTorpedoCancelShoot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSTorpedoCancelShoot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCTorpedoCancelShoot::_Internal {
 public:
};

SCTorpedoCancelShoot::SCTorpedoCancelShoot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCTorpedoCancelShoot)
}
SCTorpedoCancelShoot::SCTorpedoCancelShoot(const SCTorpedoCancelShoot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chair_idx_ = from.chair_idx_;
  // @@protoc_insertion_point(copy_constructor:F4BY.SCTorpedoCancelShoot)
}

void SCTorpedoCancelShoot::SharedCtor() {
  chair_idx_ = 0;
}

SCTorpedoCancelShoot::~SCTorpedoCancelShoot() {
  // @@protoc_insertion_point(destructor:F4BY.SCTorpedoCancelShoot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCTorpedoCancelShoot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCTorpedoCancelShoot::ArenaDtor(void* object) {
  SCTorpedoCancelShoot* _this = reinterpret_cast< SCTorpedoCancelShoot* >(object);
  (void)_this;
}
void SCTorpedoCancelShoot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCTorpedoCancelShoot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCTorpedoCancelShoot& SCTorpedoCancelShoot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCTorpedoCancelShoot_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCTorpedoCancelShoot::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCTorpedoCancelShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chair_idx_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCTorpedoCancelShoot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCTorpedoCancelShoot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCTorpedoCancelShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCTorpedoCancelShoot)
  return target;
}

size_t SCTorpedoCancelShoot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCTorpedoCancelShoot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCTorpedoCancelShoot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCTorpedoCancelShoot)
  GOOGLE_DCHECK_NE(&from, this);
  const SCTorpedoCancelShoot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCTorpedoCancelShoot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCTorpedoCancelShoot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCTorpedoCancelShoot)
    MergeFrom(*source);
  }
}

void SCTorpedoCancelShoot::MergeFrom(const SCTorpedoCancelShoot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCTorpedoCancelShoot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
}

void SCTorpedoCancelShoot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCTorpedoCancelShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCTorpedoCancelShoot::CopyFrom(const SCTorpedoCancelShoot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCTorpedoCancelShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCTorpedoCancelShoot::IsInitialized() const {
  return true;
}

void SCTorpedoCancelShoot::InternalSwap(SCTorpedoCancelShoot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(chair_idx_, other->chair_idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCTorpedoCancelShoot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSTorpedoShoot::_Internal {
 public:
};

CSTorpedoShoot::CSTorpedoShoot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSTorpedoShoot)
}
CSTorpedoShoot::CSTorpedoShoot(const CSTorpedoShoot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fish_uid_, &from.fish_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&fish_uid_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:F4BY.CSTorpedoShoot)
}

void CSTorpedoShoot::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fish_uid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&fish_uid_)) + sizeof(y_));
}

CSTorpedoShoot::~CSTorpedoShoot() {
  // @@protoc_insertion_point(destructor:F4BY.CSTorpedoShoot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSTorpedoShoot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSTorpedoShoot::ArenaDtor(void* object) {
  CSTorpedoShoot* _this = reinterpret_cast< CSTorpedoShoot* >(object);
  (void)_this;
}
void CSTorpedoShoot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSTorpedoShoot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSTorpedoShoot& CSTorpedoShoot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSTorpedoShoot_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSTorpedoShoot::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSTorpedoShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fish_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&fish_uid_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSTorpedoShoot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 fish_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fish_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSTorpedoShoot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSTorpedoShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fish_uid = 1;
  if (this->fish_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_fish_uid(), target);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSTorpedoShoot)
  return target;
}

size_t CSTorpedoShoot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSTorpedoShoot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 fish_uid = 1;
  if (this->fish_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_uid());
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSTorpedoShoot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSTorpedoShoot)
  GOOGLE_DCHECK_NE(&from, this);
  const CSTorpedoShoot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSTorpedoShoot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSTorpedoShoot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSTorpedoShoot)
    MergeFrom(*source);
  }
}

void CSTorpedoShoot::MergeFrom(const CSTorpedoShoot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSTorpedoShoot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fish_uid() != 0) {
    _internal_set_fish_uid(from._internal_fish_uid());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void CSTorpedoShoot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSTorpedoShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTorpedoShoot::CopyFrom(const CSTorpedoShoot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSTorpedoShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTorpedoShoot::IsInitialized() const {
  return true;
}

void CSTorpedoShoot::InternalSwap(CSTorpedoShoot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSTorpedoShoot, y_)
      + sizeof(CSTorpedoShoot::y_)
      - PROTOBUF_FIELD_OFFSET(CSTorpedoShoot, fish_uid_)>(
          reinterpret_cast<char*>(&fish_uid_),
          reinterpret_cast<char*>(&other->fish_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSTorpedoShoot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCTorpedoShoot::_Internal {
 public:
};

SCTorpedoShoot::SCTorpedoShoot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCTorpedoShoot)
}
SCTorpedoShoot::SCTorpedoShoot(const SCTorpedoShoot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCTorpedoShoot)
}

void SCTorpedoShoot::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(y_));
}

SCTorpedoShoot::~SCTorpedoShoot() {
  // @@protoc_insertion_point(destructor:F4BY.SCTorpedoShoot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCTorpedoShoot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCTorpedoShoot::ArenaDtor(void* object) {
  SCTorpedoShoot* _this = reinterpret_cast< SCTorpedoShoot* >(object);
  (void)_this;
}
void SCTorpedoShoot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCTorpedoShoot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCTorpedoShoot& SCTorpedoShoot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCTorpedoShoot_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCTorpedoShoot::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCTorpedoShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCTorpedoShoot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fish_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCTorpedoShoot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCTorpedoShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 fish_uid = 2;
  if (this->fish_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fish_uid(), target);
  }

  // float x = 3;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_x(), target);
  }

  // float y = 4;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCTorpedoShoot)
  return target;
}

size_t SCTorpedoShoot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCTorpedoShoot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 fish_uid = 2;
  if (this->fish_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_uid());
  }

  // float x = 3;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 4;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCTorpedoShoot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCTorpedoShoot)
  GOOGLE_DCHECK_NE(&from, this);
  const SCTorpedoShoot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCTorpedoShoot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCTorpedoShoot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCTorpedoShoot)
    MergeFrom(*source);
  }
}

void SCTorpedoShoot::MergeFrom(const SCTorpedoShoot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCTorpedoShoot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.fish_uid() != 0) {
    _internal_set_fish_uid(from._internal_fish_uid());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void SCTorpedoShoot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCTorpedoShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCTorpedoShoot::CopyFrom(const SCTorpedoShoot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCTorpedoShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCTorpedoShoot::IsInitialized() const {
  return true;
}

void SCTorpedoShoot::InternalSwap(SCTorpedoShoot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCTorpedoShoot, y_)
      + sizeof(SCTorpedoShoot::y_)
      - PROTOBUF_FIELD_OFFSET(SCTorpedoShoot, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCTorpedoShoot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSTorpedoHit::_Internal {
 public:
};

CSTorpedoHit::CSTorpedoHit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSTorpedoHit)
}
CSTorpedoHit::CSTorpedoHit(const CSTorpedoHit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:F4BY.CSTorpedoHit)
}

void CSTorpedoHit::SharedCtor() {
}

CSTorpedoHit::~CSTorpedoHit() {
  // @@protoc_insertion_point(destructor:F4BY.CSTorpedoHit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSTorpedoHit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSTorpedoHit::ArenaDtor(void* object) {
  CSTorpedoHit* _this = reinterpret_cast< CSTorpedoHit* >(object);
  (void)_this;
}
void CSTorpedoHit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSTorpedoHit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSTorpedoHit& CSTorpedoHit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSTorpedoHit_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSTorpedoHit::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSTorpedoHit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSTorpedoHit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSTorpedoHit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSTorpedoHit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSTorpedoHit)
  return target;
}

size_t CSTorpedoHit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSTorpedoHit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSTorpedoHit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSTorpedoHit)
  GOOGLE_DCHECK_NE(&from, this);
  const CSTorpedoHit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSTorpedoHit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSTorpedoHit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSTorpedoHit)
    MergeFrom(*source);
  }
}

void CSTorpedoHit::MergeFrom(const CSTorpedoHit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSTorpedoHit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSTorpedoHit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSTorpedoHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTorpedoHit::CopyFrom(const CSTorpedoHit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSTorpedoHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTorpedoHit::IsInitialized() const {
  return true;
}

void CSTorpedoHit::InternalSwap(CSTorpedoHit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSTorpedoHit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCTorpedoHit::_Internal {
 public:
};

SCTorpedoHit::SCTorpedoHit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCTorpedoHit)
}
SCTorpedoHit::SCTorpedoHit(const SCTorpedoHit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCTorpedoHit)
}

void SCTorpedoHit::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(y_));
}

SCTorpedoHit::~SCTorpedoHit() {
  // @@protoc_insertion_point(destructor:F4BY.SCTorpedoHit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCTorpedoHit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCTorpedoHit::ArenaDtor(void* object) {
  SCTorpedoHit* _this = reinterpret_cast< SCTorpedoHit* >(object);
  (void)_this;
}
void SCTorpedoHit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCTorpedoHit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCTorpedoHit& SCTorpedoHit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCTorpedoHit_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCTorpedoHit::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCTorpedoHit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCTorpedoHit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 earn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          earn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 propId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          propid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 remain = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          remain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_uid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          fish_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCTorpedoHit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCTorpedoHit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 earn = 2;
  if (this->earn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_earn(), target);
  }

  // int32 score = 3;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_score(), target);
  }

  // int32 propId = 4;
  if (this->propid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_propid(), target);
  }

  // int32 remain = 5;
  if (this->remain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_remain(), target);
  }

  // int32 fish_uid = 6;
  if (this->fish_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_fish_uid(), target);
  }

  // float x = 7;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_x(), target);
  }

  // float y = 8;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCTorpedoHit)
  return target;
}

size_t SCTorpedoHit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCTorpedoHit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 earn = 2;
  if (this->earn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_earn());
  }

  // int32 score = 3;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  // int32 propId = 4;
  if (this->propid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_propid());
  }

  // int32 remain = 5;
  if (this->remain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_remain());
  }

  // int32 fish_uid = 6;
  if (this->fish_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_uid());
  }

  // float x = 7;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 8;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCTorpedoHit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCTorpedoHit)
  GOOGLE_DCHECK_NE(&from, this);
  const SCTorpedoHit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCTorpedoHit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCTorpedoHit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCTorpedoHit)
    MergeFrom(*source);
  }
}

void SCTorpedoHit::MergeFrom(const SCTorpedoHit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCTorpedoHit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.earn() != 0) {
    _internal_set_earn(from._internal_earn());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.propid() != 0) {
    _internal_set_propid(from._internal_propid());
  }
  if (from.remain() != 0) {
    _internal_set_remain(from._internal_remain());
  }
  if (from.fish_uid() != 0) {
    _internal_set_fish_uid(from._internal_fish_uid());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void SCTorpedoHit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCTorpedoHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCTorpedoHit::CopyFrom(const SCTorpedoHit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCTorpedoHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCTorpedoHit::IsInitialized() const {
  return true;
}

void SCTorpedoHit::InternalSwap(SCTorpedoHit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCTorpedoHit, y_)
      + sizeof(SCTorpedoHit::y_)
      - PROTOBUF_FIELD_OFFSET(SCTorpedoHit, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCTorpedoHit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSCallFish::_Internal {
 public:
};

CSCallFish::CSCallFish(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSCallFish)
}
CSCallFish::CSCallFish(const CSCallFish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  call_type_ = from.call_type_;
  // @@protoc_insertion_point(copy_constructor:F4BY.CSCallFish)
}

void CSCallFish::SharedCtor() {
  call_type_ = 0;
}

CSCallFish::~CSCallFish() {
  // @@protoc_insertion_point(destructor:F4BY.CSCallFish)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSCallFish::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSCallFish::ArenaDtor(void* object) {
  CSCallFish* _this = reinterpret_cast< CSCallFish* >(object);
  (void)_this;
}
void CSCallFish::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSCallFish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSCallFish& CSCallFish::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSCallFish_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSCallFish::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSCallFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  call_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSCallFish::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .F4BY.CallFishType call_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_call_type(static_cast<::F4BY::CallFishType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSCallFish::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSCallFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .F4BY.CallFishType call_type = 1;
  if (this->call_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_call_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSCallFish)
  return target;
}

size_t CSCallFish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSCallFish)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .F4BY.CallFishType call_type = 1;
  if (this->call_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_call_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSCallFish::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSCallFish)
  GOOGLE_DCHECK_NE(&from, this);
  const CSCallFish* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSCallFish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSCallFish)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSCallFish)
    MergeFrom(*source);
  }
}

void CSCallFish::MergeFrom(const CSCallFish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSCallFish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.call_type() != 0) {
    _internal_set_call_type(from._internal_call_type());
  }
}

void CSCallFish::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSCallFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSCallFish::CopyFrom(const CSCallFish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSCallFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCallFish::IsInitialized() const {
  return true;
}

void CSCallFish::InternalSwap(CSCallFish* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(call_type_, other->call_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSCallFish::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCCallFish::_Internal {
 public:
};

SCCallFish::SCCallFish(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCCallFish)
}
SCCallFish::SCCallFish(const SCCallFish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArena());
  }
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCCallFish)
}

void SCCallFish::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCCallFish_F4BY_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(code_));
}

SCCallFish::~SCCallFish() {
  // @@protoc_insertion_point(destructor:F4BY.SCCallFish)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCCallFish::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SCCallFish::ArenaDtor(void* object) {
  SCCallFish* _this = reinterpret_cast< SCCallFish* >(object);
  (void)_this;
}
void SCCallFish::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCCallFish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCCallFish& SCCallFish::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCCallFish_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCCallFish::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCCallFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCCallFish::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 propId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          propid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 remain = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          remain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "F4BY.SCCallFish.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCCallFish::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCCallFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 propId = 2;
  if (this->propid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_propid(), target);
  }

  // int32 remain = 3;
  if (this->remain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_remain(), target);
  }

  // int32 code = 4;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_code(), target);
  }

  // string msg = 5;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "F4BY.SCCallFish.msg");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCCallFish)
  return target;
}

size_t SCCallFish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCCallFish)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 5;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 propId = 2;
  if (this->propid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_propid());
  }

  // int32 remain = 3;
  if (this->remain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_remain());
  }

  // int32 code = 4;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCCallFish::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCCallFish)
  GOOGLE_DCHECK_NE(&from, this);
  const SCCallFish* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCCallFish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCCallFish)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCCallFish)
    MergeFrom(*source);
  }
}

void SCCallFish::MergeFrom(const SCCallFish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCCallFish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {
    _internal_set_msg(from._internal_msg());
  }
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.propid() != 0) {
    _internal_set_propid(from._internal_propid());
  }
  if (from.remain() != 0) {
    _internal_set_remain(from._internal_remain());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void SCCallFish::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCCallFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCCallFish::CopyFrom(const SCCallFish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCCallFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCCallFish::IsInitialized() const {
  return true;
}

void SCCallFish::InternalSwap(SCCallFish* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCCallFish, code_)
      + sizeof(SCCallFish::code_)
      - PROTOBUF_FIELD_OFFSET(SCCallFish, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCCallFish::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCComTask::_Internal {
 public:
};

SCComTask::SCComTask(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCComTask)
}
SCComTask::SCComTask(const SCComTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gun_ratio_, &from.gun_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&ticket_) -
    reinterpret_cast<char*>(&gun_ratio_)) + sizeof(ticket_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCComTask)
}

void SCComTask::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gun_ratio_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ticket_) -
      reinterpret_cast<char*>(&gun_ratio_)) + sizeof(ticket_));
}

SCComTask::~SCComTask() {
  // @@protoc_insertion_point(destructor:F4BY.SCComTask)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCComTask::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCComTask::ArenaDtor(void* object) {
  SCComTask* _this = reinterpret_cast< SCComTask* >(object);
  (void)_this;
}
void SCComTask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCComTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCComTask& SCComTask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCComTask_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCComTask::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCComTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gun_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ticket_) -
      reinterpret_cast<char*>(&gun_ratio_)) + sizeof(ticket_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCComTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 gun_ratio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gun_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gun_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gun_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 award = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          award_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ticket = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ticket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCComTask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCComTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gun_ratio = 1;
  if (this->gun_ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_gun_ratio(), target);
  }

  // int32 gun_level = 2;
  if (this->gun_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_gun_level(), target);
  }

  // int32 award = 3;
  if (this->award() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_award(), target);
  }

  // int32 ticket = 4;
  if (this->ticket() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ticket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCComTask)
  return target;
}

size_t SCComTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCComTask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 gun_ratio = 1;
  if (this->gun_ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gun_ratio());
  }

  // int32 gun_level = 2;
  if (this->gun_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gun_level());
  }

  // int32 award = 3;
  if (this->award() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_award());
  }

  // int32 ticket = 4;
  if (this->ticket() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ticket());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCComTask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCComTask)
  GOOGLE_DCHECK_NE(&from, this);
  const SCComTask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCComTask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCComTask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCComTask)
    MergeFrom(*source);
  }
}

void SCComTask::MergeFrom(const SCComTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCComTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gun_ratio() != 0) {
    _internal_set_gun_ratio(from._internal_gun_ratio());
  }
  if (from.gun_level() != 0) {
    _internal_set_gun_level(from._internal_gun_level());
  }
  if (from.award() != 0) {
    _internal_set_award(from._internal_award());
  }
  if (from.ticket() != 0) {
    _internal_set_ticket(from._internal_ticket());
  }
}

void SCComTask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCComTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCComTask::CopyFrom(const SCComTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCComTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCComTask::IsInitialized() const {
  return true;
}

void SCComTask::InternalSwap(SCComTask* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCComTask, ticket_)
      + sizeof(SCComTask::ticket_)
      - PROTOBUF_FIELD_OFFSET(SCComTask, gun_ratio_)>(
          reinterpret_cast<char*>(&gun_ratio_),
          reinterpret_cast<char*>(&other->gun_ratio_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCComTask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCTaskInfo::_Internal {
 public:
};

SCTaskInfo::SCTaskInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCTaskInfo)
}
SCTaskInfo::SCTaskInfo(const SCTaskInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gun_ratio_, &from.gun_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&ticket_) -
    reinterpret_cast<char*>(&gun_ratio_)) + sizeof(ticket_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCTaskInfo)
}

void SCTaskInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gun_ratio_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ticket_) -
      reinterpret_cast<char*>(&gun_ratio_)) + sizeof(ticket_));
}

SCTaskInfo::~SCTaskInfo() {
  // @@protoc_insertion_point(destructor:F4BY.SCTaskInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCTaskInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCTaskInfo::ArenaDtor(void* object) {
  SCTaskInfo* _this = reinterpret_cast< SCTaskInfo* >(object);
  (void)_this;
}
void SCTaskInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCTaskInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCTaskInfo& SCTaskInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCTaskInfo_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCTaskInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCTaskInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gun_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ticket_) -
      reinterpret_cast<char*>(&gun_ratio_)) + sizeof(ticket_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCTaskInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 gun_ratio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gun_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gun_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gun_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cur_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cur_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          total_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vip_level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          vip_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_unlock = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_unlock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 award = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          award_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_vip_unlock = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          is_vip_unlock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ticket = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ticket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCTaskInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCTaskInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gun_ratio = 1;
  if (this->gun_ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_gun_ratio(), target);
  }

  // int32 gun_level = 2;
  if (this->gun_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_gun_level(), target);
  }

  // int32 cur_num = 3;
  if (this->cur_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_cur_num(), target);
  }

  // int32 total_num = 4;
  if (this->total_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_total_num(), target);
  }

  // int32 vip_level = 5;
  if (this->vip_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_vip_level(), target);
  }

  // bool is_unlock = 6;
  if (this->is_unlock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_unlock(), target);
  }

  // int32 award = 7;
  if (this->award() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_award(), target);
  }

  // bool is_vip_unlock = 8;
  if (this->is_vip_unlock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_vip_unlock(), target);
  }

  // int32 ticket = 9;
  if (this->ticket() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_ticket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCTaskInfo)
  return target;
}

size_t SCTaskInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCTaskInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 gun_ratio = 1;
  if (this->gun_ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gun_ratio());
  }

  // int32 gun_level = 2;
  if (this->gun_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gun_level());
  }

  // int32 cur_num = 3;
  if (this->cur_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur_num());
  }

  // int32 total_num = 4;
  if (this->total_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_num());
  }

  // int32 vip_level = 5;
  if (this->vip_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vip_level());
  }

  // int32 award = 7;
  if (this->award() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_award());
  }

  // bool is_unlock = 6;
  if (this->is_unlock() != 0) {
    total_size += 1 + 1;
  }

  // bool is_vip_unlock = 8;
  if (this->is_vip_unlock() != 0) {
    total_size += 1 + 1;
  }

  // int32 ticket = 9;
  if (this->ticket() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ticket());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCTaskInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCTaskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCTaskInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCTaskInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCTaskInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCTaskInfo)
    MergeFrom(*source);
  }
}

void SCTaskInfo::MergeFrom(const SCTaskInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCTaskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gun_ratio() != 0) {
    _internal_set_gun_ratio(from._internal_gun_ratio());
  }
  if (from.gun_level() != 0) {
    _internal_set_gun_level(from._internal_gun_level());
  }
  if (from.cur_num() != 0) {
    _internal_set_cur_num(from._internal_cur_num());
  }
  if (from.total_num() != 0) {
    _internal_set_total_num(from._internal_total_num());
  }
  if (from.vip_level() != 0) {
    _internal_set_vip_level(from._internal_vip_level());
  }
  if (from.award() != 0) {
    _internal_set_award(from._internal_award());
  }
  if (from.is_unlock() != 0) {
    _internal_set_is_unlock(from._internal_is_unlock());
  }
  if (from.is_vip_unlock() != 0) {
    _internal_set_is_vip_unlock(from._internal_is_vip_unlock());
  }
  if (from.ticket() != 0) {
    _internal_set_ticket(from._internal_ticket());
  }
}

void SCTaskInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCTaskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCTaskInfo::CopyFrom(const SCTaskInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCTaskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCTaskInfo::IsInitialized() const {
  return true;
}

void SCTaskInfo::InternalSwap(SCTaskInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCTaskInfo, ticket_)
      + sizeof(SCTaskInfo::ticket_)
      - PROTOBUF_FIELD_OFFSET(SCTaskInfo, gun_ratio_)>(
          reinterpret_cast<char*>(&gun_ratio_),
          reinterpret_cast<char*>(&other->gun_ratio_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCTaskInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSaveSkillTime::_Internal {
 public:
};

CSSaveSkillTime::CSSaveSkillTime(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSSaveSkillTime)
}
CSSaveSkillTime::CSSaveSkillTime(const CSSaveSkillTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&auto__, &from.auto__,
    static_cast<size_t>(reinterpret_cast<char*>(&treble_) -
    reinterpret_cast<char*>(&auto__)) + sizeof(treble_));
  // @@protoc_insertion_point(copy_constructor:F4BY.CSSaveSkillTime)
}

void CSSaveSkillTime::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&auto__) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&treble_) -
      reinterpret_cast<char*>(&auto__)) + sizeof(treble_));
}

CSSaveSkillTime::~CSSaveSkillTime() {
  // @@protoc_insertion_point(destructor:F4BY.CSSaveSkillTime)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSaveSkillTime::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSSaveSkillTime::ArenaDtor(void* object) {
  CSSaveSkillTime* _this = reinterpret_cast< CSSaveSkillTime* >(object);
  (void)_this;
}
void CSSaveSkillTime::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSaveSkillTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSaveSkillTime& CSSaveSkillTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSaveSkillTime_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSSaveSkillTime::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSSaveSkillTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&auto__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&treble_) -
      reinterpret_cast<char*>(&auto__)) + sizeof(treble_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSaveSkillTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 auto = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          auto__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lock = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          lock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 angry = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          angry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 treble = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          treble_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSaveSkillTime::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSSaveSkillTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 auto = 1;
  if (this->auto_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_auto_(), target);
  }

  // int32 lock = 2;
  if (this->lock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_lock(), target);
  }

  // int32 angry = 3;
  if (this->angry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_angry(), target);
  }

  // int32 treble = 4;
  if (this->treble() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_treble(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSSaveSkillTime)
  return target;
}

size_t CSSaveSkillTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSSaveSkillTime)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 auto = 1;
  if (this->auto_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_auto_());
  }

  // int32 lock = 2;
  if (this->lock() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lock());
  }

  // int32 angry = 3;
  if (this->angry() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_angry());
  }

  // int32 treble = 4;
  if (this->treble() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_treble());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSaveSkillTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSSaveSkillTime)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSaveSkillTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSaveSkillTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSSaveSkillTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSSaveSkillTime)
    MergeFrom(*source);
  }
}

void CSSaveSkillTime::MergeFrom(const CSSaveSkillTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSSaveSkillTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.auto_() != 0) {
    _internal_set_auto_(from._internal_auto_());
  }
  if (from.lock() != 0) {
    _internal_set_lock(from._internal_lock());
  }
  if (from.angry() != 0) {
    _internal_set_angry(from._internal_angry());
  }
  if (from.treble() != 0) {
    _internal_set_treble(from._internal_treble());
  }
}

void CSSaveSkillTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSSaveSkillTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSaveSkillTime::CopyFrom(const CSSaveSkillTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSSaveSkillTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSaveSkillTime::IsInitialized() const {
  return true;
}

void CSSaveSkillTime::InternalSwap(CSSaveSkillTime* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSSaveSkillTime, treble_)
      + sizeof(CSSaveSkillTime::treble_)
      - PROTOBUF_FIELD_OFFSET(CSSaveSkillTime, auto__)>(
          reinterpret_cast<char*>(&auto__),
          reinterpret_cast<char*>(&other->auto__));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSaveSkillTime::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SevenDayTask::_Internal {
 public:
};

SevenDayTask::SevenDayTask(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SevenDayTask)
}
SevenDayTask::SevenDayTask(const SevenDayTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&award_) -
    reinterpret_cast<char*>(&index_)) + sizeof(award_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SevenDayTask)
}

void SevenDayTask::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&award_) -
      reinterpret_cast<char*>(&index_)) + sizeof(award_));
}

SevenDayTask::~SevenDayTask() {
  // @@protoc_insertion_point(destructor:F4BY.SevenDayTask)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SevenDayTask::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SevenDayTask::ArenaDtor(void* object) {
  SevenDayTask* _this = reinterpret_cast< SevenDayTask* >(object);
  (void)_this;
}
void SevenDayTask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SevenDayTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SevenDayTask& SevenDayTask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SevenDayTask_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SevenDayTask::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SevenDayTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&award_) -
      reinterpret_cast<char*>(&index_)) + sizeof(award_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SevenDayTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fish_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cur_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          cur_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 award = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          award_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SevenDayTask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SevenDayTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 fish_id = 2;
  if (this->fish_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fish_id(), target);
  }

  // int32 total_num = 3;
  if (this->total_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_total_num(), target);
  }

  // int32 cur_num = 4;
  if (this->cur_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_cur_num(), target);
  }

  // int32 status = 5;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_status(), target);
  }

  // int32 award = 6;
  if (this->award() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_award(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SevenDayTask)
  return target;
}

size_t SevenDayTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SevenDayTask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // int32 fish_id = 2;
  if (this->fish_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_id());
  }

  // int32 total_num = 3;
  if (this->total_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_num());
  }

  // int32 cur_num = 4;
  if (this->cur_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur_num());
  }

  // int32 status = 5;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 award = 6;
  if (this->award() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_award());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SevenDayTask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SevenDayTask)
  GOOGLE_DCHECK_NE(&from, this);
  const SevenDayTask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SevenDayTask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SevenDayTask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SevenDayTask)
    MergeFrom(*source);
  }
}

void SevenDayTask::MergeFrom(const SevenDayTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SevenDayTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.fish_id() != 0) {
    _internal_set_fish_id(from._internal_fish_id());
  }
  if (from.total_num() != 0) {
    _internal_set_total_num(from._internal_total_num());
  }
  if (from.cur_num() != 0) {
    _internal_set_cur_num(from._internal_cur_num());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.award() != 0) {
    _internal_set_award(from._internal_award());
  }
}

void SevenDayTask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SevenDayTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SevenDayTask::CopyFrom(const SevenDayTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SevenDayTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SevenDayTask::IsInitialized() const {
  return true;
}

void SevenDayTask::InternalSwap(SevenDayTask* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SevenDayTask, award_)
      + sizeof(SevenDayTask::award_)
      - PROTOBUF_FIELD_OFFSET(SevenDayTask, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SevenDayTask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SevenDayDetail::_Internal {
 public:
  static const ::F4BY::SevenDayTask& task(const SevenDayDetail* msg);
};

const ::F4BY::SevenDayTask&
SevenDayDetail::_Internal::task(const SevenDayDetail* msg) {
  return *msg->task_;
}
SevenDayDetail::SevenDayDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SevenDayDetail)
}
SevenDayDetail::SevenDayDetail(const SevenDayDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_task()) {
    task_ = new ::F4BY::SevenDayTask(*from.task_);
  } else {
    task_ = nullptr;
  }
  ::memcpy(&day_, &from.day_,
    static_cast<size_t>(reinterpret_cast<char*>(&box_status_) -
    reinterpret_cast<char*>(&day_)) + sizeof(box_status_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SevenDayDetail)
}

void SevenDayDetail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SevenDayDetail_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&task_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&box_status_) -
      reinterpret_cast<char*>(&task_)) + sizeof(box_status_));
}

SevenDayDetail::~SevenDayDetail() {
  // @@protoc_insertion_point(destructor:F4BY.SevenDayDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SevenDayDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete task_;
}

void SevenDayDetail::ArenaDtor(void* object) {
  SevenDayDetail* _this = reinterpret_cast< SevenDayDetail* >(object);
  (void)_this;
}
void SevenDayDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SevenDayDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SevenDayDetail& SevenDayDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SevenDayDetail_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SevenDayDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SevenDayDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
  ::memset(&day_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&box_status_) -
      reinterpret_cast<char*>(&day_)) + sizeof(box_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SevenDayDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 day = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 box_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          box_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .F4BY.SevenDayTask task = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_task(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SevenDayDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SevenDayDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 day = 1;
  if (this->day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_day(), target);
  }

  // int32 box_status = 2;
  if (this->box_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_box_status(), target);
  }

  // .F4BY.SevenDayTask task = 3;
  if (this->has_task()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::task(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SevenDayDetail)
  return target;
}

size_t SevenDayDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SevenDayDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .F4BY.SevenDayTask task = 3;
  if (this->has_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_);
  }

  // int32 day = 1;
  if (this->day() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_day());
  }

  // int32 box_status = 2;
  if (this->box_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_box_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SevenDayDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SevenDayDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const SevenDayDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SevenDayDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SevenDayDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SevenDayDetail)
    MergeFrom(*source);
  }
}

void SevenDayDetail::MergeFrom(const SevenDayDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SevenDayDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_task()) {
    _internal_mutable_task()->::F4BY::SevenDayTask::MergeFrom(from._internal_task());
  }
  if (from.day() != 0) {
    _internal_set_day(from._internal_day());
  }
  if (from.box_status() != 0) {
    _internal_set_box_status(from._internal_box_status());
  }
}

void SevenDayDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SevenDayDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SevenDayDetail::CopyFrom(const SevenDayDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SevenDayDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SevenDayDetail::IsInitialized() const {
  return true;
}

void SevenDayDetail::InternalSwap(SevenDayDetail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SevenDayDetail, box_status_)
      + sizeof(SevenDayDetail::box_status_)
      - PROTOBUF_FIELD_OFFSET(SevenDayDetail, task_)>(
          reinterpret_cast<char*>(&task_),
          reinterpret_cast<char*>(&other->task_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SevenDayDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSevenDayInfo::_Internal {
 public:
};

CSSevenDayInfo::CSSevenDayInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSSevenDayInfo)
}
CSSevenDayInfo::CSSevenDayInfo(const CSSevenDayInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:F4BY.CSSevenDayInfo)
}

void CSSevenDayInfo::SharedCtor() {
}

CSSevenDayInfo::~CSSevenDayInfo() {
  // @@protoc_insertion_point(destructor:F4BY.CSSevenDayInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSevenDayInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSSevenDayInfo::ArenaDtor(void* object) {
  CSSevenDayInfo* _this = reinterpret_cast< CSSevenDayInfo* >(object);
  (void)_this;
}
void CSSevenDayInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSevenDayInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSevenDayInfo& CSSevenDayInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSevenDayInfo_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSSevenDayInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSSevenDayInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSevenDayInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSevenDayInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSSevenDayInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSSevenDayInfo)
  return target;
}

size_t CSSevenDayInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSSevenDayInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSevenDayInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSSevenDayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSevenDayInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSevenDayInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSSevenDayInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSSevenDayInfo)
    MergeFrom(*source);
  }
}

void CSSevenDayInfo::MergeFrom(const CSSevenDayInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSSevenDayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSSevenDayInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSSevenDayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSevenDayInfo::CopyFrom(const CSSevenDayInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSSevenDayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSevenDayInfo::IsInitialized() const {
  return true;
}

void CSSevenDayInfo::InternalSwap(CSSevenDayInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSevenDayInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSevenDayInfo::_Internal {
 public:
  static const ::F4BY::SevenDayDetail& detail(const SCSevenDayInfo* msg);
};

const ::F4BY::SevenDayDetail&
SCSevenDayInfo::_Internal::detail(const SCSevenDayInfo* msg) {
  return *msg->detail_;
}
SCSevenDayInfo::SCSevenDayInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCSevenDayInfo)
}
SCSevenDayInfo::SCSevenDayInfo(const SCSevenDayInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  start_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_start_date().empty()) {
    start_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_start_date(), 
      GetArena());
  }
  end_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_end_date().empty()) {
    end_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_end_date(), 
      GetArena());
  }
  if (from._internal_has_detail()) {
    detail_ = new ::F4BY::SevenDayDetail(*from.detail_);
  } else {
    detail_ = nullptr;
  }
  ::memcpy(&cur_day_, &from.cur_day_,
    static_cast<size_t>(reinterpret_cast<char*>(&gun_enable_) -
    reinterpret_cast<char*>(&cur_day_)) + sizeof(gun_enable_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCSevenDayInfo)
}

void SCSevenDayInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCSevenDayInfo_F4BY_2eproto.base);
  start_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&detail_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&gun_enable_) -
      reinterpret_cast<char*>(&detail_)) + sizeof(gun_enable_));
}

SCSevenDayInfo::~SCSevenDayInfo() {
  // @@protoc_insertion_point(destructor:F4BY.SCSevenDayInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSevenDayInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  start_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete detail_;
}

void SCSevenDayInfo::ArenaDtor(void* object) {
  SCSevenDayInfo* _this = reinterpret_cast< SCSevenDayInfo* >(object);
  (void)_this;
}
void SCSevenDayInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSevenDayInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSevenDayInfo& SCSevenDayInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSevenDayInfo_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCSevenDayInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCSevenDayInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_date_.ClearToEmpty();
  end_date_.ClearToEmpty();
  if (GetArena() == nullptr && detail_ != nullptr) {
    delete detail_;
  }
  detail_ = nullptr;
  ::memset(&cur_day_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gun_enable_) -
      reinterpret_cast<char*>(&cur_day_)) + sizeof(gun_enable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSevenDayInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string start_date = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_start_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "F4BY.SCSevenDayInfo.start_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string end_date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_end_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "F4BY.SCSevenDayInfo.end_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cur_day = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cur_day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 get_remain = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          get_remain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 remain_score = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          remain_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ticket = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ticket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .F4BY.SevenDayDetail detail = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_detail(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gun_enable = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          gun_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSevenDayInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCSevenDayInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string start_date = 1;
  if (this->start_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start_date().data(), static_cast<int>(this->_internal_start_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "F4BY.SCSevenDayInfo.start_date");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_start_date(), target);
  }

  // string end_date = 2;
  if (this->end_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_end_date().data(), static_cast<int>(this->_internal_end_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "F4BY.SCSevenDayInfo.end_date");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_end_date(), target);
  }

  // int32 cur_day = 3;
  if (this->cur_day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_cur_day(), target);
  }

  // int32 get_remain = 4;
  if (this->get_remain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_get_remain(), target);
  }

  // int32 remain_score = 5;
  if (this->remain_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_remain_score(), target);
  }

  // int32 ticket = 6;
  if (this->ticket() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_ticket(), target);
  }

  // .F4BY.SevenDayDetail detail = 7;
  if (this->has_detail()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::detail(this), target, stream);
  }

  // int32 gun_enable = 8;
  if (this->gun_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_gun_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCSevenDayInfo)
  return target;
}

size_t SCSevenDayInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCSevenDayInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string start_date = 1;
  if (this->start_date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_start_date());
  }

  // string end_date = 2;
  if (this->end_date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_end_date());
  }

  // .F4BY.SevenDayDetail detail = 7;
  if (this->has_detail()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detail_);
  }

  // int32 cur_day = 3;
  if (this->cur_day() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur_day());
  }

  // int32 get_remain = 4;
  if (this->get_remain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_get_remain());
  }

  // int32 remain_score = 5;
  if (this->remain_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_remain_score());
  }

  // int32 ticket = 6;
  if (this->ticket() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ticket());
  }

  // int32 gun_enable = 8;
  if (this->gun_enable() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gun_enable());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSevenDayInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCSevenDayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSevenDayInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSevenDayInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCSevenDayInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCSevenDayInfo)
    MergeFrom(*source);
  }
}

void SCSevenDayInfo::MergeFrom(const SCSevenDayInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCSevenDayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_date().size() > 0) {
    _internal_set_start_date(from._internal_start_date());
  }
  if (from.end_date().size() > 0) {
    _internal_set_end_date(from._internal_end_date());
  }
  if (from.has_detail()) {
    _internal_mutable_detail()->::F4BY::SevenDayDetail::MergeFrom(from._internal_detail());
  }
  if (from.cur_day() != 0) {
    _internal_set_cur_day(from._internal_cur_day());
  }
  if (from.get_remain() != 0) {
    _internal_set_get_remain(from._internal_get_remain());
  }
  if (from.remain_score() != 0) {
    _internal_set_remain_score(from._internal_remain_score());
  }
  if (from.ticket() != 0) {
    _internal_set_ticket(from._internal_ticket());
  }
  if (from.gun_enable() != 0) {
    _internal_set_gun_enable(from._internal_gun_enable());
  }
}

void SCSevenDayInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCSevenDayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSevenDayInfo::CopyFrom(const SCSevenDayInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCSevenDayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSevenDayInfo::IsInitialized() const {
  return true;
}

void SCSevenDayInfo::InternalSwap(SCSevenDayInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  start_date_.Swap(&other->start_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  end_date_.Swap(&other->end_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCSevenDayInfo, gun_enable_)
      + sizeof(SCSevenDayInfo::gun_enable_)
      - PROTOBUF_FIELD_OFFSET(SCSevenDayInfo, detail_)>(
          reinterpret_cast<char*>(&detail_),
          reinterpret_cast<char*>(&other->detail_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSevenDayInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSevenDayAward::_Internal {
 public:
};

CSSevenDayAward::CSSevenDayAward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSSevenDayAward)
}
CSSevenDayAward::CSSevenDayAward(const CSSevenDayAward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&day_, &from.day_,
    static_cast<size_t>(reinterpret_cast<char*>(&get_award_type_) -
    reinterpret_cast<char*>(&day_)) + sizeof(get_award_type_));
  // @@protoc_insertion_point(copy_constructor:F4BY.CSSevenDayAward)
}

void CSSevenDayAward::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&day_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&get_award_type_) -
      reinterpret_cast<char*>(&day_)) + sizeof(get_award_type_));
}

CSSevenDayAward::~CSSevenDayAward() {
  // @@protoc_insertion_point(destructor:F4BY.CSSevenDayAward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSevenDayAward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSSevenDayAward::ArenaDtor(void* object) {
  CSSevenDayAward* _this = reinterpret_cast< CSSevenDayAward* >(object);
  (void)_this;
}
void CSSevenDayAward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSevenDayAward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSevenDayAward& CSSevenDayAward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSevenDayAward_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSSevenDayAward::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSSevenDayAward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&day_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&get_award_type_) -
      reinterpret_cast<char*>(&day_)) + sizeof(get_award_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSevenDayAward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 day = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 get_award_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          get_award_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSevenDayAward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSSevenDayAward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 day = 1;
  if (this->day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_day(), target);
  }

  // int32 index = 2;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_index(), target);
  }

  // int32 get_award_type = 3;
  if (this->get_award_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_get_award_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSSevenDayAward)
  return target;
}

size_t CSSevenDayAward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSSevenDayAward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 day = 1;
  if (this->day() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_day());
  }

  // int32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // int32 get_award_type = 3;
  if (this->get_award_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_get_award_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSevenDayAward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSSevenDayAward)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSevenDayAward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSevenDayAward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSSevenDayAward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSSevenDayAward)
    MergeFrom(*source);
  }
}

void CSSevenDayAward::MergeFrom(const CSSevenDayAward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSSevenDayAward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.day() != 0) {
    _internal_set_day(from._internal_day());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.get_award_type() != 0) {
    _internal_set_get_award_type(from._internal_get_award_type());
  }
}

void CSSevenDayAward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSSevenDayAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSevenDayAward::CopyFrom(const CSSevenDayAward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSSevenDayAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSevenDayAward::IsInitialized() const {
  return true;
}

void CSSevenDayAward::InternalSwap(CSSevenDayAward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSSevenDayAward, get_award_type_)
      + sizeof(CSSevenDayAward::get_award_type_)
      - PROTOBUF_FIELD_OFFSET(CSSevenDayAward, day_)>(
          reinterpret_cast<char*>(&day_),
          reinterpret_cast<char*>(&other->day_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSevenDayAward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSevenDayAward::_Internal {
 public:
  static const ::F4BY::SevenDayDetail& task(const SCSevenDayAward* msg);
};

const ::F4BY::SevenDayDetail&
SCSevenDayAward::_Internal::task(const SCSevenDayAward* msg) {
  return *msg->task_;
}
SCSevenDayAward::SCSevenDayAward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCSevenDayAward)
}
SCSevenDayAward::SCSevenDayAward(const SCSevenDayAward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_task()) {
    task_ = new ::F4BY::SevenDayDetail(*from.task_);
  } else {
    task_ = nullptr;
  }
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&ticket_) -
    reinterpret_cast<char*>(&score_)) + sizeof(ticket_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCSevenDayAward)
}

void SCSevenDayAward::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCSevenDayAward_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&task_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ticket_) -
      reinterpret_cast<char*>(&task_)) + sizeof(ticket_));
}

SCSevenDayAward::~SCSevenDayAward() {
  // @@protoc_insertion_point(destructor:F4BY.SCSevenDayAward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSevenDayAward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete task_;
}

void SCSevenDayAward::ArenaDtor(void* object) {
  SCSevenDayAward* _this = reinterpret_cast< SCSevenDayAward* >(object);
  (void)_this;
}
void SCSevenDayAward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSevenDayAward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSevenDayAward& SCSevenDayAward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSevenDayAward_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCSevenDayAward::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCSevenDayAward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ticket_) -
      reinterpret_cast<char*>(&score_)) + sizeof(ticket_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSevenDayAward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ticket = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ticket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .F4BY.SevenDayDetail task = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_task(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSevenDayAward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCSevenDayAward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 score = 1;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_score(), target);
  }

  // int32 ticket = 2;
  if (this->ticket() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ticket(), target);
  }

  // .F4BY.SevenDayDetail task = 3;
  if (this->has_task()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::task(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCSevenDayAward)
  return target;
}

size_t SCSevenDayAward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCSevenDayAward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .F4BY.SevenDayDetail task = 3;
  if (this->has_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_);
  }

  // int32 score = 1;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  // int32 ticket = 2;
  if (this->ticket() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ticket());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSevenDayAward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCSevenDayAward)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSevenDayAward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSevenDayAward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCSevenDayAward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCSevenDayAward)
    MergeFrom(*source);
  }
}

void SCSevenDayAward::MergeFrom(const SCSevenDayAward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCSevenDayAward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_task()) {
    _internal_mutable_task()->::F4BY::SevenDayDetail::MergeFrom(from._internal_task());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.ticket() != 0) {
    _internal_set_ticket(from._internal_ticket());
  }
}

void SCSevenDayAward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCSevenDayAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSevenDayAward::CopyFrom(const SCSevenDayAward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCSevenDayAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSevenDayAward::IsInitialized() const {
  return true;
}

void SCSevenDayAward::InternalSwap(SCSevenDayAward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCSevenDayAward, ticket_)
      + sizeof(SCSevenDayAward::ticket_)
      - PROTOBUF_FIELD_OFFSET(SCSevenDayAward, task_)>(
          reinterpret_cast<char*>(&task_),
          reinterpret_cast<char*>(&other->task_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSevenDayAward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCVipChargeAward::_Internal {
 public:
};

SCVipChargeAward::SCVipChargeAward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCVipChargeAward)
}
SCVipChargeAward::SCVipChargeAward(const SCVipChargeAward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&ticket_) -
    reinterpret_cast<char*>(&score_)) + sizeof(ticket_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCVipChargeAward)
}

void SCVipChargeAward::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&score_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ticket_) -
      reinterpret_cast<char*>(&score_)) + sizeof(ticket_));
}

SCVipChargeAward::~SCVipChargeAward() {
  // @@protoc_insertion_point(destructor:F4BY.SCVipChargeAward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCVipChargeAward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCVipChargeAward::ArenaDtor(void* object) {
  SCVipChargeAward* _this = reinterpret_cast< SCVipChargeAward* >(object);
  (void)_this;
}
void SCVipChargeAward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCVipChargeAward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCVipChargeAward& SCVipChargeAward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCVipChargeAward_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCVipChargeAward::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCVipChargeAward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ticket_) -
      reinterpret_cast<char*>(&score_)) + sizeof(ticket_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCVipChargeAward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ticket = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ticket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCVipChargeAward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCVipChargeAward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 score = 1;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_score(), target);
  }

  // int32 ticket = 2;
  if (this->ticket() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ticket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCVipChargeAward)
  return target;
}

size_t SCVipChargeAward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCVipChargeAward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 score = 1;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  // int32 ticket = 2;
  if (this->ticket() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ticket());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCVipChargeAward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCVipChargeAward)
  GOOGLE_DCHECK_NE(&from, this);
  const SCVipChargeAward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCVipChargeAward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCVipChargeAward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCVipChargeAward)
    MergeFrom(*source);
  }
}

void SCVipChargeAward::MergeFrom(const SCVipChargeAward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCVipChargeAward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.ticket() != 0) {
    _internal_set_ticket(from._internal_ticket());
  }
}

void SCVipChargeAward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCVipChargeAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCVipChargeAward::CopyFrom(const SCVipChargeAward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCVipChargeAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCVipChargeAward::IsInitialized() const {
  return true;
}

void SCVipChargeAward::InternalSwap(SCVipChargeAward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCVipChargeAward, ticket_)
      + sizeof(SCVipChargeAward::ticket_)
      - PROTOBUF_FIELD_OFFSET(SCVipChargeAward, score_)>(
          reinterpret_cast<char*>(&score_),
          reinterpret_cast<char*>(&other->score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCVipChargeAward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSClickStatistic::_Internal {
 public:
};

CSClickStatistic::CSClickStatistic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSClickStatistic)
}
CSClickStatistic::CSClickStatistic(const CSClickStatistic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_num().empty()) {
    num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_num(), 
      GetArena());
  }
  not_repeat_ = from.not_repeat_;
  // @@protoc_insertion_point(copy_constructor:F4BY.CSClickStatistic)
}

void CSClickStatistic::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSClickStatistic_F4BY_2eproto.base);
  num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  not_repeat_ = false;
}

CSClickStatistic::~CSClickStatistic() {
  // @@protoc_insertion_point(destructor:F4BY.CSClickStatistic)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSClickStatistic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  num_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSClickStatistic::ArenaDtor(void* object) {
  CSClickStatistic* _this = reinterpret_cast< CSClickStatistic* >(object);
  (void)_this;
}
void CSClickStatistic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSClickStatistic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSClickStatistic& CSClickStatistic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSClickStatistic_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSClickStatistic::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSClickStatistic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  num_.ClearToEmpty();
  not_repeat_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSClickStatistic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_num();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "F4BY.CSClickStatistic.num"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool not_repeat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          not_repeat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSClickStatistic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSClickStatistic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string num = 1;
  if (this->num().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_num().data(), static_cast<int>(this->_internal_num().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "F4BY.CSClickStatistic.num");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_num(), target);
  }

  // bool not_repeat = 2;
  if (this->not_repeat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_not_repeat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSClickStatistic)
  return target;
}

size_t CSClickStatistic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSClickStatistic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string num = 1;
  if (this->num().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_num());
  }

  // bool not_repeat = 2;
  if (this->not_repeat() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSClickStatistic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSClickStatistic)
  GOOGLE_DCHECK_NE(&from, this);
  const CSClickStatistic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSClickStatistic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSClickStatistic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSClickStatistic)
    MergeFrom(*source);
  }
}

void CSClickStatistic::MergeFrom(const CSClickStatistic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSClickStatistic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num().size() > 0) {
    _internal_set_num(from._internal_num());
  }
  if (from.not_repeat() != 0) {
    _internal_set_not_repeat(from._internal_not_repeat());
  }
}

void CSClickStatistic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSClickStatistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSClickStatistic::CopyFrom(const CSClickStatistic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSClickStatistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSClickStatistic::IsInitialized() const {
  return true;
}

void CSClickStatistic::InternalSwap(CSClickStatistic* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  num_.Swap(&other->num_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(not_repeat_, other->not_repeat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSClickStatistic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSNewClickStatistic::_Internal {
 public:
};

CSNewClickStatistic::CSNewClickStatistic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSNewClickStatistic)
}
CSNewClickStatistic::CSNewClickStatistic(const CSNewClickStatistic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_num().empty()) {
    num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_num(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:F4BY.CSNewClickStatistic)
}

void CSNewClickStatistic::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSNewClickStatistic_F4BY_2eproto.base);
  num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CSNewClickStatistic::~CSNewClickStatistic() {
  // @@protoc_insertion_point(destructor:F4BY.CSNewClickStatistic)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSNewClickStatistic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  num_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSNewClickStatistic::ArenaDtor(void* object) {
  CSNewClickStatistic* _this = reinterpret_cast< CSNewClickStatistic* >(object);
  (void)_this;
}
void CSNewClickStatistic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSNewClickStatistic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSNewClickStatistic& CSNewClickStatistic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSNewClickStatistic_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSNewClickStatistic::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSNewClickStatistic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  num_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNewClickStatistic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_num();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "F4BY.CSNewClickStatistic.num"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSNewClickStatistic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSNewClickStatistic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string num = 1;
  if (this->num().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_num().data(), static_cast<int>(this->_internal_num().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "F4BY.CSNewClickStatistic.num");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSNewClickStatistic)
  return target;
}

size_t CSNewClickStatistic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSNewClickStatistic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string num = 1;
  if (this->num().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSNewClickStatistic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSNewClickStatistic)
  GOOGLE_DCHECK_NE(&from, this);
  const CSNewClickStatistic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSNewClickStatistic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSNewClickStatistic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSNewClickStatistic)
    MergeFrom(*source);
  }
}

void CSNewClickStatistic::MergeFrom(const CSNewClickStatistic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSNewClickStatistic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num().size() > 0) {
    _internal_set_num(from._internal_num());
  }
}

void CSNewClickStatistic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSNewClickStatistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSNewClickStatistic::CopyFrom(const CSNewClickStatistic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSNewClickStatistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNewClickStatistic::IsInitialized() const {
  return true;
}

void CSNewClickStatistic::InternalSwap(CSNewClickStatistic* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  num_.Swap(&other->num_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNewClickStatistic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSUserLog::_Internal {
 public:
};

CSUserLog::CSUserLog(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSUserLog)
}
CSUserLog::CSUserLog(const CSUserLog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  score_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_score().empty()) {
    score_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_score(), 
      GetArena());
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:F4BY.CSUserLog)
}

void CSUserLog::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSUserLog_F4BY_2eproto.base);
  score_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

CSUserLog::~CSUserLog() {
  // @@protoc_insertion_point(destructor:F4BY.CSUserLog)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSUserLog::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  score_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSUserLog::ArenaDtor(void* object) {
  CSUserLog* _this = reinterpret_cast< CSUserLog* >(object);
  (void)_this;
}
void CSUserLog::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSUserLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSUserLog& CSUserLog::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSUserLog_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSUserLog::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSUserLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  score_.ClearToEmpty();
  content_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSUserLog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_score();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "F4BY.CSUserLog.score"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "F4BY.CSUserLog.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSUserLog::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSUserLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // string score = 2;
  if (this->score().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_score().data(), static_cast<int>(this->_internal_score().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "F4BY.CSUserLog.score");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_score(), target);
  }

  // string content = 3;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "F4BY.CSUserLog.content");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSUserLog)
  return target;
}

size_t CSUserLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSUserLog)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string score = 2;
  if (this->score().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_score());
  }

  // string content = 3;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSUserLog::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSUserLog)
  GOOGLE_DCHECK_NE(&from, this);
  const CSUserLog* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSUserLog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSUserLog)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSUserLog)
    MergeFrom(*source);
  }
}

void CSUserLog::MergeFrom(const CSUserLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSUserLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.score().size() > 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.content().size() > 0) {
    _internal_set_content(from._internal_content());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void CSUserLog::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSUserLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSUserLog::CopyFrom(const CSUserLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSUserLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSUserLog::IsInitialized() const {
  return true;
}

void CSUserLog::InternalSwap(CSUserLog* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  score_.Swap(&other->score_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSUserLog::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSUserEvent::_Internal {
 public:
};

CSUserEvent::CSUserEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSUserEvent)
}
CSUserEvent::CSUserEvent(const CSUserEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:F4BY.CSUserEvent)
}

void CSUserEvent::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&id_)) + sizeof(status_));
}

CSUserEvent::~CSUserEvent() {
  // @@protoc_insertion_point(destructor:F4BY.CSUserEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSUserEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSUserEvent::ArenaDtor(void* object) {
  CSUserEvent* _this = reinterpret_cast< CSUserEvent* >(object);
  (void)_this;
}
void CSUserEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSUserEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSUserEvent& CSUserEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSUserEvent_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSUserEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSUserEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&id_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSUserEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSUserEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSUserEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSUserEvent)
  return target;
}

size_t CSUserEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSUserEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSUserEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSUserEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CSUserEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSUserEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSUserEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSUserEvent)
    MergeFrom(*source);
  }
}

void CSUserEvent::MergeFrom(const CSUserEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSUserEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void CSUserEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSUserEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSUserEvent::CopyFrom(const CSUserEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSUserEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSUserEvent::IsInitialized() const {
  return true;
}

void CSUserEvent::InternalSwap(CSUserEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSUserEvent, status_)
      + sizeof(CSUserEvent::status_)
      - PROTOBUF_FIELD_OFFSET(CSUserEvent, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSUserEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSGetAwardPoolRecord::_Internal {
 public:
};

CSGetAwardPoolRecord::CSGetAwardPoolRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSGetAwardPoolRecord)
}
CSGetAwardPoolRecord::CSGetAwardPoolRecord(const CSGetAwardPoolRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:F4BY.CSGetAwardPoolRecord)
}

void CSGetAwardPoolRecord::SharedCtor() {
}

CSGetAwardPoolRecord::~CSGetAwardPoolRecord() {
  // @@protoc_insertion_point(destructor:F4BY.CSGetAwardPoolRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSGetAwardPoolRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSGetAwardPoolRecord::ArenaDtor(void* object) {
  CSGetAwardPoolRecord* _this = reinterpret_cast< CSGetAwardPoolRecord* >(object);
  (void)_this;
}
void CSGetAwardPoolRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSGetAwardPoolRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSGetAwardPoolRecord& CSGetAwardPoolRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSGetAwardPoolRecord_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSGetAwardPoolRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSGetAwardPoolRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSGetAwardPoolRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSGetAwardPoolRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSGetAwardPoolRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSGetAwardPoolRecord)
  return target;
}

size_t CSGetAwardPoolRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSGetAwardPoolRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSGetAwardPoolRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSGetAwardPoolRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const CSGetAwardPoolRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSGetAwardPoolRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSGetAwardPoolRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSGetAwardPoolRecord)
    MergeFrom(*source);
  }
}

void CSGetAwardPoolRecord::MergeFrom(const CSGetAwardPoolRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSGetAwardPoolRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSGetAwardPoolRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSGetAwardPoolRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetAwardPoolRecord::CopyFrom(const CSGetAwardPoolRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSGetAwardPoolRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetAwardPoolRecord::IsInitialized() const {
  return true;
}

void CSGetAwardPoolRecord::InternalSwap(CSGetAwardPoolRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSGetAwardPoolRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AwardPoolRecord::_Internal {
 public:
};

AwardPoolRecord::AwardPoolRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.AwardPoolRecord)
}
AwardPoolRecord::AwardPoolRecord(const AwardPoolRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_time().empty()) {
    time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_time(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&poolid_, &from.poolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&poolid_)) + sizeof(playerid_));
  // @@protoc_insertion_point(copy_constructor:F4BY.AwardPoolRecord)
}

void AwardPoolRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AwardPoolRecord_F4BY_2eproto.base);
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&poolid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&poolid_)) + sizeof(playerid_));
}

AwardPoolRecord::~AwardPoolRecord() {
  // @@protoc_insertion_point(destructor:F4BY.AwardPoolRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AwardPoolRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AwardPoolRecord::ArenaDtor(void* object) {
  AwardPoolRecord* _this = reinterpret_cast< AwardPoolRecord* >(object);
  (void)_this;
}
void AwardPoolRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AwardPoolRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AwardPoolRecord& AwardPoolRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AwardPoolRecord_F4BY_2eproto.base);
  return *internal_default_instance();
}


void AwardPoolRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.AwardPoolRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_.ClearToEmpty();
  name_.ClearToEmpty();
  ::memset(&poolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&poolid_)) + sizeof(playerid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AwardPoolRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "F4BY.AwardPoolRecord.time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "F4BY.AwardPoolRecord.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 poolId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          poolid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 award = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          award_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 playerId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AwardPoolRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.AwardPoolRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string time = 1;
  if (this->time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time().data(), static_cast<int>(this->_internal_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "F4BY.AwardPoolRecord.time");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_time(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "F4BY.AwardPoolRecord.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 poolId = 3;
  if (this->poolid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_poolid(), target);
  }

  // int32 award = 4;
  if (this->award() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_award(), target);
  }

  // int32 playerId = 5;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.AwardPoolRecord)
  return target;
}

size_t AwardPoolRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.AwardPoolRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string time = 1;
  if (this->time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 poolId = 3;
  if (this->poolid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_poolid());
  }

  // int32 award = 4;
  if (this->award() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_award());
  }

  // int32 playerId = 5;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AwardPoolRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.AwardPoolRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const AwardPoolRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AwardPoolRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.AwardPoolRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.AwardPoolRecord)
    MergeFrom(*source);
  }
}

void AwardPoolRecord::MergeFrom(const AwardPoolRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.AwardPoolRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time().size() > 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.poolid() != 0) {
    _internal_set_poolid(from._internal_poolid());
  }
  if (from.award() != 0) {
    _internal_set_award(from._internal_award());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
}

void AwardPoolRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.AwardPoolRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AwardPoolRecord::CopyFrom(const AwardPoolRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.AwardPoolRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AwardPoolRecord::IsInitialized() const {
  return true;
}

void AwardPoolRecord::InternalSwap(AwardPoolRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  time_.Swap(&other->time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AwardPoolRecord, playerid_)
      + sizeof(AwardPoolRecord::playerid_)
      - PROTOBUF_FIELD_OFFSET(AwardPoolRecord, poolid_)>(
          reinterpret_cast<char*>(&poolid_),
          reinterpret_cast<char*>(&other->poolid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AwardPoolRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGetAwardPoolRecord::_Internal {
 public:
};

SCGetAwardPoolRecord::SCGetAwardPoolRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  records_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCGetAwardPoolRecord)
}
SCGetAwardPoolRecord::SCGetAwardPoolRecord(const SCGetAwardPoolRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      records_(from.records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:F4BY.SCGetAwardPoolRecord)
}

void SCGetAwardPoolRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCGetAwardPoolRecord_F4BY_2eproto.base);
}

SCGetAwardPoolRecord::~SCGetAwardPoolRecord() {
  // @@protoc_insertion_point(destructor:F4BY.SCGetAwardPoolRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGetAwardPoolRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCGetAwardPoolRecord::ArenaDtor(void* object) {
  SCGetAwardPoolRecord* _this = reinterpret_cast< SCGetAwardPoolRecord* >(object);
  (void)_this;
}
void SCGetAwardPoolRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGetAwardPoolRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGetAwardPoolRecord& SCGetAwardPoolRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGetAwardPoolRecord_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCGetAwardPoolRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCGetAwardPoolRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  records_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGetAwardPoolRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .F4BY.AwardPoolRecord records = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGetAwardPoolRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCGetAwardPoolRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .F4BY.AwardPoolRecord records = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCGetAwardPoolRecord)
  return target;
}

size_t SCGetAwardPoolRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCGetAwardPoolRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.AwardPoolRecord records = 1;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGetAwardPoolRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCGetAwardPoolRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGetAwardPoolRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGetAwardPoolRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCGetAwardPoolRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCGetAwardPoolRecord)
    MergeFrom(*source);
  }
}

void SCGetAwardPoolRecord::MergeFrom(const SCGetAwardPoolRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCGetAwardPoolRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  records_.MergeFrom(from.records_);
}

void SCGetAwardPoolRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCGetAwardPoolRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGetAwardPoolRecord::CopyFrom(const SCGetAwardPoolRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCGetAwardPoolRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGetAwardPoolRecord::IsInitialized() const {
  return true;
}

void SCGetAwardPoolRecord::InternalSwap(SCGetAwardPoolRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  records_.InternalSwap(&other->records_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGetAwardPoolRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPropDropNotify::_Internal {
 public:
};

SCPropDropNotify::SCPropDropNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  drop_props_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCPropDropNotify)
}
SCPropDropNotify::SCPropDropNotify(const SCPropDropNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      drop_props_(from.drop_props_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&fish_uid_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(fish_uid_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCPropDropNotify)
}

void SCPropDropNotify::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCPropDropNotify_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&fish_uid_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(fish_uid_));
}

SCPropDropNotify::~SCPropDropNotify() {
  // @@protoc_insertion_point(destructor:F4BY.SCPropDropNotify)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPropDropNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCPropDropNotify::ArenaDtor(void* object) {
  SCPropDropNotify* _this = reinterpret_cast< SCPropDropNotify* >(object);
  (void)_this;
}
void SCPropDropNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPropDropNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPropDropNotify& SCPropDropNotify::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPropDropNotify_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCPropDropNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCPropDropNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  drop_props_.Clear();
  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fish_uid_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(fish_uid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPropDropNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fish_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .F4BY.Object drop_props = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drop_props(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPropDropNotify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCPropDropNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 fish_uid = 2;
  if (this->fish_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fish_uid(), target);
  }

  // repeated .F4BY.Object drop_props = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drop_props_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_drop_props(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCPropDropNotify)
  return target;
}

size_t SCPropDropNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCPropDropNotify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.Object drop_props = 3;
  total_size += 1UL * this->_internal_drop_props_size();
  for (const auto& msg : this->drop_props_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 fish_uid = 2;
  if (this->fish_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPropDropNotify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCPropDropNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPropDropNotify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPropDropNotify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCPropDropNotify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCPropDropNotify)
    MergeFrom(*source);
  }
}

void SCPropDropNotify::MergeFrom(const SCPropDropNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCPropDropNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  drop_props_.MergeFrom(from.drop_props_);
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.fish_uid() != 0) {
    _internal_set_fish_uid(from._internal_fish_uid());
  }
}

void SCPropDropNotify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCPropDropNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPropDropNotify::CopyFrom(const SCPropDropNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCPropDropNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPropDropNotify::IsInitialized() const {
  return true;
}

void SCPropDropNotify::InternalSwap(SCPropDropNotify* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  drop_props_.InternalSwap(&other->drop_props_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCPropDropNotify, fish_uid_)
      + sizeof(SCPropDropNotify::fish_uid_)
      - PROTOBUF_FIELD_OFFSET(SCPropDropNotify, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPropDropNotify::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSUseProp::_Internal {
 public:
};

CSUseProp::CSUseProp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSUseProp)
}
CSUseProp::CSUseProp(const CSUseProp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prop_id_ = from.prop_id_;
  // @@protoc_insertion_point(copy_constructor:F4BY.CSUseProp)
}

void CSUseProp::SharedCtor() {
  prop_id_ = 0;
}

CSUseProp::~CSUseProp() {
  // @@protoc_insertion_point(destructor:F4BY.CSUseProp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSUseProp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSUseProp::ArenaDtor(void* object) {
  CSUseProp* _this = reinterpret_cast< CSUseProp* >(object);
  (void)_this;
}
void CSUseProp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSUseProp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSUseProp& CSUseProp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSUseProp_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSUseProp::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSUseProp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prop_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSUseProp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 prop_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          prop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSUseProp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSUseProp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 prop_id = 1;
  if (this->prop_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_prop_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSUseProp)
  return target;
}

size_t CSUseProp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSUseProp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 prop_id = 1;
  if (this->prop_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prop_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSUseProp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSUseProp)
  GOOGLE_DCHECK_NE(&from, this);
  const CSUseProp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSUseProp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSUseProp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSUseProp)
    MergeFrom(*source);
  }
}

void CSUseProp::MergeFrom(const CSUseProp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSUseProp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prop_id() != 0) {
    _internal_set_prop_id(from._internal_prop_id());
  }
}

void CSUseProp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSUseProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSUseProp::CopyFrom(const CSUseProp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSUseProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSUseProp::IsInitialized() const {
  return true;
}

void CSUseProp::InternalSwap(CSUseProp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(prop_id_, other->prop_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSUseProp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCUseProp::_Internal {
 public:
};

SCUseProp::SCUseProp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCUseProp)
}
SCUseProp::SCUseProp(const SCUseProp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArena());
  }
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCUseProp)
}

void SCUseProp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCUseProp_F4BY_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(code_));
}

SCUseProp::~SCUseProp() {
  // @@protoc_insertion_point(destructor:F4BY.SCUseProp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCUseProp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SCUseProp::ArenaDtor(void* object) {
  SCUseProp* _this = reinterpret_cast< SCUseProp* >(object);
  (void)_this;
}
void SCUseProp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCUseProp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCUseProp& SCUseProp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCUseProp_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCUseProp::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCUseProp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCUseProp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 prop_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          prop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 remain = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          remain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "F4BY.SCUseProp.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCUseProp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCUseProp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 prop_id = 2;
  if (this->prop_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_prop_id(), target);
  }

  // int32 remain = 3;
  if (this->remain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_remain(), target);
  }

  // int32 code = 4;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_code(), target);
  }

  // string msg = 5;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "F4BY.SCUseProp.msg");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCUseProp)
  return target;
}

size_t SCUseProp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCUseProp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 5;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 prop_id = 2;
  if (this->prop_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prop_id());
  }

  // int32 remain = 3;
  if (this->remain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_remain());
  }

  // int32 code = 4;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCUseProp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCUseProp)
  GOOGLE_DCHECK_NE(&from, this);
  const SCUseProp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCUseProp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCUseProp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCUseProp)
    MergeFrom(*source);
  }
}

void SCUseProp::MergeFrom(const SCUseProp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCUseProp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {
    _internal_set_msg(from._internal_msg());
  }
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.prop_id() != 0) {
    _internal_set_prop_id(from._internal_prop_id());
  }
  if (from.remain() != 0) {
    _internal_set_remain(from._internal_remain());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void SCUseProp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCUseProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCUseProp::CopyFrom(const SCUseProp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCUseProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCUseProp::IsInitialized() const {
  return true;
}

void SCUseProp::InternalSwap(SCUseProp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCUseProp, code_)
      + sizeof(SCUseProp::code_)
      - PROTOBUF_FIELD_OFFSET(SCUseProp, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCUseProp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCFrozenTime::_Internal {
 public:
};

SCFrozenTime::SCFrozenTime(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCFrozenTime)
}
SCFrozenTime::SCFrozenTime(const SCFrozenTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&frozen_cd_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(frozen_cd_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCFrozenTime)
}

void SCFrozenTime::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&frozen_cd_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(frozen_cd_));
}

SCFrozenTime::~SCFrozenTime() {
  // @@protoc_insertion_point(destructor:F4BY.SCFrozenTime)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCFrozenTime::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCFrozenTime::ArenaDtor(void* object) {
  SCFrozenTime* _this = reinterpret_cast< SCFrozenTime* >(object);
  (void)_this;
}
void SCFrozenTime::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCFrozenTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCFrozenTime& SCFrozenTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCFrozenTime_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCFrozenTime::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCFrozenTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frozen_cd_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(frozen_cd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCFrozenTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_frozen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_frozen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float frozen_cd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          frozen_cd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCFrozenTime::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCFrozenTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // bool is_frozen = 2;
  if (this->is_frozen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_frozen(), target);
  }

  // float frozen_cd = 3;
  if (!(this->frozen_cd() <= 0 && this->frozen_cd() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_frozen_cd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCFrozenTime)
  return target;
}

size_t SCFrozenTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCFrozenTime)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // bool is_frozen = 2;
  if (this->is_frozen() != 0) {
    total_size += 1 + 1;
  }

  // float frozen_cd = 3;
  if (!(this->frozen_cd() <= 0 && this->frozen_cd() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCFrozenTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCFrozenTime)
  GOOGLE_DCHECK_NE(&from, this);
  const SCFrozenTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCFrozenTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCFrozenTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCFrozenTime)
    MergeFrom(*source);
  }
}

void SCFrozenTime::MergeFrom(const SCFrozenTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCFrozenTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.is_frozen() != 0) {
    _internal_set_is_frozen(from._internal_is_frozen());
  }
  if (!(from.frozen_cd() <= 0 && from.frozen_cd() >= 0)) {
    _internal_set_frozen_cd(from._internal_frozen_cd());
  }
}

void SCFrozenTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCFrozenTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCFrozenTime::CopyFrom(const SCFrozenTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCFrozenTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCFrozenTime::IsInitialized() const {
  return true;
}

void SCFrozenTime::InternalSwap(SCFrozenTime* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCFrozenTime, frozen_cd_)
      + sizeof(SCFrozenTime::frozen_cd_)
      - PROTOBUF_FIELD_OFFSET(SCFrozenTime, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCFrozenTime::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCTreasureFishInfo::_Internal {
 public:
};

SCTreasureFishInfo::SCTreasureFishInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCTreasureFishInfo)
}
SCTreasureFishInfo::SCTreasureFishInfo(const SCTreasureFishInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fish_uid_, &from.fish_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&fish_value_) -
    reinterpret_cast<char*>(&fish_uid_)) + sizeof(fish_value_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCTreasureFishInfo)
}

void SCTreasureFishInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fish_uid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&fish_value_) -
      reinterpret_cast<char*>(&fish_uid_)) + sizeof(fish_value_));
}

SCTreasureFishInfo::~SCTreasureFishInfo() {
  // @@protoc_insertion_point(destructor:F4BY.SCTreasureFishInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCTreasureFishInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCTreasureFishInfo::ArenaDtor(void* object) {
  SCTreasureFishInfo* _this = reinterpret_cast< SCTreasureFishInfo* >(object);
  (void)_this;
}
void SCTreasureFishInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCTreasureFishInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCTreasureFishInfo& SCTreasureFishInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCTreasureFishInfo_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCTreasureFishInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCTreasureFishInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fish_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fish_value_) -
      reinterpret_cast<char*>(&fish_uid_)) + sizeof(fish_value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCTreasureFishInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 fish_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fish_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cur_stage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cur_stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 accum_money = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          accum_money_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          fish_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCTreasureFishInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCTreasureFishInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fish_uid = 1;
  if (this->fish_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_fish_uid(), target);
  }

  // int32 cur_stage = 2;
  if (this->cur_stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cur_stage(), target);
  }

  // int32 accum_money = 3;
  if (this->accum_money() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_accum_money(), target);
  }

  // int32 fish_value = 4;
  if (this->fish_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_fish_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCTreasureFishInfo)
  return target;
}

size_t SCTreasureFishInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCTreasureFishInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 fish_uid = 1;
  if (this->fish_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_uid());
  }

  // int32 cur_stage = 2;
  if (this->cur_stage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur_stage());
  }

  // int32 accum_money = 3;
  if (this->accum_money() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_accum_money());
  }

  // int32 fish_value = 4;
  if (this->fish_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCTreasureFishInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCTreasureFishInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCTreasureFishInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCTreasureFishInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCTreasureFishInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCTreasureFishInfo)
    MergeFrom(*source);
  }
}

void SCTreasureFishInfo::MergeFrom(const SCTreasureFishInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCTreasureFishInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fish_uid() != 0) {
    _internal_set_fish_uid(from._internal_fish_uid());
  }
  if (from.cur_stage() != 0) {
    _internal_set_cur_stage(from._internal_cur_stage());
  }
  if (from.accum_money() != 0) {
    _internal_set_accum_money(from._internal_accum_money());
  }
  if (from.fish_value() != 0) {
    _internal_set_fish_value(from._internal_fish_value());
  }
}

void SCTreasureFishInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCTreasureFishInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCTreasureFishInfo::CopyFrom(const SCTreasureFishInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCTreasureFishInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCTreasureFishInfo::IsInitialized() const {
  return true;
}

void SCTreasureFishInfo::InternalSwap(SCTreasureFishInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCTreasureFishInfo, fish_value_)
      + sizeof(SCTreasureFishInfo::fish_value_)
      - PROTOBUF_FIELD_OFFSET(SCTreasureFishInfo, fish_uid_)>(
          reinterpret_cast<char*>(&fish_uid_),
          reinterpret_cast<char*>(&other->fish_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCTreasureFishInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCTreasureFishCatched::_Internal {
 public:
};

SCTreasureFishCatched::SCTreasureFishCatched(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  multi_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCTreasureFishCatched)
}
SCTreasureFishCatched::SCTreasureFishCatched(const SCTreasureFishCatched& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      multi_list_(from.multi_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&origin_uid_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(origin_uid_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCTreasureFishCatched)
}

void SCTreasureFishCatched::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCTreasureFishCatched_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&origin_uid_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(origin_uid_));
}

SCTreasureFishCatched::~SCTreasureFishCatched() {
  // @@protoc_insertion_point(destructor:F4BY.SCTreasureFishCatched)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCTreasureFishCatched::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCTreasureFishCatched::ArenaDtor(void* object) {
  SCTreasureFishCatched* _this = reinterpret_cast< SCTreasureFishCatched* >(object);
  (void)_this;
}
void SCTreasureFishCatched::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCTreasureFishCatched::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCTreasureFishCatched& SCTreasureFishCatched::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCTreasureFishCatched_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCTreasureFishCatched::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCTreasureFishCatched)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  multi_list_.Clear();
  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&origin_uid_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(origin_uid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCTreasureFishCatched::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fish_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          fish_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 accum_money = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          accum_money_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 multiple = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool death = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          death_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 earn = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          earn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 user_score = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          user_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool display_multiple = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          display_multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cur_stage = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          cur_stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 magic_cube_multi = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          magic_cube_multi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .F4BY.MultiInfo multi_list = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_multi_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 origin_uid = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          origin_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCTreasureFishCatched::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCTreasureFishCatched)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 ratio = 2;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ratio(), target);
  }

  // int32 fish_uid = 3;
  if (this->fish_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_fish_uid(), target);
  }

  // int32 fish_value = 4;
  if (this->fish_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_fish_value(), target);
  }

  // int32 accum_money = 5;
  if (this->accum_money() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_accum_money(), target);
  }

  // int32 multiple = 6;
  if (this->multiple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_multiple(), target);
  }

  // bool death = 7;
  if (this->death() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_death(), target);
  }

  // int32 earn = 8;
  if (this->earn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_earn(), target);
  }

  // int64 user_score = 9;
  if (this->user_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_user_score(), target);
  }

  // bool display_multiple = 10;
  if (this->display_multiple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_display_multiple(), target);
  }

  // int32 cur_stage = 11;
  if (this->cur_stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_cur_stage(), target);
  }

  // int32 magic_cube_multi = 12;
  if (this->magic_cube_multi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_magic_cube_multi(), target);
  }

  // repeated .F4BY.MultiInfo multi_list = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_multi_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_multi_list(i), target, stream);
  }

  // int32 origin_uid = 14;
  if (this->origin_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_origin_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCTreasureFishCatched)
  return target;
}

size_t SCTreasureFishCatched::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCTreasureFishCatched)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.MultiInfo multi_list = 13;
  total_size += 1UL * this->_internal_multi_list_size();
  for (const auto& msg : this->multi_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 ratio = 2;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  // int32 fish_uid = 3;
  if (this->fish_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_uid());
  }

  // int32 fish_value = 4;
  if (this->fish_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_value());
  }

  // int32 accum_money = 5;
  if (this->accum_money() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_accum_money());
  }

  // int32 multiple = 6;
  if (this->multiple() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_multiple());
  }

  // int32 earn = 8;
  if (this->earn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_earn());
  }

  // bool death = 7;
  if (this->death() != 0) {
    total_size += 1 + 1;
  }

  // bool display_multiple = 10;
  if (this->display_multiple() != 0) {
    total_size += 1 + 1;
  }

  // int64 user_score = 9;
  if (this->user_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_score());
  }

  // int32 cur_stage = 11;
  if (this->cur_stage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur_stage());
  }

  // int32 magic_cube_multi = 12;
  if (this->magic_cube_multi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_magic_cube_multi());
  }

  // int32 origin_uid = 14;
  if (this->origin_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_origin_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCTreasureFishCatched::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCTreasureFishCatched)
  GOOGLE_DCHECK_NE(&from, this);
  const SCTreasureFishCatched* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCTreasureFishCatched>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCTreasureFishCatched)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCTreasureFishCatched)
    MergeFrom(*source);
  }
}

void SCTreasureFishCatched::MergeFrom(const SCTreasureFishCatched& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCTreasureFishCatched)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  multi_list_.MergeFrom(from.multi_list_);
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
  if (from.fish_uid() != 0) {
    _internal_set_fish_uid(from._internal_fish_uid());
  }
  if (from.fish_value() != 0) {
    _internal_set_fish_value(from._internal_fish_value());
  }
  if (from.accum_money() != 0) {
    _internal_set_accum_money(from._internal_accum_money());
  }
  if (from.multiple() != 0) {
    _internal_set_multiple(from._internal_multiple());
  }
  if (from.earn() != 0) {
    _internal_set_earn(from._internal_earn());
  }
  if (from.death() != 0) {
    _internal_set_death(from._internal_death());
  }
  if (from.display_multiple() != 0) {
    _internal_set_display_multiple(from._internal_display_multiple());
  }
  if (from.user_score() != 0) {
    _internal_set_user_score(from._internal_user_score());
  }
  if (from.cur_stage() != 0) {
    _internal_set_cur_stage(from._internal_cur_stage());
  }
  if (from.magic_cube_multi() != 0) {
    _internal_set_magic_cube_multi(from._internal_magic_cube_multi());
  }
  if (from.origin_uid() != 0) {
    _internal_set_origin_uid(from._internal_origin_uid());
  }
}

void SCTreasureFishCatched::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCTreasureFishCatched)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCTreasureFishCatched::CopyFrom(const SCTreasureFishCatched& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCTreasureFishCatched)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCTreasureFishCatched::IsInitialized() const {
  return true;
}

void SCTreasureFishCatched::InternalSwap(SCTreasureFishCatched* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  multi_list_.InternalSwap(&other->multi_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCTreasureFishCatched, origin_uid_)
      + sizeof(SCTreasureFishCatched::origin_uid_)
      - PROTOBUF_FIELD_OFFSET(SCTreasureFishCatched, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCTreasureFishCatched::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MatchPackAddition::_Internal {
 public:
};

MatchPackAddition::MatchPackAddition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.MatchPackAddition)
}
MatchPackAddition::MatchPackAddition(const MatchPackAddition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  ::memcpy(&is_buy_, &from.is_buy_,
    static_cast<size_t>(reinterpret_cast<char*>(&sec_) -
    reinterpret_cast<char*>(&is_buy_)) + sizeof(sec_));
  // @@protoc_insertion_point(copy_constructor:F4BY.MatchPackAddition)
}

void MatchPackAddition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MatchPackAddition_F4BY_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&is_buy_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sec_) -
      reinterpret_cast<char*>(&is_buy_)) + sizeof(sec_));
}

MatchPackAddition::~MatchPackAddition() {
  // @@protoc_insertion_point(destructor:F4BY.MatchPackAddition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MatchPackAddition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MatchPackAddition::ArenaDtor(void* object) {
  MatchPackAddition* _this = reinterpret_cast< MatchPackAddition* >(object);
  (void)_this;
}
void MatchPackAddition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatchPackAddition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatchPackAddition& MatchPackAddition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchPackAddition_F4BY_2eproto.base);
  return *internal_default_instance();
}


void MatchPackAddition::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.MatchPackAddition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  ::memset(&is_buy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sec_) -
      reinterpret_cast<char*>(&is_buy_)) + sizeof(sec_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchPackAddition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "F4BY.MatchPackAddition.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_buy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_buy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float score_addition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          score_addition_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float reaward_addition = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          reaward_addition_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 card = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          card_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sec = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchPackAddition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.MatchPackAddition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "F4BY.MatchPackAddition.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // bool is_buy = 2;
  if (this->is_buy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_buy(), target);
  }

  // float score_addition = 3;
  if (!(this->score_addition() <= 0 && this->score_addition() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_score_addition(), target);
  }

  // float reaward_addition = 4;
  if (!(this->reaward_addition() <= 0 && this->reaward_addition() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_reaward_addition(), target);
  }

  // int32 card = 5;
  if (this->card() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_card(), target);
  }

  // int32 sec = 6;
  if (this->sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_sec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.MatchPackAddition)
  return target;
}

size_t MatchPackAddition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.MatchPackAddition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // bool is_buy = 2;
  if (this->is_buy() != 0) {
    total_size += 1 + 1;
  }

  // float score_addition = 3;
  if (!(this->score_addition() <= 0 && this->score_addition() >= 0)) {
    total_size += 1 + 4;
  }

  // float reaward_addition = 4;
  if (!(this->reaward_addition() <= 0 && this->reaward_addition() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 card = 5;
  if (this->card() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_card());
  }

  // int32 sec = 6;
  if (this->sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sec());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchPackAddition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.MatchPackAddition)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchPackAddition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchPackAddition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.MatchPackAddition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.MatchPackAddition)
    MergeFrom(*source);
  }
}

void MatchPackAddition::MergeFrom(const MatchPackAddition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.MatchPackAddition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.is_buy() != 0) {
    _internal_set_is_buy(from._internal_is_buy());
  }
  if (!(from.score_addition() <= 0 && from.score_addition() >= 0)) {
    _internal_set_score_addition(from._internal_score_addition());
  }
  if (!(from.reaward_addition() <= 0 && from.reaward_addition() >= 0)) {
    _internal_set_reaward_addition(from._internal_reaward_addition());
  }
  if (from.card() != 0) {
    _internal_set_card(from._internal_card());
  }
  if (from.sec() != 0) {
    _internal_set_sec(from._internal_sec());
  }
}

void MatchPackAddition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.MatchPackAddition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchPackAddition::CopyFrom(const MatchPackAddition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.MatchPackAddition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchPackAddition::IsInitialized() const {
  return true;
}

void MatchPackAddition::InternalSwap(MatchPackAddition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchPackAddition, sec_)
      + sizeof(MatchPackAddition::sec_)
      - PROTOBUF_FIELD_OFFSET(MatchPackAddition, is_buy_)>(
          reinterpret_cast<char*>(&is_buy_),
          reinterpret_cast<char*>(&other->is_buy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchPackAddition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSMatchPackAddition::_Internal {
 public:
};

CSMatchPackAddition::CSMatchPackAddition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSMatchPackAddition)
}
CSMatchPackAddition::CSMatchPackAddition(const CSMatchPackAddition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:F4BY.CSMatchPackAddition)
}

void CSMatchPackAddition::SharedCtor() {
}

CSMatchPackAddition::~CSMatchPackAddition() {
  // @@protoc_insertion_point(destructor:F4BY.CSMatchPackAddition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSMatchPackAddition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSMatchPackAddition::ArenaDtor(void* object) {
  CSMatchPackAddition* _this = reinterpret_cast< CSMatchPackAddition* >(object);
  (void)_this;
}
void CSMatchPackAddition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSMatchPackAddition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSMatchPackAddition& CSMatchPackAddition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSMatchPackAddition_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSMatchPackAddition::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSMatchPackAddition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSMatchPackAddition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSMatchPackAddition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSMatchPackAddition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSMatchPackAddition)
  return target;
}

size_t CSMatchPackAddition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSMatchPackAddition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSMatchPackAddition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSMatchPackAddition)
  GOOGLE_DCHECK_NE(&from, this);
  const CSMatchPackAddition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSMatchPackAddition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSMatchPackAddition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSMatchPackAddition)
    MergeFrom(*source);
  }
}

void CSMatchPackAddition::MergeFrom(const CSMatchPackAddition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSMatchPackAddition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSMatchPackAddition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSMatchPackAddition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMatchPackAddition::CopyFrom(const CSMatchPackAddition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSMatchPackAddition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMatchPackAddition::IsInitialized() const {
  return true;
}

void CSMatchPackAddition::InternalSwap(CSMatchPackAddition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSMatchPackAddition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCMatchPackAddition::_Internal {
 public:
};

SCMatchPackAddition::SCMatchPackAddition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  addition_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCMatchPackAddition)
}
SCMatchPackAddition::SCMatchPackAddition(const SCMatchPackAddition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      addition_(from.addition_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:F4BY.SCMatchPackAddition)
}

void SCMatchPackAddition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCMatchPackAddition_F4BY_2eproto.base);
}

SCMatchPackAddition::~SCMatchPackAddition() {
  // @@protoc_insertion_point(destructor:F4BY.SCMatchPackAddition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCMatchPackAddition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCMatchPackAddition::ArenaDtor(void* object) {
  SCMatchPackAddition* _this = reinterpret_cast< SCMatchPackAddition* >(object);
  (void)_this;
}
void SCMatchPackAddition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCMatchPackAddition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCMatchPackAddition& SCMatchPackAddition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCMatchPackAddition_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCMatchPackAddition::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCMatchPackAddition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addition_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCMatchPackAddition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .F4BY.MatchPackAddition addition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_addition(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCMatchPackAddition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCMatchPackAddition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .F4BY.MatchPackAddition addition = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_addition_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_addition(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCMatchPackAddition)
  return target;
}

size_t SCMatchPackAddition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCMatchPackAddition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.MatchPackAddition addition = 1;
  total_size += 1UL * this->_internal_addition_size();
  for (const auto& msg : this->addition_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCMatchPackAddition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCMatchPackAddition)
  GOOGLE_DCHECK_NE(&from, this);
  const SCMatchPackAddition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCMatchPackAddition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCMatchPackAddition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCMatchPackAddition)
    MergeFrom(*source);
  }
}

void SCMatchPackAddition::MergeFrom(const SCMatchPackAddition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCMatchPackAddition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addition_.MergeFrom(from.addition_);
}

void SCMatchPackAddition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCMatchPackAddition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCMatchPackAddition::CopyFrom(const SCMatchPackAddition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCMatchPackAddition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMatchPackAddition::IsInitialized() const {
  return true;
}

void SCMatchPackAddition::InternalSwap(SCMatchPackAddition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  addition_.InternalSwap(&other->addition_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCMatchPackAddition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCMatchPackInvail::_Internal {
 public:
};

SCMatchPackInvail::SCMatchPackInvail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCMatchPackInvail)
}
SCMatchPackInvail::SCMatchPackInvail(const SCMatchPackInvail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  packid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_packid().empty()) {
    packid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_packid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:F4BY.SCMatchPackInvail)
}

void SCMatchPackInvail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCMatchPackInvail_F4BY_2eproto.base);
  packid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SCMatchPackInvail::~SCMatchPackInvail() {
  // @@protoc_insertion_point(destructor:F4BY.SCMatchPackInvail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCMatchPackInvail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  packid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SCMatchPackInvail::ArenaDtor(void* object) {
  SCMatchPackInvail* _this = reinterpret_cast< SCMatchPackInvail* >(object);
  (void)_this;
}
void SCMatchPackInvail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCMatchPackInvail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCMatchPackInvail& SCMatchPackInvail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCMatchPackInvail_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCMatchPackInvail::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCMatchPackInvail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCMatchPackInvail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string packId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_packid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "F4BY.SCMatchPackInvail.packId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCMatchPackInvail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCMatchPackInvail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string packId = 1;
  if (this->packid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_packid().data(), static_cast<int>(this->_internal_packid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "F4BY.SCMatchPackInvail.packId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_packid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCMatchPackInvail)
  return target;
}

size_t SCMatchPackInvail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCMatchPackInvail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string packId = 1;
  if (this->packid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_packid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCMatchPackInvail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCMatchPackInvail)
  GOOGLE_DCHECK_NE(&from, this);
  const SCMatchPackInvail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCMatchPackInvail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCMatchPackInvail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCMatchPackInvail)
    MergeFrom(*source);
  }
}

void SCMatchPackInvail::MergeFrom(const SCMatchPackInvail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCMatchPackInvail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.packid().size() > 0) {
    _internal_set_packid(from._internal_packid());
  }
}

void SCMatchPackInvail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCMatchPackInvail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCMatchPackInvail::CopyFrom(const SCMatchPackInvail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCMatchPackInvail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMatchPackInvail::IsInitialized() const {
  return true;
}

void SCMatchPackInvail::InternalSwap(SCMatchPackInvail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  packid_.Swap(&other->packid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SCMatchPackInvail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSMatchPackBuying::_Internal {
 public:
};

CSMatchPackBuying::CSMatchPackBuying(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSMatchPackBuying)
}
CSMatchPackBuying::CSMatchPackBuying(const CSMatchPackBuying& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  packid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_packid().empty()) {
    packid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_packid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:F4BY.CSMatchPackBuying)
}

void CSMatchPackBuying::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSMatchPackBuying_F4BY_2eproto.base);
  packid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CSMatchPackBuying::~CSMatchPackBuying() {
  // @@protoc_insertion_point(destructor:F4BY.CSMatchPackBuying)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSMatchPackBuying::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  packid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSMatchPackBuying::ArenaDtor(void* object) {
  CSMatchPackBuying* _this = reinterpret_cast< CSMatchPackBuying* >(object);
  (void)_this;
}
void CSMatchPackBuying::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSMatchPackBuying::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSMatchPackBuying& CSMatchPackBuying::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSMatchPackBuying_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSMatchPackBuying::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSMatchPackBuying)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSMatchPackBuying::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string packId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_packid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "F4BY.CSMatchPackBuying.packId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSMatchPackBuying::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSMatchPackBuying)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string packId = 1;
  if (this->packid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_packid().data(), static_cast<int>(this->_internal_packid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "F4BY.CSMatchPackBuying.packId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_packid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSMatchPackBuying)
  return target;
}

size_t CSMatchPackBuying::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSMatchPackBuying)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string packId = 1;
  if (this->packid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_packid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSMatchPackBuying::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSMatchPackBuying)
  GOOGLE_DCHECK_NE(&from, this);
  const CSMatchPackBuying* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSMatchPackBuying>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSMatchPackBuying)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSMatchPackBuying)
    MergeFrom(*source);
  }
}

void CSMatchPackBuying::MergeFrom(const CSMatchPackBuying& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSMatchPackBuying)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.packid().size() > 0) {
    _internal_set_packid(from._internal_packid());
  }
}

void CSMatchPackBuying::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSMatchPackBuying)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMatchPackBuying::CopyFrom(const CSMatchPackBuying& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSMatchPackBuying)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMatchPackBuying::IsInitialized() const {
  return true;
}

void CSMatchPackBuying::InternalSwap(CSMatchPackBuying* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  packid_.Swap(&other->packid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CSMatchPackBuying::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AwardDetail::_Internal {
 public:
};

AwardDetail::AwardDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.AwardDetail)
}
AwardDetail::AwardDetail(const AwardDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick().empty()) {
    nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nick(), 
      GetArena());
  }
  photo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_photo().empty()) {
    photo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_photo(), 
      GetArena());
  }
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&vip_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(vip_));
  // @@protoc_insertion_point(copy_constructor:F4BY.AwardDetail)
}

void AwardDetail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AwardDetail_F4BY_2eproto.base);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  photo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&vip_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(vip_));
}

AwardDetail::~AwardDetail() {
  // @@protoc_insertion_point(destructor:F4BY.AwardDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AwardDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  photo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AwardDetail::ArenaDtor(void* object) {
  AwardDetail* _this = reinterpret_cast< AwardDetail* >(object);
  (void)_this;
}
void AwardDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AwardDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AwardDetail& AwardDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AwardDetail_F4BY_2eproto.base);
  return *internal_default_instance();
}


void AwardDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.AwardDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nick_.ClearToEmpty();
  photo_.ClearToEmpty();
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vip_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(vip_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AwardDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nums = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nums_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 period = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nick = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_nick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "F4BY.AwardDetail.nick"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string photo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_photo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "F4BY.AwardDetail.photo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AwardDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.AwardDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  // int32 nums = 2;
  if (this->nums() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_nums(), target);
  }

  // int32 period = 3;
  if (this->period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_period(), target);
  }

  // int32 vip = 4;
  if (this->vip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_vip(), target);
  }

  // string nick = 5;
  if (this->nick().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick().data(), static_cast<int>(this->_internal_nick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "F4BY.AwardDetail.nick");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_nick(), target);
  }

  // string photo = 6;
  if (this->photo().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_photo().data(), static_cast<int>(this->_internal_photo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "F4BY.AwardDetail.photo");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_photo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.AwardDetail)
  return target;
}

size_t AwardDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.AwardDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nick = 5;
  if (this->nick().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick());
  }

  // string photo = 6;
  if (this->photo().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_photo());
  }

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  // int32 nums = 2;
  if (this->nums() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nums());
  }

  // int32 period = 3;
  if (this->period() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_period());
  }

  // int32 vip = 4;
  if (this->vip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vip());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AwardDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.AwardDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const AwardDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AwardDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.AwardDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.AwardDetail)
    MergeFrom(*source);
  }
}

void AwardDetail::MergeFrom(const AwardDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.AwardDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nick().size() > 0) {
    _internal_set_nick(from._internal_nick());
  }
  if (from.photo().size() > 0) {
    _internal_set_photo(from._internal_photo());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.nums() != 0) {
    _internal_set_nums(from._internal_nums());
  }
  if (from.period() != 0) {
    _internal_set_period(from._internal_period());
  }
  if (from.vip() != 0) {
    _internal_set_vip(from._internal_vip());
  }
}

void AwardDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.AwardDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AwardDetail::CopyFrom(const AwardDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.AwardDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AwardDetail::IsInitialized() const {
  return true;
}

void AwardDetail::InternalSwap(AwardDetail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nick_.Swap(&other->nick_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  photo_.Swap(&other->photo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AwardDetail, vip_)
      + sizeof(AwardDetail::vip_)
      - PROTOBUF_FIELD_OFFSET(AwardDetail, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AwardDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LuckyAwardNotify::_Internal {
 public:
};

LuckyAwardNotify::LuckyAwardNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  detail_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.LuckyAwardNotify)
}
LuckyAwardNotify::LuckyAwardNotify(const LuckyAwardNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      detail_(from.detail_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  awardtype_ = from.awardtype_;
  // @@protoc_insertion_point(copy_constructor:F4BY.LuckyAwardNotify)
}

void LuckyAwardNotify::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LuckyAwardNotify_F4BY_2eproto.base);
  awardtype_ = 0;
}

LuckyAwardNotify::~LuckyAwardNotify() {
  // @@protoc_insertion_point(destructor:F4BY.LuckyAwardNotify)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LuckyAwardNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LuckyAwardNotify::ArenaDtor(void* object) {
  LuckyAwardNotify* _this = reinterpret_cast< LuckyAwardNotify* >(object);
  (void)_this;
}
void LuckyAwardNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LuckyAwardNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LuckyAwardNotify& LuckyAwardNotify::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LuckyAwardNotify_F4BY_2eproto.base);
  return *internal_default_instance();
}


void LuckyAwardNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.LuckyAwardNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detail_.Clear();
  awardtype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LuckyAwardNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 awardType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          awardtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .F4BY.AwardDetail detail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_detail(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LuckyAwardNotify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.LuckyAwardNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 awardType = 1;
  if (this->awardtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_awardtype(), target);
  }

  // repeated .F4BY.AwardDetail detail = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_detail_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_detail(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.LuckyAwardNotify)
  return target;
}

size_t LuckyAwardNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.LuckyAwardNotify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.AwardDetail detail = 2;
  total_size += 1UL * this->_internal_detail_size();
  for (const auto& msg : this->detail_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 awardType = 1;
  if (this->awardtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_awardtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LuckyAwardNotify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.LuckyAwardNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const LuckyAwardNotify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LuckyAwardNotify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.LuckyAwardNotify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.LuckyAwardNotify)
    MergeFrom(*source);
  }
}

void LuckyAwardNotify::MergeFrom(const LuckyAwardNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.LuckyAwardNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detail_.MergeFrom(from.detail_);
  if (from.awardtype() != 0) {
    _internal_set_awardtype(from._internal_awardtype());
  }
}

void LuckyAwardNotify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.LuckyAwardNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LuckyAwardNotify::CopyFrom(const LuckyAwardNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.LuckyAwardNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LuckyAwardNotify::IsInitialized() const {
  return true;
}

void LuckyAwardNotify::InternalSwap(LuckyAwardNotify* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  detail_.InternalSwap(&other->detail_);
  swap(awardtype_, other->awardtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LuckyAwardNotify::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSGameItemSwitch::_Internal {
 public:
};

CSGameItemSwitch::CSGameItemSwitch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSGameItemSwitch)
}
CSGameItemSwitch::CSGameItemSwitch(const CSGameItemSwitch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:F4BY.CSGameItemSwitch)
}

void CSGameItemSwitch::SharedCtor() {
}

CSGameItemSwitch::~CSGameItemSwitch() {
  // @@protoc_insertion_point(destructor:F4BY.CSGameItemSwitch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSGameItemSwitch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSGameItemSwitch::ArenaDtor(void* object) {
  CSGameItemSwitch* _this = reinterpret_cast< CSGameItemSwitch* >(object);
  (void)_this;
}
void CSGameItemSwitch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSGameItemSwitch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSGameItemSwitch& CSGameItemSwitch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSGameItemSwitch_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSGameItemSwitch::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSGameItemSwitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSGameItemSwitch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSGameItemSwitch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSGameItemSwitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSGameItemSwitch)
  return target;
}

size_t CSGameItemSwitch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSGameItemSwitch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSGameItemSwitch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSGameItemSwitch)
  GOOGLE_DCHECK_NE(&from, this);
  const CSGameItemSwitch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSGameItemSwitch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSGameItemSwitch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSGameItemSwitch)
    MergeFrom(*source);
  }
}

void CSGameItemSwitch::MergeFrom(const CSGameItemSwitch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSGameItemSwitch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSGameItemSwitch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSGameItemSwitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGameItemSwitch::CopyFrom(const CSGameItemSwitch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSGameItemSwitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGameItemSwitch::IsInitialized() const {
  return true;
}

void CSGameItemSwitch::InternalSwap(CSGameItemSwitch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSGameItemSwitch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGameItemSwitch::_Internal {
 public:
};

SCGameItemSwitch::SCGameItemSwitch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCGameItemSwitch)
}
SCGameItemSwitch::SCGameItemSwitch(const SCGameItemSwitch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lucky_task_ = from.lucky_task_;
  // @@protoc_insertion_point(copy_constructor:F4BY.SCGameItemSwitch)
}

void SCGameItemSwitch::SharedCtor() {
  lucky_task_ = false;
}

SCGameItemSwitch::~SCGameItemSwitch() {
  // @@protoc_insertion_point(destructor:F4BY.SCGameItemSwitch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGameItemSwitch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCGameItemSwitch::ArenaDtor(void* object) {
  SCGameItemSwitch* _this = reinterpret_cast< SCGameItemSwitch* >(object);
  (void)_this;
}
void SCGameItemSwitch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGameItemSwitch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGameItemSwitch& SCGameItemSwitch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGameItemSwitch_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCGameItemSwitch::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCGameItemSwitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lucky_task_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGameItemSwitch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool lucky_task = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          lucky_task_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGameItemSwitch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCGameItemSwitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool lucky_task = 1;
  if (this->lucky_task() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_lucky_task(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCGameItemSwitch)
  return target;
}

size_t SCGameItemSwitch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCGameItemSwitch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool lucky_task = 1;
  if (this->lucky_task() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGameItemSwitch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCGameItemSwitch)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGameItemSwitch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGameItemSwitch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCGameItemSwitch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCGameItemSwitch)
    MergeFrom(*source);
  }
}

void SCGameItemSwitch::MergeFrom(const SCGameItemSwitch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCGameItemSwitch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lucky_task() != 0) {
    _internal_set_lucky_task(from._internal_lucky_task());
  }
}

void SCGameItemSwitch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCGameItemSwitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGameItemSwitch::CopyFrom(const SCGameItemSwitch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCGameItemSwitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGameItemSwitch::IsInitialized() const {
  return true;
}

void SCGameItemSwitch::InternalSwap(SCGameItemSwitch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(lucky_task_, other->lucky_task_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGameItemSwitch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AwardProp::_Internal {
 public:
};

AwardProp::AwardProp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.AwardProp)
}
AwardProp::AwardProp(const AwardProp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&prop_id_, &from.prop_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&prop_id_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:F4BY.AwardProp)
}

void AwardProp::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&prop_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&prop_id_)) + sizeof(num_));
}

AwardProp::~AwardProp() {
  // @@protoc_insertion_point(destructor:F4BY.AwardProp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AwardProp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AwardProp::ArenaDtor(void* object) {
  AwardProp* _this = reinterpret_cast< AwardProp* >(object);
  (void)_this;
}
void AwardProp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AwardProp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AwardProp& AwardProp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AwardProp_F4BY_2eproto.base);
  return *internal_default_instance();
}


void AwardProp::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.AwardProp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&prop_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&prop_id_)) + sizeof(num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AwardProp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 prop_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          prop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AwardProp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.AwardProp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 prop_id = 1;
  if (this->prop_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_prop_id(), target);
  }

  // int32 num = 2;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.AwardProp)
  return target;
}

size_t AwardProp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.AwardProp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 prop_id = 1;
  if (this->prop_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prop_id());
  }

  // int32 num = 2;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AwardProp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.AwardProp)
  GOOGLE_DCHECK_NE(&from, this);
  const AwardProp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AwardProp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.AwardProp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.AwardProp)
    MergeFrom(*source);
  }
}

void AwardProp::MergeFrom(const AwardProp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.AwardProp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prop_id() != 0) {
    _internal_set_prop_id(from._internal_prop_id());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
}

void AwardProp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.AwardProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AwardProp::CopyFrom(const AwardProp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.AwardProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AwardProp::IsInitialized() const {
  return true;
}

void AwardProp::InternalSwap(AwardProp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AwardProp, num_)
      + sizeof(AwardProp::num_)
      - PROTOBUF_FIELD_OFFSET(AwardProp, prop_id_)>(
          reinterpret_cast<char*>(&prop_id_),
          reinterpret_cast<char*>(&other->prop_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AwardProp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LuckyTaskInfo::_Internal {
 public:
};

LuckyTaskInfo::LuckyTaskInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.LuckyTaskInfo)
}
LuckyTaskInfo::LuckyTaskInfo(const LuckyTaskInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_) -
    reinterpret_cast<char*>(&id_)) + sizeof(target_));
  // @@protoc_insertion_point(copy_constructor:F4BY.LuckyTaskInfo)
}

void LuckyTaskInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LuckyTaskInfo_F4BY_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&target_) -
      reinterpret_cast<char*>(&id_)) + sizeof(target_));
}

LuckyTaskInfo::~LuckyTaskInfo() {
  // @@protoc_insertion_point(destructor:F4BY.LuckyTaskInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LuckyTaskInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LuckyTaskInfo::ArenaDtor(void* object) {
  LuckyTaskInfo* _this = reinterpret_cast< LuckyTaskInfo* >(object);
  (void)_this;
}
void LuckyTaskInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LuckyTaskInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LuckyTaskInfo& LuckyTaskInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LuckyTaskInfo_F4BY_2eproto.base);
  return *internal_default_instance();
}


void LuckyTaskInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.LuckyTaskInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_) -
      reinterpret_cast<char*>(&id_)) + sizeof(target_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LuckyTaskInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string text = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "F4BY.LuckyTaskInfo.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 amount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 target = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LuckyTaskInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.LuckyTaskInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_status(), target);
  }

  // int32 score = 3;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_score(), target);
  }

  // string text = 4;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "F4BY.LuckyTaskInfo.text");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_text(), target);
  }

  // int32 amount = 5;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_amount(), target);
  }

  // int32 target = 6;
  if (this->target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.LuckyTaskInfo)
  return target;
}

size_t LuckyTaskInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.LuckyTaskInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 4;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 score = 3;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  // int32 amount = 5;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_amount());
  }

  // int32 target = 6;
  if (this->target() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_target());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LuckyTaskInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.LuckyTaskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LuckyTaskInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LuckyTaskInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.LuckyTaskInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.LuckyTaskInfo)
    MergeFrom(*source);
  }
}

void LuckyTaskInfo::MergeFrom(const LuckyTaskInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.LuckyTaskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {
    _internal_set_text(from._internal_text());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.target() != 0) {
    _internal_set_target(from._internal_target());
  }
}

void LuckyTaskInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.LuckyTaskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LuckyTaskInfo::CopyFrom(const LuckyTaskInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.LuckyTaskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LuckyTaskInfo::IsInitialized() const {
  return true;
}

void LuckyTaskInfo::InternalSwap(LuckyTaskInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LuckyTaskInfo, target_)
      + sizeof(LuckyTaskInfo::target_)
      - PROTOBUF_FIELD_OFFSET(LuckyTaskInfo, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LuckyTaskInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSLuckyDrawInfo::_Internal {
 public:
};

CSLuckyDrawInfo::CSLuckyDrawInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSLuckyDrawInfo)
}
CSLuckyDrawInfo::CSLuckyDrawInfo(const CSLuckyDrawInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:F4BY.CSLuckyDrawInfo)
}

void CSLuckyDrawInfo::SharedCtor() {
}

CSLuckyDrawInfo::~CSLuckyDrawInfo() {
  // @@protoc_insertion_point(destructor:F4BY.CSLuckyDrawInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSLuckyDrawInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSLuckyDrawInfo::ArenaDtor(void* object) {
  CSLuckyDrawInfo* _this = reinterpret_cast< CSLuckyDrawInfo* >(object);
  (void)_this;
}
void CSLuckyDrawInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSLuckyDrawInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSLuckyDrawInfo& CSLuckyDrawInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSLuckyDrawInfo_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSLuckyDrawInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSLuckyDrawInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSLuckyDrawInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSLuckyDrawInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSLuckyDrawInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSLuckyDrawInfo)
  return target;
}

size_t CSLuckyDrawInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSLuckyDrawInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSLuckyDrawInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSLuckyDrawInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSLuckyDrawInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSLuckyDrawInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSLuckyDrawInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSLuckyDrawInfo)
    MergeFrom(*source);
  }
}

void CSLuckyDrawInfo::MergeFrom(const CSLuckyDrawInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSLuckyDrawInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSLuckyDrawInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSLuckyDrawInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLuckyDrawInfo::CopyFrom(const CSLuckyDrawInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSLuckyDrawInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLuckyDrawInfo::IsInitialized() const {
  return true;
}

void CSLuckyDrawInfo::InternalSwap(CSLuckyDrawInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSLuckyDrawInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCLuckyDrawInfo::_Internal {
 public:
};

SCLuckyDrawInfo::SCLuckyDrawInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hour_reward_(arena),
  day_reward_(arena),
  day_lucky_nums_(arena),
  task_info_(arena),
  hour_lucky_nums_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCLuckyDrawInfo)
}
SCLuckyDrawInfo::SCLuckyDrawInfo(const SCLuckyDrawInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hour_reward_(from.hour_reward_),
      day_reward_(from.day_reward_),
      day_lucky_nums_(from.day_lucky_nums_),
      task_info_(from.task_info_),
      hour_lucky_nums_(from.hour_lucky_nums_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hour_remain_sec_, &from.hour_remain_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&next_remain_sec_) -
    reinterpret_cast<char*>(&hour_remain_sec_)) + sizeof(next_remain_sec_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCLuckyDrawInfo)
}

void SCLuckyDrawInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCLuckyDrawInfo_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&hour_remain_sec_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&next_remain_sec_) -
      reinterpret_cast<char*>(&hour_remain_sec_)) + sizeof(next_remain_sec_));
}

SCLuckyDrawInfo::~SCLuckyDrawInfo() {
  // @@protoc_insertion_point(destructor:F4BY.SCLuckyDrawInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCLuckyDrawInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCLuckyDrawInfo::ArenaDtor(void* object) {
  SCLuckyDrawInfo* _this = reinterpret_cast< SCLuckyDrawInfo* >(object);
  (void)_this;
}
void SCLuckyDrawInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCLuckyDrawInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCLuckyDrawInfo& SCLuckyDrawInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCLuckyDrawInfo_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCLuckyDrawInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCLuckyDrawInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hour_reward_.Clear();
  day_reward_.Clear();
  day_lucky_nums_.Clear();
  task_info_.Clear();
  hour_lucky_nums_.Clear();
  ::memset(&hour_remain_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_remain_sec_) -
      reinterpret_cast<char*>(&hour_remain_sec_)) + sizeof(next_remain_sec_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCLuckyDrawInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 hour_remain_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          hour_remain_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 day_remain_sec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          day_remain_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .F4BY.AwardProp hour_reward = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hour_reward(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .F4BY.AwardProp day_reward = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_day_reward(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 day_lucky_nums = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_day_lucky_nums(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_day_lucky_nums(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hour_total = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          hour_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 day_total = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          day_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hour_award_num = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          hour_award_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 day_award_num = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          day_award_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 next_start_tick = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          next_start_tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .F4BY.LuckyTaskInfo task_info = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_task_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 exchange_score = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          exchange_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 next_remain_sec = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          next_remain_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 hour_lucky_nums = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_hour_lucky_nums(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120) {
          _internal_add_hour_lucky_nums(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCLuckyDrawInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCLuckyDrawInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 hour_remain_sec = 1;
  if (this->hour_remain_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_hour_remain_sec(), target);
  }

  // int32 day_remain_sec = 2;
  if (this->day_remain_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_day_remain_sec(), target);
  }

  // repeated .F4BY.AwardProp hour_reward = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hour_reward_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_hour_reward(i), target, stream);
  }

  // repeated .F4BY.AwardProp day_reward = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_day_reward_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_day_reward(i), target, stream);
  }

  // repeated int32 day_lucky_nums = 5;
  {
    int byte_size = _day_lucky_nums_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_day_lucky_nums(), byte_size, target);
    }
  }

  // int32 score = 6;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_score(), target);
  }

  // int32 hour_total = 7;
  if (this->hour_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_hour_total(), target);
  }

  // int32 day_total = 8;
  if (this->day_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_day_total(), target);
  }

  // int32 hour_award_num = 9;
  if (this->hour_award_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_hour_award_num(), target);
  }

  // int32 day_award_num = 10;
  if (this->day_award_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_day_award_num(), target);
  }

  // int32 next_start_tick = 11;
  if (this->next_start_tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_next_start_tick(), target);
  }

  // repeated .F4BY.LuckyTaskInfo task_info = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_task_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_task_info(i), target, stream);
  }

  // int32 exchange_score = 13;
  if (this->exchange_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_exchange_score(), target);
  }

  // int32 next_remain_sec = 14;
  if (this->next_remain_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_next_remain_sec(), target);
  }

  // repeated int32 hour_lucky_nums = 15;
  {
    int byte_size = _hour_lucky_nums_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          15, _internal_hour_lucky_nums(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCLuckyDrawInfo)
  return target;
}

size_t SCLuckyDrawInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCLuckyDrawInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.AwardProp hour_reward = 3;
  total_size += 1UL * this->_internal_hour_reward_size();
  for (const auto& msg : this->hour_reward_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .F4BY.AwardProp day_reward = 4;
  total_size += 1UL * this->_internal_day_reward_size();
  for (const auto& msg : this->day_reward_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 day_lucky_nums = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->day_lucky_nums_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _day_lucky_nums_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .F4BY.LuckyTaskInfo task_info = 12;
  total_size += 1UL * this->_internal_task_info_size();
  for (const auto& msg : this->task_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 hour_lucky_nums = 15;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->hour_lucky_nums_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _hour_lucky_nums_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 hour_remain_sec = 1;
  if (this->hour_remain_sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hour_remain_sec());
  }

  // int32 day_remain_sec = 2;
  if (this->day_remain_sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_day_remain_sec());
  }

  // int32 score = 6;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  // int32 hour_total = 7;
  if (this->hour_total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hour_total());
  }

  // int32 day_total = 8;
  if (this->day_total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_day_total());
  }

  // int32 hour_award_num = 9;
  if (this->hour_award_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hour_award_num());
  }

  // int32 day_award_num = 10;
  if (this->day_award_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_day_award_num());
  }

  // int32 next_start_tick = 11;
  if (this->next_start_tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_next_start_tick());
  }

  // int32 exchange_score = 13;
  if (this->exchange_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_exchange_score());
  }

  // int32 next_remain_sec = 14;
  if (this->next_remain_sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_next_remain_sec());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCLuckyDrawInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCLuckyDrawInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCLuckyDrawInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCLuckyDrawInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCLuckyDrawInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCLuckyDrawInfo)
    MergeFrom(*source);
  }
}

void SCLuckyDrawInfo::MergeFrom(const SCLuckyDrawInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCLuckyDrawInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hour_reward_.MergeFrom(from.hour_reward_);
  day_reward_.MergeFrom(from.day_reward_);
  day_lucky_nums_.MergeFrom(from.day_lucky_nums_);
  task_info_.MergeFrom(from.task_info_);
  hour_lucky_nums_.MergeFrom(from.hour_lucky_nums_);
  if (from.hour_remain_sec() != 0) {
    _internal_set_hour_remain_sec(from._internal_hour_remain_sec());
  }
  if (from.day_remain_sec() != 0) {
    _internal_set_day_remain_sec(from._internal_day_remain_sec());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.hour_total() != 0) {
    _internal_set_hour_total(from._internal_hour_total());
  }
  if (from.day_total() != 0) {
    _internal_set_day_total(from._internal_day_total());
  }
  if (from.hour_award_num() != 0) {
    _internal_set_hour_award_num(from._internal_hour_award_num());
  }
  if (from.day_award_num() != 0) {
    _internal_set_day_award_num(from._internal_day_award_num());
  }
  if (from.next_start_tick() != 0) {
    _internal_set_next_start_tick(from._internal_next_start_tick());
  }
  if (from.exchange_score() != 0) {
    _internal_set_exchange_score(from._internal_exchange_score());
  }
  if (from.next_remain_sec() != 0) {
    _internal_set_next_remain_sec(from._internal_next_remain_sec());
  }
}

void SCLuckyDrawInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCLuckyDrawInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCLuckyDrawInfo::CopyFrom(const SCLuckyDrawInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCLuckyDrawInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCLuckyDrawInfo::IsInitialized() const {
  return true;
}

void SCLuckyDrawInfo::InternalSwap(SCLuckyDrawInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hour_reward_.InternalSwap(&other->hour_reward_);
  day_reward_.InternalSwap(&other->day_reward_);
  day_lucky_nums_.InternalSwap(&other->day_lucky_nums_);
  task_info_.InternalSwap(&other->task_info_);
  hour_lucky_nums_.InternalSwap(&other->hour_lucky_nums_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCLuckyDrawInfo, next_remain_sec_)
      + sizeof(SCLuckyDrawInfo::next_remain_sec_)
      - PROTOBUF_FIELD_OFFSET(SCLuckyDrawInfo, hour_remain_sec_)>(
          reinterpret_cast<char*>(&hour_remain_sec_),
          reinterpret_cast<char*>(&other->hour_remain_sec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCLuckyDrawInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSGetLuckyTaskAward::_Internal {
 public:
};

CSGetLuckyTaskAward::CSGetLuckyTaskAward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSGetLuckyTaskAward)
}
CSGetLuckyTaskAward::CSGetLuckyTaskAward(const CSGetLuckyTaskAward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  task_id_ = from.task_id_;
  // @@protoc_insertion_point(copy_constructor:F4BY.CSGetLuckyTaskAward)
}

void CSGetLuckyTaskAward::SharedCtor() {
  task_id_ = 0;
}

CSGetLuckyTaskAward::~CSGetLuckyTaskAward() {
  // @@protoc_insertion_point(destructor:F4BY.CSGetLuckyTaskAward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSGetLuckyTaskAward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSGetLuckyTaskAward::ArenaDtor(void* object) {
  CSGetLuckyTaskAward* _this = reinterpret_cast< CSGetLuckyTaskAward* >(object);
  (void)_this;
}
void CSGetLuckyTaskAward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSGetLuckyTaskAward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSGetLuckyTaskAward& CSGetLuckyTaskAward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSGetLuckyTaskAward_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSGetLuckyTaskAward::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSGetLuckyTaskAward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSGetLuckyTaskAward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSGetLuckyTaskAward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSGetLuckyTaskAward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 task_id = 1;
  if (this->task_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_task_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSGetLuckyTaskAward)
  return target;
}

size_t CSGetLuckyTaskAward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSGetLuckyTaskAward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 task_id = 1;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_task_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSGetLuckyTaskAward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSGetLuckyTaskAward)
  GOOGLE_DCHECK_NE(&from, this);
  const CSGetLuckyTaskAward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSGetLuckyTaskAward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSGetLuckyTaskAward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSGetLuckyTaskAward)
    MergeFrom(*source);
  }
}

void CSGetLuckyTaskAward::MergeFrom(const CSGetLuckyTaskAward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSGetLuckyTaskAward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.task_id() != 0) {
    _internal_set_task_id(from._internal_task_id());
  }
}

void CSGetLuckyTaskAward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSGetLuckyTaskAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetLuckyTaskAward::CopyFrom(const CSGetLuckyTaskAward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSGetLuckyTaskAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetLuckyTaskAward::IsInitialized() const {
  return true;
}

void CSGetLuckyTaskAward::InternalSwap(CSGetLuckyTaskAward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(task_id_, other->task_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSGetLuckyTaskAward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGetLuckyTaskAward::_Internal {
 public:
  static const ::F4BY::LuckyTaskInfo& task(const SCGetLuckyTaskAward* msg);
};

const ::F4BY::LuckyTaskInfo&
SCGetLuckyTaskAward::_Internal::task(const SCGetLuckyTaskAward* msg) {
  return *msg->task_;
}
SCGetLuckyTaskAward::SCGetLuckyTaskAward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCGetLuckyTaskAward)
}
SCGetLuckyTaskAward::SCGetLuckyTaskAward(const SCGetLuckyTaskAward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_task()) {
    task_ = new ::F4BY::LuckyTaskInfo(*from.task_);
  } else {
    task_ = nullptr;
  }
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&score_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCGetLuckyTaskAward)
}

void SCGetLuckyTaskAward::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCGetLuckyTaskAward_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&task_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&task_)) + sizeof(code_));
}

SCGetLuckyTaskAward::~SCGetLuckyTaskAward() {
  // @@protoc_insertion_point(destructor:F4BY.SCGetLuckyTaskAward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGetLuckyTaskAward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete task_;
}

void SCGetLuckyTaskAward::ArenaDtor(void* object) {
  SCGetLuckyTaskAward* _this = reinterpret_cast< SCGetLuckyTaskAward* >(object);
  (void)_this;
}
void SCGetLuckyTaskAward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGetLuckyTaskAward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGetLuckyTaskAward& SCGetLuckyTaskAward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGetLuckyTaskAward_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCGetLuckyTaskAward::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCGetLuckyTaskAward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&score_)) + sizeof(code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGetLuckyTaskAward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .F4BY.LuckyTaskInfo task = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_task(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGetLuckyTaskAward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCGetLuckyTaskAward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .F4BY.LuckyTaskInfo task = 1;
  if (this->has_task()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::task(this), target, stream);
  }

  // int32 score = 2;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_score(), target);
  }

  // int32 code = 3;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCGetLuckyTaskAward)
  return target;
}

size_t SCGetLuckyTaskAward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCGetLuckyTaskAward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .F4BY.LuckyTaskInfo task = 1;
  if (this->has_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_);
  }

  // int32 score = 2;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  // int32 code = 3;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGetLuckyTaskAward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCGetLuckyTaskAward)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGetLuckyTaskAward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGetLuckyTaskAward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCGetLuckyTaskAward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCGetLuckyTaskAward)
    MergeFrom(*source);
  }
}

void SCGetLuckyTaskAward::MergeFrom(const SCGetLuckyTaskAward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCGetLuckyTaskAward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_task()) {
    _internal_mutable_task()->::F4BY::LuckyTaskInfo::MergeFrom(from._internal_task());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void SCGetLuckyTaskAward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCGetLuckyTaskAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGetLuckyTaskAward::CopyFrom(const SCGetLuckyTaskAward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCGetLuckyTaskAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGetLuckyTaskAward::IsInitialized() const {
  return true;
}

void SCGetLuckyTaskAward::InternalSwap(SCGetLuckyTaskAward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCGetLuckyTaskAward, code_)
      + sizeof(SCGetLuckyTaskAward::code_)
      - PROTOBUF_FIELD_OFFSET(SCGetLuckyTaskAward, task_)>(
          reinterpret_cast<char*>(&task_),
          reinterpret_cast<char*>(&other->task_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGetLuckyTaskAward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSGetLuckyNum::_Internal {
 public:
};

CSGetLuckyNum::CSGetLuckyNum(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSGetLuckyNum)
}
CSGetLuckyNum::CSGetLuckyNum(const CSGetLuckyNum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  times_ = from.times_;
  // @@protoc_insertion_point(copy_constructor:F4BY.CSGetLuckyNum)
}

void CSGetLuckyNum::SharedCtor() {
  times_ = 0;
}

CSGetLuckyNum::~CSGetLuckyNum() {
  // @@protoc_insertion_point(destructor:F4BY.CSGetLuckyNum)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSGetLuckyNum::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSGetLuckyNum::ArenaDtor(void* object) {
  CSGetLuckyNum* _this = reinterpret_cast< CSGetLuckyNum* >(object);
  (void)_this;
}
void CSGetLuckyNum::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSGetLuckyNum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSGetLuckyNum& CSGetLuckyNum::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSGetLuckyNum_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSGetLuckyNum::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSGetLuckyNum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  times_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSGetLuckyNum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 times = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSGetLuckyNum::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSGetLuckyNum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 times = 1;
  if (this->times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_times(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSGetLuckyNum)
  return target;
}

size_t CSGetLuckyNum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSGetLuckyNum)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 times = 1;
  if (this->times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_times());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSGetLuckyNum::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSGetLuckyNum)
  GOOGLE_DCHECK_NE(&from, this);
  const CSGetLuckyNum* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSGetLuckyNum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSGetLuckyNum)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSGetLuckyNum)
    MergeFrom(*source);
  }
}

void CSGetLuckyNum::MergeFrom(const CSGetLuckyNum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSGetLuckyNum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.times() != 0) {
    _internal_set_times(from._internal_times());
  }
}

void CSGetLuckyNum::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSGetLuckyNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetLuckyNum::CopyFrom(const CSGetLuckyNum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSGetLuckyNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetLuckyNum::IsInitialized() const {
  return true;
}

void CSGetLuckyNum::InternalSwap(CSGetLuckyNum* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(times_, other->times_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSGetLuckyNum::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGetLuckyNum::_Internal {
 public:
};

SCGetLuckyNum::SCGetLuckyNum(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lucky_nums_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCGetLuckyNum)
}
SCGetLuckyNum::SCGetLuckyNum(const SCGetLuckyNum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lucky_nums_(from.lucky_nums_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&score_)) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCGetLuckyNum)
}

void SCGetLuckyNum::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&score_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&score_)) + sizeof(error_code_));
}

SCGetLuckyNum::~SCGetLuckyNum() {
  // @@protoc_insertion_point(destructor:F4BY.SCGetLuckyNum)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGetLuckyNum::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCGetLuckyNum::ArenaDtor(void* object) {
  SCGetLuckyNum* _this = reinterpret_cast< SCGetLuckyNum* >(object);
  (void)_this;
}
void SCGetLuckyNum::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGetLuckyNum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGetLuckyNum& SCGetLuckyNum::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGetLuckyNum_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCGetLuckyNum::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCGetLuckyNum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lucky_nums_.Clear();
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&score_)) + sizeof(error_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGetLuckyNum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 error_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 lucky_nums = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_lucky_nums(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_lucky_nums(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGetLuckyNum::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCGetLuckyNum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 score = 1;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_score(), target);
  }

  // int32 error_code = 2;
  if (this->error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_error_code(), target);
  }

  // repeated int32 lucky_nums = 3;
  {
    int byte_size = _lucky_nums_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_lucky_nums(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCGetLuckyNum)
  return target;
}

size_t SCGetLuckyNum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCGetLuckyNum)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 lucky_nums = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->lucky_nums_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _lucky_nums_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 score = 1;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  // int32 error_code = 2;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_error_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGetLuckyNum::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCGetLuckyNum)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGetLuckyNum* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGetLuckyNum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCGetLuckyNum)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCGetLuckyNum)
    MergeFrom(*source);
  }
}

void SCGetLuckyNum::MergeFrom(const SCGetLuckyNum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCGetLuckyNum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lucky_nums_.MergeFrom(from.lucky_nums_);
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
}

void SCGetLuckyNum::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCGetLuckyNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGetLuckyNum::CopyFrom(const SCGetLuckyNum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCGetLuckyNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGetLuckyNum::IsInitialized() const {
  return true;
}

void SCGetLuckyNum::InternalSwap(SCGetLuckyNum* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lucky_nums_.InternalSwap(&other->lucky_nums_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCGetLuckyNum, error_code_)
      + sizeof(SCGetLuckyNum::error_code_)
      - PROTOBUF_FIELD_OFFSET(SCGetLuckyNum, score_)>(
          reinterpret_cast<char*>(&score_),
          reinterpret_cast<char*>(&other->score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGetLuckyNum::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSLuckyRedDot::_Internal {
 public:
};

CSLuckyRedDot::CSLuckyRedDot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSLuckyRedDot)
}
CSLuckyRedDot::CSLuckyRedDot(const CSLuckyRedDot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:F4BY.CSLuckyRedDot)
}

void CSLuckyRedDot::SharedCtor() {
}

CSLuckyRedDot::~CSLuckyRedDot() {
  // @@protoc_insertion_point(destructor:F4BY.CSLuckyRedDot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSLuckyRedDot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSLuckyRedDot::ArenaDtor(void* object) {
  CSLuckyRedDot* _this = reinterpret_cast< CSLuckyRedDot* >(object);
  (void)_this;
}
void CSLuckyRedDot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSLuckyRedDot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSLuckyRedDot& CSLuckyRedDot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSLuckyRedDot_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSLuckyRedDot::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSLuckyRedDot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSLuckyRedDot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSLuckyRedDot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSLuckyRedDot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSLuckyRedDot)
  return target;
}

size_t CSLuckyRedDot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSLuckyRedDot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSLuckyRedDot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSLuckyRedDot)
  GOOGLE_DCHECK_NE(&from, this);
  const CSLuckyRedDot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSLuckyRedDot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSLuckyRedDot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSLuckyRedDot)
    MergeFrom(*source);
  }
}

void CSLuckyRedDot::MergeFrom(const CSLuckyRedDot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSLuckyRedDot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSLuckyRedDot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSLuckyRedDot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLuckyRedDot::CopyFrom(const CSLuckyRedDot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSLuckyRedDot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLuckyRedDot::IsInitialized() const {
  return true;
}

void CSLuckyRedDot::InternalSwap(CSLuckyRedDot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSLuckyRedDot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCLuckyRedDot::_Internal {
 public:
};

SCLuckyRedDot::SCLuckyRedDot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCLuckyRedDot)
}
SCLuckyRedDot::SCLuckyRedDot(const SCLuckyRedDot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  show_ = from.show_;
  // @@protoc_insertion_point(copy_constructor:F4BY.SCLuckyRedDot)
}

void SCLuckyRedDot::SharedCtor() {
  show_ = false;
}

SCLuckyRedDot::~SCLuckyRedDot() {
  // @@protoc_insertion_point(destructor:F4BY.SCLuckyRedDot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCLuckyRedDot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCLuckyRedDot::ArenaDtor(void* object) {
  SCLuckyRedDot* _this = reinterpret_cast< SCLuckyRedDot* >(object);
  (void)_this;
}
void SCLuckyRedDot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCLuckyRedDot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCLuckyRedDot& SCLuckyRedDot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCLuckyRedDot_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCLuckyRedDot::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCLuckyRedDot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  show_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCLuckyRedDot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool show = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          show_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCLuckyRedDot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCLuckyRedDot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool show = 1;
  if (this->show() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_show(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCLuckyRedDot)
  return target;
}

size_t SCLuckyRedDot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCLuckyRedDot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool show = 1;
  if (this->show() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCLuckyRedDot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCLuckyRedDot)
  GOOGLE_DCHECK_NE(&from, this);
  const SCLuckyRedDot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCLuckyRedDot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCLuckyRedDot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCLuckyRedDot)
    MergeFrom(*source);
  }
}

void SCLuckyRedDot::MergeFrom(const SCLuckyRedDot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCLuckyRedDot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.show() != 0) {
    _internal_set_show(from._internal_show());
  }
}

void SCLuckyRedDot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCLuckyRedDot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCLuckyRedDot::CopyFrom(const SCLuckyRedDot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCLuckyRedDot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCLuckyRedDot::IsInitialized() const {
  return true;
}

void SCLuckyRedDot::InternalSwap(SCLuckyRedDot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(show_, other->show_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCLuckyRedDot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LuckyRecord::_Internal {
 public:
};

LuckyRecord::LuckyRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.LuckyRecord)
}
LuckyRecord::LuckyRecord(const LuckyRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick_name().empty()) {
    nick_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nick_name(), 
      GetArena());
  }
  ::memcpy(&vip_, &from.vip_,
    static_cast<size_t>(reinterpret_cast<char*>(&tick_) -
    reinterpret_cast<char*>(&vip_)) + sizeof(tick_));
  // @@protoc_insertion_point(copy_constructor:F4BY.LuckyRecord)
}

void LuckyRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LuckyRecord_F4BY_2eproto.base);
  nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&vip_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&vip_)) + sizeof(tick_));
}

LuckyRecord::~LuckyRecord() {
  // @@protoc_insertion_point(destructor:F4BY.LuckyRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LuckyRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nick_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LuckyRecord::ArenaDtor(void* object) {
  LuckyRecord* _this = reinterpret_cast< LuckyRecord* >(object);
  (void)_this;
}
void LuckyRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LuckyRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LuckyRecord& LuckyRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LuckyRecord_F4BY_2eproto.base);
  return *internal_default_instance();
}


void LuckyRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.LuckyRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nick_name_.ClearToEmpty();
  ::memset(&vip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&vip_)) + sizeof(tick_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LuckyRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 vip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 times = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lucky_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lucky_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tick = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nick_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_nick_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "F4BY.LuckyRecord.nick_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LuckyRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.LuckyRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vip = 1;
  if (this->vip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_vip(), target);
  }

  // int32 times = 2;
  if (this->times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_times(), target);
  }

  // int32 lucky_num = 3;
  if (this->lucky_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_lucky_num(), target);
  }

  // int32 tick = 4;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_tick(), target);
  }

  // string nick_name = 5;
  if (this->nick_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick_name().data(), static_cast<int>(this->_internal_nick_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "F4BY.LuckyRecord.nick_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_nick_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.LuckyRecord)
  return target;
}

size_t LuckyRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.LuckyRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nick_name = 5;
  if (this->nick_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick_name());
  }

  // int32 vip = 1;
  if (this->vip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vip());
  }

  // int32 times = 2;
  if (this->times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_times());
  }

  // int32 lucky_num = 3;
  if (this->lucky_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lucky_num());
  }

  // int32 tick = 4;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tick());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LuckyRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.LuckyRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const LuckyRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LuckyRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.LuckyRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.LuckyRecord)
    MergeFrom(*source);
  }
}

void LuckyRecord::MergeFrom(const LuckyRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.LuckyRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nick_name().size() > 0) {
    _internal_set_nick_name(from._internal_nick_name());
  }
  if (from.vip() != 0) {
    _internal_set_vip(from._internal_vip());
  }
  if (from.times() != 0) {
    _internal_set_times(from._internal_times());
  }
  if (from.lucky_num() != 0) {
    _internal_set_lucky_num(from._internal_lucky_num());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
}

void LuckyRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.LuckyRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LuckyRecord::CopyFrom(const LuckyRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.LuckyRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LuckyRecord::IsInitialized() const {
  return true;
}

void LuckyRecord::InternalSwap(LuckyRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nick_name_.Swap(&other->nick_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LuckyRecord, tick_)
      + sizeof(LuckyRecord::tick_)
      - PROTOBUF_FIELD_OFFSET(LuckyRecord, vip_)>(
          reinterpret_cast<char*>(&vip_),
          reinterpret_cast<char*>(&other->vip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LuckyRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OwnRecord::_Internal {
 public:
};

OwnRecord::OwnRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reward_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.OwnRecord)
}
OwnRecord::OwnRecord(const OwnRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reward_(from.reward_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&lucky_num_) -
    reinterpret_cast<char*>(&status_)) + sizeof(lucky_num_));
  // @@protoc_insertion_point(copy_constructor:F4BY.OwnRecord)
}

void OwnRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OwnRecord_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&lucky_num_) -
      reinterpret_cast<char*>(&status_)) + sizeof(lucky_num_));
}

OwnRecord::~OwnRecord() {
  // @@protoc_insertion_point(destructor:F4BY.OwnRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OwnRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OwnRecord::ArenaDtor(void* object) {
  OwnRecord* _this = reinterpret_cast< OwnRecord* >(object);
  (void)_this;
}
void OwnRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OwnRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OwnRecord& OwnRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OwnRecord_F4BY_2eproto.base);
  return *internal_default_instance();
}


void OwnRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.OwnRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_.Clear();
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lucky_num_) -
      reinterpret_cast<char*>(&status_)) + sizeof(lucky_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OwnRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .F4BY.AwardProp reward = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reward(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tick = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lucky_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lucky_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OwnRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.OwnRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .F4BY.AwardProp reward = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reward_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_reward(i), target, stream);
  }

  // int32 status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_status(), target);
  }

  // int32 tick = 3;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_tick(), target);
  }

  // int32 lucky_num = 4;
  if (this->lucky_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_lucky_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.OwnRecord)
  return target;
}

size_t OwnRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.OwnRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.AwardProp reward = 1;
  total_size += 1UL * this->_internal_reward_size();
  for (const auto& msg : this->reward_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 tick = 3;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tick());
  }

  // int32 lucky_num = 4;
  if (this->lucky_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lucky_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OwnRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.OwnRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const OwnRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OwnRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.OwnRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.OwnRecord)
    MergeFrom(*source);
  }
}

void OwnRecord::MergeFrom(const OwnRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.OwnRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reward_.MergeFrom(from.reward_);
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
  if (from.lucky_num() != 0) {
    _internal_set_lucky_num(from._internal_lucky_num());
  }
}

void OwnRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.OwnRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OwnRecord::CopyFrom(const OwnRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.OwnRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OwnRecord::IsInitialized() const {
  return true;
}

void OwnRecord::InternalSwap(OwnRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reward_.InternalSwap(&other->reward_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OwnRecord, lucky_num_)
      + sizeof(OwnRecord::lucky_num_)
      - PROTOBUF_FIELD_OFFSET(OwnRecord, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OwnRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSLuckyRecord::_Internal {
 public:
};

CSLuckyRecord::CSLuckyRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSLuckyRecord)
}
CSLuckyRecord::CSLuckyRecord(const CSLuckyRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:F4BY.CSLuckyRecord)
}

void CSLuckyRecord::SharedCtor() {
  type_ = 0;
}

CSLuckyRecord::~CSLuckyRecord() {
  // @@protoc_insertion_point(destructor:F4BY.CSLuckyRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSLuckyRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSLuckyRecord::ArenaDtor(void* object) {
  CSLuckyRecord* _this = reinterpret_cast< CSLuckyRecord* >(object);
  (void)_this;
}
void CSLuckyRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSLuckyRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSLuckyRecord& CSLuckyRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSLuckyRecord_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSLuckyRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSLuckyRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSLuckyRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSLuckyRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSLuckyRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSLuckyRecord)
  return target;
}

size_t CSLuckyRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSLuckyRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSLuckyRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSLuckyRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const CSLuckyRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSLuckyRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSLuckyRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSLuckyRecord)
    MergeFrom(*source);
  }
}

void CSLuckyRecord::MergeFrom(const CSLuckyRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSLuckyRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void CSLuckyRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSLuckyRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLuckyRecord::CopyFrom(const CSLuckyRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSLuckyRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLuckyRecord::IsInitialized() const {
  return true;
}

void CSLuckyRecord::InternalSwap(CSLuckyRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSLuckyRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCLuckyRecord::_Internal {
 public:
};

SCLuckyRecord::SCLuckyRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  record_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCLuckyRecord)
}
SCLuckyRecord::SCLuckyRecord(const SCLuckyRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      record_(from.record_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:F4BY.SCLuckyRecord)
}

void SCLuckyRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCLuckyRecord_F4BY_2eproto.base);
  type_ = 0;
}

SCLuckyRecord::~SCLuckyRecord() {
  // @@protoc_insertion_point(destructor:F4BY.SCLuckyRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCLuckyRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCLuckyRecord::ArenaDtor(void* object) {
  SCLuckyRecord* _this = reinterpret_cast< SCLuckyRecord* >(object);
  (void)_this;
}
void SCLuckyRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCLuckyRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCLuckyRecord& SCLuckyRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCLuckyRecord_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCLuckyRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCLuckyRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_.Clear();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCLuckyRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .F4BY.LuckyRecord record = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCLuckyRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCLuckyRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // repeated .F4BY.LuckyRecord record = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_record_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_record(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCLuckyRecord)
  return target;
}

size_t SCLuckyRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCLuckyRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.LuckyRecord record = 2;
  total_size += 1UL * this->_internal_record_size();
  for (const auto& msg : this->record_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCLuckyRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCLuckyRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const SCLuckyRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCLuckyRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCLuckyRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCLuckyRecord)
    MergeFrom(*source);
  }
}

void SCLuckyRecord::MergeFrom(const SCLuckyRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCLuckyRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  record_.MergeFrom(from.record_);
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void SCLuckyRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCLuckyRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCLuckyRecord::CopyFrom(const SCLuckyRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCLuckyRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCLuckyRecord::IsInitialized() const {
  return true;
}

void SCLuckyRecord::InternalSwap(SCLuckyRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  record_.InternalSwap(&other->record_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCLuckyRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCOwnRecord::_Internal {
 public:
};

SCOwnRecord::SCOwnRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  record_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCOwnRecord)
}
SCOwnRecord::SCOwnRecord(const SCOwnRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      record_(from.record_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:F4BY.SCOwnRecord)
}

void SCOwnRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCOwnRecord_F4BY_2eproto.base);
}

SCOwnRecord::~SCOwnRecord() {
  // @@protoc_insertion_point(destructor:F4BY.SCOwnRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCOwnRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCOwnRecord::ArenaDtor(void* object) {
  SCOwnRecord* _this = reinterpret_cast< SCOwnRecord* >(object);
  (void)_this;
}
void SCOwnRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCOwnRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCOwnRecord& SCOwnRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCOwnRecord_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCOwnRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCOwnRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCOwnRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .F4BY.OwnRecord record = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCOwnRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCOwnRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .F4BY.OwnRecord record = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_record_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_record(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCOwnRecord)
  return target;
}

size_t SCOwnRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCOwnRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.OwnRecord record = 1;
  total_size += 1UL * this->_internal_record_size();
  for (const auto& msg : this->record_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCOwnRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCOwnRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const SCOwnRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCOwnRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCOwnRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCOwnRecord)
    MergeFrom(*source);
  }
}

void SCOwnRecord::MergeFrom(const SCOwnRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCOwnRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  record_.MergeFrom(from.record_);
}

void SCOwnRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCOwnRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCOwnRecord::CopyFrom(const SCOwnRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCOwnRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCOwnRecord::IsInitialized() const {
  return true;
}

void SCOwnRecord::InternalSwap(SCOwnRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  record_.InternalSwap(&other->record_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCOwnRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSBombInfo::_Internal {
 public:
};

CSBombInfo::CSBombInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSBombInfo)
}
CSBombInfo::CSBombInfo(const CSBombInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&chair_idx_) -
    reinterpret_cast<char*>(&x_)) + sizeof(chair_idx_));
  // @@protoc_insertion_point(copy_constructor:F4BY.CSBombInfo)
}

void CSBombInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chair_idx_) -
      reinterpret_cast<char*>(&x_)) + sizeof(chair_idx_));
}

CSBombInfo::~CSBombInfo() {
  // @@protoc_insertion_point(destructor:F4BY.CSBombInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSBombInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSBombInfo::ArenaDtor(void* object) {
  CSBombInfo* _this = reinterpret_cast< CSBombInfo* >(object);
  (void)_this;
}
void CSBombInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSBombInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSBombInfo& CSBombInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSBombInfo_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSBombInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSBombInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) -
      reinterpret_cast<char*>(&x_)) + sizeof(chair_idx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSBombInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 chair_idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSBombInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSBombInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // int32 chair_idx = 3;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_chair_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSBombInfo)
  return target;
}

size_t CSBombInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSBombInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 chair_idx = 3;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSBombInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSBombInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSBombInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSBombInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSBombInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSBombInfo)
    MergeFrom(*source);
  }
}

void CSBombInfo::MergeFrom(const CSBombInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSBombInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
}

void CSBombInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSBombInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBombInfo::CopyFrom(const CSBombInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSBombInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBombInfo::IsInitialized() const {
  return true;
}

void CSBombInfo::InternalSwap(CSBombInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSBombInfo, chair_idx_)
      + sizeof(CSBombInfo::chair_idx_)
      - PROTOBUF_FIELD_OFFSET(CSBombInfo, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSBombInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSyncBomb::_Internal {
 public:
};

SCSyncBomb::SCSyncBomb(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCSyncBomb)
}
SCSyncBomb::SCSyncBomb(const SCSyncBomb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&isfinish_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(isfinish_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCSyncBomb)
}

void SCSyncBomb::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&isfinish_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(isfinish_));
}

SCSyncBomb::~SCSyncBomb() {
  // @@protoc_insertion_point(destructor:F4BY.SCSyncBomb)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSyncBomb::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCSyncBomb::ArenaDtor(void* object) {
  SCSyncBomb* _this = reinterpret_cast< SCSyncBomb* >(object);
  (void)_this;
}
void SCSyncBomb::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSyncBomb::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSyncBomb& SCSyncBomb::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSyncBomb_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCSyncBomb::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCSyncBomb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isfinish_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(isfinish_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSyncBomb::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bombId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bombid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 curStatus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          curstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float nextX = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          nextx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float nextY = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          nexty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 score = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isFinish = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          isfinish_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSyncBomb::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCSyncBomb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 bombId = 2;
  if (this->bombid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bombid(), target);
  }

  // int32 curStatus = 3;
  if (this->curstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_curstatus(), target);
  }

  // float x = 4;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_x(), target);
  }

  // float y = 5;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_y(), target);
  }

  // float nextX = 6;
  if (!(this->nextx() <= 0 && this->nextx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_nextx(), target);
  }

  // float nextY = 7;
  if (!(this->nexty() <= 0 && this->nexty() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_nexty(), target);
  }

  // int32 score = 8;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_score(), target);
  }

  // bool isFinish = 9;
  if (this->isfinish() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_isfinish(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCSyncBomb)
  return target;
}

size_t SCSyncBomb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCSyncBomb)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 bombId = 2;
  if (this->bombid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bombid());
  }

  // int32 curStatus = 3;
  if (this->curstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curstatus());
  }

  // float x = 4;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 5;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float nextX = 6;
  if (!(this->nextx() <= 0 && this->nextx() >= 0)) {
    total_size += 1 + 4;
  }

  // float nextY = 7;
  if (!(this->nexty() <= 0 && this->nexty() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 score = 8;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  // bool isFinish = 9;
  if (this->isfinish() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSyncBomb::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCSyncBomb)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSyncBomb* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSyncBomb>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCSyncBomb)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCSyncBomb)
    MergeFrom(*source);
  }
}

void SCSyncBomb::MergeFrom(const SCSyncBomb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCSyncBomb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.bombid() != 0) {
    _internal_set_bombid(from._internal_bombid());
  }
  if (from.curstatus() != 0) {
    _internal_set_curstatus(from._internal_curstatus());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.nextx() <= 0 && from.nextx() >= 0)) {
    _internal_set_nextx(from._internal_nextx());
  }
  if (!(from.nexty() <= 0 && from.nexty() >= 0)) {
    _internal_set_nexty(from._internal_nexty());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.isfinish() != 0) {
    _internal_set_isfinish(from._internal_isfinish());
  }
}

void SCSyncBomb::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCSyncBomb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSyncBomb::CopyFrom(const SCSyncBomb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCSyncBomb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSyncBomb::IsInitialized() const {
  return true;
}

void SCSyncBomb::InternalSwap(SCSyncBomb* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCSyncBomb, isfinish_)
      + sizeof(SCSyncBomb::isfinish_)
      - PROTOBUF_FIELD_OFFSET(SCSyncBomb, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSyncBomb::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSyncBombFinish::_Internal {
 public:
};

SCSyncBombFinish::SCSyncBombFinish(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCSyncBombFinish)
}
SCSyncBombFinish::SCSyncBombFinish(const SCSyncBombFinish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&returnmoney_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(returnmoney_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCSyncBombFinish)
}

void SCSyncBombFinish::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&returnmoney_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(returnmoney_));
}

SCSyncBombFinish::~SCSyncBombFinish() {
  // @@protoc_insertion_point(destructor:F4BY.SCSyncBombFinish)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSyncBombFinish::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCSyncBombFinish::ArenaDtor(void* object) {
  SCSyncBombFinish* _this = reinterpret_cast< SCSyncBombFinish* >(object);
  (void)_this;
}
void SCSyncBombFinish::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSyncBombFinish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSyncBombFinish& SCSyncBombFinish::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSyncBombFinish_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCSyncBombFinish::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCSyncBombFinish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&returnmoney_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(returnmoney_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSyncBombFinish::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bombId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bombid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 returnMoney = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          returnmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSyncBombFinish::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCSyncBombFinish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 bombId = 2;
  if (this->bombid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bombid(), target);
  }

  // int32 returnMoney = 3;
  if (this->returnmoney() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_returnmoney(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCSyncBombFinish)
  return target;
}

size_t SCSyncBombFinish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCSyncBombFinish)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 bombId = 2;
  if (this->bombid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bombid());
  }

  // int32 returnMoney = 3;
  if (this->returnmoney() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_returnmoney());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSyncBombFinish::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCSyncBombFinish)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSyncBombFinish* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSyncBombFinish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCSyncBombFinish)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCSyncBombFinish)
    MergeFrom(*source);
  }
}

void SCSyncBombFinish::MergeFrom(const SCSyncBombFinish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCSyncBombFinish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.bombid() != 0) {
    _internal_set_bombid(from._internal_bombid());
  }
  if (from.returnmoney() != 0) {
    _internal_set_returnmoney(from._internal_returnmoney());
  }
}

void SCSyncBombFinish::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCSyncBombFinish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSyncBombFinish::CopyFrom(const SCSyncBombFinish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCSyncBombFinish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSyncBombFinish::IsInitialized() const {
  return true;
}

void SCSyncBombFinish::InternalSwap(SCSyncBombFinish* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCSyncBombFinish, returnmoney_)
      + sizeof(SCSyncBombFinish::returnmoney_)
      - PROTOBUF_FIELD_OFFSET(SCSyncBombFinish, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSyncBombFinish::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSBombHitFishInfo::_Internal {
 public:
};

CSBombHitFishInfo::CSBombHitFishInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fishid_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSBombHitFishInfo)
}
CSBombHitFishInfo::CSBombHitFishInfo(const CSBombHitFishInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fishid_(from.fishid_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bombid_, &from.bombid_,
    static_cast<size_t>(reinterpret_cast<char*>(&chair_idx_) -
    reinterpret_cast<char*>(&bombid_)) + sizeof(chair_idx_));
  // @@protoc_insertion_point(copy_constructor:F4BY.CSBombHitFishInfo)
}

void CSBombHitFishInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bombid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chair_idx_) -
      reinterpret_cast<char*>(&bombid_)) + sizeof(chair_idx_));
}

CSBombHitFishInfo::~CSBombHitFishInfo() {
  // @@protoc_insertion_point(destructor:F4BY.CSBombHitFishInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSBombHitFishInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSBombHitFishInfo::ArenaDtor(void* object) {
  CSBombHitFishInfo* _this = reinterpret_cast< CSBombHitFishInfo* >(object);
  (void)_this;
}
void CSBombHitFishInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSBombHitFishInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSBombHitFishInfo& CSBombHitFishInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSBombHitFishInfo_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSBombHitFishInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSBombHitFishInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fishid_.Clear();
  ::memset(&bombid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) -
      reinterpret_cast<char*>(&bombid_)) + sizeof(chair_idx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSBombHitFishInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 bombId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bombid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 fishId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_fishid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_fishid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chair_idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSBombHitFishInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSBombHitFishInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bombId = 1;
  if (this->bombid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bombid(), target);
  }

  // repeated int32 fishId = 2;
  {
    int byte_size = _fishid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_fishid(), byte_size, target);
    }
  }

  // int32 chair_idx = 3;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_chair_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSBombHitFishInfo)
  return target;
}

size_t CSBombHitFishInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSBombHitFishInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 fishId = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->fishid_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _fishid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 bombId = 1;
  if (this->bombid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bombid());
  }

  // int32 chair_idx = 3;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSBombHitFishInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSBombHitFishInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSBombHitFishInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSBombHitFishInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSBombHitFishInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSBombHitFishInfo)
    MergeFrom(*source);
  }
}

void CSBombHitFishInfo::MergeFrom(const CSBombHitFishInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSBombHitFishInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fishid_.MergeFrom(from.fishid_);
  if (from.bombid() != 0) {
    _internal_set_bombid(from._internal_bombid());
  }
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
}

void CSBombHitFishInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSBombHitFishInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBombHitFishInfo::CopyFrom(const CSBombHitFishInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSBombHitFishInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBombHitFishInfo::IsInitialized() const {
  return true;
}

void CSBombHitFishInfo::InternalSwap(CSBombHitFishInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fishid_.InternalSwap(&other->fishid_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSBombHitFishInfo, chair_idx_)
      + sizeof(CSBombHitFishInfo::chair_idx_)
      - PROTOBUF_FIELD_OFFSET(CSBombHitFishInfo, bombid_)>(
          reinterpret_cast<char*>(&bombid_),
          reinterpret_cast<char*>(&other->bombid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSBombHitFishInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCGetMagicCube::_Internal {
 public:
};

SCGetMagicCube::SCGetMagicCube(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCGetMagicCube)
}
SCGetMagicCube::SCGetMagicCube(const SCGetMagicCube& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&magic_cube_multi_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(magic_cube_multi_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCGetMagicCube)
}

void SCGetMagicCube::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&magic_cube_multi_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(magic_cube_multi_));
}

SCGetMagicCube::~SCGetMagicCube() {
  // @@protoc_insertion_point(destructor:F4BY.SCGetMagicCube)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCGetMagicCube::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCGetMagicCube::ArenaDtor(void* object) {
  SCGetMagicCube* _this = reinterpret_cast< SCGetMagicCube* >(object);
  (void)_this;
}
void SCGetMagicCube::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCGetMagicCube::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCGetMagicCube& SCGetMagicCube::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCGetMagicCube_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCGetMagicCube::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCGetMagicCube)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&magic_cube_multi_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(magic_cube_multi_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCGetMagicCube::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bulletType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bullettype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool createWeapon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          createweapon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isSyncInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          issyncinfo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isFinish = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          isfinish_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gunRatio = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          gunratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 magic_cube_multi = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          magic_cube_multi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCGetMagicCube::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCGetMagicCube)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 bulletType = 2;
  if (this->bullettype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bullettype(), target);
  }

  // bool createWeapon = 3;
  if (this->createweapon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_createweapon(), target);
  }

  // bool isSyncInfo = 4;
  if (this->issyncinfo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_issyncinfo(), target);
  }

  // bool isFinish = 5;
  if (this->isfinish() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_isfinish(), target);
  }

  // int32 gunRatio = 6;
  if (this->gunratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_gunratio(), target);
  }

  // int32 magic_cube_multi = 7;
  if (this->magic_cube_multi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_magic_cube_multi(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCGetMagicCube)
  return target;
}

size_t SCGetMagicCube::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCGetMagicCube)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 bulletType = 2;
  if (this->bullettype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bullettype());
  }

  // bool createWeapon = 3;
  if (this->createweapon() != 0) {
    total_size += 1 + 1;
  }

  // bool isSyncInfo = 4;
  if (this->issyncinfo() != 0) {
    total_size += 1 + 1;
  }

  // bool isFinish = 5;
  if (this->isfinish() != 0) {
    total_size += 1 + 1;
  }

  // int32 gunRatio = 6;
  if (this->gunratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gunratio());
  }

  // int32 magic_cube_multi = 7;
  if (this->magic_cube_multi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_magic_cube_multi());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCGetMagicCube::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCGetMagicCube)
  GOOGLE_DCHECK_NE(&from, this);
  const SCGetMagicCube* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCGetMagicCube>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCGetMagicCube)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCGetMagicCube)
    MergeFrom(*source);
  }
}

void SCGetMagicCube::MergeFrom(const SCGetMagicCube& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCGetMagicCube)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.bullettype() != 0) {
    _internal_set_bullettype(from._internal_bullettype());
  }
  if (from.createweapon() != 0) {
    _internal_set_createweapon(from._internal_createweapon());
  }
  if (from.issyncinfo() != 0) {
    _internal_set_issyncinfo(from._internal_issyncinfo());
  }
  if (from.isfinish() != 0) {
    _internal_set_isfinish(from._internal_isfinish());
  }
  if (from.gunratio() != 0) {
    _internal_set_gunratio(from._internal_gunratio());
  }
  if (from.magic_cube_multi() != 0) {
    _internal_set_magic_cube_multi(from._internal_magic_cube_multi());
  }
}

void SCGetMagicCube::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCGetMagicCube)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGetMagicCube::CopyFrom(const SCGetMagicCube& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCGetMagicCube)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGetMagicCube::IsInitialized() const {
  return true;
}

void SCGetMagicCube::InternalSwap(SCGetMagicCube* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCGetMagicCube, magic_cube_multi_)
      + sizeof(SCGetMagicCube::magic_cube_multi_)
      - PROTOBUF_FIELD_OFFSET(SCGetMagicCube, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCGetMagicCube::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCMagicCubeBulletInfo::_Internal {
 public:
};

SCMagicCubeBulletInfo::SCMagicCubeBulletInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCMagicCubeBulletInfo)
}
SCMagicCubeBulletInfo::SCMagicCubeBulletInfo(const SCMagicCubeBulletInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&curnum_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(curnum_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCMagicCubeBulletInfo)
}

void SCMagicCubeBulletInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&curnum_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(curnum_));
}

SCMagicCubeBulletInfo::~SCMagicCubeBulletInfo() {
  // @@protoc_insertion_point(destructor:F4BY.SCMagicCubeBulletInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCMagicCubeBulletInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCMagicCubeBulletInfo::ArenaDtor(void* object) {
  SCMagicCubeBulletInfo* _this = reinterpret_cast< SCMagicCubeBulletInfo* >(object);
  (void)_this;
}
void SCMagicCubeBulletInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCMagicCubeBulletInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCMagicCubeBulletInfo& SCMagicCubeBulletInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCMagicCubeBulletInfo_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCMagicCubeBulletInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCMagicCubeBulletInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curnum_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(curnum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCMagicCubeBulletInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 totalNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          totalnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 curNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          curnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCMagicCubeBulletInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCMagicCubeBulletInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 totalNum = 2;
  if (this->totalnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_totalnum(), target);
  }

  // int32 curNum = 3;
  if (this->curnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_curnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCMagicCubeBulletInfo)
  return target;
}

size_t SCMagicCubeBulletInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCMagicCubeBulletInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 totalNum = 2;
  if (this->totalnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_totalnum());
  }

  // int32 curNum = 3;
  if (this->curnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curnum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCMagicCubeBulletInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCMagicCubeBulletInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCMagicCubeBulletInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCMagicCubeBulletInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCMagicCubeBulletInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCMagicCubeBulletInfo)
    MergeFrom(*source);
  }
}

void SCMagicCubeBulletInfo::MergeFrom(const SCMagicCubeBulletInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCMagicCubeBulletInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.totalnum() != 0) {
    _internal_set_totalnum(from._internal_totalnum());
  }
  if (from.curnum() != 0) {
    _internal_set_curnum(from._internal_curnum());
  }
}

void SCMagicCubeBulletInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCMagicCubeBulletInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCMagicCubeBulletInfo::CopyFrom(const SCMagicCubeBulletInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCMagicCubeBulletInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMagicCubeBulletInfo::IsInitialized() const {
  return true;
}

void SCMagicCubeBulletInfo::InternalSwap(SCMagicCubeBulletInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCMagicCubeBulletInfo, curnum_)
      + sizeof(SCMagicCubeBulletInfo::curnum_)
      - PROTOBUF_FIELD_OFFSET(SCMagicCubeBulletInfo, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCMagicCubeBulletInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSPreHit::_Internal {
 public:
};

CSPreHit::CSPreHit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  screen_fish_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSPreHit)
}
CSPreHit::CSPreHit(const CSPreHit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      screen_fish_(from.screen_fish_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:F4BY.CSPreHit)
}

void CSPreHit::SharedCtor() {
}

CSPreHit::~CSPreHit() {
  // @@protoc_insertion_point(destructor:F4BY.CSPreHit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSPreHit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSPreHit::ArenaDtor(void* object) {
  CSPreHit* _this = reinterpret_cast< CSPreHit* >(object);
  (void)_this;
}
void CSPreHit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSPreHit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSPreHit& CSPreHit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSPreHit_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSPreHit::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSPreHit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  screen_fish_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSPreHit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 screen_fish = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_screen_fish(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_screen_fish(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSPreHit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSPreHit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 screen_fish = 1;
  {
    int byte_size = _screen_fish_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_screen_fish(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSPreHit)
  return target;
}

size_t CSPreHit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSPreHit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 screen_fish = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->screen_fish_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _screen_fish_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSPreHit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSPreHit)
  GOOGLE_DCHECK_NE(&from, this);
  const CSPreHit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSPreHit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSPreHit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSPreHit)
    MergeFrom(*source);
  }
}

void CSPreHit::MergeFrom(const CSPreHit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSPreHit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  screen_fish_.MergeFrom(from.screen_fish_);
}

void CSPreHit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSPreHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPreHit::CopyFrom(const CSPreHit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSPreHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPreHit::IsInitialized() const {
  return true;
}

void CSPreHit::InternalSwap(CSPreHit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  screen_fish_.InternalSwap(&other->screen_fish_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSPreHit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPreHit::_Internal {
 public:
};

SCPreHit::SCPreHit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCPreHit)
}
SCPreHit::SCPreHit(const SCPreHit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&err_, &from.err_,
    static_cast<size_t>(reinterpret_cast<char*>(&chair_id_) -
    reinterpret_cast<char*>(&err_)) + sizeof(chair_id_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCPreHit)
}

void SCPreHit::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&err_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&err_)) + sizeof(chair_id_));
}

SCPreHit::~SCPreHit() {
  // @@protoc_insertion_point(destructor:F4BY.SCPreHit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPreHit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCPreHit::ArenaDtor(void* object) {
  SCPreHit* _this = reinterpret_cast< SCPreHit* >(object);
  (void)_this;
}
void SCPreHit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPreHit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPreHit& SCPreHit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPreHit_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCPreHit::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCPreHit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&err_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&err_)) + sizeof(chair_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPreHit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 err = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          err_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fish_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chair_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPreHit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCPreHit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 err = 1;
  if (this->err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_err(), target);
  }

  // int32 fish_uid = 2;
  if (this->fish_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fish_uid(), target);
  }

  // int32 chair_id = 3;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_chair_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCPreHit)
  return target;
}

size_t SCPreHit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCPreHit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 err = 1;
  if (this->err() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_err());
  }

  // int32 fish_uid = 2;
  if (this->fish_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_uid());
  }

  // int32 chair_id = 3;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPreHit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCPreHit)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPreHit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPreHit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCPreHit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCPreHit)
    MergeFrom(*source);
  }
}

void SCPreHit::MergeFrom(const SCPreHit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCPreHit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.err() != 0) {
    _internal_set_err(from._internal_err());
  }
  if (from.fish_uid() != 0) {
    _internal_set_fish_uid(from._internal_fish_uid());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
}

void SCPreHit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCPreHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPreHit::CopyFrom(const SCPreHit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCPreHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPreHit::IsInitialized() const {
  return true;
}

void SCPreHit::InternalSwap(SCPreHit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCPreHit, chair_id_)
      + sizeof(SCPreHit::chair_id_)
      - PROTOBUF_FIELD_OFFSET(SCPreHit, err_)>(
          reinterpret_cast<char*>(&err_),
          reinterpret_cast<char*>(&other->err_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPreHit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSPreShoot::_Internal {
 public:
};

CSPreShoot::CSPreShoot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSPreShoot)
}
CSPreShoot::CSPreShoot(const CSPreShoot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&shoot_type_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(shoot_type_));
  // @@protoc_insertion_point(copy_constructor:F4BY.CSPreShoot)
}

void CSPreShoot::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&shoot_type_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(shoot_type_));
}

CSPreShoot::~CSPreShoot() {
  // @@protoc_insertion_point(destructor:F4BY.CSPreShoot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSPreShoot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSPreShoot::ArenaDtor(void* object) {
  CSPreShoot* _this = reinterpret_cast< CSPreShoot* >(object);
  (void)_this;
}
void CSPreShoot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSPreShoot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSPreShoot& CSPreShoot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSPreShoot_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSPreShoot::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSPreShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shoot_type_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(shoot_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSPreShoot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 shoot_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          shoot_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSPreShoot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSPreShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 angle = 2;
  if (this->angle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_angle(), target);
  }

  // int32 shoot_type = 3;
  if (this->shoot_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_shoot_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSPreShoot)
  return target;
}

size_t CSPreShoot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSPreShoot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 angle = 2;
  if (this->angle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_angle());
  }

  // int32 shoot_type = 3;
  if (this->shoot_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_shoot_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSPreShoot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSPreShoot)
  GOOGLE_DCHECK_NE(&from, this);
  const CSPreShoot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSPreShoot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSPreShoot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSPreShoot)
    MergeFrom(*source);
  }
}

void CSPreShoot::MergeFrom(const CSPreShoot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSPreShoot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.angle() != 0) {
    _internal_set_angle(from._internal_angle());
  }
  if (from.shoot_type() != 0) {
    _internal_set_shoot_type(from._internal_shoot_type());
  }
}

void CSPreShoot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSPreShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPreShoot::CopyFrom(const CSPreShoot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSPreShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPreShoot::IsInitialized() const {
  return true;
}

void CSPreShoot::InternalSwap(CSPreShoot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSPreShoot, shoot_type_)
      + sizeof(CSPreShoot::shoot_type_)
      - PROTOBUF_FIELD_OFFSET(CSPreShoot, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSPreShoot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPreShoot::_Internal {
 public:
};

SCPreShoot::SCPreShoot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCPreShoot)
}
SCPreShoot::SCPreShoot(const SCPreShoot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&shoot_type_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(shoot_type_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCPreShoot)
}

void SCPreShoot::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&shoot_type_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(shoot_type_));
}

SCPreShoot::~SCPreShoot() {
  // @@protoc_insertion_point(destructor:F4BY.SCPreShoot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPreShoot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCPreShoot::ArenaDtor(void* object) {
  SCPreShoot* _this = reinterpret_cast< SCPreShoot* >(object);
  (void)_this;
}
void SCPreShoot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPreShoot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPreShoot& SCPreShoot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPreShoot_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCPreShoot::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCPreShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shoot_type_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(shoot_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPreShoot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 shoot_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          shoot_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPreShoot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCPreShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 angle = 2;
  if (this->angle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_angle(), target);
  }

  // int32 shoot_type = 3;
  if (this->shoot_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_shoot_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCPreShoot)
  return target;
}

size_t SCPreShoot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCPreShoot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 angle = 2;
  if (this->angle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_angle());
  }

  // int32 shoot_type = 3;
  if (this->shoot_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_shoot_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPreShoot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCPreShoot)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPreShoot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPreShoot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCPreShoot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCPreShoot)
    MergeFrom(*source);
  }
}

void SCPreShoot::MergeFrom(const SCPreShoot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCPreShoot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.angle() != 0) {
    _internal_set_angle(from._internal_angle());
  }
  if (from.shoot_type() != 0) {
    _internal_set_shoot_type(from._internal_shoot_type());
  }
}

void SCPreShoot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCPreShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPreShoot::CopyFrom(const SCPreShoot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCPreShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPreShoot::IsInitialized() const {
  return true;
}

void SCPreShoot::InternalSwap(SCPreShoot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCPreShoot, shoot_type_)
      + sizeof(SCPreShoot::shoot_type_)
      - PROTOBUF_FIELD_OFFSET(SCPreShoot, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPreShoot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FrozenFish::_Internal {
 public:
};

FrozenFish::FrozenFish(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.FrozenFish)
}
FrozenFish::FrozenFish(const FrozenFish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fish_id_, &from.fish_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&frozen_time_) -
    reinterpret_cast<char*>(&fish_id_)) + sizeof(frozen_time_));
  // @@protoc_insertion_point(copy_constructor:F4BY.FrozenFish)
}

void FrozenFish::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fish_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&frozen_time_) -
      reinterpret_cast<char*>(&fish_id_)) + sizeof(frozen_time_));
}

FrozenFish::~FrozenFish() {
  // @@protoc_insertion_point(destructor:F4BY.FrozenFish)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FrozenFish::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FrozenFish::ArenaDtor(void* object) {
  FrozenFish* _this = reinterpret_cast< FrozenFish* >(object);
  (void)_this;
}
void FrozenFish::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrozenFish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrozenFish& FrozenFish::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrozenFish_F4BY_2eproto.base);
  return *internal_default_instance();
}


void FrozenFish::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.FrozenFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fish_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frozen_time_) -
      reinterpret_cast<char*>(&fish_id_)) + sizeof(frozen_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrozenFish::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 fish_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fish_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 frozen_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          frozen_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrozenFish::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.FrozenFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fish_id = 1;
  if (this->fish_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_fish_id(), target);
  }

  // int32 frozen_time = 2;
  if (this->frozen_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_frozen_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.FrozenFish)
  return target;
}

size_t FrozenFish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.FrozenFish)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 fish_id = 1;
  if (this->fish_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_id());
  }

  // int32 frozen_time = 2;
  if (this->frozen_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frozen_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrozenFish::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.FrozenFish)
  GOOGLE_DCHECK_NE(&from, this);
  const FrozenFish* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrozenFish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.FrozenFish)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.FrozenFish)
    MergeFrom(*source);
  }
}

void FrozenFish::MergeFrom(const FrozenFish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.FrozenFish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fish_id() != 0) {
    _internal_set_fish_id(from._internal_fish_id());
  }
  if (from.frozen_time() != 0) {
    _internal_set_frozen_time(from._internal_frozen_time());
  }
}

void FrozenFish::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.FrozenFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrozenFish::CopyFrom(const FrozenFish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.FrozenFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrozenFish::IsInitialized() const {
  return true;
}

void FrozenFish::InternalSwap(FrozenFish* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrozenFish, frozen_time_)
      + sizeof(FrozenFish::frozen_time_)
      - PROTOBUF_FIELD_OFFSET(FrozenFish, fish_id_)>(
          reinterpret_cast<char*>(&fish_id_),
          reinterpret_cast<char*>(&other->fish_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrozenFish::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCFrozenFish::_Internal {
 public:
};

SCFrozenFish::SCFrozenFish(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  frozenfish_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCFrozenFish)
}
SCFrozenFish::SCFrozenFish(const SCFrozenFish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      frozenfish_(from.frozenfish_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:F4BY.SCFrozenFish)
}

void SCFrozenFish::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCFrozenFish_F4BY_2eproto.base);
}

SCFrozenFish::~SCFrozenFish() {
  // @@protoc_insertion_point(destructor:F4BY.SCFrozenFish)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCFrozenFish::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCFrozenFish::ArenaDtor(void* object) {
  SCFrozenFish* _this = reinterpret_cast< SCFrozenFish* >(object);
  (void)_this;
}
void SCFrozenFish::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCFrozenFish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCFrozenFish& SCFrozenFish::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCFrozenFish_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCFrozenFish::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCFrozenFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frozenfish_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCFrozenFish::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .F4BY.FrozenFish frozenFish = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frozenfish(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCFrozenFish::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCFrozenFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .F4BY.FrozenFish frozenFish = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_frozenfish_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_frozenfish(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCFrozenFish)
  return target;
}

size_t SCFrozenFish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCFrozenFish)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.FrozenFish frozenFish = 1;
  total_size += 1UL * this->_internal_frozenfish_size();
  for (const auto& msg : this->frozenfish_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCFrozenFish::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCFrozenFish)
  GOOGLE_DCHECK_NE(&from, this);
  const SCFrozenFish* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCFrozenFish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCFrozenFish)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCFrozenFish)
    MergeFrom(*source);
  }
}

void SCFrozenFish::MergeFrom(const SCFrozenFish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCFrozenFish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frozenfish_.MergeFrom(from.frozenfish_);
}

void SCFrozenFish::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCFrozenFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCFrozenFish::CopyFrom(const SCFrozenFish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCFrozenFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCFrozenFish::IsInitialized() const {
  return true;
}

void SCFrozenFish::InternalSwap(SCFrozenFish* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  frozenfish_.InternalSwap(&other->frozenfish_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCFrozenFish::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCValentineDayFish::_Internal {
 public:
  static const ::F4BY::SCHitFish& fish_info(const SCValentineDayFish* msg);
};

const ::F4BY::SCHitFish&
SCValentineDayFish::_Internal::fish_info(const SCValentineDayFish* msg) {
  return *msg->fish_info_;
}
SCValentineDayFish::SCValentineDayFish(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  uid_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCValentineDayFish)
}
SCValentineDayFish::SCValentineDayFish(const SCValentineDayFish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      uid_list_(from.uid_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fish_info()) {
    fish_info_ = new ::F4BY::SCHitFish(*from.fish_info_);
  } else {
    fish_info_ = nullptr;
  }
  ::memcpy(&bt_ratio_, &from.bt_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&ball_multi_) -
    reinterpret_cast<char*>(&bt_ratio_)) + sizeof(ball_multi_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCValentineDayFish)
}

void SCValentineDayFish::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCValentineDayFish_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fish_info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ball_multi_) -
      reinterpret_cast<char*>(&fish_info_)) + sizeof(ball_multi_));
}

SCValentineDayFish::~SCValentineDayFish() {
  // @@protoc_insertion_point(destructor:F4BY.SCValentineDayFish)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCValentineDayFish::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete fish_info_;
}

void SCValentineDayFish::ArenaDtor(void* object) {
  SCValentineDayFish* _this = reinterpret_cast< SCValentineDayFish* >(object);
  (void)_this;
}
void SCValentineDayFish::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCValentineDayFish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCValentineDayFish& SCValentineDayFish::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCValentineDayFish_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCValentineDayFish::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCValentineDayFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_list_.Clear();
  if (GetArena() == nullptr && fish_info_ != nullptr) {
    delete fish_info_;
  }
  fish_info_ = nullptr;
  ::memset(&bt_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ball_multi_) -
      reinterpret_cast<char*>(&bt_ratio_)) + sizeof(ball_multi_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCValentineDayFish::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .F4BY.SCHitFish fish_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fish_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bt_ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bt_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rand_multi = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rand_multi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ball_multi = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ball_multi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 uid_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_uid_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_uid_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCValentineDayFish::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCValentineDayFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .F4BY.SCHitFish fish_info = 1;
  if (this->has_fish_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::fish_info(this), target, stream);
  }

  // int32 bt_ratio = 2;
  if (this->bt_ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bt_ratio(), target);
  }

  // int32 rand_multi = 3;
  if (this->rand_multi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_rand_multi(), target);
  }

  // int32 ball_multi = 4;
  if (this->ball_multi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ball_multi(), target);
  }

  // repeated int32 uid_list = 5;
  {
    int byte_size = _uid_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_uid_list(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCValentineDayFish)
  return target;
}

size_t SCValentineDayFish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCValentineDayFish)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 uid_list = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->uid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _uid_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .F4BY.SCHitFish fish_info = 1;
  if (this->has_fish_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fish_info_);
  }

  // int32 bt_ratio = 2;
  if (this->bt_ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bt_ratio());
  }

  // int32 rand_multi = 3;
  if (this->rand_multi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rand_multi());
  }

  // int32 ball_multi = 4;
  if (this->ball_multi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ball_multi());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCValentineDayFish::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCValentineDayFish)
  GOOGLE_DCHECK_NE(&from, this);
  const SCValentineDayFish* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCValentineDayFish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCValentineDayFish)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCValentineDayFish)
    MergeFrom(*source);
  }
}

void SCValentineDayFish::MergeFrom(const SCValentineDayFish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCValentineDayFish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uid_list_.MergeFrom(from.uid_list_);
  if (from.has_fish_info()) {
    _internal_mutable_fish_info()->::F4BY::SCHitFish::MergeFrom(from._internal_fish_info());
  }
  if (from.bt_ratio() != 0) {
    _internal_set_bt_ratio(from._internal_bt_ratio());
  }
  if (from.rand_multi() != 0) {
    _internal_set_rand_multi(from._internal_rand_multi());
  }
  if (from.ball_multi() != 0) {
    _internal_set_ball_multi(from._internal_ball_multi());
  }
}

void SCValentineDayFish::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCValentineDayFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCValentineDayFish::CopyFrom(const SCValentineDayFish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCValentineDayFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCValentineDayFish::IsInitialized() const {
  return true;
}

void SCValentineDayFish::InternalSwap(SCValentineDayFish* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  uid_list_.InternalSwap(&other->uid_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCValentineDayFish, ball_multi_)
      + sizeof(SCValentineDayFish::ball_multi_)
      - PROTOBUF_FIELD_OFFSET(SCValentineDayFish, fish_info_)>(
          reinterpret_cast<char*>(&fish_info_),
          reinterpret_cast<char*>(&other->fish_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCValentineDayFish::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCKiRinFish::_Internal {
 public:
  static const ::F4BY::SCHitFish& fish_info(const SCKiRinFish* msg);
};

const ::F4BY::SCHitFish&
SCKiRinFish::_Internal::fish_info(const SCKiRinFish* msg) {
  return *msg->fish_info_;
}
SCKiRinFish::SCKiRinFish(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCKiRinFish)
}
SCKiRinFish::SCKiRinFish(const SCKiRinFish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fish_info()) {
    fish_info_ = new ::F4BY::SCHitFish(*from.fish_info_);
  } else {
    fish_info_ = nullptr;
  }
  ::memcpy(&bt_ratio_, &from.bt_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&bt_ratio_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCKiRinFish)
}

void SCKiRinFish::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCKiRinFish_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fish_info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&fish_info_)) + sizeof(level_));
}

SCKiRinFish::~SCKiRinFish() {
  // @@protoc_insertion_point(destructor:F4BY.SCKiRinFish)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCKiRinFish::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete fish_info_;
}

void SCKiRinFish::ArenaDtor(void* object) {
  SCKiRinFish* _this = reinterpret_cast< SCKiRinFish* >(object);
  (void)_this;
}
void SCKiRinFish::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCKiRinFish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCKiRinFish& SCKiRinFish::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCKiRinFish_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCKiRinFish::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCKiRinFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && fish_info_ != nullptr) {
    delete fish_info_;
  }
  fish_info_ = nullptr;
  ::memset(&bt_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&bt_ratio_)) + sizeof(level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCKiRinFish::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .F4BY.SCHitFish fish_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fish_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bt_ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bt_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 multi = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          multi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_senior = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_senior_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCKiRinFish::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCKiRinFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .F4BY.SCHitFish fish_info = 1;
  if (this->has_fish_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::fish_info(this), target, stream);
  }

  // int32 bt_ratio = 2;
  if (this->bt_ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bt_ratio(), target);
  }

  // int32 multi = 3;
  if (this->multi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_multi(), target);
  }

  // bool is_senior = 4;
  if (this->is_senior() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_senior(), target);
  }

  // int32 level = 5;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCKiRinFish)
  return target;
}

size_t SCKiRinFish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCKiRinFish)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .F4BY.SCHitFish fish_info = 1;
  if (this->has_fish_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fish_info_);
  }

  // int32 bt_ratio = 2;
  if (this->bt_ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bt_ratio());
  }

  // int32 multi = 3;
  if (this->multi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_multi());
  }

  // bool is_senior = 4;
  if (this->is_senior() != 0) {
    total_size += 1 + 1;
  }

  // int32 level = 5;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCKiRinFish::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCKiRinFish)
  GOOGLE_DCHECK_NE(&from, this);
  const SCKiRinFish* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCKiRinFish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCKiRinFish)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCKiRinFish)
    MergeFrom(*source);
  }
}

void SCKiRinFish::MergeFrom(const SCKiRinFish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCKiRinFish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fish_info()) {
    _internal_mutable_fish_info()->::F4BY::SCHitFish::MergeFrom(from._internal_fish_info());
  }
  if (from.bt_ratio() != 0) {
    _internal_set_bt_ratio(from._internal_bt_ratio());
  }
  if (from.multi() != 0) {
    _internal_set_multi(from._internal_multi());
  }
  if (from.is_senior() != 0) {
    _internal_set_is_senior(from._internal_is_senior());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void SCKiRinFish::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCKiRinFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCKiRinFish::CopyFrom(const SCKiRinFish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCKiRinFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCKiRinFish::IsInitialized() const {
  return true;
}

void SCKiRinFish::InternalSwap(SCKiRinFish* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCKiRinFish, level_)
      + sizeof(SCKiRinFish::level_)
      - PROTOBUF_FIELD_OFFSET(SCKiRinFish, fish_info_)>(
          reinterpret_cast<char*>(&fish_info_),
          reinterpret_cast<char*>(&other->fish_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCKiRinFish::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCNvWaFishCapture::_Internal {
 public:
};

SCNvWaFishCapture::SCNvWaFishCapture(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  multi_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCNvWaFishCapture)
}
SCNvWaFishCapture::SCNvWaFishCapture(const SCNvWaFishCapture& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      multi_list_(from.multi_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&bt_kind_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(bt_kind_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCNvWaFishCapture)
}

void SCNvWaFishCapture::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCNvWaFishCapture_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bt_kind_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(bt_kind_));
}

SCNvWaFishCapture::~SCNvWaFishCapture() {
  // @@protoc_insertion_point(destructor:F4BY.SCNvWaFishCapture)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCNvWaFishCapture::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCNvWaFishCapture::ArenaDtor(void* object) {
  SCNvWaFishCapture* _this = reinterpret_cast< SCNvWaFishCapture* >(object);
  (void)_this;
}
void SCNvWaFishCapture::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCNvWaFishCapture::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCNvWaFishCapture& SCNvWaFishCapture::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCNvWaFishCapture_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCNvWaFishCapture::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCNvWaFishCapture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  multi_list_.Clear();
  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bt_kind_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(bt_kind_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCNvWaFishCapture::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fish_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nvwa_multiple = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          nvwa_multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bt_kind = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          bt_kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .F4BY.MultiInfo multi_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_multi_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCNvWaFishCapture::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCNvWaFishCapture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 fish_uid = 2;
  if (this->fish_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fish_uid(), target);
  }

  // int32 ratio = 3;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ratio(), target);
  }

  // int32 nvwa_multiple = 4;
  if (this->nvwa_multiple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_nvwa_multiple(), target);
  }

  // int32 bt_kind = 5;
  if (this->bt_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_bt_kind(), target);
  }

  // repeated .F4BY.MultiInfo multi_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_multi_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_multi_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCNvWaFishCapture)
  return target;
}

size_t SCNvWaFishCapture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCNvWaFishCapture)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.MultiInfo multi_list = 6;
  total_size += 1UL * this->_internal_multi_list_size();
  for (const auto& msg : this->multi_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 fish_uid = 2;
  if (this->fish_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_uid());
  }

  // int32 ratio = 3;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  // int32 nvwa_multiple = 4;
  if (this->nvwa_multiple() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nvwa_multiple());
  }

  // int32 bt_kind = 5;
  if (this->bt_kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bt_kind());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCNvWaFishCapture::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCNvWaFishCapture)
  GOOGLE_DCHECK_NE(&from, this);
  const SCNvWaFishCapture* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCNvWaFishCapture>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCNvWaFishCapture)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCNvWaFishCapture)
    MergeFrom(*source);
  }
}

void SCNvWaFishCapture::MergeFrom(const SCNvWaFishCapture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCNvWaFishCapture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  multi_list_.MergeFrom(from.multi_list_);
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.fish_uid() != 0) {
    _internal_set_fish_uid(from._internal_fish_uid());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
  if (from.nvwa_multiple() != 0) {
    _internal_set_nvwa_multiple(from._internal_nvwa_multiple());
  }
  if (from.bt_kind() != 0) {
    _internal_set_bt_kind(from._internal_bt_kind());
  }
}

void SCNvWaFishCapture::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCNvWaFishCapture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCNvWaFishCapture::CopyFrom(const SCNvWaFishCapture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCNvWaFishCapture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCNvWaFishCapture::IsInitialized() const {
  return true;
}

void SCNvWaFishCapture::InternalSwap(SCNvWaFishCapture* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  multi_list_.InternalSwap(&other->multi_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCNvWaFishCapture, bt_kind_)
      + sizeof(SCNvWaFishCapture::bt_kind_)
      - PROTOBUF_FIELD_OFFSET(SCNvWaFishCapture, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCNvWaFishCapture::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCBombGlobeFishInfo::_Internal {
 public:
};

SCBombGlobeFishInfo::SCBombGlobeFishInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCBombGlobeFishInfo)
}
SCBombGlobeFishInfo::SCBombGlobeFishInfo(const SCBombGlobeFishInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&originid_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(originid_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCBombGlobeFishInfo)
}

void SCBombGlobeFishInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&originid_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(originid_));
}

SCBombGlobeFishInfo::~SCBombGlobeFishInfo() {
  // @@protoc_insertion_point(destructor:F4BY.SCBombGlobeFishInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCBombGlobeFishInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCBombGlobeFishInfo::ArenaDtor(void* object) {
  SCBombGlobeFishInfo* _this = reinterpret_cast< SCBombGlobeFishInfo* >(object);
  (void)_this;
}
void SCBombGlobeFishInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCBombGlobeFishInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCBombGlobeFishInfo& SCBombGlobeFishInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCBombGlobeFishInfo_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCBombGlobeFishInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCBombGlobeFishInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&originid_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(originid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCBombGlobeFishInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fish_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bombId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          bombid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_earn = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          total_earn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 self_bombId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          self_bombid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 originId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          originid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCBombGlobeFishInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCBombGlobeFishInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 ratio = 2;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ratio(), target);
  }

  // int32 fish_uid = 3;
  if (this->fish_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_fish_uid(), target);
  }

  // int32 stage = 4;
  if (this->stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_stage(), target);
  }

  // int32 bombId = 5;
  if (this->bombid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_bombid(), target);
  }

  // int32 total_earn = 6;
  if (this->total_earn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_total_earn(), target);
  }

  // int32 self_bombId = 7;
  if (this->self_bombid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_self_bombid(), target);
  }

  // int32 originId = 8;
  if (this->originid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_originid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCBombGlobeFishInfo)
  return target;
}

size_t SCBombGlobeFishInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCBombGlobeFishInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 ratio = 2;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  // int32 fish_uid = 3;
  if (this->fish_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_uid());
  }

  // int32 stage = 4;
  if (this->stage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stage());
  }

  // int32 bombId = 5;
  if (this->bombid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bombid());
  }

  // int32 total_earn = 6;
  if (this->total_earn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_earn());
  }

  // int32 self_bombId = 7;
  if (this->self_bombid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_self_bombid());
  }

  // int32 originId = 8;
  if (this->originid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_originid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCBombGlobeFishInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCBombGlobeFishInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCBombGlobeFishInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCBombGlobeFishInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCBombGlobeFishInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCBombGlobeFishInfo)
    MergeFrom(*source);
  }
}

void SCBombGlobeFishInfo::MergeFrom(const SCBombGlobeFishInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCBombGlobeFishInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
  if (from.fish_uid() != 0) {
    _internal_set_fish_uid(from._internal_fish_uid());
  }
  if (from.stage() != 0) {
    _internal_set_stage(from._internal_stage());
  }
  if (from.bombid() != 0) {
    _internal_set_bombid(from._internal_bombid());
  }
  if (from.total_earn() != 0) {
    _internal_set_total_earn(from._internal_total_earn());
  }
  if (from.self_bombid() != 0) {
    _internal_set_self_bombid(from._internal_self_bombid());
  }
  if (from.originid() != 0) {
    _internal_set_originid(from._internal_originid());
  }
}

void SCBombGlobeFishInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCBombGlobeFishInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCBombGlobeFishInfo::CopyFrom(const SCBombGlobeFishInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCBombGlobeFishInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCBombGlobeFishInfo::IsInitialized() const {
  return true;
}

void SCBombGlobeFishInfo::InternalSwap(SCBombGlobeFishInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCBombGlobeFishInfo, originid_)
      + sizeof(SCBombGlobeFishInfo::originid_)
      - PROTOBUF_FIELD_OFFSET(SCBombGlobeFishInfo, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCBombGlobeFishInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSBombGlobeFishHit::_Internal {
 public:
};

CSBombGlobeFishHit::CSBombGlobeFishHit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  screen_fishes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSBombGlobeFishHit)
}
CSBombGlobeFishHit::CSBombGlobeFishHit(const CSBombGlobeFishHit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      screen_fishes_(from.screen_fishes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bombid_, &from.bombid_,
    static_cast<size_t>(reinterpret_cast<char*>(&bt_type_) -
    reinterpret_cast<char*>(&bombid_)) + sizeof(bt_type_));
  // @@protoc_insertion_point(copy_constructor:F4BY.CSBombGlobeFishHit)
}

void CSBombGlobeFishHit::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bombid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bt_type_) -
      reinterpret_cast<char*>(&bombid_)) + sizeof(bt_type_));
}

CSBombGlobeFishHit::~CSBombGlobeFishHit() {
  // @@protoc_insertion_point(destructor:F4BY.CSBombGlobeFishHit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSBombGlobeFishHit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSBombGlobeFishHit::ArenaDtor(void* object) {
  CSBombGlobeFishHit* _this = reinterpret_cast< CSBombGlobeFishHit* >(object);
  (void)_this;
}
void CSBombGlobeFishHit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSBombGlobeFishHit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSBombGlobeFishHit& CSBombGlobeFishHit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSBombGlobeFishHit_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSBombGlobeFishHit::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSBombGlobeFishHit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  screen_fishes_.Clear();
  ::memset(&bombid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bt_type_) -
      reinterpret_cast<char*>(&bombid_)) + sizeof(bt_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSBombGlobeFishHit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 bombId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bombid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bt_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bt_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 screen_fishes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_screen_fishes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_screen_fishes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSBombGlobeFishHit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSBombGlobeFishHit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bombId = 1;
  if (this->bombid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bombid(), target);
  }

  // int32 bt_type = 2;
  if (this->bt_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bt_type(), target);
  }

  // repeated int32 screen_fishes = 3;
  {
    int byte_size = _screen_fishes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_screen_fishes(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSBombGlobeFishHit)
  return target;
}

size_t CSBombGlobeFishHit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSBombGlobeFishHit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 screen_fishes = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->screen_fishes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _screen_fishes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 bombId = 1;
  if (this->bombid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bombid());
  }

  // int32 bt_type = 2;
  if (this->bt_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bt_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSBombGlobeFishHit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSBombGlobeFishHit)
  GOOGLE_DCHECK_NE(&from, this);
  const CSBombGlobeFishHit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSBombGlobeFishHit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSBombGlobeFishHit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSBombGlobeFishHit)
    MergeFrom(*source);
  }
}

void CSBombGlobeFishHit::MergeFrom(const CSBombGlobeFishHit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSBombGlobeFishHit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  screen_fishes_.MergeFrom(from.screen_fishes_);
  if (from.bombid() != 0) {
    _internal_set_bombid(from._internal_bombid());
  }
  if (from.bt_type() != 0) {
    _internal_set_bt_type(from._internal_bt_type());
  }
}

void CSBombGlobeFishHit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSBombGlobeFishHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBombGlobeFishHit::CopyFrom(const CSBombGlobeFishHit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSBombGlobeFishHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBombGlobeFishHit::IsInitialized() const {
  return true;
}

void CSBombGlobeFishHit::InternalSwap(CSBombGlobeFishHit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  screen_fishes_.InternalSwap(&other->screen_fishes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSBombGlobeFishHit, bt_type_)
      + sizeof(CSBombGlobeFishHit::bt_type_)
      - PROTOBUF_FIELD_OFFSET(CSBombGlobeFishHit, bombid_)>(
          reinterpret_cast<char*>(&bombid_),
          reinterpret_cast<char*>(&other->bombid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSBombGlobeFishHit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCAnniversaryShowSelect::_Internal {
 public:
};

SCAnniversaryShowSelect::SCAnniversaryShowSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCAnniversaryShowSelect)
}
SCAnniversaryShowSelect::SCAnniversaryShowSelect(const SCAnniversaryShowSelect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&stage_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(stage_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCAnniversaryShowSelect)
}

void SCAnniversaryShowSelect::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&stage_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(stage_));
}

SCAnniversaryShowSelect::~SCAnniversaryShowSelect() {
  // @@protoc_insertion_point(destructor:F4BY.SCAnniversaryShowSelect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCAnniversaryShowSelect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCAnniversaryShowSelect::ArenaDtor(void* object) {
  SCAnniversaryShowSelect* _this = reinterpret_cast< SCAnniversaryShowSelect* >(object);
  (void)_this;
}
void SCAnniversaryShowSelect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCAnniversaryShowSelect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCAnniversaryShowSelect& SCAnniversaryShowSelect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCAnniversaryShowSelect_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCAnniversaryShowSelect::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCAnniversaryShowSelect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stage_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(stage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCAnniversaryShowSelect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool show_select = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          show_select_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 remain_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          remain_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCAnniversaryShowSelect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCAnniversaryShowSelect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // bool show_select = 2;
  if (this->show_select() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_show_select(), target);
  }

  // int32 remain_time = 3;
  if (this->remain_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_remain_time(), target);
  }

  // int32 stage = 4;
  if (this->stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_stage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCAnniversaryShowSelect)
  return target;
}

size_t SCAnniversaryShowSelect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCAnniversaryShowSelect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // bool show_select = 2;
  if (this->show_select() != 0) {
    total_size += 1 + 1;
  }

  // int32 remain_time = 3;
  if (this->remain_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_remain_time());
  }

  // int32 stage = 4;
  if (this->stage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCAnniversaryShowSelect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCAnniversaryShowSelect)
  GOOGLE_DCHECK_NE(&from, this);
  const SCAnniversaryShowSelect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCAnniversaryShowSelect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCAnniversaryShowSelect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCAnniversaryShowSelect)
    MergeFrom(*source);
  }
}

void SCAnniversaryShowSelect::MergeFrom(const SCAnniversaryShowSelect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCAnniversaryShowSelect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.show_select() != 0) {
    _internal_set_show_select(from._internal_show_select());
  }
  if (from.remain_time() != 0) {
    _internal_set_remain_time(from._internal_remain_time());
  }
  if (from.stage() != 0) {
    _internal_set_stage(from._internal_stage());
  }
}

void SCAnniversaryShowSelect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCAnniversaryShowSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCAnniversaryShowSelect::CopyFrom(const SCAnniversaryShowSelect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCAnniversaryShowSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCAnniversaryShowSelect::IsInitialized() const {
  return true;
}

void SCAnniversaryShowSelect::InternalSwap(SCAnniversaryShowSelect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCAnniversaryShowSelect, stage_)
      + sizeof(SCAnniversaryShowSelect::stage_)
      - PROTOBUF_FIELD_OFFSET(SCAnniversaryShowSelect, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCAnniversaryShowSelect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSAnniversarySelectReq::_Internal {
 public:
};

CSAnniversarySelectReq::CSAnniversarySelectReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSAnniversarySelectReq)
}
CSAnniversarySelectReq::CSAnniversarySelectReq(const CSAnniversarySelectReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stage_ = from.stage_;
  // @@protoc_insertion_point(copy_constructor:F4BY.CSAnniversarySelectReq)
}

void CSAnniversarySelectReq::SharedCtor() {
  stage_ = 0;
}

CSAnniversarySelectReq::~CSAnniversarySelectReq() {
  // @@protoc_insertion_point(destructor:F4BY.CSAnniversarySelectReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSAnniversarySelectReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSAnniversarySelectReq::ArenaDtor(void* object) {
  CSAnniversarySelectReq* _this = reinterpret_cast< CSAnniversarySelectReq* >(object);
  (void)_this;
}
void CSAnniversarySelectReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSAnniversarySelectReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSAnniversarySelectReq& CSAnniversarySelectReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSAnniversarySelectReq_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSAnniversarySelectReq::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSAnniversarySelectReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stage_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSAnniversarySelectReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 stage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSAnniversarySelectReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSAnniversarySelectReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 stage = 1;
  if (this->stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_stage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSAnniversarySelectReq)
  return target;
}

size_t CSAnniversarySelectReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSAnniversarySelectReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 stage = 1;
  if (this->stage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSAnniversarySelectReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSAnniversarySelectReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CSAnniversarySelectReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSAnniversarySelectReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSAnniversarySelectReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSAnniversarySelectReq)
    MergeFrom(*source);
  }
}

void CSAnniversarySelectReq::MergeFrom(const CSAnniversarySelectReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSAnniversarySelectReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stage() != 0) {
    _internal_set_stage(from._internal_stage());
  }
}

void CSAnniversarySelectReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSAnniversarySelectReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSAnniversarySelectReq::CopyFrom(const CSAnniversarySelectReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSAnniversarySelectReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAnniversarySelectReq::IsInitialized() const {
  return true;
}

void CSAnniversarySelectReq::InternalSwap(CSAnniversarySelectReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(stage_, other->stage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSAnniversarySelectReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AnniversaryStage1Result::_Internal {
 public:
};

AnniversaryStage1Result::AnniversaryStage1Result(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.AnniversaryStage1Result)
}
AnniversaryStage1Result::AnniversaryStage1Result(const AnniversaryStage1Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&fish_uid_) -
    reinterpret_cast<char*>(&score_)) + sizeof(fish_uid_));
  // @@protoc_insertion_point(copy_constructor:F4BY.AnniversaryStage1Result)
}

void AnniversaryStage1Result::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&score_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&fish_uid_) -
      reinterpret_cast<char*>(&score_)) + sizeof(fish_uid_));
}

AnniversaryStage1Result::~AnniversaryStage1Result() {
  // @@protoc_insertion_point(destructor:F4BY.AnniversaryStage1Result)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnniversaryStage1Result::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AnniversaryStage1Result::ArenaDtor(void* object) {
  AnniversaryStage1Result* _this = reinterpret_cast< AnniversaryStage1Result* >(object);
  (void)_this;
}
void AnniversaryStage1Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnniversaryStage1Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnniversaryStage1Result& AnniversaryStage1Result::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnniversaryStage1Result_F4BY_2eproto.base);
  return *internal_default_instance();
}


void AnniversaryStage1Result::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.AnniversaryStage1Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fish_uid_) -
      reinterpret_cast<char*>(&score_)) + sizeof(fish_uid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnniversaryStage1Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fish_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnniversaryStage1Result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.AnniversaryStage1Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 score = 1;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_score(), target);
  }

  // int32 fish_uid = 2;
  if (this->fish_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fish_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.AnniversaryStage1Result)
  return target;
}

size_t AnniversaryStage1Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.AnniversaryStage1Result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 score = 1;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  // int32 fish_uid = 2;
  if (this->fish_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnniversaryStage1Result::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.AnniversaryStage1Result)
  GOOGLE_DCHECK_NE(&from, this);
  const AnniversaryStage1Result* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnniversaryStage1Result>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.AnniversaryStage1Result)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.AnniversaryStage1Result)
    MergeFrom(*source);
  }
}

void AnniversaryStage1Result::MergeFrom(const AnniversaryStage1Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.AnniversaryStage1Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.fish_uid() != 0) {
    _internal_set_fish_uid(from._internal_fish_uid());
  }
}

void AnniversaryStage1Result::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.AnniversaryStage1Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnniversaryStage1Result::CopyFrom(const AnniversaryStage1Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.AnniversaryStage1Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnniversaryStage1Result::IsInitialized() const {
  return true;
}

void AnniversaryStage1Result::InternalSwap(AnniversaryStage1Result* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnniversaryStage1Result, fish_uid_)
      + sizeof(AnniversaryStage1Result::fish_uid_)
      - PROTOBUF_FIELD_OFFSET(AnniversaryStage1Result, score_)>(
          reinterpret_cast<char*>(&score_),
          reinterpret_cast<char*>(&other->score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnniversaryStage1Result::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AnniversaryStage2Result::_Internal {
 public:
};

AnniversaryStage2Result::AnniversaryStage2Result(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  score_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.AnniversaryStage2Result)
}
AnniversaryStage2Result::AnniversaryStage2Result(const AnniversaryStage2Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      score_list_(from.score_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&drop_times_, &from.drop_times_,
    static_cast<size_t>(reinterpret_cast<char*>(&multiple_) -
    reinterpret_cast<char*>(&drop_times_)) + sizeof(multiple_));
  // @@protoc_insertion_point(copy_constructor:F4BY.AnniversaryStage2Result)
}

void AnniversaryStage2Result::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&drop_times_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&multiple_) -
      reinterpret_cast<char*>(&drop_times_)) + sizeof(multiple_));
}

AnniversaryStage2Result::~AnniversaryStage2Result() {
  // @@protoc_insertion_point(destructor:F4BY.AnniversaryStage2Result)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnniversaryStage2Result::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AnniversaryStage2Result::ArenaDtor(void* object) {
  AnniversaryStage2Result* _this = reinterpret_cast< AnniversaryStage2Result* >(object);
  (void)_this;
}
void AnniversaryStage2Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnniversaryStage2Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnniversaryStage2Result& AnniversaryStage2Result::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnniversaryStage2Result_F4BY_2eproto.base);
  return *internal_default_instance();
}


void AnniversaryStage2Result::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.AnniversaryStage2Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  score_list_.Clear();
  ::memset(&drop_times_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multiple_) -
      reinterpret_cast<char*>(&drop_times_)) + sizeof(multiple_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnniversaryStage2Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 score_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_score_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_score_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 drop_times = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          drop_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 multiple = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnniversaryStage2Result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.AnniversaryStage2Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 score_list = 1;
  {
    int byte_size = _score_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_score_list(), byte_size, target);
    }
  }

  // int32 drop_times = 2;
  if (this->drop_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_drop_times(), target);
  }

  // int32 multiple = 3;
  if (this->multiple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_multiple(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.AnniversaryStage2Result)
  return target;
}

size_t AnniversaryStage2Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.AnniversaryStage2Result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 score_list = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->score_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _score_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 drop_times = 2;
  if (this->drop_times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_drop_times());
  }

  // int32 multiple = 3;
  if (this->multiple() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_multiple());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnniversaryStage2Result::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.AnniversaryStage2Result)
  GOOGLE_DCHECK_NE(&from, this);
  const AnniversaryStage2Result* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnniversaryStage2Result>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.AnniversaryStage2Result)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.AnniversaryStage2Result)
    MergeFrom(*source);
  }
}

void AnniversaryStage2Result::MergeFrom(const AnniversaryStage2Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.AnniversaryStage2Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  score_list_.MergeFrom(from.score_list_);
  if (from.drop_times() != 0) {
    _internal_set_drop_times(from._internal_drop_times());
  }
  if (from.multiple() != 0) {
    _internal_set_multiple(from._internal_multiple());
  }
}

void AnniversaryStage2Result::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.AnniversaryStage2Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnniversaryStage2Result::CopyFrom(const AnniversaryStage2Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.AnniversaryStage2Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnniversaryStage2Result::IsInitialized() const {
  return true;
}

void AnniversaryStage2Result::InternalSwap(AnniversaryStage2Result* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  score_list_.InternalSwap(&other->score_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnniversaryStage2Result, multiple_)
      + sizeof(AnniversaryStage2Result::multiple_)
      - PROTOBUF_FIELD_OFFSET(AnniversaryStage2Result, drop_times_)>(
          reinterpret_cast<char*>(&drop_times_),
          reinterpret_cast<char*>(&other->drop_times_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnniversaryStage2Result::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AnniversaryStage3Result::_Internal {
 public:
};

AnniversaryStage3Result::AnniversaryStage3Result(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.AnniversaryStage3Result)
}
AnniversaryStage3Result::AnniversaryStage3Result(const AnniversaryStage3Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&origin_id_, &from.origin_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&self_id_) -
    reinterpret_cast<char*>(&origin_id_)) + sizeof(self_id_));
  // @@protoc_insertion_point(copy_constructor:F4BY.AnniversaryStage3Result)
}

void AnniversaryStage3Result::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&origin_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&self_id_) -
      reinterpret_cast<char*>(&origin_id_)) + sizeof(self_id_));
}

AnniversaryStage3Result::~AnniversaryStage3Result() {
  // @@protoc_insertion_point(destructor:F4BY.AnniversaryStage3Result)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnniversaryStage3Result::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AnniversaryStage3Result::ArenaDtor(void* object) {
  AnniversaryStage3Result* _this = reinterpret_cast< AnniversaryStage3Result* >(object);
  (void)_this;
}
void AnniversaryStage3Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnniversaryStage3Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnniversaryStage3Result& AnniversaryStage3Result::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnniversaryStage3Result_F4BY_2eproto.base);
  return *internal_default_instance();
}


void AnniversaryStage3Result::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.AnniversaryStage3Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&origin_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&self_id_) -
      reinterpret_cast<char*>(&origin_id_)) + sizeof(self_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnniversaryStage3Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 origin_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          origin_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 self_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          self_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnniversaryStage3Result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.AnniversaryStage3Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 origin_id = 1;
  if (this->origin_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_origin_id(), target);
  }

  // int32 self_id = 2;
  if (this->self_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_self_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.AnniversaryStage3Result)
  return target;
}

size_t AnniversaryStage3Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.AnniversaryStage3Result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 origin_id = 1;
  if (this->origin_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_origin_id());
  }

  // int32 self_id = 2;
  if (this->self_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_self_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnniversaryStage3Result::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.AnniversaryStage3Result)
  GOOGLE_DCHECK_NE(&from, this);
  const AnniversaryStage3Result* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnniversaryStage3Result>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.AnniversaryStage3Result)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.AnniversaryStage3Result)
    MergeFrom(*source);
  }
}

void AnniversaryStage3Result::MergeFrom(const AnniversaryStage3Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.AnniversaryStage3Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.origin_id() != 0) {
    _internal_set_origin_id(from._internal_origin_id());
  }
  if (from.self_id() != 0) {
    _internal_set_self_id(from._internal_self_id());
  }
}

void AnniversaryStage3Result::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.AnniversaryStage3Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnniversaryStage3Result::CopyFrom(const AnniversaryStage3Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.AnniversaryStage3Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnniversaryStage3Result::IsInitialized() const {
  return true;
}

void AnniversaryStage3Result::InternalSwap(AnniversaryStage3Result* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnniversaryStage3Result, self_id_)
      + sizeof(AnniversaryStage3Result::self_id_)
      - PROTOBUF_FIELD_OFFSET(AnniversaryStage3Result, origin_id_)>(
          reinterpret_cast<char*>(&origin_id_),
          reinterpret_cast<char*>(&other->origin_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnniversaryStage3Result::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCAnniversarySelectResult::_Internal {
 public:
  static const ::F4BY::AnniversaryStage1Result& result1(const SCAnniversarySelectResult* msg);
  static const ::F4BY::AnniversaryStage2Result& result2(const SCAnniversarySelectResult* msg);
  static const ::F4BY::AnniversaryStage3Result& result3(const SCAnniversarySelectResult* msg);
};

const ::F4BY::AnniversaryStage1Result&
SCAnniversarySelectResult::_Internal::result1(const SCAnniversarySelectResult* msg) {
  return *msg->result1_;
}
const ::F4BY::AnniversaryStage2Result&
SCAnniversarySelectResult::_Internal::result2(const SCAnniversarySelectResult* msg) {
  return *msg->result2_;
}
const ::F4BY::AnniversaryStage3Result&
SCAnniversarySelectResult::_Internal::result3(const SCAnniversarySelectResult* msg) {
  return *msg->result3_;
}
SCAnniversarySelectResult::SCAnniversarySelectResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  multi_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCAnniversarySelectResult)
}
SCAnniversarySelectResult::SCAnniversarySelectResult(const SCAnniversarySelectResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      multi_list_(from.multi_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result1()) {
    result1_ = new ::F4BY::AnniversaryStage1Result(*from.result1_);
  } else {
    result1_ = nullptr;
  }
  if (from._internal_has_result2()) {
    result2_ = new ::F4BY::AnniversaryStage2Result(*from.result2_);
  } else {
    result2_ = nullptr;
  }
  if (from._internal_has_result3()) {
    result3_ = new ::F4BY::AnniversaryStage3Result(*from.result3_);
  } else {
    result3_ = nullptr;
  }
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&death_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(death_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCAnniversarySelectResult)
}

void SCAnniversarySelectResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCAnniversarySelectResult_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&result1_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&death_) -
      reinterpret_cast<char*>(&result1_)) + sizeof(death_));
}

SCAnniversarySelectResult::~SCAnniversarySelectResult() {
  // @@protoc_insertion_point(destructor:F4BY.SCAnniversarySelectResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCAnniversarySelectResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result1_;
  if (this != internal_default_instance()) delete result2_;
  if (this != internal_default_instance()) delete result3_;
}

void SCAnniversarySelectResult::ArenaDtor(void* object) {
  SCAnniversarySelectResult* _this = reinterpret_cast< SCAnniversarySelectResult* >(object);
  (void)_this;
}
void SCAnniversarySelectResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCAnniversarySelectResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCAnniversarySelectResult& SCAnniversarySelectResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCAnniversarySelectResult_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCAnniversarySelectResult::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCAnniversarySelectResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  multi_list_.Clear();
  if (GetArena() == nullptr && result1_ != nullptr) {
    delete result1_;
  }
  result1_ = nullptr;
  if (GetArena() == nullptr && result2_ != nullptr) {
    delete result2_;
  }
  result2_ = nullptr;
  if (GetArena() == nullptr && result3_ != nullptr) {
    delete result3_;
  }
  result3_ = nullptr;
  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&death_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(death_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCAnniversarySelectResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bt_ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bt_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .F4BY.MultiInfo multi_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_multi_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 total_earn = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          total_earn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool death = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          death_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .F4BY.AnniversaryStage1Result result1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_result1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .F4BY.AnniversaryStage2Result result2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_result2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .F4BY.AnniversaryStage3Result result3 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_result3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCAnniversarySelectResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCAnniversarySelectResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 stage = 2;
  if (this->stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_stage(), target);
  }

  // int32 bt_ratio = 3;
  if (this->bt_ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_bt_ratio(), target);
  }

  // repeated .F4BY.MultiInfo multi_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_multi_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_multi_list(i), target, stream);
  }

  // int32 total_earn = 5;
  if (this->total_earn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_total_earn(), target);
  }

  // bool death = 6;
  if (this->death() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_death(), target);
  }

  // .F4BY.AnniversaryStage1Result result1 = 7;
  if (this->has_result1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::result1(this), target, stream);
  }

  // .F4BY.AnniversaryStage2Result result2 = 8;
  if (this->has_result2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::result2(this), target, stream);
  }

  // .F4BY.AnniversaryStage3Result result3 = 9;
  if (this->has_result3()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::result3(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCAnniversarySelectResult)
  return target;
}

size_t SCAnniversarySelectResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCAnniversarySelectResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.MultiInfo multi_list = 4;
  total_size += 1UL * this->_internal_multi_list_size();
  for (const auto& msg : this->multi_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .F4BY.AnniversaryStage1Result result1 = 7;
  if (this->has_result1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result1_);
  }

  // .F4BY.AnniversaryStage2Result result2 = 8;
  if (this->has_result2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result2_);
  }

  // .F4BY.AnniversaryStage3Result result3 = 9;
  if (this->has_result3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result3_);
  }

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 stage = 2;
  if (this->stage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stage());
  }

  // int32 bt_ratio = 3;
  if (this->bt_ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bt_ratio());
  }

  // int32 total_earn = 5;
  if (this->total_earn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_earn());
  }

  // bool death = 6;
  if (this->death() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCAnniversarySelectResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCAnniversarySelectResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SCAnniversarySelectResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCAnniversarySelectResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCAnniversarySelectResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCAnniversarySelectResult)
    MergeFrom(*source);
  }
}

void SCAnniversarySelectResult::MergeFrom(const SCAnniversarySelectResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCAnniversarySelectResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  multi_list_.MergeFrom(from.multi_list_);
  if (from.has_result1()) {
    _internal_mutable_result1()->::F4BY::AnniversaryStage1Result::MergeFrom(from._internal_result1());
  }
  if (from.has_result2()) {
    _internal_mutable_result2()->::F4BY::AnniversaryStage2Result::MergeFrom(from._internal_result2());
  }
  if (from.has_result3()) {
    _internal_mutable_result3()->::F4BY::AnniversaryStage3Result::MergeFrom(from._internal_result3());
  }
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.stage() != 0) {
    _internal_set_stage(from._internal_stage());
  }
  if (from.bt_ratio() != 0) {
    _internal_set_bt_ratio(from._internal_bt_ratio());
  }
  if (from.total_earn() != 0) {
    _internal_set_total_earn(from._internal_total_earn());
  }
  if (from.death() != 0) {
    _internal_set_death(from._internal_death());
  }
}

void SCAnniversarySelectResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCAnniversarySelectResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCAnniversarySelectResult::CopyFrom(const SCAnniversarySelectResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCAnniversarySelectResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCAnniversarySelectResult::IsInitialized() const {
  return true;
}

void SCAnniversarySelectResult::InternalSwap(SCAnniversarySelectResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  multi_list_.InternalSwap(&other->multi_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCAnniversarySelectResult, death_)
      + sizeof(SCAnniversarySelectResult::death_)
      - PROTOBUF_FIELD_OFFSET(SCAnniversarySelectResult, result1_)>(
          reinterpret_cast<char*>(&result1_),
          reinterpret_cast<char*>(&other->result1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCAnniversarySelectResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSAnniversaryHit::_Internal {
 public:
};

CSAnniversaryHit::CSAnniversaryHit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  screen_fishes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSAnniversaryHit)
}
CSAnniversaryHit::CSAnniversaryHit(const CSAnniversaryHit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      screen_fishes_(from.screen_fishes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bombid_, &from.bombid_,
    static_cast<size_t>(reinterpret_cast<char*>(&bt_type_) -
    reinterpret_cast<char*>(&bombid_)) + sizeof(bt_type_));
  // @@protoc_insertion_point(copy_constructor:F4BY.CSAnniversaryHit)
}

void CSAnniversaryHit::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bombid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bt_type_) -
      reinterpret_cast<char*>(&bombid_)) + sizeof(bt_type_));
}

CSAnniversaryHit::~CSAnniversaryHit() {
  // @@protoc_insertion_point(destructor:F4BY.CSAnniversaryHit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSAnniversaryHit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSAnniversaryHit::ArenaDtor(void* object) {
  CSAnniversaryHit* _this = reinterpret_cast< CSAnniversaryHit* >(object);
  (void)_this;
}
void CSAnniversaryHit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSAnniversaryHit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSAnniversaryHit& CSAnniversaryHit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSAnniversaryHit_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSAnniversaryHit::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSAnniversaryHit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  screen_fishes_.Clear();
  ::memset(&bombid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bt_type_) -
      reinterpret_cast<char*>(&bombid_)) + sizeof(bt_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSAnniversaryHit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 bombId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bombid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bt_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bt_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 screen_fishes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_screen_fishes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_screen_fishes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSAnniversaryHit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSAnniversaryHit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bombId = 1;
  if (this->bombid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bombid(), target);
  }

  // int32 bt_type = 2;
  if (this->bt_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bt_type(), target);
  }

  // repeated int32 screen_fishes = 3;
  {
    int byte_size = _screen_fishes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_screen_fishes(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSAnniversaryHit)
  return target;
}

size_t CSAnniversaryHit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSAnniversaryHit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 screen_fishes = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->screen_fishes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _screen_fishes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 bombId = 1;
  if (this->bombid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bombid());
  }

  // int32 bt_type = 2;
  if (this->bt_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bt_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSAnniversaryHit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSAnniversaryHit)
  GOOGLE_DCHECK_NE(&from, this);
  const CSAnniversaryHit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSAnniversaryHit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSAnniversaryHit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSAnniversaryHit)
    MergeFrom(*source);
  }
}

void CSAnniversaryHit::MergeFrom(const CSAnniversaryHit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSAnniversaryHit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  screen_fishes_.MergeFrom(from.screen_fishes_);
  if (from.bombid() != 0) {
    _internal_set_bombid(from._internal_bombid());
  }
  if (from.bt_type() != 0) {
    _internal_set_bt_type(from._internal_bt_type());
  }
}

void CSAnniversaryHit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSAnniversaryHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSAnniversaryHit::CopyFrom(const CSAnniversaryHit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSAnniversaryHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAnniversaryHit::IsInitialized() const {
  return true;
}

void CSAnniversaryHit::InternalSwap(CSAnniversaryHit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  screen_fishes_.InternalSwap(&other->screen_fishes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSAnniversaryHit, bt_type_)
      + sizeof(CSAnniversaryHit::bt_type_)
      - PROTOBUF_FIELD_OFFSET(CSAnniversaryHit, bombid_)>(
          reinterpret_cast<char*>(&bombid_),
          reinterpret_cast<char*>(&other->bombid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSAnniversaryHit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSyncAnniversaryHitStage::_Internal {
 public:
};

SCSyncAnniversaryHitStage::SCSyncAnniversaryHitStage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCSyncAnniversaryHitStage)
}
SCSyncAnniversaryHitStage::SCSyncAnniversaryHitStage(const SCSyncAnniversaryHitStage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&invalid_earn_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(invalid_earn_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCSyncAnniversaryHitStage)
}

void SCSyncAnniversaryHitStage::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&invalid_earn_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(invalid_earn_));
}

SCSyncAnniversaryHitStage::~SCSyncAnniversaryHitStage() {
  // @@protoc_insertion_point(destructor:F4BY.SCSyncAnniversaryHitStage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSyncAnniversaryHitStage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCSyncAnniversaryHitStage::ArenaDtor(void* object) {
  SCSyncAnniversaryHitStage* _this = reinterpret_cast< SCSyncAnniversaryHitStage* >(object);
  (void)_this;
}
void SCSyncAnniversaryHitStage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSyncAnniversaryHitStage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSyncAnniversaryHitStage& SCSyncAnniversaryHitStage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSyncAnniversaryHitStage_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCSyncAnniversaryHitStage::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCSyncAnniversaryHitStage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&invalid_earn_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(invalid_earn_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSyncAnniversaryHitStage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 origin_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          origin_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 self_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          self_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_earn = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          total_earn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 invalid_earn = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          invalid_earn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSyncAnniversaryHitStage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCSyncAnniversaryHitStage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 origin_id = 2;
  if (this->origin_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_origin_id(), target);
  }

  // int32 self_id = 3;
  if (this->self_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_self_id(), target);
  }

  // int32 stage = 4;
  if (this->stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_stage(), target);
  }

  // int32 total_earn = 5;
  if (this->total_earn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_total_earn(), target);
  }

  // int32 invalid_earn = 6;
  if (this->invalid_earn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_invalid_earn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCSyncAnniversaryHitStage)
  return target;
}

size_t SCSyncAnniversaryHitStage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCSyncAnniversaryHitStage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 origin_id = 2;
  if (this->origin_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_origin_id());
  }

  // int32 self_id = 3;
  if (this->self_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_self_id());
  }

  // int32 stage = 4;
  if (this->stage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stage());
  }

  // int32 total_earn = 5;
  if (this->total_earn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_earn());
  }

  // int32 invalid_earn = 6;
  if (this->invalid_earn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_invalid_earn());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSyncAnniversaryHitStage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCSyncAnniversaryHitStage)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSyncAnniversaryHitStage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSyncAnniversaryHitStage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCSyncAnniversaryHitStage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCSyncAnniversaryHitStage)
    MergeFrom(*source);
  }
}

void SCSyncAnniversaryHitStage::MergeFrom(const SCSyncAnniversaryHitStage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCSyncAnniversaryHitStage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.origin_id() != 0) {
    _internal_set_origin_id(from._internal_origin_id());
  }
  if (from.self_id() != 0) {
    _internal_set_self_id(from._internal_self_id());
  }
  if (from.stage() != 0) {
    _internal_set_stage(from._internal_stage());
  }
  if (from.total_earn() != 0) {
    _internal_set_total_earn(from._internal_total_earn());
  }
  if (from.invalid_earn() != 0) {
    _internal_set_invalid_earn(from._internal_invalid_earn());
  }
}

void SCSyncAnniversaryHitStage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCSyncAnniversaryHitStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSyncAnniversaryHitStage::CopyFrom(const SCSyncAnniversaryHitStage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCSyncAnniversaryHitStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSyncAnniversaryHitStage::IsInitialized() const {
  return true;
}

void SCSyncAnniversaryHitStage::InternalSwap(SCSyncAnniversaryHitStage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCSyncAnniversaryHitStage, invalid_earn_)
      + sizeof(SCSyncAnniversaryHitStage::invalid_earn_)
      - PROTOBUF_FIELD_OFFSET(SCSyncAnniversaryHitStage, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSyncAnniversaryHitStage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScallopLottery::_Internal {
 public:
  static const ::F4BY::Obj& reward(const ScallopLottery* msg);
};

const ::F4BY::Obj&
ScallopLottery::_Internal::reward(const ScallopLottery* msg) {
  return *msg->reward_;
}
ScallopLottery::ScallopLottery(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.ScallopLottery)
}
ScallopLottery::ScallopLottery(const ScallopLottery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reward()) {
    reward_ = new ::F4BY::Obj(*from.reward_);
  } else {
    reward_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:F4BY.ScallopLottery)
}

void ScallopLottery::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScallopLottery_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&reward_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&reward_)) + sizeof(status_));
}

ScallopLottery::~ScallopLottery() {
  // @@protoc_insertion_point(destructor:F4BY.ScallopLottery)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScallopLottery::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete reward_;
}

void ScallopLottery::ArenaDtor(void* object) {
  ScallopLottery* _this = reinterpret_cast< ScallopLottery* >(object);
  (void)_this;
}
void ScallopLottery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScallopLottery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScallopLottery& ScallopLottery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScallopLottery_F4BY_2eproto.base);
  return *internal_default_instance();
}


void ScallopLottery::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.ScallopLottery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && reward_ != nullptr) {
    delete reward_;
  }
  reward_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&id_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScallopLottery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .F4BY.Obj reward = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_reward(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScallopLottery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.ScallopLottery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // int32 status = 3;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_status(), target);
  }

  // .F4BY.Obj reward = 4;
  if (this->has_reward()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::reward(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.ScallopLottery)
  return target;
}

size_t ScallopLottery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.ScallopLottery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .F4BY.Obj reward = 4;
  if (this->has_reward()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reward_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScallopLottery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.ScallopLottery)
  GOOGLE_DCHECK_NE(&from, this);
  const ScallopLottery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScallopLottery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.ScallopLottery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.ScallopLottery)
    MergeFrom(*source);
  }
}

void ScallopLottery::MergeFrom(const ScallopLottery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.ScallopLottery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_reward()) {
    _internal_mutable_reward()->::F4BY::Obj::MergeFrom(from._internal_reward());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void ScallopLottery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.ScallopLottery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScallopLottery::CopyFrom(const ScallopLottery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.ScallopLottery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScallopLottery::IsInitialized() const {
  return true;
}

void ScallopLottery::InternalSwap(ScallopLottery* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScallopLottery, status_)
      + sizeof(ScallopLottery::status_)
      - PROTOBUF_FIELD_OFFSET(ScallopLottery, reward_)>(
          reinterpret_cast<char*>(&reward_),
          reinterpret_cast<char*>(&other->reward_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScallopLottery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCCaptureScallop::_Internal {
 public:
};

SCCaptureScallop::SCCaptureScallop(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lottery_list_(arena),
  reward_config_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCCaptureScallop)
}
SCCaptureScallop::SCCaptureScallop(const SCCaptureScallop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lottery_list_(from.lottery_list_),
      reward_config_(from.reward_config_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCCaptureScallop)
}

void SCCaptureScallop::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCCaptureScallop_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(time_));
}

SCCaptureScallop::~SCCaptureScallop() {
  // @@protoc_insertion_point(destructor:F4BY.SCCaptureScallop)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCCaptureScallop::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCCaptureScallop::ArenaDtor(void* object) {
  SCCaptureScallop* _this = reinterpret_cast< SCCaptureScallop* >(object);
  (void)_this;
}
void SCCaptureScallop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCCaptureScallop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCCaptureScallop& SCCaptureScallop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCCaptureScallop_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCCaptureScallop::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCCaptureScallop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lottery_list_.Clear();
  reward_config_.Clear();
  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCCaptureScallop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fish_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .F4BY.ScallopLottery lottery_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lottery_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .F4BY.Obj reward_config = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reward_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCCaptureScallop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCCaptureScallop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 fish_uid = 2;
  if (this->fish_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fish_uid(), target);
  }

  // int32 ratio = 3;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ratio(), target);
  }

  // int32 time = 4;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_time(), target);
  }

  // repeated .F4BY.ScallopLottery lottery_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lottery_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_lottery_list(i), target, stream);
  }

  // repeated .F4BY.Obj reward_config = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reward_config_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_reward_config(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCCaptureScallop)
  return target;
}

size_t SCCaptureScallop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCCaptureScallop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.ScallopLottery lottery_list = 5;
  total_size += 1UL * this->_internal_lottery_list_size();
  for (const auto& msg : this->lottery_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .F4BY.Obj reward_config = 6;
  total_size += 1UL * this->_internal_reward_config_size();
  for (const auto& msg : this->reward_config_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 fish_uid = 2;
  if (this->fish_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_uid());
  }

  // int32 ratio = 3;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  // int32 time = 4;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCCaptureScallop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCCaptureScallop)
  GOOGLE_DCHECK_NE(&from, this);
  const SCCaptureScallop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCCaptureScallop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCCaptureScallop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCCaptureScallop)
    MergeFrom(*source);
  }
}

void SCCaptureScallop::MergeFrom(const SCCaptureScallop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCCaptureScallop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lottery_list_.MergeFrom(from.lottery_list_);
  reward_config_.MergeFrom(from.reward_config_);
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.fish_uid() != 0) {
    _internal_set_fish_uid(from._internal_fish_uid());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
}

void SCCaptureScallop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCCaptureScallop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCCaptureScallop::CopyFrom(const SCCaptureScallop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCCaptureScallop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCCaptureScallop::IsInitialized() const {
  return true;
}

void SCCaptureScallop::InternalSwap(SCCaptureScallop* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lottery_list_.InternalSwap(&other->lottery_list_);
  reward_config_.InternalSwap(&other->reward_config_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCCaptureScallop, time_)
      + sizeof(SCCaptureScallop::time_)
      - PROTOBUF_FIELD_OFFSET(SCCaptureScallop, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCCaptureScallop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSOpenScallop::_Internal {
 public:
};

CSOpenScallop::CSOpenScallop(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSOpenScallop)
}
CSOpenScallop::CSOpenScallop(const CSOpenScallop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:F4BY.CSOpenScallop)
}

void CSOpenScallop::SharedCtor() {
  id_ = 0;
}

CSOpenScallop::~CSOpenScallop() {
  // @@protoc_insertion_point(destructor:F4BY.CSOpenScallop)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOpenScallop::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSOpenScallop::ArenaDtor(void* object) {
  CSOpenScallop* _this = reinterpret_cast< CSOpenScallop* >(object);
  (void)_this;
}
void CSOpenScallop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOpenScallop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSOpenScallop& CSOpenScallop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSOpenScallop_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSOpenScallop::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSOpenScallop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOpenScallop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOpenScallop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSOpenScallop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSOpenScallop)
  return target;
}

size_t CSOpenScallop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSOpenScallop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOpenScallop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSOpenScallop)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOpenScallop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOpenScallop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSOpenScallop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSOpenScallop)
    MergeFrom(*source);
  }
}

void CSOpenScallop::MergeFrom(const CSOpenScallop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSOpenScallop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void CSOpenScallop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSOpenScallop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOpenScallop::CopyFrom(const CSOpenScallop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSOpenScallop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOpenScallop::IsInitialized() const {
  return true;
}

void CSOpenScallop::InternalSwap(CSOpenScallop* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOpenScallop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCOpenScallop::_Internal {
 public:
  static const ::F4BY::ScallopLottery& scallop(const SCOpenScallop* msg);
};

const ::F4BY::ScallopLottery&
SCOpenScallop::_Internal::scallop(const SCOpenScallop* msg) {
  return *msg->scallop_;
}
SCOpenScallop::SCOpenScallop(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCOpenScallop)
}
SCOpenScallop::SCOpenScallop(const SCOpenScallop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scallop()) {
    scallop_ = new ::F4BY::ScallopLottery(*from.scallop_);
  } else {
    scallop_ = nullptr;
  }
  chair_idx_ = from.chair_idx_;
  // @@protoc_insertion_point(copy_constructor:F4BY.SCOpenScallop)
}

void SCOpenScallop::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCOpenScallop_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&scallop_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chair_idx_) -
      reinterpret_cast<char*>(&scallop_)) + sizeof(chair_idx_));
}

SCOpenScallop::~SCOpenScallop() {
  // @@protoc_insertion_point(destructor:F4BY.SCOpenScallop)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCOpenScallop::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scallop_;
}

void SCOpenScallop::ArenaDtor(void* object) {
  SCOpenScallop* _this = reinterpret_cast< SCOpenScallop* >(object);
  (void)_this;
}
void SCOpenScallop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCOpenScallop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCOpenScallop& SCOpenScallop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCOpenScallop_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCOpenScallop::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCOpenScallop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scallop_ != nullptr) {
    delete scallop_;
  }
  scallop_ = nullptr;
  chair_idx_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCOpenScallop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .F4BY.ScallopLottery scallop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_scallop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCOpenScallop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCOpenScallop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // .F4BY.ScallopLottery scallop = 2;
  if (this->has_scallop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::scallop(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCOpenScallop)
  return target;
}

size_t SCOpenScallop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCOpenScallop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .F4BY.ScallopLottery scallop = 2;
  if (this->has_scallop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scallop_);
  }

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCOpenScallop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCOpenScallop)
  GOOGLE_DCHECK_NE(&from, this);
  const SCOpenScallop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCOpenScallop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCOpenScallop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCOpenScallop)
    MergeFrom(*source);
  }
}

void SCOpenScallop::MergeFrom(const SCOpenScallop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCOpenScallop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scallop()) {
    _internal_mutable_scallop()->::F4BY::ScallopLottery::MergeFrom(from._internal_scallop());
  }
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
}

void SCOpenScallop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCOpenScallop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCOpenScallop::CopyFrom(const SCOpenScallop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCOpenScallop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCOpenScallop::IsInitialized() const {
  return true;
}

void SCOpenScallop::InternalSwap(SCOpenScallop* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCOpenScallop, chair_idx_)
      + sizeof(SCOpenScallop::chair_idx_)
      - PROTOBUF_FIELD_OFFSET(SCOpenScallop, scallop_)>(
          reinterpret_cast<char*>(&scallop_),
          reinterpret_cast<char*>(&other->scallop_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCOpenScallop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSettleScallopLottery::_Internal {
 public:
};

SCSettleScallopLottery::SCSettleScallopLottery(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lottery_list_(arena),
  multi_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCSettleScallopLottery)
}
SCSettleScallopLottery::SCSettleScallopLottery(const SCSettleScallopLottery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lottery_list_(from.lottery_list_),
      multi_list_(from.multi_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&earn_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(earn_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCSettleScallopLottery)
}

void SCSettleScallopLottery::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCSettleScallopLottery_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&earn_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(earn_));
}

SCSettleScallopLottery::~SCSettleScallopLottery() {
  // @@protoc_insertion_point(destructor:F4BY.SCSettleScallopLottery)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSettleScallopLottery::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCSettleScallopLottery::ArenaDtor(void* object) {
  SCSettleScallopLottery* _this = reinterpret_cast< SCSettleScallopLottery* >(object);
  (void)_this;
}
void SCSettleScallopLottery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSettleScallopLottery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSettleScallopLottery& SCSettleScallopLottery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSettleScallopLottery_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCSettleScallopLottery::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCSettleScallopLottery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lottery_list_.Clear();
  multi_list_.Clear();
  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&earn_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(earn_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSettleScallopLottery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 earn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          earn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .F4BY.ScallopLottery lottery_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lottery_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .F4BY.MultiInfo multi_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_multi_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSettleScallopLottery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCSettleScallopLottery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 earn = 2;
  if (this->earn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_earn(), target);
  }

  // repeated .F4BY.ScallopLottery lottery_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lottery_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_lottery_list(i), target, stream);
  }

  // repeated .F4BY.MultiInfo multi_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_multi_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_multi_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCSettleScallopLottery)
  return target;
}

size_t SCSettleScallopLottery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCSettleScallopLottery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.ScallopLottery lottery_list = 3;
  total_size += 1UL * this->_internal_lottery_list_size();
  for (const auto& msg : this->lottery_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .F4BY.MultiInfo multi_list = 4;
  total_size += 1UL * this->_internal_multi_list_size();
  for (const auto& msg : this->multi_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 earn = 2;
  if (this->earn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_earn());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSettleScallopLottery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCSettleScallopLottery)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSettleScallopLottery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSettleScallopLottery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCSettleScallopLottery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCSettleScallopLottery)
    MergeFrom(*source);
  }
}

void SCSettleScallopLottery::MergeFrom(const SCSettleScallopLottery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCSettleScallopLottery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lottery_list_.MergeFrom(from.lottery_list_);
  multi_list_.MergeFrom(from.multi_list_);
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.earn() != 0) {
    _internal_set_earn(from._internal_earn());
  }
}

void SCSettleScallopLottery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCSettleScallopLottery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSettleScallopLottery::CopyFrom(const SCSettleScallopLottery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCSettleScallopLottery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSettleScallopLottery::IsInitialized() const {
  return true;
}

void SCSettleScallopLottery::InternalSwap(SCSettleScallopLottery* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lottery_list_.InternalSwap(&other->lottery_list_);
  multi_list_.InternalSwap(&other->multi_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCSettleScallopLottery, earn_)
      + sizeof(SCSettleScallopLottery::earn_)
      - PROTOBUF_FIELD_OFFSET(SCSettleScallopLottery, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSettleScallopLottery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSyncScallopLottery::_Internal {
 public:
};

SCSyncScallopLottery::SCSyncScallopLottery(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lottery_list_(arena),
  reward_config_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCSyncScallopLottery)
}
SCSyncScallopLottery::SCSyncScallopLottery(const SCSyncScallopLottery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lottery_list_(from.lottery_list_),
      reward_config_(from.reward_config_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCSyncScallopLottery)
}

void SCSyncScallopLottery::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCSyncScallopLottery_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(time_));
}

SCSyncScallopLottery::~SCSyncScallopLottery() {
  // @@protoc_insertion_point(destructor:F4BY.SCSyncScallopLottery)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSyncScallopLottery::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCSyncScallopLottery::ArenaDtor(void* object) {
  SCSyncScallopLottery* _this = reinterpret_cast< SCSyncScallopLottery* >(object);
  (void)_this;
}
void SCSyncScallopLottery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSyncScallopLottery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSyncScallopLottery& SCSyncScallopLottery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSyncScallopLottery_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCSyncScallopLottery::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCSyncScallopLottery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lottery_list_.Clear();
  reward_config_.Clear();
  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSyncScallopLottery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .F4BY.ScallopLottery lottery_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lottery_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .F4BY.Obj reward_config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reward_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSyncScallopLottery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCSyncScallopLottery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 ratio = 2;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ratio(), target);
  }

  // int32 time = 3;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_time(), target);
  }

  // repeated .F4BY.ScallopLottery lottery_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lottery_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_lottery_list(i), target, stream);
  }

  // repeated .F4BY.Obj reward_config = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reward_config_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_reward_config(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCSyncScallopLottery)
  return target;
}

size_t SCSyncScallopLottery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCSyncScallopLottery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.ScallopLottery lottery_list = 4;
  total_size += 1UL * this->_internal_lottery_list_size();
  for (const auto& msg : this->lottery_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .F4BY.Obj reward_config = 5;
  total_size += 1UL * this->_internal_reward_config_size();
  for (const auto& msg : this->reward_config_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 ratio = 2;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  // int32 time = 3;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSyncScallopLottery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCSyncScallopLottery)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSyncScallopLottery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSyncScallopLottery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCSyncScallopLottery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCSyncScallopLottery)
    MergeFrom(*source);
  }
}

void SCSyncScallopLottery::MergeFrom(const SCSyncScallopLottery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCSyncScallopLottery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lottery_list_.MergeFrom(from.lottery_list_);
  reward_config_.MergeFrom(from.reward_config_);
  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
}

void SCSyncScallopLottery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCSyncScallopLottery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSyncScallopLottery::CopyFrom(const SCSyncScallopLottery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCSyncScallopLottery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSyncScallopLottery::IsInitialized() const {
  return true;
}

void SCSyncScallopLottery::InternalSwap(SCSyncScallopLottery* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lottery_list_.InternalSwap(&other->lottery_list_);
  reward_config_.InternalSwap(&other->reward_config_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCSyncScallopLottery, time_)
      + sizeof(SCSyncScallopLottery::time_)
      - PROTOBUF_FIELD_OFFSET(SCSyncScallopLottery, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSyncScallopLottery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OpenChestReward::_Internal {
 public:
  static const ::F4BY::Decimal& num(const OpenChestReward* msg);
};

const ::F4BY::Decimal&
OpenChestReward::_Internal::num(const OpenChestReward* msg) {
  return *msg->num_;
}
OpenChestReward::OpenChestReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.OpenChestReward)
}
OpenChestReward::OpenChestReward(const OpenChestReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_num()) {
    num_ = new ::F4BY::Decimal(*from.num_);
  } else {
    num_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:F4BY.OpenChestReward)
}

void OpenChestReward::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpenChestReward_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&num_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&num_)) + sizeof(id_));
}

OpenChestReward::~OpenChestReward() {
  // @@protoc_insertion_point(destructor:F4BY.OpenChestReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OpenChestReward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete num_;
}

void OpenChestReward::ArenaDtor(void* object) {
  OpenChestReward* _this = reinterpret_cast< OpenChestReward* >(object);
  (void)_this;
}
void OpenChestReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpenChestReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpenChestReward& OpenChestReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpenChestReward_F4BY_2eproto.base);
  return *internal_default_instance();
}


void OpenChestReward::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.OpenChestReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && num_ != nullptr) {
    delete num_;
  }
  num_ = nullptr;
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpenChestReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .F4BY.Decimal num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_num(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpenChestReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.OpenChestReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .F4BY.Decimal num = 2;
  if (this->has_num()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::num(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.OpenChestReward)
  return target;
}

size_t OpenChestReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.OpenChestReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .F4BY.Decimal num = 2;
  if (this->has_num()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *num_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenChestReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.OpenChestReward)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenChestReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpenChestReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.OpenChestReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.OpenChestReward)
    MergeFrom(*source);
  }
}

void OpenChestReward::MergeFrom(const OpenChestReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.OpenChestReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_num()) {
    _internal_mutable_num()->::F4BY::Decimal::MergeFrom(from._internal_num());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void OpenChestReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.OpenChestReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenChestReward::CopyFrom(const OpenChestReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.OpenChestReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenChestReward::IsInitialized() const {
  return true;
}

void OpenChestReward::InternalSwap(OpenChestReward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpenChestReward, id_)
      + sizeof(OpenChestReward::id_)
      - PROTOBUF_FIELD_OFFSET(OpenChestReward, num_)>(
          reinterpret_cast<char*>(&num_),
          reinterpret_cast<char*>(&other->num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenChestReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCUpdateChestStatus::_Internal {
 public:
};

SCUpdateChestStatus::SCUpdateChestStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCUpdateChestStatus)
}
SCUpdateChestStatus::SCUpdateChestStatus(const SCUpdateChestStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chest_type_, &from.chest_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&available_reward_) -
    reinterpret_cast<char*>(&chest_type_)) + sizeof(available_reward_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCUpdateChestStatus)
}

void SCUpdateChestStatus::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chest_type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&available_reward_) -
      reinterpret_cast<char*>(&chest_type_)) + sizeof(available_reward_));
}

SCUpdateChestStatus::~SCUpdateChestStatus() {
  // @@protoc_insertion_point(destructor:F4BY.SCUpdateChestStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCUpdateChestStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCUpdateChestStatus::ArenaDtor(void* object) {
  SCUpdateChestStatus* _this = reinterpret_cast< SCUpdateChestStatus* >(object);
  (void)_this;
}
void SCUpdateChestStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCUpdateChestStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCUpdateChestStatus& SCUpdateChestStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCUpdateChestStatus_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCUpdateChestStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCUpdateChestStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chest_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&available_reward_) -
      reinterpret_cast<char*>(&chest_type_)) + sizeof(available_reward_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCUpdateChestStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_active = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .F4BY.ChestType chest_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_chest_type(static_cast<::F4BY::ChestType>(val));
        } else goto handle_unusual;
        continue;
      // int32 total_progress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 remain_progress = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          remain_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool guide = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          guide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 available_reward = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          available_reward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCUpdateChestStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCUpdateChestStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_active = 1;
  if (this->is_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_active(), target);
  }

  // .F4BY.ChestType chest_type = 2;
  if (this->chest_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_chest_type(), target);
  }

  // int32 total_progress = 3;
  if (this->total_progress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_total_progress(), target);
  }

  // int32 remain_progress = 4;
  if (this->remain_progress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_remain_progress(), target);
  }

  // bool guide = 5;
  if (this->guide() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_guide(), target);
  }

  // int32 available_reward = 6;
  if (this->available_reward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_available_reward(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCUpdateChestStatus)
  return target;
}

size_t SCUpdateChestStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCUpdateChestStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .F4BY.ChestType chest_type = 2;
  if (this->chest_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_chest_type());
  }

  // int32 total_progress = 3;
  if (this->total_progress() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_progress());
  }

  // bool is_active = 1;
  if (this->is_active() != 0) {
    total_size += 1 + 1;
  }

  // bool guide = 5;
  if (this->guide() != 0) {
    total_size += 1 + 1;
  }

  // int32 remain_progress = 4;
  if (this->remain_progress() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_remain_progress());
  }

  // int32 available_reward = 6;
  if (this->available_reward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_available_reward());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCUpdateChestStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCUpdateChestStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const SCUpdateChestStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCUpdateChestStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCUpdateChestStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCUpdateChestStatus)
    MergeFrom(*source);
  }
}

void SCUpdateChestStatus::MergeFrom(const SCUpdateChestStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCUpdateChestStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chest_type() != 0) {
    _internal_set_chest_type(from._internal_chest_type());
  }
  if (from.total_progress() != 0) {
    _internal_set_total_progress(from._internal_total_progress());
  }
  if (from.is_active() != 0) {
    _internal_set_is_active(from._internal_is_active());
  }
  if (from.guide() != 0) {
    _internal_set_guide(from._internal_guide());
  }
  if (from.remain_progress() != 0) {
    _internal_set_remain_progress(from._internal_remain_progress());
  }
  if (from.available_reward() != 0) {
    _internal_set_available_reward(from._internal_available_reward());
  }
}

void SCUpdateChestStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCUpdateChestStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCUpdateChestStatus::CopyFrom(const SCUpdateChestStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCUpdateChestStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCUpdateChestStatus::IsInitialized() const {
  return true;
}

void SCUpdateChestStatus::InternalSwap(SCUpdateChestStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCUpdateChestStatus, available_reward_)
      + sizeof(SCUpdateChestStatus::available_reward_)
      - PROTOBUF_FIELD_OFFSET(SCUpdateChestStatus, chest_type_)>(
          reinterpret_cast<char*>(&chest_type_),
          reinterpret_cast<char*>(&other->chest_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCUpdateChestStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSChestConfig::_Internal {
 public:
};

CSChestConfig::CSChestConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSChestConfig)
}
CSChestConfig::CSChestConfig(const CSChestConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:F4BY.CSChestConfig)
}

void CSChestConfig::SharedCtor() {
}

CSChestConfig::~CSChestConfig() {
  // @@protoc_insertion_point(destructor:F4BY.CSChestConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSChestConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSChestConfig::ArenaDtor(void* object) {
  CSChestConfig* _this = reinterpret_cast< CSChestConfig* >(object);
  (void)_this;
}
void CSChestConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSChestConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSChestConfig& CSChestConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSChestConfig_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSChestConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSChestConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSChestConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSChestConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSChestConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSChestConfig)
  return target;
}

size_t CSChestConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSChestConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSChestConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSChestConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CSChestConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSChestConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSChestConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSChestConfig)
    MergeFrom(*source);
  }
}

void CSChestConfig::MergeFrom(const CSChestConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSChestConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSChestConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSChestConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSChestConfig::CopyFrom(const CSChestConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSChestConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSChestConfig::IsInitialized() const {
  return true;
}

void CSChestConfig::InternalSwap(CSChestConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSChestConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChestBrief::_Internal {
 public:
};

ChestBrief::ChestBrief(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reward_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.ChestBrief)
}
ChestBrief::ChestBrief(const ChestBrief& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reward_(from.reward_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chest_type_ = from.chest_type_;
  // @@protoc_insertion_point(copy_constructor:F4BY.ChestBrief)
}

void ChestBrief::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChestBrief_F4BY_2eproto.base);
  chest_type_ = 0;
}

ChestBrief::~ChestBrief() {
  // @@protoc_insertion_point(destructor:F4BY.ChestBrief)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChestBrief::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChestBrief::ArenaDtor(void* object) {
  ChestBrief* _this = reinterpret_cast< ChestBrief* >(object);
  (void)_this;
}
void ChestBrief::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChestBrief::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChestBrief& ChestBrief::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChestBrief_F4BY_2eproto.base);
  return *internal_default_instance();
}


void ChestBrief::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.ChestBrief)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_.Clear();
  chest_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChestBrief::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .F4BY.ChestType chest_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_chest_type(static_cast<::F4BY::ChestType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .F4BY.OpenChestReward reward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reward(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChestBrief::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.ChestBrief)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .F4BY.ChestType chest_type = 1;
  if (this->chest_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_chest_type(), target);
  }

  // repeated .F4BY.OpenChestReward reward = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reward_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_reward(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.ChestBrief)
  return target;
}

size_t ChestBrief::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.ChestBrief)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.OpenChestReward reward = 2;
  total_size += 1UL * this->_internal_reward_size();
  for (const auto& msg : this->reward_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .F4BY.ChestType chest_type = 1;
  if (this->chest_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_chest_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChestBrief::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.ChestBrief)
  GOOGLE_DCHECK_NE(&from, this);
  const ChestBrief* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChestBrief>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.ChestBrief)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.ChestBrief)
    MergeFrom(*source);
  }
}

void ChestBrief::MergeFrom(const ChestBrief& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.ChestBrief)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reward_.MergeFrom(from.reward_);
  if (from.chest_type() != 0) {
    _internal_set_chest_type(from._internal_chest_type());
  }
}

void ChestBrief::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.ChestBrief)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChestBrief::CopyFrom(const ChestBrief& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.ChestBrief)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChestBrief::IsInitialized() const {
  return true;
}

void ChestBrief::InternalSwap(ChestBrief* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reward_.InternalSwap(&other->reward_);
  swap(chest_type_, other->chest_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChestBrief::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCChestConfig::_Internal {
 public:
};

SCChestConfig::SCChestConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  chest_brief_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCChestConfig)
}
SCChestConfig::SCChestConfig(const SCChestConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      chest_brief_list_(from.chest_brief_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&end_time_, &from.end_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_enable_) -
    reinterpret_cast<char*>(&end_time_)) + sizeof(is_enable_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCChestConfig)
}

void SCChestConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCChestConfig_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_enable_) -
      reinterpret_cast<char*>(&end_time_)) + sizeof(is_enable_));
}

SCChestConfig::~SCChestConfig() {
  // @@protoc_insertion_point(destructor:F4BY.SCChestConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCChestConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCChestConfig::ArenaDtor(void* object) {
  SCChestConfig* _this = reinterpret_cast< SCChestConfig* >(object);
  (void)_this;
}
void SCChestConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCChestConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCChestConfig& SCChestConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCChestConfig_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCChestConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCChestConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chest_brief_list_.Clear();
  ::memset(&end_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_enable_) -
      reinterpret_cast<char*>(&end_time_)) + sizeof(is_enable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCChestConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 end_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .F4BY.ChestBrief chest_brief_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chest_brief_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 min_ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          min_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool auto_open = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          auto_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .F4BY.ChestAutoSelectOption auto_option = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_auto_option(static_cast<::F4BY::ChestAutoSelectOption>(val));
        } else goto handle_unusual;
        continue;
      // bool is_enable = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCChestConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCChestConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 end_time = 1;
  if (this->end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_end_time(), target);
  }

  // repeated .F4BY.ChestBrief chest_brief_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chest_brief_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_chest_brief_list(i), target, stream);
  }

  // int32 min_ratio = 3;
  if (this->min_ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_min_ratio(), target);
  }

  // bool auto_open = 4;
  if (this->auto_open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_auto_open(), target);
  }

  // .F4BY.ChestAutoSelectOption auto_option = 5;
  if (this->auto_option() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_auto_option(), target);
  }

  // bool is_enable = 6;
  if (this->is_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCChestConfig)
  return target;
}

size_t SCChestConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCChestConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.ChestBrief chest_brief_list = 2;
  total_size += 1UL * this->_internal_chest_brief_list_size();
  for (const auto& msg : this->chest_brief_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 end_time = 1;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_end_time());
  }

  // int32 min_ratio = 3;
  if (this->min_ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min_ratio());
  }

  // .F4BY.ChestAutoSelectOption auto_option = 5;
  if (this->auto_option() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_auto_option());
  }

  // bool auto_open = 4;
  if (this->auto_open() != 0) {
    total_size += 1 + 1;
  }

  // bool is_enable = 6;
  if (this->is_enable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCChestConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCChestConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SCChestConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCChestConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCChestConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCChestConfig)
    MergeFrom(*source);
  }
}

void SCChestConfig::MergeFrom(const SCChestConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCChestConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chest_brief_list_.MergeFrom(from.chest_brief_list_);
  if (from.end_time() != 0) {
    _internal_set_end_time(from._internal_end_time());
  }
  if (from.min_ratio() != 0) {
    _internal_set_min_ratio(from._internal_min_ratio());
  }
  if (from.auto_option() != 0) {
    _internal_set_auto_option(from._internal_auto_option());
  }
  if (from.auto_open() != 0) {
    _internal_set_auto_open(from._internal_auto_open());
  }
  if (from.is_enable() != 0) {
    _internal_set_is_enable(from._internal_is_enable());
  }
}

void SCChestConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCChestConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCChestConfig::CopyFrom(const SCChestConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCChestConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCChestConfig::IsInitialized() const {
  return true;
}

void SCChestConfig::InternalSwap(SCChestConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  chest_brief_list_.InternalSwap(&other->chest_brief_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCChestConfig, is_enable_)
      + sizeof(SCChestConfig::is_enable_)
      - PROTOBUF_FIELD_OFFSET(SCChestConfig, end_time_)>(
          reinterpret_cast<char*>(&end_time_),
          reinterpret_cast<char*>(&other->end_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCChestConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCOpenChest::_Internal {
 public:
};

SCOpenChest::SCOpenChest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reward_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCOpenChest)
}
SCOpenChest::SCOpenChest(const SCOpenChest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reward_list_(from.reward_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  auto_option_ = from.auto_option_;
  // @@protoc_insertion_point(copy_constructor:F4BY.SCOpenChest)
}

void SCOpenChest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCOpenChest_F4BY_2eproto.base);
  auto_option_ = 0;
}

SCOpenChest::~SCOpenChest() {
  // @@protoc_insertion_point(destructor:F4BY.SCOpenChest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCOpenChest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCOpenChest::ArenaDtor(void* object) {
  SCOpenChest* _this = reinterpret_cast< SCOpenChest* >(object);
  (void)_this;
}
void SCOpenChest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCOpenChest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCOpenChest& SCOpenChest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCOpenChest_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCOpenChest::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCOpenChest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_list_.Clear();
  auto_option_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCOpenChest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .F4BY.OpenChestReward reward_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reward_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .F4BY.ChestAutoSelectOption auto_option = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_auto_option(static_cast<::F4BY::ChestAutoSelectOption>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCOpenChest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCOpenChest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .F4BY.OpenChestReward reward_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reward_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_reward_list(i), target, stream);
  }

  // .F4BY.ChestAutoSelectOption auto_option = 2;
  if (this->auto_option() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_auto_option(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCOpenChest)
  return target;
}

size_t SCOpenChest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCOpenChest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.OpenChestReward reward_list = 1;
  total_size += 1UL * this->_internal_reward_list_size();
  for (const auto& msg : this->reward_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .F4BY.ChestAutoSelectOption auto_option = 2;
  if (this->auto_option() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_auto_option());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCOpenChest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCOpenChest)
  GOOGLE_DCHECK_NE(&from, this);
  const SCOpenChest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCOpenChest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCOpenChest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCOpenChest)
    MergeFrom(*source);
  }
}

void SCOpenChest::MergeFrom(const SCOpenChest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCOpenChest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reward_list_.MergeFrom(from.reward_list_);
  if (from.auto_option() != 0) {
    _internal_set_auto_option(from._internal_auto_option());
  }
}

void SCOpenChest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCOpenChest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCOpenChest::CopyFrom(const SCOpenChest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCOpenChest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCOpenChest::IsInitialized() const {
  return true;
}

void SCOpenChest::InternalSwap(SCOpenChest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reward_list_.InternalSwap(&other->reward_list_);
  swap(auto_option_, other->auto_option_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCOpenChest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSelectChestReward::_Internal {
 public:
};

CSSelectChestReward::CSSelectChestReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSSelectChestReward)
}
CSSelectChestReward::CSSelectChestReward(const CSSelectChestReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  select_index_ = from.select_index_;
  // @@protoc_insertion_point(copy_constructor:F4BY.CSSelectChestReward)
}

void CSSelectChestReward::SharedCtor() {
  select_index_ = 0;
}

CSSelectChestReward::~CSSelectChestReward() {
  // @@protoc_insertion_point(destructor:F4BY.CSSelectChestReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSelectChestReward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSSelectChestReward::ArenaDtor(void* object) {
  CSSelectChestReward* _this = reinterpret_cast< CSSelectChestReward* >(object);
  (void)_this;
}
void CSSelectChestReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSelectChestReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSelectChestReward& CSSelectChestReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSelectChestReward_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSSelectChestReward::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSSelectChestReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  select_index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSelectChestReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 select_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          select_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSelectChestReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSSelectChestReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 select_index = 1;
  if (this->select_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_select_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSSelectChestReward)
  return target;
}

size_t CSSelectChestReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSSelectChestReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 select_index = 1;
  if (this->select_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_select_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSelectChestReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSSelectChestReward)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSelectChestReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSelectChestReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSSelectChestReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSSelectChestReward)
    MergeFrom(*source);
  }
}

void CSSelectChestReward::MergeFrom(const CSSelectChestReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSSelectChestReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.select_index() != 0) {
    _internal_set_select_index(from._internal_select_index());
  }
}

void CSSelectChestReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSSelectChestReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSelectChestReward::CopyFrom(const CSSelectChestReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSSelectChestReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSelectChestReward::IsInitialized() const {
  return true;
}

void CSSelectChestReward::InternalSwap(CSSelectChestReward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(select_index_, other->select_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSelectChestReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSelectChestReward::_Internal {
 public:
  static const ::F4BY::OpenChestReward& reward(const SCSelectChestReward* msg);
};

const ::F4BY::OpenChestReward&
SCSelectChestReward::_Internal::reward(const SCSelectChestReward* msg) {
  return *msg->reward_;
}
SCSelectChestReward::SCSelectChestReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCSelectChestReward)
}
SCSelectChestReward::SCSelectChestReward(const SCSelectChestReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reward()) {
    reward_ = new ::F4BY::OpenChestReward(*from.reward_);
  } else {
    reward_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:F4BY.SCSelectChestReward)
}

void SCSelectChestReward::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCSelectChestReward_F4BY_2eproto.base);
  reward_ = nullptr;
}

SCSelectChestReward::~SCSelectChestReward() {
  // @@protoc_insertion_point(destructor:F4BY.SCSelectChestReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSelectChestReward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete reward_;
}

void SCSelectChestReward::ArenaDtor(void* object) {
  SCSelectChestReward* _this = reinterpret_cast< SCSelectChestReward* >(object);
  (void)_this;
}
void SCSelectChestReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSelectChestReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSelectChestReward& SCSelectChestReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSelectChestReward_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCSelectChestReward::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCSelectChestReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && reward_ != nullptr) {
    delete reward_;
  }
  reward_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSelectChestReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .F4BY.OpenChestReward reward = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reward(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSelectChestReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCSelectChestReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .F4BY.OpenChestReward reward = 1;
  if (this->has_reward()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reward(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCSelectChestReward)
  return target;
}

size_t SCSelectChestReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCSelectChestReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .F4BY.OpenChestReward reward = 1;
  if (this->has_reward()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reward_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSelectChestReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCSelectChestReward)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSelectChestReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSelectChestReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCSelectChestReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCSelectChestReward)
    MergeFrom(*source);
  }
}

void SCSelectChestReward::MergeFrom(const SCSelectChestReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCSelectChestReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_reward()) {
    _internal_mutable_reward()->::F4BY::OpenChestReward::MergeFrom(from._internal_reward());
  }
}

void SCSelectChestReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCSelectChestReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSelectChestReward::CopyFrom(const SCSelectChestReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCSelectChestReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSelectChestReward::IsInitialized() const {
  return true;
}

void SCSelectChestReward::InternalSwap(SCSelectChestReward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(reward_, other->reward_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSelectChestReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSChestSetAutoSelect::_Internal {
 public:
};

CSChestSetAutoSelect::CSChestSetAutoSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSChestSetAutoSelect)
}
CSChestSetAutoSelect::CSChestSetAutoSelect(const CSChestSetAutoSelect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&auto_option_, &from.auto_option_,
    static_cast<size_t>(reinterpret_cast<char*>(&auto_open_) -
    reinterpret_cast<char*>(&auto_option_)) + sizeof(auto_open_));
  // @@protoc_insertion_point(copy_constructor:F4BY.CSChestSetAutoSelect)
}

void CSChestSetAutoSelect::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&auto_option_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&auto_open_) -
      reinterpret_cast<char*>(&auto_option_)) + sizeof(auto_open_));
}

CSChestSetAutoSelect::~CSChestSetAutoSelect() {
  // @@protoc_insertion_point(destructor:F4BY.CSChestSetAutoSelect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSChestSetAutoSelect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSChestSetAutoSelect::ArenaDtor(void* object) {
  CSChestSetAutoSelect* _this = reinterpret_cast< CSChestSetAutoSelect* >(object);
  (void)_this;
}
void CSChestSetAutoSelect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSChestSetAutoSelect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSChestSetAutoSelect& CSChestSetAutoSelect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSChestSetAutoSelect_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSChestSetAutoSelect::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSChestSetAutoSelect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&auto_option_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auto_open_) -
      reinterpret_cast<char*>(&auto_option_)) + sizeof(auto_open_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSChestSetAutoSelect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .F4BY.ChestAutoSelectOption auto_option = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_auto_option(static_cast<::F4BY::ChestAutoSelectOption>(val));
        } else goto handle_unusual;
        continue;
      // bool auto_open = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          auto_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSChestSetAutoSelect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSChestSetAutoSelect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .F4BY.ChestAutoSelectOption auto_option = 1;
  if (this->auto_option() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_auto_option(), target);
  }

  // bool auto_open = 2;
  if (this->auto_open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_auto_open(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSChestSetAutoSelect)
  return target;
}

size_t CSChestSetAutoSelect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSChestSetAutoSelect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .F4BY.ChestAutoSelectOption auto_option = 1;
  if (this->auto_option() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_auto_option());
  }

  // bool auto_open = 2;
  if (this->auto_open() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSChestSetAutoSelect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSChestSetAutoSelect)
  GOOGLE_DCHECK_NE(&from, this);
  const CSChestSetAutoSelect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSChestSetAutoSelect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSChestSetAutoSelect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSChestSetAutoSelect)
    MergeFrom(*source);
  }
}

void CSChestSetAutoSelect::MergeFrom(const CSChestSetAutoSelect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSChestSetAutoSelect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.auto_option() != 0) {
    _internal_set_auto_option(from._internal_auto_option());
  }
  if (from.auto_open() != 0) {
    _internal_set_auto_open(from._internal_auto_open());
  }
}

void CSChestSetAutoSelect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSChestSetAutoSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSChestSetAutoSelect::CopyFrom(const CSChestSetAutoSelect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSChestSetAutoSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSChestSetAutoSelect::IsInitialized() const {
  return true;
}

void CSChestSetAutoSelect::InternalSwap(CSChestSetAutoSelect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSChestSetAutoSelect, auto_open_)
      + sizeof(CSChestSetAutoSelect::auto_open_)
      - PROTOBUF_FIELD_OFFSET(CSChestSetAutoSelect, auto_option_)>(
          reinterpret_cast<char*>(&auto_option_),
          reinterpret_cast<char*>(&other->auto_option_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSChestSetAutoSelect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCChestSetAutoSelect::_Internal {
 public:
};

SCChestSetAutoSelect::SCChestSetAutoSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCChestSetAutoSelect)
}
SCChestSetAutoSelect::SCChestSetAutoSelect(const SCChestSetAutoSelect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&auto_option_, &from.auto_option_,
    static_cast<size_t>(reinterpret_cast<char*>(&auto_open_) -
    reinterpret_cast<char*>(&auto_option_)) + sizeof(auto_open_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCChestSetAutoSelect)
}

void SCChestSetAutoSelect::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&auto_option_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&auto_open_) -
      reinterpret_cast<char*>(&auto_option_)) + sizeof(auto_open_));
}

SCChestSetAutoSelect::~SCChestSetAutoSelect() {
  // @@protoc_insertion_point(destructor:F4BY.SCChestSetAutoSelect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCChestSetAutoSelect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCChestSetAutoSelect::ArenaDtor(void* object) {
  SCChestSetAutoSelect* _this = reinterpret_cast< SCChestSetAutoSelect* >(object);
  (void)_this;
}
void SCChestSetAutoSelect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCChestSetAutoSelect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCChestSetAutoSelect& SCChestSetAutoSelect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCChestSetAutoSelect_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCChestSetAutoSelect::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCChestSetAutoSelect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&auto_option_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auto_open_) -
      reinterpret_cast<char*>(&auto_option_)) + sizeof(auto_open_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCChestSetAutoSelect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .F4BY.ChestAutoSelectOption auto_option = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_auto_option(static_cast<::F4BY::ChestAutoSelectOption>(val));
        } else goto handle_unusual;
        continue;
      // bool auto_open = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          auto_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCChestSetAutoSelect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCChestSetAutoSelect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .F4BY.ChestAutoSelectOption auto_option = 1;
  if (this->auto_option() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_auto_option(), target);
  }

  // bool auto_open = 2;
  if (this->auto_open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_auto_open(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCChestSetAutoSelect)
  return target;
}

size_t SCChestSetAutoSelect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCChestSetAutoSelect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .F4BY.ChestAutoSelectOption auto_option = 1;
  if (this->auto_option() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_auto_option());
  }

  // bool auto_open = 2;
  if (this->auto_open() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCChestSetAutoSelect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCChestSetAutoSelect)
  GOOGLE_DCHECK_NE(&from, this);
  const SCChestSetAutoSelect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCChestSetAutoSelect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCChestSetAutoSelect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCChestSetAutoSelect)
    MergeFrom(*source);
  }
}

void SCChestSetAutoSelect::MergeFrom(const SCChestSetAutoSelect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCChestSetAutoSelect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.auto_option() != 0) {
    _internal_set_auto_option(from._internal_auto_option());
  }
  if (from.auto_open() != 0) {
    _internal_set_auto_open(from._internal_auto_open());
  }
}

void SCChestSetAutoSelect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCChestSetAutoSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCChestSetAutoSelect::CopyFrom(const SCChestSetAutoSelect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCChestSetAutoSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCChestSetAutoSelect::IsInitialized() const {
  return true;
}

void SCChestSetAutoSelect::InternalSwap(SCChestSetAutoSelect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCChestSetAutoSelect, auto_open_)
      + sizeof(SCChestSetAutoSelect::auto_open_)
      - PROTOBUF_FIELD_OFFSET(SCChestSetAutoSelect, auto_option_)>(
          reinterpret_cast<char*>(&auto_option_),
          reinterpret_cast<char*>(&other->auto_option_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCChestSetAutoSelect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSChestSetEnable::_Internal {
 public:
};

CSChestSetEnable::CSChestSetEnable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSChestSetEnable)
}
CSChestSetEnable::CSChestSetEnable(const CSChestSetEnable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_enable_ = from.is_enable_;
  // @@protoc_insertion_point(copy_constructor:F4BY.CSChestSetEnable)
}

void CSChestSetEnable::SharedCtor() {
  is_enable_ = false;
}

CSChestSetEnable::~CSChestSetEnable() {
  // @@protoc_insertion_point(destructor:F4BY.CSChestSetEnable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSChestSetEnable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSChestSetEnable::ArenaDtor(void* object) {
  CSChestSetEnable* _this = reinterpret_cast< CSChestSetEnable* >(object);
  (void)_this;
}
void CSChestSetEnable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSChestSetEnable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSChestSetEnable& CSChestSetEnable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSChestSetEnable_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSChestSetEnable::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSChestSetEnable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_enable_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSChestSetEnable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSChestSetEnable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSChestSetEnable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_enable = 1;
  if (this->is_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSChestSetEnable)
  return target;
}

size_t CSChestSetEnable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSChestSetEnable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_enable = 1;
  if (this->is_enable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSChestSetEnable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSChestSetEnable)
  GOOGLE_DCHECK_NE(&from, this);
  const CSChestSetEnable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSChestSetEnable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSChestSetEnable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSChestSetEnable)
    MergeFrom(*source);
  }
}

void CSChestSetEnable::MergeFrom(const CSChestSetEnable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSChestSetEnable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_enable() != 0) {
    _internal_set_is_enable(from._internal_is_enable());
  }
}

void CSChestSetEnable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSChestSetEnable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSChestSetEnable::CopyFrom(const CSChestSetEnable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSChestSetEnable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSChestSetEnable::IsInitialized() const {
  return true;
}

void CSChestSetEnable::InternalSwap(CSChestSetEnable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(is_enable_, other->is_enable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSChestSetEnable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCChestSetEnable::_Internal {
 public:
};

SCChestSetEnable::SCChestSetEnable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCChestSetEnable)
}
SCChestSetEnable::SCChestSetEnable(const SCChestSetEnable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_enable_ = from.is_enable_;
  // @@protoc_insertion_point(copy_constructor:F4BY.SCChestSetEnable)
}

void SCChestSetEnable::SharedCtor() {
  is_enable_ = false;
}

SCChestSetEnable::~SCChestSetEnable() {
  // @@protoc_insertion_point(destructor:F4BY.SCChestSetEnable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCChestSetEnable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCChestSetEnable::ArenaDtor(void* object) {
  SCChestSetEnable* _this = reinterpret_cast< SCChestSetEnable* >(object);
  (void)_this;
}
void SCChestSetEnable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCChestSetEnable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCChestSetEnable& SCChestSetEnable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCChestSetEnable_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCChestSetEnable::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCChestSetEnable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_enable_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCChestSetEnable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCChestSetEnable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCChestSetEnable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_enable = 1;
  if (this->is_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCChestSetEnable)
  return target;
}

size_t SCChestSetEnable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCChestSetEnable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_enable = 1;
  if (this->is_enable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCChestSetEnable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCChestSetEnable)
  GOOGLE_DCHECK_NE(&from, this);
  const SCChestSetEnable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCChestSetEnable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCChestSetEnable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCChestSetEnable)
    MergeFrom(*source);
  }
}

void SCChestSetEnable::MergeFrom(const SCChestSetEnable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCChestSetEnable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_enable() != 0) {
    _internal_set_is_enable(from._internal_is_enable());
  }
}

void SCChestSetEnable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCChestSetEnable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCChestSetEnable::CopyFrom(const SCChestSetEnable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCChestSetEnable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCChestSetEnable::IsInitialized() const {
  return true;
}

void SCChestSetEnable::InternalSwap(SCChestSetEnable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(is_enable_, other->is_enable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCChestSetEnable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSpecEffect::_Internal {
 public:
};

SCSpecEffect::SCSpecEffect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCSpecEffect)
}
SCSpecEffect::SCSpecEffect(const SCSpecEffect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&costmoney_, &from.costmoney_,
    static_cast<size_t>(reinterpret_cast<char*>(&earnmoney_) -
    reinterpret_cast<char*>(&costmoney_)) + sizeof(earnmoney_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCSpecEffect)
}

void SCSpecEffect::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&costmoney_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&earnmoney_) -
      reinterpret_cast<char*>(&costmoney_)) + sizeof(earnmoney_));
}

SCSpecEffect::~SCSpecEffect() {
  // @@protoc_insertion_point(destructor:F4BY.SCSpecEffect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSpecEffect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCSpecEffect::ArenaDtor(void* object) {
  SCSpecEffect* _this = reinterpret_cast< SCSpecEffect* >(object);
  (void)_this;
}
void SCSpecEffect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSpecEffect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSpecEffect& SCSpecEffect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSpecEffect_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCSpecEffect::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCSpecEffect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&costmoney_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&earnmoney_) -
      reinterpret_cast<char*>(&costmoney_)) + sizeof(earnmoney_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSpecEffect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 costMoney = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          costmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 earnMoney = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          earnmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSpecEffect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCSpecEffect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 costMoney = 1;
  if (this->costmoney() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_costmoney(), target);
  }

  // int32 earnMoney = 2;
  if (this->earnmoney() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_earnmoney(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCSpecEffect)
  return target;
}

size_t SCSpecEffect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCSpecEffect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 costMoney = 1;
  if (this->costmoney() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_costmoney());
  }

  // int32 earnMoney = 2;
  if (this->earnmoney() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_earnmoney());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSpecEffect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCSpecEffect)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSpecEffect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSpecEffect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCSpecEffect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCSpecEffect)
    MergeFrom(*source);
  }
}

void SCSpecEffect::MergeFrom(const SCSpecEffect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCSpecEffect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.costmoney() != 0) {
    _internal_set_costmoney(from._internal_costmoney());
  }
  if (from.earnmoney() != 0) {
    _internal_set_earnmoney(from._internal_earnmoney());
  }
}

void SCSpecEffect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCSpecEffect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSpecEffect::CopyFrom(const SCSpecEffect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCSpecEffect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSpecEffect::IsInitialized() const {
  return true;
}

void SCSpecEffect::InternalSwap(SCSpecEffect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCSpecEffect, earnmoney_)
      + sizeof(SCSpecEffect::earnmoney_)
      - PROTOBUF_FIELD_OFFSET(SCSpecEffect, costmoney_)>(
          reinterpret_cast<char*>(&costmoney_),
          reinterpret_cast<char*>(&other->costmoney_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSpecEffect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCTortoiseExplode::_Internal {
 public:
};

SCTortoiseExplode::SCTortoiseExplode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCTortoiseExplode)
}
SCTortoiseExplode::SCTortoiseExplode(const SCTortoiseExplode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_idx_, &from.chair_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_effect_) -
    reinterpret_cast<char*>(&chair_idx_)) + sizeof(max_effect_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCTortoiseExplode)
}

void SCTortoiseExplode::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&max_effect_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(max_effect_));
}

SCTortoiseExplode::~SCTortoiseExplode() {
  // @@protoc_insertion_point(destructor:F4BY.SCTortoiseExplode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCTortoiseExplode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCTortoiseExplode::ArenaDtor(void* object) {
  SCTortoiseExplode* _this = reinterpret_cast< SCTortoiseExplode* >(object);
  (void)_this;
}
void SCTortoiseExplode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCTortoiseExplode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCTortoiseExplode& SCTortoiseExplode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCTortoiseExplode_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCTortoiseExplode::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCTortoiseExplode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_effect_) -
      reinterpret_cast<char*>(&chair_idx_)) + sizeof(max_effect_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCTortoiseExplode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fish_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bullet_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bullet_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_effect = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          max_effect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCTortoiseExplode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCTortoiseExplode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_idx(), target);
  }

  // int32 fish_uid = 2;
  if (this->fish_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fish_uid(), target);
  }

  // int32 bullet_id = 3;
  if (this->bullet_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_bullet_id(), target);
  }

  // int32 ratio = 4;
  if (this->ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ratio(), target);
  }

  // int32 max_effect = 5;
  if (this->max_effect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_max_effect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCTortoiseExplode)
  return target;
}

size_t SCTortoiseExplode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCTortoiseExplode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_idx = 1;
  if (this->chair_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_idx());
  }

  // int32 fish_uid = 2;
  if (this->fish_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_uid());
  }

  // int32 bullet_id = 3;
  if (this->bullet_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bullet_id());
  }

  // int32 ratio = 4;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ratio());
  }

  // int32 max_effect = 5;
  if (this->max_effect() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_effect());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCTortoiseExplode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCTortoiseExplode)
  GOOGLE_DCHECK_NE(&from, this);
  const SCTortoiseExplode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCTortoiseExplode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCTortoiseExplode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCTortoiseExplode)
    MergeFrom(*source);
  }
}

void SCTortoiseExplode::MergeFrom(const SCTortoiseExplode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCTortoiseExplode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_idx() != 0) {
    _internal_set_chair_idx(from._internal_chair_idx());
  }
  if (from.fish_uid() != 0) {
    _internal_set_fish_uid(from._internal_fish_uid());
  }
  if (from.bullet_id() != 0) {
    _internal_set_bullet_id(from._internal_bullet_id());
  }
  if (from.ratio() != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
  if (from.max_effect() != 0) {
    _internal_set_max_effect(from._internal_max_effect());
  }
}

void SCTortoiseExplode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCTortoiseExplode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCTortoiseExplode::CopyFrom(const SCTortoiseExplode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCTortoiseExplode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCTortoiseExplode::IsInitialized() const {
  return true;
}

void SCTortoiseExplode::InternalSwap(SCTortoiseExplode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCTortoiseExplode, max_effect_)
      + sizeof(SCTortoiseExplode::max_effect_)
      - PROTOBUF_FIELD_OFFSET(SCTortoiseExplode, chair_idx_)>(
          reinterpret_cast<char*>(&chair_idx_),
          reinterpret_cast<char*>(&other->chair_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCTortoiseExplode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RewardInfo::_Internal {
 public:
};

RewardInfo::RewardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.RewardInfo)
}
RewardInfo::RewardInfo(const RewardInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&prop_id_, &from.prop_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&spec_show_) -
    reinterpret_cast<char*>(&prop_id_)) + sizeof(spec_show_));
  // @@protoc_insertion_point(copy_constructor:F4BY.RewardInfo)
}

void RewardInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&prop_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&spec_show_) -
      reinterpret_cast<char*>(&prop_id_)) + sizeof(spec_show_));
}

RewardInfo::~RewardInfo() {
  // @@protoc_insertion_point(destructor:F4BY.RewardInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RewardInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RewardInfo::ArenaDtor(void* object) {
  RewardInfo* _this = reinterpret_cast< RewardInfo* >(object);
  (void)_this;
}
void RewardInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RewardInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RewardInfo& RewardInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RewardInfo_F4BY_2eproto.base);
  return *internal_default_instance();
}


void RewardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.RewardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&prop_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spec_show_) -
      reinterpret_cast<char*>(&prop_id_)) + sizeof(spec_show_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RewardInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 prop_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          prop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 prop_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          prop_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 quality = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool spec_show = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          spec_show_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RewardInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.RewardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 prop_id = 1;
  if (this->prop_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_prop_id(), target);
  }

  // int32 prop_num = 2;
  if (this->prop_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_prop_num(), target);
  }

  // int32 quality = 3;
  if (this->quality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_quality(), target);
  }

  // bool spec_show = 4;
  if (this->spec_show() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_spec_show(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.RewardInfo)
  return target;
}

size_t RewardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.RewardInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 prop_id = 1;
  if (this->prop_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prop_id());
  }

  // int32 prop_num = 2;
  if (this->prop_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prop_num());
  }

  // int32 quality = 3;
  if (this->quality() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_quality());
  }

  // bool spec_show = 4;
  if (this->spec_show() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RewardInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.RewardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RewardInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RewardInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.RewardInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.RewardInfo)
    MergeFrom(*source);
  }
}

void RewardInfo::MergeFrom(const RewardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.RewardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prop_id() != 0) {
    _internal_set_prop_id(from._internal_prop_id());
  }
  if (from.prop_num() != 0) {
    _internal_set_prop_num(from._internal_prop_num());
  }
  if (from.quality() != 0) {
    _internal_set_quality(from._internal_quality());
  }
  if (from.spec_show() != 0) {
    _internal_set_spec_show(from._internal_spec_show());
  }
}

void RewardInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.RewardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardInfo::CopyFrom(const RewardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.RewardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardInfo::IsInitialized() const {
  return true;
}

void RewardInfo::InternalSwap(RewardInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RewardInfo, spec_show_)
      + sizeof(RewardInfo::spec_show_)
      - PROTOBUF_FIELD_OFFSET(RewardInfo, prop_id_)>(
          reinterpret_cast<char*>(&prop_id_),
          reinterpret_cast<char*>(&other->prop_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RewardInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MissionInfo::_Internal {
 public:
};

MissionInfo::MissionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reward_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.MissionInfo)
}
MissionInfo::MissionInfo(const MissionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reward_list_(from.reward_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&draw_times_, &from.draw_times_,
    static_cast<size_t>(reinterpret_cast<char*>(&mission_id_) -
    reinterpret_cast<char*>(&draw_times_)) + sizeof(mission_id_));
  // @@protoc_insertion_point(copy_constructor:F4BY.MissionInfo)
}

void MissionInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MissionInfo_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&draw_times_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&mission_id_) -
      reinterpret_cast<char*>(&draw_times_)) + sizeof(mission_id_));
}

MissionInfo::~MissionInfo() {
  // @@protoc_insertion_point(destructor:F4BY.MissionInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MissionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MissionInfo::ArenaDtor(void* object) {
  MissionInfo* _this = reinterpret_cast< MissionInfo* >(object);
  (void)_this;
}
void MissionInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MissionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MissionInfo& MissionInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MissionInfo_F4BY_2eproto.base);
  return *internal_default_instance();
}


void MissionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.MissionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_list_.Clear();
  ::memset(&draw_times_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mission_id_) -
      reinterpret_cast<char*>(&draw_times_)) + sizeof(mission_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MissionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 draw_times = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          draw_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .F4BY.RewardInfo reward_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reward_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bool complete = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          complete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool receive = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          receive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mission_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          mission_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MissionInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.MissionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 draw_times = 1;
  if (this->draw_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_draw_times(), target);
  }

  // repeated .F4BY.RewardInfo reward_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reward_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_reward_list(i), target, stream);
  }

  // bool complete = 3;
  if (this->complete() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_complete(), target);
  }

  // bool receive = 4;
  if (this->receive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_receive(), target);
  }

  // int32 mission_id = 5;
  if (this->mission_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_mission_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.MissionInfo)
  return target;
}

size_t MissionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.MissionInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.RewardInfo reward_list = 2;
  total_size += 1UL * this->_internal_reward_list_size();
  for (const auto& msg : this->reward_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 draw_times = 1;
  if (this->draw_times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_draw_times());
  }

  // bool complete = 3;
  if (this->complete() != 0) {
    total_size += 1 + 1;
  }

  // bool receive = 4;
  if (this->receive() != 0) {
    total_size += 1 + 1;
  }

  // int32 mission_id = 5;
  if (this->mission_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mission_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MissionInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.MissionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MissionInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MissionInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.MissionInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.MissionInfo)
    MergeFrom(*source);
  }
}

void MissionInfo::MergeFrom(const MissionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.MissionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reward_list_.MergeFrom(from.reward_list_);
  if (from.draw_times() != 0) {
    _internal_set_draw_times(from._internal_draw_times());
  }
  if (from.complete() != 0) {
    _internal_set_complete(from._internal_complete());
  }
  if (from.receive() != 0) {
    _internal_set_receive(from._internal_receive());
  }
  if (from.mission_id() != 0) {
    _internal_set_mission_id(from._internal_mission_id());
  }
}

void MissionInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.MissionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionInfo::CopyFrom(const MissionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.MissionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionInfo::IsInitialized() const {
  return true;
}

void MissionInfo::InternalSwap(MissionInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reward_list_.InternalSwap(&other->reward_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MissionInfo, mission_id_)
      + sizeof(MissionInfo::mission_id_)
      - PROTOBUF_FIELD_OFFSET(MissionInfo, draw_times_)>(
          reinterpret_cast<char*>(&draw_times_),
          reinterpret_cast<char*>(&other->draw_times_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MissionInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BigRewardInfo::_Internal {
 public:
};

BigRewardInfo::BigRewardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  draw_rewardlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.BigRewardInfo)
}
BigRewardInfo::BigRewardInfo(const BigRewardInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      draw_rewardlist_(from.draw_rewardlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  big_reward_times_ = from.big_reward_times_;
  // @@protoc_insertion_point(copy_constructor:F4BY.BigRewardInfo)
}

void BigRewardInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BigRewardInfo_F4BY_2eproto.base);
  big_reward_times_ = 0;
}

BigRewardInfo::~BigRewardInfo() {
  // @@protoc_insertion_point(destructor:F4BY.BigRewardInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BigRewardInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BigRewardInfo::ArenaDtor(void* object) {
  BigRewardInfo* _this = reinterpret_cast< BigRewardInfo* >(object);
  (void)_this;
}
void BigRewardInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BigRewardInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BigRewardInfo& BigRewardInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BigRewardInfo_F4BY_2eproto.base);
  return *internal_default_instance();
}


void BigRewardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.BigRewardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  draw_rewardlist_.Clear();
  big_reward_times_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BigRewardInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 big_reward_times = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          big_reward_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .F4BY.RewardInfo draw_rewardList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_draw_rewardlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BigRewardInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.BigRewardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 big_reward_times = 1;
  if (this->big_reward_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_big_reward_times(), target);
  }

  // repeated .F4BY.RewardInfo draw_rewardList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_draw_rewardlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_draw_rewardlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.BigRewardInfo)
  return target;
}

size_t BigRewardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.BigRewardInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.RewardInfo draw_rewardList = 2;
  total_size += 1UL * this->_internal_draw_rewardlist_size();
  for (const auto& msg : this->draw_rewardlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 big_reward_times = 1;
  if (this->big_reward_times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_big_reward_times());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BigRewardInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.BigRewardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BigRewardInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BigRewardInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.BigRewardInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.BigRewardInfo)
    MergeFrom(*source);
  }
}

void BigRewardInfo::MergeFrom(const BigRewardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.BigRewardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  draw_rewardlist_.MergeFrom(from.draw_rewardlist_);
  if (from.big_reward_times() != 0) {
    _internal_set_big_reward_times(from._internal_big_reward_times());
  }
}

void BigRewardInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.BigRewardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigRewardInfo::CopyFrom(const BigRewardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.BigRewardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigRewardInfo::IsInitialized() const {
  return true;
}

void BigRewardInfo::InternalSwap(BigRewardInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  draw_rewardlist_.InternalSwap(&other->draw_rewardlist_);
  swap(big_reward_times_, other->big_reward_times_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BigRewardInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TreasureHuntConfig::_Internal {
 public:
  static const ::F4BY::BigRewardInfo& big_reward_info(const TreasureHuntConfig* msg);
};

const ::F4BY::BigRewardInfo&
TreasureHuntConfig::_Internal::big_reward_info(const TreasureHuntConfig* msg) {
  return *msg->big_reward_info_;
}
TreasureHuntConfig::TreasureHuntConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reward_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.TreasureHuntConfig)
}
TreasureHuntConfig::TreasureHuntConfig(const TreasureHuntConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reward_list_(from.reward_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_big_reward_info()) {
    big_reward_info_ = new ::F4BY::BigRewardInfo(*from.big_reward_info_);
  } else {
    big_reward_info_ = nullptr;
  }
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&topic_) -
    reinterpret_cast<char*>(&term_)) + sizeof(topic_));
  // @@protoc_insertion_point(copy_constructor:F4BY.TreasureHuntConfig)
}

void TreasureHuntConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TreasureHuntConfig_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&big_reward_info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&topic_) -
      reinterpret_cast<char*>(&big_reward_info_)) + sizeof(topic_));
}

TreasureHuntConfig::~TreasureHuntConfig() {
  // @@protoc_insertion_point(destructor:F4BY.TreasureHuntConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TreasureHuntConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete big_reward_info_;
}

void TreasureHuntConfig::ArenaDtor(void* object) {
  TreasureHuntConfig* _this = reinterpret_cast< TreasureHuntConfig* >(object);
  (void)_this;
}
void TreasureHuntConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TreasureHuntConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TreasureHuntConfig& TreasureHuntConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TreasureHuntConfig_F4BY_2eproto.base);
  return *internal_default_instance();
}


void TreasureHuntConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.TreasureHuntConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_list_.Clear();
  if (GetArena() == nullptr && big_reward_info_ != nullptr) {
    delete big_reward_info_;
  }
  big_reward_info_ = nullptr;
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&topic_) -
      reinterpret_cast<char*>(&term_)) + sizeof(topic_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TreasureHuntConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 start_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 end_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .F4BY.BigRewardInfo big_reward_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_big_reward_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .F4BY.RewardInfo reward_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reward_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 min_draw = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          min_draw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_draw = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          max_draw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 topic = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          topic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TreasureHuntConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.TreasureHuntConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_term(), target);
  }

  // int32 start_time = 2;
  if (this->start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_start_time(), target);
  }

  // int32 end_time = 3;
  if (this->end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_end_time(), target);
  }

  // bool enable = 4;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_enable(), target);
  }

  // .F4BY.BigRewardInfo big_reward_info = 5;
  if (this->has_big_reward_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::big_reward_info(this), target, stream);
  }

  // repeated .F4BY.RewardInfo reward_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reward_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_reward_list(i), target, stream);
  }

  // int32 min_draw = 7;
  if (this->min_draw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_min_draw(), target);
  }

  // int32 max_draw = 8;
  if (this->max_draw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_max_draw(), target);
  }

  // int32 topic = 9;
  if (this->topic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_topic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.TreasureHuntConfig)
  return target;
}

size_t TreasureHuntConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.TreasureHuntConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.RewardInfo reward_list = 6;
  total_size += 1UL * this->_internal_reward_list_size();
  for (const auto& msg : this->reward_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .F4BY.BigRewardInfo big_reward_info = 5;
  if (this->has_big_reward_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *big_reward_info_);
  }

  // int32 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_term());
  }

  // int32 start_time = 2;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start_time());
  }

  // int32 end_time = 3;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_end_time());
  }

  // bool enable = 4;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // int32 min_draw = 7;
  if (this->min_draw() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min_draw());
  }

  // int32 max_draw = 8;
  if (this->max_draw() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_draw());
  }

  // int32 topic = 9;
  if (this->topic() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_topic());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TreasureHuntConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.TreasureHuntConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TreasureHuntConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TreasureHuntConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.TreasureHuntConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.TreasureHuntConfig)
    MergeFrom(*source);
  }
}

void TreasureHuntConfig::MergeFrom(const TreasureHuntConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.TreasureHuntConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reward_list_.MergeFrom(from.reward_list_);
  if (from.has_big_reward_info()) {
    _internal_mutable_big_reward_info()->::F4BY::BigRewardInfo::MergeFrom(from._internal_big_reward_info());
  }
  if (from.term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from.start_time() != 0) {
    _internal_set_start_time(from._internal_start_time());
  }
  if (from.end_time() != 0) {
    _internal_set_end_time(from._internal_end_time());
  }
  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
  if (from.min_draw() != 0) {
    _internal_set_min_draw(from._internal_min_draw());
  }
  if (from.max_draw() != 0) {
    _internal_set_max_draw(from._internal_max_draw());
  }
  if (from.topic() != 0) {
    _internal_set_topic(from._internal_topic());
  }
}

void TreasureHuntConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.TreasureHuntConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureHuntConfig::CopyFrom(const TreasureHuntConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.TreasureHuntConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureHuntConfig::IsInitialized() const {
  return true;
}

void TreasureHuntConfig::InternalSwap(TreasureHuntConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reward_list_.InternalSwap(&other->reward_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TreasureHuntConfig, topic_)
      + sizeof(TreasureHuntConfig::topic_)
      - PROTOBUF_FIELD_OFFSET(TreasureHuntConfig, big_reward_info_)>(
          reinterpret_cast<char*>(&big_reward_info_),
          reinterpret_cast<char*>(&other->big_reward_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TreasureHuntConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSyncConfigs::_Internal {
 public:
};

CSSyncConfigs::CSSyncConfigs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSSyncConfigs)
}
CSSyncConfigs::CSSyncConfigs(const CSSyncConfigs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  config_type_ = from.config_type_;
  // @@protoc_insertion_point(copy_constructor:F4BY.CSSyncConfigs)
}

void CSSyncConfigs::SharedCtor() {
  config_type_ = 0;
}

CSSyncConfigs::~CSSyncConfigs() {
  // @@protoc_insertion_point(destructor:F4BY.CSSyncConfigs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSyncConfigs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSSyncConfigs::ArenaDtor(void* object) {
  CSSyncConfigs* _this = reinterpret_cast< CSSyncConfigs* >(object);
  (void)_this;
}
void CSSyncConfigs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSyncConfigs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSyncConfigs& CSSyncConfigs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSyncConfigs_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSSyncConfigs::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSSyncConfigs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSyncConfigs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 config_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          config_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSyncConfigs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSSyncConfigs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 config_type = 1;
  if (this->config_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_config_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSSyncConfigs)
  return target;
}

size_t CSSyncConfigs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSSyncConfigs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 config_type = 1;
  if (this->config_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_config_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSyncConfigs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSSyncConfigs)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSyncConfigs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSyncConfigs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSSyncConfigs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSSyncConfigs)
    MergeFrom(*source);
  }
}

void CSSyncConfigs::MergeFrom(const CSSyncConfigs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSSyncConfigs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.config_type() != 0) {
    _internal_set_config_type(from._internal_config_type());
  }
}

void CSSyncConfigs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSSyncConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSyncConfigs::CopyFrom(const CSSyncConfigs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSSyncConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSyncConfigs::IsInitialized() const {
  return true;
}

void CSSyncConfigs::InternalSwap(CSSyncConfigs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(config_type_, other->config_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSyncConfigs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCSyncConfigs::_Internal {
 public:
  static const ::F4BY::TreasureHuntConfig& treasure_config(const SCSyncConfigs* msg);
};

const ::F4BY::TreasureHuntConfig&
SCSyncConfigs::_Internal::treasure_config(const SCSyncConfigs* msg) {
  return *msg->treasure_config_;
}
SCSyncConfigs::SCSyncConfigs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCSyncConfigs)
}
SCSyncConfigs::SCSyncConfigs(const SCSyncConfigs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_treasure_config()) {
    treasure_config_ = new ::F4BY::TreasureHuntConfig(*from.treasure_config_);
  } else {
    treasure_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:F4BY.SCSyncConfigs)
}

void SCSyncConfigs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCSyncConfigs_F4BY_2eproto.base);
  treasure_config_ = nullptr;
}

SCSyncConfigs::~SCSyncConfigs() {
  // @@protoc_insertion_point(destructor:F4BY.SCSyncConfigs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCSyncConfigs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete treasure_config_;
}

void SCSyncConfigs::ArenaDtor(void* object) {
  SCSyncConfigs* _this = reinterpret_cast< SCSyncConfigs* >(object);
  (void)_this;
}
void SCSyncConfigs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCSyncConfigs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCSyncConfigs& SCSyncConfigs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCSyncConfigs_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCSyncConfigs::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCSyncConfigs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && treasure_config_ != nullptr) {
    delete treasure_config_;
  }
  treasure_config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCSyncConfigs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .F4BY.TreasureHuntConfig treasure_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_treasure_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCSyncConfigs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCSyncConfigs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .F4BY.TreasureHuntConfig treasure_config = 1;
  if (this->has_treasure_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::treasure_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCSyncConfigs)
  return target;
}

size_t SCSyncConfigs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCSyncConfigs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .F4BY.TreasureHuntConfig treasure_config = 1;
  if (this->has_treasure_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *treasure_config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCSyncConfigs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCSyncConfigs)
  GOOGLE_DCHECK_NE(&from, this);
  const SCSyncConfigs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCSyncConfigs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCSyncConfigs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCSyncConfigs)
    MergeFrom(*source);
  }
}

void SCSyncConfigs::MergeFrom(const SCSyncConfigs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCSyncConfigs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_treasure_config()) {
    _internal_mutable_treasure_config()->::F4BY::TreasureHuntConfig::MergeFrom(from._internal_treasure_config());
  }
}

void SCSyncConfigs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCSyncConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSyncConfigs::CopyFrom(const SCSyncConfigs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCSyncConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSyncConfigs::IsInitialized() const {
  return true;
}

void SCSyncConfigs::InternalSwap(SCSyncConfigs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(treasure_config_, other->treasure_config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCSyncConfigs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSDrawReward::_Internal {
 public:
};

CSDrawReward::CSDrawReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSDrawReward)
}
CSDrawReward::CSDrawReward(const CSDrawReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&num_, &from.num_,
    static_cast<size_t>(reinterpret_cast<char*>(&draw_type_) -
    reinterpret_cast<char*>(&num_)) + sizeof(draw_type_));
  // @@protoc_insertion_point(copy_constructor:F4BY.CSDrawReward)
}

void CSDrawReward::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&num_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&draw_type_) -
      reinterpret_cast<char*>(&num_)) + sizeof(draw_type_));
}

CSDrawReward::~CSDrawReward() {
  // @@protoc_insertion_point(destructor:F4BY.CSDrawReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSDrawReward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSDrawReward::ArenaDtor(void* object) {
  CSDrawReward* _this = reinterpret_cast< CSDrawReward* >(object);
  (void)_this;
}
void CSDrawReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSDrawReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSDrawReward& CSDrawReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSDrawReward_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSDrawReward::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSDrawReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&draw_type_) -
      reinterpret_cast<char*>(&num_)) + sizeof(draw_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDrawReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 draw_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          draw_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSDrawReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSDrawReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num = 1;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num(), target);
  }

  // int32 draw_type = 2;
  if (this->draw_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_draw_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSDrawReward)
  return target;
}

size_t CSDrawReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSDrawReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 num = 1;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  // int32 draw_type = 2;
  if (this->draw_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_draw_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSDrawReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSDrawReward)
  GOOGLE_DCHECK_NE(&from, this);
  const CSDrawReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSDrawReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSDrawReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSDrawReward)
    MergeFrom(*source);
  }
}

void CSDrawReward::MergeFrom(const CSDrawReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSDrawReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
  if (from.draw_type() != 0) {
    _internal_set_draw_type(from._internal_draw_type());
  }
}

void CSDrawReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSDrawReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDrawReward::CopyFrom(const CSDrawReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSDrawReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDrawReward::IsInitialized() const {
  return true;
}

void CSDrawReward::InternalSwap(CSDrawReward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDrawReward, draw_type_)
      + sizeof(CSDrawReward::draw_type_)
      - PROTOBUF_FIELD_OFFSET(CSDrawReward, num_)>(
          reinterpret_cast<char*>(&num_),
          reinterpret_cast<char*>(&other->num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDrawReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCDrawReward::_Internal {
 public:
};

SCDrawReward::SCDrawReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reward_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCDrawReward)
}
SCDrawReward::SCDrawReward(const SCDrawReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reward_list_(from.reward_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:F4BY.SCDrawReward)
}

void SCDrawReward::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCDrawReward_F4BY_2eproto.base);
}

SCDrawReward::~SCDrawReward() {
  // @@protoc_insertion_point(destructor:F4BY.SCDrawReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCDrawReward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCDrawReward::ArenaDtor(void* object) {
  SCDrawReward* _this = reinterpret_cast< SCDrawReward* >(object);
  (void)_this;
}
void SCDrawReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCDrawReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCDrawReward& SCDrawReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCDrawReward_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCDrawReward::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCDrawReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCDrawReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .F4BY.RewardInfo reward_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reward_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCDrawReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCDrawReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .F4BY.RewardInfo reward_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reward_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_reward_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCDrawReward)
  return target;
}

size_t SCDrawReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCDrawReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.RewardInfo reward_list = 1;
  total_size += 1UL * this->_internal_reward_list_size();
  for (const auto& msg : this->reward_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCDrawReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCDrawReward)
  GOOGLE_DCHECK_NE(&from, this);
  const SCDrawReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCDrawReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCDrawReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCDrawReward)
    MergeFrom(*source);
  }
}

void SCDrawReward::MergeFrom(const SCDrawReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCDrawReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reward_list_.MergeFrom(from.reward_list_);
}

void SCDrawReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCDrawReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCDrawReward::CopyFrom(const SCDrawReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCDrawReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCDrawReward::IsInitialized() const {
  return true;
}

void SCDrawReward::InternalSwap(SCDrawReward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reward_list_.InternalSwap(&other->reward_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCDrawReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSTreasureHuntMission::_Internal {
 public:
};

CSTreasureHuntMission::CSTreasureHuntMission(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSTreasureHuntMission)
}
CSTreasureHuntMission::CSTreasureHuntMission(const CSTreasureHuntMission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:F4BY.CSTreasureHuntMission)
}

void CSTreasureHuntMission::SharedCtor() {
}

CSTreasureHuntMission::~CSTreasureHuntMission() {
  // @@protoc_insertion_point(destructor:F4BY.CSTreasureHuntMission)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSTreasureHuntMission::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSTreasureHuntMission::ArenaDtor(void* object) {
  CSTreasureHuntMission* _this = reinterpret_cast< CSTreasureHuntMission* >(object);
  (void)_this;
}
void CSTreasureHuntMission::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSTreasureHuntMission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSTreasureHuntMission& CSTreasureHuntMission::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSTreasureHuntMission_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSTreasureHuntMission::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSTreasureHuntMission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSTreasureHuntMission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSTreasureHuntMission::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSTreasureHuntMission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSTreasureHuntMission)
  return target;
}

size_t CSTreasureHuntMission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSTreasureHuntMission)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSTreasureHuntMission::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSTreasureHuntMission)
  GOOGLE_DCHECK_NE(&from, this);
  const CSTreasureHuntMission* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSTreasureHuntMission>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSTreasureHuntMission)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSTreasureHuntMission)
    MergeFrom(*source);
  }
}

void CSTreasureHuntMission::MergeFrom(const CSTreasureHuntMission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSTreasureHuntMission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSTreasureHuntMission::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSTreasureHuntMission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTreasureHuntMission::CopyFrom(const CSTreasureHuntMission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSTreasureHuntMission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTreasureHuntMission::IsInitialized() const {
  return true;
}

void CSTreasureHuntMission::InternalSwap(CSTreasureHuntMission* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSTreasureHuntMission::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCTreasureHuntMission::_Internal {
 public:
};

SCTreasureHuntMission::SCTreasureHuntMission(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mission_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCTreasureHuntMission)
}
SCTreasureHuntMission::SCTreasureHuntMission(const SCTreasureHuntMission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mission_list_(from.mission_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  draw_times_ = from.draw_times_;
  // @@protoc_insertion_point(copy_constructor:F4BY.SCTreasureHuntMission)
}

void SCTreasureHuntMission::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCTreasureHuntMission_F4BY_2eproto.base);
  draw_times_ = 0;
}

SCTreasureHuntMission::~SCTreasureHuntMission() {
  // @@protoc_insertion_point(destructor:F4BY.SCTreasureHuntMission)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCTreasureHuntMission::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCTreasureHuntMission::ArenaDtor(void* object) {
  SCTreasureHuntMission* _this = reinterpret_cast< SCTreasureHuntMission* >(object);
  (void)_this;
}
void SCTreasureHuntMission::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCTreasureHuntMission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCTreasureHuntMission& SCTreasureHuntMission::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCTreasureHuntMission_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCTreasureHuntMission::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCTreasureHuntMission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mission_list_.Clear();
  draw_times_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCTreasureHuntMission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .F4BY.MissionInfo mission_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mission_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 draw_times = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          draw_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCTreasureHuntMission::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCTreasureHuntMission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .F4BY.MissionInfo mission_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mission_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_mission_list(i), target, stream);
  }

  // int32 draw_times = 2;
  if (this->draw_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_draw_times(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCTreasureHuntMission)
  return target;
}

size_t SCTreasureHuntMission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCTreasureHuntMission)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.MissionInfo mission_list = 1;
  total_size += 1UL * this->_internal_mission_list_size();
  for (const auto& msg : this->mission_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 draw_times = 2;
  if (this->draw_times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_draw_times());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCTreasureHuntMission::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCTreasureHuntMission)
  GOOGLE_DCHECK_NE(&from, this);
  const SCTreasureHuntMission* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCTreasureHuntMission>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCTreasureHuntMission)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCTreasureHuntMission)
    MergeFrom(*source);
  }
}

void SCTreasureHuntMission::MergeFrom(const SCTreasureHuntMission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCTreasureHuntMission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mission_list_.MergeFrom(from.mission_list_);
  if (from.draw_times() != 0) {
    _internal_set_draw_times(from._internal_draw_times());
  }
}

void SCTreasureHuntMission::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCTreasureHuntMission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCTreasureHuntMission::CopyFrom(const SCTreasureHuntMission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCTreasureHuntMission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCTreasureHuntMission::IsInitialized() const {
  return true;
}

void SCTreasureHuntMission::InternalSwap(SCTreasureHuntMission* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mission_list_.InternalSwap(&other->mission_list_);
  swap(draw_times_, other->draw_times_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCTreasureHuntMission::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSReceiveMissionReward::_Internal {
 public:
};

CSReceiveMissionReward::CSReceiveMissionReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSReceiveMissionReward)
}
CSReceiveMissionReward::CSReceiveMissionReward(const CSReceiveMissionReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mission_id_ = from.mission_id_;
  // @@protoc_insertion_point(copy_constructor:F4BY.CSReceiveMissionReward)
}

void CSReceiveMissionReward::SharedCtor() {
  mission_id_ = 0;
}

CSReceiveMissionReward::~CSReceiveMissionReward() {
  // @@protoc_insertion_point(destructor:F4BY.CSReceiveMissionReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSReceiveMissionReward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSReceiveMissionReward::ArenaDtor(void* object) {
  CSReceiveMissionReward* _this = reinterpret_cast< CSReceiveMissionReward* >(object);
  (void)_this;
}
void CSReceiveMissionReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSReceiveMissionReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSReceiveMissionReward& CSReceiveMissionReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSReceiveMissionReward_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSReceiveMissionReward::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSReceiveMissionReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mission_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSReceiveMissionReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mission_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mission_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSReceiveMissionReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSReceiveMissionReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mission_id = 1;
  if (this->mission_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mission_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSReceiveMissionReward)
  return target;
}

size_t CSReceiveMissionReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSReceiveMissionReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 mission_id = 1;
  if (this->mission_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mission_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSReceiveMissionReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSReceiveMissionReward)
  GOOGLE_DCHECK_NE(&from, this);
  const CSReceiveMissionReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSReceiveMissionReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSReceiveMissionReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSReceiveMissionReward)
    MergeFrom(*source);
  }
}

void CSReceiveMissionReward::MergeFrom(const CSReceiveMissionReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSReceiveMissionReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mission_id() != 0) {
    _internal_set_mission_id(from._internal_mission_id());
  }
}

void CSReceiveMissionReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSReceiveMissionReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSReceiveMissionReward::CopyFrom(const CSReceiveMissionReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSReceiveMissionReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReceiveMissionReward::IsInitialized() const {
  return true;
}

void CSReceiveMissionReward::InternalSwap(CSReceiveMissionReward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(mission_id_, other->mission_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSReceiveMissionReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCReceiveMissionReward::_Internal {
 public:
};

SCReceiveMissionReward::SCReceiveMissionReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reward_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCReceiveMissionReward)
}
SCReceiveMissionReward::SCReceiveMissionReward(const SCReceiveMissionReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reward_list_(from.reward_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:F4BY.SCReceiveMissionReward)
}

void SCReceiveMissionReward::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCReceiveMissionReward_F4BY_2eproto.base);
}

SCReceiveMissionReward::~SCReceiveMissionReward() {
  // @@protoc_insertion_point(destructor:F4BY.SCReceiveMissionReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCReceiveMissionReward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCReceiveMissionReward::ArenaDtor(void* object) {
  SCReceiveMissionReward* _this = reinterpret_cast< SCReceiveMissionReward* >(object);
  (void)_this;
}
void SCReceiveMissionReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCReceiveMissionReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCReceiveMissionReward& SCReceiveMissionReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCReceiveMissionReward_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCReceiveMissionReward::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCReceiveMissionReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCReceiveMissionReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .F4BY.RewardInfo reward_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reward_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCReceiveMissionReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCReceiveMissionReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .F4BY.RewardInfo reward_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reward_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_reward_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCReceiveMissionReward)
  return target;
}

size_t SCReceiveMissionReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCReceiveMissionReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.RewardInfo reward_list = 1;
  total_size += 1UL * this->_internal_reward_list_size();
  for (const auto& msg : this->reward_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCReceiveMissionReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCReceiveMissionReward)
  GOOGLE_DCHECK_NE(&from, this);
  const SCReceiveMissionReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCReceiveMissionReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCReceiveMissionReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCReceiveMissionReward)
    MergeFrom(*source);
  }
}

void SCReceiveMissionReward::MergeFrom(const SCReceiveMissionReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCReceiveMissionReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reward_list_.MergeFrom(from.reward_list_);
}

void SCReceiveMissionReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCReceiveMissionReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCReceiveMissionReward::CopyFrom(const SCReceiveMissionReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCReceiveMissionReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCReceiveMissionReward::IsInitialized() const {
  return true;
}

void SCReceiveMissionReward::InternalSwap(SCReceiveMissionReward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reward_list_.InternalSwap(&other->reward_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCReceiveMissionReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSDrawTimes::_Internal {
 public:
};

CSDrawTimes::CSDrawTimes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSDrawTimes)
}
CSDrawTimes::CSDrawTimes(const CSDrawTimes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:F4BY.CSDrawTimes)
}

void CSDrawTimes::SharedCtor() {
}

CSDrawTimes::~CSDrawTimes() {
  // @@protoc_insertion_point(destructor:F4BY.CSDrawTimes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSDrawTimes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSDrawTimes::ArenaDtor(void* object) {
  CSDrawTimes* _this = reinterpret_cast< CSDrawTimes* >(object);
  (void)_this;
}
void CSDrawTimes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSDrawTimes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSDrawTimes& CSDrawTimes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSDrawTimes_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSDrawTimes::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSDrawTimes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDrawTimes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSDrawTimes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSDrawTimes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSDrawTimes)
  return target;
}

size_t CSDrawTimes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSDrawTimes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSDrawTimes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSDrawTimes)
  GOOGLE_DCHECK_NE(&from, this);
  const CSDrawTimes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSDrawTimes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSDrawTimes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSDrawTimes)
    MergeFrom(*source);
  }
}

void CSDrawTimes::MergeFrom(const CSDrawTimes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSDrawTimes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSDrawTimes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSDrawTimes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDrawTimes::CopyFrom(const CSDrawTimes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSDrawTimes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDrawTimes::IsInitialized() const {
  return true;
}

void CSDrawTimes::InternalSwap(CSDrawTimes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDrawTimes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCDrawTimes::_Internal {
 public:
};

SCDrawTimes::SCDrawTimes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCDrawTimes)
}
SCDrawTimes::SCDrawTimes(const SCDrawTimes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_draw_times_, &from.total_draw_times_,
    static_cast<size_t>(reinterpret_cast<char*>(&draw_tickers_num_) -
    reinterpret_cast<char*>(&total_draw_times_)) + sizeof(draw_tickers_num_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCDrawTimes)
}

void SCDrawTimes::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&total_draw_times_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&draw_tickers_num_) -
      reinterpret_cast<char*>(&total_draw_times_)) + sizeof(draw_tickers_num_));
}

SCDrawTimes::~SCDrawTimes() {
  // @@protoc_insertion_point(destructor:F4BY.SCDrawTimes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCDrawTimes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCDrawTimes::ArenaDtor(void* object) {
  SCDrawTimes* _this = reinterpret_cast< SCDrawTimes* >(object);
  (void)_this;
}
void SCDrawTimes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCDrawTimes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCDrawTimes& SCDrawTimes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCDrawTimes_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCDrawTimes::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCDrawTimes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&total_draw_times_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&draw_tickers_num_) -
      reinterpret_cast<char*>(&total_draw_times_)) + sizeof(draw_tickers_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCDrawTimes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 total_draw_times = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          total_draw_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 big_reward_process = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          big_reward_process_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 free_draw_times = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          free_draw_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 draw_tickers_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          draw_tickers_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCDrawTimes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCDrawTimes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total_draw_times = 1;
  if (this->total_draw_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_total_draw_times(), target);
  }

  // int32 big_reward_process = 2;
  if (this->big_reward_process() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_big_reward_process(), target);
  }

  // int32 free_draw_times = 3;
  if (this->free_draw_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_free_draw_times(), target);
  }

  // int32 draw_tickers_num = 4;
  if (this->draw_tickers_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_draw_tickers_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCDrawTimes)
  return target;
}

size_t SCDrawTimes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCDrawTimes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 total_draw_times = 1;
  if (this->total_draw_times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_draw_times());
  }

  // int32 big_reward_process = 2;
  if (this->big_reward_process() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_big_reward_process());
  }

  // int32 free_draw_times = 3;
  if (this->free_draw_times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_free_draw_times());
  }

  // int32 draw_tickers_num = 4;
  if (this->draw_tickers_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_draw_tickers_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCDrawTimes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCDrawTimes)
  GOOGLE_DCHECK_NE(&from, this);
  const SCDrawTimes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCDrawTimes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCDrawTimes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCDrawTimes)
    MergeFrom(*source);
  }
}

void SCDrawTimes::MergeFrom(const SCDrawTimes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCDrawTimes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.total_draw_times() != 0) {
    _internal_set_total_draw_times(from._internal_total_draw_times());
  }
  if (from.big_reward_process() != 0) {
    _internal_set_big_reward_process(from._internal_big_reward_process());
  }
  if (from.free_draw_times() != 0) {
    _internal_set_free_draw_times(from._internal_free_draw_times());
  }
  if (from.draw_tickers_num() != 0) {
    _internal_set_draw_tickers_num(from._internal_draw_tickers_num());
  }
}

void SCDrawTimes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCDrawTimes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCDrawTimes::CopyFrom(const SCDrawTimes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCDrawTimes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCDrawTimes::IsInitialized() const {
  return true;
}

void SCDrawTimes::InternalSwap(SCDrawTimes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCDrawTimes, draw_tickers_num_)
      + sizeof(SCDrawTimes::draw_tickers_num_)
      - PROTOBUF_FIELD_OFFSET(SCDrawTimes, total_draw_times_)>(
          reinterpret_cast<char*>(&total_draw_times_),
          reinterpret_cast<char*>(&other->total_draw_times_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCDrawTimes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSVerifyActivity::_Internal {
 public:
};

CSVerifyActivity::CSVerifyActivity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSVerifyActivity)
}
CSVerifyActivity::CSVerifyActivity(const CSVerifyActivity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  activity_id_ = from.activity_id_;
  // @@protoc_insertion_point(copy_constructor:F4BY.CSVerifyActivity)
}

void CSVerifyActivity::SharedCtor() {
  activity_id_ = 0;
}

CSVerifyActivity::~CSVerifyActivity() {
  // @@protoc_insertion_point(destructor:F4BY.CSVerifyActivity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSVerifyActivity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSVerifyActivity::ArenaDtor(void* object) {
  CSVerifyActivity* _this = reinterpret_cast< CSVerifyActivity* >(object);
  (void)_this;
}
void CSVerifyActivity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSVerifyActivity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSVerifyActivity& CSVerifyActivity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSVerifyActivity_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSVerifyActivity::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSVerifyActivity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  activity_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSVerifyActivity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 activity_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          activity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSVerifyActivity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSVerifyActivity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 activity_id = 1;
  if (this->activity_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_activity_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSVerifyActivity)
  return target;
}

size_t CSVerifyActivity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSVerifyActivity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 activity_id = 1;
  if (this->activity_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_activity_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSVerifyActivity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSVerifyActivity)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVerifyActivity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSVerifyActivity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSVerifyActivity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSVerifyActivity)
    MergeFrom(*source);
  }
}

void CSVerifyActivity::MergeFrom(const CSVerifyActivity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSVerifyActivity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.activity_id() != 0) {
    _internal_set_activity_id(from._internal_activity_id());
  }
}

void CSVerifyActivity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSVerifyActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVerifyActivity::CopyFrom(const CSVerifyActivity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSVerifyActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVerifyActivity::IsInitialized() const {
  return true;
}

void CSVerifyActivity::InternalSwap(CSVerifyActivity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(activity_id_, other->activity_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSVerifyActivity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCVerifyActivity::_Internal {
 public:
};

SCVerifyActivity::SCVerifyActivity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCVerifyActivity)
}
SCVerifyActivity::SCVerifyActivity(const SCVerifyActivity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&open_, &from.open_,
    static_cast<size_t>(reinterpret_cast<char*>(&activity_id_) -
    reinterpret_cast<char*>(&open_)) + sizeof(activity_id_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCVerifyActivity)
}

void SCVerifyActivity::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&open_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&activity_id_) -
      reinterpret_cast<char*>(&open_)) + sizeof(activity_id_));
}

SCVerifyActivity::~SCVerifyActivity() {
  // @@protoc_insertion_point(destructor:F4BY.SCVerifyActivity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCVerifyActivity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCVerifyActivity::ArenaDtor(void* object) {
  SCVerifyActivity* _this = reinterpret_cast< SCVerifyActivity* >(object);
  (void)_this;
}
void SCVerifyActivity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCVerifyActivity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCVerifyActivity& SCVerifyActivity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCVerifyActivity_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCVerifyActivity::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCVerifyActivity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&activity_id_) -
      reinterpret_cast<char*>(&open_)) + sizeof(activity_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCVerifyActivity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool open = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 activity_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          activity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCVerifyActivity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCVerifyActivity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool open = 1;
  if (this->open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_open(), target);
  }

  // int32 activity_id = 2;
  if (this->activity_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_activity_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCVerifyActivity)
  return target;
}

size_t SCVerifyActivity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCVerifyActivity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool open = 1;
  if (this->open() != 0) {
    total_size += 1 + 1;
  }

  // int32 activity_id = 2;
  if (this->activity_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_activity_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCVerifyActivity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCVerifyActivity)
  GOOGLE_DCHECK_NE(&from, this);
  const SCVerifyActivity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCVerifyActivity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCVerifyActivity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCVerifyActivity)
    MergeFrom(*source);
  }
}

void SCVerifyActivity::MergeFrom(const SCVerifyActivity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCVerifyActivity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.open() != 0) {
    _internal_set_open(from._internal_open());
  }
  if (from.activity_id() != 0) {
    _internal_set_activity_id(from._internal_activity_id());
  }
}

void SCVerifyActivity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCVerifyActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCVerifyActivity::CopyFrom(const SCVerifyActivity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCVerifyActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCVerifyActivity::IsInitialized() const {
  return true;
}

void SCVerifyActivity::InternalSwap(SCVerifyActivity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCVerifyActivity, activity_id_)
      + sizeof(SCVerifyActivity::activity_id_)
      - PROTOBUF_FIELD_OFFSET(SCVerifyActivity, open_)>(
          reinterpret_cast<char*>(&open_),
          reinterpret_cast<char*>(&other->open_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCVerifyActivity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Package::_Internal {
 public:
};

Package::Package(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reward_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.Package)
}
Package::Package(const Package& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reward_list_(from.reward_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&package_id_, &from.package_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&vip_limit_) -
    reinterpret_cast<char*>(&package_id_)) + sizeof(vip_limit_));
  // @@protoc_insertion_point(copy_constructor:F4BY.Package)
}

void Package::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Package_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&package_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&vip_limit_) -
      reinterpret_cast<char*>(&package_id_)) + sizeof(vip_limit_));
}

Package::~Package() {
  // @@protoc_insertion_point(destructor:F4BY.Package)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Package::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Package::ArenaDtor(void* object) {
  Package* _this = reinterpret_cast< Package* >(object);
  (void)_this;
}
void Package::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Package::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Package& Package::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Package_F4BY_2eproto.base);
  return *internal_default_instance();
}


void Package::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.Package)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_list_.Clear();
  ::memset(&package_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vip_limit_) -
      reinterpret_cast<char*>(&package_id_)) + sizeof(vip_limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Package::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 package_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          package_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 consume_price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          consume_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 limit_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          limit_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 consume_props = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          consume_props_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 purchase_times = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          purchase_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .F4BY.RewardInfo reward_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reward_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // bool lock = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          lock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vip_limit = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          vip_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Package::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.Package)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 package_id = 1;
  if (this->package_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_package_id(), target);
  }

  // int32 limit = 2;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_limit(), target);
  }

  // int32 consume_price = 3;
  if (this->consume_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_consume_price(), target);
  }

  // int32 limit_type = 4;
  if (this->limit_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_limit_type(), target);
  }

  // int32 consume_props = 5;
  if (this->consume_props() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_consume_props(), target);
  }

  // int32 purchase_times = 6;
  if (this->purchase_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_purchase_times(), target);
  }

  // repeated .F4BY.RewardInfo reward_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reward_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_reward_list(i), target, stream);
  }

  // bool lock = 8;
  if (this->lock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_lock(), target);
  }

  // int32 vip_limit = 9;
  if (this->vip_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_vip_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.Package)
  return target;
}

size_t Package::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.Package)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.RewardInfo reward_list = 7;
  total_size += 1UL * this->_internal_reward_list_size();
  for (const auto& msg : this->reward_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 package_id = 1;
  if (this->package_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_package_id());
  }

  // int32 limit = 2;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_limit());
  }

  // int32 consume_price = 3;
  if (this->consume_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_consume_price());
  }

  // int32 limit_type = 4;
  if (this->limit_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_limit_type());
  }

  // int32 consume_props = 5;
  if (this->consume_props() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_consume_props());
  }

  // int32 purchase_times = 6;
  if (this->purchase_times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_purchase_times());
  }

  // bool lock = 8;
  if (this->lock() != 0) {
    total_size += 1 + 1;
  }

  // int32 vip_limit = 9;
  if (this->vip_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vip_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Package::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.Package)
  GOOGLE_DCHECK_NE(&from, this);
  const Package* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Package>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.Package)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.Package)
    MergeFrom(*source);
  }
}

void Package::MergeFrom(const Package& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.Package)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reward_list_.MergeFrom(from.reward_list_);
  if (from.package_id() != 0) {
    _internal_set_package_id(from._internal_package_id());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  if (from.consume_price() != 0) {
    _internal_set_consume_price(from._internal_consume_price());
  }
  if (from.limit_type() != 0) {
    _internal_set_limit_type(from._internal_limit_type());
  }
  if (from.consume_props() != 0) {
    _internal_set_consume_props(from._internal_consume_props());
  }
  if (from.purchase_times() != 0) {
    _internal_set_purchase_times(from._internal_purchase_times());
  }
  if (from.lock() != 0) {
    _internal_set_lock(from._internal_lock());
  }
  if (from.vip_limit() != 0) {
    _internal_set_vip_limit(from._internal_vip_limit());
  }
}

void Package::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.Package)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Package::CopyFrom(const Package& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.Package)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Package::IsInitialized() const {
  return true;
}

void Package::InternalSwap(Package* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reward_list_.InternalSwap(&other->reward_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Package, vip_limit_)
      + sizeof(Package::vip_limit_)
      - PROTOBUF_FIELD_OFFSET(Package, package_id_)>(
          reinterpret_cast<char*>(&package_id_),
          reinterpret_cast<char*>(&other->package_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Package::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSTreasureHuntPackage::_Internal {
 public:
};

CSTreasureHuntPackage::CSTreasureHuntPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSTreasureHuntPackage)
}
CSTreasureHuntPackage::CSTreasureHuntPackage(const CSTreasureHuntPackage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  package_type_ = from.package_type_;
  // @@protoc_insertion_point(copy_constructor:F4BY.CSTreasureHuntPackage)
}

void CSTreasureHuntPackage::SharedCtor() {
  package_type_ = 0;
}

CSTreasureHuntPackage::~CSTreasureHuntPackage() {
  // @@protoc_insertion_point(destructor:F4BY.CSTreasureHuntPackage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSTreasureHuntPackage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSTreasureHuntPackage::ArenaDtor(void* object) {
  CSTreasureHuntPackage* _this = reinterpret_cast< CSTreasureHuntPackage* >(object);
  (void)_this;
}
void CSTreasureHuntPackage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSTreasureHuntPackage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSTreasureHuntPackage& CSTreasureHuntPackage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSTreasureHuntPackage_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSTreasureHuntPackage::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSTreasureHuntPackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  package_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSTreasureHuntPackage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 package_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          package_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSTreasureHuntPackage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSTreasureHuntPackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 package_type = 1;
  if (this->package_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_package_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSTreasureHuntPackage)
  return target;
}

size_t CSTreasureHuntPackage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSTreasureHuntPackage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 package_type = 1;
  if (this->package_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_package_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSTreasureHuntPackage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSTreasureHuntPackage)
  GOOGLE_DCHECK_NE(&from, this);
  const CSTreasureHuntPackage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSTreasureHuntPackage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSTreasureHuntPackage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSTreasureHuntPackage)
    MergeFrom(*source);
  }
}

void CSTreasureHuntPackage::MergeFrom(const CSTreasureHuntPackage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSTreasureHuntPackage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.package_type() != 0) {
    _internal_set_package_type(from._internal_package_type());
  }
}

void CSTreasureHuntPackage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSTreasureHuntPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTreasureHuntPackage::CopyFrom(const CSTreasureHuntPackage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSTreasureHuntPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTreasureHuntPackage::IsInitialized() const {
  return true;
}

void CSTreasureHuntPackage::InternalSwap(CSTreasureHuntPackage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(package_type_, other->package_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSTreasureHuntPackage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCTreasureHuntPackage::_Internal {
 public:
};

SCTreasureHuntPackage::SCTreasureHuntPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  package_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCTreasureHuntPackage)
}
SCTreasureHuntPackage::SCTreasureHuntPackage(const SCTreasureHuntPackage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      package_list_(from.package_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  package_type_ = from.package_type_;
  // @@protoc_insertion_point(copy_constructor:F4BY.SCTreasureHuntPackage)
}

void SCTreasureHuntPackage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCTreasureHuntPackage_F4BY_2eproto.base);
  package_type_ = 0;
}

SCTreasureHuntPackage::~SCTreasureHuntPackage() {
  // @@protoc_insertion_point(destructor:F4BY.SCTreasureHuntPackage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCTreasureHuntPackage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCTreasureHuntPackage::ArenaDtor(void* object) {
  SCTreasureHuntPackage* _this = reinterpret_cast< SCTreasureHuntPackage* >(object);
  (void)_this;
}
void SCTreasureHuntPackage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCTreasureHuntPackage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCTreasureHuntPackage& SCTreasureHuntPackage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCTreasureHuntPackage_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCTreasureHuntPackage::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCTreasureHuntPackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  package_list_.Clear();
  package_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCTreasureHuntPackage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .F4BY.Package package_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_package_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 package_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          package_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCTreasureHuntPackage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCTreasureHuntPackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .F4BY.Package package_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_package_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_package_list(i), target, stream);
  }

  // int32 package_type = 2;
  if (this->package_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_package_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCTreasureHuntPackage)
  return target;
}

size_t SCTreasureHuntPackage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCTreasureHuntPackage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.Package package_list = 1;
  total_size += 1UL * this->_internal_package_list_size();
  for (const auto& msg : this->package_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 package_type = 2;
  if (this->package_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_package_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCTreasureHuntPackage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCTreasureHuntPackage)
  GOOGLE_DCHECK_NE(&from, this);
  const SCTreasureHuntPackage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCTreasureHuntPackage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCTreasureHuntPackage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCTreasureHuntPackage)
    MergeFrom(*source);
  }
}

void SCTreasureHuntPackage::MergeFrom(const SCTreasureHuntPackage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCTreasureHuntPackage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  package_list_.MergeFrom(from.package_list_);
  if (from.package_type() != 0) {
    _internal_set_package_type(from._internal_package_type());
  }
}

void SCTreasureHuntPackage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCTreasureHuntPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCTreasureHuntPackage::CopyFrom(const SCTreasureHuntPackage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCTreasureHuntPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCTreasureHuntPackage::IsInitialized() const {
  return true;
}

void SCTreasureHuntPackage::InternalSwap(SCTreasureHuntPackage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  package_list_.InternalSwap(&other->package_list_);
  swap(package_type_, other->package_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCTreasureHuntPackage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ExchangeShopInfo::_Internal {
 public:
};

ExchangeShopInfo::ExchangeShopInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  package_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.ExchangeShopInfo)
}
ExchangeShopInfo::ExchangeShopInfo(const ExchangeShopInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      package_list_(from.package_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&unlock_) -
    reinterpret_cast<char*>(&level_)) + sizeof(unlock_));
  // @@protoc_insertion_point(copy_constructor:F4BY.ExchangeShopInfo)
}

void ExchangeShopInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExchangeShopInfo_F4BY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&level_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&unlock_) -
      reinterpret_cast<char*>(&level_)) + sizeof(unlock_));
}

ExchangeShopInfo::~ExchangeShopInfo() {
  // @@protoc_insertion_point(destructor:F4BY.ExchangeShopInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExchangeShopInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ExchangeShopInfo::ArenaDtor(void* object) {
  ExchangeShopInfo* _this = reinterpret_cast< ExchangeShopInfo* >(object);
  (void)_this;
}
void ExchangeShopInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExchangeShopInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExchangeShopInfo& ExchangeShopInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExchangeShopInfo_F4BY_2eproto.base);
  return *internal_default_instance();
}


void ExchangeShopInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.ExchangeShopInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  package_list_.Clear();
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unlock_) -
      reinterpret_cast<char*>(&level_)) + sizeof(unlock_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExchangeShopInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .F4BY.Package package_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_package_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bool unlock = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          unlock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExchangeShopInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.ExchangeShopInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 level = 1;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_level(), target);
  }

  // repeated .F4BY.Package package_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_package_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_package_list(i), target, stream);
  }

  // bool unlock = 3;
  if (this->unlock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_unlock(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.ExchangeShopInfo)
  return target;
}

size_t ExchangeShopInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.ExchangeShopInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.Package package_list = 2;
  total_size += 1UL * this->_internal_package_list_size();
  for (const auto& msg : this->package_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  // bool unlock = 3;
  if (this->unlock() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExchangeShopInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.ExchangeShopInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ExchangeShopInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExchangeShopInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.ExchangeShopInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.ExchangeShopInfo)
    MergeFrom(*source);
  }
}

void ExchangeShopInfo::MergeFrom(const ExchangeShopInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.ExchangeShopInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  package_list_.MergeFrom(from.package_list_);
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.unlock() != 0) {
    _internal_set_unlock(from._internal_unlock());
  }
}

void ExchangeShopInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.ExchangeShopInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeShopInfo::CopyFrom(const ExchangeShopInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.ExchangeShopInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeShopInfo::IsInitialized() const {
  return true;
}

void ExchangeShopInfo::InternalSwap(ExchangeShopInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  package_list_.InternalSwap(&other->package_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExchangeShopInfo, unlock_)
      + sizeof(ExchangeShopInfo::unlock_)
      - PROTOBUF_FIELD_OFFSET(ExchangeShopInfo, level_)>(
          reinterpret_cast<char*>(&level_),
          reinterpret_cast<char*>(&other->level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExchangeShopInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSExchangeShop::_Internal {
 public:
};

CSExchangeShop::CSExchangeShop(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSExchangeShop)
}
CSExchangeShop::CSExchangeShop(const CSExchangeShop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:F4BY.CSExchangeShop)
}

void CSExchangeShop::SharedCtor() {
}

CSExchangeShop::~CSExchangeShop() {
  // @@protoc_insertion_point(destructor:F4BY.CSExchangeShop)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSExchangeShop::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSExchangeShop::ArenaDtor(void* object) {
  CSExchangeShop* _this = reinterpret_cast< CSExchangeShop* >(object);
  (void)_this;
}
void CSExchangeShop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSExchangeShop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSExchangeShop& CSExchangeShop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSExchangeShop_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSExchangeShop::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSExchangeShop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSExchangeShop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSExchangeShop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSExchangeShop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSExchangeShop)
  return target;
}

size_t CSExchangeShop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSExchangeShop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSExchangeShop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSExchangeShop)
  GOOGLE_DCHECK_NE(&from, this);
  const CSExchangeShop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSExchangeShop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSExchangeShop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSExchangeShop)
    MergeFrom(*source);
  }
}

void CSExchangeShop::MergeFrom(const CSExchangeShop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSExchangeShop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSExchangeShop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSExchangeShop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSExchangeShop::CopyFrom(const CSExchangeShop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSExchangeShop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSExchangeShop::IsInitialized() const {
  return true;
}

void CSExchangeShop::InternalSwap(CSExchangeShop* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSExchangeShop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCExchangeShop::_Internal {
 public:
};

SCExchangeShop::SCExchangeShop(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  exchangeshoplist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCExchangeShop)
}
SCExchangeShop::SCExchangeShop(const SCExchangeShop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      exchangeshoplist_(from.exchangeshoplist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:F4BY.SCExchangeShop)
}

void SCExchangeShop::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCExchangeShop_F4BY_2eproto.base);
}

SCExchangeShop::~SCExchangeShop() {
  // @@protoc_insertion_point(destructor:F4BY.SCExchangeShop)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCExchangeShop::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCExchangeShop::ArenaDtor(void* object) {
  SCExchangeShop* _this = reinterpret_cast< SCExchangeShop* >(object);
  (void)_this;
}
void SCExchangeShop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCExchangeShop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCExchangeShop& SCExchangeShop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCExchangeShop_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCExchangeShop::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCExchangeShop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exchangeshoplist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCExchangeShop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .F4BY.ExchangeShopInfo exchangeShopList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exchangeshoplist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCExchangeShop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCExchangeShop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .F4BY.ExchangeShopInfo exchangeShopList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_exchangeshoplist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_exchangeshoplist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCExchangeShop)
  return target;
}

size_t SCExchangeShop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCExchangeShop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.ExchangeShopInfo exchangeShopList = 1;
  total_size += 1UL * this->_internal_exchangeshoplist_size();
  for (const auto& msg : this->exchangeshoplist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCExchangeShop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCExchangeShop)
  GOOGLE_DCHECK_NE(&from, this);
  const SCExchangeShop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCExchangeShop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCExchangeShop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCExchangeShop)
    MergeFrom(*source);
  }
}

void SCExchangeShop::MergeFrom(const SCExchangeShop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCExchangeShop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  exchangeshoplist_.MergeFrom(from.exchangeshoplist_);
}

void SCExchangeShop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCExchangeShop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCExchangeShop::CopyFrom(const SCExchangeShop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCExchangeShop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCExchangeShop::IsInitialized() const {
  return true;
}

void SCExchangeShop::InternalSwap(SCExchangeShop* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  exchangeshoplist_.InternalSwap(&other->exchangeshoplist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCExchangeShop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSPurchasePackage::_Internal {
 public:
};

CSPurchasePackage::CSPurchasePackage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSPurchasePackage)
}
CSPurchasePackage::CSPurchasePackage(const CSPurchasePackage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  package_id_ = from.package_id_;
  // @@protoc_insertion_point(copy_constructor:F4BY.CSPurchasePackage)
}

void CSPurchasePackage::SharedCtor() {
  package_id_ = 0;
}

CSPurchasePackage::~CSPurchasePackage() {
  // @@protoc_insertion_point(destructor:F4BY.CSPurchasePackage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSPurchasePackage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSPurchasePackage::ArenaDtor(void* object) {
  CSPurchasePackage* _this = reinterpret_cast< CSPurchasePackage* >(object);
  (void)_this;
}
void CSPurchasePackage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSPurchasePackage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSPurchasePackage& CSPurchasePackage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSPurchasePackage_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSPurchasePackage::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSPurchasePackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  package_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSPurchasePackage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 package_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          package_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSPurchasePackage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSPurchasePackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 package_id = 1;
  if (this->package_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_package_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSPurchasePackage)
  return target;
}

size_t CSPurchasePackage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSPurchasePackage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 package_id = 1;
  if (this->package_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_package_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSPurchasePackage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSPurchasePackage)
  GOOGLE_DCHECK_NE(&from, this);
  const CSPurchasePackage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSPurchasePackage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSPurchasePackage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSPurchasePackage)
    MergeFrom(*source);
  }
}

void CSPurchasePackage::MergeFrom(const CSPurchasePackage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSPurchasePackage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.package_id() != 0) {
    _internal_set_package_id(from._internal_package_id());
  }
}

void CSPurchasePackage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSPurchasePackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPurchasePackage::CopyFrom(const CSPurchasePackage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSPurchasePackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPurchasePackage::IsInitialized() const {
  return true;
}

void CSPurchasePackage::InternalSwap(CSPurchasePackage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(package_id_, other->package_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSPurchasePackage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCPurchasePackage::_Internal {
 public:
  static const ::F4BY::Package& package(const SCPurchasePackage* msg);
};

const ::F4BY::Package&
SCPurchasePackage::_Internal::package(const SCPurchasePackage* msg) {
  return *msg->package_;
}
SCPurchasePackage::SCPurchasePackage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCPurchasePackage)
}
SCPurchasePackage::SCPurchasePackage(const SCPurchasePackage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_package()) {
    package_ = new ::F4BY::Package(*from.package_);
  } else {
    package_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:F4BY.SCPurchasePackage)
}

void SCPurchasePackage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCPurchasePackage_F4BY_2eproto.base);
  package_ = nullptr;
}

SCPurchasePackage::~SCPurchasePackage() {
  // @@protoc_insertion_point(destructor:F4BY.SCPurchasePackage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCPurchasePackage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete package_;
}

void SCPurchasePackage::ArenaDtor(void* object) {
  SCPurchasePackage* _this = reinterpret_cast< SCPurchasePackage* >(object);
  (void)_this;
}
void SCPurchasePackage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCPurchasePackage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCPurchasePackage& SCPurchasePackage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCPurchasePackage_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCPurchasePackage::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCPurchasePackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && package_ != nullptr) {
    delete package_;
  }
  package_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCPurchasePackage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .F4BY.Package package = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_package(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCPurchasePackage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCPurchasePackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .F4BY.Package package = 1;
  if (this->has_package()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::package(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCPurchasePackage)
  return target;
}

size_t SCPurchasePackage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCPurchasePackage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .F4BY.Package package = 1;
  if (this->has_package()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *package_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCPurchasePackage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCPurchasePackage)
  GOOGLE_DCHECK_NE(&from, this);
  const SCPurchasePackage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCPurchasePackage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCPurchasePackage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCPurchasePackage)
    MergeFrom(*source);
  }
}

void SCPurchasePackage::MergeFrom(const SCPurchasePackage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCPurchasePackage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_package()) {
    _internal_mutable_package()->::F4BY::Package::MergeFrom(from._internal_package());
  }
}

void SCPurchasePackage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCPurchasePackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPurchasePackage::CopyFrom(const SCPurchasePackage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCPurchasePackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPurchasePackage::IsInitialized() const {
  return true;
}

void SCPurchasePackage::InternalSwap(SCPurchasePackage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(package_, other->package_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCPurchasePackage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSVerifyTermChange::_Internal {
 public:
};

CSVerifyTermChange::CSVerifyTermChange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSVerifyTermChange)
}
CSVerifyTermChange::CSVerifyTermChange(const CSVerifyTermChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:F4BY.CSVerifyTermChange)
}

void CSVerifyTermChange::SharedCtor() {
}

CSVerifyTermChange::~CSVerifyTermChange() {
  // @@protoc_insertion_point(destructor:F4BY.CSVerifyTermChange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSVerifyTermChange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSVerifyTermChange::ArenaDtor(void* object) {
  CSVerifyTermChange* _this = reinterpret_cast< CSVerifyTermChange* >(object);
  (void)_this;
}
void CSVerifyTermChange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSVerifyTermChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSVerifyTermChange& CSVerifyTermChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSVerifyTermChange_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSVerifyTermChange::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSVerifyTermChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSVerifyTermChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSVerifyTermChange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSVerifyTermChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSVerifyTermChange)
  return target;
}

size_t CSVerifyTermChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSVerifyTermChange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSVerifyTermChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSVerifyTermChange)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVerifyTermChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSVerifyTermChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSVerifyTermChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSVerifyTermChange)
    MergeFrom(*source);
  }
}

void CSVerifyTermChange::MergeFrom(const CSVerifyTermChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSVerifyTermChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CSVerifyTermChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSVerifyTermChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVerifyTermChange::CopyFrom(const CSVerifyTermChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSVerifyTermChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVerifyTermChange::IsInitialized() const {
  return true;
}

void CSVerifyTermChange::InternalSwap(CSVerifyTermChange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSVerifyTermChange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCVerifyTermChange::_Internal {
 public:
};

SCVerifyTermChange::SCVerifyTermChange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reward_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCVerifyTermChange)
}
SCVerifyTermChange::SCVerifyTermChange(const SCVerifyTermChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reward_list_(from.reward_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  change_ = from.change_;
  // @@protoc_insertion_point(copy_constructor:F4BY.SCVerifyTermChange)
}

void SCVerifyTermChange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCVerifyTermChange_F4BY_2eproto.base);
  change_ = false;
}

SCVerifyTermChange::~SCVerifyTermChange() {
  // @@protoc_insertion_point(destructor:F4BY.SCVerifyTermChange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCVerifyTermChange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCVerifyTermChange::ArenaDtor(void* object) {
  SCVerifyTermChange* _this = reinterpret_cast< SCVerifyTermChange* >(object);
  (void)_this;
}
void SCVerifyTermChange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCVerifyTermChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCVerifyTermChange& SCVerifyTermChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCVerifyTermChange_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCVerifyTermChange::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCVerifyTermChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_list_.Clear();
  change_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCVerifyTermChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool change = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .F4BY.RewardInfo reward_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reward_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCVerifyTermChange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCVerifyTermChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool change = 1;
  if (this->change() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_change(), target);
  }

  // repeated .F4BY.RewardInfo reward_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reward_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_reward_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCVerifyTermChange)
  return target;
}

size_t SCVerifyTermChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCVerifyTermChange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .F4BY.RewardInfo reward_list = 2;
  total_size += 1UL * this->_internal_reward_list_size();
  for (const auto& msg : this->reward_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool change = 1;
  if (this->change() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCVerifyTermChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCVerifyTermChange)
  GOOGLE_DCHECK_NE(&from, this);
  const SCVerifyTermChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCVerifyTermChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCVerifyTermChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCVerifyTermChange)
    MergeFrom(*source);
  }
}

void SCVerifyTermChange::MergeFrom(const SCVerifyTermChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCVerifyTermChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reward_list_.MergeFrom(from.reward_list_);
  if (from.change() != 0) {
    _internal_set_change(from._internal_change());
  }
}

void SCVerifyTermChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCVerifyTermChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCVerifyTermChange::CopyFrom(const SCVerifyTermChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCVerifyTermChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCVerifyTermChange::IsInitialized() const {
  return true;
}

void SCVerifyTermChange::InternalSwap(SCVerifyTermChange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reward_list_.InternalSwap(&other->reward_list_);
  swap(change_, other->change_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCVerifyTermChange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCWaterDropInfo::_Internal {
 public:
};

SCWaterDropInfo::SCWaterDropInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCWaterDropInfo)
}
SCWaterDropInfo::SCWaterDropInfo(const SCWaterDropInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enable_, &from.enable_,
    static_cast<size_t>(reinterpret_cast<char*>(&fragment_count_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(fragment_count_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCWaterDropInfo)
}

void SCWaterDropInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&enable_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&fragment_count_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(fragment_count_));
}

SCWaterDropInfo::~SCWaterDropInfo() {
  // @@protoc_insertion_point(destructor:F4BY.SCWaterDropInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCWaterDropInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCWaterDropInfo::ArenaDtor(void* object) {
  SCWaterDropInfo* _this = reinterpret_cast< SCWaterDropInfo* >(object);
  (void)_this;
}
void SCWaterDropInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCWaterDropInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCWaterDropInfo& SCWaterDropInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCWaterDropInfo_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCWaterDropInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCWaterDropInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fragment_count_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(fragment_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCWaterDropInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 drop_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          drop_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fragment_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fragment_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCWaterDropInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCWaterDropInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  // int32 drop_count = 2;
  if (this->drop_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_drop_count(), target);
  }

  // int32 fragment_count = 3;
  if (this->fragment_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_fragment_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCWaterDropInfo)
  return target;
}

size_t SCWaterDropInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCWaterDropInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // int32 drop_count = 2;
  if (this->drop_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_drop_count());
  }

  // int32 fragment_count = 3;
  if (this->fragment_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fragment_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCWaterDropInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCWaterDropInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCWaterDropInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCWaterDropInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCWaterDropInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCWaterDropInfo)
    MergeFrom(*source);
  }
}

void SCWaterDropInfo::MergeFrom(const SCWaterDropInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCWaterDropInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
  if (from.drop_count() != 0) {
    _internal_set_drop_count(from._internal_drop_count());
  }
  if (from.fragment_count() != 0) {
    _internal_set_fragment_count(from._internal_fragment_count());
  }
}

void SCWaterDropInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCWaterDropInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCWaterDropInfo::CopyFrom(const SCWaterDropInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCWaterDropInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCWaterDropInfo::IsInitialized() const {
  return true;
}

void SCWaterDropInfo::InternalSwap(SCWaterDropInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCWaterDropInfo, fragment_count_)
      + sizeof(SCWaterDropInfo::fragment_count_)
      - PROTOBUF_FIELD_OFFSET(SCWaterDropInfo, enable_)>(
          reinterpret_cast<char*>(&enable_),
          reinterpret_cast<char*>(&other->enable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCWaterDropInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSBuyGun::_Internal {
 public:
};

CSBuyGun::CSBuyGun(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSBuyGun)
}
CSBuyGun::CSBuyGun(const CSBuyGun& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gun_level_ = from.gun_level_;
  // @@protoc_insertion_point(copy_constructor:F4BY.CSBuyGun)
}

void CSBuyGun::SharedCtor() {
  gun_level_ = 0;
}

CSBuyGun::~CSBuyGun() {
  // @@protoc_insertion_point(destructor:F4BY.CSBuyGun)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSBuyGun::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSBuyGun::ArenaDtor(void* object) {
  CSBuyGun* _this = reinterpret_cast< CSBuyGun* >(object);
  (void)_this;
}
void CSBuyGun::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSBuyGun::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSBuyGun& CSBuyGun::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSBuyGun_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSBuyGun::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSBuyGun)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gun_level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSBuyGun::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 gun_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gun_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSBuyGun::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSBuyGun)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gun_level = 1;
  if (this->gun_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_gun_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSBuyGun)
  return target;
}

size_t CSBuyGun::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSBuyGun)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 gun_level = 1;
  if (this->gun_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gun_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSBuyGun::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSBuyGun)
  GOOGLE_DCHECK_NE(&from, this);
  const CSBuyGun* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSBuyGun>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSBuyGun)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSBuyGun)
    MergeFrom(*source);
  }
}

void CSBuyGun::MergeFrom(const CSBuyGun& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSBuyGun)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gun_level() != 0) {
    _internal_set_gun_level(from._internal_gun_level());
  }
}

void CSBuyGun::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSBuyGun)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBuyGun::CopyFrom(const CSBuyGun& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSBuyGun)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBuyGun::IsInitialized() const {
  return true;
}

void CSBuyGun::InternalSwap(CSBuyGun* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(gun_level_, other->gun_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSBuyGun::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCBuyGun::_Internal {
 public:
};

SCBuyGun::SCBuyGun(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCBuyGun)
}
SCBuyGun::SCBuyGun(const SCBuyGun& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gun_level_, &from.gun_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&gun_level_)) + sizeof(price_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCBuyGun)
}

void SCBuyGun::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gun_level_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&gun_level_)) + sizeof(price_));
}

SCBuyGun::~SCBuyGun() {
  // @@protoc_insertion_point(destructor:F4BY.SCBuyGun)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCBuyGun::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCBuyGun::ArenaDtor(void* object) {
  SCBuyGun* _this = reinterpret_cast< SCBuyGun* >(object);
  (void)_this;
}
void SCBuyGun::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCBuyGun::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCBuyGun& SCBuyGun::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCBuyGun_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCBuyGun::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCBuyGun)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gun_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&gun_level_)) + sizeof(price_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCBuyGun::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 gun_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gun_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCBuyGun::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCBuyGun)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gun_level = 1;
  if (this->gun_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_gun_level(), target);
  }

  // int32 price = 2;
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCBuyGun)
  return target;
}

size_t SCBuyGun::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCBuyGun)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 gun_level = 1;
  if (this->gun_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gun_level());
  }

  // int32 price = 2;
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_price());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCBuyGun::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCBuyGun)
  GOOGLE_DCHECK_NE(&from, this);
  const SCBuyGun* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCBuyGun>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCBuyGun)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCBuyGun)
    MergeFrom(*source);
  }
}

void SCBuyGun::MergeFrom(const SCBuyGun& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCBuyGun)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gun_level() != 0) {
    _internal_set_gun_level(from._internal_gun_level());
  }
  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
}

void SCBuyGun::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCBuyGun)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCBuyGun::CopyFrom(const SCBuyGun& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCBuyGun)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCBuyGun::IsInitialized() const {
  return true;
}

void SCBuyGun::InternalSwap(SCBuyGun* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCBuyGun, price_)
      + sizeof(SCBuyGun::price_)
      - PROTOBUF_FIELD_OFFSET(SCBuyGun, gun_level_)>(
          reinterpret_cast<char*>(&gun_level_),
          reinterpret_cast<char*>(&other->gun_level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCBuyGun::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSBuyWings::_Internal {
 public:
};

CSBuyWings::CSBuyWings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSBuyWings)
}
CSBuyWings::CSBuyWings(const CSBuyWings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  wings_id_ = from.wings_id_;
  // @@protoc_insertion_point(copy_constructor:F4BY.CSBuyWings)
}

void CSBuyWings::SharedCtor() {
  wings_id_ = 0;
}

CSBuyWings::~CSBuyWings() {
  // @@protoc_insertion_point(destructor:F4BY.CSBuyWings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSBuyWings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSBuyWings::ArenaDtor(void* object) {
  CSBuyWings* _this = reinterpret_cast< CSBuyWings* >(object);
  (void)_this;
}
void CSBuyWings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSBuyWings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSBuyWings& CSBuyWings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSBuyWings_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSBuyWings::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSBuyWings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wings_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSBuyWings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 wings_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          wings_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSBuyWings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSBuyWings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 wings_id = 1;
  if (this->wings_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_wings_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSBuyWings)
  return target;
}

size_t CSBuyWings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSBuyWings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 wings_id = 1;
  if (this->wings_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wings_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSBuyWings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSBuyWings)
  GOOGLE_DCHECK_NE(&from, this);
  const CSBuyWings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSBuyWings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSBuyWings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSBuyWings)
    MergeFrom(*source);
  }
}

void CSBuyWings::MergeFrom(const CSBuyWings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSBuyWings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.wings_id() != 0) {
    _internal_set_wings_id(from._internal_wings_id());
  }
}

void CSBuyWings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSBuyWings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBuyWings::CopyFrom(const CSBuyWings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSBuyWings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBuyWings::IsInitialized() const {
  return true;
}

void CSBuyWings::InternalSwap(CSBuyWings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(wings_id_, other->wings_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSBuyWings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCBuyWings::_Internal {
 public:
};

SCBuyWings::SCBuyWings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCBuyWings)
}
SCBuyWings::SCBuyWings(const SCBuyWings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&wings_id_, &from.wings_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&wings_id_)) + sizeof(price_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCBuyWings)
}

void SCBuyWings::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&wings_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&wings_id_)) + sizeof(price_));
}

SCBuyWings::~SCBuyWings() {
  // @@protoc_insertion_point(destructor:F4BY.SCBuyWings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCBuyWings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCBuyWings::ArenaDtor(void* object) {
  SCBuyWings* _this = reinterpret_cast< SCBuyWings* >(object);
  (void)_this;
}
void SCBuyWings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCBuyWings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCBuyWings& SCBuyWings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCBuyWings_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCBuyWings::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCBuyWings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&wings_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&wings_id_)) + sizeof(price_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCBuyWings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 wings_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          wings_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCBuyWings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCBuyWings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 wings_id = 1;
  if (this->wings_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_wings_id(), target);
  }

  // int32 price = 2;
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCBuyWings)
  return target;
}

size_t SCBuyWings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCBuyWings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 wings_id = 1;
  if (this->wings_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wings_id());
  }

  // int32 price = 2;
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_price());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCBuyWings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCBuyWings)
  GOOGLE_DCHECK_NE(&from, this);
  const SCBuyWings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCBuyWings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCBuyWings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCBuyWings)
    MergeFrom(*source);
  }
}

void SCBuyWings::MergeFrom(const SCBuyWings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCBuyWings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.wings_id() != 0) {
    _internal_set_wings_id(from._internal_wings_id());
  }
  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
}

void SCBuyWings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCBuyWings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCBuyWings::CopyFrom(const SCBuyWings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCBuyWings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCBuyWings::IsInitialized() const {
  return true;
}

void SCBuyWings::InternalSwap(SCBuyWings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCBuyWings, price_)
      + sizeof(SCBuyWings::price_)
      - PROTOBUF_FIELD_OFFSET(SCBuyWings, wings_id_)>(
          reinterpret_cast<char*>(&wings_id_),
          reinterpret_cast<char*>(&other->wings_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCBuyWings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SCNotifyActStatus::_Internal {
 public:
};

SCNotifyActStatus::SCNotifyActStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.SCNotifyActStatus)
}
SCNotifyActStatus::SCNotifyActStatus(const SCNotifyActStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&act_type_, &from.act_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&act_status_) -
    reinterpret_cast<char*>(&act_type_)) + sizeof(act_status_));
  // @@protoc_insertion_point(copy_constructor:F4BY.SCNotifyActStatus)
}

void SCNotifyActStatus::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&act_type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&act_status_) -
      reinterpret_cast<char*>(&act_type_)) + sizeof(act_status_));
}

SCNotifyActStatus::~SCNotifyActStatus() {
  // @@protoc_insertion_point(destructor:F4BY.SCNotifyActStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SCNotifyActStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SCNotifyActStatus::ArenaDtor(void* object) {
  SCNotifyActStatus* _this = reinterpret_cast< SCNotifyActStatus* >(object);
  (void)_this;
}
void SCNotifyActStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SCNotifyActStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCNotifyActStatus& SCNotifyActStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCNotifyActStatus_F4BY_2eproto.base);
  return *internal_default_instance();
}


void SCNotifyActStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.SCNotifyActStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&act_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&act_status_) -
      reinterpret_cast<char*>(&act_type_)) + sizeof(act_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCNotifyActStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 act_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          act_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 act_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          act_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCNotifyActStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.SCNotifyActStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 act_type = 1;
  if (this->act_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_act_type(), target);
  }

  // int32 act_status = 2;
  if (this->act_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_act_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.SCNotifyActStatus)
  return target;
}

size_t SCNotifyActStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.SCNotifyActStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 act_type = 1;
  if (this->act_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_act_type());
  }

  // int32 act_status = 2;
  if (this->act_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_act_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCNotifyActStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.SCNotifyActStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const SCNotifyActStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCNotifyActStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.SCNotifyActStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.SCNotifyActStatus)
    MergeFrom(*source);
  }
}

void SCNotifyActStatus::MergeFrom(const SCNotifyActStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.SCNotifyActStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.act_type() != 0) {
    _internal_set_act_type(from._internal_act_type());
  }
  if (from.act_status() != 0) {
    _internal_set_act_status(from._internal_act_status());
  }
}

void SCNotifyActStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.SCNotifyActStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCNotifyActStatus::CopyFrom(const SCNotifyActStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.SCNotifyActStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCNotifyActStatus::IsInitialized() const {
  return true;
}

void SCNotifyActStatus::InternalSwap(SCNotifyActStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCNotifyActStatus, act_status_)
      + sizeof(SCNotifyActStatus::act_status_)
      - PROTOBUF_FIELD_OFFSET(SCNotifyActStatus, act_type_)>(
          reinterpret_cast<char*>(&act_type_),
          reinterpret_cast<char*>(&other->act_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCNotifyActStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSSetDoubleShoot::_Internal {
 public:
};

CSSetDoubleShoot::CSSetDoubleShoot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSSetDoubleShoot)
}
CSSetDoubleShoot::CSSetDoubleShoot(const CSSetDoubleShoot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  extra_mul_ = from.extra_mul_;
  // @@protoc_insertion_point(copy_constructor:F4BY.CSSetDoubleShoot)
}

void CSSetDoubleShoot::SharedCtor() {
  extra_mul_ = 0;
}

CSSetDoubleShoot::~CSSetDoubleShoot() {
  // @@protoc_insertion_point(destructor:F4BY.CSSetDoubleShoot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSSetDoubleShoot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSSetDoubleShoot::ArenaDtor(void* object) {
  CSSetDoubleShoot* _this = reinterpret_cast< CSSetDoubleShoot* >(object);
  (void)_this;
}
void CSSetDoubleShoot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSSetDoubleShoot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSSetDoubleShoot& CSSetDoubleShoot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSSetDoubleShoot_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSSetDoubleShoot::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSSetDoubleShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extra_mul_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSSetDoubleShoot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 extra_mul = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          extra_mul_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSSetDoubleShoot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSSetDoubleShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 extra_mul = 1;
  if (this->extra_mul() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_extra_mul(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSSetDoubleShoot)
  return target;
}

size_t CSSetDoubleShoot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSSetDoubleShoot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 extra_mul = 1;
  if (this->extra_mul() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_extra_mul());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSSetDoubleShoot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSSetDoubleShoot)
  GOOGLE_DCHECK_NE(&from, this);
  const CSSetDoubleShoot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSSetDoubleShoot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSSetDoubleShoot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSSetDoubleShoot)
    MergeFrom(*source);
  }
}

void CSSetDoubleShoot::MergeFrom(const CSSetDoubleShoot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSSetDoubleShoot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.extra_mul() != 0) {
    _internal_set_extra_mul(from._internal_extra_mul());
  }
}

void CSSetDoubleShoot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSSetDoubleShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSetDoubleShoot::CopyFrom(const CSSetDoubleShoot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSSetDoubleShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSetDoubleShoot::IsInitialized() const {
  return true;
}

void CSSetDoubleShoot::InternalSwap(CSSetDoubleShoot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(extra_mul_, other->extra_mul_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSSetDoubleShoot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSFreePoolInfo::_Internal {
 public:
};

CSFreePoolInfo::CSFreePoolInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSFreePoolInfo)
}
CSFreePoolInfo::CSFreePoolInfo(const CSFreePoolInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  preparelottery_ = from.preparelottery_;
  // @@protoc_insertion_point(copy_constructor:F4BY.CSFreePoolInfo)
}

void CSFreePoolInfo::SharedCtor() {
  preparelottery_ = false;
}

CSFreePoolInfo::~CSFreePoolInfo() {
  // @@protoc_insertion_point(destructor:F4BY.CSFreePoolInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSFreePoolInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSFreePoolInfo::ArenaDtor(void* object) {
  CSFreePoolInfo* _this = reinterpret_cast< CSFreePoolInfo* >(object);
  (void)_this;
}
void CSFreePoolInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSFreePoolInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSFreePoolInfo& CSFreePoolInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSFreePoolInfo_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSFreePoolInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSFreePoolInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  preparelottery_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSFreePoolInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool prepareLottery = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          preparelottery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSFreePoolInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSFreePoolInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool prepareLottery = 1;
  if (this->preparelottery() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_preparelottery(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSFreePoolInfo)
  return target;
}

size_t CSFreePoolInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSFreePoolInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool prepareLottery = 1;
  if (this->preparelottery() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSFreePoolInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSFreePoolInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSFreePoolInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSFreePoolInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSFreePoolInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSFreePoolInfo)
    MergeFrom(*source);
  }
}

void CSFreePoolInfo::MergeFrom(const CSFreePoolInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSFreePoolInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.preparelottery() != 0) {
    _internal_set_preparelottery(from._internal_preparelottery());
  }
}

void CSFreePoolInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSFreePoolInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSFreePoolInfo::CopyFrom(const CSFreePoolInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSFreePoolInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFreePoolInfo::IsInitialized() const {
  return true;
}

void CSFreePoolInfo::InternalSwap(CSFreePoolInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(preparelottery_, other->preparelottery_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSFreePoolInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSFreePoolLottery::_Internal {
 public:
};

CSFreePoolLottery::CSFreePoolLottery(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSFreePoolLottery)
}
CSFreePoolLottery::CSFreePoolLottery(const CSFreePoolLottery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:F4BY.CSFreePoolLottery)
}

void CSFreePoolLottery::SharedCtor() {
  level_ = 0;
}

CSFreePoolLottery::~CSFreePoolLottery() {
  // @@protoc_insertion_point(destructor:F4BY.CSFreePoolLottery)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSFreePoolLottery::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSFreePoolLottery::ArenaDtor(void* object) {
  CSFreePoolLottery* _this = reinterpret_cast< CSFreePoolLottery* >(object);
  (void)_this;
}
void CSFreePoolLottery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSFreePoolLottery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSFreePoolLottery& CSFreePoolLottery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSFreePoolLottery_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSFreePoolLottery::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSFreePoolLottery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSFreePoolLottery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSFreePoolLottery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSFreePoolLottery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 level = 1;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSFreePoolLottery)
  return target;
}

size_t CSFreePoolLottery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSFreePoolLottery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSFreePoolLottery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSFreePoolLottery)
  GOOGLE_DCHECK_NE(&from, this);
  const CSFreePoolLottery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSFreePoolLottery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSFreePoolLottery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSFreePoolLottery)
    MergeFrom(*source);
  }
}

void CSFreePoolLottery::MergeFrom(const CSFreePoolLottery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSFreePoolLottery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void CSFreePoolLottery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSFreePoolLottery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSFreePoolLottery::CopyFrom(const CSFreePoolLottery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSFreePoolLottery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFreePoolLottery::IsInitialized() const {
  return true;
}

void CSFreePoolLottery::InternalSwap(CSFreePoolLottery* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSFreePoolLottery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSFreePoolOpen::_Internal {
 public:
};

CSFreePoolOpen::CSFreePoolOpen(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:F4BY.CSFreePoolOpen)
}
CSFreePoolOpen::CSFreePoolOpen(const CSFreePoolOpen& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  openfreepool_ = from.openfreepool_;
  // @@protoc_insertion_point(copy_constructor:F4BY.CSFreePoolOpen)
}

void CSFreePoolOpen::SharedCtor() {
  openfreepool_ = false;
}

CSFreePoolOpen::~CSFreePoolOpen() {
  // @@protoc_insertion_point(destructor:F4BY.CSFreePoolOpen)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSFreePoolOpen::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSFreePoolOpen::ArenaDtor(void* object) {
  CSFreePoolOpen* _this = reinterpret_cast< CSFreePoolOpen* >(object);
  (void)_this;
}
void CSFreePoolOpen::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSFreePoolOpen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSFreePoolOpen& CSFreePoolOpen::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSFreePoolOpen_F4BY_2eproto.base);
  return *internal_default_instance();
}


void CSFreePoolOpen::Clear() {
// @@protoc_insertion_point(message_clear_start:F4BY.CSFreePoolOpen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  openfreepool_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSFreePoolOpen::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool openFreePool = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          openfreepool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSFreePoolOpen::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:F4BY.CSFreePoolOpen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool openFreePool = 1;
  if (this->openfreepool() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_openfreepool(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:F4BY.CSFreePoolOpen)
  return target;
}

size_t CSFreePoolOpen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:F4BY.CSFreePoolOpen)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool openFreePool = 1;
  if (this->openfreepool() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSFreePoolOpen::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:F4BY.CSFreePoolOpen)
  GOOGLE_DCHECK_NE(&from, this);
  const CSFreePoolOpen* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSFreePoolOpen>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:F4BY.CSFreePoolOpen)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:F4BY.CSFreePoolOpen)
    MergeFrom(*source);
  }
}

void CSFreePoolOpen::MergeFrom(const CSFreePoolOpen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:F4BY.CSFreePoolOpen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.openfreepool() != 0) {
    _internal_set_openfreepool(from._internal_openfreepool());
  }
}

void CSFreePoolOpen::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:F4BY.CSFreePoolOpen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSFreePoolOpen::CopyFrom(const CSFreePoolOpen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:F4BY.CSFreePoolOpen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFreePoolOpen::IsInitialized() const {
  return true;
}

void CSFreePoolOpen::InternalSwap(CSFreePoolOpen* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(openfreepool_, other->openfreepool_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSFreePoolOpen::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace F4BY
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::F4BY::SC_SceneInfo* Arena::CreateMaybeMessage< ::F4BY::SC_SceneInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SC_SceneInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CommonResp* Arena::CreateMaybeMessage< ::F4BY::CommonResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CommonResp >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::Object* Arena::CreateMaybeMessage< ::F4BY::Object >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::Object >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::Obj* Arena::CreateMaybeMessage< ::F4BY::Obj >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::Obj >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::Object1* Arena::CreateMaybeMessage< ::F4BY::Object1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::Object1 >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::Object2* Arena::CreateMaybeMessage< ::F4BY::Object2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::Object2 >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::Object3* Arena::CreateMaybeMessage< ::F4BY::Object3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::Object3 >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::WheelObject* Arena::CreateMaybeMessage< ::F4BY::WheelObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::WheelObject >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::Decimal* Arena::CreateMaybeMessage< ::F4BY::Decimal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::Decimal >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSLoginGameWithToken* Arena::CreateMaybeMessage< ::F4BY::CSLoginGameWithToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSLoginGameWithToken >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCLoginGameWithToken* Arena::CreateMaybeMessage< ::F4BY::SCLoginGameWithToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCLoginGameWithToken >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSUserReady* Arena::CreateMaybeMessage< ::F4BY::CSUserReady >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSUserReady >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::EffectInfo* Arena::CreateMaybeMessage< ::F4BY::EffectInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::EffectInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::StationBase* Arena::CreateMaybeMessage< ::F4BY::StationBase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::StationBase >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCUserReady* Arena::CreateMaybeMessage< ::F4BY::SCUserReady >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCUserReady >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCNotifyLogin* Arena::CreateMaybeMessage< ::F4BY::SCNotifyLogin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCNotifyLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSNotifyLogout* Arena::CreateMaybeMessage< ::F4BY::CSNotifyLogout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSNotifyLogout >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCNotifyLogout* Arena::CreateMaybeMessage< ::F4BY::SCNotifyLogout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCNotifyLogout >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSSetProbability* Arena::CreateMaybeMessage< ::F4BY::CSSetProbability >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSSetProbability >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCSetProbability* Arena::CreateMaybeMessage< ::F4BY::SCSetProbability >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCSetProbability >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSSetWings* Arena::CreateMaybeMessage< ::F4BY::CSSetWings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSSetWings >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCSetWings* Arena::CreateMaybeMessage< ::F4BY::SCSetWings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCSetWings >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSUserShoot* Arena::CreateMaybeMessage< ::F4BY::CSUserShoot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSUserShoot >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCUserShoot* Arena::CreateMaybeMessage< ::F4BY::SCUserShoot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCUserShoot >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSHitFish* Arena::CreateMaybeMessage< ::F4BY::CSHitFish >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSHitFish >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::MultiInfo* Arena::CreateMaybeMessage< ::F4BY::MultiInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::MultiInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCHitFish* Arena::CreateMaybeMessage< ::F4BY::SCHitFish >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCHitFish >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCHitSpecialFish* Arena::CreateMaybeMessage< ::F4BY::SCHitSpecialFish >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCHitSpecialFish >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SyncPropInfoX* Arena::CreateMaybeMessage< ::F4BY::SyncPropInfoX >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SyncPropInfoX >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::UserSyncPropInfo* Arena::CreateMaybeMessage< ::F4BY::UserSyncPropInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::UserSyncPropInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSSyncPropInfo* Arena::CreateMaybeMessage< ::F4BY::CSSyncPropInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSSyncPropInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCSyncPropInfo* Arena::CreateMaybeMessage< ::F4BY::SCSyncPropInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCSyncPropInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSSyncMoney* Arena::CreateMaybeMessage< ::F4BY::CSSyncMoney >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSSyncMoney >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCSyncMoney* Arena::CreateMaybeMessage< ::F4BY::SCSyncMoney >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCSyncMoney >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::FishTrace* Arena::CreateMaybeMessage< ::F4BY::FishTrace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::FishTrace >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCFishTracesList* Arena::CreateMaybeMessage< ::F4BY::SCFishTracesList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCFishTracesList >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSSyncFishReq* Arena::CreateMaybeMessage< ::F4BY::CSSyncFishReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSSyncFishReq >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCSyncFishReq* Arena::CreateMaybeMessage< ::F4BY::SCSyncFishReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCSyncFishReq >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSSyncFishRsp* Arena::CreateMaybeMessage< ::F4BY::CSSyncFishRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSSyncFishRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCSyncFishRsp* Arena::CreateMaybeMessage< ::F4BY::SCSyncFishRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCSyncFishRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCChangeScene* Arena::CreateMaybeMessage< ::F4BY::SCChangeScene >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCChangeScene >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSFishOutsideScreen* Arena::CreateMaybeMessage< ::F4BY::CSFishOutsideScreen >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSFishOutsideScreen >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSLockFish* Arena::CreateMaybeMessage< ::F4BY::CSLockFish >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSLockFish >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCLockFish* Arena::CreateMaybeMessage< ::F4BY::SCLockFish >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCLockFish >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSCrazySkill* Arena::CreateMaybeMessage< ::F4BY::CSCrazySkill >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSCrazySkill >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCCrazySkill* Arena::CreateMaybeMessage< ::F4BY::SCCrazySkill >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCCrazySkill >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSTrebleSkill* Arena::CreateMaybeMessage< ::F4BY::CSTrebleSkill >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSTrebleSkill >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCTrebleSkill* Arena::CreateMaybeMessage< ::F4BY::SCTrebleSkill >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCTrebleSkill >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSUserRunBackground* Arena::CreateMaybeMessage< ::F4BY::CSUserRunBackground >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSUserRunBackground >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCUserRunBackground* Arena::CreateMaybeMessage< ::F4BY::SCUserRunBackground >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCUserRunBackground >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSHeartBeat* Arena::CreateMaybeMessage< ::F4BY::CSHeartBeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSHeartBeat >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCHeartBeat* Arena::CreateMaybeMessage< ::F4BY::SCHeartBeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCHeartBeat >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::GunSpecEffect* Arena::CreateMaybeMessage< ::F4BY::GunSpecEffect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::GunSpecEffect >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::WingsSpecEffect* Arena::CreateMaybeMessage< ::F4BY::WingsSpecEffect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::WingsSpecEffect >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::WingsInfo* Arena::CreateMaybeMessage< ::F4BY::WingsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::WingsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::GunInfo* Arena::CreateMaybeMessage< ::F4BY::GunInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::GunInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::VipInfo* Arena::CreateMaybeMessage< ::F4BY::VipInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::VipInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::PropInfo* Arena::CreateMaybeMessage< ::F4BY::PropInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::PropInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSUserInfoNotify* Arena::CreateMaybeMessage< ::F4BY::CSUserInfoNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSUserInfoNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCUserInfoNotify* Arena::CreateMaybeMessage< ::F4BY::SCUserInfoNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCUserInfoNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCGameInfoNotify* Arena::CreateMaybeMessage< ::F4BY::SCGameInfoNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCGameInfoNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCInfoRedDot* Arena::CreateMaybeMessage< ::F4BY::SCInfoRedDot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCInfoRedDot >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::JumpHighArena* Arena::CreateMaybeMessage< ::F4BY::JumpHighArena >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::JumpHighArena >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCActivityInfo* Arena::CreateMaybeMessage< ::F4BY::SCActivityInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCActivityInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSChat* Arena::CreateMaybeMessage< ::F4BY::CSChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSChat >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCChat* Arena::CreateMaybeMessage< ::F4BY::SCChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCChat >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCGainAward* Arena::CreateMaybeMessage< ::F4BY::SCGainAward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCGainAward >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSAwardPool* Arena::CreateMaybeMessage< ::F4BY::CSAwardPool >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSAwardPool >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCAwardPool* Arena::CreateMaybeMessage< ::F4BY::SCAwardPool >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCAwardPool >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSPropStatus* Arena::CreateMaybeMessage< ::F4BY::CSPropStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSPropStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCPropStatus* Arena::CreateMaybeMessage< ::F4BY::SCPropStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCPropStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::GivenCardAward* Arena::CreateMaybeMessage< ::F4BY::GivenCardAward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::GivenCardAward >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::UserAwardItem* Arena::CreateMaybeMessage< ::F4BY::UserAwardItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::UserAwardItem >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSUserPoolInfo* Arena::CreateMaybeMessage< ::F4BY::CSUserPoolInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSUserPoolInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCUserPoolInfo* Arena::CreateMaybeMessage< ::F4BY::SCUserPoolInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCUserPoolInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSUserPoolStatus* Arena::CreateMaybeMessage< ::F4BY::CSUserPoolStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSUserPoolStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCUserPoolStatus* Arena::CreateMaybeMessage< ::F4BY::SCUserPoolStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCUserPoolStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSUserPoolPreDraw* Arena::CreateMaybeMessage< ::F4BY::CSUserPoolPreDraw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSUserPoolPreDraw >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCUserPoolPreDraw* Arena::CreateMaybeMessage< ::F4BY::SCUserPoolPreDraw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCUserPoolPreDraw >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSUserPoolDraw* Arena::CreateMaybeMessage< ::F4BY::CSUserPoolDraw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSUserPoolDraw >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCUserPoolDraw* Arena::CreateMaybeMessage< ::F4BY::SCUserPoolDraw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCUserPoolDraw >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCUserPoolAdd* Arena::CreateMaybeMessage< ::F4BY::SCUserPoolAdd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCUserPoolAdd >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSUserPoolDoubleInfo* Arena::CreateMaybeMessage< ::F4BY::CSUserPoolDoubleInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSUserPoolDoubleInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCUserPoolDoubleInfo* Arena::CreateMaybeMessage< ::F4BY::SCUserPoolDoubleInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCUserPoolDoubleInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSUserPoolDouble* Arena::CreateMaybeMessage< ::F4BY::CSUserPoolDouble >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSUserPoolDouble >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCUserPoolDouble* Arena::CreateMaybeMessage< ::F4BY::SCUserPoolDouble >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCUserPoolDouble >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSLuckyPoolInfo* Arena::CreateMaybeMessage< ::F4BY::CSLuckyPoolInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSLuckyPoolInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCLuckyPoolInfo* Arena::CreateMaybeMessage< ::F4BY::SCLuckyPoolInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCLuckyPoolInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSLuckyPoolDraw* Arena::CreateMaybeMessage< ::F4BY::CSLuckyPoolDraw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSLuckyPoolDraw >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCLuckyPoolDraw* Arena::CreateMaybeMessage< ::F4BY::SCLuckyPoolDraw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCLuckyPoolDraw >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSTorpedoPreShoot* Arena::CreateMaybeMessage< ::F4BY::CSTorpedoPreShoot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSTorpedoPreShoot >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCTorpedoPreShoot* Arena::CreateMaybeMessage< ::F4BY::SCTorpedoPreShoot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCTorpedoPreShoot >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSTorpedoCancelShoot* Arena::CreateMaybeMessage< ::F4BY::CSTorpedoCancelShoot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSTorpedoCancelShoot >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCTorpedoCancelShoot* Arena::CreateMaybeMessage< ::F4BY::SCTorpedoCancelShoot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCTorpedoCancelShoot >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSTorpedoShoot* Arena::CreateMaybeMessage< ::F4BY::CSTorpedoShoot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSTorpedoShoot >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCTorpedoShoot* Arena::CreateMaybeMessage< ::F4BY::SCTorpedoShoot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCTorpedoShoot >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSTorpedoHit* Arena::CreateMaybeMessage< ::F4BY::CSTorpedoHit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSTorpedoHit >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCTorpedoHit* Arena::CreateMaybeMessage< ::F4BY::SCTorpedoHit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCTorpedoHit >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSCallFish* Arena::CreateMaybeMessage< ::F4BY::CSCallFish >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSCallFish >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCCallFish* Arena::CreateMaybeMessage< ::F4BY::SCCallFish >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCCallFish >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCComTask* Arena::CreateMaybeMessage< ::F4BY::SCComTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCComTask >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCTaskInfo* Arena::CreateMaybeMessage< ::F4BY::SCTaskInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCTaskInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSSaveSkillTime* Arena::CreateMaybeMessage< ::F4BY::CSSaveSkillTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSSaveSkillTime >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SevenDayTask* Arena::CreateMaybeMessage< ::F4BY::SevenDayTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SevenDayTask >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SevenDayDetail* Arena::CreateMaybeMessage< ::F4BY::SevenDayDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SevenDayDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSSevenDayInfo* Arena::CreateMaybeMessage< ::F4BY::CSSevenDayInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSSevenDayInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCSevenDayInfo* Arena::CreateMaybeMessage< ::F4BY::SCSevenDayInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCSevenDayInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSSevenDayAward* Arena::CreateMaybeMessage< ::F4BY::CSSevenDayAward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSSevenDayAward >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCSevenDayAward* Arena::CreateMaybeMessage< ::F4BY::SCSevenDayAward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCSevenDayAward >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCVipChargeAward* Arena::CreateMaybeMessage< ::F4BY::SCVipChargeAward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCVipChargeAward >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSClickStatistic* Arena::CreateMaybeMessage< ::F4BY::CSClickStatistic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSClickStatistic >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSNewClickStatistic* Arena::CreateMaybeMessage< ::F4BY::CSNewClickStatistic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSNewClickStatistic >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSUserLog* Arena::CreateMaybeMessage< ::F4BY::CSUserLog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSUserLog >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSUserEvent* Arena::CreateMaybeMessage< ::F4BY::CSUserEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSUserEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSGetAwardPoolRecord* Arena::CreateMaybeMessage< ::F4BY::CSGetAwardPoolRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSGetAwardPoolRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::AwardPoolRecord* Arena::CreateMaybeMessage< ::F4BY::AwardPoolRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::AwardPoolRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCGetAwardPoolRecord* Arena::CreateMaybeMessage< ::F4BY::SCGetAwardPoolRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCGetAwardPoolRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCPropDropNotify* Arena::CreateMaybeMessage< ::F4BY::SCPropDropNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCPropDropNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSUseProp* Arena::CreateMaybeMessage< ::F4BY::CSUseProp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSUseProp >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCUseProp* Arena::CreateMaybeMessage< ::F4BY::SCUseProp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCUseProp >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCFrozenTime* Arena::CreateMaybeMessage< ::F4BY::SCFrozenTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCFrozenTime >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCTreasureFishInfo* Arena::CreateMaybeMessage< ::F4BY::SCTreasureFishInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCTreasureFishInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCTreasureFishCatched* Arena::CreateMaybeMessage< ::F4BY::SCTreasureFishCatched >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCTreasureFishCatched >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::MatchPackAddition* Arena::CreateMaybeMessage< ::F4BY::MatchPackAddition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::MatchPackAddition >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSMatchPackAddition* Arena::CreateMaybeMessage< ::F4BY::CSMatchPackAddition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSMatchPackAddition >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCMatchPackAddition* Arena::CreateMaybeMessage< ::F4BY::SCMatchPackAddition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCMatchPackAddition >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCMatchPackInvail* Arena::CreateMaybeMessage< ::F4BY::SCMatchPackInvail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCMatchPackInvail >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSMatchPackBuying* Arena::CreateMaybeMessage< ::F4BY::CSMatchPackBuying >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSMatchPackBuying >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::AwardDetail* Arena::CreateMaybeMessage< ::F4BY::AwardDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::AwardDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::LuckyAwardNotify* Arena::CreateMaybeMessage< ::F4BY::LuckyAwardNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::LuckyAwardNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSGameItemSwitch* Arena::CreateMaybeMessage< ::F4BY::CSGameItemSwitch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSGameItemSwitch >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCGameItemSwitch* Arena::CreateMaybeMessage< ::F4BY::SCGameItemSwitch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCGameItemSwitch >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::AwardProp* Arena::CreateMaybeMessage< ::F4BY::AwardProp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::AwardProp >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::LuckyTaskInfo* Arena::CreateMaybeMessage< ::F4BY::LuckyTaskInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::LuckyTaskInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSLuckyDrawInfo* Arena::CreateMaybeMessage< ::F4BY::CSLuckyDrawInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSLuckyDrawInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCLuckyDrawInfo* Arena::CreateMaybeMessage< ::F4BY::SCLuckyDrawInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCLuckyDrawInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSGetLuckyTaskAward* Arena::CreateMaybeMessage< ::F4BY::CSGetLuckyTaskAward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSGetLuckyTaskAward >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCGetLuckyTaskAward* Arena::CreateMaybeMessage< ::F4BY::SCGetLuckyTaskAward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCGetLuckyTaskAward >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSGetLuckyNum* Arena::CreateMaybeMessage< ::F4BY::CSGetLuckyNum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSGetLuckyNum >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCGetLuckyNum* Arena::CreateMaybeMessage< ::F4BY::SCGetLuckyNum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCGetLuckyNum >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSLuckyRedDot* Arena::CreateMaybeMessage< ::F4BY::CSLuckyRedDot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSLuckyRedDot >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCLuckyRedDot* Arena::CreateMaybeMessage< ::F4BY::SCLuckyRedDot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCLuckyRedDot >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::LuckyRecord* Arena::CreateMaybeMessage< ::F4BY::LuckyRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::LuckyRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::OwnRecord* Arena::CreateMaybeMessage< ::F4BY::OwnRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::OwnRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSLuckyRecord* Arena::CreateMaybeMessage< ::F4BY::CSLuckyRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSLuckyRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCLuckyRecord* Arena::CreateMaybeMessage< ::F4BY::SCLuckyRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCLuckyRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCOwnRecord* Arena::CreateMaybeMessage< ::F4BY::SCOwnRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCOwnRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSBombInfo* Arena::CreateMaybeMessage< ::F4BY::CSBombInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSBombInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCSyncBomb* Arena::CreateMaybeMessage< ::F4BY::SCSyncBomb >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCSyncBomb >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCSyncBombFinish* Arena::CreateMaybeMessage< ::F4BY::SCSyncBombFinish >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCSyncBombFinish >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSBombHitFishInfo* Arena::CreateMaybeMessage< ::F4BY::CSBombHitFishInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSBombHitFishInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCGetMagicCube* Arena::CreateMaybeMessage< ::F4BY::SCGetMagicCube >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCGetMagicCube >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCMagicCubeBulletInfo* Arena::CreateMaybeMessage< ::F4BY::SCMagicCubeBulletInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCMagicCubeBulletInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSPreHit* Arena::CreateMaybeMessage< ::F4BY::CSPreHit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSPreHit >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCPreHit* Arena::CreateMaybeMessage< ::F4BY::SCPreHit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCPreHit >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSPreShoot* Arena::CreateMaybeMessage< ::F4BY::CSPreShoot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSPreShoot >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCPreShoot* Arena::CreateMaybeMessage< ::F4BY::SCPreShoot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCPreShoot >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::FrozenFish* Arena::CreateMaybeMessage< ::F4BY::FrozenFish >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::FrozenFish >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCFrozenFish* Arena::CreateMaybeMessage< ::F4BY::SCFrozenFish >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCFrozenFish >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCValentineDayFish* Arena::CreateMaybeMessage< ::F4BY::SCValentineDayFish >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCValentineDayFish >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCKiRinFish* Arena::CreateMaybeMessage< ::F4BY::SCKiRinFish >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCKiRinFish >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCNvWaFishCapture* Arena::CreateMaybeMessage< ::F4BY::SCNvWaFishCapture >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCNvWaFishCapture >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCBombGlobeFishInfo* Arena::CreateMaybeMessage< ::F4BY::SCBombGlobeFishInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCBombGlobeFishInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSBombGlobeFishHit* Arena::CreateMaybeMessage< ::F4BY::CSBombGlobeFishHit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSBombGlobeFishHit >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCAnniversaryShowSelect* Arena::CreateMaybeMessage< ::F4BY::SCAnniversaryShowSelect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCAnniversaryShowSelect >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSAnniversarySelectReq* Arena::CreateMaybeMessage< ::F4BY::CSAnniversarySelectReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSAnniversarySelectReq >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::AnniversaryStage1Result* Arena::CreateMaybeMessage< ::F4BY::AnniversaryStage1Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::AnniversaryStage1Result >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::AnniversaryStage2Result* Arena::CreateMaybeMessage< ::F4BY::AnniversaryStage2Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::AnniversaryStage2Result >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::AnniversaryStage3Result* Arena::CreateMaybeMessage< ::F4BY::AnniversaryStage3Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::AnniversaryStage3Result >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCAnniversarySelectResult* Arena::CreateMaybeMessage< ::F4BY::SCAnniversarySelectResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCAnniversarySelectResult >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSAnniversaryHit* Arena::CreateMaybeMessage< ::F4BY::CSAnniversaryHit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSAnniversaryHit >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCSyncAnniversaryHitStage* Arena::CreateMaybeMessage< ::F4BY::SCSyncAnniversaryHitStage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCSyncAnniversaryHitStage >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::ScallopLottery* Arena::CreateMaybeMessage< ::F4BY::ScallopLottery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::ScallopLottery >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCCaptureScallop* Arena::CreateMaybeMessage< ::F4BY::SCCaptureScallop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCCaptureScallop >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSOpenScallop* Arena::CreateMaybeMessage< ::F4BY::CSOpenScallop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSOpenScallop >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCOpenScallop* Arena::CreateMaybeMessage< ::F4BY::SCOpenScallop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCOpenScallop >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCSettleScallopLottery* Arena::CreateMaybeMessage< ::F4BY::SCSettleScallopLottery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCSettleScallopLottery >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCSyncScallopLottery* Arena::CreateMaybeMessage< ::F4BY::SCSyncScallopLottery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCSyncScallopLottery >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::OpenChestReward* Arena::CreateMaybeMessage< ::F4BY::OpenChestReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::OpenChestReward >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCUpdateChestStatus* Arena::CreateMaybeMessage< ::F4BY::SCUpdateChestStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCUpdateChestStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSChestConfig* Arena::CreateMaybeMessage< ::F4BY::CSChestConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSChestConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::ChestBrief* Arena::CreateMaybeMessage< ::F4BY::ChestBrief >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::ChestBrief >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCChestConfig* Arena::CreateMaybeMessage< ::F4BY::SCChestConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCChestConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCOpenChest* Arena::CreateMaybeMessage< ::F4BY::SCOpenChest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCOpenChest >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSSelectChestReward* Arena::CreateMaybeMessage< ::F4BY::CSSelectChestReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSSelectChestReward >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCSelectChestReward* Arena::CreateMaybeMessage< ::F4BY::SCSelectChestReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCSelectChestReward >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSChestSetAutoSelect* Arena::CreateMaybeMessage< ::F4BY::CSChestSetAutoSelect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSChestSetAutoSelect >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCChestSetAutoSelect* Arena::CreateMaybeMessage< ::F4BY::SCChestSetAutoSelect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCChestSetAutoSelect >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSChestSetEnable* Arena::CreateMaybeMessage< ::F4BY::CSChestSetEnable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSChestSetEnable >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCChestSetEnable* Arena::CreateMaybeMessage< ::F4BY::SCChestSetEnable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCChestSetEnable >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCSpecEffect* Arena::CreateMaybeMessage< ::F4BY::SCSpecEffect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCSpecEffect >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCTortoiseExplode* Arena::CreateMaybeMessage< ::F4BY::SCTortoiseExplode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCTortoiseExplode >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::RewardInfo* Arena::CreateMaybeMessage< ::F4BY::RewardInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::RewardInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::MissionInfo* Arena::CreateMaybeMessage< ::F4BY::MissionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::MissionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::BigRewardInfo* Arena::CreateMaybeMessage< ::F4BY::BigRewardInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::BigRewardInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::TreasureHuntConfig* Arena::CreateMaybeMessage< ::F4BY::TreasureHuntConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::TreasureHuntConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSSyncConfigs* Arena::CreateMaybeMessage< ::F4BY::CSSyncConfigs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSSyncConfigs >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCSyncConfigs* Arena::CreateMaybeMessage< ::F4BY::SCSyncConfigs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCSyncConfigs >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSDrawReward* Arena::CreateMaybeMessage< ::F4BY::CSDrawReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSDrawReward >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCDrawReward* Arena::CreateMaybeMessage< ::F4BY::SCDrawReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCDrawReward >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSTreasureHuntMission* Arena::CreateMaybeMessage< ::F4BY::CSTreasureHuntMission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSTreasureHuntMission >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCTreasureHuntMission* Arena::CreateMaybeMessage< ::F4BY::SCTreasureHuntMission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCTreasureHuntMission >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSReceiveMissionReward* Arena::CreateMaybeMessage< ::F4BY::CSReceiveMissionReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSReceiveMissionReward >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCReceiveMissionReward* Arena::CreateMaybeMessage< ::F4BY::SCReceiveMissionReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCReceiveMissionReward >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSDrawTimes* Arena::CreateMaybeMessage< ::F4BY::CSDrawTimes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSDrawTimes >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCDrawTimes* Arena::CreateMaybeMessage< ::F4BY::SCDrawTimes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCDrawTimes >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSVerifyActivity* Arena::CreateMaybeMessage< ::F4BY::CSVerifyActivity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSVerifyActivity >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCVerifyActivity* Arena::CreateMaybeMessage< ::F4BY::SCVerifyActivity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCVerifyActivity >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::Package* Arena::CreateMaybeMessage< ::F4BY::Package >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::Package >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSTreasureHuntPackage* Arena::CreateMaybeMessage< ::F4BY::CSTreasureHuntPackage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSTreasureHuntPackage >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCTreasureHuntPackage* Arena::CreateMaybeMessage< ::F4BY::SCTreasureHuntPackage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCTreasureHuntPackage >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::ExchangeShopInfo* Arena::CreateMaybeMessage< ::F4BY::ExchangeShopInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::ExchangeShopInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSExchangeShop* Arena::CreateMaybeMessage< ::F4BY::CSExchangeShop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSExchangeShop >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCExchangeShop* Arena::CreateMaybeMessage< ::F4BY::SCExchangeShop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCExchangeShop >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSPurchasePackage* Arena::CreateMaybeMessage< ::F4BY::CSPurchasePackage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSPurchasePackage >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCPurchasePackage* Arena::CreateMaybeMessage< ::F4BY::SCPurchasePackage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCPurchasePackage >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSVerifyTermChange* Arena::CreateMaybeMessage< ::F4BY::CSVerifyTermChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSVerifyTermChange >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCVerifyTermChange* Arena::CreateMaybeMessage< ::F4BY::SCVerifyTermChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCVerifyTermChange >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCWaterDropInfo* Arena::CreateMaybeMessage< ::F4BY::SCWaterDropInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCWaterDropInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSBuyGun* Arena::CreateMaybeMessage< ::F4BY::CSBuyGun >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSBuyGun >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCBuyGun* Arena::CreateMaybeMessage< ::F4BY::SCBuyGun >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCBuyGun >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSBuyWings* Arena::CreateMaybeMessage< ::F4BY::CSBuyWings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSBuyWings >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCBuyWings* Arena::CreateMaybeMessage< ::F4BY::SCBuyWings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCBuyWings >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::SCNotifyActStatus* Arena::CreateMaybeMessage< ::F4BY::SCNotifyActStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::SCNotifyActStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSSetDoubleShoot* Arena::CreateMaybeMessage< ::F4BY::CSSetDoubleShoot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSSetDoubleShoot >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSFreePoolInfo* Arena::CreateMaybeMessage< ::F4BY::CSFreePoolInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSFreePoolInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSFreePoolLottery* Arena::CreateMaybeMessage< ::F4BY::CSFreePoolLottery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSFreePoolLottery >(arena);
}
template<> PROTOBUF_NOINLINE ::F4BY::CSFreePoolOpen* Arena::CreateMaybeMessage< ::F4BY::CSFreePoolOpen >(Arena* arena) {
  return Arena::CreateMessageInternal< ::F4BY::CSFreePoolOpen >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
