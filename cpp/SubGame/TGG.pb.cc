// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TGG.proto

#include "TGG.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_TGG_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_stLineInfo_TGG_2eproto;
namespace TGG {
class SC_SceneInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_SceneInfo> _instance;
} _SC_SceneInfo_default_instance_;
class stLineInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<stLineInfo> _instance;
} _stLineInfo_default_instance_;
class CMD_3D_SC_ResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_3D_SC_Result> _instance;
} _CMD_3D_SC_Result_default_instance_;
}  // namespace TGG
static void InitDefaultsscc_info_CMD_3D_SC_Result_TGG_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TGG::_CMD_3D_SC_Result_default_instance_;
    new (ptr) ::TGG::CMD_3D_SC_Result();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMD_3D_SC_Result_TGG_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMD_3D_SC_Result_TGG_2eproto}, {
      &scc_info_stLineInfo_TGG_2eproto.base,}};

static void InitDefaultsscc_info_SC_SceneInfo_TGG_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TGG::_SC_SceneInfo_default_instance_;
    new (ptr) ::TGG::SC_SceneInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_SceneInfo_TGG_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_SceneInfo_TGG_2eproto}, {}};

static void InitDefaultsscc_info_stLineInfo_TGG_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TGG::_stLineInfo_default_instance_;
    new (ptr) ::TGG::stLineInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_stLineInfo_TGG_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_stLineInfo_TGG_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TGG_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_TGG_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TGG_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TGG_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TGG::SC_SceneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TGG::SC_SceneInfo, cur_bet_),
  PROTOBUF_FIELD_OFFSET(::TGG::SC_SceneInfo, user_gold_),
  PROTOBUF_FIELD_OFFSET(::TGG::SC_SceneInfo, bet_),
  PROTOBUF_FIELD_OFFSET(::TGG::SC_SceneInfo, free_count_),
  PROTOBUF_FIELD_OFFSET(::TGG::SC_SceneInfo, cur_free_double_),
  PROTOBUF_FIELD_OFFSET(::TGG::SC_SceneInfo, cai_jin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TGG::stLineInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TGG::stLineInfo, icon_),
  PROTOBUF_FIELD_OFFSET(::TGG::stLineInfo, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TGG::CMD_3D_SC_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TGG::CMD_3D_SC_Result, icon_),
  PROTOBUF_FIELD_OFFSET(::TGG::CMD_3D_SC_Result, line_info_),
  PROTOBUF_FIELD_OFFSET(::TGG::CMD_3D_SC_Result, line_win_score_),
  PROTOBUF_FIELD_OFFSET(::TGG::CMD_3D_SC_Result, free_num_),
  PROTOBUF_FIELD_OFFSET(::TGG::CMD_3D_SC_Result, win_cai_jin_),
  PROTOBUF_FIELD_OFFSET(::TGG::CMD_3D_SC_Result, change_line_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TGG::SC_SceneInfo)},
  { 11, -1, sizeof(::TGG::stLineInfo)},
  { 18, -1, sizeof(::TGG::CMD_3D_SC_Result)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TGG::_SC_SceneInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TGG::_stLineInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TGG::_CMD_3D_SC_Result_default_instance_),
};

const char descriptor_table_protodef_TGG_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tTGG.proto\022\003TGG\"}\n\014SC_SceneInfo\022\017\n\007cur_"
  "bet\030\001 \001(\005\022\021\n\tuser_gold\030\002 \001(\005\022\013\n\003bet\030\003 \003("
  "\005\022\022\n\nfree_count\030\004 \001(\005\022\027\n\017cur_free_double"
  "\030\005 \001(\005\022\017\n\007cai_jin\030\006 \001(\005\")\n\nstLineInfo\022\014\n"
  "\004Icon\030\001 \001(\005\022\r\n\005Count\030\002 \001(\005\"\230\001\n\020CMD_3D_SC"
  "_Result\022\014\n\004icon\030\001 \003(\005\022\"\n\tline_info\030\002 \003(\013"
  "2\017.TGG.stLineInfo\022\026\n\016line_win_score\030\003 \001("
  "\005\022\020\n\010free_num\030\004 \001(\005\022\023\n\013win_cai_jin\030\005 \001(\005"
  "\022\023\n\013change_line\030\006 \001(\005*L\n\tEMsgIDTGG\022\025\n\021SU"
  "B_CS_GAME_START\020\000\022\024\n\020SUB_SC_GAME_OVER\020\001\022"
  "\022\n\016SUB_SC_BET_ERR\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_TGG_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_TGG_2eproto_sccs[3] = {
  &scc_info_CMD_3D_SC_Result_TGG_2eproto.base,
  &scc_info_SC_SceneInfo_TGG_2eproto.base,
  &scc_info_stLineInfo_TGG_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TGG_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TGG_2eproto = {
  false, false, descriptor_table_protodef_TGG_2eproto, "TGG.proto", 427,
  &descriptor_table_TGG_2eproto_once, descriptor_table_TGG_2eproto_sccs, descriptor_table_TGG_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_TGG_2eproto::offsets,
  file_level_metadata_TGG_2eproto, 3, file_level_enum_descriptors_TGG_2eproto, file_level_service_descriptors_TGG_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_TGG_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_TGG_2eproto)), true);
namespace TGG {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDTGG_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TGG_2eproto);
  return file_level_enum_descriptors_TGG_2eproto[0];
}
bool EMsgIDTGG_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SC_SceneInfo::_Internal {
 public:
};

SC_SceneInfo::SC_SceneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bet_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TGG.SC_SceneInfo)
}
SC_SceneInfo::SC_SceneInfo(const SC_SceneInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bet_(from.bet_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cur_bet_, &from.cur_bet_,
    static_cast<size_t>(reinterpret_cast<char*>(&cai_jin_) -
    reinterpret_cast<char*>(&cur_bet_)) + sizeof(cai_jin_));
  // @@protoc_insertion_point(copy_constructor:TGG.SC_SceneInfo)
}

void SC_SceneInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&cur_bet_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&cai_jin_) -
      reinterpret_cast<char*>(&cur_bet_)) + sizeof(cai_jin_));
}

SC_SceneInfo::~SC_SceneInfo() {
  // @@protoc_insertion_point(destructor:TGG.SC_SceneInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SC_SceneInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SC_SceneInfo::ArenaDtor(void* object) {
  SC_SceneInfo* _this = reinterpret_cast< SC_SceneInfo* >(object);
  (void)_this;
}
void SC_SceneInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SC_SceneInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_SceneInfo& SC_SceneInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_SceneInfo_TGG_2eproto.base);
  return *internal_default_instance();
}


void SC_SceneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TGG.SC_SceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bet_.Clear();
  ::memset(&cur_bet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cai_jin_) -
      reinterpret_cast<char*>(&cur_bet_)) + sizeof(cai_jin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_SceneInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 cur_bet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cur_bet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 user_gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          user_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 bet = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bet(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_bet(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 free_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          free_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cur_free_double = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          cur_free_double_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cai_jin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          cai_jin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_SceneInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TGG.SC_SceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cur_bet = 1;
  if (this->cur_bet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cur_bet(), target);
  }

  // int32 user_gold = 2;
  if (this->user_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_user_gold(), target);
  }

  // repeated int32 bet = 3;
  {
    int byte_size = _bet_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_bet(), byte_size, target);
    }
  }

  // int32 free_count = 4;
  if (this->free_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_free_count(), target);
  }

  // int32 cur_free_double = 5;
  if (this->cur_free_double() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_cur_free_double(), target);
  }

  // int32 cai_jin = 6;
  if (this->cai_jin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_cai_jin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TGG.SC_SceneInfo)
  return target;
}

size_t SC_SceneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TGG.SC_SceneInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 bet = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bet_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bet_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 cur_bet = 1;
  if (this->cur_bet() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur_bet());
  }

  // int32 user_gold = 2;
  if (this->user_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_gold());
  }

  // int32 free_count = 4;
  if (this->free_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_free_count());
  }

  // int32 cur_free_double = 5;
  if (this->cur_free_double() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur_free_double());
  }

  // int32 cai_jin = 6;
  if (this->cai_jin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cai_jin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_SceneInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TGG.SC_SceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_SceneInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_SceneInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TGG.SC_SceneInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TGG.SC_SceneInfo)
    MergeFrom(*source);
  }
}

void SC_SceneInfo::MergeFrom(const SC_SceneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TGG.SC_SceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bet_.MergeFrom(from.bet_);
  if (from.cur_bet() != 0) {
    _internal_set_cur_bet(from._internal_cur_bet());
  }
  if (from.user_gold() != 0) {
    _internal_set_user_gold(from._internal_user_gold());
  }
  if (from.free_count() != 0) {
    _internal_set_free_count(from._internal_free_count());
  }
  if (from.cur_free_double() != 0) {
    _internal_set_cur_free_double(from._internal_cur_free_double());
  }
  if (from.cai_jin() != 0) {
    _internal_set_cai_jin(from._internal_cai_jin());
  }
}

void SC_SceneInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TGG.SC_SceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SceneInfo::CopyFrom(const SC_SceneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TGG.SC_SceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_SceneInfo::IsInitialized() const {
  return true;
}

void SC_SceneInfo::InternalSwap(SC_SceneInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bet_.InternalSwap(&other->bet_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_SceneInfo, cai_jin_)
      + sizeof(SC_SceneInfo::cai_jin_)
      - PROTOBUF_FIELD_OFFSET(SC_SceneInfo, cur_bet_)>(
          reinterpret_cast<char*>(&cur_bet_),
          reinterpret_cast<char*>(&other->cur_bet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_SceneInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class stLineInfo::_Internal {
 public:
};

stLineInfo::stLineInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TGG.stLineInfo)
}
stLineInfo::stLineInfo(const stLineInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&icon_, &from.icon_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&icon_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:TGG.stLineInfo)
}

void stLineInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&icon_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&icon_)) + sizeof(count_));
}

stLineInfo::~stLineInfo() {
  // @@protoc_insertion_point(destructor:TGG.stLineInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void stLineInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void stLineInfo::ArenaDtor(void* object) {
  stLineInfo* _this = reinterpret_cast< stLineInfo* >(object);
  (void)_this;
}
void stLineInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void stLineInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const stLineInfo& stLineInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_stLineInfo_TGG_2eproto.base);
  return *internal_default_instance();
}


void stLineInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TGG.stLineInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&icon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&icon_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* stLineInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Icon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          icon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* stLineInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TGG.stLineInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Icon = 1;
  if (this->icon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_icon(), target);
  }

  // int32 Count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TGG.stLineInfo)
  return target;
}

size_t stLineInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TGG.stLineInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Icon = 1;
  if (this->icon() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_icon());
  }

  // int32 Count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void stLineInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TGG.stLineInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const stLineInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<stLineInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TGG.stLineInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TGG.stLineInfo)
    MergeFrom(*source);
  }
}

void stLineInfo::MergeFrom(const stLineInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TGG.stLineInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.icon() != 0) {
    _internal_set_icon(from._internal_icon());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void stLineInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TGG.stLineInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stLineInfo::CopyFrom(const stLineInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TGG.stLineInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stLineInfo::IsInitialized() const {
  return true;
}

void stLineInfo::InternalSwap(stLineInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(stLineInfo, count_)
      + sizeof(stLineInfo::count_)
      - PROTOBUF_FIELD_OFFSET(stLineInfo, icon_)>(
          reinterpret_cast<char*>(&icon_),
          reinterpret_cast<char*>(&other->icon_));
}

::PROTOBUF_NAMESPACE_ID::Metadata stLineInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_3D_SC_Result::_Internal {
 public:
};

CMD_3D_SC_Result::CMD_3D_SC_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  icon_(arena),
  line_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TGG.CMD_3D_SC_Result)
}
CMD_3D_SC_Result::CMD_3D_SC_Result(const CMD_3D_SC_Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      icon_(from.icon_),
      line_info_(from.line_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&line_win_score_, &from.line_win_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&change_line_) -
    reinterpret_cast<char*>(&line_win_score_)) + sizeof(change_line_));
  // @@protoc_insertion_point(copy_constructor:TGG.CMD_3D_SC_Result)
}

void CMD_3D_SC_Result::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMD_3D_SC_Result_TGG_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&line_win_score_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&change_line_) -
      reinterpret_cast<char*>(&line_win_score_)) + sizeof(change_line_));
}

CMD_3D_SC_Result::~CMD_3D_SC_Result() {
  // @@protoc_insertion_point(destructor:TGG.CMD_3D_SC_Result)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_3D_SC_Result::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_3D_SC_Result::ArenaDtor(void* object) {
  CMD_3D_SC_Result* _this = reinterpret_cast< CMD_3D_SC_Result* >(object);
  (void)_this;
}
void CMD_3D_SC_Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_3D_SC_Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_3D_SC_Result& CMD_3D_SC_Result::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_3D_SC_Result_TGG_2eproto.base);
  return *internal_default_instance();
}


void CMD_3D_SC_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:TGG.CMD_3D_SC_Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  icon_.Clear();
  line_info_.Clear();
  ::memset(&line_win_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&change_line_) -
      reinterpret_cast<char*>(&line_win_score_)) + sizeof(change_line_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_3D_SC_Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 icon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_icon(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_icon(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TGG.stLineInfo line_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_line_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 line_win_score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          line_win_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 free_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          free_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 win_cai_jin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          win_cai_jin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 change_line = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          change_line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_3D_SC_Result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TGG.CMD_3D_SC_Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 icon = 1;
  {
    int byte_size = _icon_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_icon(), byte_size, target);
    }
  }

  // repeated .TGG.stLineInfo line_info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_line_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_line_info(i), target, stream);
  }

  // int32 line_win_score = 3;
  if (this->line_win_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_line_win_score(), target);
  }

  // int32 free_num = 4;
  if (this->free_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_free_num(), target);
  }

  // int32 win_cai_jin = 5;
  if (this->win_cai_jin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_win_cai_jin(), target);
  }

  // int32 change_line = 6;
  if (this->change_line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_change_line(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TGG.CMD_3D_SC_Result)
  return target;
}

size_t CMD_3D_SC_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TGG.CMD_3D_SC_Result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 icon = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->icon_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _icon_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .TGG.stLineInfo line_info = 2;
  total_size += 1UL * this->_internal_line_info_size();
  for (const auto& msg : this->line_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 line_win_score = 3;
  if (this->line_win_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_line_win_score());
  }

  // int32 free_num = 4;
  if (this->free_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_free_num());
  }

  // int32 win_cai_jin = 5;
  if (this->win_cai_jin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_win_cai_jin());
  }

  // int32 change_line = 6;
  if (this->change_line() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_change_line());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_3D_SC_Result::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TGG.CMD_3D_SC_Result)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_3D_SC_Result* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_3D_SC_Result>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TGG.CMD_3D_SC_Result)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TGG.CMD_3D_SC_Result)
    MergeFrom(*source);
  }
}

void CMD_3D_SC_Result::MergeFrom(const CMD_3D_SC_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TGG.CMD_3D_SC_Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  icon_.MergeFrom(from.icon_);
  line_info_.MergeFrom(from.line_info_);
  if (from.line_win_score() != 0) {
    _internal_set_line_win_score(from._internal_line_win_score());
  }
  if (from.free_num() != 0) {
    _internal_set_free_num(from._internal_free_num());
  }
  if (from.win_cai_jin() != 0) {
    _internal_set_win_cai_jin(from._internal_win_cai_jin());
  }
  if (from.change_line() != 0) {
    _internal_set_change_line(from._internal_change_line());
  }
}

void CMD_3D_SC_Result::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TGG.CMD_3D_SC_Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_3D_SC_Result::CopyFrom(const CMD_3D_SC_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TGG.CMD_3D_SC_Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_3D_SC_Result::IsInitialized() const {
  return true;
}

void CMD_3D_SC_Result::InternalSwap(CMD_3D_SC_Result* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  icon_.InternalSwap(&other->icon_);
  line_info_.InternalSwap(&other->line_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_3D_SC_Result, change_line_)
      + sizeof(CMD_3D_SC_Result::change_line_)
      - PROTOBUF_FIELD_OFFSET(CMD_3D_SC_Result, line_win_score_)>(
          reinterpret_cast<char*>(&line_win_score_),
          reinterpret_cast<char*>(&other->line_win_score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_3D_SC_Result::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace TGG
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TGG::SC_SceneInfo* Arena::CreateMaybeMessage< ::TGG::SC_SceneInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TGG::SC_SceneInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TGG::stLineInfo* Arena::CreateMaybeMessage< ::TGG::stLineInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TGG::stLineInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TGG::CMD_3D_SC_Result* Arena::CreateMaybeMessage< ::TGG::CMD_3D_SC_Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TGG::CMD_3D_SC_Result >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
