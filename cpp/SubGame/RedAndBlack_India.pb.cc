// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RedAndBlack_India.proto

#include "RedAndBlack_India.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_RedAndBlack_5fIndia_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgAgainBet_RedAndBlack_5fIndia_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RedAndBlack_5fIndia_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgBet_RedAndBlack_5fIndia_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RedAndBlack_5fIndia_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgRecord_RedAndBlack_5fIndia_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RedAndBlack_5fIndia_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgSingleAgainBet_RedAndBlack_5fIndia_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RedAndBlack_5fIndia_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgTotalBet_RedAndBlack_5fIndia_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RedAndBlack_5fIndia_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgWinMsg_RedAndBlack_5fIndia_2eproto;
namespace RedAndBlack_India {
class MsgRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgRecord> _instance;
} _MsgRecord_default_instance_;
class MsgSceneInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgSceneInfo> _instance;
} _MsgSceneInfo_default_instance_;
class MsgBetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgBet> _instance;
} _MsgBet_default_instance_;
class MsgBetRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgBetResp> _instance;
} _MsgBetResp_default_instance_;
class MsgSingleAgainBetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgSingleAgainBet> _instance;
} _MsgSingleAgainBet_default_instance_;
class MsgAgainBetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgAgainBet> _instance;
} _MsgAgainBet_default_instance_;
class MsgAgainBetRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgAgainBetResp> _instance;
} _MsgAgainBetResp_default_instance_;
class MsgWinMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgWinMsg> _instance;
} _MsgWinMsg_default_instance_;
class MsgResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgResult> _instance;
} _MsgResult_default_instance_;
class MsgTotalBetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgTotalBet> _instance;
} _MsgTotalBet_default_instance_;
class MsgBetRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgBetRecord> _instance;
} _MsgBetRecord_default_instance_;
}  // namespace RedAndBlack_India
static void InitDefaultsscc_info_MsgAgainBet_RedAndBlack_5fIndia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RedAndBlack_India::_MsgAgainBet_default_instance_;
    new (ptr) ::RedAndBlack_India::MsgAgainBet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgAgainBet_RedAndBlack_5fIndia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgAgainBet_RedAndBlack_5fIndia_2eproto}, {
      &scc_info_MsgSingleAgainBet_RedAndBlack_5fIndia_2eproto.base,}};

static void InitDefaultsscc_info_MsgAgainBetResp_RedAndBlack_5fIndia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RedAndBlack_India::_MsgAgainBetResp_default_instance_;
    new (ptr) ::RedAndBlack_India::MsgAgainBetResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgAgainBetResp_RedAndBlack_5fIndia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgAgainBetResp_RedAndBlack_5fIndia_2eproto}, {
      &scc_info_MsgAgainBet_RedAndBlack_5fIndia_2eproto.base,}};

static void InitDefaultsscc_info_MsgBet_RedAndBlack_5fIndia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RedAndBlack_India::_MsgBet_default_instance_;
    new (ptr) ::RedAndBlack_India::MsgBet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgBet_RedAndBlack_5fIndia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgBet_RedAndBlack_5fIndia_2eproto}, {}};

static void InitDefaultsscc_info_MsgBetRecord_RedAndBlack_5fIndia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RedAndBlack_India::_MsgBetRecord_default_instance_;
    new (ptr) ::RedAndBlack_India::MsgBetRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgBetRecord_RedAndBlack_5fIndia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgBetRecord_RedAndBlack_5fIndia_2eproto}, {
      &scc_info_MsgTotalBet_RedAndBlack_5fIndia_2eproto.base,}};

static void InitDefaultsscc_info_MsgBetResp_RedAndBlack_5fIndia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RedAndBlack_India::_MsgBetResp_default_instance_;
    new (ptr) ::RedAndBlack_India::MsgBetResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgBetResp_RedAndBlack_5fIndia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgBetResp_RedAndBlack_5fIndia_2eproto}, {
      &scc_info_MsgBet_RedAndBlack_5fIndia_2eproto.base,}};

static void InitDefaultsscc_info_MsgRecord_RedAndBlack_5fIndia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RedAndBlack_India::_MsgRecord_default_instance_;
    new (ptr) ::RedAndBlack_India::MsgRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgRecord_RedAndBlack_5fIndia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgRecord_RedAndBlack_5fIndia_2eproto}, {}};

static void InitDefaultsscc_info_MsgResult_RedAndBlack_5fIndia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RedAndBlack_India::_MsgResult_default_instance_;
    new (ptr) ::RedAndBlack_India::MsgResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgResult_RedAndBlack_5fIndia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgResult_RedAndBlack_5fIndia_2eproto}, {
      &scc_info_MsgWinMsg_RedAndBlack_5fIndia_2eproto.base,}};

static void InitDefaultsscc_info_MsgSceneInfo_RedAndBlack_5fIndia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RedAndBlack_India::_MsgSceneInfo_default_instance_;
    new (ptr) ::RedAndBlack_India::MsgSceneInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgSceneInfo_RedAndBlack_5fIndia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgSceneInfo_RedAndBlack_5fIndia_2eproto}, {
      &scc_info_MsgRecord_RedAndBlack_5fIndia_2eproto.base,}};

static void InitDefaultsscc_info_MsgSingleAgainBet_RedAndBlack_5fIndia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RedAndBlack_India::_MsgSingleAgainBet_default_instance_;
    new (ptr) ::RedAndBlack_India::MsgSingleAgainBet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgSingleAgainBet_RedAndBlack_5fIndia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgSingleAgainBet_RedAndBlack_5fIndia_2eproto}, {}};

static void InitDefaultsscc_info_MsgTotalBet_RedAndBlack_5fIndia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RedAndBlack_India::_MsgTotalBet_default_instance_;
    new (ptr) ::RedAndBlack_India::MsgTotalBet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgTotalBet_RedAndBlack_5fIndia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgTotalBet_RedAndBlack_5fIndia_2eproto}, {}};

static void InitDefaultsscc_info_MsgWinMsg_RedAndBlack_5fIndia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RedAndBlack_India::_MsgWinMsg_default_instance_;
    new (ptr) ::RedAndBlack_India::MsgWinMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgWinMsg_RedAndBlack_5fIndia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgWinMsg_RedAndBlack_5fIndia_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_RedAndBlack_5fIndia_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_RedAndBlack_5fIndia_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_RedAndBlack_5fIndia_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_RedAndBlack_5fIndia_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgRecord, result_),
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgRecord, card_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgSceneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgSceneInfo, bet_),
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgSceneInfo, record_),
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgSceneInfo, bet_limit_),
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgSceneInfo, player_limit_),
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgSceneInfo, state_time_),
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgSceneInfo, remain_time_),
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgSceneInfo, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgBet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgBet, index_),
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgBet, area_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgBetResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgBetResp, chair_id_),
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgBetResp, bet_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgSingleAgainBet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgSingleAgainBet, index_),
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgSingleAgainBet, area_),
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgSingleAgainBet, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgAgainBet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgAgainBet, again_bet_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgAgainBetResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgAgainBetResp, chair_id_),
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgAgainBetResp, again_bet_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgWinMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgWinMsg, chair_id_),
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgWinMsg, gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgResult, win_msg_),
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgResult, card_),
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgResult, card_type_),
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgResult, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgTotalBet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgTotalBet, chair_id_),
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgTotalBet, bet_),
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgTotalBet, gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgBetRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RedAndBlack_India::MsgBetRecord, bet_record_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::RedAndBlack_India::MsgRecord)},
  { 7, -1, sizeof(::RedAndBlack_India::MsgSceneInfo)},
  { 19, -1, sizeof(::RedAndBlack_India::MsgBet)},
  { 26, -1, sizeof(::RedAndBlack_India::MsgBetResp)},
  { 33, -1, sizeof(::RedAndBlack_India::MsgSingleAgainBet)},
  { 41, -1, sizeof(::RedAndBlack_India::MsgAgainBet)},
  { 47, -1, sizeof(::RedAndBlack_India::MsgAgainBetResp)},
  { 54, -1, sizeof(::RedAndBlack_India::MsgWinMsg)},
  { 61, -1, sizeof(::RedAndBlack_India::MsgResult)},
  { 70, -1, sizeof(::RedAndBlack_India::MsgTotalBet)},
  { 78, -1, sizeof(::RedAndBlack_India::MsgBetRecord)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RedAndBlack_India::_MsgRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RedAndBlack_India::_MsgSceneInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RedAndBlack_India::_MsgBet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RedAndBlack_India::_MsgBetResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RedAndBlack_India::_MsgSingleAgainBet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RedAndBlack_India::_MsgAgainBet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RedAndBlack_India::_MsgAgainBetResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RedAndBlack_India::_MsgWinMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RedAndBlack_India::_MsgResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RedAndBlack_India::_MsgTotalBet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RedAndBlack_India::_MsgBetRecord_default_instance_),
};

const char descriptor_table_protodef_RedAndBlack_5fIndia_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027RedAndBlack_India.proto\022\021RedAndBlack_I"
  "ndia\".\n\tMsgRecord\022\016\n\006result\030\001 \001(\005\022\021\n\tcar"
  "d_type\030\002 \001(\005\"\252\001\n\014MsgSceneInfo\022\013\n\003bet\030\001 \003"
  "(\005\022,\n\006record\030\002 \003(\0132\034.RedAndBlack_India.M"
  "sgRecord\022\021\n\tbet_limit\030\003 \003(\005\022\024\n\014player_li"
  "mit\030\004 \001(\005\022\022\n\nstate_time\030\005 \003(\005\022\023\n\013remain_"
  "time\030\006 \001(\005\022\r\n\005state\030\007 \001(\005\"%\n\006MsgBet\022\r\n\005i"
  "ndex\030\001 \001(\005\022\014\n\004area\030\002 \001(\005\"K\n\nMsgBetResp\022\020"
  "\n\010chair_id\030\001 \001(\005\022+\n\010bet_info\030\002 \001(\0132\031.Red"
  "AndBlack_India.MsgBet\"\?\n\021MsgSingleAgainB"
  "et\022\r\n\005index\030\001 \001(\005\022\014\n\004area\030\002 \001(\005\022\r\n\005count"
  "\030\003 \001(\005\"K\n\013MsgAgainBet\022<\n\016again_bet_info\030"
  "\001 \003(\0132$.RedAndBlack_India.MsgSingleAgain"
  "Bet\"[\n\017MsgAgainBetResp\022\020\n\010chair_id\030\001 \001(\005"
  "\0226\n\016again_bet_info\030\002 \001(\0132\036.RedAndBlack_I"
  "ndia.MsgAgainBet\"+\n\tMsgWinMsg\022\020\n\010chair_i"
  "d\030\001 \001(\005\022\014\n\004gold\030\002 \001(\003\"k\n\tMsgResult\022-\n\007wi"
  "n_msg\030\001 \003(\0132\034.RedAndBlack_India.MsgWinMs"
  "g\022\014\n\004card\030\002 \003(\005\022\021\n\tcard_type\030\003 \003(\005\022\016\n\006re"
  "sult\030\004 \001(\005\":\n\013MsgTotalBet\022\020\n\010chair_id\030\001 "
  "\001(\005\022\013\n\003bet\030\002 \003(\005\022\014\n\004gold\030\003 \003(\003\"B\n\014MsgBet"
  "Record\0222\n\nbet_record\030\001 \003(\0132\036.RedAndBlack"
  "_India.MsgTotalBet*\363\001\n\rEMsgIDSubGame\022\025\n\021"
  "MsgIDSubGame_Null\020\000\022\024\n\020MsgIDSubGame_Bet\020"
  "\001\022\030\n\024MsgIDSubGame_BetResp\020\002\022\031\n\025MsgIDSubG"
  "ame_AgainBet\020\003\022\035\n\031MsgIDSubGame_AgainBetR"
  "esp\020\004\022\037\n\033MsgIDSubGame_GameResultResp\020\005\022\036"
  "\n\032MsgIDSubGame_BetRecordResp\020\006\022 \n\034MsgIDS"
  "ubGame_NotifyStateResp\020\007b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_RedAndBlack_5fIndia_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_RedAndBlack_5fIndia_2eproto_sccs[11] = {
  &scc_info_MsgAgainBet_RedAndBlack_5fIndia_2eproto.base,
  &scc_info_MsgAgainBetResp_RedAndBlack_5fIndia_2eproto.base,
  &scc_info_MsgBet_RedAndBlack_5fIndia_2eproto.base,
  &scc_info_MsgBetRecord_RedAndBlack_5fIndia_2eproto.base,
  &scc_info_MsgBetResp_RedAndBlack_5fIndia_2eproto.base,
  &scc_info_MsgRecord_RedAndBlack_5fIndia_2eproto.base,
  &scc_info_MsgResult_RedAndBlack_5fIndia_2eproto.base,
  &scc_info_MsgSceneInfo_RedAndBlack_5fIndia_2eproto.base,
  &scc_info_MsgSingleAgainBet_RedAndBlack_5fIndia_2eproto.base,
  &scc_info_MsgTotalBet_RedAndBlack_5fIndia_2eproto.base,
  &scc_info_MsgWinMsg_RedAndBlack_5fIndia_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_RedAndBlack_5fIndia_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RedAndBlack_5fIndia_2eproto = {
  false, false, descriptor_table_protodef_RedAndBlack_5fIndia_2eproto, "RedAndBlack_India.proto", 1152,
  &descriptor_table_RedAndBlack_5fIndia_2eproto_once, descriptor_table_RedAndBlack_5fIndia_2eproto_sccs, descriptor_table_RedAndBlack_5fIndia_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_RedAndBlack_5fIndia_2eproto::offsets,
  file_level_metadata_RedAndBlack_5fIndia_2eproto, 11, file_level_enum_descriptors_RedAndBlack_5fIndia_2eproto, file_level_service_descriptors_RedAndBlack_5fIndia_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_RedAndBlack_5fIndia_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_RedAndBlack_5fIndia_2eproto)), true);
namespace RedAndBlack_India {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDSubGame_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_RedAndBlack_5fIndia_2eproto);
  return file_level_enum_descriptors_RedAndBlack_5fIndia_2eproto[0];
}
bool EMsgIDSubGame_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MsgRecord::_Internal {
 public:
};

MsgRecord::MsgRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RedAndBlack_India.MsgRecord)
}
MsgRecord::MsgRecord(const MsgRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&card_type_) -
    reinterpret_cast<char*>(&result_)) + sizeof(card_type_));
  // @@protoc_insertion_point(copy_constructor:RedAndBlack_India.MsgRecord)
}

void MsgRecord::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&card_type_) -
      reinterpret_cast<char*>(&result_)) + sizeof(card_type_));
}

MsgRecord::~MsgRecord() {
  // @@protoc_insertion_point(destructor:RedAndBlack_India.MsgRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgRecord::ArenaDtor(void* object) {
  MsgRecord* _this = reinterpret_cast< MsgRecord* >(object);
  (void)_this;
}
void MsgRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgRecord& MsgRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgRecord_RedAndBlack_5fIndia_2eproto.base);
  return *internal_default_instance();
}


void MsgRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:RedAndBlack_India.MsgRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_type_) -
      reinterpret_cast<char*>(&result_)) + sizeof(card_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 card_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          card_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RedAndBlack_India.MsgRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // int32 card_type = 2;
  if (this->card_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_card_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RedAndBlack_India.MsgRecord)
  return target;
}

size_t MsgRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RedAndBlack_India.MsgRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  // int32 card_type = 2;
  if (this->card_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_card_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RedAndBlack_India.MsgRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RedAndBlack_India.MsgRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RedAndBlack_India.MsgRecord)
    MergeFrom(*source);
  }
}

void MsgRecord::MergeFrom(const MsgRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RedAndBlack_India.MsgRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.card_type() != 0) {
    _internal_set_card_type(from._internal_card_type());
  }
}

void MsgRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RedAndBlack_India.MsgRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRecord::CopyFrom(const MsgRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RedAndBlack_India.MsgRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRecord::IsInitialized() const {
  return true;
}

void MsgRecord::InternalSwap(MsgRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgRecord, card_type_)
      + sizeof(MsgRecord::card_type_)
      - PROTOBUF_FIELD_OFFSET(MsgRecord, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgSceneInfo::_Internal {
 public:
};

MsgSceneInfo::MsgSceneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bet_(arena),
  record_(arena),
  bet_limit_(arena),
  state_time_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RedAndBlack_India.MsgSceneInfo)
}
MsgSceneInfo::MsgSceneInfo(const MsgSceneInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bet_(from.bet_),
      record_(from.record_),
      bet_limit_(from.bet_limit_),
      state_time_(from.state_time_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_limit_, &from.player_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&player_limit_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:RedAndBlack_India.MsgSceneInfo)
}

void MsgSceneInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgSceneInfo_RedAndBlack_5fIndia_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&player_limit_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&player_limit_)) + sizeof(state_));
}

MsgSceneInfo::~MsgSceneInfo() {
  // @@protoc_insertion_point(destructor:RedAndBlack_India.MsgSceneInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgSceneInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgSceneInfo::ArenaDtor(void* object) {
  MsgSceneInfo* _this = reinterpret_cast< MsgSceneInfo* >(object);
  (void)_this;
}
void MsgSceneInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgSceneInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgSceneInfo& MsgSceneInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgSceneInfo_RedAndBlack_5fIndia_2eproto.base);
  return *internal_default_instance();
}


void MsgSceneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:RedAndBlack_India.MsgSceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bet_.Clear();
  record_.Clear();
  bet_limit_.Clear();
  state_time_.Clear();
  ::memset(&player_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&player_limit_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgSceneInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 bet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bet(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_bet(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .RedAndBlack_India.MsgRecord record = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 bet_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bet_limit(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_bet_limit(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 player_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          player_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 state_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_state_time(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_state_time(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 remain_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          remain_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 state = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgSceneInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RedAndBlack_India.MsgSceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 bet = 1;
  {
    int byte_size = _bet_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_bet(), byte_size, target);
    }
  }

  // repeated .RedAndBlack_India.MsgRecord record = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_record_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_record(i), target, stream);
  }

  // repeated int32 bet_limit = 3;
  {
    int byte_size = _bet_limit_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_bet_limit(), byte_size, target);
    }
  }

  // int32 player_limit = 4;
  if (this->player_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_player_limit(), target);
  }

  // repeated int32 state_time = 5;
  {
    int byte_size = _state_time_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_state_time(), byte_size, target);
    }
  }

  // int32 remain_time = 6;
  if (this->remain_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_remain_time(), target);
  }

  // int32 state = 7;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RedAndBlack_India.MsgSceneInfo)
  return target;
}

size_t MsgSceneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RedAndBlack_India.MsgSceneInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 bet = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bet_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bet_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .RedAndBlack_India.MsgRecord record = 2;
  total_size += 1UL * this->_internal_record_size();
  for (const auto& msg : this->record_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 bet_limit = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bet_limit_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bet_limit_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 state_time = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->state_time_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _state_time_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 player_limit = 4;
  if (this->player_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_limit());
  }

  // int32 remain_time = 6;
  if (this->remain_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_remain_time());
  }

  // int32 state = 7;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgSceneInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RedAndBlack_India.MsgSceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgSceneInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgSceneInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RedAndBlack_India.MsgSceneInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RedAndBlack_India.MsgSceneInfo)
    MergeFrom(*source);
  }
}

void MsgSceneInfo::MergeFrom(const MsgSceneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RedAndBlack_India.MsgSceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bet_.MergeFrom(from.bet_);
  record_.MergeFrom(from.record_);
  bet_limit_.MergeFrom(from.bet_limit_);
  state_time_.MergeFrom(from.state_time_);
  if (from.player_limit() != 0) {
    _internal_set_player_limit(from._internal_player_limit());
  }
  if (from.remain_time() != 0) {
    _internal_set_remain_time(from._internal_remain_time());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void MsgSceneInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RedAndBlack_India.MsgSceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSceneInfo::CopyFrom(const MsgSceneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RedAndBlack_India.MsgSceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSceneInfo::IsInitialized() const {
  return true;
}

void MsgSceneInfo::InternalSwap(MsgSceneInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bet_.InternalSwap(&other->bet_);
  record_.InternalSwap(&other->record_);
  bet_limit_.InternalSwap(&other->bet_limit_);
  state_time_.InternalSwap(&other->state_time_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgSceneInfo, state_)
      + sizeof(MsgSceneInfo::state_)
      - PROTOBUF_FIELD_OFFSET(MsgSceneInfo, player_limit_)>(
          reinterpret_cast<char*>(&player_limit_),
          reinterpret_cast<char*>(&other->player_limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgSceneInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgBet::_Internal {
 public:
};

MsgBet::MsgBet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RedAndBlack_India.MsgBet)
}
MsgBet::MsgBet(const MsgBet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&area_) -
    reinterpret_cast<char*>(&index_)) + sizeof(area_));
  // @@protoc_insertion_point(copy_constructor:RedAndBlack_India.MsgBet)
}

void MsgBet::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&area_) -
      reinterpret_cast<char*>(&index_)) + sizeof(area_));
}

MsgBet::~MsgBet() {
  // @@protoc_insertion_point(destructor:RedAndBlack_India.MsgBet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgBet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgBet::ArenaDtor(void* object) {
  MsgBet* _this = reinterpret_cast< MsgBet* >(object);
  (void)_this;
}
void MsgBet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgBet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgBet& MsgBet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgBet_RedAndBlack_5fIndia_2eproto.base);
  return *internal_default_instance();
}


void MsgBet::Clear() {
// @@protoc_insertion_point(message_clear_start:RedAndBlack_India.MsgBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&area_) -
      reinterpret_cast<char*>(&index_)) + sizeof(area_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgBet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 area = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgBet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RedAndBlack_India.MsgBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 area = 2;
  if (this->area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_area(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RedAndBlack_India.MsgBet)
  return target;
}

size_t MsgBet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RedAndBlack_India.MsgBet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // int32 area = 2;
  if (this->area() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_area());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgBet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RedAndBlack_India.MsgBet)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgBet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgBet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RedAndBlack_India.MsgBet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RedAndBlack_India.MsgBet)
    MergeFrom(*source);
  }
}

void MsgBet::MergeFrom(const MsgBet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RedAndBlack_India.MsgBet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.area() != 0) {
    _internal_set_area(from._internal_area());
  }
}

void MsgBet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RedAndBlack_India.MsgBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBet::CopyFrom(const MsgBet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RedAndBlack_India.MsgBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBet::IsInitialized() const {
  return true;
}

void MsgBet::InternalSwap(MsgBet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgBet, area_)
      + sizeof(MsgBet::area_)
      - PROTOBUF_FIELD_OFFSET(MsgBet, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgBet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgBetResp::_Internal {
 public:
  static const ::RedAndBlack_India::MsgBet& bet_info(const MsgBetResp* msg);
};

const ::RedAndBlack_India::MsgBet&
MsgBetResp::_Internal::bet_info(const MsgBetResp* msg) {
  return *msg->bet_info_;
}
MsgBetResp::MsgBetResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RedAndBlack_India.MsgBetResp)
}
MsgBetResp::MsgBetResp(const MsgBetResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bet_info()) {
    bet_info_ = new ::RedAndBlack_India::MsgBet(*from.bet_info_);
  } else {
    bet_info_ = nullptr;
  }
  chair_id_ = from.chair_id_;
  // @@protoc_insertion_point(copy_constructor:RedAndBlack_India.MsgBetResp)
}

void MsgBetResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgBetResp_RedAndBlack_5fIndia_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bet_info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&bet_info_)) + sizeof(chair_id_));
}

MsgBetResp::~MsgBetResp() {
  // @@protoc_insertion_point(destructor:RedAndBlack_India.MsgBetResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgBetResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bet_info_;
}

void MsgBetResp::ArenaDtor(void* object) {
  MsgBetResp* _this = reinterpret_cast< MsgBetResp* >(object);
  (void)_this;
}
void MsgBetResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgBetResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgBetResp& MsgBetResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgBetResp_RedAndBlack_5fIndia_2eproto.base);
  return *internal_default_instance();
}


void MsgBetResp::Clear() {
// @@protoc_insertion_point(message_clear_start:RedAndBlack_India.MsgBetResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && bet_info_ != nullptr) {
    delete bet_info_;
  }
  bet_info_ = nullptr;
  chair_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgBetResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RedAndBlack_India.MsgBet bet_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bet_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgBetResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RedAndBlack_India.MsgBetResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // .RedAndBlack_India.MsgBet bet_info = 2;
  if (this->has_bet_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bet_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RedAndBlack_India.MsgBetResp)
  return target;
}

size_t MsgBetResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RedAndBlack_India.MsgBetResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .RedAndBlack_India.MsgBet bet_info = 2;
  if (this->has_bet_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bet_info_);
  }

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgBetResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RedAndBlack_India.MsgBetResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgBetResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgBetResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RedAndBlack_India.MsgBetResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RedAndBlack_India.MsgBetResp)
    MergeFrom(*source);
  }
}

void MsgBetResp::MergeFrom(const MsgBetResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RedAndBlack_India.MsgBetResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bet_info()) {
    _internal_mutable_bet_info()->::RedAndBlack_India::MsgBet::MergeFrom(from._internal_bet_info());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
}

void MsgBetResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RedAndBlack_India.MsgBetResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBetResp::CopyFrom(const MsgBetResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RedAndBlack_India.MsgBetResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBetResp::IsInitialized() const {
  return true;
}

void MsgBetResp::InternalSwap(MsgBetResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgBetResp, chair_id_)
      + sizeof(MsgBetResp::chair_id_)
      - PROTOBUF_FIELD_OFFSET(MsgBetResp, bet_info_)>(
          reinterpret_cast<char*>(&bet_info_),
          reinterpret_cast<char*>(&other->bet_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgBetResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgSingleAgainBet::_Internal {
 public:
};

MsgSingleAgainBet::MsgSingleAgainBet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RedAndBlack_India.MsgSingleAgainBet)
}
MsgSingleAgainBet::MsgSingleAgainBet(const MsgSingleAgainBet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&index_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:RedAndBlack_India.MsgSingleAgainBet)
}

void MsgSingleAgainBet::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&index_)) + sizeof(count_));
}

MsgSingleAgainBet::~MsgSingleAgainBet() {
  // @@protoc_insertion_point(destructor:RedAndBlack_India.MsgSingleAgainBet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgSingleAgainBet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgSingleAgainBet::ArenaDtor(void* object) {
  MsgSingleAgainBet* _this = reinterpret_cast< MsgSingleAgainBet* >(object);
  (void)_this;
}
void MsgSingleAgainBet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgSingleAgainBet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgSingleAgainBet& MsgSingleAgainBet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgSingleAgainBet_RedAndBlack_5fIndia_2eproto.base);
  return *internal_default_instance();
}


void MsgSingleAgainBet::Clear() {
// @@protoc_insertion_point(message_clear_start:RedAndBlack_India.MsgSingleAgainBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&index_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgSingleAgainBet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 area = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgSingleAgainBet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RedAndBlack_India.MsgSingleAgainBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 area = 2;
  if (this->area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_area(), target);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RedAndBlack_India.MsgSingleAgainBet)
  return target;
}

size_t MsgSingleAgainBet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RedAndBlack_India.MsgSingleAgainBet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // int32 area = 2;
  if (this->area() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_area());
  }

  // int32 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgSingleAgainBet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RedAndBlack_India.MsgSingleAgainBet)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgSingleAgainBet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgSingleAgainBet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RedAndBlack_India.MsgSingleAgainBet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RedAndBlack_India.MsgSingleAgainBet)
    MergeFrom(*source);
  }
}

void MsgSingleAgainBet::MergeFrom(const MsgSingleAgainBet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RedAndBlack_India.MsgSingleAgainBet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.area() != 0) {
    _internal_set_area(from._internal_area());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void MsgSingleAgainBet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RedAndBlack_India.MsgSingleAgainBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSingleAgainBet::CopyFrom(const MsgSingleAgainBet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RedAndBlack_India.MsgSingleAgainBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSingleAgainBet::IsInitialized() const {
  return true;
}

void MsgSingleAgainBet::InternalSwap(MsgSingleAgainBet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgSingleAgainBet, count_)
      + sizeof(MsgSingleAgainBet::count_)
      - PROTOBUF_FIELD_OFFSET(MsgSingleAgainBet, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgSingleAgainBet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgAgainBet::_Internal {
 public:
};

MsgAgainBet::MsgAgainBet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  again_bet_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RedAndBlack_India.MsgAgainBet)
}
MsgAgainBet::MsgAgainBet(const MsgAgainBet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      again_bet_info_(from.again_bet_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:RedAndBlack_India.MsgAgainBet)
}

void MsgAgainBet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgAgainBet_RedAndBlack_5fIndia_2eproto.base);
}

MsgAgainBet::~MsgAgainBet() {
  // @@protoc_insertion_point(destructor:RedAndBlack_India.MsgAgainBet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgAgainBet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgAgainBet::ArenaDtor(void* object) {
  MsgAgainBet* _this = reinterpret_cast< MsgAgainBet* >(object);
  (void)_this;
}
void MsgAgainBet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgAgainBet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgAgainBet& MsgAgainBet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgAgainBet_RedAndBlack_5fIndia_2eproto.base);
  return *internal_default_instance();
}


void MsgAgainBet::Clear() {
// @@protoc_insertion_point(message_clear_start:RedAndBlack_India.MsgAgainBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  again_bet_info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgAgainBet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .RedAndBlack_India.MsgSingleAgainBet again_bet_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_again_bet_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgAgainBet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RedAndBlack_India.MsgAgainBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .RedAndBlack_India.MsgSingleAgainBet again_bet_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_again_bet_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_again_bet_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RedAndBlack_India.MsgAgainBet)
  return target;
}

size_t MsgAgainBet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RedAndBlack_India.MsgAgainBet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RedAndBlack_India.MsgSingleAgainBet again_bet_info = 1;
  total_size += 1UL * this->_internal_again_bet_info_size();
  for (const auto& msg : this->again_bet_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgAgainBet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RedAndBlack_India.MsgAgainBet)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgAgainBet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgAgainBet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RedAndBlack_India.MsgAgainBet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RedAndBlack_India.MsgAgainBet)
    MergeFrom(*source);
  }
}

void MsgAgainBet::MergeFrom(const MsgAgainBet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RedAndBlack_India.MsgAgainBet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  again_bet_info_.MergeFrom(from.again_bet_info_);
}

void MsgAgainBet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RedAndBlack_India.MsgAgainBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAgainBet::CopyFrom(const MsgAgainBet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RedAndBlack_India.MsgAgainBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAgainBet::IsInitialized() const {
  return true;
}

void MsgAgainBet::InternalSwap(MsgAgainBet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  again_bet_info_.InternalSwap(&other->again_bet_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgAgainBet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgAgainBetResp::_Internal {
 public:
  static const ::RedAndBlack_India::MsgAgainBet& again_bet_info(const MsgAgainBetResp* msg);
};

const ::RedAndBlack_India::MsgAgainBet&
MsgAgainBetResp::_Internal::again_bet_info(const MsgAgainBetResp* msg) {
  return *msg->again_bet_info_;
}
MsgAgainBetResp::MsgAgainBetResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RedAndBlack_India.MsgAgainBetResp)
}
MsgAgainBetResp::MsgAgainBetResp(const MsgAgainBetResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_again_bet_info()) {
    again_bet_info_ = new ::RedAndBlack_India::MsgAgainBet(*from.again_bet_info_);
  } else {
    again_bet_info_ = nullptr;
  }
  chair_id_ = from.chair_id_;
  // @@protoc_insertion_point(copy_constructor:RedAndBlack_India.MsgAgainBetResp)
}

void MsgAgainBetResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgAgainBetResp_RedAndBlack_5fIndia_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&again_bet_info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&again_bet_info_)) + sizeof(chair_id_));
}

MsgAgainBetResp::~MsgAgainBetResp() {
  // @@protoc_insertion_point(destructor:RedAndBlack_India.MsgAgainBetResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgAgainBetResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete again_bet_info_;
}

void MsgAgainBetResp::ArenaDtor(void* object) {
  MsgAgainBetResp* _this = reinterpret_cast< MsgAgainBetResp* >(object);
  (void)_this;
}
void MsgAgainBetResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgAgainBetResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgAgainBetResp& MsgAgainBetResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgAgainBetResp_RedAndBlack_5fIndia_2eproto.base);
  return *internal_default_instance();
}


void MsgAgainBetResp::Clear() {
// @@protoc_insertion_point(message_clear_start:RedAndBlack_India.MsgAgainBetResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && again_bet_info_ != nullptr) {
    delete again_bet_info_;
  }
  again_bet_info_ = nullptr;
  chair_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgAgainBetResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RedAndBlack_India.MsgAgainBet again_bet_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_again_bet_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgAgainBetResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RedAndBlack_India.MsgAgainBetResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // .RedAndBlack_India.MsgAgainBet again_bet_info = 2;
  if (this->has_again_bet_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::again_bet_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RedAndBlack_India.MsgAgainBetResp)
  return target;
}

size_t MsgAgainBetResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RedAndBlack_India.MsgAgainBetResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .RedAndBlack_India.MsgAgainBet again_bet_info = 2;
  if (this->has_again_bet_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *again_bet_info_);
  }

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgAgainBetResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RedAndBlack_India.MsgAgainBetResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgAgainBetResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgAgainBetResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RedAndBlack_India.MsgAgainBetResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RedAndBlack_India.MsgAgainBetResp)
    MergeFrom(*source);
  }
}

void MsgAgainBetResp::MergeFrom(const MsgAgainBetResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RedAndBlack_India.MsgAgainBetResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_again_bet_info()) {
    _internal_mutable_again_bet_info()->::RedAndBlack_India::MsgAgainBet::MergeFrom(from._internal_again_bet_info());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
}

void MsgAgainBetResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RedAndBlack_India.MsgAgainBetResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAgainBetResp::CopyFrom(const MsgAgainBetResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RedAndBlack_India.MsgAgainBetResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAgainBetResp::IsInitialized() const {
  return true;
}

void MsgAgainBetResp::InternalSwap(MsgAgainBetResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgAgainBetResp, chair_id_)
      + sizeof(MsgAgainBetResp::chair_id_)
      - PROTOBUF_FIELD_OFFSET(MsgAgainBetResp, again_bet_info_)>(
          reinterpret_cast<char*>(&again_bet_info_),
          reinterpret_cast<char*>(&other->again_bet_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgAgainBetResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgWinMsg::_Internal {
 public:
};

MsgWinMsg::MsgWinMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RedAndBlack_India.MsgWinMsg)
}
MsgWinMsg::MsgWinMsg(const MsgWinMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gold_, &from.gold_,
    static_cast<size_t>(reinterpret_cast<char*>(&chair_id_) -
    reinterpret_cast<char*>(&gold_)) + sizeof(chair_id_));
  // @@protoc_insertion_point(copy_constructor:RedAndBlack_India.MsgWinMsg)
}

void MsgWinMsg::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gold_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&gold_)) + sizeof(chair_id_));
}

MsgWinMsg::~MsgWinMsg() {
  // @@protoc_insertion_point(destructor:RedAndBlack_India.MsgWinMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgWinMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgWinMsg::ArenaDtor(void* object) {
  MsgWinMsg* _this = reinterpret_cast< MsgWinMsg* >(object);
  (void)_this;
}
void MsgWinMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgWinMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgWinMsg& MsgWinMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgWinMsg_RedAndBlack_5fIndia_2eproto.base);
  return *internal_default_instance();
}


void MsgWinMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:RedAndBlack_India.MsgWinMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&gold_)) + sizeof(chair_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgWinMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgWinMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RedAndBlack_India.MsgWinMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int64 gold = 2;
  if (this->gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RedAndBlack_India.MsgWinMsg)
  return target;
}

size_t MsgWinMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RedAndBlack_India.MsgWinMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 gold = 2;
  if (this->gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_gold());
  }

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgWinMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RedAndBlack_India.MsgWinMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgWinMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgWinMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RedAndBlack_India.MsgWinMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RedAndBlack_India.MsgWinMsg)
    MergeFrom(*source);
  }
}

void MsgWinMsg::MergeFrom(const MsgWinMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RedAndBlack_India.MsgWinMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
}

void MsgWinMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RedAndBlack_India.MsgWinMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgWinMsg::CopyFrom(const MsgWinMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RedAndBlack_India.MsgWinMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgWinMsg::IsInitialized() const {
  return true;
}

void MsgWinMsg::InternalSwap(MsgWinMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgWinMsg, chair_id_)
      + sizeof(MsgWinMsg::chair_id_)
      - PROTOBUF_FIELD_OFFSET(MsgWinMsg, gold_)>(
          reinterpret_cast<char*>(&gold_),
          reinterpret_cast<char*>(&other->gold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgWinMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgResult::_Internal {
 public:
};

MsgResult::MsgResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  win_msg_(arena),
  card_(arena),
  card_type_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RedAndBlack_India.MsgResult)
}
MsgResult::MsgResult(const MsgResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      win_msg_(from.win_msg_),
      card_(from.card_),
      card_type_(from.card_type_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:RedAndBlack_India.MsgResult)
}

void MsgResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgResult_RedAndBlack_5fIndia_2eproto.base);
  result_ = 0;
}

MsgResult::~MsgResult() {
  // @@protoc_insertion_point(destructor:RedAndBlack_India.MsgResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgResult::ArenaDtor(void* object) {
  MsgResult* _this = reinterpret_cast< MsgResult* >(object);
  (void)_this;
}
void MsgResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgResult& MsgResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgResult_RedAndBlack_5fIndia_2eproto.base);
  return *internal_default_instance();
}


void MsgResult::Clear() {
// @@protoc_insertion_point(message_clear_start:RedAndBlack_India.MsgResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  win_msg_.Clear();
  card_.Clear();
  card_type_.Clear();
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .RedAndBlack_India.MsgWinMsg win_msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_win_msg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 card = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_card(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_card(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 card_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_card_type(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_card_type(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RedAndBlack_India.MsgResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .RedAndBlack_India.MsgWinMsg win_msg = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_win_msg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_win_msg(i), target, stream);
  }

  // repeated int32 card = 2;
  {
    int byte_size = _card_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_card(), byte_size, target);
    }
  }

  // repeated int32 card_type = 3;
  {
    int byte_size = _card_type_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_card_type(), byte_size, target);
    }
  }

  // int32 result = 4;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RedAndBlack_India.MsgResult)
  return target;
}

size_t MsgResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RedAndBlack_India.MsgResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RedAndBlack_India.MsgWinMsg win_msg = 1;
  total_size += 1UL * this->_internal_win_msg_size();
  for (const auto& msg : this->win_msg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 card = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->card_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _card_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 card_type = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->card_type_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _card_type_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 result = 4;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RedAndBlack_India.MsgResult)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RedAndBlack_India.MsgResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RedAndBlack_India.MsgResult)
    MergeFrom(*source);
  }
}

void MsgResult::MergeFrom(const MsgResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RedAndBlack_India.MsgResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  win_msg_.MergeFrom(from.win_msg_);
  card_.MergeFrom(from.card_);
  card_type_.MergeFrom(from.card_type_);
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void MsgResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RedAndBlack_India.MsgResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgResult::CopyFrom(const MsgResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RedAndBlack_India.MsgResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgResult::IsInitialized() const {
  return true;
}

void MsgResult::InternalSwap(MsgResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  win_msg_.InternalSwap(&other->win_msg_);
  card_.InternalSwap(&other->card_);
  card_type_.InternalSwap(&other->card_type_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgTotalBet::_Internal {
 public:
};

MsgTotalBet::MsgTotalBet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bet_(arena),
  gold_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RedAndBlack_India.MsgTotalBet)
}
MsgTotalBet::MsgTotalBet(const MsgTotalBet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bet_(from.bet_),
      gold_(from.gold_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chair_id_ = from.chair_id_;
  // @@protoc_insertion_point(copy_constructor:RedAndBlack_India.MsgTotalBet)
}

void MsgTotalBet::SharedCtor() {
  chair_id_ = 0;
}

MsgTotalBet::~MsgTotalBet() {
  // @@protoc_insertion_point(destructor:RedAndBlack_India.MsgTotalBet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgTotalBet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgTotalBet::ArenaDtor(void* object) {
  MsgTotalBet* _this = reinterpret_cast< MsgTotalBet* >(object);
  (void)_this;
}
void MsgTotalBet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgTotalBet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgTotalBet& MsgTotalBet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgTotalBet_RedAndBlack_5fIndia_2eproto.base);
  return *internal_default_instance();
}


void MsgTotalBet::Clear() {
// @@protoc_insertion_point(message_clear_start:RedAndBlack_India.MsgTotalBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bet_.Clear();
  gold_.Clear();
  chair_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgTotalBet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 bet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bet(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_bet(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 gold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_gold(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_gold(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgTotalBet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RedAndBlack_India.MsgTotalBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // repeated int32 bet = 2;
  {
    int byte_size = _bet_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_bet(), byte_size, target);
    }
  }

  // repeated int64 gold = 3;
  {
    int byte_size = _gold_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_gold(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RedAndBlack_India.MsgTotalBet)
  return target;
}

size_t MsgTotalBet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RedAndBlack_India.MsgTotalBet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 bet = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bet_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bet_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 gold = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->gold_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _gold_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgTotalBet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RedAndBlack_India.MsgTotalBet)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgTotalBet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgTotalBet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RedAndBlack_India.MsgTotalBet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RedAndBlack_India.MsgTotalBet)
    MergeFrom(*source);
  }
}

void MsgTotalBet::MergeFrom(const MsgTotalBet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RedAndBlack_India.MsgTotalBet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bet_.MergeFrom(from.bet_);
  gold_.MergeFrom(from.gold_);
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
}

void MsgTotalBet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RedAndBlack_India.MsgTotalBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTotalBet::CopyFrom(const MsgTotalBet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RedAndBlack_India.MsgTotalBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTotalBet::IsInitialized() const {
  return true;
}

void MsgTotalBet::InternalSwap(MsgTotalBet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bet_.InternalSwap(&other->bet_);
  gold_.InternalSwap(&other->gold_);
  swap(chair_id_, other->chair_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgTotalBet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgBetRecord::_Internal {
 public:
};

MsgBetRecord::MsgBetRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bet_record_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RedAndBlack_India.MsgBetRecord)
}
MsgBetRecord::MsgBetRecord(const MsgBetRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bet_record_(from.bet_record_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:RedAndBlack_India.MsgBetRecord)
}

void MsgBetRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgBetRecord_RedAndBlack_5fIndia_2eproto.base);
}

MsgBetRecord::~MsgBetRecord() {
  // @@protoc_insertion_point(destructor:RedAndBlack_India.MsgBetRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgBetRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgBetRecord::ArenaDtor(void* object) {
  MsgBetRecord* _this = reinterpret_cast< MsgBetRecord* >(object);
  (void)_this;
}
void MsgBetRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgBetRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgBetRecord& MsgBetRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgBetRecord_RedAndBlack_5fIndia_2eproto.base);
  return *internal_default_instance();
}


void MsgBetRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:RedAndBlack_India.MsgBetRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bet_record_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgBetRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .RedAndBlack_India.MsgTotalBet bet_record = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bet_record(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgBetRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RedAndBlack_India.MsgBetRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .RedAndBlack_India.MsgTotalBet bet_record = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bet_record_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_bet_record(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RedAndBlack_India.MsgBetRecord)
  return target;
}

size_t MsgBetRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RedAndBlack_India.MsgBetRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RedAndBlack_India.MsgTotalBet bet_record = 1;
  total_size += 1UL * this->_internal_bet_record_size();
  for (const auto& msg : this->bet_record_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgBetRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RedAndBlack_India.MsgBetRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgBetRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgBetRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RedAndBlack_India.MsgBetRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RedAndBlack_India.MsgBetRecord)
    MergeFrom(*source);
  }
}

void MsgBetRecord::MergeFrom(const MsgBetRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RedAndBlack_India.MsgBetRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bet_record_.MergeFrom(from.bet_record_);
}

void MsgBetRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RedAndBlack_India.MsgBetRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBetRecord::CopyFrom(const MsgBetRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RedAndBlack_India.MsgBetRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBetRecord::IsInitialized() const {
  return true;
}

void MsgBetRecord::InternalSwap(MsgBetRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bet_record_.InternalSwap(&other->bet_record_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgBetRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace RedAndBlack_India
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RedAndBlack_India::MsgRecord* Arena::CreateMaybeMessage< ::RedAndBlack_India::MsgRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RedAndBlack_India::MsgRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::RedAndBlack_India::MsgSceneInfo* Arena::CreateMaybeMessage< ::RedAndBlack_India::MsgSceneInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RedAndBlack_India::MsgSceneInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::RedAndBlack_India::MsgBet* Arena::CreateMaybeMessage< ::RedAndBlack_India::MsgBet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RedAndBlack_India::MsgBet >(arena);
}
template<> PROTOBUF_NOINLINE ::RedAndBlack_India::MsgBetResp* Arena::CreateMaybeMessage< ::RedAndBlack_India::MsgBetResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RedAndBlack_India::MsgBetResp >(arena);
}
template<> PROTOBUF_NOINLINE ::RedAndBlack_India::MsgSingleAgainBet* Arena::CreateMaybeMessage< ::RedAndBlack_India::MsgSingleAgainBet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RedAndBlack_India::MsgSingleAgainBet >(arena);
}
template<> PROTOBUF_NOINLINE ::RedAndBlack_India::MsgAgainBet* Arena::CreateMaybeMessage< ::RedAndBlack_India::MsgAgainBet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RedAndBlack_India::MsgAgainBet >(arena);
}
template<> PROTOBUF_NOINLINE ::RedAndBlack_India::MsgAgainBetResp* Arena::CreateMaybeMessage< ::RedAndBlack_India::MsgAgainBetResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RedAndBlack_India::MsgAgainBetResp >(arena);
}
template<> PROTOBUF_NOINLINE ::RedAndBlack_India::MsgWinMsg* Arena::CreateMaybeMessage< ::RedAndBlack_India::MsgWinMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RedAndBlack_India::MsgWinMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::RedAndBlack_India::MsgResult* Arena::CreateMaybeMessage< ::RedAndBlack_India::MsgResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RedAndBlack_India::MsgResult >(arena);
}
template<> PROTOBUF_NOINLINE ::RedAndBlack_India::MsgTotalBet* Arena::CreateMaybeMessage< ::RedAndBlack_India::MsgTotalBet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RedAndBlack_India::MsgTotalBet >(arena);
}
template<> PROTOBUF_NOINLINE ::RedAndBlack_India::MsgBetRecord* Arena::CreateMaybeMessage< ::RedAndBlack_India::MsgBetRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RedAndBlack_India::MsgBetRecord >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
