// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LudoQuick.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_LudoQuick_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_LudoQuick_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_LudoQuick_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_LudoQuick_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LudoQuick_2eproto;
namespace LudoQuick {
class ChessGrid;
class ChessGridDefaultTypeInternal;
extern ChessGridDefaultTypeInternal _ChessGrid_default_instance_;
class GameResult;
class GameResultDefaultTypeInternal;
extern GameResultDefaultTypeInternal _GameResult_default_instance_;
class MsgDiceInfoResp;
class MsgDiceInfoRespDefaultTypeInternal;
extern MsgDiceInfoRespDefaultTypeInternal _MsgDiceInfoResp_default_instance_;
class MsgOperateRoute;
class MsgOperateRouteDefaultTypeInternal;
extern MsgOperateRouteDefaultTypeInternal _MsgOperateRoute_default_instance_;
class MsgResultResp;
class MsgResultRespDefaultTypeInternal;
extern MsgResultRespDefaultTypeInternal _MsgResultResp_default_instance_;
class MsgSceneInfoResp;
class MsgSceneInfoRespDefaultTypeInternal;
extern MsgSceneInfoRespDefaultTypeInternal _MsgSceneInfoResp_default_instance_;
class MsgStartDiceResp;
class MsgStartDiceRespDefaultTypeInternal;
extern MsgStartDiceRespDefaultTypeInternal _MsgStartDiceResp_default_instance_;
class MsgThrowDiceResp;
class MsgThrowDiceRespDefaultTypeInternal;
extern MsgThrowDiceRespDefaultTypeInternal _MsgThrowDiceResp_default_instance_;
class RouteInfo;
class RouteInfoDefaultTypeInternal;
extern RouteInfoDefaultTypeInternal _RouteInfo_default_instance_;
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
}  // namespace LudoQuick
PROTOBUF_NAMESPACE_OPEN
template<> ::LudoQuick::ChessGrid* Arena::CreateMaybeMessage<::LudoQuick::ChessGrid>(Arena*);
template<> ::LudoQuick::GameResult* Arena::CreateMaybeMessage<::LudoQuick::GameResult>(Arena*);
template<> ::LudoQuick::MsgDiceInfoResp* Arena::CreateMaybeMessage<::LudoQuick::MsgDiceInfoResp>(Arena*);
template<> ::LudoQuick::MsgOperateRoute* Arena::CreateMaybeMessage<::LudoQuick::MsgOperateRoute>(Arena*);
template<> ::LudoQuick::MsgResultResp* Arena::CreateMaybeMessage<::LudoQuick::MsgResultResp>(Arena*);
template<> ::LudoQuick::MsgSceneInfoResp* Arena::CreateMaybeMessage<::LudoQuick::MsgSceneInfoResp>(Arena*);
template<> ::LudoQuick::MsgStartDiceResp* Arena::CreateMaybeMessage<::LudoQuick::MsgStartDiceResp>(Arena*);
template<> ::LudoQuick::MsgThrowDiceResp* Arena::CreateMaybeMessage<::LudoQuick::MsgThrowDiceResp>(Arena*);
template<> ::LudoQuick::RouteInfo* Arena::CreateMaybeMessage<::LudoQuick::RouteInfo>(Arena*);
template<> ::LudoQuick::UserInfo* Arena::CreateMaybeMessage<::LudoQuick::UserInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LudoQuick {

enum EMsgIDLudoQuick : int {
  MsgID_FirstPublish = 0,
  SUB_SC_FirstPublish = 1,
  SUB_SC_StartDice = 2,
  SUB_CS_DiceInfo = 3,
  SUB_SC_ThrowDice = 4,
  SUB_CS_OperateRoute = 5,
  SUB_SC_DiceInfo = 6,
  SUB_SC_GameResult = 7,
  SUB_CS_Optional = 8,
  EMsgIDLudoQuick_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EMsgIDLudoQuick_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EMsgIDLudoQuick_IsValid(int value);
constexpr EMsgIDLudoQuick EMsgIDLudoQuick_MIN = MsgID_FirstPublish;
constexpr EMsgIDLudoQuick EMsgIDLudoQuick_MAX = SUB_CS_Optional;
constexpr int EMsgIDLudoQuick_ARRAYSIZE = EMsgIDLudoQuick_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDLudoQuick_descriptor();
template<typename T>
inline const std::string& EMsgIDLudoQuick_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EMsgIDLudoQuick>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EMsgIDLudoQuick_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EMsgIDLudoQuick_descriptor(), enum_t_value);
}
inline bool EMsgIDLudoQuick_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EMsgIDLudoQuick* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EMsgIDLudoQuick>(
    EMsgIDLudoQuick_descriptor(), name, value);
}
// ===================================================================

class RouteInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LudoQuick.RouteInfo) */ {
 public:
  inline RouteInfo() : RouteInfo(nullptr) {}
  virtual ~RouteInfo();

  RouteInfo(const RouteInfo& from);
  RouteInfo(RouteInfo&& from) noexcept
    : RouteInfo() {
    *this = ::std::move(from);
  }

  inline RouteInfo& operator=(const RouteInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteInfo& operator=(RouteInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteInfo& default_instance();

  static inline const RouteInfo* internal_default_instance() {
    return reinterpret_cast<const RouteInfo*>(
               &_RouteInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RouteInfo& a, RouteInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteInfo* New() const final {
    return CreateMaybeMessage<RouteInfo>(nullptr);
  }

  RouteInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteInfo& from);
  void MergeFrom(const RouteInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LudoQuick.RouteInfo";
  }
  protected:
  explicit RouteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LudoQuick_2eproto);
    return ::descriptor_table_LudoQuick_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChessIdFieldNumber = 1,
    kGoldBagFieldNumber = 2,
    kPosFieldNumber = 3,
  };
  // int32 chess_id = 1;
  void clear_chess_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chess_id() const;
  void set_chess_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chess_id() const;
  void _internal_set_chess_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gold_bag = 2;
  void clear_gold_bag();
  ::PROTOBUF_NAMESPACE_ID::int32 gold_bag() const;
  void set_gold_bag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gold_bag() const;
  void _internal_set_gold_bag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pos = 3;
  void clear_pos();
  ::PROTOBUF_NAMESPACE_ID::int32 pos() const;
  void set_pos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pos() const;
  void _internal_set_pos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LudoQuick.RouteInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chess_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 gold_bag_;
  ::PROTOBUF_NAMESPACE_ID::int32 pos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LudoQuick_2eproto;
};
// -------------------------------------------------------------------

class UserInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LudoQuick.UserInfo) */ {
 public:
  inline UserInfo() : UserInfo(nullptr) {}
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserInfo& default_instance();

  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const final {
    return CreateMaybeMessage<UserInfo>(nullptr);
  }

  UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LudoQuick.UserInfo";
  }
  protected:
  explicit UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LudoQuick_2eproto);
    return ::descriptor_table_LudoQuick_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouteInfoFieldNumber = 2,
    kChairIdFieldNumber = 1,
    kFinishLineSwitchFieldNumber = 3,
  };
  // repeated .LudoQuick.RouteInfo route_info = 2;
  int route_info_size() const;
  private:
  int _internal_route_info_size() const;
  public:
  void clear_route_info();
  ::LudoQuick::RouteInfo* mutable_route_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LudoQuick::RouteInfo >*
      mutable_route_info();
  private:
  const ::LudoQuick::RouteInfo& _internal_route_info(int index) const;
  ::LudoQuick::RouteInfo* _internal_add_route_info();
  public:
  const ::LudoQuick::RouteInfo& route_info(int index) const;
  ::LudoQuick::RouteInfo* add_route_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LudoQuick::RouteInfo >&
      route_info() const;

  // int32 chair_id = 1;
  void clear_chair_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id() const;
  void set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_id() const;
  void _internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool finish_line_switch = 3;
  void clear_finish_line_switch();
  bool finish_line_switch() const;
  void set_finish_line_switch(bool value);
  private:
  bool _internal_finish_line_switch() const;
  void _internal_set_finish_line_switch(bool value);
  public:

  // @@protoc_insertion_point(class_scope:LudoQuick.UserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LudoQuick::RouteInfo > route_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id_;
  bool finish_line_switch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LudoQuick_2eproto;
};
// -------------------------------------------------------------------

class ChessGrid PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LudoQuick.ChessGrid) */ {
 public:
  inline ChessGrid() : ChessGrid(nullptr) {}
  virtual ~ChessGrid();

  ChessGrid(const ChessGrid& from);
  ChessGrid(ChessGrid&& from) noexcept
    : ChessGrid() {
    *this = ::std::move(from);
  }

  inline ChessGrid& operator=(const ChessGrid& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChessGrid& operator=(ChessGrid&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChessGrid& default_instance();

  static inline const ChessGrid* internal_default_instance() {
    return reinterpret_cast<const ChessGrid*>(
               &_ChessGrid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChessGrid& a, ChessGrid& b) {
    a.Swap(&b);
  }
  inline void Swap(ChessGrid* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChessGrid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChessGrid* New() const final {
    return CreateMaybeMessage<ChessGrid>(nullptr);
  }

  ChessGrid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChessGrid>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChessGrid& from);
  void MergeFrom(const ChessGrid& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChessGrid* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LudoQuick.ChessGrid";
  }
  protected:
  explicit ChessGrid(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LudoQuick_2eproto);
    return ::descriptor_table_LudoQuick_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosIdFieldNumber = 1,
    kSafeHouseFieldNumber = 2,
    kGoldBagFieldNumber = 3,
    kPropFieldNumber = 4,
    kSwitchFieldNumber = 5,
    kInflectionFieldNumber = 6,
    kNextPos1FieldNumber = 7,
    kNextPos2FieldNumber = 8,
    kStartPointFieldNumber = 9,
    kEndPointFieldNumber = 10,
  };
  // int32 pos_id = 1;
  void clear_pos_id();
  ::PROTOBUF_NAMESPACE_ID::int32 pos_id() const;
  void set_pos_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pos_id() const;
  void _internal_set_pos_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 safe_house = 2;
  void clear_safe_house();
  ::PROTOBUF_NAMESPACE_ID::int32 safe_house() const;
  void set_safe_house(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_safe_house() const;
  void _internal_set_safe_house(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gold_bag = 3;
  void clear_gold_bag();
  ::PROTOBUF_NAMESPACE_ID::int32 gold_bag() const;
  void set_gold_bag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gold_bag() const;
  void _internal_set_gold_bag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 prop = 4;
  void clear_prop();
  ::PROTOBUF_NAMESPACE_ID::int32 prop() const;
  void set_prop(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prop() const;
  void _internal_set_prop(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 switch = 5;
  void clear_switch_();
  ::PROTOBUF_NAMESPACE_ID::int32 switch_() const;
  void set_switch_(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_switch_() const;
  void _internal_set_switch_(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 inflection = 6;
  void clear_inflection();
  ::PROTOBUF_NAMESPACE_ID::int32 inflection() const;
  void set_inflection(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_inflection() const;
  void _internal_set_inflection(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 next_pos1 = 7;
  void clear_next_pos1();
  ::PROTOBUF_NAMESPACE_ID::int32 next_pos1() const;
  void set_next_pos1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_next_pos1() const;
  void _internal_set_next_pos1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 next_pos2 = 8;
  void clear_next_pos2();
  ::PROTOBUF_NAMESPACE_ID::int32 next_pos2() const;
  void set_next_pos2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_next_pos2() const;
  void _internal_set_next_pos2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 start_point = 9;
  void clear_start_point();
  ::PROTOBUF_NAMESPACE_ID::int32 start_point() const;
  void set_start_point(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start_point() const;
  void _internal_set_start_point(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 end_point = 10;
  void clear_end_point();
  ::PROTOBUF_NAMESPACE_ID::int32 end_point() const;
  void set_end_point(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end_point() const;
  void _internal_set_end_point(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LudoQuick.ChessGrid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 pos_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 safe_house_;
  ::PROTOBUF_NAMESPACE_ID::int32 gold_bag_;
  ::PROTOBUF_NAMESPACE_ID::int32 prop_;
  ::PROTOBUF_NAMESPACE_ID::int32 switch__;
  ::PROTOBUF_NAMESPACE_ID::int32 inflection_;
  ::PROTOBUF_NAMESPACE_ID::int32 next_pos1_;
  ::PROTOBUF_NAMESPACE_ID::int32 next_pos2_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_point_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LudoQuick_2eproto;
};
// -------------------------------------------------------------------

class MsgSceneInfoResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LudoQuick.MsgSceneInfoResp) */ {
 public:
  inline MsgSceneInfoResp() : MsgSceneInfoResp(nullptr) {}
  virtual ~MsgSceneInfoResp();

  MsgSceneInfoResp(const MsgSceneInfoResp& from);
  MsgSceneInfoResp(MsgSceneInfoResp&& from) noexcept
    : MsgSceneInfoResp() {
    *this = ::std::move(from);
  }

  inline MsgSceneInfoResp& operator=(const MsgSceneInfoResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgSceneInfoResp& operator=(MsgSceneInfoResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgSceneInfoResp& default_instance();

  static inline const MsgSceneInfoResp* internal_default_instance() {
    return reinterpret_cast<const MsgSceneInfoResp*>(
               &_MsgSceneInfoResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MsgSceneInfoResp& a, MsgSceneInfoResp& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgSceneInfoResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgSceneInfoResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgSceneInfoResp* New() const final {
    return CreateMaybeMessage<MsgSceneInfoResp>(nullptr);
  }

  MsgSceneInfoResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgSceneInfoResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgSceneInfoResp& from);
  void MergeFrom(const MsgSceneInfoResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgSceneInfoResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LudoQuick.MsgSceneInfoResp";
  }
  protected:
  explicit MsgSceneInfoResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LudoQuick_2eproto);
    return ::descriptor_table_LudoQuick_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 3,
    kGameStateFieldNumber = 1,
    kTimeRemainingFieldNumber = 2,
  };
  // repeated .LudoQuick.UserInfo user_info = 3;
  int user_info_size() const;
  private:
  int _internal_user_info_size() const;
  public:
  void clear_user_info();
  ::LudoQuick::UserInfo* mutable_user_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LudoQuick::UserInfo >*
      mutable_user_info();
  private:
  const ::LudoQuick::UserInfo& _internal_user_info(int index) const;
  ::LudoQuick::UserInfo* _internal_add_user_info();
  public:
  const ::LudoQuick::UserInfo& user_info(int index) const;
  ::LudoQuick::UserInfo* add_user_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LudoQuick::UserInfo >&
      user_info() const;

  // int32 game_state = 1;
  void clear_game_state();
  ::PROTOBUF_NAMESPACE_ID::int32 game_state() const;
  void set_game_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_state() const;
  void _internal_set_game_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 time_remaining = 2;
  void clear_time_remaining();
  ::PROTOBUF_NAMESPACE_ID::int32 time_remaining() const;
  void set_time_remaining(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time_remaining() const;
  void _internal_set_time_remaining(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LudoQuick.MsgSceneInfoResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LudoQuick::UserInfo > user_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_remaining_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LudoQuick_2eproto;
};
// -------------------------------------------------------------------

class MsgStartDiceResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LudoQuick.MsgStartDiceResp) */ {
 public:
  inline MsgStartDiceResp() : MsgStartDiceResp(nullptr) {}
  virtual ~MsgStartDiceResp();

  MsgStartDiceResp(const MsgStartDiceResp& from);
  MsgStartDiceResp(MsgStartDiceResp&& from) noexcept
    : MsgStartDiceResp() {
    *this = ::std::move(from);
  }

  inline MsgStartDiceResp& operator=(const MsgStartDiceResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgStartDiceResp& operator=(MsgStartDiceResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgStartDiceResp& default_instance();

  static inline const MsgStartDiceResp* internal_default_instance() {
    return reinterpret_cast<const MsgStartDiceResp*>(
               &_MsgStartDiceResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MsgStartDiceResp& a, MsgStartDiceResp& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgStartDiceResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgStartDiceResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgStartDiceResp* New() const final {
    return CreateMaybeMessage<MsgStartDiceResp>(nullptr);
  }

  MsgStartDiceResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgStartDiceResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgStartDiceResp& from);
  void MergeFrom(const MsgStartDiceResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgStartDiceResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LudoQuick.MsgStartDiceResp";
  }
  protected:
  explicit MsgStartDiceResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LudoQuick_2eproto);
    return ::descriptor_table_LudoQuick_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdFieldNumber = 1,
    kTimesFieldNumber = 2,
  };
  // int32 chair_id = 1;
  void clear_chair_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id() const;
  void set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_id() const;
  void _internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 times = 2;
  void clear_times();
  ::PROTOBUF_NAMESPACE_ID::int32 times() const;
  void set_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_times() const;
  void _internal_set_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LudoQuick.MsgStartDiceResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 times_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LudoQuick_2eproto;
};
// -------------------------------------------------------------------

class MsgThrowDiceResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LudoQuick.MsgThrowDiceResp) */ {
 public:
  inline MsgThrowDiceResp() : MsgThrowDiceResp(nullptr) {}
  virtual ~MsgThrowDiceResp();

  MsgThrowDiceResp(const MsgThrowDiceResp& from);
  MsgThrowDiceResp(MsgThrowDiceResp&& from) noexcept
    : MsgThrowDiceResp() {
    *this = ::std::move(from);
  }

  inline MsgThrowDiceResp& operator=(const MsgThrowDiceResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgThrowDiceResp& operator=(MsgThrowDiceResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgThrowDiceResp& default_instance();

  static inline const MsgThrowDiceResp* internal_default_instance() {
    return reinterpret_cast<const MsgThrowDiceResp*>(
               &_MsgThrowDiceResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MsgThrowDiceResp& a, MsgThrowDiceResp& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgThrowDiceResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgThrowDiceResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgThrowDiceResp* New() const final {
    return CreateMaybeMessage<MsgThrowDiceResp>(nullptr);
  }

  MsgThrowDiceResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgThrowDiceResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgThrowDiceResp& from);
  void MergeFrom(const MsgThrowDiceResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgThrowDiceResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LudoQuick.MsgThrowDiceResp";
  }
  protected:
  explicit MsgThrowDiceResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LudoQuick_2eproto);
    return ::descriptor_table_LudoQuick_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdFieldNumber = 1,
    kDiceRollFieldNumber = 2,
  };
  // int32 chair_id = 1;
  void clear_chair_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id() const;
  void set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_id() const;
  void _internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dice_roll = 2;
  void clear_dice_roll();
  ::PROTOBUF_NAMESPACE_ID::int32 dice_roll() const;
  void set_dice_roll(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dice_roll() const;
  void _internal_set_dice_roll(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LudoQuick.MsgThrowDiceResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 dice_roll_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LudoQuick_2eproto;
};
// -------------------------------------------------------------------

class MsgOperateRoute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LudoQuick.MsgOperateRoute) */ {
 public:
  inline MsgOperateRoute() : MsgOperateRoute(nullptr) {}
  virtual ~MsgOperateRoute();

  MsgOperateRoute(const MsgOperateRoute& from);
  MsgOperateRoute(MsgOperateRoute&& from) noexcept
    : MsgOperateRoute() {
    *this = ::std::move(from);
  }

  inline MsgOperateRoute& operator=(const MsgOperateRoute& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgOperateRoute& operator=(MsgOperateRoute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgOperateRoute& default_instance();

  static inline const MsgOperateRoute* internal_default_instance() {
    return reinterpret_cast<const MsgOperateRoute*>(
               &_MsgOperateRoute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MsgOperateRoute& a, MsgOperateRoute& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgOperateRoute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgOperateRoute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgOperateRoute* New() const final {
    return CreateMaybeMessage<MsgOperateRoute>(nullptr);
  }

  MsgOperateRoute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgOperateRoute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgOperateRoute& from);
  void MergeFrom(const MsgOperateRoute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgOperateRoute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LudoQuick.MsgOperateRoute";
  }
  protected:
  explicit MsgOperateRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LudoQuick_2eproto);
    return ::descriptor_table_LudoQuick_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdFieldNumber = 1,
    kChessIdFieldNumber = 2,
  };
  // int32 chair_id = 1;
  void clear_chair_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id() const;
  void set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_id() const;
  void _internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 chess_id = 2;
  void clear_chess_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chess_id() const;
  void set_chess_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chess_id() const;
  void _internal_set_chess_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LudoQuick.MsgOperateRoute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 chess_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LudoQuick_2eproto;
};
// -------------------------------------------------------------------

class MsgDiceInfoResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LudoQuick.MsgDiceInfoResp) */ {
 public:
  inline MsgDiceInfoResp() : MsgDiceInfoResp(nullptr) {}
  virtual ~MsgDiceInfoResp();

  MsgDiceInfoResp(const MsgDiceInfoResp& from);
  MsgDiceInfoResp(MsgDiceInfoResp&& from) noexcept
    : MsgDiceInfoResp() {
    *this = ::std::move(from);
  }

  inline MsgDiceInfoResp& operator=(const MsgDiceInfoResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgDiceInfoResp& operator=(MsgDiceInfoResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgDiceInfoResp& default_instance();

  static inline const MsgDiceInfoResp* internal_default_instance() {
    return reinterpret_cast<const MsgDiceInfoResp*>(
               &_MsgDiceInfoResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MsgDiceInfoResp& a, MsgDiceInfoResp& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgDiceInfoResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgDiceInfoResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgDiceInfoResp* New() const final {
    return CreateMaybeMessage<MsgDiceInfoResp>(nullptr);
  }

  MsgDiceInfoResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgDiceInfoResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgDiceInfoResp& from);
  void MergeFrom(const MsgDiceInfoResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgDiceInfoResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LudoQuick.MsgDiceInfoResp";
  }
  protected:
  explicit MsgDiceInfoResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LudoQuick_2eproto);
    return ::descriptor_table_LudoQuick_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdFieldNumber = 1,
    kChessIdFieldNumber = 2,
    kRouteNumFieldNumber = 3,
    kPropIdFieldNumber = 4,
    kCodeFieldNumber = 5,
  };
  // int32 chair_id = 1;
  void clear_chair_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id() const;
  void set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_id() const;
  void _internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 chess_id = 2;
  void clear_chess_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chess_id() const;
  void set_chess_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chess_id() const;
  void _internal_set_chess_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 route_num = 3;
  void clear_route_num();
  ::PROTOBUF_NAMESPACE_ID::int32 route_num() const;
  void set_route_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_route_num() const;
  void _internal_set_route_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 prop_id = 4;
  void clear_prop_id();
  ::PROTOBUF_NAMESPACE_ID::int32 prop_id() const;
  void set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prop_id() const;
  void _internal_set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 code = 5;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LudoQuick.MsgDiceInfoResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 chess_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 route_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 prop_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LudoQuick_2eproto;
};
// -------------------------------------------------------------------

class GameResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LudoQuick.GameResult) */ {
 public:
  inline GameResult() : GameResult(nullptr) {}
  virtual ~GameResult();

  GameResult(const GameResult& from);
  GameResult(GameResult&& from) noexcept
    : GameResult() {
    *this = ::std::move(from);
  }

  inline GameResult& operator=(const GameResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameResult& operator=(GameResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameResult& default_instance();

  static inline const GameResult* internal_default_instance() {
    return reinterpret_cast<const GameResult*>(
               &_GameResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GameResult& a, GameResult& b) {
    a.Swap(&b);
  }
  inline void Swap(GameResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameResult* New() const final {
    return CreateMaybeMessage<GameResult>(nullptr);
  }

  GameResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameResult& from);
  void MergeFrom(const GameResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LudoQuick.GameResult";
  }
  protected:
  explicit GameResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LudoQuick_2eproto);
    return ::descriptor_table_LudoQuick_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 2,
    kUserGoldFieldNumber = 3,
    kWinFieldNumber = 4,
    kBetFieldNumber = 5,
    kChairIdFieldNumber = 1,
  };
  // .LudoQuick.UserInfo user_info = 2;
  bool has_user_info() const;
  private:
  bool _internal_has_user_info() const;
  public:
  void clear_user_info();
  const ::LudoQuick::UserInfo& user_info() const;
  ::LudoQuick::UserInfo* release_user_info();
  ::LudoQuick::UserInfo* mutable_user_info();
  void set_allocated_user_info(::LudoQuick::UserInfo* user_info);
  private:
  const ::LudoQuick::UserInfo& _internal_user_info() const;
  ::LudoQuick::UserInfo* _internal_mutable_user_info();
  public:
  void unsafe_arena_set_allocated_user_info(
      ::LudoQuick::UserInfo* user_info);
  ::LudoQuick::UserInfo* unsafe_arena_release_user_info();

  // int64 user_gold = 3;
  void clear_user_gold();
  ::PROTOBUF_NAMESPACE_ID::int64 user_gold() const;
  void set_user_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_gold() const;
  void _internal_set_user_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 win = 4;
  void clear_win();
  ::PROTOBUF_NAMESPACE_ID::int64 win() const;
  void set_win(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_win() const;
  void _internal_set_win(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 bet = 5;
  void clear_bet();
  ::PROTOBUF_NAMESPACE_ID::int64 bet() const;
  void set_bet(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_bet() const;
  void _internal_set_bet(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 chair_id = 1;
  void clear_chair_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id() const;
  void set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_id() const;
  void _internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LudoQuick.GameResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::LudoQuick::UserInfo* user_info_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_gold_;
  ::PROTOBUF_NAMESPACE_ID::int64 win_;
  ::PROTOBUF_NAMESPACE_ID::int64 bet_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LudoQuick_2eproto;
};
// -------------------------------------------------------------------

class MsgResultResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LudoQuick.MsgResultResp) */ {
 public:
  inline MsgResultResp() : MsgResultResp(nullptr) {}
  virtual ~MsgResultResp();

  MsgResultResp(const MsgResultResp& from);
  MsgResultResp(MsgResultResp&& from) noexcept
    : MsgResultResp() {
    *this = ::std::move(from);
  }

  inline MsgResultResp& operator=(const MsgResultResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgResultResp& operator=(MsgResultResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgResultResp& default_instance();

  static inline const MsgResultResp* internal_default_instance() {
    return reinterpret_cast<const MsgResultResp*>(
               &_MsgResultResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MsgResultResp& a, MsgResultResp& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgResultResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgResultResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgResultResp* New() const final {
    return CreateMaybeMessage<MsgResultResp>(nullptr);
  }

  MsgResultResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgResultResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgResultResp& from);
  void MergeFrom(const MsgResultResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgResultResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LudoQuick.MsgResultResp";
  }
  protected:
  explicit MsgResultResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LudoQuick_2eproto);
    return ::descriptor_table_LudoQuick_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // repeated .LudoQuick.GameResult result = 1;
  int result_size() const;
  private:
  int _internal_result_size() const;
  public:
  void clear_result();
  ::LudoQuick::GameResult* mutable_result(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LudoQuick::GameResult >*
      mutable_result();
  private:
  const ::LudoQuick::GameResult& _internal_result(int index) const;
  ::LudoQuick::GameResult* _internal_add_result();
  public:
  const ::LudoQuick::GameResult& result(int index) const;
  ::LudoQuick::GameResult* add_result();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LudoQuick::GameResult >&
      result() const;

  // @@protoc_insertion_point(class_scope:LudoQuick.MsgResultResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LudoQuick::GameResult > result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LudoQuick_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RouteInfo

// int32 chess_id = 1;
inline void RouteInfo::clear_chess_id() {
  chess_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RouteInfo::_internal_chess_id() const {
  return chess_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RouteInfo::chess_id() const {
  // @@protoc_insertion_point(field_get:LudoQuick.RouteInfo.chess_id)
  return _internal_chess_id();
}
inline void RouteInfo::_internal_set_chess_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chess_id_ = value;
}
inline void RouteInfo::set_chess_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chess_id(value);
  // @@protoc_insertion_point(field_set:LudoQuick.RouteInfo.chess_id)
}

// int32 gold_bag = 2;
inline void RouteInfo::clear_gold_bag() {
  gold_bag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RouteInfo::_internal_gold_bag() const {
  return gold_bag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RouteInfo::gold_bag() const {
  // @@protoc_insertion_point(field_get:LudoQuick.RouteInfo.gold_bag)
  return _internal_gold_bag();
}
inline void RouteInfo::_internal_set_gold_bag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gold_bag_ = value;
}
inline void RouteInfo::set_gold_bag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gold_bag(value);
  // @@protoc_insertion_point(field_set:LudoQuick.RouteInfo.gold_bag)
}

// int32 pos = 3;
inline void RouteInfo::clear_pos() {
  pos_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RouteInfo::_internal_pos() const {
  return pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RouteInfo::pos() const {
  // @@protoc_insertion_point(field_get:LudoQuick.RouteInfo.pos)
  return _internal_pos();
}
inline void RouteInfo::_internal_set_pos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pos_ = value;
}
inline void RouteInfo::set_pos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:LudoQuick.RouteInfo.pos)
}

// -------------------------------------------------------------------

// UserInfo

// int32 chair_id = 1;
inline void UserInfo::clear_chair_id() {
  chair_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInfo::_internal_chair_id() const {
  return chair_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInfo::chair_id() const {
  // @@protoc_insertion_point(field_get:LudoQuick.UserInfo.chair_id)
  return _internal_chair_id();
}
inline void UserInfo::_internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_id_ = value;
}
inline void UserInfo::set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_id(value);
  // @@protoc_insertion_point(field_set:LudoQuick.UserInfo.chair_id)
}

// repeated .LudoQuick.RouteInfo route_info = 2;
inline int UserInfo::_internal_route_info_size() const {
  return route_info_.size();
}
inline int UserInfo::route_info_size() const {
  return _internal_route_info_size();
}
inline void UserInfo::clear_route_info() {
  route_info_.Clear();
}
inline ::LudoQuick::RouteInfo* UserInfo::mutable_route_info(int index) {
  // @@protoc_insertion_point(field_mutable:LudoQuick.UserInfo.route_info)
  return route_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LudoQuick::RouteInfo >*
UserInfo::mutable_route_info() {
  // @@protoc_insertion_point(field_mutable_list:LudoQuick.UserInfo.route_info)
  return &route_info_;
}
inline const ::LudoQuick::RouteInfo& UserInfo::_internal_route_info(int index) const {
  return route_info_.Get(index);
}
inline const ::LudoQuick::RouteInfo& UserInfo::route_info(int index) const {
  // @@protoc_insertion_point(field_get:LudoQuick.UserInfo.route_info)
  return _internal_route_info(index);
}
inline ::LudoQuick::RouteInfo* UserInfo::_internal_add_route_info() {
  return route_info_.Add();
}
inline ::LudoQuick::RouteInfo* UserInfo::add_route_info() {
  // @@protoc_insertion_point(field_add:LudoQuick.UserInfo.route_info)
  return _internal_add_route_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LudoQuick::RouteInfo >&
UserInfo::route_info() const {
  // @@protoc_insertion_point(field_list:LudoQuick.UserInfo.route_info)
  return route_info_;
}

// bool finish_line_switch = 3;
inline void UserInfo::clear_finish_line_switch() {
  finish_line_switch_ = false;
}
inline bool UserInfo::_internal_finish_line_switch() const {
  return finish_line_switch_;
}
inline bool UserInfo::finish_line_switch() const {
  // @@protoc_insertion_point(field_get:LudoQuick.UserInfo.finish_line_switch)
  return _internal_finish_line_switch();
}
inline void UserInfo::_internal_set_finish_line_switch(bool value) {
  
  finish_line_switch_ = value;
}
inline void UserInfo::set_finish_line_switch(bool value) {
  _internal_set_finish_line_switch(value);
  // @@protoc_insertion_point(field_set:LudoQuick.UserInfo.finish_line_switch)
}

// -------------------------------------------------------------------

// ChessGrid

// int32 pos_id = 1;
inline void ChessGrid::clear_pos_id() {
  pos_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChessGrid::_internal_pos_id() const {
  return pos_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChessGrid::pos_id() const {
  // @@protoc_insertion_point(field_get:LudoQuick.ChessGrid.pos_id)
  return _internal_pos_id();
}
inline void ChessGrid::_internal_set_pos_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pos_id_ = value;
}
inline void ChessGrid::set_pos_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pos_id(value);
  // @@protoc_insertion_point(field_set:LudoQuick.ChessGrid.pos_id)
}

// int32 safe_house = 2;
inline void ChessGrid::clear_safe_house() {
  safe_house_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChessGrid::_internal_safe_house() const {
  return safe_house_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChessGrid::safe_house() const {
  // @@protoc_insertion_point(field_get:LudoQuick.ChessGrid.safe_house)
  return _internal_safe_house();
}
inline void ChessGrid::_internal_set_safe_house(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  safe_house_ = value;
}
inline void ChessGrid::set_safe_house(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_safe_house(value);
  // @@protoc_insertion_point(field_set:LudoQuick.ChessGrid.safe_house)
}

// int32 gold_bag = 3;
inline void ChessGrid::clear_gold_bag() {
  gold_bag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChessGrid::_internal_gold_bag() const {
  return gold_bag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChessGrid::gold_bag() const {
  // @@protoc_insertion_point(field_get:LudoQuick.ChessGrid.gold_bag)
  return _internal_gold_bag();
}
inline void ChessGrid::_internal_set_gold_bag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gold_bag_ = value;
}
inline void ChessGrid::set_gold_bag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gold_bag(value);
  // @@protoc_insertion_point(field_set:LudoQuick.ChessGrid.gold_bag)
}

// int32 prop = 4;
inline void ChessGrid::clear_prop() {
  prop_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChessGrid::_internal_prop() const {
  return prop_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChessGrid::prop() const {
  // @@protoc_insertion_point(field_get:LudoQuick.ChessGrid.prop)
  return _internal_prop();
}
inline void ChessGrid::_internal_set_prop(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  prop_ = value;
}
inline void ChessGrid::set_prop(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prop(value);
  // @@protoc_insertion_point(field_set:LudoQuick.ChessGrid.prop)
}

// int32 switch = 5;
inline void ChessGrid::clear_switch_() {
  switch__ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChessGrid::_internal_switch_() const {
  return switch__;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChessGrid::switch_() const {
  // @@protoc_insertion_point(field_get:LudoQuick.ChessGrid.switch)
  return _internal_switch_();
}
inline void ChessGrid::_internal_set_switch_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  switch__ = value;
}
inline void ChessGrid::set_switch_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_switch_(value);
  // @@protoc_insertion_point(field_set:LudoQuick.ChessGrid.switch)
}

// int32 inflection = 6;
inline void ChessGrid::clear_inflection() {
  inflection_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChessGrid::_internal_inflection() const {
  return inflection_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChessGrid::inflection() const {
  // @@protoc_insertion_point(field_get:LudoQuick.ChessGrid.inflection)
  return _internal_inflection();
}
inline void ChessGrid::_internal_set_inflection(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  inflection_ = value;
}
inline void ChessGrid::set_inflection(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_inflection(value);
  // @@protoc_insertion_point(field_set:LudoQuick.ChessGrid.inflection)
}

// int32 next_pos1 = 7;
inline void ChessGrid::clear_next_pos1() {
  next_pos1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChessGrid::_internal_next_pos1() const {
  return next_pos1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChessGrid::next_pos1() const {
  // @@protoc_insertion_point(field_get:LudoQuick.ChessGrid.next_pos1)
  return _internal_next_pos1();
}
inline void ChessGrid::_internal_set_next_pos1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  next_pos1_ = value;
}
inline void ChessGrid::set_next_pos1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_next_pos1(value);
  // @@protoc_insertion_point(field_set:LudoQuick.ChessGrid.next_pos1)
}

// int32 next_pos2 = 8;
inline void ChessGrid::clear_next_pos2() {
  next_pos2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChessGrid::_internal_next_pos2() const {
  return next_pos2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChessGrid::next_pos2() const {
  // @@protoc_insertion_point(field_get:LudoQuick.ChessGrid.next_pos2)
  return _internal_next_pos2();
}
inline void ChessGrid::_internal_set_next_pos2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  next_pos2_ = value;
}
inline void ChessGrid::set_next_pos2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_next_pos2(value);
  // @@protoc_insertion_point(field_set:LudoQuick.ChessGrid.next_pos2)
}

// int32 start_point = 9;
inline void ChessGrid::clear_start_point() {
  start_point_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChessGrid::_internal_start_point() const {
  return start_point_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChessGrid::start_point() const {
  // @@protoc_insertion_point(field_get:LudoQuick.ChessGrid.start_point)
  return _internal_start_point();
}
inline void ChessGrid::_internal_set_start_point(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_point_ = value;
}
inline void ChessGrid::set_start_point(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start_point(value);
  // @@protoc_insertion_point(field_set:LudoQuick.ChessGrid.start_point)
}

// int32 end_point = 10;
inline void ChessGrid::clear_end_point() {
  end_point_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChessGrid::_internal_end_point() const {
  return end_point_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChessGrid::end_point() const {
  // @@protoc_insertion_point(field_get:LudoQuick.ChessGrid.end_point)
  return _internal_end_point();
}
inline void ChessGrid::_internal_set_end_point(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  end_point_ = value;
}
inline void ChessGrid::set_end_point(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end_point(value);
  // @@protoc_insertion_point(field_set:LudoQuick.ChessGrid.end_point)
}

// -------------------------------------------------------------------

// MsgSceneInfoResp

// int32 game_state = 1;
inline void MsgSceneInfoResp::clear_game_state() {
  game_state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSceneInfoResp::_internal_game_state() const {
  return game_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSceneInfoResp::game_state() const {
  // @@protoc_insertion_point(field_get:LudoQuick.MsgSceneInfoResp.game_state)
  return _internal_game_state();
}
inline void MsgSceneInfoResp::_internal_set_game_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  game_state_ = value;
}
inline void MsgSceneInfoResp::set_game_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_state(value);
  // @@protoc_insertion_point(field_set:LudoQuick.MsgSceneInfoResp.game_state)
}

// int32 time_remaining = 2;
inline void MsgSceneInfoResp::clear_time_remaining() {
  time_remaining_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSceneInfoResp::_internal_time_remaining() const {
  return time_remaining_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSceneInfoResp::time_remaining() const {
  // @@protoc_insertion_point(field_get:LudoQuick.MsgSceneInfoResp.time_remaining)
  return _internal_time_remaining();
}
inline void MsgSceneInfoResp::_internal_set_time_remaining(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_remaining_ = value;
}
inline void MsgSceneInfoResp::set_time_remaining(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time_remaining(value);
  // @@protoc_insertion_point(field_set:LudoQuick.MsgSceneInfoResp.time_remaining)
}

// repeated .LudoQuick.UserInfo user_info = 3;
inline int MsgSceneInfoResp::_internal_user_info_size() const {
  return user_info_.size();
}
inline int MsgSceneInfoResp::user_info_size() const {
  return _internal_user_info_size();
}
inline void MsgSceneInfoResp::clear_user_info() {
  user_info_.Clear();
}
inline ::LudoQuick::UserInfo* MsgSceneInfoResp::mutable_user_info(int index) {
  // @@protoc_insertion_point(field_mutable:LudoQuick.MsgSceneInfoResp.user_info)
  return user_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LudoQuick::UserInfo >*
MsgSceneInfoResp::mutable_user_info() {
  // @@protoc_insertion_point(field_mutable_list:LudoQuick.MsgSceneInfoResp.user_info)
  return &user_info_;
}
inline const ::LudoQuick::UserInfo& MsgSceneInfoResp::_internal_user_info(int index) const {
  return user_info_.Get(index);
}
inline const ::LudoQuick::UserInfo& MsgSceneInfoResp::user_info(int index) const {
  // @@protoc_insertion_point(field_get:LudoQuick.MsgSceneInfoResp.user_info)
  return _internal_user_info(index);
}
inline ::LudoQuick::UserInfo* MsgSceneInfoResp::_internal_add_user_info() {
  return user_info_.Add();
}
inline ::LudoQuick::UserInfo* MsgSceneInfoResp::add_user_info() {
  // @@protoc_insertion_point(field_add:LudoQuick.MsgSceneInfoResp.user_info)
  return _internal_add_user_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LudoQuick::UserInfo >&
MsgSceneInfoResp::user_info() const {
  // @@protoc_insertion_point(field_list:LudoQuick.MsgSceneInfoResp.user_info)
  return user_info_;
}

// -------------------------------------------------------------------

// MsgStartDiceResp

// int32 chair_id = 1;
inline void MsgStartDiceResp::clear_chair_id() {
  chair_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgStartDiceResp::_internal_chair_id() const {
  return chair_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgStartDiceResp::chair_id() const {
  // @@protoc_insertion_point(field_get:LudoQuick.MsgStartDiceResp.chair_id)
  return _internal_chair_id();
}
inline void MsgStartDiceResp::_internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_id_ = value;
}
inline void MsgStartDiceResp::set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_id(value);
  // @@protoc_insertion_point(field_set:LudoQuick.MsgStartDiceResp.chair_id)
}

// int32 times = 2;
inline void MsgStartDiceResp::clear_times() {
  times_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgStartDiceResp::_internal_times() const {
  return times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgStartDiceResp::times() const {
  // @@protoc_insertion_point(field_get:LudoQuick.MsgStartDiceResp.times)
  return _internal_times();
}
inline void MsgStartDiceResp::_internal_set_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  times_ = value;
}
inline void MsgStartDiceResp::set_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_times(value);
  // @@protoc_insertion_point(field_set:LudoQuick.MsgStartDiceResp.times)
}

// -------------------------------------------------------------------

// MsgThrowDiceResp

// int32 chair_id = 1;
inline void MsgThrowDiceResp::clear_chair_id() {
  chair_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgThrowDiceResp::_internal_chair_id() const {
  return chair_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgThrowDiceResp::chair_id() const {
  // @@protoc_insertion_point(field_get:LudoQuick.MsgThrowDiceResp.chair_id)
  return _internal_chair_id();
}
inline void MsgThrowDiceResp::_internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_id_ = value;
}
inline void MsgThrowDiceResp::set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_id(value);
  // @@protoc_insertion_point(field_set:LudoQuick.MsgThrowDiceResp.chair_id)
}

// int32 dice_roll = 2;
inline void MsgThrowDiceResp::clear_dice_roll() {
  dice_roll_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgThrowDiceResp::_internal_dice_roll() const {
  return dice_roll_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgThrowDiceResp::dice_roll() const {
  // @@protoc_insertion_point(field_get:LudoQuick.MsgThrowDiceResp.dice_roll)
  return _internal_dice_roll();
}
inline void MsgThrowDiceResp::_internal_set_dice_roll(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dice_roll_ = value;
}
inline void MsgThrowDiceResp::set_dice_roll(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dice_roll(value);
  // @@protoc_insertion_point(field_set:LudoQuick.MsgThrowDiceResp.dice_roll)
}

// -------------------------------------------------------------------

// MsgOperateRoute

// int32 chair_id = 1;
inline void MsgOperateRoute::clear_chair_id() {
  chair_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgOperateRoute::_internal_chair_id() const {
  return chair_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgOperateRoute::chair_id() const {
  // @@protoc_insertion_point(field_get:LudoQuick.MsgOperateRoute.chair_id)
  return _internal_chair_id();
}
inline void MsgOperateRoute::_internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_id_ = value;
}
inline void MsgOperateRoute::set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_id(value);
  // @@protoc_insertion_point(field_set:LudoQuick.MsgOperateRoute.chair_id)
}

// int32 chess_id = 2;
inline void MsgOperateRoute::clear_chess_id() {
  chess_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgOperateRoute::_internal_chess_id() const {
  return chess_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgOperateRoute::chess_id() const {
  // @@protoc_insertion_point(field_get:LudoQuick.MsgOperateRoute.chess_id)
  return _internal_chess_id();
}
inline void MsgOperateRoute::_internal_set_chess_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chess_id_ = value;
}
inline void MsgOperateRoute::set_chess_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chess_id(value);
  // @@protoc_insertion_point(field_set:LudoQuick.MsgOperateRoute.chess_id)
}

// -------------------------------------------------------------------

// MsgDiceInfoResp

// int32 chair_id = 1;
inline void MsgDiceInfoResp::clear_chair_id() {
  chair_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDiceInfoResp::_internal_chair_id() const {
  return chair_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDiceInfoResp::chair_id() const {
  // @@protoc_insertion_point(field_get:LudoQuick.MsgDiceInfoResp.chair_id)
  return _internal_chair_id();
}
inline void MsgDiceInfoResp::_internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_id_ = value;
}
inline void MsgDiceInfoResp::set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_id(value);
  // @@protoc_insertion_point(field_set:LudoQuick.MsgDiceInfoResp.chair_id)
}

// int32 chess_id = 2;
inline void MsgDiceInfoResp::clear_chess_id() {
  chess_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDiceInfoResp::_internal_chess_id() const {
  return chess_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDiceInfoResp::chess_id() const {
  // @@protoc_insertion_point(field_get:LudoQuick.MsgDiceInfoResp.chess_id)
  return _internal_chess_id();
}
inline void MsgDiceInfoResp::_internal_set_chess_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chess_id_ = value;
}
inline void MsgDiceInfoResp::set_chess_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chess_id(value);
  // @@protoc_insertion_point(field_set:LudoQuick.MsgDiceInfoResp.chess_id)
}

// int32 route_num = 3;
inline void MsgDiceInfoResp::clear_route_num() {
  route_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDiceInfoResp::_internal_route_num() const {
  return route_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDiceInfoResp::route_num() const {
  // @@protoc_insertion_point(field_get:LudoQuick.MsgDiceInfoResp.route_num)
  return _internal_route_num();
}
inline void MsgDiceInfoResp::_internal_set_route_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  route_num_ = value;
}
inline void MsgDiceInfoResp::set_route_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_route_num(value);
  // @@protoc_insertion_point(field_set:LudoQuick.MsgDiceInfoResp.route_num)
}

// int32 prop_id = 4;
inline void MsgDiceInfoResp::clear_prop_id() {
  prop_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDiceInfoResp::_internal_prop_id() const {
  return prop_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDiceInfoResp::prop_id() const {
  // @@protoc_insertion_point(field_get:LudoQuick.MsgDiceInfoResp.prop_id)
  return _internal_prop_id();
}
inline void MsgDiceInfoResp::_internal_set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  prop_id_ = value;
}
inline void MsgDiceInfoResp::set_prop_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prop_id(value);
  // @@protoc_insertion_point(field_set:LudoQuick.MsgDiceInfoResp.prop_id)
}

// int32 code = 5;
inline void MsgDiceInfoResp::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDiceInfoResp::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDiceInfoResp::code() const {
  // @@protoc_insertion_point(field_get:LudoQuick.MsgDiceInfoResp.code)
  return _internal_code();
}
inline void MsgDiceInfoResp::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void MsgDiceInfoResp::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:LudoQuick.MsgDiceInfoResp.code)
}

// -------------------------------------------------------------------

// GameResult

// int32 chair_id = 1;
inline void GameResult::clear_chair_id() {
  chair_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameResult::_internal_chair_id() const {
  return chair_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameResult::chair_id() const {
  // @@protoc_insertion_point(field_get:LudoQuick.GameResult.chair_id)
  return _internal_chair_id();
}
inline void GameResult::_internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_id_ = value;
}
inline void GameResult::set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_id(value);
  // @@protoc_insertion_point(field_set:LudoQuick.GameResult.chair_id)
}

// .LudoQuick.UserInfo user_info = 2;
inline bool GameResult::_internal_has_user_info() const {
  return this != internal_default_instance() && user_info_ != nullptr;
}
inline bool GameResult::has_user_info() const {
  return _internal_has_user_info();
}
inline void GameResult::clear_user_info() {
  if (GetArena() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
}
inline const ::LudoQuick::UserInfo& GameResult::_internal_user_info() const {
  const ::LudoQuick::UserInfo* p = user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::LudoQuick::UserInfo&>(
      ::LudoQuick::_UserInfo_default_instance_);
}
inline const ::LudoQuick::UserInfo& GameResult::user_info() const {
  // @@protoc_insertion_point(field_get:LudoQuick.GameResult.user_info)
  return _internal_user_info();
}
inline void GameResult::unsafe_arena_set_allocated_user_info(
    ::LudoQuick::UserInfo* user_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info_);
  }
  user_info_ = user_info;
  if (user_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LudoQuick.GameResult.user_info)
}
inline ::LudoQuick::UserInfo* GameResult::release_user_info() {
  
  ::LudoQuick::UserInfo* temp = user_info_;
  user_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::LudoQuick::UserInfo* GameResult::unsafe_arena_release_user_info() {
  // @@protoc_insertion_point(field_release:LudoQuick.GameResult.user_info)
  
  ::LudoQuick::UserInfo* temp = user_info_;
  user_info_ = nullptr;
  return temp;
}
inline ::LudoQuick::UserInfo* GameResult::_internal_mutable_user_info() {
  
  if (user_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::LudoQuick::UserInfo>(GetArena());
    user_info_ = p;
  }
  return user_info_;
}
inline ::LudoQuick::UserInfo* GameResult::mutable_user_info() {
  // @@protoc_insertion_point(field_mutable:LudoQuick.GameResult.user_info)
  return _internal_mutable_user_info();
}
inline void GameResult::set_allocated_user_info(::LudoQuick::UserInfo* user_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete user_info_;
  }
  if (user_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user_info);
    if (message_arena != submessage_arena) {
      user_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    
  } else {
    
  }
  user_info_ = user_info;
  // @@protoc_insertion_point(field_set_allocated:LudoQuick.GameResult.user_info)
}

// int64 user_gold = 3;
inline void GameResult::clear_user_gold() {
  user_gold_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameResult::_internal_user_gold() const {
  return user_gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameResult::user_gold() const {
  // @@protoc_insertion_point(field_get:LudoQuick.GameResult.user_gold)
  return _internal_user_gold();
}
inline void GameResult::_internal_set_user_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_gold_ = value;
}
inline void GameResult::set_user_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_gold(value);
  // @@protoc_insertion_point(field_set:LudoQuick.GameResult.user_gold)
}

// int64 win = 4;
inline void GameResult::clear_win() {
  win_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameResult::_internal_win() const {
  return win_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameResult::win() const {
  // @@protoc_insertion_point(field_get:LudoQuick.GameResult.win)
  return _internal_win();
}
inline void GameResult::_internal_set_win(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  win_ = value;
}
inline void GameResult::set_win(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_win(value);
  // @@protoc_insertion_point(field_set:LudoQuick.GameResult.win)
}

// int64 bet = 5;
inline void GameResult::clear_bet() {
  bet_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameResult::_internal_bet() const {
  return bet_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameResult::bet() const {
  // @@protoc_insertion_point(field_get:LudoQuick.GameResult.bet)
  return _internal_bet();
}
inline void GameResult::_internal_set_bet(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  bet_ = value;
}
inline void GameResult::set_bet(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_bet(value);
  // @@protoc_insertion_point(field_set:LudoQuick.GameResult.bet)
}

// -------------------------------------------------------------------

// MsgResultResp

// repeated .LudoQuick.GameResult result = 1;
inline int MsgResultResp::_internal_result_size() const {
  return result_.size();
}
inline int MsgResultResp::result_size() const {
  return _internal_result_size();
}
inline void MsgResultResp::clear_result() {
  result_.Clear();
}
inline ::LudoQuick::GameResult* MsgResultResp::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:LudoQuick.MsgResultResp.result)
  return result_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LudoQuick::GameResult >*
MsgResultResp::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:LudoQuick.MsgResultResp.result)
  return &result_;
}
inline const ::LudoQuick::GameResult& MsgResultResp::_internal_result(int index) const {
  return result_.Get(index);
}
inline const ::LudoQuick::GameResult& MsgResultResp::result(int index) const {
  // @@protoc_insertion_point(field_get:LudoQuick.MsgResultResp.result)
  return _internal_result(index);
}
inline ::LudoQuick::GameResult* MsgResultResp::_internal_add_result() {
  return result_.Add();
}
inline ::LudoQuick::GameResult* MsgResultResp::add_result() {
  // @@protoc_insertion_point(field_add:LudoQuick.MsgResultResp.result)
  return _internal_add_result();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LudoQuick::GameResult >&
MsgResultResp::result() const {
  // @@protoc_insertion_point(field_list:LudoQuick.MsgResultResp.result)
  return result_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace LudoQuick

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::LudoQuick::EMsgIDLudoQuick> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LudoQuick::EMsgIDLudoQuick>() {
  return ::LudoQuick::EMsgIDLudoQuick_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_LudoQuick_2eproto
