// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: XCS.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_XCS_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_XCS_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_XCS_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_XCS_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_XCS_2eproto;
namespace XCS {
class CMD_3D_SC_Result;
class CMD_3D_SC_ResultDefaultTypeInternal;
extern CMD_3D_SC_ResultDefaultTypeInternal _CMD_3D_SC_Result_default_instance_;
class LineType;
class LineTypeDefaultTypeInternal;
extern LineTypeDefaultTypeInternal _LineType_default_instance_;
class SC_SceneInfo;
class SC_SceneInfoDefaultTypeInternal;
extern SC_SceneInfoDefaultTypeInternal _SC_SceneInfo_default_instance_;
}  // namespace XCS
PROTOBUF_NAMESPACE_OPEN
template<> ::XCS::CMD_3D_SC_Result* Arena::CreateMaybeMessage<::XCS::CMD_3D_SC_Result>(Arena*);
template<> ::XCS::LineType* Arena::CreateMaybeMessage<::XCS::LineType>(Arena*);
template<> ::XCS::SC_SceneInfo* Arena::CreateMaybeMessage<::XCS::SC_SceneInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace XCS {

enum EMsgIDXCS : int {
  SUB_CS_GAME_START = 0,
  SUB_CS_JACKPOT = 1,
  SUB_SC_SEND_ACCPOOL = 2,
  SUB_SC_RESULTS_INFO = 3,
  EMsgIDXCS_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EMsgIDXCS_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EMsgIDXCS_IsValid(int value);
constexpr EMsgIDXCS EMsgIDXCS_MIN = SUB_CS_GAME_START;
constexpr EMsgIDXCS EMsgIDXCS_MAX = SUB_SC_RESULTS_INFO;
constexpr int EMsgIDXCS_ARRAYSIZE = EMsgIDXCS_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDXCS_descriptor();
template<typename T>
inline const std::string& EMsgIDXCS_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EMsgIDXCS>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EMsgIDXCS_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EMsgIDXCS_descriptor(), enum_t_value);
}
inline bool EMsgIDXCS_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EMsgIDXCS* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EMsgIDXCS>(
    EMsgIDXCS_descriptor(), name, value);
}
// ===================================================================

class SC_SceneInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XCS.SC_SceneInfo) */ {
 public:
  inline SC_SceneInfo() : SC_SceneInfo(nullptr) {}
  virtual ~SC_SceneInfo();

  SC_SceneInfo(const SC_SceneInfo& from);
  SC_SceneInfo(SC_SceneInfo&& from) noexcept
    : SC_SceneInfo() {
    *this = ::std::move(from);
  }

  inline SC_SceneInfo& operator=(const SC_SceneInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_SceneInfo& operator=(SC_SceneInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_SceneInfo& default_instance();

  static inline const SC_SceneInfo* internal_default_instance() {
    return reinterpret_cast<const SC_SceneInfo*>(
               &_SC_SceneInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SC_SceneInfo& a, SC_SceneInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_SceneInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_SceneInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_SceneInfo* New() const final {
    return CreateMaybeMessage<SC_SceneInfo>(nullptr);
  }

  SC_SceneInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_SceneInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_SceneInfo& from);
  void MergeFrom(const SC_SceneInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_SceneInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XCS.SC_SceneInfo";
  }
  protected:
  explicit SC_SceneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_XCS_2eproto);
    return ::descriptor_table_XCS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChipListFieldNumber = 3,
    kLineRateFieldNumber = 4,
    kCurChipFieldNumber = 1,
    kFreeCountFieldNumber = 2,
    kGodScoreFieldNumber = 5,
    kLimitChipFieldNumber = 6,
    kIlimitChipFieldNumber = 7,
    kJackpotFieldNumber = 10,
    kReTurnFieldNumber = 8,
  };
  // repeated int32 chip_list = 3;
  int chip_list_size() const;
  private:
  int _internal_chip_list_size() const;
  public:
  void clear_chip_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chip_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_chip_list() const;
  void _internal_add_chip_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_chip_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 chip_list(int index) const;
  void set_chip_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_chip_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      chip_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_chip_list();

  // repeated int32 line_rate = 4;
  int line_rate_size() const;
  private:
  int _internal_line_rate_size() const;
  public:
  void clear_line_rate();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_line_rate(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_line_rate() const;
  void _internal_add_line_rate(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_line_rate();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 line_rate(int index) const;
  void set_line_rate(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_line_rate(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      line_rate() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_line_rate();

  // int32 cur_chip = 1;
  void clear_cur_chip();
  ::PROTOBUF_NAMESPACE_ID::int32 cur_chip() const;
  void set_cur_chip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cur_chip() const;
  void _internal_set_cur_chip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 free_count = 2;
  void clear_free_count();
  ::PROTOBUF_NAMESPACE_ID::int32 free_count() const;
  void set_free_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_free_count() const;
  void _internal_set_free_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 god_score = 5;
  void clear_god_score();
  ::PROTOBUF_NAMESPACE_ID::int64 god_score() const;
  void set_god_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_god_score() const;
  void _internal_set_god_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 limit_chip = 6;
  void clear_limit_chip();
  ::PROTOBUF_NAMESPACE_ID::int32 limit_chip() const;
  void set_limit_chip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_limit_chip() const;
  void _internal_set_limit_chip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ilimit_chip = 7;
  void clear_ilimit_chip();
  ::PROTOBUF_NAMESPACE_ID::int32 ilimit_chip() const;
  void set_ilimit_chip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ilimit_chip() const;
  void _internal_set_ilimit_chip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 jackpot = 10;
  void clear_jackpot();
  ::PROTOBUF_NAMESPACE_ID::int64 jackpot() const;
  void set_jackpot(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_jackpot() const;
  void _internal_set_jackpot(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 re_turn = 8;
  void clear_re_turn();
  ::PROTOBUF_NAMESPACE_ID::int32 re_turn() const;
  void set_re_turn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_re_turn() const;
  void _internal_set_re_turn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:XCS.SC_SceneInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > chip_list_;
  mutable std::atomic<int> _chip_list_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > line_rate_;
  mutable std::atomic<int> _line_rate_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 cur_chip_;
  ::PROTOBUF_NAMESPACE_ID::int32 free_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 god_score_;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_chip_;
  ::PROTOBUF_NAMESPACE_ID::int32 ilimit_chip_;
  ::PROTOBUF_NAMESPACE_ID::int64 jackpot_;
  ::PROTOBUF_NAMESPACE_ID::int32 re_turn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_XCS_2eproto;
};
// -------------------------------------------------------------------

class LineType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XCS.LineType) */ {
 public:
  inline LineType() : LineType(nullptr) {}
  virtual ~LineType();

  LineType(const LineType& from);
  LineType(LineType&& from) noexcept
    : LineType() {
    *this = ::std::move(from);
  }

  inline LineType& operator=(const LineType& from) {
    CopyFrom(from);
    return *this;
  }
  inline LineType& operator=(LineType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LineType& default_instance();

  static inline const LineType* internal_default_instance() {
    return reinterpret_cast<const LineType*>(
               &_LineType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LineType& a, LineType& b) {
    a.Swap(&b);
  }
  inline void Swap(LineType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LineType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LineType* New() const final {
    return CreateMaybeMessage<LineType>(nullptr);
  }

  LineType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LineType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LineType& from);
  void MergeFrom(const LineType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LineType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XCS.LineType";
  }
  protected:
  explicit LineType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_XCS_2eproto);
    return ::descriptor_table_XCS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLineTypeFieldNumber = 1,
  };
  // repeated int32 line_type = 1;
  int line_type_size() const;
  private:
  int _internal_line_type_size() const;
  public:
  void clear_line_type();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_line_type(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_line_type() const;
  void _internal_add_line_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_line_type();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 line_type(int index) const;
  void set_line_type(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_line_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      line_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_line_type();

  // @@protoc_insertion_point(class_scope:XCS.LineType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > line_type_;
  mutable std::atomic<int> _line_type_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_XCS_2eproto;
};
// -------------------------------------------------------------------

class CMD_3D_SC_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XCS.CMD_3D_SC_Result) */ {
 public:
  inline CMD_3D_SC_Result() : CMD_3D_SC_Result(nullptr) {}
  virtual ~CMD_3D_SC_Result();

  CMD_3D_SC_Result(const CMD_3D_SC_Result& from);
  CMD_3D_SC_Result(CMD_3D_SC_Result&& from) noexcept
    : CMD_3D_SC_Result() {
    *this = ::std::move(from);
  }

  inline CMD_3D_SC_Result& operator=(const CMD_3D_SC_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMD_3D_SC_Result& operator=(CMD_3D_SC_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMD_3D_SC_Result& default_instance();

  static inline const CMD_3D_SC_Result* internal_default_instance() {
    return reinterpret_cast<const CMD_3D_SC_Result*>(
               &_CMD_3D_SC_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMD_3D_SC_Result& a, CMD_3D_SC_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(CMD_3D_SC_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMD_3D_SC_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMD_3D_SC_Result* New() const final {
    return CreateMaybeMessage<CMD_3D_SC_Result>(nullptr);
  }

  CMD_3D_SC_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMD_3D_SC_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMD_3D_SC_Result& from);
  void MergeFrom(const CMD_3D_SC_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMD_3D_SC_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XCS.CMD_3D_SC_Result";
  }
  protected:
  explicit CMD_3D_SC_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_XCS_2eproto);
    return ::descriptor_table_XCS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIconFieldNumber = 1,
    kLineTypeFieldNumber = 2,
    kCaiShenCountFieldNumber = 3,
    kFreeCountFieldNumber = 4,
    kWinScoreFieldNumber = 6,
    kGameTypeFieldNumber = 5,
    kTempFieldNumber = 7,
    kLimitChipFieldNumber = 8,
    kLimitChip2FieldNumber = 10,
    kSuperRateFieldNumber = 11,
    kReTurnFieldNumber = 12,
    kJackpotFieldNumber = 13,
  };
  // repeated int32 icon = 1;
  int icon_size() const;
  private:
  int _internal_icon_size() const;
  public:
  void clear_icon();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_icon(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_icon() const;
  void _internal_add_icon(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_icon();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 icon(int index) const;
  void set_icon(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_icon(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      icon() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_icon();

  // repeated .XCS.LineType line_type = 2;
  int line_type_size() const;
  private:
  int _internal_line_type_size() const;
  public:
  void clear_line_type();
  ::XCS::LineType* mutable_line_type(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XCS::LineType >*
      mutable_line_type();
  private:
  const ::XCS::LineType& _internal_line_type(int index) const;
  ::XCS::LineType* _internal_add_line_type();
  public:
  const ::XCS::LineType& line_type(int index) const;
  ::XCS::LineType* add_line_type();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XCS::LineType >&
      line_type() const;

  // int32 cai_shen_count = 3;
  void clear_cai_shen_count();
  ::PROTOBUF_NAMESPACE_ID::int32 cai_shen_count() const;
  void set_cai_shen_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cai_shen_count() const;
  void _internal_set_cai_shen_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 free_count = 4;
  void clear_free_count();
  ::PROTOBUF_NAMESPACE_ID::int32 free_count() const;
  void set_free_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_free_count() const;
  void _internal_set_free_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 win_score = 6;
  void clear_win_score();
  ::PROTOBUF_NAMESPACE_ID::int64 win_score() const;
  void set_win_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_win_score() const;
  void _internal_set_win_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 game_type = 5;
  void clear_game_type();
  ::PROTOBUF_NAMESPACE_ID::int32 game_type() const;
  void set_game_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_type() const;
  void _internal_set_game_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 temp = 7;
  void clear_temp();
  ::PROTOBUF_NAMESPACE_ID::int32 temp() const;
  void set_temp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_temp() const;
  void _internal_set_temp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 limit_chip = 8;
  void clear_limit_chip();
  ::PROTOBUF_NAMESPACE_ID::int32 limit_chip() const;
  void set_limit_chip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_limit_chip() const;
  void _internal_set_limit_chip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 limit_chip2 = 10;
  void clear_limit_chip2();
  ::PROTOBUF_NAMESPACE_ID::int32 limit_chip2() const;
  void set_limit_chip2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_limit_chip2() const;
  void _internal_set_limit_chip2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 super_rate = 11;
  void clear_super_rate();
  ::PROTOBUF_NAMESPACE_ID::int32 super_rate() const;
  void set_super_rate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_super_rate() const;
  void _internal_set_super_rate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 re_turn = 12;
  void clear_re_turn();
  ::PROTOBUF_NAMESPACE_ID::int32 re_turn() const;
  void set_re_turn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_re_turn() const;
  void _internal_set_re_turn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 jackpot = 13;
  void clear_jackpot();
  ::PROTOBUF_NAMESPACE_ID::int64 jackpot() const;
  void set_jackpot(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_jackpot() const;
  void _internal_set_jackpot(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:XCS.CMD_3D_SC_Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > icon_;
  mutable std::atomic<int> _icon_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XCS::LineType > line_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 cai_shen_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 free_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 win_score_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 temp_;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_chip_;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_chip2_;
  ::PROTOBUF_NAMESPACE_ID::int32 super_rate_;
  ::PROTOBUF_NAMESPACE_ID::int32 re_turn_;
  ::PROTOBUF_NAMESPACE_ID::int64 jackpot_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_XCS_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SC_SceneInfo

// int32 cur_chip = 1;
inline void SC_SceneInfo::clear_cur_chip() {
  cur_chip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::_internal_cur_chip() const {
  return cur_chip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::cur_chip() const {
  // @@protoc_insertion_point(field_get:XCS.SC_SceneInfo.cur_chip)
  return _internal_cur_chip();
}
inline void SC_SceneInfo::_internal_set_cur_chip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cur_chip_ = value;
}
inline void SC_SceneInfo::set_cur_chip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cur_chip(value);
  // @@protoc_insertion_point(field_set:XCS.SC_SceneInfo.cur_chip)
}

// int32 free_count = 2;
inline void SC_SceneInfo::clear_free_count() {
  free_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::_internal_free_count() const {
  return free_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::free_count() const {
  // @@protoc_insertion_point(field_get:XCS.SC_SceneInfo.free_count)
  return _internal_free_count();
}
inline void SC_SceneInfo::_internal_set_free_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  free_count_ = value;
}
inline void SC_SceneInfo::set_free_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_free_count(value);
  // @@protoc_insertion_point(field_set:XCS.SC_SceneInfo.free_count)
}

// repeated int32 chip_list = 3;
inline int SC_SceneInfo::_internal_chip_list_size() const {
  return chip_list_.size();
}
inline int SC_SceneInfo::chip_list_size() const {
  return _internal_chip_list_size();
}
inline void SC_SceneInfo::clear_chip_list() {
  chip_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::_internal_chip_list(int index) const {
  return chip_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::chip_list(int index) const {
  // @@protoc_insertion_point(field_get:XCS.SC_SceneInfo.chip_list)
  return _internal_chip_list(index);
}
inline void SC_SceneInfo::set_chip_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  chip_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:XCS.SC_SceneInfo.chip_list)
}
inline void SC_SceneInfo::_internal_add_chip_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  chip_list_.Add(value);
}
inline void SC_SceneInfo::add_chip_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_chip_list(value);
  // @@protoc_insertion_point(field_add:XCS.SC_SceneInfo.chip_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SC_SceneInfo::_internal_chip_list() const {
  return chip_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SC_SceneInfo::chip_list() const {
  // @@protoc_insertion_point(field_list:XCS.SC_SceneInfo.chip_list)
  return _internal_chip_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SC_SceneInfo::_internal_mutable_chip_list() {
  return &chip_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SC_SceneInfo::mutable_chip_list() {
  // @@protoc_insertion_point(field_mutable_list:XCS.SC_SceneInfo.chip_list)
  return _internal_mutable_chip_list();
}

// repeated int32 line_rate = 4;
inline int SC_SceneInfo::_internal_line_rate_size() const {
  return line_rate_.size();
}
inline int SC_SceneInfo::line_rate_size() const {
  return _internal_line_rate_size();
}
inline void SC_SceneInfo::clear_line_rate() {
  line_rate_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::_internal_line_rate(int index) const {
  return line_rate_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::line_rate(int index) const {
  // @@protoc_insertion_point(field_get:XCS.SC_SceneInfo.line_rate)
  return _internal_line_rate(index);
}
inline void SC_SceneInfo::set_line_rate(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  line_rate_.Set(index, value);
  // @@protoc_insertion_point(field_set:XCS.SC_SceneInfo.line_rate)
}
inline void SC_SceneInfo::_internal_add_line_rate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  line_rate_.Add(value);
}
inline void SC_SceneInfo::add_line_rate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_line_rate(value);
  // @@protoc_insertion_point(field_add:XCS.SC_SceneInfo.line_rate)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SC_SceneInfo::_internal_line_rate() const {
  return line_rate_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SC_SceneInfo::line_rate() const {
  // @@protoc_insertion_point(field_list:XCS.SC_SceneInfo.line_rate)
  return _internal_line_rate();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SC_SceneInfo::_internal_mutable_line_rate() {
  return &line_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SC_SceneInfo::mutable_line_rate() {
  // @@protoc_insertion_point(field_mutable_list:XCS.SC_SceneInfo.line_rate)
  return _internal_mutable_line_rate();
}

// int64 god_score = 5;
inline void SC_SceneInfo::clear_god_score() {
  god_score_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SC_SceneInfo::_internal_god_score() const {
  return god_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SC_SceneInfo::god_score() const {
  // @@protoc_insertion_point(field_get:XCS.SC_SceneInfo.god_score)
  return _internal_god_score();
}
inline void SC_SceneInfo::_internal_set_god_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  god_score_ = value;
}
inline void SC_SceneInfo::set_god_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_god_score(value);
  // @@protoc_insertion_point(field_set:XCS.SC_SceneInfo.god_score)
}

// int32 limit_chip = 6;
inline void SC_SceneInfo::clear_limit_chip() {
  limit_chip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::_internal_limit_chip() const {
  return limit_chip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::limit_chip() const {
  // @@protoc_insertion_point(field_get:XCS.SC_SceneInfo.limit_chip)
  return _internal_limit_chip();
}
inline void SC_SceneInfo::_internal_set_limit_chip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limit_chip_ = value;
}
inline void SC_SceneInfo::set_limit_chip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_limit_chip(value);
  // @@protoc_insertion_point(field_set:XCS.SC_SceneInfo.limit_chip)
}

// int32 ilimit_chip = 7;
inline void SC_SceneInfo::clear_ilimit_chip() {
  ilimit_chip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::_internal_ilimit_chip() const {
  return ilimit_chip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::ilimit_chip() const {
  // @@protoc_insertion_point(field_get:XCS.SC_SceneInfo.ilimit_chip)
  return _internal_ilimit_chip();
}
inline void SC_SceneInfo::_internal_set_ilimit_chip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ilimit_chip_ = value;
}
inline void SC_SceneInfo::set_ilimit_chip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ilimit_chip(value);
  // @@protoc_insertion_point(field_set:XCS.SC_SceneInfo.ilimit_chip)
}

// int32 re_turn = 8;
inline void SC_SceneInfo::clear_re_turn() {
  re_turn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::_internal_re_turn() const {
  return re_turn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::re_turn() const {
  // @@protoc_insertion_point(field_get:XCS.SC_SceneInfo.re_turn)
  return _internal_re_turn();
}
inline void SC_SceneInfo::_internal_set_re_turn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  re_turn_ = value;
}
inline void SC_SceneInfo::set_re_turn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_re_turn(value);
  // @@protoc_insertion_point(field_set:XCS.SC_SceneInfo.re_turn)
}

// int64 jackpot = 10;
inline void SC_SceneInfo::clear_jackpot() {
  jackpot_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SC_SceneInfo::_internal_jackpot() const {
  return jackpot_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SC_SceneInfo::jackpot() const {
  // @@protoc_insertion_point(field_get:XCS.SC_SceneInfo.jackpot)
  return _internal_jackpot();
}
inline void SC_SceneInfo::_internal_set_jackpot(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  jackpot_ = value;
}
inline void SC_SceneInfo::set_jackpot(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_jackpot(value);
  // @@protoc_insertion_point(field_set:XCS.SC_SceneInfo.jackpot)
}

// -------------------------------------------------------------------

// LineType

// repeated int32 line_type = 1;
inline int LineType::_internal_line_type_size() const {
  return line_type_.size();
}
inline int LineType::line_type_size() const {
  return _internal_line_type_size();
}
inline void LineType::clear_line_type() {
  line_type_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LineType::_internal_line_type(int index) const {
  return line_type_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LineType::line_type(int index) const {
  // @@protoc_insertion_point(field_get:XCS.LineType.line_type)
  return _internal_line_type(index);
}
inline void LineType::set_line_type(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  line_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:XCS.LineType.line_type)
}
inline void LineType::_internal_add_line_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  line_type_.Add(value);
}
inline void LineType::add_line_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_line_type(value);
  // @@protoc_insertion_point(field_add:XCS.LineType.line_type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
LineType::_internal_line_type() const {
  return line_type_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
LineType::line_type() const {
  // @@protoc_insertion_point(field_list:XCS.LineType.line_type)
  return _internal_line_type();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
LineType::_internal_mutable_line_type() {
  return &line_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
LineType::mutable_line_type() {
  // @@protoc_insertion_point(field_mutable_list:XCS.LineType.line_type)
  return _internal_mutable_line_type();
}

// -------------------------------------------------------------------

// CMD_3D_SC_Result

// repeated int32 icon = 1;
inline int CMD_3D_SC_Result::_internal_icon_size() const {
  return icon_.size();
}
inline int CMD_3D_SC_Result::icon_size() const {
  return _internal_icon_size();
}
inline void CMD_3D_SC_Result::clear_icon() {
  icon_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_3D_SC_Result::_internal_icon(int index) const {
  return icon_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_3D_SC_Result::icon(int index) const {
  // @@protoc_insertion_point(field_get:XCS.CMD_3D_SC_Result.icon)
  return _internal_icon(index);
}
inline void CMD_3D_SC_Result::set_icon(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  icon_.Set(index, value);
  // @@protoc_insertion_point(field_set:XCS.CMD_3D_SC_Result.icon)
}
inline void CMD_3D_SC_Result::_internal_add_icon(::PROTOBUF_NAMESPACE_ID::int32 value) {
  icon_.Add(value);
}
inline void CMD_3D_SC_Result::add_icon(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_icon(value);
  // @@protoc_insertion_point(field_add:XCS.CMD_3D_SC_Result.icon)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMD_3D_SC_Result::_internal_icon() const {
  return icon_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMD_3D_SC_Result::icon() const {
  // @@protoc_insertion_point(field_list:XCS.CMD_3D_SC_Result.icon)
  return _internal_icon();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMD_3D_SC_Result::_internal_mutable_icon() {
  return &icon_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMD_3D_SC_Result::mutable_icon() {
  // @@protoc_insertion_point(field_mutable_list:XCS.CMD_3D_SC_Result.icon)
  return _internal_mutable_icon();
}

// repeated .XCS.LineType line_type = 2;
inline int CMD_3D_SC_Result::_internal_line_type_size() const {
  return line_type_.size();
}
inline int CMD_3D_SC_Result::line_type_size() const {
  return _internal_line_type_size();
}
inline void CMD_3D_SC_Result::clear_line_type() {
  line_type_.Clear();
}
inline ::XCS::LineType* CMD_3D_SC_Result::mutable_line_type(int index) {
  // @@protoc_insertion_point(field_mutable:XCS.CMD_3D_SC_Result.line_type)
  return line_type_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XCS::LineType >*
CMD_3D_SC_Result::mutable_line_type() {
  // @@protoc_insertion_point(field_mutable_list:XCS.CMD_3D_SC_Result.line_type)
  return &line_type_;
}
inline const ::XCS::LineType& CMD_3D_SC_Result::_internal_line_type(int index) const {
  return line_type_.Get(index);
}
inline const ::XCS::LineType& CMD_3D_SC_Result::line_type(int index) const {
  // @@protoc_insertion_point(field_get:XCS.CMD_3D_SC_Result.line_type)
  return _internal_line_type(index);
}
inline ::XCS::LineType* CMD_3D_SC_Result::_internal_add_line_type() {
  return line_type_.Add();
}
inline ::XCS::LineType* CMD_3D_SC_Result::add_line_type() {
  // @@protoc_insertion_point(field_add:XCS.CMD_3D_SC_Result.line_type)
  return _internal_add_line_type();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XCS::LineType >&
CMD_3D_SC_Result::line_type() const {
  // @@protoc_insertion_point(field_list:XCS.CMD_3D_SC_Result.line_type)
  return line_type_;
}

// int32 cai_shen_count = 3;
inline void CMD_3D_SC_Result::clear_cai_shen_count() {
  cai_shen_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_3D_SC_Result::_internal_cai_shen_count() const {
  return cai_shen_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_3D_SC_Result::cai_shen_count() const {
  // @@protoc_insertion_point(field_get:XCS.CMD_3D_SC_Result.cai_shen_count)
  return _internal_cai_shen_count();
}
inline void CMD_3D_SC_Result::_internal_set_cai_shen_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cai_shen_count_ = value;
}
inline void CMD_3D_SC_Result::set_cai_shen_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cai_shen_count(value);
  // @@protoc_insertion_point(field_set:XCS.CMD_3D_SC_Result.cai_shen_count)
}

// int32 free_count = 4;
inline void CMD_3D_SC_Result::clear_free_count() {
  free_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_3D_SC_Result::_internal_free_count() const {
  return free_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_3D_SC_Result::free_count() const {
  // @@protoc_insertion_point(field_get:XCS.CMD_3D_SC_Result.free_count)
  return _internal_free_count();
}
inline void CMD_3D_SC_Result::_internal_set_free_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  free_count_ = value;
}
inline void CMD_3D_SC_Result::set_free_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_free_count(value);
  // @@protoc_insertion_point(field_set:XCS.CMD_3D_SC_Result.free_count)
}

// int32 game_type = 5;
inline void CMD_3D_SC_Result::clear_game_type() {
  game_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_3D_SC_Result::_internal_game_type() const {
  return game_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_3D_SC_Result::game_type() const {
  // @@protoc_insertion_point(field_get:XCS.CMD_3D_SC_Result.game_type)
  return _internal_game_type();
}
inline void CMD_3D_SC_Result::_internal_set_game_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  game_type_ = value;
}
inline void CMD_3D_SC_Result::set_game_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_type(value);
  // @@protoc_insertion_point(field_set:XCS.CMD_3D_SC_Result.game_type)
}

// int64 win_score = 6;
inline void CMD_3D_SC_Result::clear_win_score() {
  win_score_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CMD_3D_SC_Result::_internal_win_score() const {
  return win_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CMD_3D_SC_Result::win_score() const {
  // @@protoc_insertion_point(field_get:XCS.CMD_3D_SC_Result.win_score)
  return _internal_win_score();
}
inline void CMD_3D_SC_Result::_internal_set_win_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  win_score_ = value;
}
inline void CMD_3D_SC_Result::set_win_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_win_score(value);
  // @@protoc_insertion_point(field_set:XCS.CMD_3D_SC_Result.win_score)
}

// int32 temp = 7;
inline void CMD_3D_SC_Result::clear_temp() {
  temp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_3D_SC_Result::_internal_temp() const {
  return temp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_3D_SC_Result::temp() const {
  // @@protoc_insertion_point(field_get:XCS.CMD_3D_SC_Result.temp)
  return _internal_temp();
}
inline void CMD_3D_SC_Result::_internal_set_temp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  temp_ = value;
}
inline void CMD_3D_SC_Result::set_temp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_temp(value);
  // @@protoc_insertion_point(field_set:XCS.CMD_3D_SC_Result.temp)
}

// int32 limit_chip = 8;
inline void CMD_3D_SC_Result::clear_limit_chip() {
  limit_chip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_3D_SC_Result::_internal_limit_chip() const {
  return limit_chip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_3D_SC_Result::limit_chip() const {
  // @@protoc_insertion_point(field_get:XCS.CMD_3D_SC_Result.limit_chip)
  return _internal_limit_chip();
}
inline void CMD_3D_SC_Result::_internal_set_limit_chip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limit_chip_ = value;
}
inline void CMD_3D_SC_Result::set_limit_chip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_limit_chip(value);
  // @@protoc_insertion_point(field_set:XCS.CMD_3D_SC_Result.limit_chip)
}

// int32 limit_chip2 = 10;
inline void CMD_3D_SC_Result::clear_limit_chip2() {
  limit_chip2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_3D_SC_Result::_internal_limit_chip2() const {
  return limit_chip2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_3D_SC_Result::limit_chip2() const {
  // @@protoc_insertion_point(field_get:XCS.CMD_3D_SC_Result.limit_chip2)
  return _internal_limit_chip2();
}
inline void CMD_3D_SC_Result::_internal_set_limit_chip2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limit_chip2_ = value;
}
inline void CMD_3D_SC_Result::set_limit_chip2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_limit_chip2(value);
  // @@protoc_insertion_point(field_set:XCS.CMD_3D_SC_Result.limit_chip2)
}

// int32 super_rate = 11;
inline void CMD_3D_SC_Result::clear_super_rate() {
  super_rate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_3D_SC_Result::_internal_super_rate() const {
  return super_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_3D_SC_Result::super_rate() const {
  // @@protoc_insertion_point(field_get:XCS.CMD_3D_SC_Result.super_rate)
  return _internal_super_rate();
}
inline void CMD_3D_SC_Result::_internal_set_super_rate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  super_rate_ = value;
}
inline void CMD_3D_SC_Result::set_super_rate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_super_rate(value);
  // @@protoc_insertion_point(field_set:XCS.CMD_3D_SC_Result.super_rate)
}

// int32 re_turn = 12;
inline void CMD_3D_SC_Result::clear_re_turn() {
  re_turn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_3D_SC_Result::_internal_re_turn() const {
  return re_turn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_3D_SC_Result::re_turn() const {
  // @@protoc_insertion_point(field_get:XCS.CMD_3D_SC_Result.re_turn)
  return _internal_re_turn();
}
inline void CMD_3D_SC_Result::_internal_set_re_turn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  re_turn_ = value;
}
inline void CMD_3D_SC_Result::set_re_turn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_re_turn(value);
  // @@protoc_insertion_point(field_set:XCS.CMD_3D_SC_Result.re_turn)
}

// int64 jackpot = 13;
inline void CMD_3D_SC_Result::clear_jackpot() {
  jackpot_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CMD_3D_SC_Result::_internal_jackpot() const {
  return jackpot_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CMD_3D_SC_Result::jackpot() const {
  // @@protoc_insertion_point(field_get:XCS.CMD_3D_SC_Result.jackpot)
  return _internal_jackpot();
}
inline void CMD_3D_SC_Result::_internal_set_jackpot(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  jackpot_ = value;
}
inline void CMD_3D_SC_Result::set_jackpot(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_jackpot(value);
  // @@protoc_insertion_point(field_set:XCS.CMD_3D_SC_Result.jackpot)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace XCS

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::XCS::EMsgIDXCS> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XCS::EMsgIDXCS>() {
  return ::XCS::EMsgIDXCS_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_XCS_2eproto
