// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChinesePoker.proto

#include "ChinesePoker.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ChinesePoker_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CPCardResult_ChinesePoker_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ChinesePoker_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CPCardStatus_ChinesePoker_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ChinesePoker_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CPMsgHandCards_ChinesePoker_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ChinesePoker_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CPMsgPlayerInfo_ChinesePoker_2eproto;
namespace ChinesePoker {
class CPMsgTableStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CPMsgTableState> _instance;
} _CPMsgTableState_default_instance_;
class CPMsgHandCardsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CPMsgHandCards> _instance;
} _CPMsgHandCards_default_instance_;
class CPCardStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CPCardStatus> _instance;
} _CPCardStatus_default_instance_;
class CPMsgPlayerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CPMsgPlayerInfo> _instance;
} _CPMsgPlayerInfo_default_instance_;
class CPMsgSceneInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CPMsgSceneInfo> _instance;
} _CPMsgSceneInfo_default_instance_;
class CPMsgGameStartRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CPMsgGameStartResp> _instance;
} _CPMsgGameStartResp_default_instance_;
class CPMsgActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CPMsgAction> _instance;
} _CPMsgAction_default_instance_;
class CPMsgNotifyActionRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CPMsgNotifyActionResp> _instance;
} _CPMsgNotifyActionResp_default_instance_;
class CPCardResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CPCardResult> _instance;
} _CPCardResult_default_instance_;
class CPMsgGameResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CPMsgGameResult> _instance;
} _CPMsgGameResult_default_instance_;
}  // namespace ChinesePoker
static void InitDefaultsscc_info_CPCardResult_ChinesePoker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChinesePoker::_CPCardResult_default_instance_;
    new (ptr) ::ChinesePoker::CPCardResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CPCardResult_ChinesePoker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CPCardResult_ChinesePoker_2eproto}, {}};

static void InitDefaultsscc_info_CPCardStatus_ChinesePoker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChinesePoker::_CPCardStatus_default_instance_;
    new (ptr) ::ChinesePoker::CPCardStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CPCardStatus_ChinesePoker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CPCardStatus_ChinesePoker_2eproto}, {}};

static void InitDefaultsscc_info_CPMsgAction_ChinesePoker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChinesePoker::_CPMsgAction_default_instance_;
    new (ptr) ::ChinesePoker::CPMsgAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CPMsgAction_ChinesePoker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CPMsgAction_ChinesePoker_2eproto}, {}};

static void InitDefaultsscc_info_CPMsgGameResult_ChinesePoker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChinesePoker::_CPMsgGameResult_default_instance_;
    new (ptr) ::ChinesePoker::CPMsgGameResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CPMsgGameResult_ChinesePoker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CPMsgGameResult_ChinesePoker_2eproto}, {
      &scc_info_CPCardStatus_ChinesePoker_2eproto.base,
      &scc_info_CPCardResult_ChinesePoker_2eproto.base,
      &scc_info_CPMsgHandCards_ChinesePoker_2eproto.base,}};

static void InitDefaultsscc_info_CPMsgGameStartResp_ChinesePoker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChinesePoker::_CPMsgGameStartResp_default_instance_;
    new (ptr) ::ChinesePoker::CPMsgGameStartResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CPMsgGameStartResp_ChinesePoker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CPMsgGameStartResp_ChinesePoker_2eproto}, {
      &scc_info_CPMsgHandCards_ChinesePoker_2eproto.base,
      &scc_info_CPCardStatus_ChinesePoker_2eproto.base,}};

static void InitDefaultsscc_info_CPMsgHandCards_ChinesePoker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChinesePoker::_CPMsgHandCards_default_instance_;
    new (ptr) ::ChinesePoker::CPMsgHandCards();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CPMsgHandCards_ChinesePoker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CPMsgHandCards_ChinesePoker_2eproto}, {}};

static void InitDefaultsscc_info_CPMsgNotifyActionResp_ChinesePoker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChinesePoker::_CPMsgNotifyActionResp_default_instance_;
    new (ptr) ::ChinesePoker::CPMsgNotifyActionResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CPMsgNotifyActionResp_ChinesePoker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CPMsgNotifyActionResp_ChinesePoker_2eproto}, {
      &scc_info_CPCardStatus_ChinesePoker_2eproto.base,}};

static void InitDefaultsscc_info_CPMsgPlayerInfo_ChinesePoker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChinesePoker::_CPMsgPlayerInfo_default_instance_;
    new (ptr) ::ChinesePoker::CPMsgPlayerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CPMsgPlayerInfo_ChinesePoker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CPMsgPlayerInfo_ChinesePoker_2eproto}, {
      &scc_info_CPCardStatus_ChinesePoker_2eproto.base,
      &scc_info_CPMsgHandCards_ChinesePoker_2eproto.base,}};

static void InitDefaultsscc_info_CPMsgSceneInfo_ChinesePoker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChinesePoker::_CPMsgSceneInfo_default_instance_;
    new (ptr) ::ChinesePoker::CPMsgSceneInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CPMsgSceneInfo_ChinesePoker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CPMsgSceneInfo_ChinesePoker_2eproto}, {
      &scc_info_CPMsgPlayerInfo_ChinesePoker_2eproto.base,}};

static void InitDefaultsscc_info_CPMsgTableState_ChinesePoker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChinesePoker::_CPMsgTableState_default_instance_;
    new (ptr) ::ChinesePoker::CPMsgTableState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CPMsgTableState_ChinesePoker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CPMsgTableState_ChinesePoker_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ChinesePoker_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ChinesePoker_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ChinesePoker_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ChinesePoker_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPMsgTableState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPMsgTableState, state_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPMsgTableState, out_ime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPMsgHandCards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPMsgHandCards, chair_id_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPMsgHandCards, cards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPCardStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPCardStatus, chair_id_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPCardStatus, type_first_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPCardStatus, type_sencond_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPCardStatus, type_third_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPCardStatus, status_first_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPCardStatus, status_sencond_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPCardStatus, status_third_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPCardStatus, add_first_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPCardStatus, add_sencond_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPCardStatus, add_third_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPMsgPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPMsgPlayerInfo, chair_id_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPMsgPlayerInfo, play_status_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPMsgPlayerInfo, card_status_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPMsgPlayerInfo, gold_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPMsgPlayerInfo, win_gold_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPMsgPlayerInfo, handls_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPMsgSceneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPMsgSceneInfo, cell_score_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPMsgSceneInfo, table_state_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPMsgSceneInfo, out_time_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPMsgSceneInfo, total_time_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPMsgSceneInfo, player_infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPMsgGameStartResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPMsgGameStartResp, handls_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPMsgGameStartResp, card_status_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPMsgGameStartResp, special_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPMsgAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPMsgAction, type_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPMsgAction, pos1_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPMsgAction, pos2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPMsgNotifyActionResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPMsgNotifyActionResp, card_status_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPMsgNotifyActionResp, special_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPCardResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPCardResult, chair_id_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPCardResult, score_first_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPCardResult, score_sencond_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPCardResult, score_third_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPCardResult, win_first_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPCardResult, win_sencond_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPCardResult, win_third_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPCardResult, boom_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPCardResult, score_total_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPCardResult, gunk_chair_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPMsgGameResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPMsgGameResult, game_tax_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPMsgGameResult, game_score_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPMsgGameResult, card_status_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPMsgGameResult, special_type_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPMsgGameResult, card_result_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPMsgGameResult, player_hands_),
  PROTOBUF_FIELD_OFFSET(::ChinesePoker::CPMsgGameResult, all_gunk_chair_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ChinesePoker::CPMsgTableState)},
  { 7, -1, sizeof(::ChinesePoker::CPMsgHandCards)},
  { 14, -1, sizeof(::ChinesePoker::CPCardStatus)},
  { 29, -1, sizeof(::ChinesePoker::CPMsgPlayerInfo)},
  { 40, -1, sizeof(::ChinesePoker::CPMsgSceneInfo)},
  { 50, -1, sizeof(::ChinesePoker::CPMsgGameStartResp)},
  { 58, -1, sizeof(::ChinesePoker::CPMsgAction)},
  { 66, -1, sizeof(::ChinesePoker::CPMsgNotifyActionResp)},
  { 73, -1, sizeof(::ChinesePoker::CPCardResult)},
  { 88, -1, sizeof(::ChinesePoker::CPMsgGameResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChinesePoker::_CPMsgTableState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChinesePoker::_CPMsgHandCards_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChinesePoker::_CPCardStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChinesePoker::_CPMsgPlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChinesePoker::_CPMsgSceneInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChinesePoker::_CPMsgGameStartResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChinesePoker::_CPMsgAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChinesePoker::_CPMsgNotifyActionResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChinesePoker::_CPCardResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChinesePoker::_CPMsgGameResult_default_instance_),
};

const char descriptor_table_protodef_ChinesePoker_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022ChinesePoker.proto\022\014ChinesePoker\"1\n\017CP"
  "MsgTableState\022\r\n\005state\030\001 \001(\005\022\017\n\007out_ime\030"
  "\002 \001(\005\"1\n\016CPMsgHandCards\022\020\n\010chair_id\030\001 \001("
  "\005\022\r\n\005cards\030\002 \003(\005\"\335\001\n\014CPCardStatus\022\020\n\010cha"
  "ir_id\030\001 \001(\005\022\022\n\ntype_first\030\002 \001(\005\022\024\n\014type_"
  "sencond\030\003 \001(\005\022\022\n\ntype_third\030\004 \001(\005\022\024\n\014sta"
  "tus_first\030\005 \001(\005\022\026\n\016status_sencond\030\006 \001(\005\022"
  "\024\n\014status_third\030\007 \001(\005\022\021\n\tadd_first\030\010 \001(\005"
  "\022\023\n\013add_sencond\030\t \001(\005\022\021\n\tadd_third\030\n \001(\005"
  "\"\267\001\n\017CPMsgPlayerInfo\022\020\n\010chair_id\030\001 \001(\005\022\023"
  "\n\013play_status\030\002 \001(\005\022/\n\013card_status\030\003 \001(\013"
  "2\032.ChinesePoker.CPCardStatus\022\014\n\004gold\030\004 \001"
  "(\003\022\020\n\010win_gold\030\005 \001(\003\022,\n\006handls\030\006 \001(\0132\034.C"
  "hinesePoker.CPMsgHandCards\"\224\001\n\016CPMsgScen"
  "eInfo\022\022\n\ncell_score\030\001 \001(\003\022\023\n\013table_state"
  "\030\002 \001(\005\022\020\n\010out_time\030\003 \001(\005\022\022\n\ntotal_time\030\004"
  " \001(\005\0223\n\014player_infos\030\006 \003(\0132\035.ChinesePoke"
  "r.CPMsgPlayerInfo\"\211\001\n\022CPMsgGameStartResp"
  "\022,\n\006handls\030\001 \001(\0132\034.ChinesePoker.CPMsgHan"
  "dCards\022/\n\013card_status\030\002 \001(\0132\032.ChinesePok"
  "er.CPCardStatus\022\024\n\014special_type\030\003 \001(\005\"7\n"
  "\013CPMsgAction\022\014\n\004type\030\001 \001(\005\022\014\n\004pos1\030\002 \001(\003"
  "\022\014\n\004pos2\030\003 \001(\003\"^\n\025CPMsgNotifyActionResp\022"
  "/\n\013card_status\030\001 \001(\0132\032.ChinesePoker.CPCa"
  "rdStatus\022\024\n\014special_type\030\002 \001(\005\"\323\001\n\014CPCar"
  "dResult\022\020\n\010chair_id\030\001 \001(\005\022\023\n\013score_first"
  "\030\002 \001(\003\022\025\n\rscore_sencond\030\003 \001(\003\022\023\n\013score_t"
  "hird\030\004 \001(\003\022\021\n\twin_first\030\005 \001(\010\022\023\n\013win_sen"
  "cond\030\006 \001(\010\022\021\n\twin_third\030\007 \001(\010\022\014\n\004boom\030\010 "
  "\001(\010\022\023\n\013score_total\030\t \001(\003\022\022\n\ngunk_chair\030\n"
  " \003(\005\"\373\001\n\017CPMsgGameResult\022\020\n\010game_tax\030\001 \001"
  "(\005\022\022\n\ngame_score\030\002 \003(\003\022/\n\013card_status\030\003 "
  "\003(\0132\032.ChinesePoker.CPCardStatus\022\024\n\014speci"
  "al_type\030\004 \003(\005\022/\n\013card_result\030\005 \003(\0132\032.Chi"
  "nesePoker.CPCardResult\0222\n\014player_hands\030\006"
  " \003(\0132\034.ChinesePoker.CPMsgHandCards\022\026\n\016al"
  "l_gunk_chair\030\007 \001(\005*T\n\014ECPGameState\022\017\n\013GS"
  "_TP_READY\020\000\022\016\n\nGS_TP_DEAL\020\001\022\021\n\rGS_TP_PLA"
  "YING\020\002\022\020\n\014GS_TP_RESULT\020\003*K\n\016ECPPlayerSta"
  "te\022\014\n\010PS_READY\020\000\022\013\n\007PS_PLAY\020\001\022\016\n\nPS_CONF"
  "IRM\020\002\022\016\n\nPS_TIMEOUT\020\003*\205\002\n\013ECPCardType\022\r\n"
  "\tCT_SINGLE\020\000\022\r\n\tCT_DOUBLE\020\001\022\016\n\nCT_DOUBLE"
  "S\020\002\022\014\n\010CT_THREE\020\003\022\t\n\005CT_SZ\020\004\022\t\n\005CT_TH\020\005\022"
  "\014\n\010CT_HU_LU\020\006\022\013\n\007CT_FOUR\020\007\022\n\n\006CT_THS\020\010\022\014"
  "\n\010CT_HJTHS\020\t\022\022\n\016CT_SPECIAL_STH\020\n\022\022\n\016CT_S"
  "PECIAL_SSZ\020\013\022\022\n\016CT_SPECIAL_LDB\020\014\022\022\n\016CT_S"
  "PECIAL_YTL\020\r\022\023\n\017CT_SPECIAL_ZZQL\020\016\022\n\n\006CT_"
  "MAX\020\017*\203\003\n\017ECPMsgIDSubGame\022\025\n\021MsgIDSubGam"
  "e_Null\020\000\022\036\n\032MsgIDSubGame_GameStartResp\020\001"
  "\022\027\n\023MsgIDSubGame_Action\020\002\022!\n\035MsgIDSubGam"
  "e_NotifyActionResp\020\003\022\030\n\024MsgIDSubGame_Con"
  "firm\020\004\022\034\n\030MsgIDSubGame_ConfirmResp\020\005\022 \n\034"
  "MsgIDSubGame_NotifyStateResp\020\006\022\037\n\033MsgIDS"
  "ubGame_GameResultResp\020\007\022\036\n\032MsgIDSubGame_"
  "StartTimeResp\020\010\022\035\n\031MsgIDSubGame_TimeOutR"
  "eady\020\t\022!\n\035MsgIDSubGame_TimeOutReadyResp\020"
  "\n\022 \n\034MsgIDSubGame_TimeOutKickResp\020\013b\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ChinesePoker_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ChinesePoker_2eproto_sccs[10] = {
  &scc_info_CPCardResult_ChinesePoker_2eproto.base,
  &scc_info_CPCardStatus_ChinesePoker_2eproto.base,
  &scc_info_CPMsgAction_ChinesePoker_2eproto.base,
  &scc_info_CPMsgGameResult_ChinesePoker_2eproto.base,
  &scc_info_CPMsgGameStartResp_ChinesePoker_2eproto.base,
  &scc_info_CPMsgHandCards_ChinesePoker_2eproto.base,
  &scc_info_CPMsgNotifyActionResp_ChinesePoker_2eproto.base,
  &scc_info_CPMsgPlayerInfo_ChinesePoker_2eproto.base,
  &scc_info_CPMsgSceneInfo_ChinesePoker_2eproto.base,
  &scc_info_CPMsgTableState_ChinesePoker_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ChinesePoker_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ChinesePoker_2eproto = {
  false, false, descriptor_table_protodef_ChinesePoker_2eproto, "ChinesePoker.proto", 2283,
  &descriptor_table_ChinesePoker_2eproto_once, descriptor_table_ChinesePoker_2eproto_sccs, descriptor_table_ChinesePoker_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_ChinesePoker_2eproto::offsets,
  file_level_metadata_ChinesePoker_2eproto, 10, file_level_enum_descriptors_ChinesePoker_2eproto, file_level_service_descriptors_ChinesePoker_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ChinesePoker_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ChinesePoker_2eproto)), true);
namespace ChinesePoker {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECPGameState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ChinesePoker_2eproto);
  return file_level_enum_descriptors_ChinesePoker_2eproto[0];
}
bool ECPGameState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECPPlayerState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ChinesePoker_2eproto);
  return file_level_enum_descriptors_ChinesePoker_2eproto[1];
}
bool ECPPlayerState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECPCardType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ChinesePoker_2eproto);
  return file_level_enum_descriptors_ChinesePoker_2eproto[2];
}
bool ECPCardType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECPMsgIDSubGame_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ChinesePoker_2eproto);
  return file_level_enum_descriptors_ChinesePoker_2eproto[3];
}
bool ECPMsgIDSubGame_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CPMsgTableState::_Internal {
 public:
};

CPMsgTableState::CPMsgTableState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChinesePoker.CPMsgTableState)
}
CPMsgTableState::CPMsgTableState(const CPMsgTableState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&out_ime_) -
    reinterpret_cast<char*>(&state_)) + sizeof(out_ime_));
  // @@protoc_insertion_point(copy_constructor:ChinesePoker.CPMsgTableState)
}

void CPMsgTableState::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&state_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&out_ime_) -
      reinterpret_cast<char*>(&state_)) + sizeof(out_ime_));
}

CPMsgTableState::~CPMsgTableState() {
  // @@protoc_insertion_point(destructor:ChinesePoker.CPMsgTableState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPMsgTableState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPMsgTableState::ArenaDtor(void* object) {
  CPMsgTableState* _this = reinterpret_cast< CPMsgTableState* >(object);
  (void)_this;
}
void CPMsgTableState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPMsgTableState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPMsgTableState& CPMsgTableState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CPMsgTableState_ChinesePoker_2eproto.base);
  return *internal_default_instance();
}


void CPMsgTableState::Clear() {
// @@protoc_insertion_point(message_clear_start:ChinesePoker.CPMsgTableState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&out_ime_) -
      reinterpret_cast<char*>(&state_)) + sizeof(out_ime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPMsgTableState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 out_ime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          out_ime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPMsgTableState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChinesePoker.CPMsgTableState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  // int32 out_ime = 2;
  if (this->out_ime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_out_ime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChinesePoker.CPMsgTableState)
  return target;
}

size_t CPMsgTableState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChinesePoker.CPMsgTableState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // int32 out_ime = 2;
  if (this->out_ime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_out_ime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPMsgTableState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChinesePoker.CPMsgTableState)
  GOOGLE_DCHECK_NE(&from, this);
  const CPMsgTableState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPMsgTableState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChinesePoker.CPMsgTableState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChinesePoker.CPMsgTableState)
    MergeFrom(*source);
  }
}

void CPMsgTableState::MergeFrom(const CPMsgTableState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChinesePoker.CPMsgTableState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.out_ime() != 0) {
    _internal_set_out_ime(from._internal_out_ime());
  }
}

void CPMsgTableState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChinesePoker.CPMsgTableState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPMsgTableState::CopyFrom(const CPMsgTableState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChinesePoker.CPMsgTableState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPMsgTableState::IsInitialized() const {
  return true;
}

void CPMsgTableState::InternalSwap(CPMsgTableState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPMsgTableState, out_ime_)
      + sizeof(CPMsgTableState::out_ime_)
      - PROTOBUF_FIELD_OFFSET(CPMsgTableState, state_)>(
          reinterpret_cast<char*>(&state_),
          reinterpret_cast<char*>(&other->state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPMsgTableState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPMsgHandCards::_Internal {
 public:
};

CPMsgHandCards::CPMsgHandCards(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cards_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChinesePoker.CPMsgHandCards)
}
CPMsgHandCards::CPMsgHandCards(const CPMsgHandCards& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cards_(from.cards_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chair_id_ = from.chair_id_;
  // @@protoc_insertion_point(copy_constructor:ChinesePoker.CPMsgHandCards)
}

void CPMsgHandCards::SharedCtor() {
  chair_id_ = 0;
}

CPMsgHandCards::~CPMsgHandCards() {
  // @@protoc_insertion_point(destructor:ChinesePoker.CPMsgHandCards)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPMsgHandCards::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPMsgHandCards::ArenaDtor(void* object) {
  CPMsgHandCards* _this = reinterpret_cast< CPMsgHandCards* >(object);
  (void)_this;
}
void CPMsgHandCards::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPMsgHandCards::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPMsgHandCards& CPMsgHandCards::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CPMsgHandCards_ChinesePoker_2eproto.base);
  return *internal_default_instance();
}


void CPMsgHandCards::Clear() {
// @@protoc_insertion_point(message_clear_start:ChinesePoker.CPMsgHandCards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cards_.Clear();
  chair_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPMsgHandCards::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 cards = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_cards(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_cards(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPMsgHandCards::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChinesePoker.CPMsgHandCards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // repeated int32 cards = 2;
  {
    int byte_size = _cards_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_cards(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChinesePoker.CPMsgHandCards)
  return target;
}

size_t CPMsgHandCards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChinesePoker.CPMsgHandCards)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 cards = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->cards_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _cards_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPMsgHandCards::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChinesePoker.CPMsgHandCards)
  GOOGLE_DCHECK_NE(&from, this);
  const CPMsgHandCards* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPMsgHandCards>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChinesePoker.CPMsgHandCards)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChinesePoker.CPMsgHandCards)
    MergeFrom(*source);
  }
}

void CPMsgHandCards::MergeFrom(const CPMsgHandCards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChinesePoker.CPMsgHandCards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cards_.MergeFrom(from.cards_);
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
}

void CPMsgHandCards::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChinesePoker.CPMsgHandCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPMsgHandCards::CopyFrom(const CPMsgHandCards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChinesePoker.CPMsgHandCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPMsgHandCards::IsInitialized() const {
  return true;
}

void CPMsgHandCards::InternalSwap(CPMsgHandCards* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cards_.InternalSwap(&other->cards_);
  swap(chair_id_, other->chair_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPMsgHandCards::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPCardStatus::_Internal {
 public:
};

CPCardStatus::CPCardStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChinesePoker.CPCardStatus)
}
CPCardStatus::CPCardStatus(const CPCardStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&add_third_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(add_third_));
  // @@protoc_insertion_point(copy_constructor:ChinesePoker.CPCardStatus)
}

void CPCardStatus::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&add_third_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(add_third_));
}

CPCardStatus::~CPCardStatus() {
  // @@protoc_insertion_point(destructor:ChinesePoker.CPCardStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPCardStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPCardStatus::ArenaDtor(void* object) {
  CPCardStatus* _this = reinterpret_cast< CPCardStatus* >(object);
  (void)_this;
}
void CPCardStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPCardStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPCardStatus& CPCardStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CPCardStatus_ChinesePoker_2eproto.base);
  return *internal_default_instance();
}


void CPCardStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ChinesePoker.CPCardStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&add_third_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(add_third_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPCardStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type_first = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_first_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type_sencond = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_sencond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type_third = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          type_third_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status_first = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          status_first_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status_sencond = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          status_sencond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status_third = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          status_third_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 add_first = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          add_first_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 add_sencond = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          add_sencond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 add_third = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          add_third_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPCardStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChinesePoker.CPCardStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int32 type_first = 2;
  if (this->type_first() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type_first(), target);
  }

  // int32 type_sencond = 3;
  if (this->type_sencond() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_type_sencond(), target);
  }

  // int32 type_third = 4;
  if (this->type_third() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_type_third(), target);
  }

  // int32 status_first = 5;
  if (this->status_first() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_status_first(), target);
  }

  // int32 status_sencond = 6;
  if (this->status_sencond() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_status_sencond(), target);
  }

  // int32 status_third = 7;
  if (this->status_third() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_status_third(), target);
  }

  // int32 add_first = 8;
  if (this->add_first() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_add_first(), target);
  }

  // int32 add_sencond = 9;
  if (this->add_sencond() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_add_sencond(), target);
  }

  // int32 add_third = 10;
  if (this->add_third() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_add_third(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChinesePoker.CPCardStatus)
  return target;
}

size_t CPCardStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChinesePoker.CPCardStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 type_first = 2;
  if (this->type_first() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type_first());
  }

  // int32 type_sencond = 3;
  if (this->type_sencond() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type_sencond());
  }

  // int32 type_third = 4;
  if (this->type_third() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type_third());
  }

  // int32 status_first = 5;
  if (this->status_first() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status_first());
  }

  // int32 status_sencond = 6;
  if (this->status_sencond() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status_sencond());
  }

  // int32 status_third = 7;
  if (this->status_third() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status_third());
  }

  // int32 add_first = 8;
  if (this->add_first() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_add_first());
  }

  // int32 add_sencond = 9;
  if (this->add_sencond() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_add_sencond());
  }

  // int32 add_third = 10;
  if (this->add_third() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_add_third());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPCardStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChinesePoker.CPCardStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CPCardStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPCardStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChinesePoker.CPCardStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChinesePoker.CPCardStatus)
    MergeFrom(*source);
  }
}

void CPCardStatus::MergeFrom(const CPCardStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChinesePoker.CPCardStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.type_first() != 0) {
    _internal_set_type_first(from._internal_type_first());
  }
  if (from.type_sencond() != 0) {
    _internal_set_type_sencond(from._internal_type_sencond());
  }
  if (from.type_third() != 0) {
    _internal_set_type_third(from._internal_type_third());
  }
  if (from.status_first() != 0) {
    _internal_set_status_first(from._internal_status_first());
  }
  if (from.status_sencond() != 0) {
    _internal_set_status_sencond(from._internal_status_sencond());
  }
  if (from.status_third() != 0) {
    _internal_set_status_third(from._internal_status_third());
  }
  if (from.add_first() != 0) {
    _internal_set_add_first(from._internal_add_first());
  }
  if (from.add_sencond() != 0) {
    _internal_set_add_sencond(from._internal_add_sencond());
  }
  if (from.add_third() != 0) {
    _internal_set_add_third(from._internal_add_third());
  }
}

void CPCardStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChinesePoker.CPCardStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPCardStatus::CopyFrom(const CPCardStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChinesePoker.CPCardStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPCardStatus::IsInitialized() const {
  return true;
}

void CPCardStatus::InternalSwap(CPCardStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPCardStatus, add_third_)
      + sizeof(CPCardStatus::add_third_)
      - PROTOBUF_FIELD_OFFSET(CPCardStatus, chair_id_)>(
          reinterpret_cast<char*>(&chair_id_),
          reinterpret_cast<char*>(&other->chair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPCardStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPMsgPlayerInfo::_Internal {
 public:
  static const ::ChinesePoker::CPCardStatus& card_status(const CPMsgPlayerInfo* msg);
  static const ::ChinesePoker::CPMsgHandCards& handls(const CPMsgPlayerInfo* msg);
};

const ::ChinesePoker::CPCardStatus&
CPMsgPlayerInfo::_Internal::card_status(const CPMsgPlayerInfo* msg) {
  return *msg->card_status_;
}
const ::ChinesePoker::CPMsgHandCards&
CPMsgPlayerInfo::_Internal::handls(const CPMsgPlayerInfo* msg) {
  return *msg->handls_;
}
CPMsgPlayerInfo::CPMsgPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChinesePoker.CPMsgPlayerInfo)
}
CPMsgPlayerInfo::CPMsgPlayerInfo(const CPMsgPlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_card_status()) {
    card_status_ = new ::ChinesePoker::CPCardStatus(*from.card_status_);
  } else {
    card_status_ = nullptr;
  }
  if (from._internal_has_handls()) {
    handls_ = new ::ChinesePoker::CPMsgHandCards(*from.handls_);
  } else {
    handls_ = nullptr;
  }
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&win_gold_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(win_gold_));
  // @@protoc_insertion_point(copy_constructor:ChinesePoker.CPMsgPlayerInfo)
}

void CPMsgPlayerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CPMsgPlayerInfo_ChinesePoker_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&card_status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&win_gold_) -
      reinterpret_cast<char*>(&card_status_)) + sizeof(win_gold_));
}

CPMsgPlayerInfo::~CPMsgPlayerInfo() {
  // @@protoc_insertion_point(destructor:ChinesePoker.CPMsgPlayerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPMsgPlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete card_status_;
  if (this != internal_default_instance()) delete handls_;
}

void CPMsgPlayerInfo::ArenaDtor(void* object) {
  CPMsgPlayerInfo* _this = reinterpret_cast< CPMsgPlayerInfo* >(object);
  (void)_this;
}
void CPMsgPlayerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPMsgPlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPMsgPlayerInfo& CPMsgPlayerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CPMsgPlayerInfo_ChinesePoker_2eproto.base);
  return *internal_default_instance();
}


void CPMsgPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ChinesePoker.CPMsgPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && card_status_ != nullptr) {
    delete card_status_;
  }
  card_status_ = nullptr;
  if (GetArena() == nullptr && handls_ != nullptr) {
    delete handls_;
  }
  handls_ = nullptr;
  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&win_gold_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(win_gold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPMsgPlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 play_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          play_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ChinesePoker.CPCardStatus card_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_card_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 gold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 win_gold = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          win_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ChinesePoker.CPMsgHandCards handls = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_handls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPMsgPlayerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChinesePoker.CPMsgPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int32 play_status = 2;
  if (this->play_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_play_status(), target);
  }

  // .ChinesePoker.CPCardStatus card_status = 3;
  if (this->has_card_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::card_status(this), target, stream);
  }

  // int64 gold = 4;
  if (this->gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_gold(), target);
  }

  // int64 win_gold = 5;
  if (this->win_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_win_gold(), target);
  }

  // .ChinesePoker.CPMsgHandCards handls = 6;
  if (this->has_handls()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::handls(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChinesePoker.CPMsgPlayerInfo)
  return target;
}

size_t CPMsgPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChinesePoker.CPMsgPlayerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChinesePoker.CPCardStatus card_status = 3;
  if (this->has_card_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *card_status_);
  }

  // .ChinesePoker.CPMsgHandCards handls = 6;
  if (this->has_handls()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *handls_);
  }

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 play_status = 2;
  if (this->play_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_play_status());
  }

  // int64 gold = 4;
  if (this->gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_gold());
  }

  // int64 win_gold = 5;
  if (this->win_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_win_gold());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPMsgPlayerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChinesePoker.CPMsgPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CPMsgPlayerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPMsgPlayerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChinesePoker.CPMsgPlayerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChinesePoker.CPMsgPlayerInfo)
    MergeFrom(*source);
  }
}

void CPMsgPlayerInfo::MergeFrom(const CPMsgPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChinesePoker.CPMsgPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_card_status()) {
    _internal_mutable_card_status()->::ChinesePoker::CPCardStatus::MergeFrom(from._internal_card_status());
  }
  if (from.has_handls()) {
    _internal_mutable_handls()->::ChinesePoker::CPMsgHandCards::MergeFrom(from._internal_handls());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.play_status() != 0) {
    _internal_set_play_status(from._internal_play_status());
  }
  if (from.gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
  if (from.win_gold() != 0) {
    _internal_set_win_gold(from._internal_win_gold());
  }
}

void CPMsgPlayerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChinesePoker.CPMsgPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPMsgPlayerInfo::CopyFrom(const CPMsgPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChinesePoker.CPMsgPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPMsgPlayerInfo::IsInitialized() const {
  return true;
}

void CPMsgPlayerInfo::InternalSwap(CPMsgPlayerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPMsgPlayerInfo, win_gold_)
      + sizeof(CPMsgPlayerInfo::win_gold_)
      - PROTOBUF_FIELD_OFFSET(CPMsgPlayerInfo, card_status_)>(
          reinterpret_cast<char*>(&card_status_),
          reinterpret_cast<char*>(&other->card_status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPMsgPlayerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPMsgSceneInfo::_Internal {
 public:
};

CPMsgSceneInfo::CPMsgSceneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  player_infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChinesePoker.CPMsgSceneInfo)
}
CPMsgSceneInfo::CPMsgSceneInfo(const CPMsgSceneInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      player_infos_(from.player_infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cell_score_, &from.cell_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_time_) -
    reinterpret_cast<char*>(&cell_score_)) + sizeof(total_time_));
  // @@protoc_insertion_point(copy_constructor:ChinesePoker.CPMsgSceneInfo)
}

void CPMsgSceneInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CPMsgSceneInfo_ChinesePoker_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&cell_score_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&total_time_) -
      reinterpret_cast<char*>(&cell_score_)) + sizeof(total_time_));
}

CPMsgSceneInfo::~CPMsgSceneInfo() {
  // @@protoc_insertion_point(destructor:ChinesePoker.CPMsgSceneInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPMsgSceneInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPMsgSceneInfo::ArenaDtor(void* object) {
  CPMsgSceneInfo* _this = reinterpret_cast< CPMsgSceneInfo* >(object);
  (void)_this;
}
void CPMsgSceneInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPMsgSceneInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPMsgSceneInfo& CPMsgSceneInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CPMsgSceneInfo_ChinesePoker_2eproto.base);
  return *internal_default_instance();
}


void CPMsgSceneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ChinesePoker.CPMsgSceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_infos_.Clear();
  ::memset(&cell_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_time_) -
      reinterpret_cast<char*>(&cell_score_)) + sizeof(total_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPMsgSceneInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 cell_score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cell_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 table_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          table_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 out_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          out_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          total_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ChinesePoker.CPMsgPlayerInfo player_infos = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPMsgSceneInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChinesePoker.CPMsgSceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 cell_score = 1;
  if (this->cell_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_cell_score(), target);
  }

  // int32 table_state = 2;
  if (this->table_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_table_state(), target);
  }

  // int32 out_time = 3;
  if (this->out_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_out_time(), target);
  }

  // int32 total_time = 4;
  if (this->total_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_total_time(), target);
  }

  // repeated .ChinesePoker.CPMsgPlayerInfo player_infos = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_player_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChinesePoker.CPMsgSceneInfo)
  return target;
}

size_t CPMsgSceneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChinesePoker.CPMsgSceneInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ChinesePoker.CPMsgPlayerInfo player_infos = 6;
  total_size += 1UL * this->_internal_player_infos_size();
  for (const auto& msg : this->player_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 cell_score = 1;
  if (this->cell_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cell_score());
  }

  // int32 table_state = 2;
  if (this->table_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_table_state());
  }

  // int32 out_time = 3;
  if (this->out_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_out_time());
  }

  // int32 total_time = 4;
  if (this->total_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPMsgSceneInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChinesePoker.CPMsgSceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CPMsgSceneInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPMsgSceneInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChinesePoker.CPMsgSceneInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChinesePoker.CPMsgSceneInfo)
    MergeFrom(*source);
  }
}

void CPMsgSceneInfo::MergeFrom(const CPMsgSceneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChinesePoker.CPMsgSceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_infos_.MergeFrom(from.player_infos_);
  if (from.cell_score() != 0) {
    _internal_set_cell_score(from._internal_cell_score());
  }
  if (from.table_state() != 0) {
    _internal_set_table_state(from._internal_table_state());
  }
  if (from.out_time() != 0) {
    _internal_set_out_time(from._internal_out_time());
  }
  if (from.total_time() != 0) {
    _internal_set_total_time(from._internal_total_time());
  }
}

void CPMsgSceneInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChinesePoker.CPMsgSceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPMsgSceneInfo::CopyFrom(const CPMsgSceneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChinesePoker.CPMsgSceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPMsgSceneInfo::IsInitialized() const {
  return true;
}

void CPMsgSceneInfo::InternalSwap(CPMsgSceneInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  player_infos_.InternalSwap(&other->player_infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPMsgSceneInfo, total_time_)
      + sizeof(CPMsgSceneInfo::total_time_)
      - PROTOBUF_FIELD_OFFSET(CPMsgSceneInfo, cell_score_)>(
          reinterpret_cast<char*>(&cell_score_),
          reinterpret_cast<char*>(&other->cell_score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPMsgSceneInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPMsgGameStartResp::_Internal {
 public:
  static const ::ChinesePoker::CPMsgHandCards& handls(const CPMsgGameStartResp* msg);
  static const ::ChinesePoker::CPCardStatus& card_status(const CPMsgGameStartResp* msg);
};

const ::ChinesePoker::CPMsgHandCards&
CPMsgGameStartResp::_Internal::handls(const CPMsgGameStartResp* msg) {
  return *msg->handls_;
}
const ::ChinesePoker::CPCardStatus&
CPMsgGameStartResp::_Internal::card_status(const CPMsgGameStartResp* msg) {
  return *msg->card_status_;
}
CPMsgGameStartResp::CPMsgGameStartResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChinesePoker.CPMsgGameStartResp)
}
CPMsgGameStartResp::CPMsgGameStartResp(const CPMsgGameStartResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_handls()) {
    handls_ = new ::ChinesePoker::CPMsgHandCards(*from.handls_);
  } else {
    handls_ = nullptr;
  }
  if (from._internal_has_card_status()) {
    card_status_ = new ::ChinesePoker::CPCardStatus(*from.card_status_);
  } else {
    card_status_ = nullptr;
  }
  special_type_ = from.special_type_;
  // @@protoc_insertion_point(copy_constructor:ChinesePoker.CPMsgGameStartResp)
}

void CPMsgGameStartResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CPMsgGameStartResp_ChinesePoker_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&handls_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&special_type_) -
      reinterpret_cast<char*>(&handls_)) + sizeof(special_type_));
}

CPMsgGameStartResp::~CPMsgGameStartResp() {
  // @@protoc_insertion_point(destructor:ChinesePoker.CPMsgGameStartResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPMsgGameStartResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete handls_;
  if (this != internal_default_instance()) delete card_status_;
}

void CPMsgGameStartResp::ArenaDtor(void* object) {
  CPMsgGameStartResp* _this = reinterpret_cast< CPMsgGameStartResp* >(object);
  (void)_this;
}
void CPMsgGameStartResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPMsgGameStartResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPMsgGameStartResp& CPMsgGameStartResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CPMsgGameStartResp_ChinesePoker_2eproto.base);
  return *internal_default_instance();
}


void CPMsgGameStartResp::Clear() {
// @@protoc_insertion_point(message_clear_start:ChinesePoker.CPMsgGameStartResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && handls_ != nullptr) {
    delete handls_;
  }
  handls_ = nullptr;
  if (GetArena() == nullptr && card_status_ != nullptr) {
    delete card_status_;
  }
  card_status_ = nullptr;
  special_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPMsgGameStartResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ChinesePoker.CPMsgHandCards handls = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_handls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ChinesePoker.CPCardStatus card_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_card_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 special_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          special_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPMsgGameStartResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChinesePoker.CPMsgGameStartResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ChinesePoker.CPMsgHandCards handls = 1;
  if (this->has_handls()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::handls(this), target, stream);
  }

  // .ChinesePoker.CPCardStatus card_status = 2;
  if (this->has_card_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::card_status(this), target, stream);
  }

  // int32 special_type = 3;
  if (this->special_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_special_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChinesePoker.CPMsgGameStartResp)
  return target;
}

size_t CPMsgGameStartResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChinesePoker.CPMsgGameStartResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChinesePoker.CPMsgHandCards handls = 1;
  if (this->has_handls()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *handls_);
  }

  // .ChinesePoker.CPCardStatus card_status = 2;
  if (this->has_card_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *card_status_);
  }

  // int32 special_type = 3;
  if (this->special_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_special_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPMsgGameStartResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChinesePoker.CPMsgGameStartResp)
  GOOGLE_DCHECK_NE(&from, this);
  const CPMsgGameStartResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPMsgGameStartResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChinesePoker.CPMsgGameStartResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChinesePoker.CPMsgGameStartResp)
    MergeFrom(*source);
  }
}

void CPMsgGameStartResp::MergeFrom(const CPMsgGameStartResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChinesePoker.CPMsgGameStartResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_handls()) {
    _internal_mutable_handls()->::ChinesePoker::CPMsgHandCards::MergeFrom(from._internal_handls());
  }
  if (from.has_card_status()) {
    _internal_mutable_card_status()->::ChinesePoker::CPCardStatus::MergeFrom(from._internal_card_status());
  }
  if (from.special_type() != 0) {
    _internal_set_special_type(from._internal_special_type());
  }
}

void CPMsgGameStartResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChinesePoker.CPMsgGameStartResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPMsgGameStartResp::CopyFrom(const CPMsgGameStartResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChinesePoker.CPMsgGameStartResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPMsgGameStartResp::IsInitialized() const {
  return true;
}

void CPMsgGameStartResp::InternalSwap(CPMsgGameStartResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPMsgGameStartResp, special_type_)
      + sizeof(CPMsgGameStartResp::special_type_)
      - PROTOBUF_FIELD_OFFSET(CPMsgGameStartResp, handls_)>(
          reinterpret_cast<char*>(&handls_),
          reinterpret_cast<char*>(&other->handls_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPMsgGameStartResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPMsgAction::_Internal {
 public:
};

CPMsgAction::CPMsgAction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChinesePoker.CPMsgAction)
}
CPMsgAction::CPMsgAction(const CPMsgAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pos1_, &from.pos1_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&pos1_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:ChinesePoker.CPMsgAction)
}

void CPMsgAction::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pos1_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&pos1_)) + sizeof(type_));
}

CPMsgAction::~CPMsgAction() {
  // @@protoc_insertion_point(destructor:ChinesePoker.CPMsgAction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPMsgAction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPMsgAction::ArenaDtor(void* object) {
  CPMsgAction* _this = reinterpret_cast< CPMsgAction* >(object);
  (void)_this;
}
void CPMsgAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPMsgAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPMsgAction& CPMsgAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CPMsgAction_ChinesePoker_2eproto.base);
  return *internal_default_instance();
}


void CPMsgAction::Clear() {
// @@protoc_insertion_point(message_clear_start:ChinesePoker.CPMsgAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pos1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&pos1_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPMsgAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 pos1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pos1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 pos2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pos2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPMsgAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChinesePoker.CPMsgAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // int64 pos1 = 2;
  if (this->pos1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_pos1(), target);
  }

  // int64 pos2 = 3;
  if (this->pos2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_pos2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChinesePoker.CPMsgAction)
  return target;
}

size_t CPMsgAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChinesePoker.CPMsgAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 pos1 = 2;
  if (this->pos1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_pos1());
  }

  // int64 pos2 = 3;
  if (this->pos2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_pos2());
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPMsgAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChinesePoker.CPMsgAction)
  GOOGLE_DCHECK_NE(&from, this);
  const CPMsgAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPMsgAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChinesePoker.CPMsgAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChinesePoker.CPMsgAction)
    MergeFrom(*source);
  }
}

void CPMsgAction::MergeFrom(const CPMsgAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChinesePoker.CPMsgAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pos1() != 0) {
    _internal_set_pos1(from._internal_pos1());
  }
  if (from.pos2() != 0) {
    _internal_set_pos2(from._internal_pos2());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void CPMsgAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChinesePoker.CPMsgAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPMsgAction::CopyFrom(const CPMsgAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChinesePoker.CPMsgAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPMsgAction::IsInitialized() const {
  return true;
}

void CPMsgAction::InternalSwap(CPMsgAction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPMsgAction, type_)
      + sizeof(CPMsgAction::type_)
      - PROTOBUF_FIELD_OFFSET(CPMsgAction, pos1_)>(
          reinterpret_cast<char*>(&pos1_),
          reinterpret_cast<char*>(&other->pos1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPMsgAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPMsgNotifyActionResp::_Internal {
 public:
  static const ::ChinesePoker::CPCardStatus& card_status(const CPMsgNotifyActionResp* msg);
};

const ::ChinesePoker::CPCardStatus&
CPMsgNotifyActionResp::_Internal::card_status(const CPMsgNotifyActionResp* msg) {
  return *msg->card_status_;
}
CPMsgNotifyActionResp::CPMsgNotifyActionResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChinesePoker.CPMsgNotifyActionResp)
}
CPMsgNotifyActionResp::CPMsgNotifyActionResp(const CPMsgNotifyActionResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_card_status()) {
    card_status_ = new ::ChinesePoker::CPCardStatus(*from.card_status_);
  } else {
    card_status_ = nullptr;
  }
  special_type_ = from.special_type_;
  // @@protoc_insertion_point(copy_constructor:ChinesePoker.CPMsgNotifyActionResp)
}

void CPMsgNotifyActionResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CPMsgNotifyActionResp_ChinesePoker_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&card_status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&special_type_) -
      reinterpret_cast<char*>(&card_status_)) + sizeof(special_type_));
}

CPMsgNotifyActionResp::~CPMsgNotifyActionResp() {
  // @@protoc_insertion_point(destructor:ChinesePoker.CPMsgNotifyActionResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPMsgNotifyActionResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete card_status_;
}

void CPMsgNotifyActionResp::ArenaDtor(void* object) {
  CPMsgNotifyActionResp* _this = reinterpret_cast< CPMsgNotifyActionResp* >(object);
  (void)_this;
}
void CPMsgNotifyActionResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPMsgNotifyActionResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPMsgNotifyActionResp& CPMsgNotifyActionResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CPMsgNotifyActionResp_ChinesePoker_2eproto.base);
  return *internal_default_instance();
}


void CPMsgNotifyActionResp::Clear() {
// @@protoc_insertion_point(message_clear_start:ChinesePoker.CPMsgNotifyActionResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && card_status_ != nullptr) {
    delete card_status_;
  }
  card_status_ = nullptr;
  special_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPMsgNotifyActionResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ChinesePoker.CPCardStatus card_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_card_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 special_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          special_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPMsgNotifyActionResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChinesePoker.CPMsgNotifyActionResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ChinesePoker.CPCardStatus card_status = 1;
  if (this->has_card_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::card_status(this), target, stream);
  }

  // int32 special_type = 2;
  if (this->special_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_special_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChinesePoker.CPMsgNotifyActionResp)
  return target;
}

size_t CPMsgNotifyActionResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChinesePoker.CPMsgNotifyActionResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChinesePoker.CPCardStatus card_status = 1;
  if (this->has_card_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *card_status_);
  }

  // int32 special_type = 2;
  if (this->special_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_special_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPMsgNotifyActionResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChinesePoker.CPMsgNotifyActionResp)
  GOOGLE_DCHECK_NE(&from, this);
  const CPMsgNotifyActionResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPMsgNotifyActionResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChinesePoker.CPMsgNotifyActionResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChinesePoker.CPMsgNotifyActionResp)
    MergeFrom(*source);
  }
}

void CPMsgNotifyActionResp::MergeFrom(const CPMsgNotifyActionResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChinesePoker.CPMsgNotifyActionResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_card_status()) {
    _internal_mutable_card_status()->::ChinesePoker::CPCardStatus::MergeFrom(from._internal_card_status());
  }
  if (from.special_type() != 0) {
    _internal_set_special_type(from._internal_special_type());
  }
}

void CPMsgNotifyActionResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChinesePoker.CPMsgNotifyActionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPMsgNotifyActionResp::CopyFrom(const CPMsgNotifyActionResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChinesePoker.CPMsgNotifyActionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPMsgNotifyActionResp::IsInitialized() const {
  return true;
}

void CPMsgNotifyActionResp::InternalSwap(CPMsgNotifyActionResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPMsgNotifyActionResp, special_type_)
      + sizeof(CPMsgNotifyActionResp::special_type_)
      - PROTOBUF_FIELD_OFFSET(CPMsgNotifyActionResp, card_status_)>(
          reinterpret_cast<char*>(&card_status_),
          reinterpret_cast<char*>(&other->card_status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPMsgNotifyActionResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPCardResult::_Internal {
 public:
};

CPCardResult::CPCardResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  gunk_chair_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChinesePoker.CPCardResult)
}
CPCardResult::CPCardResult(const CPCardResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      gunk_chair_(from.gunk_chair_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&score_first_, &from.score_first_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_total_) -
    reinterpret_cast<char*>(&score_first_)) + sizeof(score_total_));
  // @@protoc_insertion_point(copy_constructor:ChinesePoker.CPCardResult)
}

void CPCardResult::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&score_first_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&score_total_) -
      reinterpret_cast<char*>(&score_first_)) + sizeof(score_total_));
}

CPCardResult::~CPCardResult() {
  // @@protoc_insertion_point(destructor:ChinesePoker.CPCardResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPCardResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPCardResult::ArenaDtor(void* object) {
  CPCardResult* _this = reinterpret_cast< CPCardResult* >(object);
  (void)_this;
}
void CPCardResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPCardResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPCardResult& CPCardResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CPCardResult_ChinesePoker_2eproto.base);
  return *internal_default_instance();
}


void CPCardResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ChinesePoker.CPCardResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gunk_chair_.Clear();
  ::memset(&score_first_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_total_) -
      reinterpret_cast<char*>(&score_first_)) + sizeof(score_total_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPCardResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 score_first = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          score_first_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 score_sencond = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          score_sencond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 score_third = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          score_third_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool win_first = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          win_first_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool win_sencond = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          win_sencond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool win_third = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          win_third_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool boom = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          boom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 score_total = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          score_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 gunk_chair = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_gunk_chair(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          _internal_add_gunk_chair(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPCardResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChinesePoker.CPCardResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int64 score_first = 2;
  if (this->score_first() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_score_first(), target);
  }

  // int64 score_sencond = 3;
  if (this->score_sencond() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_score_sencond(), target);
  }

  // int64 score_third = 4;
  if (this->score_third() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_score_third(), target);
  }

  // bool win_first = 5;
  if (this->win_first() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_win_first(), target);
  }

  // bool win_sencond = 6;
  if (this->win_sencond() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_win_sencond(), target);
  }

  // bool win_third = 7;
  if (this->win_third() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_win_third(), target);
  }

  // bool boom = 8;
  if (this->boom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_boom(), target);
  }

  // int64 score_total = 9;
  if (this->score_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_score_total(), target);
  }

  // repeated int32 gunk_chair = 10;
  {
    int byte_size = _gunk_chair_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          10, _internal_gunk_chair(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChinesePoker.CPCardResult)
  return target;
}

size_t CPCardResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChinesePoker.CPCardResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 gunk_chair = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->gunk_chair_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _gunk_chair_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 score_first = 2;
  if (this->score_first() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_score_first());
  }

  // int64 score_sencond = 3;
  if (this->score_sencond() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_score_sencond());
  }

  // int64 score_third = 4;
  if (this->score_third() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_score_third());
  }

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // bool win_first = 5;
  if (this->win_first() != 0) {
    total_size += 1 + 1;
  }

  // bool win_sencond = 6;
  if (this->win_sencond() != 0) {
    total_size += 1 + 1;
  }

  // bool win_third = 7;
  if (this->win_third() != 0) {
    total_size += 1 + 1;
  }

  // bool boom = 8;
  if (this->boom() != 0) {
    total_size += 1 + 1;
  }

  // int64 score_total = 9;
  if (this->score_total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_score_total());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPCardResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChinesePoker.CPCardResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CPCardResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPCardResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChinesePoker.CPCardResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChinesePoker.CPCardResult)
    MergeFrom(*source);
  }
}

void CPCardResult::MergeFrom(const CPCardResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChinesePoker.CPCardResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gunk_chair_.MergeFrom(from.gunk_chair_);
  if (from.score_first() != 0) {
    _internal_set_score_first(from._internal_score_first());
  }
  if (from.score_sencond() != 0) {
    _internal_set_score_sencond(from._internal_score_sencond());
  }
  if (from.score_third() != 0) {
    _internal_set_score_third(from._internal_score_third());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.win_first() != 0) {
    _internal_set_win_first(from._internal_win_first());
  }
  if (from.win_sencond() != 0) {
    _internal_set_win_sencond(from._internal_win_sencond());
  }
  if (from.win_third() != 0) {
    _internal_set_win_third(from._internal_win_third());
  }
  if (from.boom() != 0) {
    _internal_set_boom(from._internal_boom());
  }
  if (from.score_total() != 0) {
    _internal_set_score_total(from._internal_score_total());
  }
}

void CPCardResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChinesePoker.CPCardResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPCardResult::CopyFrom(const CPCardResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChinesePoker.CPCardResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPCardResult::IsInitialized() const {
  return true;
}

void CPCardResult::InternalSwap(CPCardResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gunk_chair_.InternalSwap(&other->gunk_chair_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPCardResult, score_total_)
      + sizeof(CPCardResult::score_total_)
      - PROTOBUF_FIELD_OFFSET(CPCardResult, score_first_)>(
          reinterpret_cast<char*>(&score_first_),
          reinterpret_cast<char*>(&other->score_first_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPCardResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPMsgGameResult::_Internal {
 public:
};

CPMsgGameResult::CPMsgGameResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  game_score_(arena),
  card_status_(arena),
  special_type_(arena),
  card_result_(arena),
  player_hands_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChinesePoker.CPMsgGameResult)
}
CPMsgGameResult::CPMsgGameResult(const CPMsgGameResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      game_score_(from.game_score_),
      card_status_(from.card_status_),
      special_type_(from.special_type_),
      card_result_(from.card_result_),
      player_hands_(from.player_hands_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&game_tax_, &from.game_tax_,
    static_cast<size_t>(reinterpret_cast<char*>(&all_gunk_chair_) -
    reinterpret_cast<char*>(&game_tax_)) + sizeof(all_gunk_chair_));
  // @@protoc_insertion_point(copy_constructor:ChinesePoker.CPMsgGameResult)
}

void CPMsgGameResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CPMsgGameResult_ChinesePoker_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&game_tax_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&all_gunk_chair_) -
      reinterpret_cast<char*>(&game_tax_)) + sizeof(all_gunk_chair_));
}

CPMsgGameResult::~CPMsgGameResult() {
  // @@protoc_insertion_point(destructor:ChinesePoker.CPMsgGameResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPMsgGameResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPMsgGameResult::ArenaDtor(void* object) {
  CPMsgGameResult* _this = reinterpret_cast< CPMsgGameResult* >(object);
  (void)_this;
}
void CPMsgGameResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPMsgGameResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPMsgGameResult& CPMsgGameResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CPMsgGameResult_ChinesePoker_2eproto.base);
  return *internal_default_instance();
}


void CPMsgGameResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ChinesePoker.CPMsgGameResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_score_.Clear();
  card_status_.Clear();
  special_type_.Clear();
  card_result_.Clear();
  player_hands_.Clear();
  ::memset(&game_tax_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&all_gunk_chair_) -
      reinterpret_cast<char*>(&game_tax_)) + sizeof(all_gunk_chair_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPMsgGameResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 game_tax = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          game_tax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 game_score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_game_score(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_game_score(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ChinesePoker.CPCardStatus card_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_card_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 special_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_special_type(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_special_type(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ChinesePoker.CPCardResult card_result = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_card_result(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ChinesePoker.CPMsgHandCards player_hands = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_hands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 all_gunk_chair = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          all_gunk_chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPMsgGameResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChinesePoker.CPMsgGameResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 game_tax = 1;
  if (this->game_tax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_game_tax(), target);
  }

  // repeated int64 game_score = 2;
  {
    int byte_size = _game_score_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_game_score(), byte_size, target);
    }
  }

  // repeated .ChinesePoker.CPCardStatus card_status = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_card_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_card_status(i), target, stream);
  }

  // repeated int32 special_type = 4;
  {
    int byte_size = _special_type_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_special_type(), byte_size, target);
    }
  }

  // repeated .ChinesePoker.CPCardResult card_result = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_card_result_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_card_result(i), target, stream);
  }

  // repeated .ChinesePoker.CPMsgHandCards player_hands = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_hands_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_player_hands(i), target, stream);
  }

  // int32 all_gunk_chair = 7;
  if (this->all_gunk_chair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_all_gunk_chair(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChinesePoker.CPMsgGameResult)
  return target;
}

size_t CPMsgGameResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChinesePoker.CPMsgGameResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 game_score = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->game_score_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _game_score_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .ChinesePoker.CPCardStatus card_status = 3;
  total_size += 1UL * this->_internal_card_status_size();
  for (const auto& msg : this->card_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 special_type = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->special_type_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _special_type_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .ChinesePoker.CPCardResult card_result = 5;
  total_size += 1UL * this->_internal_card_result_size();
  for (const auto& msg : this->card_result_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ChinesePoker.CPMsgHandCards player_hands = 6;
  total_size += 1UL * this->_internal_player_hands_size();
  for (const auto& msg : this->player_hands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 game_tax = 1;
  if (this->game_tax() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_tax());
  }

  // int32 all_gunk_chair = 7;
  if (this->all_gunk_chair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_all_gunk_chair());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPMsgGameResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChinesePoker.CPMsgGameResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CPMsgGameResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPMsgGameResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChinesePoker.CPMsgGameResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChinesePoker.CPMsgGameResult)
    MergeFrom(*source);
  }
}

void CPMsgGameResult::MergeFrom(const CPMsgGameResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChinesePoker.CPMsgGameResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  game_score_.MergeFrom(from.game_score_);
  card_status_.MergeFrom(from.card_status_);
  special_type_.MergeFrom(from.special_type_);
  card_result_.MergeFrom(from.card_result_);
  player_hands_.MergeFrom(from.player_hands_);
  if (from.game_tax() != 0) {
    _internal_set_game_tax(from._internal_game_tax());
  }
  if (from.all_gunk_chair() != 0) {
    _internal_set_all_gunk_chair(from._internal_all_gunk_chair());
  }
}

void CPMsgGameResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChinesePoker.CPMsgGameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPMsgGameResult::CopyFrom(const CPMsgGameResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChinesePoker.CPMsgGameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPMsgGameResult::IsInitialized() const {
  return true;
}

void CPMsgGameResult::InternalSwap(CPMsgGameResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  game_score_.InternalSwap(&other->game_score_);
  card_status_.InternalSwap(&other->card_status_);
  special_type_.InternalSwap(&other->special_type_);
  card_result_.InternalSwap(&other->card_result_);
  player_hands_.InternalSwap(&other->player_hands_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPMsgGameResult, all_gunk_chair_)
      + sizeof(CPMsgGameResult::all_gunk_chair_)
      - PROTOBUF_FIELD_OFFSET(CPMsgGameResult, game_tax_)>(
          reinterpret_cast<char*>(&game_tax_),
          reinterpret_cast<char*>(&other->game_tax_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPMsgGameResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ChinesePoker
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ChinesePoker::CPMsgTableState* Arena::CreateMaybeMessage< ::ChinesePoker::CPMsgTableState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChinesePoker::CPMsgTableState >(arena);
}
template<> PROTOBUF_NOINLINE ::ChinesePoker::CPMsgHandCards* Arena::CreateMaybeMessage< ::ChinesePoker::CPMsgHandCards >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChinesePoker::CPMsgHandCards >(arena);
}
template<> PROTOBUF_NOINLINE ::ChinesePoker::CPCardStatus* Arena::CreateMaybeMessage< ::ChinesePoker::CPCardStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChinesePoker::CPCardStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ChinesePoker::CPMsgPlayerInfo* Arena::CreateMaybeMessage< ::ChinesePoker::CPMsgPlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChinesePoker::CPMsgPlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ChinesePoker::CPMsgSceneInfo* Arena::CreateMaybeMessage< ::ChinesePoker::CPMsgSceneInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChinesePoker::CPMsgSceneInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ChinesePoker::CPMsgGameStartResp* Arena::CreateMaybeMessage< ::ChinesePoker::CPMsgGameStartResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChinesePoker::CPMsgGameStartResp >(arena);
}
template<> PROTOBUF_NOINLINE ::ChinesePoker::CPMsgAction* Arena::CreateMaybeMessage< ::ChinesePoker::CPMsgAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChinesePoker::CPMsgAction >(arena);
}
template<> PROTOBUF_NOINLINE ::ChinesePoker::CPMsgNotifyActionResp* Arena::CreateMaybeMessage< ::ChinesePoker::CPMsgNotifyActionResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChinesePoker::CPMsgNotifyActionResp >(arena);
}
template<> PROTOBUF_NOINLINE ::ChinesePoker::CPCardResult* Arena::CreateMaybeMessage< ::ChinesePoker::CPCardResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChinesePoker::CPCardResult >(arena);
}
template<> PROTOBUF_NOINLINE ::ChinesePoker::CPMsgGameResult* Arena::CreateMaybeMessage< ::ChinesePoker::CPMsgGameResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChinesePoker::CPMsgGameResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
