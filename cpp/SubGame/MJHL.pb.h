// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MJHL.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MJHL_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MJHL_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MJHL_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MJHL_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MJHL_2eproto;
namespace MJHL {
class CMD_3D_SC_Result;
class CMD_3D_SC_ResultDefaultTypeInternal;
extern CMD_3D_SC_ResultDefaultTypeInternal _CMD_3D_SC_Result_default_instance_;
class CMD_SC_BetFail;
class CMD_SC_BetFailDefaultTypeInternal;
extern CMD_SC_BetFailDefaultTypeInternal _CMD_SC_BetFail_default_instance_;
class Round;
class RoundDefaultTypeInternal;
extern RoundDefaultTypeInternal _Round_default_instance_;
class SC_SceneInfo;
class SC_SceneInfoDefaultTypeInternal;
extern SC_SceneInfoDefaultTypeInternal _SC_SceneInfo_default_instance_;
}  // namespace MJHL
PROTOBUF_NAMESPACE_OPEN
template<> ::MJHL::CMD_3D_SC_Result* Arena::CreateMaybeMessage<::MJHL::CMD_3D_SC_Result>(Arena*);
template<> ::MJHL::CMD_SC_BetFail* Arena::CreateMaybeMessage<::MJHL::CMD_SC_BetFail>(Arena*);
template<> ::MJHL::Round* Arena::CreateMaybeMessage<::MJHL::Round>(Arena*);
template<> ::MJHL::SC_SceneInfo* Arena::CreateMaybeMessage<::MJHL::SC_SceneInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace MJHL {

enum EMsgIDMJHL : int {
  SUB_CS_GAME_START = 0,
  SUB_SC_BET_FAIL = 1,
  SUB_SC_START_GAME = 2,
  EMsgIDMJHL_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EMsgIDMJHL_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EMsgIDMJHL_IsValid(int value);
constexpr EMsgIDMJHL EMsgIDMJHL_MIN = SUB_CS_GAME_START;
constexpr EMsgIDMJHL EMsgIDMJHL_MAX = SUB_SC_START_GAME;
constexpr int EMsgIDMJHL_ARRAYSIZE = EMsgIDMJHL_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDMJHL_descriptor();
template<typename T>
inline const std::string& EMsgIDMJHL_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EMsgIDMJHL>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EMsgIDMJHL_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EMsgIDMJHL_descriptor(), enum_t_value);
}
inline bool EMsgIDMJHL_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EMsgIDMJHL* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EMsgIDMJHL>(
    EMsgIDMJHL_descriptor(), name, value);
}
// ===================================================================

class Round PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MJHL.Round) */ {
 public:
  inline Round() : Round(nullptr) {}
  virtual ~Round();

  Round(const Round& from);
  Round(Round&& from) noexcept
    : Round() {
    *this = ::std::move(from);
  }

  inline Round& operator=(const Round& from) {
    CopyFrom(from);
    return *this;
  }
  inline Round& operator=(Round&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Round& default_instance();

  static inline const Round* internal_default_instance() {
    return reinterpret_cast<const Round*>(
               &_Round_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Round& a, Round& b) {
    a.Swap(&b);
  }
  inline void Swap(Round* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Round* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Round* New() const final {
    return CreateMaybeMessage<Round>(nullptr);
  }

  Round* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Round>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Round& from);
  void MergeFrom(const Round& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Round* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MJHL.Round";
  }
  protected:
  explicit Round(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MJHL_2eproto);
    return ::descriptor_table_MJHL_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIconFieldNumber = 1,
    kHitIdxFieldNumber = 2,
    kGoldIconInfoFieldNumber = 3,
    kOddFieldNumber = 4,
  };
  // repeated int32 icon = 1;
  int icon_size() const;
  private:
  int _internal_icon_size() const;
  public:
  void clear_icon();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_icon(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_icon() const;
  void _internal_add_icon(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_icon();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 icon(int index) const;
  void set_icon(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_icon(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      icon() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_icon();

  // repeated int32 HitIdx = 2;
  int hitidx_size() const;
  private:
  int _internal_hitidx_size() const;
  public:
  void clear_hitidx();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hitidx(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_hitidx() const;
  void _internal_add_hitidx(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_hitidx();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 hitidx(int index) const;
  void set_hitidx(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_hitidx(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      hitidx() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_hitidx();

  // repeated int32 Gold_Icon_Info = 3;
  int gold_icon_info_size() const;
  private:
  int _internal_gold_icon_info_size() const;
  public:
  void clear_gold_icon_info();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gold_icon_info(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_gold_icon_info() const;
  void _internal_add_gold_icon_info(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_gold_icon_info();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 gold_icon_info(int index) const;
  void set_gold_icon_info(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_gold_icon_info(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      gold_icon_info() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_gold_icon_info();

  // int32 odd = 4;
  void clear_odd();
  ::PROTOBUF_NAMESPACE_ID::int32 odd() const;
  void set_odd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_odd() const;
  void _internal_set_odd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MJHL.Round)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > icon_;
  mutable std::atomic<int> _icon_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > hitidx_;
  mutable std::atomic<int> _hitidx_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > gold_icon_info_;
  mutable std::atomic<int> _gold_icon_info_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 odd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MJHL_2eproto;
};
// -------------------------------------------------------------------

class SC_SceneInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MJHL.SC_SceneInfo) */ {
 public:
  inline SC_SceneInfo() : SC_SceneInfo(nullptr) {}
  virtual ~SC_SceneInfo();

  SC_SceneInfo(const SC_SceneInfo& from);
  SC_SceneInfo(SC_SceneInfo&& from) noexcept
    : SC_SceneInfo() {
    *this = ::std::move(from);
  }

  inline SC_SceneInfo& operator=(const SC_SceneInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_SceneInfo& operator=(SC_SceneInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_SceneInfo& default_instance();

  static inline const SC_SceneInfo* internal_default_instance() {
    return reinterpret_cast<const SC_SceneInfo*>(
               &_SC_SceneInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SC_SceneInfo& a, SC_SceneInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_SceneInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_SceneInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_SceneInfo* New() const final {
    return CreateMaybeMessage<SC_SceneInfo>(nullptr);
  }

  SC_SceneInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_SceneInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_SceneInfo& from);
  void MergeFrom(const SC_SceneInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_SceneInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MJHL.SC_SceneInfo";
  }
  protected:
  explicit SC_SceneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MJHL_2eproto);
    return ::descriptor_table_MJHL_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNBetFieldNumber = 4,
    kNFreeCountFieldNumber = 1,
    kNCurrenBetFieldNumber = 2,
    kNBetCountFieldNumber = 3,
  };
  // repeated int32 nBet = 4;
  int nbet_size() const;
  private:
  int _internal_nbet_size() const;
  public:
  void clear_nbet();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nbet(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_nbet() const;
  void _internal_add_nbet(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_nbet();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 nbet(int index) const;
  void set_nbet(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_nbet(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      nbet() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_nbet();

  // int32 nFreeCount = 1;
  void clear_nfreecount();
  ::PROTOBUF_NAMESPACE_ID::int32 nfreecount() const;
  void set_nfreecount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nfreecount() const;
  void _internal_set_nfreecount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nCurrenBet = 2;
  void clear_ncurrenbet();
  ::PROTOBUF_NAMESPACE_ID::int32 ncurrenbet() const;
  void set_ncurrenbet(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ncurrenbet() const;
  void _internal_set_ncurrenbet(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nBetCount = 3;
  void clear_nbetcount();
  ::PROTOBUF_NAMESPACE_ID::int32 nbetcount() const;
  void set_nbetcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nbetcount() const;
  void _internal_set_nbetcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MJHL.SC_SceneInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > nbet_;
  mutable std::atomic<int> _nbet_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 nfreecount_;
  ::PROTOBUF_NAMESPACE_ID::int32 ncurrenbet_;
  ::PROTOBUF_NAMESPACE_ID::int32 nbetcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MJHL_2eproto;
};
// -------------------------------------------------------------------

class CMD_SC_BetFail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MJHL.CMD_SC_BetFail) */ {
 public:
  inline CMD_SC_BetFail() : CMD_SC_BetFail(nullptr) {}
  virtual ~CMD_SC_BetFail();

  CMD_SC_BetFail(const CMD_SC_BetFail& from);
  CMD_SC_BetFail(CMD_SC_BetFail&& from) noexcept
    : CMD_SC_BetFail() {
    *this = ::std::move(from);
  }

  inline CMD_SC_BetFail& operator=(const CMD_SC_BetFail& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMD_SC_BetFail& operator=(CMD_SC_BetFail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMD_SC_BetFail& default_instance();

  static inline const CMD_SC_BetFail* internal_default_instance() {
    return reinterpret_cast<const CMD_SC_BetFail*>(
               &_CMD_SC_BetFail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMD_SC_BetFail& a, CMD_SC_BetFail& b) {
    a.Swap(&b);
  }
  inline void Swap(CMD_SC_BetFail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMD_SC_BetFail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMD_SC_BetFail* New() const final {
    return CreateMaybeMessage<CMD_SC_BetFail>(nullptr);
  }

  CMD_SC_BetFail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMD_SC_BetFail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMD_SC_BetFail& from);
  void MergeFrom(const CMD_SC_BetFail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMD_SC_BetFail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MJHL.CMD_SC_BetFail";
  }
  protected:
  explicit CMD_SC_BetFail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MJHL_2eproto);
    return ::descriptor_table_MJHL_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNResCodeFieldNumber = 1,
  };
  // int32 nResCode = 1;
  void clear_nrescode();
  ::PROTOBUF_NAMESPACE_ID::int32 nrescode() const;
  void set_nrescode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nrescode() const;
  void _internal_set_nrescode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MJHL.CMD_SC_BetFail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 nrescode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MJHL_2eproto;
};
// -------------------------------------------------------------------

class CMD_3D_SC_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MJHL.CMD_3D_SC_Result) */ {
 public:
  inline CMD_3D_SC_Result() : CMD_3D_SC_Result(nullptr) {}
  virtual ~CMD_3D_SC_Result();

  CMD_3D_SC_Result(const CMD_3D_SC_Result& from);
  CMD_3D_SC_Result(CMD_3D_SC_Result&& from) noexcept
    : CMD_3D_SC_Result() {
    *this = ::std::move(from);
  }

  inline CMD_3D_SC_Result& operator=(const CMD_3D_SC_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMD_3D_SC_Result& operator=(CMD_3D_SC_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMD_3D_SC_Result& default_instance();

  static inline const CMD_3D_SC_Result* internal_default_instance() {
    return reinterpret_cast<const CMD_3D_SC_Result*>(
               &_CMD_3D_SC_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMD_3D_SC_Result& a, CMD_3D_SC_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(CMD_3D_SC_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMD_3D_SC_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMD_3D_SC_Result* New() const final {
    return CreateMaybeMessage<CMD_3D_SC_Result>(nullptr);
  }

  CMD_3D_SC_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMD_3D_SC_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMD_3D_SC_Result& from);
  void MergeFrom(const CMD_3D_SC_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMD_3D_SC_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MJHL.CMD_3D_SC_Result";
  }
  protected:
  explicit CMD_3D_SC_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MJHL_2eproto);
    return ::descriptor_table_MJHL_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagIconInfoFieldNumber = 1,
    kTableAllOddFieldNumber = 2,
    kNFreeTimesFieldNumber = 3,
    kNWinGoldFieldNumber = 4,
  };
  // repeated .MJHL.Round tagIconInfo = 1;
  int tagiconinfo_size() const;
  private:
  int _internal_tagiconinfo_size() const;
  public:
  void clear_tagiconinfo();
  ::MJHL::Round* mutable_tagiconinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MJHL::Round >*
      mutable_tagiconinfo();
  private:
  const ::MJHL::Round& _internal_tagiconinfo(int index) const;
  ::MJHL::Round* _internal_add_tagiconinfo();
  public:
  const ::MJHL::Round& tagiconinfo(int index) const;
  ::MJHL::Round* add_tagiconinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MJHL::Round >&
      tagiconinfo() const;

  // int32 tableAllOdd = 2;
  void clear_tableallodd();
  ::PROTOBUF_NAMESPACE_ID::int32 tableallodd() const;
  void set_tableallodd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tableallodd() const;
  void _internal_set_tableallodd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nFreeTimes = 3;
  void clear_nfreetimes();
  ::PROTOBUF_NAMESPACE_ID::int32 nfreetimes() const;
  void set_nfreetimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nfreetimes() const;
  void _internal_set_nfreetimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nWinGold = 4;
  void clear_nwingold();
  ::PROTOBUF_NAMESPACE_ID::int32 nwingold() const;
  void set_nwingold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nwingold() const;
  void _internal_set_nwingold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MJHL.CMD_3D_SC_Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MJHL::Round > tagiconinfo_;
  ::PROTOBUF_NAMESPACE_ID::int32 tableallodd_;
  ::PROTOBUF_NAMESPACE_ID::int32 nfreetimes_;
  ::PROTOBUF_NAMESPACE_ID::int32 nwingold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MJHL_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Round

// repeated int32 icon = 1;
inline int Round::_internal_icon_size() const {
  return icon_.size();
}
inline int Round::icon_size() const {
  return _internal_icon_size();
}
inline void Round::clear_icon() {
  icon_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Round::_internal_icon(int index) const {
  return icon_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Round::icon(int index) const {
  // @@protoc_insertion_point(field_get:MJHL.Round.icon)
  return _internal_icon(index);
}
inline void Round::set_icon(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  icon_.Set(index, value);
  // @@protoc_insertion_point(field_set:MJHL.Round.icon)
}
inline void Round::_internal_add_icon(::PROTOBUF_NAMESPACE_ID::int32 value) {
  icon_.Add(value);
}
inline void Round::add_icon(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_icon(value);
  // @@protoc_insertion_point(field_add:MJHL.Round.icon)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Round::_internal_icon() const {
  return icon_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Round::icon() const {
  // @@protoc_insertion_point(field_list:MJHL.Round.icon)
  return _internal_icon();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Round::_internal_mutable_icon() {
  return &icon_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Round::mutable_icon() {
  // @@protoc_insertion_point(field_mutable_list:MJHL.Round.icon)
  return _internal_mutable_icon();
}

// repeated int32 HitIdx = 2;
inline int Round::_internal_hitidx_size() const {
  return hitidx_.size();
}
inline int Round::hitidx_size() const {
  return _internal_hitidx_size();
}
inline void Round::clear_hitidx() {
  hitidx_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Round::_internal_hitidx(int index) const {
  return hitidx_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Round::hitidx(int index) const {
  // @@protoc_insertion_point(field_get:MJHL.Round.HitIdx)
  return _internal_hitidx(index);
}
inline void Round::set_hitidx(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  hitidx_.Set(index, value);
  // @@protoc_insertion_point(field_set:MJHL.Round.HitIdx)
}
inline void Round::_internal_add_hitidx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  hitidx_.Add(value);
}
inline void Round::add_hitidx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_hitidx(value);
  // @@protoc_insertion_point(field_add:MJHL.Round.HitIdx)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Round::_internal_hitidx() const {
  return hitidx_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Round::hitidx() const {
  // @@protoc_insertion_point(field_list:MJHL.Round.HitIdx)
  return _internal_hitidx();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Round::_internal_mutable_hitidx() {
  return &hitidx_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Round::mutable_hitidx() {
  // @@protoc_insertion_point(field_mutable_list:MJHL.Round.HitIdx)
  return _internal_mutable_hitidx();
}

// repeated int32 Gold_Icon_Info = 3;
inline int Round::_internal_gold_icon_info_size() const {
  return gold_icon_info_.size();
}
inline int Round::gold_icon_info_size() const {
  return _internal_gold_icon_info_size();
}
inline void Round::clear_gold_icon_info() {
  gold_icon_info_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Round::_internal_gold_icon_info(int index) const {
  return gold_icon_info_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Round::gold_icon_info(int index) const {
  // @@protoc_insertion_point(field_get:MJHL.Round.Gold_Icon_Info)
  return _internal_gold_icon_info(index);
}
inline void Round::set_gold_icon_info(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  gold_icon_info_.Set(index, value);
  // @@protoc_insertion_point(field_set:MJHL.Round.Gold_Icon_Info)
}
inline void Round::_internal_add_gold_icon_info(::PROTOBUF_NAMESPACE_ID::int32 value) {
  gold_icon_info_.Add(value);
}
inline void Round::add_gold_icon_info(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_gold_icon_info(value);
  // @@protoc_insertion_point(field_add:MJHL.Round.Gold_Icon_Info)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Round::_internal_gold_icon_info() const {
  return gold_icon_info_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Round::gold_icon_info() const {
  // @@protoc_insertion_point(field_list:MJHL.Round.Gold_Icon_Info)
  return _internal_gold_icon_info();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Round::_internal_mutable_gold_icon_info() {
  return &gold_icon_info_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Round::mutable_gold_icon_info() {
  // @@protoc_insertion_point(field_mutable_list:MJHL.Round.Gold_Icon_Info)
  return _internal_mutable_gold_icon_info();
}

// int32 odd = 4;
inline void Round::clear_odd() {
  odd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Round::_internal_odd() const {
  return odd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Round::odd() const {
  // @@protoc_insertion_point(field_get:MJHL.Round.odd)
  return _internal_odd();
}
inline void Round::_internal_set_odd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  odd_ = value;
}
inline void Round::set_odd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_odd(value);
  // @@protoc_insertion_point(field_set:MJHL.Round.odd)
}

// -------------------------------------------------------------------

// SC_SceneInfo

// int32 nFreeCount = 1;
inline void SC_SceneInfo::clear_nfreecount() {
  nfreecount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::_internal_nfreecount() const {
  return nfreecount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::nfreecount() const {
  // @@protoc_insertion_point(field_get:MJHL.SC_SceneInfo.nFreeCount)
  return _internal_nfreecount();
}
inline void SC_SceneInfo::_internal_set_nfreecount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nfreecount_ = value;
}
inline void SC_SceneInfo::set_nfreecount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nfreecount(value);
  // @@protoc_insertion_point(field_set:MJHL.SC_SceneInfo.nFreeCount)
}

// int32 nCurrenBet = 2;
inline void SC_SceneInfo::clear_ncurrenbet() {
  ncurrenbet_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::_internal_ncurrenbet() const {
  return ncurrenbet_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::ncurrenbet() const {
  // @@protoc_insertion_point(field_get:MJHL.SC_SceneInfo.nCurrenBet)
  return _internal_ncurrenbet();
}
inline void SC_SceneInfo::_internal_set_ncurrenbet(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ncurrenbet_ = value;
}
inline void SC_SceneInfo::set_ncurrenbet(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ncurrenbet(value);
  // @@protoc_insertion_point(field_set:MJHL.SC_SceneInfo.nCurrenBet)
}

// int32 nBetCount = 3;
inline void SC_SceneInfo::clear_nbetcount() {
  nbetcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::_internal_nbetcount() const {
  return nbetcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::nbetcount() const {
  // @@protoc_insertion_point(field_get:MJHL.SC_SceneInfo.nBetCount)
  return _internal_nbetcount();
}
inline void SC_SceneInfo::_internal_set_nbetcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nbetcount_ = value;
}
inline void SC_SceneInfo::set_nbetcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nbetcount(value);
  // @@protoc_insertion_point(field_set:MJHL.SC_SceneInfo.nBetCount)
}

// repeated int32 nBet = 4;
inline int SC_SceneInfo::_internal_nbet_size() const {
  return nbet_.size();
}
inline int SC_SceneInfo::nbet_size() const {
  return _internal_nbet_size();
}
inline void SC_SceneInfo::clear_nbet() {
  nbet_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::_internal_nbet(int index) const {
  return nbet_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::nbet(int index) const {
  // @@protoc_insertion_point(field_get:MJHL.SC_SceneInfo.nBet)
  return _internal_nbet(index);
}
inline void SC_SceneInfo::set_nbet(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  nbet_.Set(index, value);
  // @@protoc_insertion_point(field_set:MJHL.SC_SceneInfo.nBet)
}
inline void SC_SceneInfo::_internal_add_nbet(::PROTOBUF_NAMESPACE_ID::int32 value) {
  nbet_.Add(value);
}
inline void SC_SceneInfo::add_nbet(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_nbet(value);
  // @@protoc_insertion_point(field_add:MJHL.SC_SceneInfo.nBet)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SC_SceneInfo::_internal_nbet() const {
  return nbet_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SC_SceneInfo::nbet() const {
  // @@protoc_insertion_point(field_list:MJHL.SC_SceneInfo.nBet)
  return _internal_nbet();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SC_SceneInfo::_internal_mutable_nbet() {
  return &nbet_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SC_SceneInfo::mutable_nbet() {
  // @@protoc_insertion_point(field_mutable_list:MJHL.SC_SceneInfo.nBet)
  return _internal_mutable_nbet();
}

// -------------------------------------------------------------------

// CMD_SC_BetFail

// int32 nResCode = 1;
inline void CMD_SC_BetFail::clear_nrescode() {
  nrescode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_BetFail::_internal_nrescode() const {
  return nrescode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_BetFail::nrescode() const {
  // @@protoc_insertion_point(field_get:MJHL.CMD_SC_BetFail.nResCode)
  return _internal_nrescode();
}
inline void CMD_SC_BetFail::_internal_set_nrescode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nrescode_ = value;
}
inline void CMD_SC_BetFail::set_nrescode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nrescode(value);
  // @@protoc_insertion_point(field_set:MJHL.CMD_SC_BetFail.nResCode)
}

// -------------------------------------------------------------------

// CMD_3D_SC_Result

// repeated .MJHL.Round tagIconInfo = 1;
inline int CMD_3D_SC_Result::_internal_tagiconinfo_size() const {
  return tagiconinfo_.size();
}
inline int CMD_3D_SC_Result::tagiconinfo_size() const {
  return _internal_tagiconinfo_size();
}
inline void CMD_3D_SC_Result::clear_tagiconinfo() {
  tagiconinfo_.Clear();
}
inline ::MJHL::Round* CMD_3D_SC_Result::mutable_tagiconinfo(int index) {
  // @@protoc_insertion_point(field_mutable:MJHL.CMD_3D_SC_Result.tagIconInfo)
  return tagiconinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MJHL::Round >*
CMD_3D_SC_Result::mutable_tagiconinfo() {
  // @@protoc_insertion_point(field_mutable_list:MJHL.CMD_3D_SC_Result.tagIconInfo)
  return &tagiconinfo_;
}
inline const ::MJHL::Round& CMD_3D_SC_Result::_internal_tagiconinfo(int index) const {
  return tagiconinfo_.Get(index);
}
inline const ::MJHL::Round& CMD_3D_SC_Result::tagiconinfo(int index) const {
  // @@protoc_insertion_point(field_get:MJHL.CMD_3D_SC_Result.tagIconInfo)
  return _internal_tagiconinfo(index);
}
inline ::MJHL::Round* CMD_3D_SC_Result::_internal_add_tagiconinfo() {
  return tagiconinfo_.Add();
}
inline ::MJHL::Round* CMD_3D_SC_Result::add_tagiconinfo() {
  // @@protoc_insertion_point(field_add:MJHL.CMD_3D_SC_Result.tagIconInfo)
  return _internal_add_tagiconinfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MJHL::Round >&
CMD_3D_SC_Result::tagiconinfo() const {
  // @@protoc_insertion_point(field_list:MJHL.CMD_3D_SC_Result.tagIconInfo)
  return tagiconinfo_;
}

// int32 tableAllOdd = 2;
inline void CMD_3D_SC_Result::clear_tableallodd() {
  tableallodd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_3D_SC_Result::_internal_tableallodd() const {
  return tableallodd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_3D_SC_Result::tableallodd() const {
  // @@protoc_insertion_point(field_get:MJHL.CMD_3D_SC_Result.tableAllOdd)
  return _internal_tableallodd();
}
inline void CMD_3D_SC_Result::_internal_set_tableallodd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tableallodd_ = value;
}
inline void CMD_3D_SC_Result::set_tableallodd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tableallodd(value);
  // @@protoc_insertion_point(field_set:MJHL.CMD_3D_SC_Result.tableAllOdd)
}

// int32 nFreeTimes = 3;
inline void CMD_3D_SC_Result::clear_nfreetimes() {
  nfreetimes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_3D_SC_Result::_internal_nfreetimes() const {
  return nfreetimes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_3D_SC_Result::nfreetimes() const {
  // @@protoc_insertion_point(field_get:MJHL.CMD_3D_SC_Result.nFreeTimes)
  return _internal_nfreetimes();
}
inline void CMD_3D_SC_Result::_internal_set_nfreetimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nfreetimes_ = value;
}
inline void CMD_3D_SC_Result::set_nfreetimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nfreetimes(value);
  // @@protoc_insertion_point(field_set:MJHL.CMD_3D_SC_Result.nFreeTimes)
}

// int32 nWinGold = 4;
inline void CMD_3D_SC_Result::clear_nwingold() {
  nwingold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_3D_SC_Result::_internal_nwingold() const {
  return nwingold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_3D_SC_Result::nwingold() const {
  // @@protoc_insertion_point(field_get:MJHL.CMD_3D_SC_Result.nWinGold)
  return _internal_nwingold();
}
inline void CMD_3D_SC_Result::_internal_set_nwingold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nwingold_ = value;
}
inline void CMD_3D_SC_Result::set_nwingold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nwingold(value);
  // @@protoc_insertion_point(field_set:MJHL.CMD_3D_SC_Result.nWinGold)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MJHL

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::MJHL::EMsgIDMJHL> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MJHL::EMsgIDMJHL>() {
  return ::MJHL::EMsgIDMJHL_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MJHL_2eproto
