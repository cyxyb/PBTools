// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: YGBH.proto

#include "YGBH.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_YGBH_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HitIcon_YGBH_2eproto;
namespace YGBH {
class SC_SceneInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_SceneInfo> _instance;
} _SC_SceneInfo_default_instance_;
class HitIconDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HitIcon> _instance;
} _HitIcon_default_instance_;
class CMD_3D_SC_ResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_3D_SC_Result> _instance;
} _CMD_3D_SC_Result_default_instance_;
class CMD_3D_CS_StartGameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_3D_CS_StartGame> _instance;
} _CMD_3D_CS_StartGame_default_instance_;
class CMD_SC_SmallGameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_SC_SmallGame> _instance;
} _CMD_SC_SmallGame_default_instance_;
class CMD_SC_SmallGameEndDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_SC_SmallGameEnd> _instance;
} _CMD_SC_SmallGameEnd_default_instance_;
}  // namespace YGBH
static void InitDefaultsscc_info_CMD_3D_CS_StartGame_YGBH_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::YGBH::_CMD_3D_CS_StartGame_default_instance_;
    new (ptr) ::YGBH::CMD_3D_CS_StartGame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_3D_CS_StartGame_YGBH_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_3D_CS_StartGame_YGBH_2eproto}, {}};

static void InitDefaultsscc_info_CMD_3D_SC_Result_YGBH_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::YGBH::_CMD_3D_SC_Result_default_instance_;
    new (ptr) ::YGBH::CMD_3D_SC_Result();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMD_3D_SC_Result_YGBH_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMD_3D_SC_Result_YGBH_2eproto}, {
      &scc_info_HitIcon_YGBH_2eproto.base,}};

static void InitDefaultsscc_info_CMD_SC_SmallGame_YGBH_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::YGBH::_CMD_SC_SmallGame_default_instance_;
    new (ptr) ::YGBH::CMD_SC_SmallGame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_SC_SmallGame_YGBH_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_SC_SmallGame_YGBH_2eproto}, {}};

static void InitDefaultsscc_info_CMD_SC_SmallGameEnd_YGBH_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::YGBH::_CMD_SC_SmallGameEnd_default_instance_;
    new (ptr) ::YGBH::CMD_SC_SmallGameEnd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_SC_SmallGameEnd_YGBH_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_SC_SmallGameEnd_YGBH_2eproto}, {}};

static void InitDefaultsscc_info_HitIcon_YGBH_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::YGBH::_HitIcon_default_instance_;
    new (ptr) ::YGBH::HitIcon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HitIcon_YGBH_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HitIcon_YGBH_2eproto}, {}};

static void InitDefaultsscc_info_SC_SceneInfo_YGBH_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::YGBH::_SC_SceneInfo_default_instance_;
    new (ptr) ::YGBH::SC_SceneInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_SceneInfo_YGBH_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_SceneInfo_YGBH_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_YGBH_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_YGBH_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_YGBH_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_YGBH_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::YGBH::SC_SceneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::YGBH::SC_SceneInfo, free_count_),
  PROTOBUF_FIELD_OFFSET(::YGBH::SC_SceneInfo, current_bet_),
  PROTOBUF_FIELD_OFFSET(::YGBH::SC_SceneInfo, gain_pei_lv_),
  PROTOBUF_FIELD_OFFSET(::YGBH::SC_SceneInfo, bet_count_),
  PROTOBUF_FIELD_OFFSET(::YGBH::SC_SceneInfo, bet_),
  PROTOBUF_FIELD_OFFSET(::YGBH::SC_SceneInfo, free_icon_lie_),
  PROTOBUF_FIELD_OFFSET(::YGBH::SC_SceneInfo, free_type_),
  PROTOBUF_FIELD_OFFSET(::YGBH::SC_SceneInfo, gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::YGBH::HitIcon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::YGBH::HitIcon, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::YGBH::CMD_3D_SC_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::YGBH::CMD_3D_SC_Result, icon_),
  PROTOBUF_FIELD_OFFSET(::YGBH::CMD_3D_SC_Result, hit_icon_),
  PROTOBUF_FIELD_OFFSET(::YGBH::CMD_3D_SC_Result, win_odd_),
  PROTOBUF_FIELD_OFFSET(::YGBH::CMD_3D_SC_Result, cur_gold_),
  PROTOBUF_FIELD_OFFSET(::YGBH::CMD_3D_SC_Result, win_gold_),
  PROTOBUF_FIELD_OFFSET(::YGBH::CMD_3D_SC_Result, total_win_gold_),
  PROTOBUF_FIELD_OFFSET(::YGBH::CMD_3D_SC_Result, is_small_game_),
  PROTOBUF_FIELD_OFFSET(::YGBH::CMD_3D_SC_Result, free_count_),
  PROTOBUF_FIELD_OFFSET(::YGBH::CMD_3D_SC_Result, price_gold_),
  PROTOBUF_FIELD_OFFSET(::YGBH::CMD_3D_SC_Result, multiple_),
  PROTOBUF_FIELD_OFFSET(::YGBH::CMD_3D_SC_Result, price_pool_percent_max_),
  PROTOBUF_FIELD_OFFSET(::YGBH::CMD_3D_SC_Result, small_num_),
  PROTOBUF_FIELD_OFFSET(::YGBH::CMD_3D_SC_Result, total_free_times_),
  PROTOBUF_FIELD_OFFSET(::YGBH::CMD_3D_SC_Result, prize_pool_wild_gold_),
  PROTOBUF_FIELD_OFFSET(::YGBH::CMD_3D_SC_Result, free_type_),
  PROTOBUF_FIELD_OFFSET(::YGBH::CMD_3D_SC_Result, icon_line_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::YGBH::CMD_3D_CS_StartGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::YGBH::CMD_3D_CS_StartGame, line_),
  PROTOBUF_FIELD_OFFSET(::YGBH::CMD_3D_CS_StartGame, bet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::YGBH::CMD_SC_SmallGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::YGBH::CMD_SC_SmallGame, gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::YGBH::CMD_SC_SmallGameEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::YGBH::CMD_SC_SmallGameEnd, index_),
  PROTOBUF_FIELD_OFFSET(::YGBH::CMD_SC_SmallGameEnd, gold_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::YGBH::SC_SceneInfo)},
  { 13, -1, sizeof(::YGBH::HitIcon)},
  { 19, -1, sizeof(::YGBH::CMD_3D_SC_Result)},
  { 40, -1, sizeof(::YGBH::CMD_3D_CS_StartGame)},
  { 47, -1, sizeof(::YGBH::CMD_SC_SmallGame)},
  { 53, -1, sizeof(::YGBH::CMD_SC_SmallGameEnd)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::YGBH::_SC_SceneInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::YGBH::_HitIcon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::YGBH::_CMD_3D_SC_Result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::YGBH::_CMD_3D_CS_StartGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::YGBH::_CMD_SC_SmallGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::YGBH::_CMD_SC_SmallGameEnd_default_instance_),
};

const char descriptor_table_protodef_YGBH_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nYGBH.proto\022\004YGBH\"\244\001\n\014SC_SceneInfo\022\022\n\nf"
  "ree_count\030\001 \001(\005\022\023\n\013current_bet\030\002 \001(\005\022\023\n\013"
  "gain_pei_lv\030\003 \001(\005\022\021\n\tbet_count\030\004 \001(\005\022\013\n\003"
  "bet\030\005 \003(\005\022\025\n\rfree_icon_lie\030\006 \003(\005\022\021\n\tfree"
  "_type\030\007 \001(\005\022\014\n\004gold\030\010 \003(\005\"\030\n\007HitIcon\022\r\n\005"
  "value\030\001 \003(\005\"\360\002\n\020CMD_3D_SC_Result\022\014\n\004icon"
  "\030\001 \003(\005\022\037\n\010hit_icon\030\002 \003(\0132\r.YGBH.HitIcon\022"
  "\017\n\007win_odd\030\003 \001(\005\022\020\n\010cur_gold\030\004 \001(\003\022\020\n\010wi"
  "n_gold\030\005 \001(\005\022\026\n\016total_win_gold\030\006 \001(\005\022\025\n\r"
  "is_small_game\030\007 \001(\005\022\022\n\nfree_count\030\010 \001(\005\022"
  "\022\n\nprice_gold\030\t \001(\005\022\020\n\010multiple\030\n \001(\005\022\036\n"
  "\026price_pool_percent_max\030\013 \001(\005\022\021\n\tsmall_n"
  "um\030\014 \001(\005\022\030\n\020total_free_times\030\r \001(\005\022\034\n\024pr"
  "ize_pool_wild_gold\030\016 \001(\005\022\021\n\tfree_type\030\017 "
  "\001(\005\022\021\n\ticon_line\030\020 \003(\005\"0\n\023CMD_3D_CS_Star"
  "tGame\022\014\n\004line\030\001 \001(\005\022\013\n\003bet\030\002 \001(\005\" \n\020CMD_"
  "SC_SmallGame\022\014\n\004gold\030\001 \003(\005\"2\n\023CMD_SC_Sma"
  "llGameEnd\022\r\n\005index\030\001 \001(\005\022\014\n\004gold\030\002 \001(\005*\262"
  "\001\n\006EMsgID\022\023\n\017SUB_SC_BET_FAIL\020\000\022\024\n\020SUB_SC"
  "_SMALLGAME\020\001\022\027\n\023SUB_SC_SMALLGAMEEND\020\002\022\025\n"
  "\021SUB_SC_START_GAME\020\003\022\025\n\021SUB_CS_GAME_STAR"
  "T\020\004\022\036\n\032SUB_CS_CHOSE_FREEGAME_TYPE\020\005\022\026\n\022S"
  "UB_CS_LITTLE_GAME\020\006b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_YGBH_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_YGBH_2eproto_sccs[6] = {
  &scc_info_CMD_3D_CS_StartGame_YGBH_2eproto.base,
  &scc_info_CMD_3D_SC_Result_YGBH_2eproto.base,
  &scc_info_CMD_SC_SmallGame_YGBH_2eproto.base,
  &scc_info_CMD_SC_SmallGameEnd_YGBH_2eproto.base,
  &scc_info_HitIcon_YGBH_2eproto.base,
  &scc_info_SC_SceneInfo_YGBH_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_YGBH_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_YGBH_2eproto = {
  false, false, descriptor_table_protodef_YGBH_2eproto, "YGBH.proto", 907,
  &descriptor_table_YGBH_2eproto_once, descriptor_table_YGBH_2eproto_sccs, descriptor_table_YGBH_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_YGBH_2eproto::offsets,
  file_level_metadata_YGBH_2eproto, 6, file_level_enum_descriptors_YGBH_2eproto, file_level_service_descriptors_YGBH_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_YGBH_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_YGBH_2eproto)), true);
namespace YGBH {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_YGBH_2eproto);
  return file_level_enum_descriptors_YGBH_2eproto[0];
}
bool EMsgID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SC_SceneInfo::_Internal {
 public:
};

SC_SceneInfo::SC_SceneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bet_(arena),
  free_icon_lie_(arena),
  gold_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:YGBH.SC_SceneInfo)
}
SC_SceneInfo::SC_SceneInfo(const SC_SceneInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bet_(from.bet_),
      free_icon_lie_(from.free_icon_lie_),
      gold_(from.gold_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&free_count_, &from.free_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&free_type_) -
    reinterpret_cast<char*>(&free_count_)) + sizeof(free_type_));
  // @@protoc_insertion_point(copy_constructor:YGBH.SC_SceneInfo)
}

void SC_SceneInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&free_count_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&free_type_) -
      reinterpret_cast<char*>(&free_count_)) + sizeof(free_type_));
}

SC_SceneInfo::~SC_SceneInfo() {
  // @@protoc_insertion_point(destructor:YGBH.SC_SceneInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SC_SceneInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SC_SceneInfo::ArenaDtor(void* object) {
  SC_SceneInfo* _this = reinterpret_cast< SC_SceneInfo* >(object);
  (void)_this;
}
void SC_SceneInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SC_SceneInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_SceneInfo& SC_SceneInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_SceneInfo_YGBH_2eproto.base);
  return *internal_default_instance();
}


void SC_SceneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:YGBH.SC_SceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bet_.Clear();
  free_icon_lie_.Clear();
  gold_.Clear();
  ::memset(&free_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&free_type_) -
      reinterpret_cast<char*>(&free_count_)) + sizeof(free_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_SceneInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 free_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          free_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 current_bet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          current_bet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gain_pei_lv = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gain_pei_lv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bet_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bet_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 bet = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bet(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_bet(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 free_icon_lie = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_free_icon_lie(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_free_icon_lie(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 free_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          free_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 gold = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_gold(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_gold(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_SceneInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:YGBH.SC_SceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 free_count = 1;
  if (this->free_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_free_count(), target);
  }

  // int32 current_bet = 2;
  if (this->current_bet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_current_bet(), target);
  }

  // int32 gain_pei_lv = 3;
  if (this->gain_pei_lv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_gain_pei_lv(), target);
  }

  // int32 bet_count = 4;
  if (this->bet_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_bet_count(), target);
  }

  // repeated int32 bet = 5;
  {
    int byte_size = _bet_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_bet(), byte_size, target);
    }
  }

  // repeated int32 free_icon_lie = 6;
  {
    int byte_size = _free_icon_lie_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_free_icon_lie(), byte_size, target);
    }
  }

  // int32 free_type = 7;
  if (this->free_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_free_type(), target);
  }

  // repeated int32 gold = 8;
  {
    int byte_size = _gold_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_gold(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YGBH.SC_SceneInfo)
  return target;
}

size_t SC_SceneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:YGBH.SC_SceneInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 bet = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bet_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bet_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 free_icon_lie = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->free_icon_lie_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _free_icon_lie_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 gold = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->gold_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _gold_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 free_count = 1;
  if (this->free_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_free_count());
  }

  // int32 current_bet = 2;
  if (this->current_bet() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_current_bet());
  }

  // int32 gain_pei_lv = 3;
  if (this->gain_pei_lv() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gain_pei_lv());
  }

  // int32 bet_count = 4;
  if (this->bet_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bet_count());
  }

  // int32 free_type = 7;
  if (this->free_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_free_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_SceneInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:YGBH.SC_SceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_SceneInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_SceneInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:YGBH.SC_SceneInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:YGBH.SC_SceneInfo)
    MergeFrom(*source);
  }
}

void SC_SceneInfo::MergeFrom(const SC_SceneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:YGBH.SC_SceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bet_.MergeFrom(from.bet_);
  free_icon_lie_.MergeFrom(from.free_icon_lie_);
  gold_.MergeFrom(from.gold_);
  if (from.free_count() != 0) {
    _internal_set_free_count(from._internal_free_count());
  }
  if (from.current_bet() != 0) {
    _internal_set_current_bet(from._internal_current_bet());
  }
  if (from.gain_pei_lv() != 0) {
    _internal_set_gain_pei_lv(from._internal_gain_pei_lv());
  }
  if (from.bet_count() != 0) {
    _internal_set_bet_count(from._internal_bet_count());
  }
  if (from.free_type() != 0) {
    _internal_set_free_type(from._internal_free_type());
  }
}

void SC_SceneInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:YGBH.SC_SceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SceneInfo::CopyFrom(const SC_SceneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:YGBH.SC_SceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_SceneInfo::IsInitialized() const {
  return true;
}

void SC_SceneInfo::InternalSwap(SC_SceneInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bet_.InternalSwap(&other->bet_);
  free_icon_lie_.InternalSwap(&other->free_icon_lie_);
  gold_.InternalSwap(&other->gold_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_SceneInfo, free_type_)
      + sizeof(SC_SceneInfo::free_type_)
      - PROTOBUF_FIELD_OFFSET(SC_SceneInfo, free_count_)>(
          reinterpret_cast<char*>(&free_count_),
          reinterpret_cast<char*>(&other->free_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_SceneInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HitIcon::_Internal {
 public:
};

HitIcon::HitIcon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:YGBH.HitIcon)
}
HitIcon::HitIcon(const HitIcon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:YGBH.HitIcon)
}

void HitIcon::SharedCtor() {
}

HitIcon::~HitIcon() {
  // @@protoc_insertion_point(destructor:YGBH.HitIcon)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HitIcon::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HitIcon::ArenaDtor(void* object) {
  HitIcon* _this = reinterpret_cast< HitIcon* >(object);
  (void)_this;
}
void HitIcon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HitIcon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HitIcon& HitIcon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HitIcon_YGBH_2eproto.base);
  return *internal_default_instance();
}


void HitIcon::Clear() {
// @@protoc_insertion_point(message_clear_start:YGBH.HitIcon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HitIcon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HitIcon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:YGBH.HitIcon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 value = 1;
  {
    int byte_size = _value_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_value(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YGBH.HitIcon)
  return target;
}

size_t HitIcon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:YGBH.HitIcon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 value = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->value_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HitIcon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:YGBH.HitIcon)
  GOOGLE_DCHECK_NE(&from, this);
  const HitIcon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HitIcon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:YGBH.HitIcon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:YGBH.HitIcon)
    MergeFrom(*source);
  }
}

void HitIcon::MergeFrom(const HitIcon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:YGBH.HitIcon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void HitIcon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:YGBH.HitIcon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HitIcon::CopyFrom(const HitIcon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:YGBH.HitIcon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HitIcon::IsInitialized() const {
  return true;
}

void HitIcon::InternalSwap(HitIcon* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HitIcon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_3D_SC_Result::_Internal {
 public:
};

CMD_3D_SC_Result::CMD_3D_SC_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  icon_(arena),
  hit_icon_(arena),
  icon_line_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:YGBH.CMD_3D_SC_Result)
}
CMD_3D_SC_Result::CMD_3D_SC_Result(const CMD_3D_SC_Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      icon_(from.icon_),
      hit_icon_(from.hit_icon_),
      icon_line_(from.icon_line_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cur_gold_, &from.cur_gold_,
    static_cast<size_t>(reinterpret_cast<char*>(&free_type_) -
    reinterpret_cast<char*>(&cur_gold_)) + sizeof(free_type_));
  // @@protoc_insertion_point(copy_constructor:YGBH.CMD_3D_SC_Result)
}

void CMD_3D_SC_Result::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMD_3D_SC_Result_YGBH_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&cur_gold_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&free_type_) -
      reinterpret_cast<char*>(&cur_gold_)) + sizeof(free_type_));
}

CMD_3D_SC_Result::~CMD_3D_SC_Result() {
  // @@protoc_insertion_point(destructor:YGBH.CMD_3D_SC_Result)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_3D_SC_Result::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_3D_SC_Result::ArenaDtor(void* object) {
  CMD_3D_SC_Result* _this = reinterpret_cast< CMD_3D_SC_Result* >(object);
  (void)_this;
}
void CMD_3D_SC_Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_3D_SC_Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_3D_SC_Result& CMD_3D_SC_Result::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_3D_SC_Result_YGBH_2eproto.base);
  return *internal_default_instance();
}


void CMD_3D_SC_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:YGBH.CMD_3D_SC_Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  icon_.Clear();
  hit_icon_.Clear();
  icon_line_.Clear();
  ::memset(&cur_gold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&free_type_) -
      reinterpret_cast<char*>(&cur_gold_)) + sizeof(free_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_3D_SC_Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 icon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_icon(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_icon(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .YGBH.HitIcon hit_icon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hit_icon(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 win_odd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          win_odd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cur_gold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          cur_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 win_gold = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          win_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_win_gold = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          total_win_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_small_game = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          is_small_game_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 free_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          free_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 price_gold = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          price_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 multiple = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 price_pool_percent_max = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          price_pool_percent_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 small_num = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          small_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_free_times = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          total_free_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 prize_pool_wild_gold = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          prize_pool_wild_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 free_type = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          free_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 icon_line = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_icon_line(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128) {
          _internal_add_icon_line(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_3D_SC_Result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:YGBH.CMD_3D_SC_Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 icon = 1;
  {
    int byte_size = _icon_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_icon(), byte_size, target);
    }
  }

  // repeated .YGBH.HitIcon hit_icon = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hit_icon_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_hit_icon(i), target, stream);
  }

  // int32 win_odd = 3;
  if (this->win_odd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_win_odd(), target);
  }

  // int64 cur_gold = 4;
  if (this->cur_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_cur_gold(), target);
  }

  // int32 win_gold = 5;
  if (this->win_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_win_gold(), target);
  }

  // int32 total_win_gold = 6;
  if (this->total_win_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_total_win_gold(), target);
  }

  // int32 is_small_game = 7;
  if (this->is_small_game() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_is_small_game(), target);
  }

  // int32 free_count = 8;
  if (this->free_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_free_count(), target);
  }

  // int32 price_gold = 9;
  if (this->price_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_price_gold(), target);
  }

  // int32 multiple = 10;
  if (this->multiple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_multiple(), target);
  }

  // int32 price_pool_percent_max = 11;
  if (this->price_pool_percent_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_price_pool_percent_max(), target);
  }

  // int32 small_num = 12;
  if (this->small_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_small_num(), target);
  }

  // int32 total_free_times = 13;
  if (this->total_free_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_total_free_times(), target);
  }

  // int32 prize_pool_wild_gold = 14;
  if (this->prize_pool_wild_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_prize_pool_wild_gold(), target);
  }

  // int32 free_type = 15;
  if (this->free_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_free_type(), target);
  }

  // repeated int32 icon_line = 16;
  {
    int byte_size = _icon_line_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          16, _internal_icon_line(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YGBH.CMD_3D_SC_Result)
  return target;
}

size_t CMD_3D_SC_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:YGBH.CMD_3D_SC_Result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 icon = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->icon_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _icon_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .YGBH.HitIcon hit_icon = 2;
  total_size += 1UL * this->_internal_hit_icon_size();
  for (const auto& msg : this->hit_icon_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 icon_line = 16;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->icon_line_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _icon_line_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 cur_gold = 4;
  if (this->cur_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cur_gold());
  }

  // int32 win_odd = 3;
  if (this->win_odd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_win_odd());
  }

  // int32 win_gold = 5;
  if (this->win_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_win_gold());
  }

  // int32 total_win_gold = 6;
  if (this->total_win_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_win_gold());
  }

  // int32 is_small_game = 7;
  if (this->is_small_game() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_small_game());
  }

  // int32 free_count = 8;
  if (this->free_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_free_count());
  }

  // int32 price_gold = 9;
  if (this->price_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_price_gold());
  }

  // int32 multiple = 10;
  if (this->multiple() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_multiple());
  }

  // int32 price_pool_percent_max = 11;
  if (this->price_pool_percent_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_price_pool_percent_max());
  }

  // int32 small_num = 12;
  if (this->small_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_small_num());
  }

  // int32 total_free_times = 13;
  if (this->total_free_times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_free_times());
  }

  // int32 prize_pool_wild_gold = 14;
  if (this->prize_pool_wild_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prize_pool_wild_gold());
  }

  // int32 free_type = 15;
  if (this->free_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_free_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_3D_SC_Result::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:YGBH.CMD_3D_SC_Result)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_3D_SC_Result* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_3D_SC_Result>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:YGBH.CMD_3D_SC_Result)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:YGBH.CMD_3D_SC_Result)
    MergeFrom(*source);
  }
}

void CMD_3D_SC_Result::MergeFrom(const CMD_3D_SC_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:YGBH.CMD_3D_SC_Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  icon_.MergeFrom(from.icon_);
  hit_icon_.MergeFrom(from.hit_icon_);
  icon_line_.MergeFrom(from.icon_line_);
  if (from.cur_gold() != 0) {
    _internal_set_cur_gold(from._internal_cur_gold());
  }
  if (from.win_odd() != 0) {
    _internal_set_win_odd(from._internal_win_odd());
  }
  if (from.win_gold() != 0) {
    _internal_set_win_gold(from._internal_win_gold());
  }
  if (from.total_win_gold() != 0) {
    _internal_set_total_win_gold(from._internal_total_win_gold());
  }
  if (from.is_small_game() != 0) {
    _internal_set_is_small_game(from._internal_is_small_game());
  }
  if (from.free_count() != 0) {
    _internal_set_free_count(from._internal_free_count());
  }
  if (from.price_gold() != 0) {
    _internal_set_price_gold(from._internal_price_gold());
  }
  if (from.multiple() != 0) {
    _internal_set_multiple(from._internal_multiple());
  }
  if (from.price_pool_percent_max() != 0) {
    _internal_set_price_pool_percent_max(from._internal_price_pool_percent_max());
  }
  if (from.small_num() != 0) {
    _internal_set_small_num(from._internal_small_num());
  }
  if (from.total_free_times() != 0) {
    _internal_set_total_free_times(from._internal_total_free_times());
  }
  if (from.prize_pool_wild_gold() != 0) {
    _internal_set_prize_pool_wild_gold(from._internal_prize_pool_wild_gold());
  }
  if (from.free_type() != 0) {
    _internal_set_free_type(from._internal_free_type());
  }
}

void CMD_3D_SC_Result::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:YGBH.CMD_3D_SC_Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_3D_SC_Result::CopyFrom(const CMD_3D_SC_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:YGBH.CMD_3D_SC_Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_3D_SC_Result::IsInitialized() const {
  return true;
}

void CMD_3D_SC_Result::InternalSwap(CMD_3D_SC_Result* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  icon_.InternalSwap(&other->icon_);
  hit_icon_.InternalSwap(&other->hit_icon_);
  icon_line_.InternalSwap(&other->icon_line_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_3D_SC_Result, free_type_)
      + sizeof(CMD_3D_SC_Result::free_type_)
      - PROTOBUF_FIELD_OFFSET(CMD_3D_SC_Result, cur_gold_)>(
          reinterpret_cast<char*>(&cur_gold_),
          reinterpret_cast<char*>(&other->cur_gold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_3D_SC_Result::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_3D_CS_StartGame::_Internal {
 public:
};

CMD_3D_CS_StartGame::CMD_3D_CS_StartGame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:YGBH.CMD_3D_CS_StartGame)
}
CMD_3D_CS_StartGame::CMD_3D_CS_StartGame(const CMD_3D_CS_StartGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&line_, &from.line_,
    static_cast<size_t>(reinterpret_cast<char*>(&bet_) -
    reinterpret_cast<char*>(&line_)) + sizeof(bet_));
  // @@protoc_insertion_point(copy_constructor:YGBH.CMD_3D_CS_StartGame)
}

void CMD_3D_CS_StartGame::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&line_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bet_) -
      reinterpret_cast<char*>(&line_)) + sizeof(bet_));
}

CMD_3D_CS_StartGame::~CMD_3D_CS_StartGame() {
  // @@protoc_insertion_point(destructor:YGBH.CMD_3D_CS_StartGame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_3D_CS_StartGame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_3D_CS_StartGame::ArenaDtor(void* object) {
  CMD_3D_CS_StartGame* _this = reinterpret_cast< CMD_3D_CS_StartGame* >(object);
  (void)_this;
}
void CMD_3D_CS_StartGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_3D_CS_StartGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_3D_CS_StartGame& CMD_3D_CS_StartGame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_3D_CS_StartGame_YGBH_2eproto.base);
  return *internal_default_instance();
}


void CMD_3D_CS_StartGame::Clear() {
// @@protoc_insertion_point(message_clear_start:YGBH.CMD_3D_CS_StartGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&line_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bet_) -
      reinterpret_cast<char*>(&line_)) + sizeof(bet_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_3D_CS_StartGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 line = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_3D_CS_StartGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:YGBH.CMD_3D_CS_StartGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 line = 1;
  if (this->line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_line(), target);
  }

  // int32 bet = 2;
  if (this->bet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bet(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YGBH.CMD_3D_CS_StartGame)
  return target;
}

size_t CMD_3D_CS_StartGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:YGBH.CMD_3D_CS_StartGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 line = 1;
  if (this->line() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_line());
  }

  // int32 bet = 2;
  if (this->bet() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bet());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_3D_CS_StartGame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:YGBH.CMD_3D_CS_StartGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_3D_CS_StartGame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_3D_CS_StartGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:YGBH.CMD_3D_CS_StartGame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:YGBH.CMD_3D_CS_StartGame)
    MergeFrom(*source);
  }
}

void CMD_3D_CS_StartGame::MergeFrom(const CMD_3D_CS_StartGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:YGBH.CMD_3D_CS_StartGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.line() != 0) {
    _internal_set_line(from._internal_line());
  }
  if (from.bet() != 0) {
    _internal_set_bet(from._internal_bet());
  }
}

void CMD_3D_CS_StartGame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:YGBH.CMD_3D_CS_StartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_3D_CS_StartGame::CopyFrom(const CMD_3D_CS_StartGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:YGBH.CMD_3D_CS_StartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_3D_CS_StartGame::IsInitialized() const {
  return true;
}

void CMD_3D_CS_StartGame::InternalSwap(CMD_3D_CS_StartGame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_3D_CS_StartGame, bet_)
      + sizeof(CMD_3D_CS_StartGame::bet_)
      - PROTOBUF_FIELD_OFFSET(CMD_3D_CS_StartGame, line_)>(
          reinterpret_cast<char*>(&line_),
          reinterpret_cast<char*>(&other->line_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_3D_CS_StartGame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_SC_SmallGame::_Internal {
 public:
};

CMD_SC_SmallGame::CMD_SC_SmallGame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  gold_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:YGBH.CMD_SC_SmallGame)
}
CMD_SC_SmallGame::CMD_SC_SmallGame(const CMD_SC_SmallGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      gold_(from.gold_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:YGBH.CMD_SC_SmallGame)
}

void CMD_SC_SmallGame::SharedCtor() {
}

CMD_SC_SmallGame::~CMD_SC_SmallGame() {
  // @@protoc_insertion_point(destructor:YGBH.CMD_SC_SmallGame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_SC_SmallGame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_SC_SmallGame::ArenaDtor(void* object) {
  CMD_SC_SmallGame* _this = reinterpret_cast< CMD_SC_SmallGame* >(object);
  (void)_this;
}
void CMD_SC_SmallGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_SC_SmallGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_SC_SmallGame& CMD_SC_SmallGame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_SC_SmallGame_YGBH_2eproto.base);
  return *internal_default_instance();
}


void CMD_SC_SmallGame::Clear() {
// @@protoc_insertion_point(message_clear_start:YGBH.CMD_SC_SmallGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gold_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_SC_SmallGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 gold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_gold(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_gold(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_SC_SmallGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:YGBH.CMD_SC_SmallGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 gold = 1;
  {
    int byte_size = _gold_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_gold(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YGBH.CMD_SC_SmallGame)
  return target;
}

size_t CMD_SC_SmallGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:YGBH.CMD_SC_SmallGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 gold = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->gold_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _gold_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_SC_SmallGame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:YGBH.CMD_SC_SmallGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_SC_SmallGame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_SC_SmallGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:YGBH.CMD_SC_SmallGame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:YGBH.CMD_SC_SmallGame)
    MergeFrom(*source);
  }
}

void CMD_SC_SmallGame::MergeFrom(const CMD_SC_SmallGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:YGBH.CMD_SC_SmallGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gold_.MergeFrom(from.gold_);
}

void CMD_SC_SmallGame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:YGBH.CMD_SC_SmallGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_SC_SmallGame::CopyFrom(const CMD_SC_SmallGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:YGBH.CMD_SC_SmallGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_SC_SmallGame::IsInitialized() const {
  return true;
}

void CMD_SC_SmallGame::InternalSwap(CMD_SC_SmallGame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gold_.InternalSwap(&other->gold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_SC_SmallGame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_SC_SmallGameEnd::_Internal {
 public:
};

CMD_SC_SmallGameEnd::CMD_SC_SmallGameEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:YGBH.CMD_SC_SmallGameEnd)
}
CMD_SC_SmallGameEnd::CMD_SC_SmallGameEnd(const CMD_SC_SmallGameEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&gold_) -
    reinterpret_cast<char*>(&index_)) + sizeof(gold_));
  // @@protoc_insertion_point(copy_constructor:YGBH.CMD_SC_SmallGameEnd)
}

void CMD_SC_SmallGameEnd::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&gold_) -
      reinterpret_cast<char*>(&index_)) + sizeof(gold_));
}

CMD_SC_SmallGameEnd::~CMD_SC_SmallGameEnd() {
  // @@protoc_insertion_point(destructor:YGBH.CMD_SC_SmallGameEnd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_SC_SmallGameEnd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_SC_SmallGameEnd::ArenaDtor(void* object) {
  CMD_SC_SmallGameEnd* _this = reinterpret_cast< CMD_SC_SmallGameEnd* >(object);
  (void)_this;
}
void CMD_SC_SmallGameEnd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_SC_SmallGameEnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_SC_SmallGameEnd& CMD_SC_SmallGameEnd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_SC_SmallGameEnd_YGBH_2eproto.base);
  return *internal_default_instance();
}


void CMD_SC_SmallGameEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:YGBH.CMD_SC_SmallGameEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gold_) -
      reinterpret_cast<char*>(&index_)) + sizeof(gold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_SC_SmallGameEnd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_SC_SmallGameEnd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:YGBH.CMD_SC_SmallGameEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 gold = 2;
  if (this->gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YGBH.CMD_SC_SmallGameEnd)
  return target;
}

size_t CMD_SC_SmallGameEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:YGBH.CMD_SC_SmallGameEnd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // int32 gold = 2;
  if (this->gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gold());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_SC_SmallGameEnd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:YGBH.CMD_SC_SmallGameEnd)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_SC_SmallGameEnd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_SC_SmallGameEnd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:YGBH.CMD_SC_SmallGameEnd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:YGBH.CMD_SC_SmallGameEnd)
    MergeFrom(*source);
  }
}

void CMD_SC_SmallGameEnd::MergeFrom(const CMD_SC_SmallGameEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:YGBH.CMD_SC_SmallGameEnd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
}

void CMD_SC_SmallGameEnd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:YGBH.CMD_SC_SmallGameEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_SC_SmallGameEnd::CopyFrom(const CMD_SC_SmallGameEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:YGBH.CMD_SC_SmallGameEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_SC_SmallGameEnd::IsInitialized() const {
  return true;
}

void CMD_SC_SmallGameEnd::InternalSwap(CMD_SC_SmallGameEnd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_SC_SmallGameEnd, gold_)
      + sizeof(CMD_SC_SmallGameEnd::gold_)
      - PROTOBUF_FIELD_OFFSET(CMD_SC_SmallGameEnd, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_SC_SmallGameEnd::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace YGBH
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::YGBH::SC_SceneInfo* Arena::CreateMaybeMessage< ::YGBH::SC_SceneInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::YGBH::SC_SceneInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::YGBH::HitIcon* Arena::CreateMaybeMessage< ::YGBH::HitIcon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::YGBH::HitIcon >(arena);
}
template<> PROTOBUF_NOINLINE ::YGBH::CMD_3D_SC_Result* Arena::CreateMaybeMessage< ::YGBH::CMD_3D_SC_Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::YGBH::CMD_3D_SC_Result >(arena);
}
template<> PROTOBUF_NOINLINE ::YGBH::CMD_3D_CS_StartGame* Arena::CreateMaybeMessage< ::YGBH::CMD_3D_CS_StartGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::YGBH::CMD_3D_CS_StartGame >(arena);
}
template<> PROTOBUF_NOINLINE ::YGBH::CMD_SC_SmallGame* Arena::CreateMaybeMessage< ::YGBH::CMD_SC_SmallGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::YGBH::CMD_SC_SmallGame >(arena);
}
template<> PROTOBUF_NOINLINE ::YGBH::CMD_SC_SmallGameEnd* Arena::CreateMaybeMessage< ::YGBH::CMD_SC_SmallGameEnd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::YGBH::CMD_SC_SmallGameEnd >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
