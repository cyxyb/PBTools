// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LH.proto

#include "LH.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_LH_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerInfo_LH_2eproto;
namespace LH {
class CMD_SC_NotifyStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_SC_NotifyStatus> _instance;
} _CMD_SC_NotifyStatus_default_instance_;
class PlayerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerInfo> _instance;
} _PlayerInfo_default_instance_;
class PlayerInfoTopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerInfoTop> _instance;
} _PlayerInfoTop_default_instance_;
class CMD_SC_ReusltPlatePathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_SC_ReusltPlatePath> _instance;
} _CMD_SC_ReusltPlatePath_default_instance_;
class CMD_SC_GameSceneInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_SC_GameSceneInfo> _instance;
} _CMD_SC_GameSceneInfo_default_instance_;
class CMD_SC_GameResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_SC_GameResult> _instance;
} _CMD_SC_GameResult_default_instance_;
class CMD_SC_AddBetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_SC_AddBet> _instance;
} _CMD_SC_AddBet_default_instance_;
class CMD_SC_AddBetAgainDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_SC_AddBetAgain> _instance;
} _CMD_SC_AddBetAgain_default_instance_;
class CMD_CS_AddBetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_CS_AddBet> _instance;
} _CMD_CS_AddBet_default_instance_;
class CMD_CS_AddBetAgainDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_CS_AddBetAgain> _instance;
} _CMD_CS_AddBetAgain_default_instance_;
}  // namespace LH
static void InitDefaultsscc_info_CMD_CS_AddBet_LH_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LH::_CMD_CS_AddBet_default_instance_;
    new (ptr) ::LH::CMD_CS_AddBet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_CS_AddBet_LH_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_CS_AddBet_LH_2eproto}, {}};

static void InitDefaultsscc_info_CMD_CS_AddBetAgain_LH_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LH::_CMD_CS_AddBetAgain_default_instance_;
    new (ptr) ::LH::CMD_CS_AddBetAgain();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_CS_AddBetAgain_LH_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_CS_AddBetAgain_LH_2eproto}, {}};

static void InitDefaultsscc_info_CMD_SC_AddBet_LH_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LH::_CMD_SC_AddBet_default_instance_;
    new (ptr) ::LH::CMD_SC_AddBet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_SC_AddBet_LH_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_SC_AddBet_LH_2eproto}, {}};

static void InitDefaultsscc_info_CMD_SC_AddBetAgain_LH_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LH::_CMD_SC_AddBetAgain_default_instance_;
    new (ptr) ::LH::CMD_SC_AddBetAgain();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_SC_AddBetAgain_LH_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_SC_AddBetAgain_LH_2eproto}, {}};

static void InitDefaultsscc_info_CMD_SC_GameResult_LH_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LH::_CMD_SC_GameResult_default_instance_;
    new (ptr) ::LH::CMD_SC_GameResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_SC_GameResult_LH_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_SC_GameResult_LH_2eproto}, {}};

static void InitDefaultsscc_info_CMD_SC_GameSceneInfo_LH_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LH::_CMD_SC_GameSceneInfo_default_instance_;
    new (ptr) ::LH::CMD_SC_GameSceneInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_SC_GameSceneInfo_LH_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_SC_GameSceneInfo_LH_2eproto}, {}};

static void InitDefaultsscc_info_CMD_SC_NotifyStatus_LH_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LH::_CMD_SC_NotifyStatus_default_instance_;
    new (ptr) ::LH::CMD_SC_NotifyStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_SC_NotifyStatus_LH_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_SC_NotifyStatus_LH_2eproto}, {}};

static void InitDefaultsscc_info_CMD_SC_ReusltPlatePath_LH_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LH::_CMD_SC_ReusltPlatePath_default_instance_;
    new (ptr) ::LH::CMD_SC_ReusltPlatePath();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_SC_ReusltPlatePath_LH_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_SC_ReusltPlatePath_LH_2eproto}, {}};

static void InitDefaultsscc_info_PlayerInfo_LH_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LH::_PlayerInfo_default_instance_;
    new (ptr) ::LH::PlayerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerInfo_LH_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerInfo_LH_2eproto}, {}};

static void InitDefaultsscc_info_PlayerInfoTop_LH_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LH::_PlayerInfoTop_default_instance_;
    new (ptr) ::LH::PlayerInfoTop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlayerInfoTop_LH_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PlayerInfoTop_LH_2eproto}, {
      &scc_info_PlayerInfo_LH_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_LH_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_LH_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_LH_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_LH_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LH::CMD_SC_NotifyStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LH::CMD_SC_NotifyStatus, game_state_),
  PROTOBUF_FIELD_OFFSET(::LH::CMD_SC_NotifyStatus, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LH::PlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LH::PlayerInfo, game_bet_),
  PROTOBUF_FIELD_OFFSET(::LH::PlayerInfo, win_count_),
  PROTOBUF_FIELD_OFFSET(::LH::PlayerInfo, bet_dragon_),
  PROTOBUF_FIELD_OFFSET(::LH::PlayerInfo, bet_tiger_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LH::PlayerInfoTop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LH::PlayerInfoTop, top_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LH::CMD_SC_ReusltPlatePath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LH::CMD_SC_ReusltPlatePath, game_plate_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LH::CMD_SC_GameSceneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LH::CMD_SC_GameSceneInfo, game_state_info_),
  PROTOBUF_FIELD_OFFSET(::LH::CMD_SC_GameSceneInfo, game_times_),
  PROTOBUF_FIELD_OFFSET(::LH::CMD_SC_GameSceneInfo, game_bet_),
  PROTOBUF_FIELD_OFFSET(::LH::CMD_SC_GameSceneInfo, player_bet_area_limit_),
  PROTOBUF_FIELD_OFFSET(::LH::CMD_SC_GameSceneInfo, game_bet_area_limit_),
  PROTOBUF_FIELD_OFFSET(::LH::CMD_SC_GameSceneInfo, bet_config_),
  PROTOBUF_FIELD_OFFSET(::LH::CMD_SC_GameSceneInfo, aera_multiple_),
  PROTOBUF_FIELD_OFFSET(::LH::CMD_SC_GameSceneInfo, game_poker_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LH::CMD_SC_GameResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LH::CMD_SC_GameResult, game_crad_),
  PROTOBUF_FIELD_OFFSET(::LH::CMD_SC_GameResult, aera_win_),
  PROTOBUF_FIELD_OFFSET(::LH::CMD_SC_GameResult, game_resul_twin_),
  PROTOBUF_FIELD_OFFSET(::LH::CMD_SC_GameResult, game_poker_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LH::CMD_SC_AddBet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LH::CMD_SC_AddBet, chair_id_),
  PROTOBUF_FIELD_OFFSET(::LH::CMD_SC_AddBet, bet_aera_),
  PROTOBUF_FIELD_OFFSET(::LH::CMD_SC_AddBet, bet_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LH::CMD_SC_AddBetAgain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LH::CMD_SC_AddBetAgain, chair_id_),
  PROTOBUF_FIELD_OFFSET(::LH::CMD_SC_AddBetAgain, bet_aera_),
  PROTOBUF_FIELD_OFFSET(::LH::CMD_SC_AddBetAgain, bet_index_),
  PROTOBUF_FIELD_OFFSET(::LH::CMD_SC_AddBetAgain, bet_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LH::CMD_CS_AddBet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LH::CMD_CS_AddBet, bet_aera_),
  PROTOBUF_FIELD_OFFSET(::LH::CMD_CS_AddBet, bet_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LH::CMD_CS_AddBetAgain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LH::CMD_CS_AddBetAgain, bet_aera_),
  PROTOBUF_FIELD_OFFSET(::LH::CMD_CS_AddBetAgain, bet_index_),
  PROTOBUF_FIELD_OFFSET(::LH::CMD_CS_AddBetAgain, bet_num_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::LH::CMD_SC_NotifyStatus)},
  { 7, -1, sizeof(::LH::PlayerInfo)},
  { 16, -1, sizeof(::LH::PlayerInfoTop)},
  { 22, -1, sizeof(::LH::CMD_SC_ReusltPlatePath)},
  { 28, -1, sizeof(::LH::CMD_SC_GameSceneInfo)},
  { 41, -1, sizeof(::LH::CMD_SC_GameResult)},
  { 50, -1, sizeof(::LH::CMD_SC_AddBet)},
  { 58, -1, sizeof(::LH::CMD_SC_AddBetAgain)},
  { 67, -1, sizeof(::LH::CMD_CS_AddBet)},
  { 74, -1, sizeof(::LH::CMD_CS_AddBetAgain)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LH::_CMD_SC_NotifyStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LH::_PlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LH::_PlayerInfoTop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LH::_CMD_SC_ReusltPlatePath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LH::_CMD_SC_GameSceneInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LH::_CMD_SC_GameResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LH::_CMD_SC_AddBet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LH::_CMD_SC_AddBetAgain_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LH::_CMD_CS_AddBet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LH::_CMD_CS_AddBetAgain_default_instance_),
};

const char descriptor_table_protodef_LH_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010LH.proto\022\002LH\"7\n\023CMD_SC_NotifyStatus\022\022\n"
  "\ngame_state\030\001 \001(\005\022\014\n\004time\030\002 \001(\005\"X\n\nPlaye"
  "rInfo\022\020\n\010game_bet\030\001 \001(\003\022\021\n\twin_count\030\002 \001"
  "(\005\022\022\n\nbet_dragon\030\003 \001(\005\022\021\n\tbet_tiger\030\004 \001("
  "\005\",\n\rPlayerInfoTop\022\033\n\003top\030\001 \003(\0132\016.LH.Pla"
  "yerInfo\"1\n\026CMD_SC_ReusltPlatePath\022\027\n\017gam"
  "e_plate_path\030\001 \003(\005\"\324\001\n\024CMD_SC_GameSceneI"
  "nfo\022\027\n\017game_state_info\030\001 \001(\005\022\022\n\ngame_tim"
  "es\030\002 \001(\005\022\020\n\010game_bet\030\003 \003(\005\022\035\n\025player_bet"
  "_area_limit\030\004 \001(\005\022\033\n\023game_bet_area_limit"
  "\030\005 \003(\005\022\022\n\nbet_config\030\006 \003(\005\022\025\n\raera_multi"
  "ple\030\007 \003(\005\022\026\n\016game_poker_num\030\010 \001(\005\"i\n\021CMD"
  "_SC_GameResult\022\021\n\tgame_crad\030\001 \003(\005\022\020\n\010aer"
  "a_win\030\002 \001(\005\022\027\n\017game_resul_twin\030\003 \003(\005\022\026\n\016"
  "game_poker_num\030\004 \001(\005\"F\n\rCMD_SC_AddBet\022\020\n"
  "\010chair_id\030\001 \001(\005\022\020\n\010bet_aera\030\002 \001(\005\022\021\n\tbet"
  "_index\030\003 \001(\005\"\\\n\022CMD_SC_AddBetAgain\022\020\n\010ch"
  "air_id\030\001 \001(\005\022\020\n\010bet_aera\030\002 \001(\005\022\021\n\tbet_in"
  "dex\030\003 \001(\005\022\017\n\007bet_num\030\004 \001(\005\"4\n\rCMD_CS_Add"
  "Bet\022\020\n\010bet_aera\030\001 \001(\005\022\021\n\tbet_index\030\002 \001(\005"
  "\"J\n\022CMD_CS_AddBetAgain\022\020\n\010bet_aera\030\001 \001(\005"
  "\022\021\n\tbet_index\030\002 \001(\005\022\017\n\007bet_num\030\003 \001(\005*\227\002\n"
  "\010EMsgIDLH\022\024\n\020SUB_SC_SCENEINFO\020\000\022\021\n\rSUB_S"
  "C_ADDBET\020\001\022\023\n\017SUB_SC_BETAGAIN\020\002\022\025\n\021SUB_S"
  "C_GAMERESULT\020\003\022\027\n\023CMD_SC_NOTIFYSTATUS\020\004\022"
  "\033\n\027SUB_S_CHECK_ROBOT_LEAVE\020\005\022\021\n\rCMD_SC_A"
  "I_BET\020\006\022\026\n\022SUB_SC_GAMEGOLDTOP\020\007\022\024\n\020SUB_S"
  "C_GAMRECORD\020\010\022\027\n\023SUB_SC_AI_BET_ERROR\020\t\022\021"
  "\n\rSUB_CS_ADDBET\020\n\022\023\n\017SUB_CS_BETAGAIN\020\013b\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_LH_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_LH_2eproto_sccs[10] = {
  &scc_info_CMD_CS_AddBet_LH_2eproto.base,
  &scc_info_CMD_CS_AddBetAgain_LH_2eproto.base,
  &scc_info_CMD_SC_AddBet_LH_2eproto.base,
  &scc_info_CMD_SC_AddBetAgain_LH_2eproto.base,
  &scc_info_CMD_SC_GameResult_LH_2eproto.base,
  &scc_info_CMD_SC_GameSceneInfo_LH_2eproto.base,
  &scc_info_CMD_SC_NotifyStatus_LH_2eproto.base,
  &scc_info_CMD_SC_ReusltPlatePath_LH_2eproto.base,
  &scc_info_PlayerInfo_LH_2eproto.base,
  &scc_info_PlayerInfoTop_LH_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_LH_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LH_2eproto = {
  false, false, descriptor_table_protodef_LH_2eproto, "LH.proto", 1166,
  &descriptor_table_LH_2eproto_once, descriptor_table_LH_2eproto_sccs, descriptor_table_LH_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_LH_2eproto::offsets,
  file_level_metadata_LH_2eproto, 10, file_level_enum_descriptors_LH_2eproto, file_level_service_descriptors_LH_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_LH_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_LH_2eproto)), true);
namespace LH {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDLH_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_LH_2eproto);
  return file_level_enum_descriptors_LH_2eproto[0];
}
bool EMsgIDLH_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMD_SC_NotifyStatus::_Internal {
 public:
};

CMD_SC_NotifyStatus::CMD_SC_NotifyStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LH.CMD_SC_NotifyStatus)
}
CMD_SC_NotifyStatus::CMD_SC_NotifyStatus(const CMD_SC_NotifyStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&game_state_, &from.game_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&game_state_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:LH.CMD_SC_NotifyStatus)
}

void CMD_SC_NotifyStatus::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&game_state_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&game_state_)) + sizeof(time_));
}

CMD_SC_NotifyStatus::~CMD_SC_NotifyStatus() {
  // @@protoc_insertion_point(destructor:LH.CMD_SC_NotifyStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_SC_NotifyStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_SC_NotifyStatus::ArenaDtor(void* object) {
  CMD_SC_NotifyStatus* _this = reinterpret_cast< CMD_SC_NotifyStatus* >(object);
  (void)_this;
}
void CMD_SC_NotifyStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_SC_NotifyStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_SC_NotifyStatus& CMD_SC_NotifyStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_SC_NotifyStatus_LH_2eproto.base);
  return *internal_default_instance();
}


void CMD_SC_NotifyStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:LH.CMD_SC_NotifyStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&game_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&game_state_)) + sizeof(time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_SC_NotifyStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 game_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          game_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_SC_NotifyStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LH.CMD_SC_NotifyStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 game_state = 1;
  if (this->game_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_game_state(), target);
  }

  // int32 time = 2;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LH.CMD_SC_NotifyStatus)
  return target;
}

size_t CMD_SC_NotifyStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LH.CMD_SC_NotifyStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 game_state = 1;
  if (this->game_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_state());
  }

  // int32 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_SC_NotifyStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LH.CMD_SC_NotifyStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_SC_NotifyStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_SC_NotifyStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LH.CMD_SC_NotifyStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LH.CMD_SC_NotifyStatus)
    MergeFrom(*source);
  }
}

void CMD_SC_NotifyStatus::MergeFrom(const CMD_SC_NotifyStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LH.CMD_SC_NotifyStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.game_state() != 0) {
    _internal_set_game_state(from._internal_game_state());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
}

void CMD_SC_NotifyStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LH.CMD_SC_NotifyStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_SC_NotifyStatus::CopyFrom(const CMD_SC_NotifyStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LH.CMD_SC_NotifyStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_SC_NotifyStatus::IsInitialized() const {
  return true;
}

void CMD_SC_NotifyStatus::InternalSwap(CMD_SC_NotifyStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_SC_NotifyStatus, time_)
      + sizeof(CMD_SC_NotifyStatus::time_)
      - PROTOBUF_FIELD_OFFSET(CMD_SC_NotifyStatus, game_state_)>(
          reinterpret_cast<char*>(&game_state_),
          reinterpret_cast<char*>(&other->game_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_SC_NotifyStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PlayerInfo::_Internal {
 public:
};

PlayerInfo::PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LH.PlayerInfo)
}
PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&game_bet_, &from.game_bet_,
    static_cast<size_t>(reinterpret_cast<char*>(&bet_tiger_) -
    reinterpret_cast<char*>(&game_bet_)) + sizeof(bet_tiger_));
  // @@protoc_insertion_point(copy_constructor:LH.PlayerInfo)
}

void PlayerInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&game_bet_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bet_tiger_) -
      reinterpret_cast<char*>(&game_bet_)) + sizeof(bet_tiger_));
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:LH.PlayerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlayerInfo::ArenaDtor(void* object) {
  PlayerInfo* _this = reinterpret_cast< PlayerInfo* >(object);
  (void)_this;
}
void PlayerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerInfo& PlayerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerInfo_LH_2eproto.base);
  return *internal_default_instance();
}


void PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:LH.PlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&game_bet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bet_tiger_) -
      reinterpret_cast<char*>(&game_bet_)) + sizeof(bet_tiger_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 game_bet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          game_bet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 win_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          win_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bet_dragon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bet_dragon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bet_tiger = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bet_tiger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LH.PlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 game_bet = 1;
  if (this->game_bet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_game_bet(), target);
  }

  // int32 win_count = 2;
  if (this->win_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_win_count(), target);
  }

  // int32 bet_dragon = 3;
  if (this->bet_dragon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_bet_dragon(), target);
  }

  // int32 bet_tiger = 4;
  if (this->bet_tiger() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_bet_tiger(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LH.PlayerInfo)
  return target;
}

size_t PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LH.PlayerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 game_bet = 1;
  if (this->game_bet() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_game_bet());
  }

  // int32 win_count = 2;
  if (this->win_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_win_count());
  }

  // int32 bet_dragon = 3;
  if (this->bet_dragon() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bet_dragon());
  }

  // int32 bet_tiger = 4;
  if (this->bet_tiger() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bet_tiger());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LH.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LH.PlayerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LH.PlayerInfo)
    MergeFrom(*source);
  }
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LH.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.game_bet() != 0) {
    _internal_set_game_bet(from._internal_game_bet());
  }
  if (from.win_count() != 0) {
    _internal_set_win_count(from._internal_win_count());
  }
  if (from.bet_dragon() != 0) {
    _internal_set_bet_dragon(from._internal_bet_dragon());
  }
  if (from.bet_tiger() != 0) {
    _internal_set_bet_tiger(from._internal_bet_tiger());
  }
}

void PlayerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LH.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LH.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  return true;
}

void PlayerInfo::InternalSwap(PlayerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerInfo, bet_tiger_)
      + sizeof(PlayerInfo::bet_tiger_)
      - PROTOBUF_FIELD_OFFSET(PlayerInfo, game_bet_)>(
          reinterpret_cast<char*>(&game_bet_),
          reinterpret_cast<char*>(&other->game_bet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PlayerInfoTop::_Internal {
 public:
};

PlayerInfoTop::PlayerInfoTop(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  top_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LH.PlayerInfoTop)
}
PlayerInfoTop::PlayerInfoTop(const PlayerInfoTop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      top_(from.top_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LH.PlayerInfoTop)
}

void PlayerInfoTop::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerInfoTop_LH_2eproto.base);
}

PlayerInfoTop::~PlayerInfoTop() {
  // @@protoc_insertion_point(destructor:LH.PlayerInfoTop)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerInfoTop::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlayerInfoTop::ArenaDtor(void* object) {
  PlayerInfoTop* _this = reinterpret_cast< PlayerInfoTop* >(object);
  (void)_this;
}
void PlayerInfoTop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerInfoTop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerInfoTop& PlayerInfoTop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerInfoTop_LH_2eproto.base);
  return *internal_default_instance();
}


void PlayerInfoTop::Clear() {
// @@protoc_insertion_point(message_clear_start:LH.PlayerInfoTop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  top_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInfoTop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .LH.PlayerInfo top = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_top(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerInfoTop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LH.PlayerInfoTop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .LH.PlayerInfo top = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_top_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_top(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LH.PlayerInfoTop)
  return target;
}

size_t PlayerInfoTop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LH.PlayerInfoTop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LH.PlayerInfo top = 1;
  total_size += 1UL * this->_internal_top_size();
  for (const auto& msg : this->top_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerInfoTop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LH.PlayerInfoTop)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerInfoTop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerInfoTop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LH.PlayerInfoTop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LH.PlayerInfoTop)
    MergeFrom(*source);
  }
}

void PlayerInfoTop::MergeFrom(const PlayerInfoTop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LH.PlayerInfoTop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  top_.MergeFrom(from.top_);
}

void PlayerInfoTop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LH.PlayerInfoTop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfoTop::CopyFrom(const PlayerInfoTop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LH.PlayerInfoTop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoTop::IsInitialized() const {
  return true;
}

void PlayerInfoTop::InternalSwap(PlayerInfoTop* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  top_.InternalSwap(&other->top_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInfoTop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_SC_ReusltPlatePath::_Internal {
 public:
};

CMD_SC_ReusltPlatePath::CMD_SC_ReusltPlatePath(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  game_plate_path_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LH.CMD_SC_ReusltPlatePath)
}
CMD_SC_ReusltPlatePath::CMD_SC_ReusltPlatePath(const CMD_SC_ReusltPlatePath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      game_plate_path_(from.game_plate_path_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LH.CMD_SC_ReusltPlatePath)
}

void CMD_SC_ReusltPlatePath::SharedCtor() {
}

CMD_SC_ReusltPlatePath::~CMD_SC_ReusltPlatePath() {
  // @@protoc_insertion_point(destructor:LH.CMD_SC_ReusltPlatePath)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_SC_ReusltPlatePath::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_SC_ReusltPlatePath::ArenaDtor(void* object) {
  CMD_SC_ReusltPlatePath* _this = reinterpret_cast< CMD_SC_ReusltPlatePath* >(object);
  (void)_this;
}
void CMD_SC_ReusltPlatePath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_SC_ReusltPlatePath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_SC_ReusltPlatePath& CMD_SC_ReusltPlatePath::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_SC_ReusltPlatePath_LH_2eproto.base);
  return *internal_default_instance();
}


void CMD_SC_ReusltPlatePath::Clear() {
// @@protoc_insertion_point(message_clear_start:LH.CMD_SC_ReusltPlatePath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_plate_path_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_SC_ReusltPlatePath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 game_plate_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_game_plate_path(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_game_plate_path(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_SC_ReusltPlatePath::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LH.CMD_SC_ReusltPlatePath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 game_plate_path = 1;
  {
    int byte_size = _game_plate_path_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_game_plate_path(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LH.CMD_SC_ReusltPlatePath)
  return target;
}

size_t CMD_SC_ReusltPlatePath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LH.CMD_SC_ReusltPlatePath)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 game_plate_path = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->game_plate_path_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _game_plate_path_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_SC_ReusltPlatePath::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LH.CMD_SC_ReusltPlatePath)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_SC_ReusltPlatePath* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_SC_ReusltPlatePath>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LH.CMD_SC_ReusltPlatePath)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LH.CMD_SC_ReusltPlatePath)
    MergeFrom(*source);
  }
}

void CMD_SC_ReusltPlatePath::MergeFrom(const CMD_SC_ReusltPlatePath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LH.CMD_SC_ReusltPlatePath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  game_plate_path_.MergeFrom(from.game_plate_path_);
}

void CMD_SC_ReusltPlatePath::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LH.CMD_SC_ReusltPlatePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_SC_ReusltPlatePath::CopyFrom(const CMD_SC_ReusltPlatePath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LH.CMD_SC_ReusltPlatePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_SC_ReusltPlatePath::IsInitialized() const {
  return true;
}

void CMD_SC_ReusltPlatePath::InternalSwap(CMD_SC_ReusltPlatePath* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  game_plate_path_.InternalSwap(&other->game_plate_path_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_SC_ReusltPlatePath::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_SC_GameSceneInfo::_Internal {
 public:
};

CMD_SC_GameSceneInfo::CMD_SC_GameSceneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  game_bet_(arena),
  game_bet_area_limit_(arena),
  bet_config_(arena),
  aera_multiple_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LH.CMD_SC_GameSceneInfo)
}
CMD_SC_GameSceneInfo::CMD_SC_GameSceneInfo(const CMD_SC_GameSceneInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      game_bet_(from.game_bet_),
      game_bet_area_limit_(from.game_bet_area_limit_),
      bet_config_(from.bet_config_),
      aera_multiple_(from.aera_multiple_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&game_state_info_, &from.game_state_info_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_poker_num_) -
    reinterpret_cast<char*>(&game_state_info_)) + sizeof(game_poker_num_));
  // @@protoc_insertion_point(copy_constructor:LH.CMD_SC_GameSceneInfo)
}

void CMD_SC_GameSceneInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&game_state_info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&game_poker_num_) -
      reinterpret_cast<char*>(&game_state_info_)) + sizeof(game_poker_num_));
}

CMD_SC_GameSceneInfo::~CMD_SC_GameSceneInfo() {
  // @@protoc_insertion_point(destructor:LH.CMD_SC_GameSceneInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_SC_GameSceneInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_SC_GameSceneInfo::ArenaDtor(void* object) {
  CMD_SC_GameSceneInfo* _this = reinterpret_cast< CMD_SC_GameSceneInfo* >(object);
  (void)_this;
}
void CMD_SC_GameSceneInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_SC_GameSceneInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_SC_GameSceneInfo& CMD_SC_GameSceneInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_SC_GameSceneInfo_LH_2eproto.base);
  return *internal_default_instance();
}


void CMD_SC_GameSceneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:LH.CMD_SC_GameSceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_bet_.Clear();
  game_bet_area_limit_.Clear();
  bet_config_.Clear();
  aera_multiple_.Clear();
  ::memset(&game_state_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_poker_num_) -
      reinterpret_cast<char*>(&game_state_info_)) + sizeof(game_poker_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_SC_GameSceneInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 game_state_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          game_state_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 game_times = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          game_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 game_bet = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_game_bet(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_game_bet(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 player_bet_area_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          player_bet_area_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 game_bet_area_limit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_game_bet_area_limit(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_game_bet_area_limit(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 bet_config = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bet_config(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_bet_config(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 aera_multiple = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_aera_multiple(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_aera_multiple(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 game_poker_num = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          game_poker_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_SC_GameSceneInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LH.CMD_SC_GameSceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 game_state_info = 1;
  if (this->game_state_info() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_game_state_info(), target);
  }

  // int32 game_times = 2;
  if (this->game_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_game_times(), target);
  }

  // repeated int32 game_bet = 3;
  {
    int byte_size = _game_bet_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_game_bet(), byte_size, target);
    }
  }

  // int32 player_bet_area_limit = 4;
  if (this->player_bet_area_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_player_bet_area_limit(), target);
  }

  // repeated int32 game_bet_area_limit = 5;
  {
    int byte_size = _game_bet_area_limit_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_game_bet_area_limit(), byte_size, target);
    }
  }

  // repeated int32 bet_config = 6;
  {
    int byte_size = _bet_config_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_bet_config(), byte_size, target);
    }
  }

  // repeated int32 aera_multiple = 7;
  {
    int byte_size = _aera_multiple_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_aera_multiple(), byte_size, target);
    }
  }

  // int32 game_poker_num = 8;
  if (this->game_poker_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_game_poker_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LH.CMD_SC_GameSceneInfo)
  return target;
}

size_t CMD_SC_GameSceneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LH.CMD_SC_GameSceneInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 game_bet = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->game_bet_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _game_bet_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 game_bet_area_limit = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->game_bet_area_limit_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _game_bet_area_limit_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 bet_config = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bet_config_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bet_config_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 aera_multiple = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->aera_multiple_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _aera_multiple_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 game_state_info = 1;
  if (this->game_state_info() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_state_info());
  }

  // int32 game_times = 2;
  if (this->game_times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_times());
  }

  // int32 player_bet_area_limit = 4;
  if (this->player_bet_area_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_bet_area_limit());
  }

  // int32 game_poker_num = 8;
  if (this->game_poker_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_poker_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_SC_GameSceneInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LH.CMD_SC_GameSceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_SC_GameSceneInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_SC_GameSceneInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LH.CMD_SC_GameSceneInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LH.CMD_SC_GameSceneInfo)
    MergeFrom(*source);
  }
}

void CMD_SC_GameSceneInfo::MergeFrom(const CMD_SC_GameSceneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LH.CMD_SC_GameSceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  game_bet_.MergeFrom(from.game_bet_);
  game_bet_area_limit_.MergeFrom(from.game_bet_area_limit_);
  bet_config_.MergeFrom(from.bet_config_);
  aera_multiple_.MergeFrom(from.aera_multiple_);
  if (from.game_state_info() != 0) {
    _internal_set_game_state_info(from._internal_game_state_info());
  }
  if (from.game_times() != 0) {
    _internal_set_game_times(from._internal_game_times());
  }
  if (from.player_bet_area_limit() != 0) {
    _internal_set_player_bet_area_limit(from._internal_player_bet_area_limit());
  }
  if (from.game_poker_num() != 0) {
    _internal_set_game_poker_num(from._internal_game_poker_num());
  }
}

void CMD_SC_GameSceneInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LH.CMD_SC_GameSceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_SC_GameSceneInfo::CopyFrom(const CMD_SC_GameSceneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LH.CMD_SC_GameSceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_SC_GameSceneInfo::IsInitialized() const {
  return true;
}

void CMD_SC_GameSceneInfo::InternalSwap(CMD_SC_GameSceneInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  game_bet_.InternalSwap(&other->game_bet_);
  game_bet_area_limit_.InternalSwap(&other->game_bet_area_limit_);
  bet_config_.InternalSwap(&other->bet_config_);
  aera_multiple_.InternalSwap(&other->aera_multiple_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_SC_GameSceneInfo, game_poker_num_)
      + sizeof(CMD_SC_GameSceneInfo::game_poker_num_)
      - PROTOBUF_FIELD_OFFSET(CMD_SC_GameSceneInfo, game_state_info_)>(
          reinterpret_cast<char*>(&game_state_info_),
          reinterpret_cast<char*>(&other->game_state_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_SC_GameSceneInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_SC_GameResult::_Internal {
 public:
};

CMD_SC_GameResult::CMD_SC_GameResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  game_crad_(arena),
  game_resul_twin_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LH.CMD_SC_GameResult)
}
CMD_SC_GameResult::CMD_SC_GameResult(const CMD_SC_GameResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      game_crad_(from.game_crad_),
      game_resul_twin_(from.game_resul_twin_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&aera_win_, &from.aera_win_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_poker_num_) -
    reinterpret_cast<char*>(&aera_win_)) + sizeof(game_poker_num_));
  // @@protoc_insertion_point(copy_constructor:LH.CMD_SC_GameResult)
}

void CMD_SC_GameResult::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&aera_win_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&game_poker_num_) -
      reinterpret_cast<char*>(&aera_win_)) + sizeof(game_poker_num_));
}

CMD_SC_GameResult::~CMD_SC_GameResult() {
  // @@protoc_insertion_point(destructor:LH.CMD_SC_GameResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_SC_GameResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_SC_GameResult::ArenaDtor(void* object) {
  CMD_SC_GameResult* _this = reinterpret_cast< CMD_SC_GameResult* >(object);
  (void)_this;
}
void CMD_SC_GameResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_SC_GameResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_SC_GameResult& CMD_SC_GameResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_SC_GameResult_LH_2eproto.base);
  return *internal_default_instance();
}


void CMD_SC_GameResult::Clear() {
// @@protoc_insertion_point(message_clear_start:LH.CMD_SC_GameResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_crad_.Clear();
  game_resul_twin_.Clear();
  ::memset(&aera_win_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_poker_num_) -
      reinterpret_cast<char*>(&aera_win_)) + sizeof(game_poker_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_SC_GameResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 game_crad = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_game_crad(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_game_crad(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 aera_win = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          aera_win_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 game_resul_twin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_game_resul_twin(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_game_resul_twin(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 game_poker_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          game_poker_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_SC_GameResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LH.CMD_SC_GameResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 game_crad = 1;
  {
    int byte_size = _game_crad_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_game_crad(), byte_size, target);
    }
  }

  // int32 aera_win = 2;
  if (this->aera_win() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_aera_win(), target);
  }

  // repeated int32 game_resul_twin = 3;
  {
    int byte_size = _game_resul_twin_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_game_resul_twin(), byte_size, target);
    }
  }

  // int32 game_poker_num = 4;
  if (this->game_poker_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_game_poker_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LH.CMD_SC_GameResult)
  return target;
}

size_t CMD_SC_GameResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LH.CMD_SC_GameResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 game_crad = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->game_crad_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _game_crad_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 game_resul_twin = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->game_resul_twin_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _game_resul_twin_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 aera_win = 2;
  if (this->aera_win() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_aera_win());
  }

  // int32 game_poker_num = 4;
  if (this->game_poker_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_poker_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_SC_GameResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LH.CMD_SC_GameResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_SC_GameResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_SC_GameResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LH.CMD_SC_GameResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LH.CMD_SC_GameResult)
    MergeFrom(*source);
  }
}

void CMD_SC_GameResult::MergeFrom(const CMD_SC_GameResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LH.CMD_SC_GameResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  game_crad_.MergeFrom(from.game_crad_);
  game_resul_twin_.MergeFrom(from.game_resul_twin_);
  if (from.aera_win() != 0) {
    _internal_set_aera_win(from._internal_aera_win());
  }
  if (from.game_poker_num() != 0) {
    _internal_set_game_poker_num(from._internal_game_poker_num());
  }
}

void CMD_SC_GameResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LH.CMD_SC_GameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_SC_GameResult::CopyFrom(const CMD_SC_GameResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LH.CMD_SC_GameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_SC_GameResult::IsInitialized() const {
  return true;
}

void CMD_SC_GameResult::InternalSwap(CMD_SC_GameResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  game_crad_.InternalSwap(&other->game_crad_);
  game_resul_twin_.InternalSwap(&other->game_resul_twin_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_SC_GameResult, game_poker_num_)
      + sizeof(CMD_SC_GameResult::game_poker_num_)
      - PROTOBUF_FIELD_OFFSET(CMD_SC_GameResult, aera_win_)>(
          reinterpret_cast<char*>(&aera_win_),
          reinterpret_cast<char*>(&other->aera_win_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_SC_GameResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_SC_AddBet::_Internal {
 public:
};

CMD_SC_AddBet::CMD_SC_AddBet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LH.CMD_SC_AddBet)
}
CMD_SC_AddBet::CMD_SC_AddBet(const CMD_SC_AddBet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&bet_index_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(bet_index_));
  // @@protoc_insertion_point(copy_constructor:LH.CMD_SC_AddBet)
}

void CMD_SC_AddBet::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bet_index_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(bet_index_));
}

CMD_SC_AddBet::~CMD_SC_AddBet() {
  // @@protoc_insertion_point(destructor:LH.CMD_SC_AddBet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_SC_AddBet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_SC_AddBet::ArenaDtor(void* object) {
  CMD_SC_AddBet* _this = reinterpret_cast< CMD_SC_AddBet* >(object);
  (void)_this;
}
void CMD_SC_AddBet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_SC_AddBet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_SC_AddBet& CMD_SC_AddBet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_SC_AddBet_LH_2eproto.base);
  return *internal_default_instance();
}


void CMD_SC_AddBet::Clear() {
// @@protoc_insertion_point(message_clear_start:LH.CMD_SC_AddBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bet_index_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(bet_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_SC_AddBet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bet_aera = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bet_aera_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bet_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bet_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_SC_AddBet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LH.CMD_SC_AddBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int32 bet_aera = 2;
  if (this->bet_aera() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bet_aera(), target);
  }

  // int32 bet_index = 3;
  if (this->bet_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_bet_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LH.CMD_SC_AddBet)
  return target;
}

size_t CMD_SC_AddBet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LH.CMD_SC_AddBet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 bet_aera = 2;
  if (this->bet_aera() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bet_aera());
  }

  // int32 bet_index = 3;
  if (this->bet_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bet_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_SC_AddBet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LH.CMD_SC_AddBet)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_SC_AddBet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_SC_AddBet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LH.CMD_SC_AddBet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LH.CMD_SC_AddBet)
    MergeFrom(*source);
  }
}

void CMD_SC_AddBet::MergeFrom(const CMD_SC_AddBet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LH.CMD_SC_AddBet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.bet_aera() != 0) {
    _internal_set_bet_aera(from._internal_bet_aera());
  }
  if (from.bet_index() != 0) {
    _internal_set_bet_index(from._internal_bet_index());
  }
}

void CMD_SC_AddBet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LH.CMD_SC_AddBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_SC_AddBet::CopyFrom(const CMD_SC_AddBet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LH.CMD_SC_AddBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_SC_AddBet::IsInitialized() const {
  return true;
}

void CMD_SC_AddBet::InternalSwap(CMD_SC_AddBet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_SC_AddBet, bet_index_)
      + sizeof(CMD_SC_AddBet::bet_index_)
      - PROTOBUF_FIELD_OFFSET(CMD_SC_AddBet, chair_id_)>(
          reinterpret_cast<char*>(&chair_id_),
          reinterpret_cast<char*>(&other->chair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_SC_AddBet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_SC_AddBetAgain::_Internal {
 public:
};

CMD_SC_AddBetAgain::CMD_SC_AddBetAgain(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LH.CMD_SC_AddBetAgain)
}
CMD_SC_AddBetAgain::CMD_SC_AddBetAgain(const CMD_SC_AddBetAgain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&bet_num_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(bet_num_));
  // @@protoc_insertion_point(copy_constructor:LH.CMD_SC_AddBetAgain)
}

void CMD_SC_AddBetAgain::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bet_num_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(bet_num_));
}

CMD_SC_AddBetAgain::~CMD_SC_AddBetAgain() {
  // @@protoc_insertion_point(destructor:LH.CMD_SC_AddBetAgain)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_SC_AddBetAgain::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_SC_AddBetAgain::ArenaDtor(void* object) {
  CMD_SC_AddBetAgain* _this = reinterpret_cast< CMD_SC_AddBetAgain* >(object);
  (void)_this;
}
void CMD_SC_AddBetAgain::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_SC_AddBetAgain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_SC_AddBetAgain& CMD_SC_AddBetAgain::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_SC_AddBetAgain_LH_2eproto.base);
  return *internal_default_instance();
}


void CMD_SC_AddBetAgain::Clear() {
// @@protoc_insertion_point(message_clear_start:LH.CMD_SC_AddBetAgain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bet_num_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(bet_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_SC_AddBetAgain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bet_aera = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bet_aera_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bet_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bet_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bet_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bet_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_SC_AddBetAgain::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LH.CMD_SC_AddBetAgain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int32 bet_aera = 2;
  if (this->bet_aera() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bet_aera(), target);
  }

  // int32 bet_index = 3;
  if (this->bet_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_bet_index(), target);
  }

  // int32 bet_num = 4;
  if (this->bet_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_bet_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LH.CMD_SC_AddBetAgain)
  return target;
}

size_t CMD_SC_AddBetAgain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LH.CMD_SC_AddBetAgain)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 bet_aera = 2;
  if (this->bet_aera() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bet_aera());
  }

  // int32 bet_index = 3;
  if (this->bet_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bet_index());
  }

  // int32 bet_num = 4;
  if (this->bet_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bet_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_SC_AddBetAgain::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LH.CMD_SC_AddBetAgain)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_SC_AddBetAgain* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_SC_AddBetAgain>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LH.CMD_SC_AddBetAgain)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LH.CMD_SC_AddBetAgain)
    MergeFrom(*source);
  }
}

void CMD_SC_AddBetAgain::MergeFrom(const CMD_SC_AddBetAgain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LH.CMD_SC_AddBetAgain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.bet_aera() != 0) {
    _internal_set_bet_aera(from._internal_bet_aera());
  }
  if (from.bet_index() != 0) {
    _internal_set_bet_index(from._internal_bet_index());
  }
  if (from.bet_num() != 0) {
    _internal_set_bet_num(from._internal_bet_num());
  }
}

void CMD_SC_AddBetAgain::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LH.CMD_SC_AddBetAgain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_SC_AddBetAgain::CopyFrom(const CMD_SC_AddBetAgain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LH.CMD_SC_AddBetAgain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_SC_AddBetAgain::IsInitialized() const {
  return true;
}

void CMD_SC_AddBetAgain::InternalSwap(CMD_SC_AddBetAgain* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_SC_AddBetAgain, bet_num_)
      + sizeof(CMD_SC_AddBetAgain::bet_num_)
      - PROTOBUF_FIELD_OFFSET(CMD_SC_AddBetAgain, chair_id_)>(
          reinterpret_cast<char*>(&chair_id_),
          reinterpret_cast<char*>(&other->chair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_SC_AddBetAgain::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_CS_AddBet::_Internal {
 public:
};

CMD_CS_AddBet::CMD_CS_AddBet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LH.CMD_CS_AddBet)
}
CMD_CS_AddBet::CMD_CS_AddBet(const CMD_CS_AddBet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bet_aera_, &from.bet_aera_,
    static_cast<size_t>(reinterpret_cast<char*>(&bet_index_) -
    reinterpret_cast<char*>(&bet_aera_)) + sizeof(bet_index_));
  // @@protoc_insertion_point(copy_constructor:LH.CMD_CS_AddBet)
}

void CMD_CS_AddBet::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bet_aera_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bet_index_) -
      reinterpret_cast<char*>(&bet_aera_)) + sizeof(bet_index_));
}

CMD_CS_AddBet::~CMD_CS_AddBet() {
  // @@protoc_insertion_point(destructor:LH.CMD_CS_AddBet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_CS_AddBet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_CS_AddBet::ArenaDtor(void* object) {
  CMD_CS_AddBet* _this = reinterpret_cast< CMD_CS_AddBet* >(object);
  (void)_this;
}
void CMD_CS_AddBet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_CS_AddBet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_CS_AddBet& CMD_CS_AddBet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_CS_AddBet_LH_2eproto.base);
  return *internal_default_instance();
}


void CMD_CS_AddBet::Clear() {
// @@protoc_insertion_point(message_clear_start:LH.CMD_CS_AddBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bet_aera_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bet_index_) -
      reinterpret_cast<char*>(&bet_aera_)) + sizeof(bet_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_CS_AddBet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 bet_aera = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bet_aera_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bet_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bet_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_CS_AddBet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LH.CMD_CS_AddBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bet_aera = 1;
  if (this->bet_aera() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bet_aera(), target);
  }

  // int32 bet_index = 2;
  if (this->bet_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bet_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LH.CMD_CS_AddBet)
  return target;
}

size_t CMD_CS_AddBet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LH.CMD_CS_AddBet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 bet_aera = 1;
  if (this->bet_aera() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bet_aera());
  }

  // int32 bet_index = 2;
  if (this->bet_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bet_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_CS_AddBet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LH.CMD_CS_AddBet)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_CS_AddBet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_CS_AddBet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LH.CMD_CS_AddBet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LH.CMD_CS_AddBet)
    MergeFrom(*source);
  }
}

void CMD_CS_AddBet::MergeFrom(const CMD_CS_AddBet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LH.CMD_CS_AddBet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bet_aera() != 0) {
    _internal_set_bet_aera(from._internal_bet_aera());
  }
  if (from.bet_index() != 0) {
    _internal_set_bet_index(from._internal_bet_index());
  }
}

void CMD_CS_AddBet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LH.CMD_CS_AddBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_CS_AddBet::CopyFrom(const CMD_CS_AddBet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LH.CMD_CS_AddBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_CS_AddBet::IsInitialized() const {
  return true;
}

void CMD_CS_AddBet::InternalSwap(CMD_CS_AddBet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_CS_AddBet, bet_index_)
      + sizeof(CMD_CS_AddBet::bet_index_)
      - PROTOBUF_FIELD_OFFSET(CMD_CS_AddBet, bet_aera_)>(
          reinterpret_cast<char*>(&bet_aera_),
          reinterpret_cast<char*>(&other->bet_aera_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_CS_AddBet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_CS_AddBetAgain::_Internal {
 public:
};

CMD_CS_AddBetAgain::CMD_CS_AddBetAgain(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LH.CMD_CS_AddBetAgain)
}
CMD_CS_AddBetAgain::CMD_CS_AddBetAgain(const CMD_CS_AddBetAgain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bet_aera_, &from.bet_aera_,
    static_cast<size_t>(reinterpret_cast<char*>(&bet_num_) -
    reinterpret_cast<char*>(&bet_aera_)) + sizeof(bet_num_));
  // @@protoc_insertion_point(copy_constructor:LH.CMD_CS_AddBetAgain)
}

void CMD_CS_AddBetAgain::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bet_aera_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bet_num_) -
      reinterpret_cast<char*>(&bet_aera_)) + sizeof(bet_num_));
}

CMD_CS_AddBetAgain::~CMD_CS_AddBetAgain() {
  // @@protoc_insertion_point(destructor:LH.CMD_CS_AddBetAgain)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_CS_AddBetAgain::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_CS_AddBetAgain::ArenaDtor(void* object) {
  CMD_CS_AddBetAgain* _this = reinterpret_cast< CMD_CS_AddBetAgain* >(object);
  (void)_this;
}
void CMD_CS_AddBetAgain::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_CS_AddBetAgain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_CS_AddBetAgain& CMD_CS_AddBetAgain::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_CS_AddBetAgain_LH_2eproto.base);
  return *internal_default_instance();
}


void CMD_CS_AddBetAgain::Clear() {
// @@protoc_insertion_point(message_clear_start:LH.CMD_CS_AddBetAgain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bet_aera_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bet_num_) -
      reinterpret_cast<char*>(&bet_aera_)) + sizeof(bet_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_CS_AddBetAgain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 bet_aera = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bet_aera_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bet_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bet_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bet_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bet_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_CS_AddBetAgain::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LH.CMD_CS_AddBetAgain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bet_aera = 1;
  if (this->bet_aera() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bet_aera(), target);
  }

  // int32 bet_index = 2;
  if (this->bet_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bet_index(), target);
  }

  // int32 bet_num = 3;
  if (this->bet_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_bet_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LH.CMD_CS_AddBetAgain)
  return target;
}

size_t CMD_CS_AddBetAgain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LH.CMD_CS_AddBetAgain)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 bet_aera = 1;
  if (this->bet_aera() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bet_aera());
  }

  // int32 bet_index = 2;
  if (this->bet_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bet_index());
  }

  // int32 bet_num = 3;
  if (this->bet_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bet_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_CS_AddBetAgain::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LH.CMD_CS_AddBetAgain)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_CS_AddBetAgain* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_CS_AddBetAgain>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LH.CMD_CS_AddBetAgain)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LH.CMD_CS_AddBetAgain)
    MergeFrom(*source);
  }
}

void CMD_CS_AddBetAgain::MergeFrom(const CMD_CS_AddBetAgain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LH.CMD_CS_AddBetAgain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bet_aera() != 0) {
    _internal_set_bet_aera(from._internal_bet_aera());
  }
  if (from.bet_index() != 0) {
    _internal_set_bet_index(from._internal_bet_index());
  }
  if (from.bet_num() != 0) {
    _internal_set_bet_num(from._internal_bet_num());
  }
}

void CMD_CS_AddBetAgain::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LH.CMD_CS_AddBetAgain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_CS_AddBetAgain::CopyFrom(const CMD_CS_AddBetAgain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LH.CMD_CS_AddBetAgain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_CS_AddBetAgain::IsInitialized() const {
  return true;
}

void CMD_CS_AddBetAgain::InternalSwap(CMD_CS_AddBetAgain* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_CS_AddBetAgain, bet_num_)
      + sizeof(CMD_CS_AddBetAgain::bet_num_)
      - PROTOBUF_FIELD_OFFSET(CMD_CS_AddBetAgain, bet_aera_)>(
          reinterpret_cast<char*>(&bet_aera_),
          reinterpret_cast<char*>(&other->bet_aera_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_CS_AddBetAgain::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace LH
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LH::CMD_SC_NotifyStatus* Arena::CreateMaybeMessage< ::LH::CMD_SC_NotifyStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LH::CMD_SC_NotifyStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::LH::PlayerInfo* Arena::CreateMaybeMessage< ::LH::PlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LH::PlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::LH::PlayerInfoTop* Arena::CreateMaybeMessage< ::LH::PlayerInfoTop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LH::PlayerInfoTop >(arena);
}
template<> PROTOBUF_NOINLINE ::LH::CMD_SC_ReusltPlatePath* Arena::CreateMaybeMessage< ::LH::CMD_SC_ReusltPlatePath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LH::CMD_SC_ReusltPlatePath >(arena);
}
template<> PROTOBUF_NOINLINE ::LH::CMD_SC_GameSceneInfo* Arena::CreateMaybeMessage< ::LH::CMD_SC_GameSceneInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LH::CMD_SC_GameSceneInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::LH::CMD_SC_GameResult* Arena::CreateMaybeMessage< ::LH::CMD_SC_GameResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LH::CMD_SC_GameResult >(arena);
}
template<> PROTOBUF_NOINLINE ::LH::CMD_SC_AddBet* Arena::CreateMaybeMessage< ::LH::CMD_SC_AddBet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LH::CMD_SC_AddBet >(arena);
}
template<> PROTOBUF_NOINLINE ::LH::CMD_SC_AddBetAgain* Arena::CreateMaybeMessage< ::LH::CMD_SC_AddBetAgain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LH::CMD_SC_AddBetAgain >(arena);
}
template<> PROTOBUF_NOINLINE ::LH::CMD_CS_AddBet* Arena::CreateMaybeMessage< ::LH::CMD_CS_AddBet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LH::CMD_CS_AddBet >(arena);
}
template<> PROTOBUF_NOINLINE ::LH::CMD_CS_AddBetAgain* Arena::CreateMaybeMessage< ::LH::CMD_CS_AddBetAgain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LH::CMD_CS_AddBetAgain >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
