// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Crash.proto

#include "Crash.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace CRASH {
class sC2SPlayerBetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<sC2SPlayerBet> _instance;
} _sC2SPlayerBet_default_instance_;
class SC_SceneInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_SceneInfo> _instance;
} _SC_SceneInfo_default_instance_;
class sS2CPlayerBetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<sS2CPlayerBet> _instance;
} _sS2CPlayerBet_default_instance_;
class sS2CCancelBetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<sS2CCancelBet> _instance;
} _sS2CCancelBet_default_instance_;
class sS2CPlayerDotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<sS2CPlayerDot> _instance;
} _sS2CPlayerDot_default_instance_;
class sS2CNotifyProgressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<sS2CNotifyProgress> _instance;
} _sS2CNotifyProgress_default_instance_;
}  // namespace CRASH
static void InitDefaultsscc_info_SC_SceneInfo_Crash_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CRASH::_SC_SceneInfo_default_instance_;
    new (ptr) ::CRASH::SC_SceneInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_SceneInfo_Crash_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_SceneInfo_Crash_2eproto}, {}};

static void InitDefaultsscc_info_sC2SPlayerBet_Crash_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CRASH::_sC2SPlayerBet_default_instance_;
    new (ptr) ::CRASH::sC2SPlayerBet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_sC2SPlayerBet_Crash_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_sC2SPlayerBet_Crash_2eproto}, {}};

static void InitDefaultsscc_info_sS2CCancelBet_Crash_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CRASH::_sS2CCancelBet_default_instance_;
    new (ptr) ::CRASH::sS2CCancelBet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_sS2CCancelBet_Crash_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_sS2CCancelBet_Crash_2eproto}, {}};

static void InitDefaultsscc_info_sS2CNotifyProgress_Crash_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CRASH::_sS2CNotifyProgress_default_instance_;
    new (ptr) ::CRASH::sS2CNotifyProgress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_sS2CNotifyProgress_Crash_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_sS2CNotifyProgress_Crash_2eproto}, {}};

static void InitDefaultsscc_info_sS2CPlayerBet_Crash_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CRASH::_sS2CPlayerBet_default_instance_;
    new (ptr) ::CRASH::sS2CPlayerBet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_sS2CPlayerBet_Crash_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_sS2CPlayerBet_Crash_2eproto}, {}};

static void InitDefaultsscc_info_sS2CPlayerDot_Crash_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CRASH::_sS2CPlayerDot_default_instance_;
    new (ptr) ::CRASH::sS2CPlayerDot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_sS2CPlayerDot_Crash_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_sS2CPlayerDot_Crash_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Crash_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Crash_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Crash_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Crash_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRASH::sC2SPlayerBet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRASH::sC2SPlayerBet, area_index_),
  PROTOBUF_FIELD_OFFSET(::CRASH::sC2SPlayerBet, bet_index_),
  PROTOBUF_FIELD_OFFSET(::CRASH::sC2SPlayerBet, dot_odd_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRASH::SC_SceneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRASH::SC_SceneInfo, cur_state_),
  PROTOBUF_FIELD_OFFSET(::CRASH::SC_SceneInfo, remain_time_),
  PROTOBUF_FIELD_OFFSET(::CRASH::SC_SceneInfo, player_bet_),
  PROTOBUF_FIELD_OFFSET(::CRASH::SC_SceneInfo, player_win_gold_),
  PROTOBUF_FIELD_OFFSET(::CRASH::SC_SceneInfo, player_win_dot_odd_),
  PROTOBUF_FIELD_OFFSET(::CRASH::SC_SceneInfo, player_total_win_socre_),
  PROTOBUF_FIELD_OFFSET(::CRASH::SC_SceneInfo, player_max_score_),
  PROTOBUF_FIELD_OFFSET(::CRASH::SC_SceneInfo, history_num_),
  PROTOBUF_FIELD_OFFSET(::CRASH::SC_SceneInfo, history_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRASH::sS2CPlayerBet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRASH::sS2CPlayerBet, chairid_),
  PROTOBUF_FIELD_OFFSET(::CRASH::sS2CPlayerBet, area_index_),
  PROTOBUF_FIELD_OFFSET(::CRASH::sS2CPlayerBet, bet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRASH::sS2CCancelBet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRASH::sS2CCancelBet, chairid_),
  PROTOBUF_FIELD_OFFSET(::CRASH::sS2CCancelBet, bet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRASH::sS2CPlayerDot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRASH::sS2CPlayerDot, chairid_),
  PROTOBUF_FIELD_OFFSET(::CRASH::sS2CPlayerDot, area_index_),
  PROTOBUF_FIELD_OFFSET(::CRASH::sS2CPlayerDot, odd_),
  PROTOBUF_FIELD_OFFSET(::CRASH::sS2CPlayerDot, win_gold_),
  PROTOBUF_FIELD_OFFSET(::CRASH::sS2CPlayerDot, revenue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRASH::sS2CNotifyProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CRASH::sS2CNotifyProgress, is_boom_),
  PROTOBUF_FIELD_OFFSET(::CRASH::sS2CNotifyProgress, cur_odd_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CRASH::sC2SPlayerBet)},
  { 8, -1, sizeof(::CRASH::SC_SceneInfo)},
  { 22, -1, sizeof(::CRASH::sS2CPlayerBet)},
  { 30, -1, sizeof(::CRASH::sS2CCancelBet)},
  { 37, -1, sizeof(::CRASH::sS2CPlayerDot)},
  { 47, -1, sizeof(::CRASH::sS2CNotifyProgress)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CRASH::_sC2SPlayerBet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CRASH::_SC_SceneInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CRASH::_sS2CPlayerBet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CRASH::_sS2CCancelBet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CRASH::_sS2CPlayerDot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CRASH::_sS2CNotifyProgress_default_instance_),
};

const char descriptor_table_protodef_Crash_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013Crash.proto\022\005CRASH\"M\n\rsC2SPlayerBet\022\022\n"
  "\narea_index\030\001 \001(\005\022\021\n\tbet_index\030\002 \001(\005\022\025\n\r"
  "dot_odd_index\030\003 \001(\005\"\346\001\n\014SC_SceneInfo\022\021\n\t"
  "cur_state\030\001 \001(\005\022\023\n\013remain_time\030\002 \001(\005\022\022\n\n"
  "player_bet\030\003 \003(\005\022\027\n\017player_win_gold\030\004 \003("
  "\003\022\032\n\022player_win_dot_odd\030\005 \003(\005\022\036\n\026player_"
  "total_win_socre\030\006 \003(\003\022\030\n\020player_max_scor"
  "e\030\007 \003(\003\022\023\n\013history_num\030\010 \001(\005\022\026\n\016history_"
  "result\030\t \003(\005\"A\n\rsS2CPlayerBet\022\017\n\007chairid"
  "\030\001 \001(\005\022\022\n\narea_index\030\002 \001(\005\022\013\n\003bet\030\003 \001(\005\""
  "-\n\rsS2CCancelBet\022\017\n\007chairid\030\001 \001(\005\022\013\n\003bet"
  "\030\002 \001(\005\"d\n\rsS2CPlayerDot\022\017\n\007chairid\030\001 \001(\005"
  "\022\022\n\narea_index\030\002 \001(\005\022\013\n\003odd\030\003 \001(\005\022\020\n\010win"
  "_gold\030\004 \001(\003\022\017\n\007revenue\030\005 \001(\004\"6\n\022sS2CNoti"
  "fyProgress\022\017\n\007is_boom\030\001 \001(\010\022\017\n\007cur_odd\030\002"
  " \001(\005*\325\001\n\013EMsgIDCRASH\022\016\n\nSUB_CS_Bet\020\000\022\024\n\020"
  "SUB_CS_CancelBet\020\001\022\024\n\020SUB_CS_PlayerDot\020\002"
  "\022\016\n\nSUB_SC_Bet\020\003\022\024\n\020SUB_SC_CancelBet\020\004\022\024"
  "\n\020SUB_SC_PlayerDot\020\005\022\031\n\025SUB_SC_NotifyPro"
  "gress\020\006\022\026\n\022SUB_SC_ChangeState\020\007\022\033\n\027SUB_S"
  "_CHECK_ROBOT_LEAVE\020\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Crash_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Crash_2eproto_sccs[6] = {
  &scc_info_SC_SceneInfo_Crash_2eproto.base,
  &scc_info_sC2SPlayerBet_Crash_2eproto.base,
  &scc_info_sS2CCancelBet_Crash_2eproto.base,
  &scc_info_sS2CNotifyProgress_Crash_2eproto.base,
  &scc_info_sS2CPlayerBet_Crash_2eproto.base,
  &scc_info_sS2CPlayerDot_Crash_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Crash_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Crash_2eproto = {
  false, false, descriptor_table_protodef_Crash_2eproto, "Crash.proto", 828,
  &descriptor_table_Crash_2eproto_once, descriptor_table_Crash_2eproto_sccs, descriptor_table_Crash_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_Crash_2eproto::offsets,
  file_level_metadata_Crash_2eproto, 6, file_level_enum_descriptors_Crash_2eproto, file_level_service_descriptors_Crash_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Crash_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Crash_2eproto)), true);
namespace CRASH {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDCRASH_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Crash_2eproto);
  return file_level_enum_descriptors_Crash_2eproto[0];
}
bool EMsgIDCRASH_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class sC2SPlayerBet::_Internal {
 public:
};

sC2SPlayerBet::sC2SPlayerBet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRASH.sC2SPlayerBet)
}
sC2SPlayerBet::sC2SPlayerBet(const sC2SPlayerBet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&area_index_, &from.area_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&dot_odd_index_) -
    reinterpret_cast<char*>(&area_index_)) + sizeof(dot_odd_index_));
  // @@protoc_insertion_point(copy_constructor:CRASH.sC2SPlayerBet)
}

void sC2SPlayerBet::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&area_index_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&dot_odd_index_) -
      reinterpret_cast<char*>(&area_index_)) + sizeof(dot_odd_index_));
}

sC2SPlayerBet::~sC2SPlayerBet() {
  // @@protoc_insertion_point(destructor:CRASH.sC2SPlayerBet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void sC2SPlayerBet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void sC2SPlayerBet::ArenaDtor(void* object) {
  sC2SPlayerBet* _this = reinterpret_cast< sC2SPlayerBet* >(object);
  (void)_this;
}
void sC2SPlayerBet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void sC2SPlayerBet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const sC2SPlayerBet& sC2SPlayerBet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_sC2SPlayerBet_Crash_2eproto.base);
  return *internal_default_instance();
}


void sC2SPlayerBet::Clear() {
// @@protoc_insertion_point(message_clear_start:CRASH.sC2SPlayerBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&area_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dot_odd_index_) -
      reinterpret_cast<char*>(&area_index_)) + sizeof(dot_odd_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sC2SPlayerBet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 area_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          area_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bet_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bet_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dot_odd_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          dot_odd_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* sC2SPlayerBet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRASH.sC2SPlayerBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 area_index = 1;
  if (this->area_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_area_index(), target);
  }

  // int32 bet_index = 2;
  if (this->bet_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bet_index(), target);
  }

  // int32 dot_odd_index = 3;
  if (this->dot_odd_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_dot_odd_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRASH.sC2SPlayerBet)
  return target;
}

size_t sC2SPlayerBet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRASH.sC2SPlayerBet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 area_index = 1;
  if (this->area_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_area_index());
  }

  // int32 bet_index = 2;
  if (this->bet_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bet_index());
  }

  // int32 dot_odd_index = 3;
  if (this->dot_odd_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dot_odd_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sC2SPlayerBet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRASH.sC2SPlayerBet)
  GOOGLE_DCHECK_NE(&from, this);
  const sC2SPlayerBet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<sC2SPlayerBet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRASH.sC2SPlayerBet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRASH.sC2SPlayerBet)
    MergeFrom(*source);
  }
}

void sC2SPlayerBet::MergeFrom(const sC2SPlayerBet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRASH.sC2SPlayerBet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.area_index() != 0) {
    _internal_set_area_index(from._internal_area_index());
  }
  if (from.bet_index() != 0) {
    _internal_set_bet_index(from._internal_bet_index());
  }
  if (from.dot_odd_index() != 0) {
    _internal_set_dot_odd_index(from._internal_dot_odd_index());
  }
}

void sC2SPlayerBet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRASH.sC2SPlayerBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sC2SPlayerBet::CopyFrom(const sC2SPlayerBet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRASH.sC2SPlayerBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sC2SPlayerBet::IsInitialized() const {
  return true;
}

void sC2SPlayerBet::InternalSwap(sC2SPlayerBet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(sC2SPlayerBet, dot_odd_index_)
      + sizeof(sC2SPlayerBet::dot_odd_index_)
      - PROTOBUF_FIELD_OFFSET(sC2SPlayerBet, area_index_)>(
          reinterpret_cast<char*>(&area_index_),
          reinterpret_cast<char*>(&other->area_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata sC2SPlayerBet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SC_SceneInfo::_Internal {
 public:
};

SC_SceneInfo::SC_SceneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  player_bet_(arena),
  player_win_gold_(arena),
  player_win_dot_odd_(arena),
  player_total_win_socre_(arena),
  player_max_score_(arena),
  history_result_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRASH.SC_SceneInfo)
}
SC_SceneInfo::SC_SceneInfo(const SC_SceneInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      player_bet_(from.player_bet_),
      player_win_gold_(from.player_win_gold_),
      player_win_dot_odd_(from.player_win_dot_odd_),
      player_total_win_socre_(from.player_total_win_socre_),
      player_max_score_(from.player_max_score_),
      history_result_(from.history_result_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cur_state_, &from.cur_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&history_num_) -
    reinterpret_cast<char*>(&cur_state_)) + sizeof(history_num_));
  // @@protoc_insertion_point(copy_constructor:CRASH.SC_SceneInfo)
}

void SC_SceneInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&cur_state_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&history_num_) -
      reinterpret_cast<char*>(&cur_state_)) + sizeof(history_num_));
}

SC_SceneInfo::~SC_SceneInfo() {
  // @@protoc_insertion_point(destructor:CRASH.SC_SceneInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SC_SceneInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SC_SceneInfo::ArenaDtor(void* object) {
  SC_SceneInfo* _this = reinterpret_cast< SC_SceneInfo* >(object);
  (void)_this;
}
void SC_SceneInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SC_SceneInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_SceneInfo& SC_SceneInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_SceneInfo_Crash_2eproto.base);
  return *internal_default_instance();
}


void SC_SceneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CRASH.SC_SceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_bet_.Clear();
  player_win_gold_.Clear();
  player_win_dot_odd_.Clear();
  player_total_win_socre_.Clear();
  player_max_score_.Clear();
  history_result_.Clear();
  ::memset(&cur_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&history_num_) -
      reinterpret_cast<char*>(&cur_state_)) + sizeof(history_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_SceneInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 cur_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cur_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 remain_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          remain_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 player_bet = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_player_bet(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_player_bet(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 player_win_gold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_player_win_gold(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_player_win_gold(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 player_win_dot_odd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_player_win_dot_odd(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_player_win_dot_odd(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 player_total_win_socre = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_player_total_win_socre(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_player_total_win_socre(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 player_max_score = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_player_max_score(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_player_max_score(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 history_num = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          history_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 history_result = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_history_result(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          _internal_add_history_result(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_SceneInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRASH.SC_SceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cur_state = 1;
  if (this->cur_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cur_state(), target);
  }

  // int32 remain_time = 2;
  if (this->remain_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_remain_time(), target);
  }

  // repeated int32 player_bet = 3;
  {
    int byte_size = _player_bet_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_player_bet(), byte_size, target);
    }
  }

  // repeated int64 player_win_gold = 4;
  {
    int byte_size = _player_win_gold_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_player_win_gold(), byte_size, target);
    }
  }

  // repeated int32 player_win_dot_odd = 5;
  {
    int byte_size = _player_win_dot_odd_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_player_win_dot_odd(), byte_size, target);
    }
  }

  // repeated int64 player_total_win_socre = 6;
  {
    int byte_size = _player_total_win_socre_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          6, _internal_player_total_win_socre(), byte_size, target);
    }
  }

  // repeated int64 player_max_score = 7;
  {
    int byte_size = _player_max_score_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          7, _internal_player_max_score(), byte_size, target);
    }
  }

  // int32 history_num = 8;
  if (this->history_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_history_num(), target);
  }

  // repeated int32 history_result = 9;
  {
    int byte_size = _history_result_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          9, _internal_history_result(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRASH.SC_SceneInfo)
  return target;
}

size_t SC_SceneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRASH.SC_SceneInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 player_bet = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->player_bet_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _player_bet_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 player_win_gold = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->player_win_gold_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _player_win_gold_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 player_win_dot_odd = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->player_win_dot_odd_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _player_win_dot_odd_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 player_total_win_socre = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->player_total_win_socre_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _player_total_win_socre_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 player_max_score = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->player_max_score_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _player_max_score_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 history_result = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->history_result_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _history_result_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 cur_state = 1;
  if (this->cur_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur_state());
  }

  // int32 remain_time = 2;
  if (this->remain_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_remain_time());
  }

  // int32 history_num = 8;
  if (this->history_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_history_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_SceneInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRASH.SC_SceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_SceneInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_SceneInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRASH.SC_SceneInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRASH.SC_SceneInfo)
    MergeFrom(*source);
  }
}

void SC_SceneInfo::MergeFrom(const SC_SceneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRASH.SC_SceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_bet_.MergeFrom(from.player_bet_);
  player_win_gold_.MergeFrom(from.player_win_gold_);
  player_win_dot_odd_.MergeFrom(from.player_win_dot_odd_);
  player_total_win_socre_.MergeFrom(from.player_total_win_socre_);
  player_max_score_.MergeFrom(from.player_max_score_);
  history_result_.MergeFrom(from.history_result_);
  if (from.cur_state() != 0) {
    _internal_set_cur_state(from._internal_cur_state());
  }
  if (from.remain_time() != 0) {
    _internal_set_remain_time(from._internal_remain_time());
  }
  if (from.history_num() != 0) {
    _internal_set_history_num(from._internal_history_num());
  }
}

void SC_SceneInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRASH.SC_SceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SceneInfo::CopyFrom(const SC_SceneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRASH.SC_SceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_SceneInfo::IsInitialized() const {
  return true;
}

void SC_SceneInfo::InternalSwap(SC_SceneInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  player_bet_.InternalSwap(&other->player_bet_);
  player_win_gold_.InternalSwap(&other->player_win_gold_);
  player_win_dot_odd_.InternalSwap(&other->player_win_dot_odd_);
  player_total_win_socre_.InternalSwap(&other->player_total_win_socre_);
  player_max_score_.InternalSwap(&other->player_max_score_);
  history_result_.InternalSwap(&other->history_result_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_SceneInfo, history_num_)
      + sizeof(SC_SceneInfo::history_num_)
      - PROTOBUF_FIELD_OFFSET(SC_SceneInfo, cur_state_)>(
          reinterpret_cast<char*>(&cur_state_),
          reinterpret_cast<char*>(&other->cur_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_SceneInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class sS2CPlayerBet::_Internal {
 public:
};

sS2CPlayerBet::sS2CPlayerBet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRASH.sS2CPlayerBet)
}
sS2CPlayerBet::sS2CPlayerBet(const sS2CPlayerBet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chairid_, &from.chairid_,
    static_cast<size_t>(reinterpret_cast<char*>(&bet_) -
    reinterpret_cast<char*>(&chairid_)) + sizeof(bet_));
  // @@protoc_insertion_point(copy_constructor:CRASH.sS2CPlayerBet)
}

void sS2CPlayerBet::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chairid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bet_) -
      reinterpret_cast<char*>(&chairid_)) + sizeof(bet_));
}

sS2CPlayerBet::~sS2CPlayerBet() {
  // @@protoc_insertion_point(destructor:CRASH.sS2CPlayerBet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void sS2CPlayerBet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void sS2CPlayerBet::ArenaDtor(void* object) {
  sS2CPlayerBet* _this = reinterpret_cast< sS2CPlayerBet* >(object);
  (void)_this;
}
void sS2CPlayerBet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void sS2CPlayerBet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const sS2CPlayerBet& sS2CPlayerBet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_sS2CPlayerBet_Crash_2eproto.base);
  return *internal_default_instance();
}


void sS2CPlayerBet::Clear() {
// @@protoc_insertion_point(message_clear_start:CRASH.sS2CPlayerBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chairid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bet_) -
      reinterpret_cast<char*>(&chairid_)) + sizeof(bet_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sS2CPlayerBet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chairid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chairid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 area_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          area_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bet = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* sS2CPlayerBet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRASH.sS2CPlayerBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chairid = 1;
  if (this->chairid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chairid(), target);
  }

  // int32 area_index = 2;
  if (this->area_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_area_index(), target);
  }

  // int32 bet = 3;
  if (this->bet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_bet(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRASH.sS2CPlayerBet)
  return target;
}

size_t sS2CPlayerBet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRASH.sS2CPlayerBet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chairid = 1;
  if (this->chairid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chairid());
  }

  // int32 area_index = 2;
  if (this->area_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_area_index());
  }

  // int32 bet = 3;
  if (this->bet() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bet());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sS2CPlayerBet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRASH.sS2CPlayerBet)
  GOOGLE_DCHECK_NE(&from, this);
  const sS2CPlayerBet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<sS2CPlayerBet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRASH.sS2CPlayerBet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRASH.sS2CPlayerBet)
    MergeFrom(*source);
  }
}

void sS2CPlayerBet::MergeFrom(const sS2CPlayerBet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRASH.sS2CPlayerBet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chairid() != 0) {
    _internal_set_chairid(from._internal_chairid());
  }
  if (from.area_index() != 0) {
    _internal_set_area_index(from._internal_area_index());
  }
  if (from.bet() != 0) {
    _internal_set_bet(from._internal_bet());
  }
}

void sS2CPlayerBet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRASH.sS2CPlayerBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sS2CPlayerBet::CopyFrom(const sS2CPlayerBet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRASH.sS2CPlayerBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sS2CPlayerBet::IsInitialized() const {
  return true;
}

void sS2CPlayerBet::InternalSwap(sS2CPlayerBet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(sS2CPlayerBet, bet_)
      + sizeof(sS2CPlayerBet::bet_)
      - PROTOBUF_FIELD_OFFSET(sS2CPlayerBet, chairid_)>(
          reinterpret_cast<char*>(&chairid_),
          reinterpret_cast<char*>(&other->chairid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata sS2CPlayerBet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class sS2CCancelBet::_Internal {
 public:
};

sS2CCancelBet::sS2CCancelBet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRASH.sS2CCancelBet)
}
sS2CCancelBet::sS2CCancelBet(const sS2CCancelBet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chairid_, &from.chairid_,
    static_cast<size_t>(reinterpret_cast<char*>(&bet_) -
    reinterpret_cast<char*>(&chairid_)) + sizeof(bet_));
  // @@protoc_insertion_point(copy_constructor:CRASH.sS2CCancelBet)
}

void sS2CCancelBet::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chairid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bet_) -
      reinterpret_cast<char*>(&chairid_)) + sizeof(bet_));
}

sS2CCancelBet::~sS2CCancelBet() {
  // @@protoc_insertion_point(destructor:CRASH.sS2CCancelBet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void sS2CCancelBet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void sS2CCancelBet::ArenaDtor(void* object) {
  sS2CCancelBet* _this = reinterpret_cast< sS2CCancelBet* >(object);
  (void)_this;
}
void sS2CCancelBet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void sS2CCancelBet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const sS2CCancelBet& sS2CCancelBet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_sS2CCancelBet_Crash_2eproto.base);
  return *internal_default_instance();
}


void sS2CCancelBet::Clear() {
// @@protoc_insertion_point(message_clear_start:CRASH.sS2CCancelBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chairid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bet_) -
      reinterpret_cast<char*>(&chairid_)) + sizeof(bet_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sS2CCancelBet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chairid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chairid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* sS2CCancelBet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRASH.sS2CCancelBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chairid = 1;
  if (this->chairid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chairid(), target);
  }

  // int32 bet = 2;
  if (this->bet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bet(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRASH.sS2CCancelBet)
  return target;
}

size_t sS2CCancelBet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRASH.sS2CCancelBet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chairid = 1;
  if (this->chairid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chairid());
  }

  // int32 bet = 2;
  if (this->bet() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bet());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sS2CCancelBet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRASH.sS2CCancelBet)
  GOOGLE_DCHECK_NE(&from, this);
  const sS2CCancelBet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<sS2CCancelBet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRASH.sS2CCancelBet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRASH.sS2CCancelBet)
    MergeFrom(*source);
  }
}

void sS2CCancelBet::MergeFrom(const sS2CCancelBet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRASH.sS2CCancelBet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chairid() != 0) {
    _internal_set_chairid(from._internal_chairid());
  }
  if (from.bet() != 0) {
    _internal_set_bet(from._internal_bet());
  }
}

void sS2CCancelBet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRASH.sS2CCancelBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sS2CCancelBet::CopyFrom(const sS2CCancelBet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRASH.sS2CCancelBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sS2CCancelBet::IsInitialized() const {
  return true;
}

void sS2CCancelBet::InternalSwap(sS2CCancelBet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(sS2CCancelBet, bet_)
      + sizeof(sS2CCancelBet::bet_)
      - PROTOBUF_FIELD_OFFSET(sS2CCancelBet, chairid_)>(
          reinterpret_cast<char*>(&chairid_),
          reinterpret_cast<char*>(&other->chairid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata sS2CCancelBet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class sS2CPlayerDot::_Internal {
 public:
};

sS2CPlayerDot::sS2CPlayerDot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRASH.sS2CPlayerDot)
}
sS2CPlayerDot::sS2CPlayerDot(const sS2CPlayerDot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chairid_, &from.chairid_,
    static_cast<size_t>(reinterpret_cast<char*>(&odd_) -
    reinterpret_cast<char*>(&chairid_)) + sizeof(odd_));
  // @@protoc_insertion_point(copy_constructor:CRASH.sS2CPlayerDot)
}

void sS2CPlayerDot::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chairid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&odd_) -
      reinterpret_cast<char*>(&chairid_)) + sizeof(odd_));
}

sS2CPlayerDot::~sS2CPlayerDot() {
  // @@protoc_insertion_point(destructor:CRASH.sS2CPlayerDot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void sS2CPlayerDot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void sS2CPlayerDot::ArenaDtor(void* object) {
  sS2CPlayerDot* _this = reinterpret_cast< sS2CPlayerDot* >(object);
  (void)_this;
}
void sS2CPlayerDot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void sS2CPlayerDot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const sS2CPlayerDot& sS2CPlayerDot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_sS2CPlayerDot_Crash_2eproto.base);
  return *internal_default_instance();
}


void sS2CPlayerDot::Clear() {
// @@protoc_insertion_point(message_clear_start:CRASH.sS2CPlayerDot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chairid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&odd_) -
      reinterpret_cast<char*>(&chairid_)) + sizeof(odd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sS2CPlayerDot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chairid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chairid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 area_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          area_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 odd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          odd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 win_gold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          win_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 revenue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          revenue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* sS2CPlayerDot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRASH.sS2CPlayerDot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chairid = 1;
  if (this->chairid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chairid(), target);
  }

  // int32 area_index = 2;
  if (this->area_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_area_index(), target);
  }

  // int32 odd = 3;
  if (this->odd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_odd(), target);
  }

  // int64 win_gold = 4;
  if (this->win_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_win_gold(), target);
  }

  // uint64 revenue = 5;
  if (this->revenue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_revenue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRASH.sS2CPlayerDot)
  return target;
}

size_t sS2CPlayerDot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRASH.sS2CPlayerDot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chairid = 1;
  if (this->chairid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chairid());
  }

  // int32 area_index = 2;
  if (this->area_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_area_index());
  }

  // int64 win_gold = 4;
  if (this->win_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_win_gold());
  }

  // uint64 revenue = 5;
  if (this->revenue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_revenue());
  }

  // int32 odd = 3;
  if (this->odd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_odd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sS2CPlayerDot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRASH.sS2CPlayerDot)
  GOOGLE_DCHECK_NE(&from, this);
  const sS2CPlayerDot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<sS2CPlayerDot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRASH.sS2CPlayerDot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRASH.sS2CPlayerDot)
    MergeFrom(*source);
  }
}

void sS2CPlayerDot::MergeFrom(const sS2CPlayerDot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRASH.sS2CPlayerDot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chairid() != 0) {
    _internal_set_chairid(from._internal_chairid());
  }
  if (from.area_index() != 0) {
    _internal_set_area_index(from._internal_area_index());
  }
  if (from.win_gold() != 0) {
    _internal_set_win_gold(from._internal_win_gold());
  }
  if (from.revenue() != 0) {
    _internal_set_revenue(from._internal_revenue());
  }
  if (from.odd() != 0) {
    _internal_set_odd(from._internal_odd());
  }
}

void sS2CPlayerDot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRASH.sS2CPlayerDot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sS2CPlayerDot::CopyFrom(const sS2CPlayerDot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRASH.sS2CPlayerDot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sS2CPlayerDot::IsInitialized() const {
  return true;
}

void sS2CPlayerDot::InternalSwap(sS2CPlayerDot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(sS2CPlayerDot, odd_)
      + sizeof(sS2CPlayerDot::odd_)
      - PROTOBUF_FIELD_OFFSET(sS2CPlayerDot, chairid_)>(
          reinterpret_cast<char*>(&chairid_),
          reinterpret_cast<char*>(&other->chairid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata sS2CPlayerDot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class sS2CNotifyProgress::_Internal {
 public:
};

sS2CNotifyProgress::sS2CNotifyProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CRASH.sS2CNotifyProgress)
}
sS2CNotifyProgress::sS2CNotifyProgress(const sS2CNotifyProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_boom_, &from.is_boom_,
    static_cast<size_t>(reinterpret_cast<char*>(&cur_odd_) -
    reinterpret_cast<char*>(&is_boom_)) + sizeof(cur_odd_));
  // @@protoc_insertion_point(copy_constructor:CRASH.sS2CNotifyProgress)
}

void sS2CNotifyProgress::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&is_boom_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&cur_odd_) -
      reinterpret_cast<char*>(&is_boom_)) + sizeof(cur_odd_));
}

sS2CNotifyProgress::~sS2CNotifyProgress() {
  // @@protoc_insertion_point(destructor:CRASH.sS2CNotifyProgress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void sS2CNotifyProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void sS2CNotifyProgress::ArenaDtor(void* object) {
  sS2CNotifyProgress* _this = reinterpret_cast< sS2CNotifyProgress* >(object);
  (void)_this;
}
void sS2CNotifyProgress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void sS2CNotifyProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const sS2CNotifyProgress& sS2CNotifyProgress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_sS2CNotifyProgress_Crash_2eproto.base);
  return *internal_default_instance();
}


void sS2CNotifyProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CRASH.sS2CNotifyProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_boom_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_odd_) -
      reinterpret_cast<char*>(&is_boom_)) + sizeof(cur_odd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sS2CNotifyProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_boom = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_boom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cur_odd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cur_odd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* sS2CNotifyProgress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRASH.sS2CNotifyProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_boom = 1;
  if (this->is_boom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_boom(), target);
  }

  // int32 cur_odd = 2;
  if (this->cur_odd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cur_odd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRASH.sS2CNotifyProgress)
  return target;
}

size_t sS2CNotifyProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRASH.sS2CNotifyProgress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_boom = 1;
  if (this->is_boom() != 0) {
    total_size += 1 + 1;
  }

  // int32 cur_odd = 2;
  if (this->cur_odd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur_odd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sS2CNotifyProgress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CRASH.sS2CNotifyProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const sS2CNotifyProgress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<sS2CNotifyProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CRASH.sS2CNotifyProgress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CRASH.sS2CNotifyProgress)
    MergeFrom(*source);
  }
}

void sS2CNotifyProgress::MergeFrom(const sS2CNotifyProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRASH.sS2CNotifyProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_boom() != 0) {
    _internal_set_is_boom(from._internal_is_boom());
  }
  if (from.cur_odd() != 0) {
    _internal_set_cur_odd(from._internal_cur_odd());
  }
}

void sS2CNotifyProgress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CRASH.sS2CNotifyProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sS2CNotifyProgress::CopyFrom(const sS2CNotifyProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRASH.sS2CNotifyProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sS2CNotifyProgress::IsInitialized() const {
  return true;
}

void sS2CNotifyProgress::InternalSwap(sS2CNotifyProgress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(sS2CNotifyProgress, cur_odd_)
      + sizeof(sS2CNotifyProgress::cur_odd_)
      - PROTOBUF_FIELD_OFFSET(sS2CNotifyProgress, is_boom_)>(
          reinterpret_cast<char*>(&is_boom_),
          reinterpret_cast<char*>(&other->is_boom_));
}

::PROTOBUF_NAMESPACE_ID::Metadata sS2CNotifyProgress::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace CRASH
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CRASH::sC2SPlayerBet* Arena::CreateMaybeMessage< ::CRASH::sC2SPlayerBet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRASH::sC2SPlayerBet >(arena);
}
template<> PROTOBUF_NOINLINE ::CRASH::SC_SceneInfo* Arena::CreateMaybeMessage< ::CRASH::SC_SceneInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRASH::SC_SceneInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CRASH::sS2CPlayerBet* Arena::CreateMaybeMessage< ::CRASH::sS2CPlayerBet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRASH::sS2CPlayerBet >(arena);
}
template<> PROTOBUF_NOINLINE ::CRASH::sS2CCancelBet* Arena::CreateMaybeMessage< ::CRASH::sS2CCancelBet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRASH::sS2CCancelBet >(arena);
}
template<> PROTOBUF_NOINLINE ::CRASH::sS2CPlayerDot* Arena::CreateMaybeMessage< ::CRASH::sS2CPlayerDot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRASH::sS2CPlayerDot >(arena);
}
template<> PROTOBUF_NOINLINE ::CRASH::sS2CNotifyProgress* Arena::CreateMaybeMessage< ::CRASH::sS2CNotifyProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRASH::sS2CNotifyProgress >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
