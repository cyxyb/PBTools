// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DZNZ.proto

#include "DZNZ.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_DZNZ_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerInfoProto_DZNZ_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DZNZ_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WheelInfoProto_DZNZ_2eproto;
namespace DZNZ {
class RecodeProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecodeProto> _instance;
} _RecodeProto_default_instance_;
class PlayerInfoProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerInfoProto> _instance;
} _PlayerInfoProto_default_instance_;
class PlayerGameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerGameData> _instance;
} _PlayerGameData_default_instance_;
class SC_SceneInfoProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_SceneInfoProto> _instance;
} _SC_SceneInfoProto_default_instance_;
class CMD_SC_BetProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_SC_BetProto> _instance;
} _CMD_SC_BetProto_default_instance_;
class WheelInfoProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WheelInfoProto> _instance;
} _WheelInfoProto_default_instance_;
class CMD_SC_GameResultProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_SC_GameResultProto> _instance;
} _CMD_SC_GameResultProto_default_instance_;
class CMD_SC_BetAgainProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_SC_BetAgainProto> _instance;
} _CMD_SC_BetAgainProto_default_instance_;
class CMD_SC_NotifyStatusProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_SC_NotifyStatusProto> _instance;
} _CMD_SC_NotifyStatusProto_default_instance_;
class CMD_CS_BetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_CS_Bet> _instance;
} _CMD_CS_Bet_default_instance_;
class CMD_CS_BetAgainDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_CS_BetAgain> _instance;
} _CMD_CS_BetAgain_default_instance_;
}  // namespace DZNZ
static void InitDefaultsscc_info_CMD_CS_Bet_DZNZ_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DZNZ::_CMD_CS_Bet_default_instance_;
    new (ptr) ::DZNZ::CMD_CS_Bet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_CS_Bet_DZNZ_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_CS_Bet_DZNZ_2eproto}, {}};

static void InitDefaultsscc_info_CMD_CS_BetAgain_DZNZ_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DZNZ::_CMD_CS_BetAgain_default_instance_;
    new (ptr) ::DZNZ::CMD_CS_BetAgain();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_CS_BetAgain_DZNZ_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_CS_BetAgain_DZNZ_2eproto}, {}};

static void InitDefaultsscc_info_CMD_SC_BetAgainProto_DZNZ_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DZNZ::_CMD_SC_BetAgainProto_default_instance_;
    new (ptr) ::DZNZ::CMD_SC_BetAgainProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_SC_BetAgainProto_DZNZ_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_SC_BetAgainProto_DZNZ_2eproto}, {}};

static void InitDefaultsscc_info_CMD_SC_BetProto_DZNZ_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DZNZ::_CMD_SC_BetProto_default_instance_;
    new (ptr) ::DZNZ::CMD_SC_BetProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_SC_BetProto_DZNZ_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_SC_BetProto_DZNZ_2eproto}, {}};

static void InitDefaultsscc_info_CMD_SC_GameResultProto_DZNZ_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DZNZ::_CMD_SC_GameResultProto_default_instance_;
    new (ptr) ::DZNZ::CMD_SC_GameResultProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_SC_GameResultProto_DZNZ_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_SC_GameResultProto_DZNZ_2eproto}, {}};

static void InitDefaultsscc_info_CMD_SC_NotifyStatusProto_DZNZ_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DZNZ::_CMD_SC_NotifyStatusProto_default_instance_;
    new (ptr) ::DZNZ::CMD_SC_NotifyStatusProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_SC_NotifyStatusProto_DZNZ_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_SC_NotifyStatusProto_DZNZ_2eproto}, {}};

static void InitDefaultsscc_info_PlayerGameData_DZNZ_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DZNZ::_PlayerGameData_default_instance_;
    new (ptr) ::DZNZ::PlayerGameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlayerGameData_DZNZ_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PlayerGameData_DZNZ_2eproto}, {
      &scc_info_PlayerInfoProto_DZNZ_2eproto.base,}};

static void InitDefaultsscc_info_PlayerInfoProto_DZNZ_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DZNZ::_PlayerInfoProto_default_instance_;
    new (ptr) ::DZNZ::PlayerInfoProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerInfoProto_DZNZ_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerInfoProto_DZNZ_2eproto}, {}};

static void InitDefaultsscc_info_RecodeProto_DZNZ_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DZNZ::_RecodeProto_default_instance_;
    new (ptr) ::DZNZ::RecodeProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecodeProto_DZNZ_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RecodeProto_DZNZ_2eproto}, {}};

static void InitDefaultsscc_info_SC_SceneInfoProto_DZNZ_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DZNZ::_SC_SceneInfoProto_default_instance_;
    new (ptr) ::DZNZ::SC_SceneInfoProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SC_SceneInfoProto_DZNZ_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SC_SceneInfoProto_DZNZ_2eproto}, {
      &scc_info_WheelInfoProto_DZNZ_2eproto.base,
      &scc_info_PlayerInfoProto_DZNZ_2eproto.base,}};

static void InitDefaultsscc_info_WheelInfoProto_DZNZ_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DZNZ::_WheelInfoProto_default_instance_;
    new (ptr) ::DZNZ::WheelInfoProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WheelInfoProto_DZNZ_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WheelInfoProto_DZNZ_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_DZNZ_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_DZNZ_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_DZNZ_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_DZNZ_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DZNZ::RecodeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DZNZ::RecodeProto, game_recode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DZNZ::PlayerInfoProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DZNZ::PlayerInfoProto, win_count_),
  PROTOBUF_FIELD_OFFSET(::DZNZ::PlayerInfoProto, player_bet_),
  PROTOBUF_FIELD_OFFSET(::DZNZ::PlayerInfoProto, total_win_),
  PROTOBUF_FIELD_OFFSET(::DZNZ::PlayerInfoProto, bet_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DZNZ::PlayerGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DZNZ::PlayerGameData, player_game_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DZNZ::SC_SceneInfoProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DZNZ::SC_SceneInfoProto, game_state_),
  PROTOBUF_FIELD_OFFSET(::DZNZ::SC_SceneInfoProto, remain_time_),
  PROTOBUF_FIELD_OFFSET(::DZNZ::SC_SceneInfoProto, wheel_msg_),
  PROTOBUF_FIELD_OFFSET(::DZNZ::SC_SceneInfoProto, bet_limit_),
  PROTOBUF_FIELD_OFFSET(::DZNZ::SC_SceneInfoProto, bet_config_),
  PROTOBUF_FIELD_OFFSET(::DZNZ::SC_SceneInfoProto, area_multiple_),
  PROTOBUF_FIELD_OFFSET(::DZNZ::SC_SceneInfoProto, player_game_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DZNZ::CMD_SC_BetProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DZNZ::CMD_SC_BetProto, chairid_),
  PROTOBUF_FIELD_OFFSET(::DZNZ::CMD_SC_BetProto, area_),
  PROTOBUF_FIELD_OFFSET(::DZNZ::CMD_SC_BetProto, bet_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DZNZ::WheelInfoProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DZNZ::WheelInfoProto, win_msg_),
  PROTOBUF_FIELD_OFFSET(::DZNZ::WheelInfoProto, hand_),
  PROTOBUF_FIELD_OFFSET(::DZNZ::WheelInfoProto, card_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DZNZ::CMD_SC_GameResultProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DZNZ::CMD_SC_GameResultProto, card_type_),
  PROTOBUF_FIELD_OFFSET(::DZNZ::CMD_SC_GameResultProto, card_),
  PROTOBUF_FIELD_OFFSET(::DZNZ::CMD_SC_GameResultProto, win_card_),
  PROTOBUF_FIELD_OFFSET(::DZNZ::CMD_SC_GameResultProto, wheel_info_win_msg_),
  PROTOBUF_FIELD_OFFSET(::DZNZ::CMD_SC_GameResultProto, wheel_info_hand_),
  PROTOBUF_FIELD_OFFSET(::DZNZ::CMD_SC_GameResultProto, wheel_info_card_type_),
  PROTOBUF_FIELD_OFFSET(::DZNZ::CMD_SC_GameResultProto, win_msg_),
  PROTOBUF_FIELD_OFFSET(::DZNZ::CMD_SC_GameResultProto, user_gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DZNZ::CMD_SC_BetAgainProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DZNZ::CMD_SC_BetAgainProto, chairid_),
  PROTOBUF_FIELD_OFFSET(::DZNZ::CMD_SC_BetAgainProto, area_),
  PROTOBUF_FIELD_OFFSET(::DZNZ::CMD_SC_BetAgainProto, bet_num_),
  PROTOBUF_FIELD_OFFSET(::DZNZ::CMD_SC_BetAgainProto, bet_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DZNZ::CMD_SC_NotifyStatusProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DZNZ::CMD_SC_NotifyStatusProto, game_state_),
  PROTOBUF_FIELD_OFFSET(::DZNZ::CMD_SC_NotifyStatusProto, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DZNZ::CMD_CS_Bet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DZNZ::CMD_CS_Bet, area_),
  PROTOBUF_FIELD_OFFSET(::DZNZ::CMD_CS_Bet, bet_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DZNZ::CMD_CS_BetAgain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DZNZ::CMD_CS_BetAgain, area_),
  PROTOBUF_FIELD_OFFSET(::DZNZ::CMD_CS_BetAgain, bet_num_),
  PROTOBUF_FIELD_OFFSET(::DZNZ::CMD_CS_BetAgain, bet_count_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::DZNZ::RecodeProto)},
  { 6, -1, sizeof(::DZNZ::PlayerInfoProto)},
  { 15, -1, sizeof(::DZNZ::PlayerGameData)},
  { 21, -1, sizeof(::DZNZ::SC_SceneInfoProto)},
  { 33, -1, sizeof(::DZNZ::CMD_SC_BetProto)},
  { 41, -1, sizeof(::DZNZ::WheelInfoProto)},
  { 49, -1, sizeof(::DZNZ::CMD_SC_GameResultProto)},
  { 62, -1, sizeof(::DZNZ::CMD_SC_BetAgainProto)},
  { 71, -1, sizeof(::DZNZ::CMD_SC_NotifyStatusProto)},
  { 78, -1, sizeof(::DZNZ::CMD_CS_Bet)},
  { 85, -1, sizeof(::DZNZ::CMD_CS_BetAgain)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DZNZ::_RecodeProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DZNZ::_PlayerInfoProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DZNZ::_PlayerGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DZNZ::_SC_SceneInfoProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DZNZ::_CMD_SC_BetProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DZNZ::_WheelInfoProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DZNZ::_CMD_SC_GameResultProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DZNZ::_CMD_SC_BetAgainProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DZNZ::_CMD_SC_NotifyStatusProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DZNZ::_CMD_CS_Bet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DZNZ::_CMD_CS_BetAgain_default_instance_),
};

const char descriptor_table_protodef_DZNZ_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nDZNZ.proto\022\004DZNZ\"\"\n\013RecodeProto\022\023\n\013gam"
  "e_recode\030\001 \003(\005\"]\n\017PlayerInfoProto\022\021\n\twin"
  "_count\030\001 \001(\005\022\022\n\nplayer_bet\030\002 \001(\003\022\021\n\ttota"
  "l_win\030\003 \001(\003\022\020\n\010bet_info\030\004 \003(\005\"A\n\016PlayerG"
  "ameData\022/\n\020Player_Game_Data\030\001 \003(\0132\025.DZNZ"
  ".PlayerInfoProto\"\324\001\n\021SC_SceneInfoProto\022\022"
  "\n\ngame_state\030\001 \001(\005\022\023\n\013remain_time\030\002 \001(\005\022"
  "\'\n\twheel_msg\030\003 \003(\0132\024.DZNZ.WheelInfoProto"
  "\022\021\n\tbet_limit\030\004 \003(\003\022\022\n\nbet_config\030\005 \003(\005\022"
  "\025\n\rarea_multiple\030\006 \003(\005\022/\n\020player_game_da"
  "ta\030\007 \003(\0132\025.DZNZ.PlayerInfoProto\"A\n\017CMD_S"
  "C_BetProto\022\017\n\007chairid\030\001 \001(\005\022\014\n\004area\030\002 \001("
  "\005\022\017\n\007bet_num\030\003 \001(\005\"B\n\016WheelInfoProto\022\017\n\007"
  "win_msg\030\001 \001(\005\022\014\n\004hand\030\002 \003(\005\022\021\n\tcard_type"
  "\030\003 \001(\005\"\302\001\n\026CMD_SC_GameResultProto\022\021\n\tcar"
  "d_type\030\001 \003(\005\022\014\n\004card\030\002 \003(\005\022\020\n\010win_card\030\003"
  " \003(\005\022\032\n\022wheel_info_win_msg\030\005 \001(\005\022\027\n\017whee"
  "l_info_hand\030\006 \003(\005\022\034\n\024wheel_info_card_typ"
  "e\030\007 \001(\005\022\017\n\007win_msg\030\010 \003(\003\022\021\n\tuser_gold\030\t "
  "\003(\003\"Y\n\024CMD_SC_BetAgainProto\022\017\n\007chairid\030\001"
  " \001(\005\022\014\n\004area\030\002 \001(\005\022\017\n\007bet_num\030\003 \001(\005\022\021\n\tb"
  "et_count\030\004 \001(\005\"<\n\030CMD_SC_NotifyStatusPro"
  "to\022\022\n\ngame_state\030\001 \001(\005\022\014\n\004time\030\002 \001(\005\"+\n\n"
  "CMD_CS_Bet\022\014\n\004area\030\001 \001(\005\022\017\n\007bet_num\030\002 \001("
  "\005\"C\n\017CMD_CS_BetAgain\022\014\n\004area\030\001 \001(\005\022\017\n\007be"
  "t_num\030\002 \001(\005\022\021\n\tbet_count\030\003 \001(\005*\310\001\n\nEMsgI"
  "DDZNZ\022\016\n\nCMD_CS_BET\020\000\022\023\n\017CMD_CS_BETAGAIN"
  "\020\001\022\016\n\nCMD_SC_BET\020\002\022\025\n\021CMD_SC_GAMERESULT\020"
  "\003\022\023\n\017CMD_SC_BETAGAIN\020\004\022\026\n\022CMD_SC_NOTIFYS"
  "TATU\020\005\022\026\n\022CMD_SC_PLAYERINFOS\020\006\022\021\n\rCMD_SC"
  "_AI_BET\020\007\022\026\n\022CMD_SC_GAME_RECORD\020\010b\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_DZNZ_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_DZNZ_2eproto_sccs[11] = {
  &scc_info_CMD_CS_Bet_DZNZ_2eproto.base,
  &scc_info_CMD_CS_BetAgain_DZNZ_2eproto.base,
  &scc_info_CMD_SC_BetAgainProto_DZNZ_2eproto.base,
  &scc_info_CMD_SC_BetProto_DZNZ_2eproto.base,
  &scc_info_CMD_SC_GameResultProto_DZNZ_2eproto.base,
  &scc_info_CMD_SC_NotifyStatusProto_DZNZ_2eproto.base,
  &scc_info_PlayerGameData_DZNZ_2eproto.base,
  &scc_info_PlayerInfoProto_DZNZ_2eproto.base,
  &scc_info_RecodeProto_DZNZ_2eproto.base,
  &scc_info_SC_SceneInfoProto_DZNZ_2eproto.base,
  &scc_info_WheelInfoProto_DZNZ_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_DZNZ_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DZNZ_2eproto = {
  false, false, descriptor_table_protodef_DZNZ_2eproto, "DZNZ.proto", 1241,
  &descriptor_table_DZNZ_2eproto_once, descriptor_table_DZNZ_2eproto_sccs, descriptor_table_DZNZ_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_DZNZ_2eproto::offsets,
  file_level_metadata_DZNZ_2eproto, 11, file_level_enum_descriptors_DZNZ_2eproto, file_level_service_descriptors_DZNZ_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_DZNZ_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_DZNZ_2eproto)), true);
namespace DZNZ {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDDZNZ_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DZNZ_2eproto);
  return file_level_enum_descriptors_DZNZ_2eproto[0];
}
bool EMsgIDDZNZ_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RecodeProto::_Internal {
 public:
};

RecodeProto::RecodeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  game_recode_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DZNZ.RecodeProto)
}
RecodeProto::RecodeProto(const RecodeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      game_recode_(from.game_recode_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DZNZ.RecodeProto)
}

void RecodeProto::SharedCtor() {
}

RecodeProto::~RecodeProto() {
  // @@protoc_insertion_point(destructor:DZNZ.RecodeProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecodeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RecodeProto::ArenaDtor(void* object) {
  RecodeProto* _this = reinterpret_cast< RecodeProto* >(object);
  (void)_this;
}
void RecodeProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecodeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecodeProto& RecodeProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecodeProto_DZNZ_2eproto.base);
  return *internal_default_instance();
}


void RecodeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:DZNZ.RecodeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_recode_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecodeProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 game_recode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_game_recode(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_game_recode(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecodeProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DZNZ.RecodeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 game_recode = 1;
  {
    int byte_size = _game_recode_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_game_recode(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DZNZ.RecodeProto)
  return target;
}

size_t RecodeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DZNZ.RecodeProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 game_recode = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->game_recode_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _game_recode_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecodeProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DZNZ.RecodeProto)
  GOOGLE_DCHECK_NE(&from, this);
  const RecodeProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecodeProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DZNZ.RecodeProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DZNZ.RecodeProto)
    MergeFrom(*source);
  }
}

void RecodeProto::MergeFrom(const RecodeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DZNZ.RecodeProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  game_recode_.MergeFrom(from.game_recode_);
}

void RecodeProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DZNZ.RecodeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecodeProto::CopyFrom(const RecodeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DZNZ.RecodeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecodeProto::IsInitialized() const {
  return true;
}

void RecodeProto::InternalSwap(RecodeProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  game_recode_.InternalSwap(&other->game_recode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecodeProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PlayerInfoProto::_Internal {
 public:
};

PlayerInfoProto::PlayerInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bet_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DZNZ.PlayerInfoProto)
}
PlayerInfoProto::PlayerInfoProto(const PlayerInfoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bet_info_(from.bet_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_bet_, &from.player_bet_,
    static_cast<size_t>(reinterpret_cast<char*>(&win_count_) -
    reinterpret_cast<char*>(&player_bet_)) + sizeof(win_count_));
  // @@protoc_insertion_point(copy_constructor:DZNZ.PlayerInfoProto)
}

void PlayerInfoProto::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&player_bet_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&win_count_) -
      reinterpret_cast<char*>(&player_bet_)) + sizeof(win_count_));
}

PlayerInfoProto::~PlayerInfoProto() {
  // @@protoc_insertion_point(destructor:DZNZ.PlayerInfoProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerInfoProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlayerInfoProto::ArenaDtor(void* object) {
  PlayerInfoProto* _this = reinterpret_cast< PlayerInfoProto* >(object);
  (void)_this;
}
void PlayerInfoProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerInfoProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerInfoProto& PlayerInfoProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerInfoProto_DZNZ_2eproto.base);
  return *internal_default_instance();
}


void PlayerInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:DZNZ.PlayerInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bet_info_.Clear();
  ::memset(&player_bet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&win_count_) -
      reinterpret_cast<char*>(&player_bet_)) + sizeof(win_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInfoProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 win_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          win_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 player_bet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          player_bet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_win = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_win_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 bet_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bet_info(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_bet_info(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerInfoProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DZNZ.PlayerInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 win_count = 1;
  if (this->win_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_win_count(), target);
  }

  // int64 player_bet = 2;
  if (this->player_bet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_player_bet(), target);
  }

  // int64 total_win = 3;
  if (this->total_win() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_total_win(), target);
  }

  // repeated int32 bet_info = 4;
  {
    int byte_size = _bet_info_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_bet_info(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DZNZ.PlayerInfoProto)
  return target;
}

size_t PlayerInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DZNZ.PlayerInfoProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 bet_info = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bet_info_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bet_info_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 player_bet = 2;
  if (this->player_bet() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_player_bet());
  }

  // int64 total_win = 3;
  if (this->total_win() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_win());
  }

  // int32 win_count = 1;
  if (this->win_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_win_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerInfoProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DZNZ.PlayerInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerInfoProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerInfoProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DZNZ.PlayerInfoProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DZNZ.PlayerInfoProto)
    MergeFrom(*source);
  }
}

void PlayerInfoProto::MergeFrom(const PlayerInfoProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DZNZ.PlayerInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bet_info_.MergeFrom(from.bet_info_);
  if (from.player_bet() != 0) {
    _internal_set_player_bet(from._internal_player_bet());
  }
  if (from.total_win() != 0) {
    _internal_set_total_win(from._internal_total_win());
  }
  if (from.win_count() != 0) {
    _internal_set_win_count(from._internal_win_count());
  }
}

void PlayerInfoProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DZNZ.PlayerInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfoProto::CopyFrom(const PlayerInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DZNZ.PlayerInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoProto::IsInitialized() const {
  return true;
}

void PlayerInfoProto::InternalSwap(PlayerInfoProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bet_info_.InternalSwap(&other->bet_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerInfoProto, win_count_)
      + sizeof(PlayerInfoProto::win_count_)
      - PROTOBUF_FIELD_OFFSET(PlayerInfoProto, player_bet_)>(
          reinterpret_cast<char*>(&player_bet_),
          reinterpret_cast<char*>(&other->player_bet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInfoProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PlayerGameData::_Internal {
 public:
};

PlayerGameData::PlayerGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  player_game_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DZNZ.PlayerGameData)
}
PlayerGameData::PlayerGameData(const PlayerGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      player_game_data_(from.player_game_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DZNZ.PlayerGameData)
}

void PlayerGameData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerGameData_DZNZ_2eproto.base);
}

PlayerGameData::~PlayerGameData() {
  // @@protoc_insertion_point(destructor:DZNZ.PlayerGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlayerGameData::ArenaDtor(void* object) {
  PlayerGameData* _this = reinterpret_cast< PlayerGameData* >(object);
  (void)_this;
}
void PlayerGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerGameData& PlayerGameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerGameData_DZNZ_2eproto.base);
  return *internal_default_instance();
}


void PlayerGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:DZNZ.PlayerGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_game_data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .DZNZ.PlayerInfoProto Player_Game_Data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_game_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DZNZ.PlayerGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DZNZ.PlayerInfoProto Player_Game_Data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_game_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_player_game_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DZNZ.PlayerGameData)
  return target;
}

size_t PlayerGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DZNZ.PlayerGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DZNZ.PlayerInfoProto Player_Game_Data = 1;
  total_size += 1UL * this->_internal_player_game_data_size();
  for (const auto& msg : this->player_game_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DZNZ.PlayerGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DZNZ.PlayerGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DZNZ.PlayerGameData)
    MergeFrom(*source);
  }
}

void PlayerGameData::MergeFrom(const PlayerGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DZNZ.PlayerGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_game_data_.MergeFrom(from.player_game_data_);
}

void PlayerGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DZNZ.PlayerGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerGameData::CopyFrom(const PlayerGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DZNZ.PlayerGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerGameData::IsInitialized() const {
  return true;
}

void PlayerGameData::InternalSwap(PlayerGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  player_game_data_.InternalSwap(&other->player_game_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SC_SceneInfoProto::_Internal {
 public:
};

SC_SceneInfoProto::SC_SceneInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  wheel_msg_(arena),
  bet_limit_(arena),
  bet_config_(arena),
  area_multiple_(arena),
  player_game_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DZNZ.SC_SceneInfoProto)
}
SC_SceneInfoProto::SC_SceneInfoProto(const SC_SceneInfoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      wheel_msg_(from.wheel_msg_),
      bet_limit_(from.bet_limit_),
      bet_config_(from.bet_config_),
      area_multiple_(from.area_multiple_),
      player_game_data_(from.player_game_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&game_state_, &from.game_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&remain_time_) -
    reinterpret_cast<char*>(&game_state_)) + sizeof(remain_time_));
  // @@protoc_insertion_point(copy_constructor:DZNZ.SC_SceneInfoProto)
}

void SC_SceneInfoProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SC_SceneInfoProto_DZNZ_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&game_state_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&remain_time_) -
      reinterpret_cast<char*>(&game_state_)) + sizeof(remain_time_));
}

SC_SceneInfoProto::~SC_SceneInfoProto() {
  // @@protoc_insertion_point(destructor:DZNZ.SC_SceneInfoProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SC_SceneInfoProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SC_SceneInfoProto::ArenaDtor(void* object) {
  SC_SceneInfoProto* _this = reinterpret_cast< SC_SceneInfoProto* >(object);
  (void)_this;
}
void SC_SceneInfoProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SC_SceneInfoProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_SceneInfoProto& SC_SceneInfoProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_SceneInfoProto_DZNZ_2eproto.base);
  return *internal_default_instance();
}


void SC_SceneInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:DZNZ.SC_SceneInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wheel_msg_.Clear();
  bet_limit_.Clear();
  bet_config_.Clear();
  area_multiple_.Clear();
  player_game_data_.Clear();
  ::memset(&game_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remain_time_) -
      reinterpret_cast<char*>(&game_state_)) + sizeof(remain_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_SceneInfoProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 game_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          game_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 remain_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          remain_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .DZNZ.WheelInfoProto wheel_msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_wheel_msg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int64 bet_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_bet_limit(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_bet_limit(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 bet_config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bet_config(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_bet_config(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 area_multiple = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_area_multiple(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_area_multiple(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .DZNZ.PlayerInfoProto player_game_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_game_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_SceneInfoProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DZNZ.SC_SceneInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 game_state = 1;
  if (this->game_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_game_state(), target);
  }

  // int32 remain_time = 2;
  if (this->remain_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_remain_time(), target);
  }

  // repeated .DZNZ.WheelInfoProto wheel_msg = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_wheel_msg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_wheel_msg(i), target, stream);
  }

  // repeated int64 bet_limit = 4;
  {
    int byte_size = _bet_limit_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_bet_limit(), byte_size, target);
    }
  }

  // repeated int32 bet_config = 5;
  {
    int byte_size = _bet_config_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_bet_config(), byte_size, target);
    }
  }

  // repeated int32 area_multiple = 6;
  {
    int byte_size = _area_multiple_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_area_multiple(), byte_size, target);
    }
  }

  // repeated .DZNZ.PlayerInfoProto player_game_data = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_game_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_player_game_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DZNZ.SC_SceneInfoProto)
  return target;
}

size_t SC_SceneInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DZNZ.SC_SceneInfoProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DZNZ.WheelInfoProto wheel_msg = 3;
  total_size += 1UL * this->_internal_wheel_msg_size();
  for (const auto& msg : this->wheel_msg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 bet_limit = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->bet_limit_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bet_limit_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 bet_config = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bet_config_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bet_config_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 area_multiple = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->area_multiple_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _area_multiple_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .DZNZ.PlayerInfoProto player_game_data = 7;
  total_size += 1UL * this->_internal_player_game_data_size();
  for (const auto& msg : this->player_game_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 game_state = 1;
  if (this->game_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_state());
  }

  // int32 remain_time = 2;
  if (this->remain_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_remain_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_SceneInfoProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DZNZ.SC_SceneInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_SceneInfoProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_SceneInfoProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DZNZ.SC_SceneInfoProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DZNZ.SC_SceneInfoProto)
    MergeFrom(*source);
  }
}

void SC_SceneInfoProto::MergeFrom(const SC_SceneInfoProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DZNZ.SC_SceneInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wheel_msg_.MergeFrom(from.wheel_msg_);
  bet_limit_.MergeFrom(from.bet_limit_);
  bet_config_.MergeFrom(from.bet_config_);
  area_multiple_.MergeFrom(from.area_multiple_);
  player_game_data_.MergeFrom(from.player_game_data_);
  if (from.game_state() != 0) {
    _internal_set_game_state(from._internal_game_state());
  }
  if (from.remain_time() != 0) {
    _internal_set_remain_time(from._internal_remain_time());
  }
}

void SC_SceneInfoProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DZNZ.SC_SceneInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SceneInfoProto::CopyFrom(const SC_SceneInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DZNZ.SC_SceneInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_SceneInfoProto::IsInitialized() const {
  return true;
}

void SC_SceneInfoProto::InternalSwap(SC_SceneInfoProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  wheel_msg_.InternalSwap(&other->wheel_msg_);
  bet_limit_.InternalSwap(&other->bet_limit_);
  bet_config_.InternalSwap(&other->bet_config_);
  area_multiple_.InternalSwap(&other->area_multiple_);
  player_game_data_.InternalSwap(&other->player_game_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_SceneInfoProto, remain_time_)
      + sizeof(SC_SceneInfoProto::remain_time_)
      - PROTOBUF_FIELD_OFFSET(SC_SceneInfoProto, game_state_)>(
          reinterpret_cast<char*>(&game_state_),
          reinterpret_cast<char*>(&other->game_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_SceneInfoProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_SC_BetProto::_Internal {
 public:
};

CMD_SC_BetProto::CMD_SC_BetProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DZNZ.CMD_SC_BetProto)
}
CMD_SC_BetProto::CMD_SC_BetProto(const CMD_SC_BetProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chairid_, &from.chairid_,
    static_cast<size_t>(reinterpret_cast<char*>(&bet_num_) -
    reinterpret_cast<char*>(&chairid_)) + sizeof(bet_num_));
  // @@protoc_insertion_point(copy_constructor:DZNZ.CMD_SC_BetProto)
}

void CMD_SC_BetProto::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chairid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bet_num_) -
      reinterpret_cast<char*>(&chairid_)) + sizeof(bet_num_));
}

CMD_SC_BetProto::~CMD_SC_BetProto() {
  // @@protoc_insertion_point(destructor:DZNZ.CMD_SC_BetProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_SC_BetProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_SC_BetProto::ArenaDtor(void* object) {
  CMD_SC_BetProto* _this = reinterpret_cast< CMD_SC_BetProto* >(object);
  (void)_this;
}
void CMD_SC_BetProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_SC_BetProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_SC_BetProto& CMD_SC_BetProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_SC_BetProto_DZNZ_2eproto.base);
  return *internal_default_instance();
}


void CMD_SC_BetProto::Clear() {
// @@protoc_insertion_point(message_clear_start:DZNZ.CMD_SC_BetProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chairid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bet_num_) -
      reinterpret_cast<char*>(&chairid_)) + sizeof(bet_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_SC_BetProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chairid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chairid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 area = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bet_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bet_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_SC_BetProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DZNZ.CMD_SC_BetProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chairid = 1;
  if (this->chairid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chairid(), target);
  }

  // int32 area = 2;
  if (this->area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_area(), target);
  }

  // int32 bet_num = 3;
  if (this->bet_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_bet_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DZNZ.CMD_SC_BetProto)
  return target;
}

size_t CMD_SC_BetProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DZNZ.CMD_SC_BetProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chairid = 1;
  if (this->chairid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chairid());
  }

  // int32 area = 2;
  if (this->area() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_area());
  }

  // int32 bet_num = 3;
  if (this->bet_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bet_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_SC_BetProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DZNZ.CMD_SC_BetProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_SC_BetProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_SC_BetProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DZNZ.CMD_SC_BetProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DZNZ.CMD_SC_BetProto)
    MergeFrom(*source);
  }
}

void CMD_SC_BetProto::MergeFrom(const CMD_SC_BetProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DZNZ.CMD_SC_BetProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chairid() != 0) {
    _internal_set_chairid(from._internal_chairid());
  }
  if (from.area() != 0) {
    _internal_set_area(from._internal_area());
  }
  if (from.bet_num() != 0) {
    _internal_set_bet_num(from._internal_bet_num());
  }
}

void CMD_SC_BetProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DZNZ.CMD_SC_BetProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_SC_BetProto::CopyFrom(const CMD_SC_BetProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DZNZ.CMD_SC_BetProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_SC_BetProto::IsInitialized() const {
  return true;
}

void CMD_SC_BetProto::InternalSwap(CMD_SC_BetProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_SC_BetProto, bet_num_)
      + sizeof(CMD_SC_BetProto::bet_num_)
      - PROTOBUF_FIELD_OFFSET(CMD_SC_BetProto, chairid_)>(
          reinterpret_cast<char*>(&chairid_),
          reinterpret_cast<char*>(&other->chairid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_SC_BetProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WheelInfoProto::_Internal {
 public:
};

WheelInfoProto::WheelInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hand_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DZNZ.WheelInfoProto)
}
WheelInfoProto::WheelInfoProto(const WheelInfoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hand_(from.hand_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&win_msg_, &from.win_msg_,
    static_cast<size_t>(reinterpret_cast<char*>(&card_type_) -
    reinterpret_cast<char*>(&win_msg_)) + sizeof(card_type_));
  // @@protoc_insertion_point(copy_constructor:DZNZ.WheelInfoProto)
}

void WheelInfoProto::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&win_msg_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&card_type_) -
      reinterpret_cast<char*>(&win_msg_)) + sizeof(card_type_));
}

WheelInfoProto::~WheelInfoProto() {
  // @@protoc_insertion_point(destructor:DZNZ.WheelInfoProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WheelInfoProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WheelInfoProto::ArenaDtor(void* object) {
  WheelInfoProto* _this = reinterpret_cast< WheelInfoProto* >(object);
  (void)_this;
}
void WheelInfoProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WheelInfoProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WheelInfoProto& WheelInfoProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WheelInfoProto_DZNZ_2eproto.base);
  return *internal_default_instance();
}


void WheelInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:DZNZ.WheelInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hand_.Clear();
  ::memset(&win_msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_type_) -
      reinterpret_cast<char*>(&win_msg_)) + sizeof(card_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WheelInfoProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 win_msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          win_msg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 hand = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_hand(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_hand(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 card_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          card_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WheelInfoProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DZNZ.WheelInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 win_msg = 1;
  if (this->win_msg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_win_msg(), target);
  }

  // repeated int32 hand = 2;
  {
    int byte_size = _hand_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_hand(), byte_size, target);
    }
  }

  // int32 card_type = 3;
  if (this->card_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_card_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DZNZ.WheelInfoProto)
  return target;
}

size_t WheelInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DZNZ.WheelInfoProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 hand = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->hand_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _hand_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 win_msg = 1;
  if (this->win_msg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_win_msg());
  }

  // int32 card_type = 3;
  if (this->card_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_card_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WheelInfoProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DZNZ.WheelInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  const WheelInfoProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WheelInfoProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DZNZ.WheelInfoProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DZNZ.WheelInfoProto)
    MergeFrom(*source);
  }
}

void WheelInfoProto::MergeFrom(const WheelInfoProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DZNZ.WheelInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hand_.MergeFrom(from.hand_);
  if (from.win_msg() != 0) {
    _internal_set_win_msg(from._internal_win_msg());
  }
  if (from.card_type() != 0) {
    _internal_set_card_type(from._internal_card_type());
  }
}

void WheelInfoProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DZNZ.WheelInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WheelInfoProto::CopyFrom(const WheelInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DZNZ.WheelInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WheelInfoProto::IsInitialized() const {
  return true;
}

void WheelInfoProto::InternalSwap(WheelInfoProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hand_.InternalSwap(&other->hand_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WheelInfoProto, card_type_)
      + sizeof(WheelInfoProto::card_type_)
      - PROTOBUF_FIELD_OFFSET(WheelInfoProto, win_msg_)>(
          reinterpret_cast<char*>(&win_msg_),
          reinterpret_cast<char*>(&other->win_msg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WheelInfoProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_SC_GameResultProto::_Internal {
 public:
};

CMD_SC_GameResultProto::CMD_SC_GameResultProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  card_type_(arena),
  card_(arena),
  win_card_(arena),
  wheel_info_hand_(arena),
  win_msg_(arena),
  user_gold_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DZNZ.CMD_SC_GameResultProto)
}
CMD_SC_GameResultProto::CMD_SC_GameResultProto(const CMD_SC_GameResultProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      card_type_(from.card_type_),
      card_(from.card_),
      win_card_(from.win_card_),
      wheel_info_hand_(from.wheel_info_hand_),
      win_msg_(from.win_msg_),
      user_gold_(from.user_gold_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&wheel_info_win_msg_, &from.wheel_info_win_msg_,
    static_cast<size_t>(reinterpret_cast<char*>(&wheel_info_card_type_) -
    reinterpret_cast<char*>(&wheel_info_win_msg_)) + sizeof(wheel_info_card_type_));
  // @@protoc_insertion_point(copy_constructor:DZNZ.CMD_SC_GameResultProto)
}

void CMD_SC_GameResultProto::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&wheel_info_win_msg_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&wheel_info_card_type_) -
      reinterpret_cast<char*>(&wheel_info_win_msg_)) + sizeof(wheel_info_card_type_));
}

CMD_SC_GameResultProto::~CMD_SC_GameResultProto() {
  // @@protoc_insertion_point(destructor:DZNZ.CMD_SC_GameResultProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_SC_GameResultProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_SC_GameResultProto::ArenaDtor(void* object) {
  CMD_SC_GameResultProto* _this = reinterpret_cast< CMD_SC_GameResultProto* >(object);
  (void)_this;
}
void CMD_SC_GameResultProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_SC_GameResultProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_SC_GameResultProto& CMD_SC_GameResultProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_SC_GameResultProto_DZNZ_2eproto.base);
  return *internal_default_instance();
}


void CMD_SC_GameResultProto::Clear() {
// @@protoc_insertion_point(message_clear_start:DZNZ.CMD_SC_GameResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  card_type_.Clear();
  card_.Clear();
  win_card_.Clear();
  wheel_info_hand_.Clear();
  win_msg_.Clear();
  user_gold_.Clear();
  ::memset(&wheel_info_win_msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wheel_info_card_type_) -
      reinterpret_cast<char*>(&wheel_info_win_msg_)) + sizeof(wheel_info_card_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_SC_GameResultProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 card_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_card_type(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_card_type(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 card = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_card(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_card(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 win_card = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_win_card(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_win_card(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 wheel_info_win_msg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          wheel_info_win_msg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 wheel_info_hand = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_wheel_info_hand(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_wheel_info_hand(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 wheel_info_card_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          wheel_info_card_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 win_msg = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_win_msg(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_win_msg(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 user_gold = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_user_gold(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          _internal_add_user_gold(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_SC_GameResultProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DZNZ.CMD_SC_GameResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 card_type = 1;
  {
    int byte_size = _card_type_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_card_type(), byte_size, target);
    }
  }

  // repeated int32 card = 2;
  {
    int byte_size = _card_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_card(), byte_size, target);
    }
  }

  // repeated int32 win_card = 3;
  {
    int byte_size = _win_card_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_win_card(), byte_size, target);
    }
  }

  // int32 wheel_info_win_msg = 5;
  if (this->wheel_info_win_msg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_wheel_info_win_msg(), target);
  }

  // repeated int32 wheel_info_hand = 6;
  {
    int byte_size = _wheel_info_hand_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_wheel_info_hand(), byte_size, target);
    }
  }

  // int32 wheel_info_card_type = 7;
  if (this->wheel_info_card_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_wheel_info_card_type(), target);
  }

  // repeated int64 win_msg = 8;
  {
    int byte_size = _win_msg_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          8, _internal_win_msg(), byte_size, target);
    }
  }

  // repeated int64 user_gold = 9;
  {
    int byte_size = _user_gold_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          9, _internal_user_gold(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DZNZ.CMD_SC_GameResultProto)
  return target;
}

size_t CMD_SC_GameResultProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DZNZ.CMD_SC_GameResultProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 card_type = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->card_type_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _card_type_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 card = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->card_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _card_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 win_card = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->win_card_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _win_card_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 wheel_info_hand = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->wheel_info_hand_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _wheel_info_hand_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 win_msg = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->win_msg_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _win_msg_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 user_gold = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->user_gold_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _user_gold_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 wheel_info_win_msg = 5;
  if (this->wheel_info_win_msg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wheel_info_win_msg());
  }

  // int32 wheel_info_card_type = 7;
  if (this->wheel_info_card_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wheel_info_card_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_SC_GameResultProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DZNZ.CMD_SC_GameResultProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_SC_GameResultProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_SC_GameResultProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DZNZ.CMD_SC_GameResultProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DZNZ.CMD_SC_GameResultProto)
    MergeFrom(*source);
  }
}

void CMD_SC_GameResultProto::MergeFrom(const CMD_SC_GameResultProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DZNZ.CMD_SC_GameResultProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_type_.MergeFrom(from.card_type_);
  card_.MergeFrom(from.card_);
  win_card_.MergeFrom(from.win_card_);
  wheel_info_hand_.MergeFrom(from.wheel_info_hand_);
  win_msg_.MergeFrom(from.win_msg_);
  user_gold_.MergeFrom(from.user_gold_);
  if (from.wheel_info_win_msg() != 0) {
    _internal_set_wheel_info_win_msg(from._internal_wheel_info_win_msg());
  }
  if (from.wheel_info_card_type() != 0) {
    _internal_set_wheel_info_card_type(from._internal_wheel_info_card_type());
  }
}

void CMD_SC_GameResultProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DZNZ.CMD_SC_GameResultProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_SC_GameResultProto::CopyFrom(const CMD_SC_GameResultProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DZNZ.CMD_SC_GameResultProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_SC_GameResultProto::IsInitialized() const {
  return true;
}

void CMD_SC_GameResultProto::InternalSwap(CMD_SC_GameResultProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  card_type_.InternalSwap(&other->card_type_);
  card_.InternalSwap(&other->card_);
  win_card_.InternalSwap(&other->win_card_);
  wheel_info_hand_.InternalSwap(&other->wheel_info_hand_);
  win_msg_.InternalSwap(&other->win_msg_);
  user_gold_.InternalSwap(&other->user_gold_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_SC_GameResultProto, wheel_info_card_type_)
      + sizeof(CMD_SC_GameResultProto::wheel_info_card_type_)
      - PROTOBUF_FIELD_OFFSET(CMD_SC_GameResultProto, wheel_info_win_msg_)>(
          reinterpret_cast<char*>(&wheel_info_win_msg_),
          reinterpret_cast<char*>(&other->wheel_info_win_msg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_SC_GameResultProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_SC_BetAgainProto::_Internal {
 public:
};

CMD_SC_BetAgainProto::CMD_SC_BetAgainProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DZNZ.CMD_SC_BetAgainProto)
}
CMD_SC_BetAgainProto::CMD_SC_BetAgainProto(const CMD_SC_BetAgainProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chairid_, &from.chairid_,
    static_cast<size_t>(reinterpret_cast<char*>(&bet_count_) -
    reinterpret_cast<char*>(&chairid_)) + sizeof(bet_count_));
  // @@protoc_insertion_point(copy_constructor:DZNZ.CMD_SC_BetAgainProto)
}

void CMD_SC_BetAgainProto::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chairid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bet_count_) -
      reinterpret_cast<char*>(&chairid_)) + sizeof(bet_count_));
}

CMD_SC_BetAgainProto::~CMD_SC_BetAgainProto() {
  // @@protoc_insertion_point(destructor:DZNZ.CMD_SC_BetAgainProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_SC_BetAgainProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_SC_BetAgainProto::ArenaDtor(void* object) {
  CMD_SC_BetAgainProto* _this = reinterpret_cast< CMD_SC_BetAgainProto* >(object);
  (void)_this;
}
void CMD_SC_BetAgainProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_SC_BetAgainProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_SC_BetAgainProto& CMD_SC_BetAgainProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_SC_BetAgainProto_DZNZ_2eproto.base);
  return *internal_default_instance();
}


void CMD_SC_BetAgainProto::Clear() {
// @@protoc_insertion_point(message_clear_start:DZNZ.CMD_SC_BetAgainProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chairid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bet_count_) -
      reinterpret_cast<char*>(&chairid_)) + sizeof(bet_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_SC_BetAgainProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chairid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chairid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 area = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bet_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bet_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bet_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bet_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_SC_BetAgainProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DZNZ.CMD_SC_BetAgainProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chairid = 1;
  if (this->chairid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chairid(), target);
  }

  // int32 area = 2;
  if (this->area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_area(), target);
  }

  // int32 bet_num = 3;
  if (this->bet_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_bet_num(), target);
  }

  // int32 bet_count = 4;
  if (this->bet_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_bet_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DZNZ.CMD_SC_BetAgainProto)
  return target;
}

size_t CMD_SC_BetAgainProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DZNZ.CMD_SC_BetAgainProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chairid = 1;
  if (this->chairid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chairid());
  }

  // int32 area = 2;
  if (this->area() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_area());
  }

  // int32 bet_num = 3;
  if (this->bet_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bet_num());
  }

  // int32 bet_count = 4;
  if (this->bet_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bet_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_SC_BetAgainProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DZNZ.CMD_SC_BetAgainProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_SC_BetAgainProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_SC_BetAgainProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DZNZ.CMD_SC_BetAgainProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DZNZ.CMD_SC_BetAgainProto)
    MergeFrom(*source);
  }
}

void CMD_SC_BetAgainProto::MergeFrom(const CMD_SC_BetAgainProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DZNZ.CMD_SC_BetAgainProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chairid() != 0) {
    _internal_set_chairid(from._internal_chairid());
  }
  if (from.area() != 0) {
    _internal_set_area(from._internal_area());
  }
  if (from.bet_num() != 0) {
    _internal_set_bet_num(from._internal_bet_num());
  }
  if (from.bet_count() != 0) {
    _internal_set_bet_count(from._internal_bet_count());
  }
}

void CMD_SC_BetAgainProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DZNZ.CMD_SC_BetAgainProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_SC_BetAgainProto::CopyFrom(const CMD_SC_BetAgainProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DZNZ.CMD_SC_BetAgainProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_SC_BetAgainProto::IsInitialized() const {
  return true;
}

void CMD_SC_BetAgainProto::InternalSwap(CMD_SC_BetAgainProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_SC_BetAgainProto, bet_count_)
      + sizeof(CMD_SC_BetAgainProto::bet_count_)
      - PROTOBUF_FIELD_OFFSET(CMD_SC_BetAgainProto, chairid_)>(
          reinterpret_cast<char*>(&chairid_),
          reinterpret_cast<char*>(&other->chairid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_SC_BetAgainProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_SC_NotifyStatusProto::_Internal {
 public:
};

CMD_SC_NotifyStatusProto::CMD_SC_NotifyStatusProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DZNZ.CMD_SC_NotifyStatusProto)
}
CMD_SC_NotifyStatusProto::CMD_SC_NotifyStatusProto(const CMD_SC_NotifyStatusProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&game_state_, &from.game_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&game_state_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:DZNZ.CMD_SC_NotifyStatusProto)
}

void CMD_SC_NotifyStatusProto::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&game_state_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&game_state_)) + sizeof(time_));
}

CMD_SC_NotifyStatusProto::~CMD_SC_NotifyStatusProto() {
  // @@protoc_insertion_point(destructor:DZNZ.CMD_SC_NotifyStatusProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_SC_NotifyStatusProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_SC_NotifyStatusProto::ArenaDtor(void* object) {
  CMD_SC_NotifyStatusProto* _this = reinterpret_cast< CMD_SC_NotifyStatusProto* >(object);
  (void)_this;
}
void CMD_SC_NotifyStatusProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_SC_NotifyStatusProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_SC_NotifyStatusProto& CMD_SC_NotifyStatusProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_SC_NotifyStatusProto_DZNZ_2eproto.base);
  return *internal_default_instance();
}


void CMD_SC_NotifyStatusProto::Clear() {
// @@protoc_insertion_point(message_clear_start:DZNZ.CMD_SC_NotifyStatusProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&game_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&game_state_)) + sizeof(time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_SC_NotifyStatusProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 game_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          game_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_SC_NotifyStatusProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DZNZ.CMD_SC_NotifyStatusProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 game_state = 1;
  if (this->game_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_game_state(), target);
  }

  // int32 time = 2;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DZNZ.CMD_SC_NotifyStatusProto)
  return target;
}

size_t CMD_SC_NotifyStatusProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DZNZ.CMD_SC_NotifyStatusProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 game_state = 1;
  if (this->game_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_state());
  }

  // int32 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_SC_NotifyStatusProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DZNZ.CMD_SC_NotifyStatusProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_SC_NotifyStatusProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_SC_NotifyStatusProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DZNZ.CMD_SC_NotifyStatusProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DZNZ.CMD_SC_NotifyStatusProto)
    MergeFrom(*source);
  }
}

void CMD_SC_NotifyStatusProto::MergeFrom(const CMD_SC_NotifyStatusProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DZNZ.CMD_SC_NotifyStatusProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.game_state() != 0) {
    _internal_set_game_state(from._internal_game_state());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
}

void CMD_SC_NotifyStatusProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DZNZ.CMD_SC_NotifyStatusProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_SC_NotifyStatusProto::CopyFrom(const CMD_SC_NotifyStatusProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DZNZ.CMD_SC_NotifyStatusProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_SC_NotifyStatusProto::IsInitialized() const {
  return true;
}

void CMD_SC_NotifyStatusProto::InternalSwap(CMD_SC_NotifyStatusProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_SC_NotifyStatusProto, time_)
      + sizeof(CMD_SC_NotifyStatusProto::time_)
      - PROTOBUF_FIELD_OFFSET(CMD_SC_NotifyStatusProto, game_state_)>(
          reinterpret_cast<char*>(&game_state_),
          reinterpret_cast<char*>(&other->game_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_SC_NotifyStatusProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_CS_Bet::_Internal {
 public:
};

CMD_CS_Bet::CMD_CS_Bet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DZNZ.CMD_CS_Bet)
}
CMD_CS_Bet::CMD_CS_Bet(const CMD_CS_Bet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&area_, &from.area_,
    static_cast<size_t>(reinterpret_cast<char*>(&bet_num_) -
    reinterpret_cast<char*>(&area_)) + sizeof(bet_num_));
  // @@protoc_insertion_point(copy_constructor:DZNZ.CMD_CS_Bet)
}

void CMD_CS_Bet::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&area_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bet_num_) -
      reinterpret_cast<char*>(&area_)) + sizeof(bet_num_));
}

CMD_CS_Bet::~CMD_CS_Bet() {
  // @@protoc_insertion_point(destructor:DZNZ.CMD_CS_Bet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_CS_Bet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_CS_Bet::ArenaDtor(void* object) {
  CMD_CS_Bet* _this = reinterpret_cast< CMD_CS_Bet* >(object);
  (void)_this;
}
void CMD_CS_Bet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_CS_Bet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_CS_Bet& CMD_CS_Bet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_CS_Bet_DZNZ_2eproto.base);
  return *internal_default_instance();
}


void CMD_CS_Bet::Clear() {
// @@protoc_insertion_point(message_clear_start:DZNZ.CMD_CS_Bet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&area_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bet_num_) -
      reinterpret_cast<char*>(&area_)) + sizeof(bet_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_CS_Bet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 area = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bet_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bet_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_CS_Bet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DZNZ.CMD_CS_Bet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 area = 1;
  if (this->area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_area(), target);
  }

  // int32 bet_num = 2;
  if (this->bet_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bet_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DZNZ.CMD_CS_Bet)
  return target;
}

size_t CMD_CS_Bet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DZNZ.CMD_CS_Bet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 area = 1;
  if (this->area() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_area());
  }

  // int32 bet_num = 2;
  if (this->bet_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bet_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_CS_Bet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DZNZ.CMD_CS_Bet)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_CS_Bet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_CS_Bet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DZNZ.CMD_CS_Bet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DZNZ.CMD_CS_Bet)
    MergeFrom(*source);
  }
}

void CMD_CS_Bet::MergeFrom(const CMD_CS_Bet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DZNZ.CMD_CS_Bet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.area() != 0) {
    _internal_set_area(from._internal_area());
  }
  if (from.bet_num() != 0) {
    _internal_set_bet_num(from._internal_bet_num());
  }
}

void CMD_CS_Bet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DZNZ.CMD_CS_Bet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_CS_Bet::CopyFrom(const CMD_CS_Bet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DZNZ.CMD_CS_Bet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_CS_Bet::IsInitialized() const {
  return true;
}

void CMD_CS_Bet::InternalSwap(CMD_CS_Bet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_CS_Bet, bet_num_)
      + sizeof(CMD_CS_Bet::bet_num_)
      - PROTOBUF_FIELD_OFFSET(CMD_CS_Bet, area_)>(
          reinterpret_cast<char*>(&area_),
          reinterpret_cast<char*>(&other->area_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_CS_Bet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_CS_BetAgain::_Internal {
 public:
};

CMD_CS_BetAgain::CMD_CS_BetAgain(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DZNZ.CMD_CS_BetAgain)
}
CMD_CS_BetAgain::CMD_CS_BetAgain(const CMD_CS_BetAgain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&area_, &from.area_,
    static_cast<size_t>(reinterpret_cast<char*>(&bet_count_) -
    reinterpret_cast<char*>(&area_)) + sizeof(bet_count_));
  // @@protoc_insertion_point(copy_constructor:DZNZ.CMD_CS_BetAgain)
}

void CMD_CS_BetAgain::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&area_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bet_count_) -
      reinterpret_cast<char*>(&area_)) + sizeof(bet_count_));
}

CMD_CS_BetAgain::~CMD_CS_BetAgain() {
  // @@protoc_insertion_point(destructor:DZNZ.CMD_CS_BetAgain)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_CS_BetAgain::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_CS_BetAgain::ArenaDtor(void* object) {
  CMD_CS_BetAgain* _this = reinterpret_cast< CMD_CS_BetAgain* >(object);
  (void)_this;
}
void CMD_CS_BetAgain::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_CS_BetAgain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_CS_BetAgain& CMD_CS_BetAgain::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_CS_BetAgain_DZNZ_2eproto.base);
  return *internal_default_instance();
}


void CMD_CS_BetAgain::Clear() {
// @@protoc_insertion_point(message_clear_start:DZNZ.CMD_CS_BetAgain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&area_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bet_count_) -
      reinterpret_cast<char*>(&area_)) + sizeof(bet_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_CS_BetAgain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 area = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bet_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bet_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bet_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bet_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_CS_BetAgain::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DZNZ.CMD_CS_BetAgain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 area = 1;
  if (this->area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_area(), target);
  }

  // int32 bet_num = 2;
  if (this->bet_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bet_num(), target);
  }

  // int32 bet_count = 3;
  if (this->bet_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_bet_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DZNZ.CMD_CS_BetAgain)
  return target;
}

size_t CMD_CS_BetAgain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DZNZ.CMD_CS_BetAgain)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 area = 1;
  if (this->area() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_area());
  }

  // int32 bet_num = 2;
  if (this->bet_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bet_num());
  }

  // int32 bet_count = 3;
  if (this->bet_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bet_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_CS_BetAgain::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DZNZ.CMD_CS_BetAgain)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_CS_BetAgain* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_CS_BetAgain>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DZNZ.CMD_CS_BetAgain)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DZNZ.CMD_CS_BetAgain)
    MergeFrom(*source);
  }
}

void CMD_CS_BetAgain::MergeFrom(const CMD_CS_BetAgain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DZNZ.CMD_CS_BetAgain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.area() != 0) {
    _internal_set_area(from._internal_area());
  }
  if (from.bet_num() != 0) {
    _internal_set_bet_num(from._internal_bet_num());
  }
  if (from.bet_count() != 0) {
    _internal_set_bet_count(from._internal_bet_count());
  }
}

void CMD_CS_BetAgain::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DZNZ.CMD_CS_BetAgain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_CS_BetAgain::CopyFrom(const CMD_CS_BetAgain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DZNZ.CMD_CS_BetAgain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_CS_BetAgain::IsInitialized() const {
  return true;
}

void CMD_CS_BetAgain::InternalSwap(CMD_CS_BetAgain* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_CS_BetAgain, bet_count_)
      + sizeof(CMD_CS_BetAgain::bet_count_)
      - PROTOBUF_FIELD_OFFSET(CMD_CS_BetAgain, area_)>(
          reinterpret_cast<char*>(&area_),
          reinterpret_cast<char*>(&other->area_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_CS_BetAgain::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace DZNZ
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DZNZ::RecodeProto* Arena::CreateMaybeMessage< ::DZNZ::RecodeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DZNZ::RecodeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::DZNZ::PlayerInfoProto* Arena::CreateMaybeMessage< ::DZNZ::PlayerInfoProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DZNZ::PlayerInfoProto >(arena);
}
template<> PROTOBUF_NOINLINE ::DZNZ::PlayerGameData* Arena::CreateMaybeMessage< ::DZNZ::PlayerGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DZNZ::PlayerGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::DZNZ::SC_SceneInfoProto* Arena::CreateMaybeMessage< ::DZNZ::SC_SceneInfoProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DZNZ::SC_SceneInfoProto >(arena);
}
template<> PROTOBUF_NOINLINE ::DZNZ::CMD_SC_BetProto* Arena::CreateMaybeMessage< ::DZNZ::CMD_SC_BetProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DZNZ::CMD_SC_BetProto >(arena);
}
template<> PROTOBUF_NOINLINE ::DZNZ::WheelInfoProto* Arena::CreateMaybeMessage< ::DZNZ::WheelInfoProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DZNZ::WheelInfoProto >(arena);
}
template<> PROTOBUF_NOINLINE ::DZNZ::CMD_SC_GameResultProto* Arena::CreateMaybeMessage< ::DZNZ::CMD_SC_GameResultProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DZNZ::CMD_SC_GameResultProto >(arena);
}
template<> PROTOBUF_NOINLINE ::DZNZ::CMD_SC_BetAgainProto* Arena::CreateMaybeMessage< ::DZNZ::CMD_SC_BetAgainProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DZNZ::CMD_SC_BetAgainProto >(arena);
}
template<> PROTOBUF_NOINLINE ::DZNZ::CMD_SC_NotifyStatusProto* Arena::CreateMaybeMessage< ::DZNZ::CMD_SC_NotifyStatusProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DZNZ::CMD_SC_NotifyStatusProto >(arena);
}
template<> PROTOBUF_NOINLINE ::DZNZ::CMD_CS_Bet* Arena::CreateMaybeMessage< ::DZNZ::CMD_CS_Bet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DZNZ::CMD_CS_Bet >(arena);
}
template<> PROTOBUF_NOINLINE ::DZNZ::CMD_CS_BetAgain* Arena::CreateMaybeMessage< ::DZNZ::CMD_CS_BetAgain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DZNZ::CMD_CS_BetAgain >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
