// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LudoQuick.proto

#include "LudoQuick.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_LudoQuick_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChessGrid_LudoQuick_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LudoQuick_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameResult_LudoQuick_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LudoQuick_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteInfo_LudoQuick_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LudoQuick_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserInfo_LudoQuick_2eproto;
namespace LudoQuick {
class RouteInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteInfo> _instance;
} _RouteInfo_default_instance_;
class UserInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserInfo> _instance;
} _UserInfo_default_instance_;
class ChessGridDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChessGrid> _instance;
} _ChessGrid_default_instance_;
class MsgSceneInfoRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgSceneInfoResp> _instance;
} _MsgSceneInfoResp_default_instance_;
class MsgStartDiceRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgStartDiceResp> _instance;
} _MsgStartDiceResp_default_instance_;
class MsgThrowDiceRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgThrowDiceResp> _instance;
} _MsgThrowDiceResp_default_instance_;
class MsgOperateRouteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgOperateRoute> _instance;
} _MsgOperateRoute_default_instance_;
class MsgDiceInfoRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgDiceInfoResp> _instance;
} _MsgDiceInfoResp_default_instance_;
class GameResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameResult> _instance;
} _GameResult_default_instance_;
class MsgResultRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgResultResp> _instance;
} _MsgResultResp_default_instance_;
}  // namespace LudoQuick
static void InitDefaultsscc_info_ChessGrid_LudoQuick_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LudoQuick::_ChessGrid_default_instance_;
    new (ptr) ::LudoQuick::ChessGrid();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChessGrid_LudoQuick_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChessGrid_LudoQuick_2eproto}, {}};

static void InitDefaultsscc_info_GameResult_LudoQuick_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LudoQuick::_GameResult_default_instance_;
    new (ptr) ::LudoQuick::GameResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameResult_LudoQuick_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameResult_LudoQuick_2eproto}, {
      &scc_info_UserInfo_LudoQuick_2eproto.base,}};

static void InitDefaultsscc_info_MsgDiceInfoResp_LudoQuick_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LudoQuick::_MsgDiceInfoResp_default_instance_;
    new (ptr) ::LudoQuick::MsgDiceInfoResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgDiceInfoResp_LudoQuick_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgDiceInfoResp_LudoQuick_2eproto}, {}};

static void InitDefaultsscc_info_MsgOperateRoute_LudoQuick_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LudoQuick::_MsgOperateRoute_default_instance_;
    new (ptr) ::LudoQuick::MsgOperateRoute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgOperateRoute_LudoQuick_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgOperateRoute_LudoQuick_2eproto}, {}};

static void InitDefaultsscc_info_MsgResultResp_LudoQuick_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LudoQuick::_MsgResultResp_default_instance_;
    new (ptr) ::LudoQuick::MsgResultResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgResultResp_LudoQuick_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgResultResp_LudoQuick_2eproto}, {
      &scc_info_GameResult_LudoQuick_2eproto.base,}};

static void InitDefaultsscc_info_MsgSceneInfoResp_LudoQuick_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LudoQuick::_MsgSceneInfoResp_default_instance_;
    new (ptr) ::LudoQuick::MsgSceneInfoResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MsgSceneInfoResp_LudoQuick_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MsgSceneInfoResp_LudoQuick_2eproto}, {
      &scc_info_ChessGrid_LudoQuick_2eproto.base,
      &scc_info_UserInfo_LudoQuick_2eproto.base,}};

static void InitDefaultsscc_info_MsgStartDiceResp_LudoQuick_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LudoQuick::_MsgStartDiceResp_default_instance_;
    new (ptr) ::LudoQuick::MsgStartDiceResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgStartDiceResp_LudoQuick_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgStartDiceResp_LudoQuick_2eproto}, {}};

static void InitDefaultsscc_info_MsgThrowDiceResp_LudoQuick_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LudoQuick::_MsgThrowDiceResp_default_instance_;
    new (ptr) ::LudoQuick::MsgThrowDiceResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgThrowDiceResp_LudoQuick_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgThrowDiceResp_LudoQuick_2eproto}, {}};

static void InitDefaultsscc_info_RouteInfo_LudoQuick_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LudoQuick::_RouteInfo_default_instance_;
    new (ptr) ::LudoQuick::RouteInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteInfo_LudoQuick_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RouteInfo_LudoQuick_2eproto}, {}};

static void InitDefaultsscc_info_UserInfo_LudoQuick_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LudoQuick::_UserInfo_default_instance_;
    new (ptr) ::LudoQuick::UserInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserInfo_LudoQuick_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserInfo_LudoQuick_2eproto}, {
      &scc_info_RouteInfo_LudoQuick_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_LudoQuick_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_LudoQuick_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_LudoQuick_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_LudoQuick_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LudoQuick::RouteInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LudoQuick::RouteInfo, chess_id_),
  PROTOBUF_FIELD_OFFSET(::LudoQuick::RouteInfo, gold_bag_),
  PROTOBUF_FIELD_OFFSET(::LudoQuick::RouteInfo, pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LudoQuick::UserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LudoQuick::UserInfo, chair_id_),
  PROTOBUF_FIELD_OFFSET(::LudoQuick::UserInfo, route_info_),
  PROTOBUF_FIELD_OFFSET(::LudoQuick::UserInfo, finish_line_switch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LudoQuick::ChessGrid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LudoQuick::ChessGrid, pos_id_),
  PROTOBUF_FIELD_OFFSET(::LudoQuick::ChessGrid, safe_house_),
  PROTOBUF_FIELD_OFFSET(::LudoQuick::ChessGrid, gold_bag_),
  PROTOBUF_FIELD_OFFSET(::LudoQuick::ChessGrid, prop_),
  PROTOBUF_FIELD_OFFSET(::LudoQuick::ChessGrid, switch__),
  PROTOBUF_FIELD_OFFSET(::LudoQuick::ChessGrid, inflection_),
  PROTOBUF_FIELD_OFFSET(::LudoQuick::ChessGrid, next_pos1_),
  PROTOBUF_FIELD_OFFSET(::LudoQuick::ChessGrid, next_pos2_),
  PROTOBUF_FIELD_OFFSET(::LudoQuick::ChessGrid, start_point_),
  PROTOBUF_FIELD_OFFSET(::LudoQuick::ChessGrid, end_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LudoQuick::MsgSceneInfoResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LudoQuick::MsgSceneInfoResp, game_state_),
  PROTOBUF_FIELD_OFFSET(::LudoQuick::MsgSceneInfoResp, time_remaining_),
  PROTOBUF_FIELD_OFFSET(::LudoQuick::MsgSceneInfoResp, chess_grid_info_),
  PROTOBUF_FIELD_OFFSET(::LudoQuick::MsgSceneInfoResp, user_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LudoQuick::MsgStartDiceResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LudoQuick::MsgStartDiceResp, chair_id_),
  PROTOBUF_FIELD_OFFSET(::LudoQuick::MsgStartDiceResp, times_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LudoQuick::MsgThrowDiceResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LudoQuick::MsgThrowDiceResp, chair_id_),
  PROTOBUF_FIELD_OFFSET(::LudoQuick::MsgThrowDiceResp, dice_roll_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LudoQuick::MsgOperateRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LudoQuick::MsgOperateRoute, chair_id_),
  PROTOBUF_FIELD_OFFSET(::LudoQuick::MsgOperateRoute, chess_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LudoQuick::MsgDiceInfoResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LudoQuick::MsgDiceInfoResp, chair_id_),
  PROTOBUF_FIELD_OFFSET(::LudoQuick::MsgDiceInfoResp, chess_id_),
  PROTOBUF_FIELD_OFFSET(::LudoQuick::MsgDiceInfoResp, route_num_),
  PROTOBUF_FIELD_OFFSET(::LudoQuick::MsgDiceInfoResp, prop_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LudoQuick::GameResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LudoQuick::GameResult, chair_id_),
  PROTOBUF_FIELD_OFFSET(::LudoQuick::GameResult, user_info_),
  PROTOBUF_FIELD_OFFSET(::LudoQuick::GameResult, user_gold_),
  PROTOBUF_FIELD_OFFSET(::LudoQuick::GameResult, win_),
  PROTOBUF_FIELD_OFFSET(::LudoQuick::GameResult, bet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LudoQuick::MsgResultResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LudoQuick::MsgResultResp, result_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::LudoQuick::RouteInfo)},
  { 8, -1, sizeof(::LudoQuick::UserInfo)},
  { 16, -1, sizeof(::LudoQuick::ChessGrid)},
  { 31, -1, sizeof(::LudoQuick::MsgSceneInfoResp)},
  { 40, -1, sizeof(::LudoQuick::MsgStartDiceResp)},
  { 47, -1, sizeof(::LudoQuick::MsgThrowDiceResp)},
  { 54, -1, sizeof(::LudoQuick::MsgOperateRoute)},
  { 61, -1, sizeof(::LudoQuick::MsgDiceInfoResp)},
  { 70, -1, sizeof(::LudoQuick::GameResult)},
  { 80, -1, sizeof(::LudoQuick::MsgResultResp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LudoQuick::_RouteInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LudoQuick::_UserInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LudoQuick::_ChessGrid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LudoQuick::_MsgSceneInfoResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LudoQuick::_MsgStartDiceResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LudoQuick::_MsgThrowDiceResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LudoQuick::_MsgOperateRoute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LudoQuick::_MsgDiceInfoResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LudoQuick::_GameResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LudoQuick::_MsgResultResp_default_instance_),
};

const char descriptor_table_protodef_LudoQuick_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017LudoQuick.proto\022\tLudoQuick\"<\n\tRouteInf"
  "o\022\020\n\010chess_id\030\001 \001(\005\022\020\n\010gold_bag\030\002 \001(\005\022\013\n"
  "\003pos\030\003 \001(\005\"b\n\010UserInfo\022\020\n\010chair_id\030\001 \001(\005"
  "\022(\n\nroute_info\030\002 \003(\0132\024.LudoQuick.RouteIn"
  "fo\022\032\n\022finish_line_switch\030\003 \001(\010\"\301\001\n\tChess"
  "Grid\022\016\n\006pos_id\030\001 \001(\005\022\022\n\nsafe_house\030\002 \001(\005"
  "\022\020\n\010gold_bag\030\003 \001(\005\022\014\n\004prop\030\004 \001(\005\022\016\n\006swit"
  "ch\030\005 \001(\005\022\022\n\ninflection\030\006 \001(\005\022\021\n\tnext_pos"
  "1\030\007 \001(\005\022\021\n\tnext_pos2\030\010 \001(\005\022\023\n\013start_poin"
  "t\030\t \001(\005\022\021\n\tend_point\030\n \001(\005\"\225\001\n\020MsgSceneI"
  "nfoResp\022\022\n\ngame_state\030\001 \001(\005\022\026\n\016time_rema"
  "ining\030\002 \001(\005\022-\n\017chess_grid_info\030\003 \003(\0132\024.L"
  "udoQuick.ChessGrid\022&\n\tuser_info\030\004 \003(\0132\023."
  "LudoQuick.UserInfo\"3\n\020MsgStartDiceResp\022\020"
  "\n\010chair_id\030\001 \001(\005\022\r\n\005times\030\002 \001(\005\"7\n\020MsgTh"
  "rowDiceResp\022\020\n\010chair_id\030\001 \001(\005\022\021\n\tdice_ro"
  "ll\030\002 \001(\005\"5\n\017MsgOperateRoute\022\020\n\010chair_id\030"
  "\001 \001(\005\022\020\n\010chess_id\030\002 \001(\005\"Y\n\017MsgDiceInfoRe"
  "sp\022\020\n\010chair_id\030\001 \001(\005\022\020\n\010chess_id\030\002 \001(\005\022\021"
  "\n\troute_num\030\003 \001(\005\022\017\n\007prop_id\030\004 \001(\005\"s\n\nGa"
  "meResult\022\020\n\010chair_id\030\001 \001(\005\022&\n\tuser_info\030"
  "\002 \001(\0132\023.LudoQuick.UserInfo\022\021\n\tuser_gold\030"
  "\003 \001(\003\022\013\n\003win\030\004 \001(\003\022\013\n\003bet\030\005 \001(\003\"6\n\rMsgRe"
  "sultResp\022%\n\006result\030\001 \003(\0132\025.LudoQuick.Gam"
  "eResult*\310\001\n\017EMsgIDLudoQuick\022\026\n\022MsgID_Fir"
  "stPublish\020\000\022\027\n\023SUB_SC_FirstPublish\020\001\022\024\n\020"
  "SUB_SC_StartDice\020\002\022\023\n\017SUB_CS_DiceInfo\020\003\022"
  "\024\n\020SUB_SC_ThrowDice\020\004\022\027\n\023SUB_CS_OperateR"
  "oute\020\005\022\023\n\017SUB_SC_DiceInfo\020\006\022\025\n\021SUB_SC_Ga"
  "meResult\020\007b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_LudoQuick_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_LudoQuick_2eproto_sccs[10] = {
  &scc_info_ChessGrid_LudoQuick_2eproto.base,
  &scc_info_GameResult_LudoQuick_2eproto.base,
  &scc_info_MsgDiceInfoResp_LudoQuick_2eproto.base,
  &scc_info_MsgOperateRoute_LudoQuick_2eproto.base,
  &scc_info_MsgResultResp_LudoQuick_2eproto.base,
  &scc_info_MsgSceneInfoResp_LudoQuick_2eproto.base,
  &scc_info_MsgStartDiceResp_LudoQuick_2eproto.base,
  &scc_info_MsgThrowDiceResp_LudoQuick_2eproto.base,
  &scc_info_RouteInfo_LudoQuick_2eproto.base,
  &scc_info_UserInfo_LudoQuick_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_LudoQuick_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LudoQuick_2eproto = {
  false, false, descriptor_table_protodef_LudoQuick_2eproto, "LudoQuick.proto", 1178,
  &descriptor_table_LudoQuick_2eproto_once, descriptor_table_LudoQuick_2eproto_sccs, descriptor_table_LudoQuick_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_LudoQuick_2eproto::offsets,
  file_level_metadata_LudoQuick_2eproto, 10, file_level_enum_descriptors_LudoQuick_2eproto, file_level_service_descriptors_LudoQuick_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_LudoQuick_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_LudoQuick_2eproto)), true);
namespace LudoQuick {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDLudoQuick_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_LudoQuick_2eproto);
  return file_level_enum_descriptors_LudoQuick_2eproto[0];
}
bool EMsgIDLudoQuick_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RouteInfo::_Internal {
 public:
};

RouteInfo::RouteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LudoQuick.RouteInfo)
}
RouteInfo::RouteInfo(const RouteInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chess_id_, &from.chess_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pos_) -
    reinterpret_cast<char*>(&chess_id_)) + sizeof(pos_));
  // @@protoc_insertion_point(copy_constructor:LudoQuick.RouteInfo)
}

void RouteInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chess_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&pos_) -
      reinterpret_cast<char*>(&chess_id_)) + sizeof(pos_));
}

RouteInfo::~RouteInfo() {
  // @@protoc_insertion_point(destructor:LudoQuick.RouteInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RouteInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RouteInfo::ArenaDtor(void* object) {
  RouteInfo* _this = reinterpret_cast< RouteInfo* >(object);
  (void)_this;
}
void RouteInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteInfo& RouteInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteInfo_LudoQuick_2eproto.base);
  return *internal_default_instance();
}


void RouteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:LudoQuick.RouteInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chess_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_) -
      reinterpret_cast<char*>(&chess_id_)) + sizeof(pos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chess_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chess_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gold_bag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gold_bag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LudoQuick.RouteInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chess_id = 1;
  if (this->chess_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chess_id(), target);
  }

  // int32 gold_bag = 2;
  if (this->gold_bag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_gold_bag(), target);
  }

  // int32 pos = 3;
  if (this->pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LudoQuick.RouteInfo)
  return target;
}

size_t RouteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LudoQuick.RouteInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chess_id = 1;
  if (this->chess_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chess_id());
  }

  // int32 gold_bag = 2;
  if (this->gold_bag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gold_bag());
  }

  // int32 pos = 3;
  if (this->pos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pos());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LudoQuick.RouteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LudoQuick.RouteInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LudoQuick.RouteInfo)
    MergeFrom(*source);
  }
}

void RouteInfo::MergeFrom(const RouteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LudoQuick.RouteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chess_id() != 0) {
    _internal_set_chess_id(from._internal_chess_id());
  }
  if (from.gold_bag() != 0) {
    _internal_set_gold_bag(from._internal_gold_bag());
  }
  if (from.pos() != 0) {
    _internal_set_pos(from._internal_pos());
  }
}

void RouteInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LudoQuick.RouteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteInfo::CopyFrom(const RouteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LudoQuick.RouteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteInfo::IsInitialized() const {
  return true;
}

void RouteInfo::InternalSwap(RouteInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteInfo, pos_)
      + sizeof(RouteInfo::pos_)
      - PROTOBUF_FIELD_OFFSET(RouteInfo, chess_id_)>(
          reinterpret_cast<char*>(&chess_id_),
          reinterpret_cast<char*>(&other->chess_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UserInfo::_Internal {
 public:
};

UserInfo::UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  route_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LudoQuick.UserInfo)
}
UserInfo::UserInfo(const UserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      route_info_(from.route_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&finish_line_switch_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(finish_line_switch_));
  // @@protoc_insertion_point(copy_constructor:LudoQuick.UserInfo)
}

void UserInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserInfo_LudoQuick_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&finish_line_switch_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(finish_line_switch_));
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:LudoQuick.UserInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserInfo::ArenaDtor(void* object) {
  UserInfo* _this = reinterpret_cast< UserInfo* >(object);
  (void)_this;
}
void UserInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserInfo& UserInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserInfo_LudoQuick_2eproto.base);
  return *internal_default_instance();
}


void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:LudoQuick.UserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  route_info_.Clear();
  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finish_line_switch_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(finish_line_switch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .LudoQuick.RouteInfo route_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_route_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bool finish_line_switch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          finish_line_switch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LudoQuick.UserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // repeated .LudoQuick.RouteInfo route_info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_route_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_route_info(i), target, stream);
  }

  // bool finish_line_switch = 3;
  if (this->finish_line_switch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_finish_line_switch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LudoQuick.UserInfo)
  return target;
}

size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LudoQuick.UserInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LudoQuick.RouteInfo route_info = 2;
  total_size += 1UL * this->_internal_route_info_size();
  for (const auto& msg : this->route_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // bool finish_line_switch = 3;
  if (this->finish_line_switch() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LudoQuick.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LudoQuick.UserInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LudoQuick.UserInfo)
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LudoQuick.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  route_info_.MergeFrom(from.route_info_);
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.finish_line_switch() != 0) {
    _internal_set_finish_line_switch(from._internal_finish_line_switch());
  }
}

void UserInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LudoQuick.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LudoQuick.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  return true;
}

void UserInfo::InternalSwap(UserInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  route_info_.InternalSwap(&other->route_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserInfo, finish_line_switch_)
      + sizeof(UserInfo::finish_line_switch_)
      - PROTOBUF_FIELD_OFFSET(UserInfo, chair_id_)>(
          reinterpret_cast<char*>(&chair_id_),
          reinterpret_cast<char*>(&other->chair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChessGrid::_Internal {
 public:
};

ChessGrid::ChessGrid(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LudoQuick.ChessGrid)
}
ChessGrid::ChessGrid(const ChessGrid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pos_id_, &from.pos_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_point_) -
    reinterpret_cast<char*>(&pos_id_)) + sizeof(end_point_));
  // @@protoc_insertion_point(copy_constructor:LudoQuick.ChessGrid)
}

void ChessGrid::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pos_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&end_point_) -
      reinterpret_cast<char*>(&pos_id_)) + sizeof(end_point_));
}

ChessGrid::~ChessGrid() {
  // @@protoc_insertion_point(destructor:LudoQuick.ChessGrid)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChessGrid::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChessGrid::ArenaDtor(void* object) {
  ChessGrid* _this = reinterpret_cast< ChessGrid* >(object);
  (void)_this;
}
void ChessGrid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChessGrid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChessGrid& ChessGrid::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChessGrid_LudoQuick_2eproto.base);
  return *internal_default_instance();
}


void ChessGrid::Clear() {
// @@protoc_insertion_point(message_clear_start:LudoQuick.ChessGrid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pos_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_point_) -
      reinterpret_cast<char*>(&pos_id_)) + sizeof(end_point_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChessGrid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 pos_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pos_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 safe_house = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          safe_house_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gold_bag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gold_bag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 prop = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          prop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 switch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          switch__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 inflection = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          inflection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 next_pos1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          next_pos1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 next_pos2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          next_pos2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 start_point = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          start_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 end_point = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          end_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChessGrid::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LudoQuick.ChessGrid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pos_id = 1;
  if (this->pos_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_pos_id(), target);
  }

  // int32 safe_house = 2;
  if (this->safe_house() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_safe_house(), target);
  }

  // int32 gold_bag = 3;
  if (this->gold_bag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_gold_bag(), target);
  }

  // int32 prop = 4;
  if (this->prop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_prop(), target);
  }

  // int32 switch = 5;
  if (this->switch_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_switch_(), target);
  }

  // int32 inflection = 6;
  if (this->inflection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_inflection(), target);
  }

  // int32 next_pos1 = 7;
  if (this->next_pos1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_next_pos1(), target);
  }

  // int32 next_pos2 = 8;
  if (this->next_pos2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_next_pos2(), target);
  }

  // int32 start_point = 9;
  if (this->start_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_start_point(), target);
  }

  // int32 end_point = 10;
  if (this->end_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_end_point(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LudoQuick.ChessGrid)
  return target;
}

size_t ChessGrid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LudoQuick.ChessGrid)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 pos_id = 1;
  if (this->pos_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pos_id());
  }

  // int32 safe_house = 2;
  if (this->safe_house() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_safe_house());
  }

  // int32 gold_bag = 3;
  if (this->gold_bag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gold_bag());
  }

  // int32 prop = 4;
  if (this->prop() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prop());
  }

  // int32 switch = 5;
  if (this->switch_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_switch_());
  }

  // int32 inflection = 6;
  if (this->inflection() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inflection());
  }

  // int32 next_pos1 = 7;
  if (this->next_pos1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_next_pos1());
  }

  // int32 next_pos2 = 8;
  if (this->next_pos2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_next_pos2());
  }

  // int32 start_point = 9;
  if (this->start_point() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start_point());
  }

  // int32 end_point = 10;
  if (this->end_point() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_end_point());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChessGrid::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LudoQuick.ChessGrid)
  GOOGLE_DCHECK_NE(&from, this);
  const ChessGrid* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChessGrid>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LudoQuick.ChessGrid)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LudoQuick.ChessGrid)
    MergeFrom(*source);
  }
}

void ChessGrid::MergeFrom(const ChessGrid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LudoQuick.ChessGrid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pos_id() != 0) {
    _internal_set_pos_id(from._internal_pos_id());
  }
  if (from.safe_house() != 0) {
    _internal_set_safe_house(from._internal_safe_house());
  }
  if (from.gold_bag() != 0) {
    _internal_set_gold_bag(from._internal_gold_bag());
  }
  if (from.prop() != 0) {
    _internal_set_prop(from._internal_prop());
  }
  if (from.switch_() != 0) {
    _internal_set_switch_(from._internal_switch_());
  }
  if (from.inflection() != 0) {
    _internal_set_inflection(from._internal_inflection());
  }
  if (from.next_pos1() != 0) {
    _internal_set_next_pos1(from._internal_next_pos1());
  }
  if (from.next_pos2() != 0) {
    _internal_set_next_pos2(from._internal_next_pos2());
  }
  if (from.start_point() != 0) {
    _internal_set_start_point(from._internal_start_point());
  }
  if (from.end_point() != 0) {
    _internal_set_end_point(from._internal_end_point());
  }
}

void ChessGrid::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LudoQuick.ChessGrid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChessGrid::CopyFrom(const ChessGrid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LudoQuick.ChessGrid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessGrid::IsInitialized() const {
  return true;
}

void ChessGrid::InternalSwap(ChessGrid* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChessGrid, end_point_)
      + sizeof(ChessGrid::end_point_)
      - PROTOBUF_FIELD_OFFSET(ChessGrid, pos_id_)>(
          reinterpret_cast<char*>(&pos_id_),
          reinterpret_cast<char*>(&other->pos_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChessGrid::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgSceneInfoResp::_Internal {
 public:
};

MsgSceneInfoResp::MsgSceneInfoResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  chess_grid_info_(arena),
  user_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LudoQuick.MsgSceneInfoResp)
}
MsgSceneInfoResp::MsgSceneInfoResp(const MsgSceneInfoResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      chess_grid_info_(from.chess_grid_info_),
      user_info_(from.user_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&game_state_, &from.game_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_remaining_) -
    reinterpret_cast<char*>(&game_state_)) + sizeof(time_remaining_));
  // @@protoc_insertion_point(copy_constructor:LudoQuick.MsgSceneInfoResp)
}

void MsgSceneInfoResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgSceneInfoResp_LudoQuick_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&game_state_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&time_remaining_) -
      reinterpret_cast<char*>(&game_state_)) + sizeof(time_remaining_));
}

MsgSceneInfoResp::~MsgSceneInfoResp() {
  // @@protoc_insertion_point(destructor:LudoQuick.MsgSceneInfoResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgSceneInfoResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgSceneInfoResp::ArenaDtor(void* object) {
  MsgSceneInfoResp* _this = reinterpret_cast< MsgSceneInfoResp* >(object);
  (void)_this;
}
void MsgSceneInfoResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgSceneInfoResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgSceneInfoResp& MsgSceneInfoResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgSceneInfoResp_LudoQuick_2eproto.base);
  return *internal_default_instance();
}


void MsgSceneInfoResp::Clear() {
// @@protoc_insertion_point(message_clear_start:LudoQuick.MsgSceneInfoResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chess_grid_info_.Clear();
  user_info_.Clear();
  ::memset(&game_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_remaining_) -
      reinterpret_cast<char*>(&game_state_)) + sizeof(time_remaining_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgSceneInfoResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 game_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          game_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 time_remaining = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .LudoQuick.ChessGrid chess_grid_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chess_grid_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .LudoQuick.UserInfo user_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgSceneInfoResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LudoQuick.MsgSceneInfoResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 game_state = 1;
  if (this->game_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_game_state(), target);
  }

  // int32 time_remaining = 2;
  if (this->time_remaining() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_time_remaining(), target);
  }

  // repeated .LudoQuick.ChessGrid chess_grid_info = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chess_grid_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_chess_grid_info(i), target, stream);
  }

  // repeated .LudoQuick.UserInfo user_info = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_user_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_user_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LudoQuick.MsgSceneInfoResp)
  return target;
}

size_t MsgSceneInfoResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LudoQuick.MsgSceneInfoResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LudoQuick.ChessGrid chess_grid_info = 3;
  total_size += 1UL * this->_internal_chess_grid_info_size();
  for (const auto& msg : this->chess_grid_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .LudoQuick.UserInfo user_info = 4;
  total_size += 1UL * this->_internal_user_info_size();
  for (const auto& msg : this->user_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 game_state = 1;
  if (this->game_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_state());
  }

  // int32 time_remaining = 2;
  if (this->time_remaining() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time_remaining());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgSceneInfoResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LudoQuick.MsgSceneInfoResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgSceneInfoResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgSceneInfoResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LudoQuick.MsgSceneInfoResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LudoQuick.MsgSceneInfoResp)
    MergeFrom(*source);
  }
}

void MsgSceneInfoResp::MergeFrom(const MsgSceneInfoResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LudoQuick.MsgSceneInfoResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chess_grid_info_.MergeFrom(from.chess_grid_info_);
  user_info_.MergeFrom(from.user_info_);
  if (from.game_state() != 0) {
    _internal_set_game_state(from._internal_game_state());
  }
  if (from.time_remaining() != 0) {
    _internal_set_time_remaining(from._internal_time_remaining());
  }
}

void MsgSceneInfoResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LudoQuick.MsgSceneInfoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSceneInfoResp::CopyFrom(const MsgSceneInfoResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LudoQuick.MsgSceneInfoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSceneInfoResp::IsInitialized() const {
  return true;
}

void MsgSceneInfoResp::InternalSwap(MsgSceneInfoResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  chess_grid_info_.InternalSwap(&other->chess_grid_info_);
  user_info_.InternalSwap(&other->user_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgSceneInfoResp, time_remaining_)
      + sizeof(MsgSceneInfoResp::time_remaining_)
      - PROTOBUF_FIELD_OFFSET(MsgSceneInfoResp, game_state_)>(
          reinterpret_cast<char*>(&game_state_),
          reinterpret_cast<char*>(&other->game_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgSceneInfoResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgStartDiceResp::_Internal {
 public:
};

MsgStartDiceResp::MsgStartDiceResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LudoQuick.MsgStartDiceResp)
}
MsgStartDiceResp::MsgStartDiceResp(const MsgStartDiceResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&times_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(times_));
  // @@protoc_insertion_point(copy_constructor:LudoQuick.MsgStartDiceResp)
}

void MsgStartDiceResp::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&times_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(times_));
}

MsgStartDiceResp::~MsgStartDiceResp() {
  // @@protoc_insertion_point(destructor:LudoQuick.MsgStartDiceResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgStartDiceResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgStartDiceResp::ArenaDtor(void* object) {
  MsgStartDiceResp* _this = reinterpret_cast< MsgStartDiceResp* >(object);
  (void)_this;
}
void MsgStartDiceResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgStartDiceResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgStartDiceResp& MsgStartDiceResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgStartDiceResp_LudoQuick_2eproto.base);
  return *internal_default_instance();
}


void MsgStartDiceResp::Clear() {
// @@protoc_insertion_point(message_clear_start:LudoQuick.MsgStartDiceResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&times_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(times_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgStartDiceResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 times = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgStartDiceResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LudoQuick.MsgStartDiceResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int32 times = 2;
  if (this->times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_times(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LudoQuick.MsgStartDiceResp)
  return target;
}

size_t MsgStartDiceResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LudoQuick.MsgStartDiceResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 times = 2;
  if (this->times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_times());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgStartDiceResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LudoQuick.MsgStartDiceResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgStartDiceResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgStartDiceResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LudoQuick.MsgStartDiceResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LudoQuick.MsgStartDiceResp)
    MergeFrom(*source);
  }
}

void MsgStartDiceResp::MergeFrom(const MsgStartDiceResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LudoQuick.MsgStartDiceResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.times() != 0) {
    _internal_set_times(from._internal_times());
  }
}

void MsgStartDiceResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LudoQuick.MsgStartDiceResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgStartDiceResp::CopyFrom(const MsgStartDiceResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LudoQuick.MsgStartDiceResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgStartDiceResp::IsInitialized() const {
  return true;
}

void MsgStartDiceResp::InternalSwap(MsgStartDiceResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgStartDiceResp, times_)
      + sizeof(MsgStartDiceResp::times_)
      - PROTOBUF_FIELD_OFFSET(MsgStartDiceResp, chair_id_)>(
          reinterpret_cast<char*>(&chair_id_),
          reinterpret_cast<char*>(&other->chair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgStartDiceResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgThrowDiceResp::_Internal {
 public:
};

MsgThrowDiceResp::MsgThrowDiceResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LudoQuick.MsgThrowDiceResp)
}
MsgThrowDiceResp::MsgThrowDiceResp(const MsgThrowDiceResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dice_roll_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(dice_roll_));
  // @@protoc_insertion_point(copy_constructor:LudoQuick.MsgThrowDiceResp)
}

void MsgThrowDiceResp::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&dice_roll_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(dice_roll_));
}

MsgThrowDiceResp::~MsgThrowDiceResp() {
  // @@protoc_insertion_point(destructor:LudoQuick.MsgThrowDiceResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgThrowDiceResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgThrowDiceResp::ArenaDtor(void* object) {
  MsgThrowDiceResp* _this = reinterpret_cast< MsgThrowDiceResp* >(object);
  (void)_this;
}
void MsgThrowDiceResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgThrowDiceResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgThrowDiceResp& MsgThrowDiceResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgThrowDiceResp_LudoQuick_2eproto.base);
  return *internal_default_instance();
}


void MsgThrowDiceResp::Clear() {
// @@protoc_insertion_point(message_clear_start:LudoQuick.MsgThrowDiceResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dice_roll_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(dice_roll_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgThrowDiceResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dice_roll = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          dice_roll_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgThrowDiceResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LudoQuick.MsgThrowDiceResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int32 dice_roll = 2;
  if (this->dice_roll() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_dice_roll(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LudoQuick.MsgThrowDiceResp)
  return target;
}

size_t MsgThrowDiceResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LudoQuick.MsgThrowDiceResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 dice_roll = 2;
  if (this->dice_roll() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dice_roll());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgThrowDiceResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LudoQuick.MsgThrowDiceResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgThrowDiceResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgThrowDiceResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LudoQuick.MsgThrowDiceResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LudoQuick.MsgThrowDiceResp)
    MergeFrom(*source);
  }
}

void MsgThrowDiceResp::MergeFrom(const MsgThrowDiceResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LudoQuick.MsgThrowDiceResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.dice_roll() != 0) {
    _internal_set_dice_roll(from._internal_dice_roll());
  }
}

void MsgThrowDiceResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LudoQuick.MsgThrowDiceResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgThrowDiceResp::CopyFrom(const MsgThrowDiceResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LudoQuick.MsgThrowDiceResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgThrowDiceResp::IsInitialized() const {
  return true;
}

void MsgThrowDiceResp::InternalSwap(MsgThrowDiceResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgThrowDiceResp, dice_roll_)
      + sizeof(MsgThrowDiceResp::dice_roll_)
      - PROTOBUF_FIELD_OFFSET(MsgThrowDiceResp, chair_id_)>(
          reinterpret_cast<char*>(&chair_id_),
          reinterpret_cast<char*>(&other->chair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgThrowDiceResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgOperateRoute::_Internal {
 public:
};

MsgOperateRoute::MsgOperateRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LudoQuick.MsgOperateRoute)
}
MsgOperateRoute::MsgOperateRoute(const MsgOperateRoute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&chess_id_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(chess_id_));
  // @@protoc_insertion_point(copy_constructor:LudoQuick.MsgOperateRoute)
}

void MsgOperateRoute::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chess_id_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(chess_id_));
}

MsgOperateRoute::~MsgOperateRoute() {
  // @@protoc_insertion_point(destructor:LudoQuick.MsgOperateRoute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgOperateRoute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgOperateRoute::ArenaDtor(void* object) {
  MsgOperateRoute* _this = reinterpret_cast< MsgOperateRoute* >(object);
  (void)_this;
}
void MsgOperateRoute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgOperateRoute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgOperateRoute& MsgOperateRoute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgOperateRoute_LudoQuick_2eproto.base);
  return *internal_default_instance();
}


void MsgOperateRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:LudoQuick.MsgOperateRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chess_id_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(chess_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgOperateRoute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chess_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chess_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgOperateRoute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LudoQuick.MsgOperateRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int32 chess_id = 2;
  if (this->chess_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_chess_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LudoQuick.MsgOperateRoute)
  return target;
}

size_t MsgOperateRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LudoQuick.MsgOperateRoute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 chess_id = 2;
  if (this->chess_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chess_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgOperateRoute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LudoQuick.MsgOperateRoute)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgOperateRoute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgOperateRoute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LudoQuick.MsgOperateRoute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LudoQuick.MsgOperateRoute)
    MergeFrom(*source);
  }
}

void MsgOperateRoute::MergeFrom(const MsgOperateRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LudoQuick.MsgOperateRoute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.chess_id() != 0) {
    _internal_set_chess_id(from._internal_chess_id());
  }
}

void MsgOperateRoute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LudoQuick.MsgOperateRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgOperateRoute::CopyFrom(const MsgOperateRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LudoQuick.MsgOperateRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgOperateRoute::IsInitialized() const {
  return true;
}

void MsgOperateRoute::InternalSwap(MsgOperateRoute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgOperateRoute, chess_id_)
      + sizeof(MsgOperateRoute::chess_id_)
      - PROTOBUF_FIELD_OFFSET(MsgOperateRoute, chair_id_)>(
          reinterpret_cast<char*>(&chair_id_),
          reinterpret_cast<char*>(&other->chair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgOperateRoute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgDiceInfoResp::_Internal {
 public:
};

MsgDiceInfoResp::MsgDiceInfoResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LudoQuick.MsgDiceInfoResp)
}
MsgDiceInfoResp::MsgDiceInfoResp(const MsgDiceInfoResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&prop_id_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(prop_id_));
  // @@protoc_insertion_point(copy_constructor:LudoQuick.MsgDiceInfoResp)
}

void MsgDiceInfoResp::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&prop_id_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(prop_id_));
}

MsgDiceInfoResp::~MsgDiceInfoResp() {
  // @@protoc_insertion_point(destructor:LudoQuick.MsgDiceInfoResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgDiceInfoResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgDiceInfoResp::ArenaDtor(void* object) {
  MsgDiceInfoResp* _this = reinterpret_cast< MsgDiceInfoResp* >(object);
  (void)_this;
}
void MsgDiceInfoResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgDiceInfoResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgDiceInfoResp& MsgDiceInfoResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgDiceInfoResp_LudoQuick_2eproto.base);
  return *internal_default_instance();
}


void MsgDiceInfoResp::Clear() {
// @@protoc_insertion_point(message_clear_start:LudoQuick.MsgDiceInfoResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prop_id_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(prop_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDiceInfoResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chess_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chess_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 route_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          route_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 prop_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          prop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgDiceInfoResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LudoQuick.MsgDiceInfoResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int32 chess_id = 2;
  if (this->chess_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_chess_id(), target);
  }

  // int32 route_num = 3;
  if (this->route_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_route_num(), target);
  }

  // int32 prop_id = 4;
  if (this->prop_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_prop_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LudoQuick.MsgDiceInfoResp)
  return target;
}

size_t MsgDiceInfoResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LudoQuick.MsgDiceInfoResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 chess_id = 2;
  if (this->chess_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chess_id());
  }

  // int32 route_num = 3;
  if (this->route_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_route_num());
  }

  // int32 prop_id = 4;
  if (this->prop_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prop_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgDiceInfoResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LudoQuick.MsgDiceInfoResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDiceInfoResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgDiceInfoResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LudoQuick.MsgDiceInfoResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LudoQuick.MsgDiceInfoResp)
    MergeFrom(*source);
  }
}

void MsgDiceInfoResp::MergeFrom(const MsgDiceInfoResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LudoQuick.MsgDiceInfoResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.chess_id() != 0) {
    _internal_set_chess_id(from._internal_chess_id());
  }
  if (from.route_num() != 0) {
    _internal_set_route_num(from._internal_route_num());
  }
  if (from.prop_id() != 0) {
    _internal_set_prop_id(from._internal_prop_id());
  }
}

void MsgDiceInfoResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LudoQuick.MsgDiceInfoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDiceInfoResp::CopyFrom(const MsgDiceInfoResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LudoQuick.MsgDiceInfoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDiceInfoResp::IsInitialized() const {
  return true;
}

void MsgDiceInfoResp::InternalSwap(MsgDiceInfoResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgDiceInfoResp, prop_id_)
      + sizeof(MsgDiceInfoResp::prop_id_)
      - PROTOBUF_FIELD_OFFSET(MsgDiceInfoResp, chair_id_)>(
          reinterpret_cast<char*>(&chair_id_),
          reinterpret_cast<char*>(&other->chair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDiceInfoResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GameResult::_Internal {
 public:
  static const ::LudoQuick::UserInfo& user_info(const GameResult* msg);
};

const ::LudoQuick::UserInfo&
GameResult::_Internal::user_info(const GameResult* msg) {
  return *msg->user_info_;
}
GameResult::GameResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LudoQuick.GameResult)
}
GameResult::GameResult(const GameResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_info()) {
    user_info_ = new ::LudoQuick::UserInfo(*from.user_info_);
  } else {
    user_info_ = nullptr;
  }
  ::memcpy(&user_gold_, &from.user_gold_,
    static_cast<size_t>(reinterpret_cast<char*>(&chair_id_) -
    reinterpret_cast<char*>(&user_gold_)) + sizeof(chair_id_));
  // @@protoc_insertion_point(copy_constructor:LudoQuick.GameResult)
}

void GameResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameResult_LudoQuick_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&user_info_)) + sizeof(chair_id_));
}

GameResult::~GameResult() {
  // @@protoc_insertion_point(destructor:LudoQuick.GameResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete user_info_;
}

void GameResult::ArenaDtor(void* object) {
  GameResult* _this = reinterpret_cast< GameResult* >(object);
  (void)_this;
}
void GameResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameResult& GameResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameResult_LudoQuick_2eproto.base);
  return *internal_default_instance();
}


void GameResult::Clear() {
// @@protoc_insertion_point(message_clear_start:LudoQuick.GameResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
  ::memset(&user_gold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&user_gold_)) + sizeof(chair_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LudoQuick.UserInfo user_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 user_gold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          user_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 win = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          win_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 bet = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          bet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LudoQuick.GameResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // .LudoQuick.UserInfo user_info = 2;
  if (this->has_user_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user_info(this), target, stream);
  }

  // int64 user_gold = 3;
  if (this->user_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_user_gold(), target);
  }

  // int64 win = 4;
  if (this->win() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_win(), target);
  }

  // int64 bet = 5;
  if (this->bet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_bet(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LudoQuick.GameResult)
  return target;
}

size_t GameResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LudoQuick.GameResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LudoQuick.UserInfo user_info = 2;
  if (this->has_user_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_info_);
  }

  // int64 user_gold = 3;
  if (this->user_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_gold());
  }

  // int64 win = 4;
  if (this->win() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_win());
  }

  // int64 bet = 5;
  if (this->bet() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_bet());
  }

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LudoQuick.GameResult)
  GOOGLE_DCHECK_NE(&from, this);
  const GameResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LudoQuick.GameResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LudoQuick.GameResult)
    MergeFrom(*source);
  }
}

void GameResult::MergeFrom(const GameResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LudoQuick.GameResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_info()) {
    _internal_mutable_user_info()->::LudoQuick::UserInfo::MergeFrom(from._internal_user_info());
  }
  if (from.user_gold() != 0) {
    _internal_set_user_gold(from._internal_user_gold());
  }
  if (from.win() != 0) {
    _internal_set_win(from._internal_win());
  }
  if (from.bet() != 0) {
    _internal_set_bet(from._internal_bet());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
}

void GameResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LudoQuick.GameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameResult::CopyFrom(const GameResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LudoQuick.GameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameResult::IsInitialized() const {
  return true;
}

void GameResult::InternalSwap(GameResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameResult, chair_id_)
      + sizeof(GameResult::chair_id_)
      - PROTOBUF_FIELD_OFFSET(GameResult, user_info_)>(
          reinterpret_cast<char*>(&user_info_),
          reinterpret_cast<char*>(&other->user_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgResultResp::_Internal {
 public:
};

MsgResultResp::MsgResultResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  result_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LudoQuick.MsgResultResp)
}
MsgResultResp::MsgResultResp(const MsgResultResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      result_(from.result_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LudoQuick.MsgResultResp)
}

void MsgResultResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgResultResp_LudoQuick_2eproto.base);
}

MsgResultResp::~MsgResultResp() {
  // @@protoc_insertion_point(destructor:LudoQuick.MsgResultResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgResultResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgResultResp::ArenaDtor(void* object) {
  MsgResultResp* _this = reinterpret_cast< MsgResultResp* >(object);
  (void)_this;
}
void MsgResultResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgResultResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgResultResp& MsgResultResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgResultResp_LudoQuick_2eproto.base);
  return *internal_default_instance();
}


void MsgResultResp::Clear() {
// @@protoc_insertion_point(message_clear_start:LudoQuick.MsgResultResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgResultResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .LudoQuick.GameResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_result(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgResultResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LudoQuick.MsgResultResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .LudoQuick.GameResult result = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_result_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_result(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LudoQuick.MsgResultResp)
  return target;
}

size_t MsgResultResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LudoQuick.MsgResultResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LudoQuick.GameResult result = 1;
  total_size += 1UL * this->_internal_result_size();
  for (const auto& msg : this->result_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgResultResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LudoQuick.MsgResultResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgResultResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgResultResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LudoQuick.MsgResultResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LudoQuick.MsgResultResp)
    MergeFrom(*source);
  }
}

void MsgResultResp::MergeFrom(const MsgResultResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LudoQuick.MsgResultResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  result_.MergeFrom(from.result_);
}

void MsgResultResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LudoQuick.MsgResultResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgResultResp::CopyFrom(const MsgResultResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LudoQuick.MsgResultResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgResultResp::IsInitialized() const {
  return true;
}

void MsgResultResp::InternalSwap(MsgResultResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  result_.InternalSwap(&other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgResultResp::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace LudoQuick
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LudoQuick::RouteInfo* Arena::CreateMaybeMessage< ::LudoQuick::RouteInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LudoQuick::RouteInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::LudoQuick::UserInfo* Arena::CreateMaybeMessage< ::LudoQuick::UserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LudoQuick::UserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::LudoQuick::ChessGrid* Arena::CreateMaybeMessage< ::LudoQuick::ChessGrid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LudoQuick::ChessGrid >(arena);
}
template<> PROTOBUF_NOINLINE ::LudoQuick::MsgSceneInfoResp* Arena::CreateMaybeMessage< ::LudoQuick::MsgSceneInfoResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LudoQuick::MsgSceneInfoResp >(arena);
}
template<> PROTOBUF_NOINLINE ::LudoQuick::MsgStartDiceResp* Arena::CreateMaybeMessage< ::LudoQuick::MsgStartDiceResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LudoQuick::MsgStartDiceResp >(arena);
}
template<> PROTOBUF_NOINLINE ::LudoQuick::MsgThrowDiceResp* Arena::CreateMaybeMessage< ::LudoQuick::MsgThrowDiceResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LudoQuick::MsgThrowDiceResp >(arena);
}
template<> PROTOBUF_NOINLINE ::LudoQuick::MsgOperateRoute* Arena::CreateMaybeMessage< ::LudoQuick::MsgOperateRoute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LudoQuick::MsgOperateRoute >(arena);
}
template<> PROTOBUF_NOINLINE ::LudoQuick::MsgDiceInfoResp* Arena::CreateMaybeMessage< ::LudoQuick::MsgDiceInfoResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LudoQuick::MsgDiceInfoResp >(arena);
}
template<> PROTOBUF_NOINLINE ::LudoQuick::GameResult* Arena::CreateMaybeMessage< ::LudoQuick::GameResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LudoQuick::GameResult >(arena);
}
template<> PROTOBUF_NOINLINE ::LudoQuick::MsgResultResp* Arena::CreateMaybeMessage< ::LudoQuick::MsgResultResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LudoQuick::MsgResultResp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
