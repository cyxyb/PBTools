// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Rummy.proto

#include "Rummy.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Rummy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RMColumnInfo_Rummy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Rummy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RMMsgAction_Rummy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Rummy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RMMsgPlayerInfo_Rummy_2eproto;
namespace Rummy {
class RMColumnInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RMColumnInfo> _instance;
} _RMColumnInfo_default_instance_;
class RMMsgTableStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RMMsgTableState> _instance;
} _RMMsgTableState_default_instance_;
class RMMsgHandCardsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RMMsgHandCards> _instance;
} _RMMsgHandCards_default_instance_;
class RMMsgPlayerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RMMsgPlayerInfo> _instance;
} _RMMsgPlayerInfo_default_instance_;
class RMMsgSceneInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RMMsgSceneInfo> _instance;
} _RMMsgSceneInfo_default_instance_;
class RMMsgGameStartRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RMMsgGameStartResp> _instance;
} _RMMsgGameStartResp_default_instance_;
class RMMsgNotifyActionRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RMMsgNotifyActionResp> _instance;
} _RMMsgNotifyActionResp_default_instance_;
class RMMsgActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RMMsgAction> _instance;
} _RMMsgAction_default_instance_;
class RMMsgActionRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RMMsgActionResp> _instance;
} _RMMsgActionResp_default_instance_;
class RMMsgActionChoiceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RMMsgActionChoice> _instance;
} _RMMsgActionChoice_default_instance_;
class RMMsgGameResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RMMsgGameResult> _instance;
} _RMMsgGameResult_default_instance_;
class RMMsgNotifyTrusteeshipDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RMMsgNotifyTrusteeship> _instance;
} _RMMsgNotifyTrusteeship_default_instance_;
class RMMsgNotifyPlayerActDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RMMsgNotifyPlayerAct> _instance;
} _RMMsgNotifyPlayerAct_default_instance_;
}  // namespace Rummy
static void InitDefaultsscc_info_RMColumnInfo_Rummy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rummy::_RMColumnInfo_default_instance_;
    new (ptr) ::Rummy::RMColumnInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RMColumnInfo_Rummy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RMColumnInfo_Rummy_2eproto}, {}};

static void InitDefaultsscc_info_RMMsgAction_Rummy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rummy::_RMMsgAction_default_instance_;
    new (ptr) ::Rummy::RMMsgAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RMMsgAction_Rummy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RMMsgAction_Rummy_2eproto}, {
      &scc_info_RMColumnInfo_Rummy_2eproto.base,}};

static void InitDefaultsscc_info_RMMsgActionChoice_Rummy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rummy::_RMMsgActionChoice_default_instance_;
    new (ptr) ::Rummy::RMMsgActionChoice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RMMsgActionChoice_Rummy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RMMsgActionChoice_Rummy_2eproto}, {
      &scc_info_RMMsgAction_Rummy_2eproto.base,}};

static void InitDefaultsscc_info_RMMsgActionResp_Rummy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rummy::_RMMsgActionResp_default_instance_;
    new (ptr) ::Rummy::RMMsgActionResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RMMsgActionResp_Rummy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RMMsgActionResp_Rummy_2eproto}, {}};

static void InitDefaultsscc_info_RMMsgGameResult_Rummy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rummy::_RMMsgGameResult_default_instance_;
    new (ptr) ::Rummy::RMMsgGameResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RMMsgGameResult_Rummy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RMMsgGameResult_Rummy_2eproto}, {
      &scc_info_RMMsgPlayerInfo_Rummy_2eproto.base,}};

static void InitDefaultsscc_info_RMMsgGameStartResp_Rummy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rummy::_RMMsgGameStartResp_default_instance_;
    new (ptr) ::Rummy::RMMsgGameStartResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RMMsgGameStartResp_Rummy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RMMsgGameStartResp_Rummy_2eproto}, {}};

static void InitDefaultsscc_info_RMMsgHandCards_Rummy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rummy::_RMMsgHandCards_default_instance_;
    new (ptr) ::Rummy::RMMsgHandCards();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RMMsgHandCards_Rummy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RMMsgHandCards_Rummy_2eproto}, {}};

static void InitDefaultsscc_info_RMMsgNotifyActionResp_Rummy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rummy::_RMMsgNotifyActionResp_default_instance_;
    new (ptr) ::Rummy::RMMsgNotifyActionResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RMMsgNotifyActionResp_Rummy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RMMsgNotifyActionResp_Rummy_2eproto}, {}};

static void InitDefaultsscc_info_RMMsgNotifyPlayerAct_Rummy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rummy::_RMMsgNotifyPlayerAct_default_instance_;
    new (ptr) ::Rummy::RMMsgNotifyPlayerAct();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RMMsgNotifyPlayerAct_Rummy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RMMsgNotifyPlayerAct_Rummy_2eproto}, {}};

static void InitDefaultsscc_info_RMMsgNotifyTrusteeship_Rummy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rummy::_RMMsgNotifyTrusteeship_default_instance_;
    new (ptr) ::Rummy::RMMsgNotifyTrusteeship();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RMMsgNotifyTrusteeship_Rummy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RMMsgNotifyTrusteeship_Rummy_2eproto}, {}};

static void InitDefaultsscc_info_RMMsgPlayerInfo_Rummy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rummy::_RMMsgPlayerInfo_default_instance_;
    new (ptr) ::Rummy::RMMsgPlayerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RMMsgPlayerInfo_Rummy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RMMsgPlayerInfo_Rummy_2eproto}, {
      &scc_info_RMColumnInfo_Rummy_2eproto.base,}};

static void InitDefaultsscc_info_RMMsgSceneInfo_Rummy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rummy::_RMMsgSceneInfo_default_instance_;
    new (ptr) ::Rummy::RMMsgSceneInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RMMsgSceneInfo_Rummy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RMMsgSceneInfo_Rummy_2eproto}, {
      &scc_info_RMMsgPlayerInfo_Rummy_2eproto.base,}};

static void InitDefaultsscc_info_RMMsgTableState_Rummy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rummy::_RMMsgTableState_default_instance_;
    new (ptr) ::Rummy::RMMsgTableState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RMMsgTableState_Rummy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RMMsgTableState_Rummy_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Rummy_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Rummy_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Rummy_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Rummy_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rummy::RMColumnInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Rummy::RMColumnInfo, start_value_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMColumnInfo, col_type_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMColumnInfo, cards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgTableState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgTableState, state_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgTableState, out_ime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgHandCards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgHandCards, cards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgPlayerInfo, chair_id_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgPlayerInfo, play_status_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgPlayerInfo, gold_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgPlayerInfo, win_gold_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgPlayerInfo, cards_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgPlayerInfo, cur_act_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgPlayerInfo, hand_group_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgSceneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgSceneInfo, max_multiple_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgSceneInfo, cell_score_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgSceneInfo, table_state_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgSceneInfo, tax_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgSceneInfo, banker_chair_id_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgSceneInfo, cur_chair_id_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgSceneInfo, cur_chair_act_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgSceneInfo, out_time_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgSceneInfo, total_time_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgSceneInfo, joker_card_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgSceneInfo, left_card_num_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgSceneInfo, out_cards_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgSceneInfo, player_infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgGameStartResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgGameStartResp, cur_chair_id_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgGameStartResp, banker_chair_id_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgGameStartResp, max_score_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgGameStartResp, cell_score_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgGameStartResp, max_multiple_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgGameStartResp, new_gold_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgGameStartResp, joker_card_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgGameStartResp, left_card_num_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgGameStartResp, out_cards_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgGameStartResp, play_index_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgGameStartResp, cards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgNotifyActionResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgNotifyActionResp, cur_chair_id_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgNotifyActionResp, current_act_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgNotifyActionResp, oper_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgAction, chair_id_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgAction, act_type_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgAction, dest_card_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgAction, get_out_card_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgAction, hand_group_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgActionResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgActionResp, chair_id_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgActionResp, act_type_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgActionResp, dest_card_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgActionResp, get_out_card_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgActionResp, drop_multiple_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgActionResp, auto_action_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgActionResp, left_card_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgActionChoice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgActionChoice, determined_level_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgActionChoice, is_determine_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgActionChoice, choices_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgActionChoice, determined_action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgGameResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgGameResult, game_tax_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgGameResult, player_info_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgGameResult, end_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgNotifyTrusteeship, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgNotifyTrusteeship, seat_index_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgNotifyTrusteeship, is_trusteeship_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgNotifyPlayerAct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgNotifyPlayerAct, chair_id_),
  PROTOBUF_FIELD_OFFSET(::Rummy::RMMsgNotifyPlayerAct, act_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Rummy::RMColumnInfo)},
  { 8, -1, sizeof(::Rummy::RMMsgTableState)},
  { 15, -1, sizeof(::Rummy::RMMsgHandCards)},
  { 21, -1, sizeof(::Rummy::RMMsgPlayerInfo)},
  { 33, -1, sizeof(::Rummy::RMMsgSceneInfo)},
  { 51, -1, sizeof(::Rummy::RMMsgGameStartResp)},
  { 67, -1, sizeof(::Rummy::RMMsgNotifyActionResp)},
  { 75, -1, sizeof(::Rummy::RMMsgAction)},
  { 85, -1, sizeof(::Rummy::RMMsgActionResp)},
  { 97, -1, sizeof(::Rummy::RMMsgActionChoice)},
  { 106, -1, sizeof(::Rummy::RMMsgGameResult)},
  { 114, -1, sizeof(::Rummy::RMMsgNotifyTrusteeship)},
  { 121, -1, sizeof(::Rummy::RMMsgNotifyPlayerAct)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Rummy::_RMColumnInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Rummy::_RMMsgTableState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Rummy::_RMMsgHandCards_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Rummy::_RMMsgPlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Rummy::_RMMsgSceneInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Rummy::_RMMsgGameStartResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Rummy::_RMMsgNotifyActionResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Rummy::_RMMsgAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Rummy::_RMMsgActionResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Rummy::_RMMsgActionChoice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Rummy::_RMMsgGameResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Rummy::_RMMsgNotifyTrusteeship_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Rummy::_RMMsgNotifyPlayerAct_default_instance_),
};

const char descriptor_table_protodef_Rummy_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013Rummy.proto\022\005Rummy\"D\n\014RMColumnInfo\022\023\n\013"
  "start_value\030\001 \001(\005\022\020\n\010col_type\030\002 \001(\005\022\r\n\005c"
  "ards\030\003 \003(\005\"1\n\017RMMsgTableState\022\r\n\005state\030\001"
  " \001(\005\022\017\n\007out_ime\030\002 \001(\005\"\037\n\016RMMsgHandCards\022"
  "\r\n\005cards\030\001 \003(\005\"\246\001\n\017RMMsgPlayerInfo\022\020\n\010ch"
  "air_id\030\001 \001(\005\022\023\n\013play_status\030\002 \001(\005\022\014\n\004gol"
  "d\030\003 \001(\003\022\020\n\010win_gold\030\004 \001(\003\022\r\n\005cards\030\005 \003(\005"
  "\022\017\n\007cur_act\030\006 \001(\005\022,\n\017hand_group_info\030\007 \003"
  "(\0132\023.Rummy.RMColumnInfo\"\264\002\n\016RMMsgSceneIn"
  "fo\022\024\n\014max_multiple\030\001 \001(\003\022\022\n\ncell_score\030\002"
  " \001(\003\022\023\n\013table_state\030\003 \001(\005\022\013\n\003tax\030\004 \001(\005\022\027"
  "\n\017banker_chair_id\030\005 \001(\005\022\024\n\014cur_chair_id\030"
  "\006 \001(\005\022\025\n\rcur_chair_act\030\007 \001(\005\022\020\n\010out_time"
  "\030\010 \001(\005\022\022\n\ntotal_time\030\t \001(\005\022\022\n\njoker_card"
  "\030\n \001(\005\022\025\n\rleft_card_num\030\013 \001(\005\022\021\n\tout_car"
  "ds\030\014 \003(\005\022,\n\014player_infos\030\r \003(\0132\026.Rummy.R"
  "MMsgPlayerInfo\"\363\001\n\022RMMsgGameStartResp\022\024\n"
  "\014cur_chair_id\030\001 \001(\005\022\027\n\017banker_chair_id\030\002"
  " \001(\005\022\021\n\tmax_score\030\003 \001(\003\022\022\n\ncell_score\030\004 "
  "\001(\003\022\024\n\014max_multiple\030\005 \001(\003\022\020\n\010new_gold\030\t "
  "\001(\003\022\022\n\njoker_card\030\n \001(\005\022\025\n\rleft_card_num"
  "\030\013 \001(\005\022\021\n\tout_cards\030\014 \003(\005\022\022\n\nplay_index\030"
  "\r \003(\005\022\r\n\005cards\030\017 \003(\005\"U\n\025RMMsgNotifyActio"
  "nResp\022\024\n\014cur_chair_id\030\001 \001(\005\022\023\n\013current_a"
  "ct\030\003 \001(\005\022\021\n\toper_time\030\004 \001(\005\"\210\001\n\013RMMsgAct"
  "ion\022\020\n\010chair_id\030\001 \001(\005\022\020\n\010act_type\030\002 \001(\005\022"
  "\021\n\tdest_card\030\003 \001(\005\022\024\n\014get_out_card\030\004 \001(\010"
  "\022,\n\017hand_group_info\030\005 \003(\0132\023.Rummy.RMColu"
  "mnInfo\"\241\001\n\017RMMsgActionResp\022\020\n\010chair_id\030\001"
  " \001(\005\022\020\n\010act_type\030\002 \001(\005\022\021\n\tdest_card\030\003 \001("
  "\005\022\024\n\014get_out_card\030\004 \001(\010\022\025\n\rdrop_multiple"
  "\030\006 \001(\r\022\023\n\013auto_action\030\007 \001(\010\022\025\n\rleft_card"
  "_num\030\t \001(\005\"\227\001\n\021RMMsgActionChoice\022\030\n\020dete"
  "rmined_level\030\001 \001(\005\022\024\n\014is_determine\030\002 \001(\010"
  "\022#\n\007choices\030\003 \003(\0132\022.Rummy.RMMsgAction\022-\n"
  "\021determined_action\030\004 \001(\0132\022.Rummy.RMMsgAc"
  "tion\"c\n\017RMMsgGameResult\022\020\n\010game_tax\030\001 \001("
  "\005\022+\n\013player_info\030\002 \003(\0132\026.Rummy.RMMsgPlay"
  "erInfo\022\021\n\tend_state\030\003 \001(\005\"D\n\026RMMsgNotify"
  "Trusteeship\022\022\n\nseat_index\030\001 \001(\005\022\026\n\016is_tr"
  "usteeship\030\002 \001(\010\"5\n\024RMMsgNotifyPlayerAct\022"
  "\020\n\010chair_id\030\001 \001(\005\022\013\n\003act\030\002 \001(\005*d\n\014ERMGam"
  "eState\022\017\n\013GS_TP_READY\020\000\022\016\n\nGS_TP_DEAL\020\001\022"
  "\021\n\rGS_TP_PLAYING\020\002\022\016\n\nGS_TP_SHOW\020\003\022\020\n\014GS"
  "_TP_RESULT\020\004*d\n\013PlayerState\022\014\n\010PS_READY\020"
  "\000\022\013\n\007PS_PLAY\020\001\022\013\n\007PS_GIVE\020\002\022\013\n\007PS_FAIL\020\003"
  "\022\020\n\014PS_SORT_CARD\020\004\022\016\n\nPS_SHOW_HU\020\005*s\n\rER"
  "MGameAction\022\r\n\tInvaldAct\020\000\022\014\n\010DropCard\020\001"
  "\022\n\n\006NaCard\020\002\022\013\n\007ChuCard\020\004\022\r\n\tSortsCard\020\010"
  "\022\014\n\010ShowCard\020\020\022\017\n\013TrusteeShip\020 *b\n\016ERMCo"
  "lCardType\022\016\n\nCOL_SINGLE\020\000\022\016\n\nCOL_BAO_ZI\020"
  "\001\022\020\n\014COL_SHUN_ZHI\020\002\022\021\n\rCOL_QING_SHUN\020\003\022\013"
  "\n\007COL_MAX\020\004*\310\004\n\017ERMMsgIDSubGame\022\025\n\021MsgID"
  "SubGame_Null\020\000\022\036\n\032MsgIDSubGame_GameStart"
  "Resp\020\001\022!\n\035MsgIDSubGame_NotifyActionResp\020"
  "\002\022\027\n\023MsgIDSubGame_Action\020\003\022\033\n\027MsgIDSubGa"
  "me_ActionResp\020\004\022\037\n\033MsgIDSubGame_GameResu"
  "ltResp\020\005\022 \n\034MsgIDSubGame_NotifyStateResp"
  "\020\006\022\034\n\030MsgIDSubGame_TimeOutResp\020\013\022\035\n\031MsgI"
  "DSubGame_TimeOutReady\020\014\022!\n\035MsgIDSubGame_"
  "TimeOutReadyResp\020\r\022 \n\034MsgIDSubGame_TimeO"
  "utKickResp\020\016\022&\n\"MsgIDSubGame_NotifyTrust"
  "eeshipResp\020\017\022&\n\"MsgIDSubGame_NotifySyste"
  "mCheatResp\020\024\022#\n\037MsgIDSubGame_NotifyNextC"
  "ardResp\020\025\022 \n\034MsgIDSubGame_NotifyIsMaxRes"
  "p\020\026\022\"\n\036MsgIDSubGame_NotifyLastActResp\020\031\022"
  "%\n!MsgIDSubGame_NotifyOperPlayerInfo\020(b\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Rummy_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Rummy_2eproto_sccs[13] = {
  &scc_info_RMColumnInfo_Rummy_2eproto.base,
  &scc_info_RMMsgAction_Rummy_2eproto.base,
  &scc_info_RMMsgActionChoice_Rummy_2eproto.base,
  &scc_info_RMMsgActionResp_Rummy_2eproto.base,
  &scc_info_RMMsgGameResult_Rummy_2eproto.base,
  &scc_info_RMMsgGameStartResp_Rummy_2eproto.base,
  &scc_info_RMMsgHandCards_Rummy_2eproto.base,
  &scc_info_RMMsgNotifyActionResp_Rummy_2eproto.base,
  &scc_info_RMMsgNotifyPlayerAct_Rummy_2eproto.base,
  &scc_info_RMMsgNotifyTrusteeship_Rummy_2eproto.base,
  &scc_info_RMMsgPlayerInfo_Rummy_2eproto.base,
  &scc_info_RMMsgSceneInfo_Rummy_2eproto.base,
  &scc_info_RMMsgTableState_Rummy_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Rummy_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Rummy_2eproto = {
  false, false, descriptor_table_protodef_Rummy_2eproto, "Rummy.proto", 2686,
  &descriptor_table_Rummy_2eproto_once, descriptor_table_Rummy_2eproto_sccs, descriptor_table_Rummy_2eproto_deps, 13, 0,
  schemas, file_default_instances, TableStruct_Rummy_2eproto::offsets,
  file_level_metadata_Rummy_2eproto, 13, file_level_enum_descriptors_Rummy_2eproto, file_level_service_descriptors_Rummy_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Rummy_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Rummy_2eproto)), true);
namespace Rummy {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ERMGameState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Rummy_2eproto);
  return file_level_enum_descriptors_Rummy_2eproto[0];
}
bool ERMGameState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Rummy_2eproto);
  return file_level_enum_descriptors_Rummy_2eproto[1];
}
bool PlayerState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ERMGameAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Rummy_2eproto);
  return file_level_enum_descriptors_Rummy_2eproto[2];
}
bool ERMGameAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ERMColCardType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Rummy_2eproto);
  return file_level_enum_descriptors_Rummy_2eproto[3];
}
bool ERMColCardType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ERMMsgIDSubGame_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Rummy_2eproto);
  return file_level_enum_descriptors_Rummy_2eproto[4];
}
bool ERMMsgIDSubGame_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 20:
    case 21:
    case 22:
    case 25:
    case 40:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RMColumnInfo::_Internal {
 public:
};

RMColumnInfo::RMColumnInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cards_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Rummy.RMColumnInfo)
}
RMColumnInfo::RMColumnInfo(const RMColumnInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cards_(from.cards_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_value_, &from.start_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&col_type_) -
    reinterpret_cast<char*>(&start_value_)) + sizeof(col_type_));
  // @@protoc_insertion_point(copy_constructor:Rummy.RMColumnInfo)
}

void RMColumnInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&start_value_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&col_type_) -
      reinterpret_cast<char*>(&start_value_)) + sizeof(col_type_));
}

RMColumnInfo::~RMColumnInfo() {
  // @@protoc_insertion_point(destructor:Rummy.RMColumnInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RMColumnInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RMColumnInfo::ArenaDtor(void* object) {
  RMColumnInfo* _this = reinterpret_cast< RMColumnInfo* >(object);
  (void)_this;
}
void RMColumnInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RMColumnInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RMColumnInfo& RMColumnInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RMColumnInfo_Rummy_2eproto.base);
  return *internal_default_instance();
}


void RMColumnInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Rummy.RMColumnInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cards_.Clear();
  ::memset(&start_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_type_) -
      reinterpret_cast<char*>(&start_value_)) + sizeof(col_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RMColumnInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 start_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 col_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          col_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 cards = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_cards(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_cards(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RMColumnInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rummy.RMColumnInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 start_value = 1;
  if (this->start_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_start_value(), target);
  }

  // int32 col_type = 2;
  if (this->col_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_col_type(), target);
  }

  // repeated int32 cards = 3;
  {
    int byte_size = _cards_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_cards(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rummy.RMColumnInfo)
  return target;
}

size_t RMColumnInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rummy.RMColumnInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 cards = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->cards_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _cards_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 start_value = 1;
  if (this->start_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start_value());
  }

  // int32 col_type = 2;
  if (this->col_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_col_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RMColumnInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rummy.RMColumnInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RMColumnInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RMColumnInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rummy.RMColumnInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rummy.RMColumnInfo)
    MergeFrom(*source);
  }
}

void RMColumnInfo::MergeFrom(const RMColumnInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rummy.RMColumnInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cards_.MergeFrom(from.cards_);
  if (from.start_value() != 0) {
    _internal_set_start_value(from._internal_start_value());
  }
  if (from.col_type() != 0) {
    _internal_set_col_type(from._internal_col_type());
  }
}

void RMColumnInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rummy.RMColumnInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RMColumnInfo::CopyFrom(const RMColumnInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rummy.RMColumnInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RMColumnInfo::IsInitialized() const {
  return true;
}

void RMColumnInfo::InternalSwap(RMColumnInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cards_.InternalSwap(&other->cards_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RMColumnInfo, col_type_)
      + sizeof(RMColumnInfo::col_type_)
      - PROTOBUF_FIELD_OFFSET(RMColumnInfo, start_value_)>(
          reinterpret_cast<char*>(&start_value_),
          reinterpret_cast<char*>(&other->start_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RMColumnInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RMMsgTableState::_Internal {
 public:
};

RMMsgTableState::RMMsgTableState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Rummy.RMMsgTableState)
}
RMMsgTableState::RMMsgTableState(const RMMsgTableState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&out_ime_) -
    reinterpret_cast<char*>(&state_)) + sizeof(out_ime_));
  // @@protoc_insertion_point(copy_constructor:Rummy.RMMsgTableState)
}

void RMMsgTableState::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&state_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&out_ime_) -
      reinterpret_cast<char*>(&state_)) + sizeof(out_ime_));
}

RMMsgTableState::~RMMsgTableState() {
  // @@protoc_insertion_point(destructor:Rummy.RMMsgTableState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RMMsgTableState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RMMsgTableState::ArenaDtor(void* object) {
  RMMsgTableState* _this = reinterpret_cast< RMMsgTableState* >(object);
  (void)_this;
}
void RMMsgTableState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RMMsgTableState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RMMsgTableState& RMMsgTableState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RMMsgTableState_Rummy_2eproto.base);
  return *internal_default_instance();
}


void RMMsgTableState::Clear() {
// @@protoc_insertion_point(message_clear_start:Rummy.RMMsgTableState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&out_ime_) -
      reinterpret_cast<char*>(&state_)) + sizeof(out_ime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RMMsgTableState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 out_ime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          out_ime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RMMsgTableState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rummy.RMMsgTableState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  // int32 out_ime = 2;
  if (this->out_ime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_out_ime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rummy.RMMsgTableState)
  return target;
}

size_t RMMsgTableState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rummy.RMMsgTableState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // int32 out_ime = 2;
  if (this->out_ime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_out_ime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RMMsgTableState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rummy.RMMsgTableState)
  GOOGLE_DCHECK_NE(&from, this);
  const RMMsgTableState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RMMsgTableState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rummy.RMMsgTableState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rummy.RMMsgTableState)
    MergeFrom(*source);
  }
}

void RMMsgTableState::MergeFrom(const RMMsgTableState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rummy.RMMsgTableState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.out_ime() != 0) {
    _internal_set_out_ime(from._internal_out_ime());
  }
}

void RMMsgTableState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rummy.RMMsgTableState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RMMsgTableState::CopyFrom(const RMMsgTableState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rummy.RMMsgTableState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RMMsgTableState::IsInitialized() const {
  return true;
}

void RMMsgTableState::InternalSwap(RMMsgTableState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RMMsgTableState, out_ime_)
      + sizeof(RMMsgTableState::out_ime_)
      - PROTOBUF_FIELD_OFFSET(RMMsgTableState, state_)>(
          reinterpret_cast<char*>(&state_),
          reinterpret_cast<char*>(&other->state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RMMsgTableState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RMMsgHandCards::_Internal {
 public:
};

RMMsgHandCards::RMMsgHandCards(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cards_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Rummy.RMMsgHandCards)
}
RMMsgHandCards::RMMsgHandCards(const RMMsgHandCards& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cards_(from.cards_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rummy.RMMsgHandCards)
}

void RMMsgHandCards::SharedCtor() {
}

RMMsgHandCards::~RMMsgHandCards() {
  // @@protoc_insertion_point(destructor:Rummy.RMMsgHandCards)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RMMsgHandCards::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RMMsgHandCards::ArenaDtor(void* object) {
  RMMsgHandCards* _this = reinterpret_cast< RMMsgHandCards* >(object);
  (void)_this;
}
void RMMsgHandCards::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RMMsgHandCards::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RMMsgHandCards& RMMsgHandCards::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RMMsgHandCards_Rummy_2eproto.base);
  return *internal_default_instance();
}


void RMMsgHandCards::Clear() {
// @@protoc_insertion_point(message_clear_start:Rummy.RMMsgHandCards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cards_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RMMsgHandCards::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 cards = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_cards(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_cards(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RMMsgHandCards::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rummy.RMMsgHandCards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 cards = 1;
  {
    int byte_size = _cards_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_cards(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rummy.RMMsgHandCards)
  return target;
}

size_t RMMsgHandCards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rummy.RMMsgHandCards)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 cards = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->cards_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _cards_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RMMsgHandCards::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rummy.RMMsgHandCards)
  GOOGLE_DCHECK_NE(&from, this);
  const RMMsgHandCards* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RMMsgHandCards>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rummy.RMMsgHandCards)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rummy.RMMsgHandCards)
    MergeFrom(*source);
  }
}

void RMMsgHandCards::MergeFrom(const RMMsgHandCards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rummy.RMMsgHandCards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cards_.MergeFrom(from.cards_);
}

void RMMsgHandCards::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rummy.RMMsgHandCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RMMsgHandCards::CopyFrom(const RMMsgHandCards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rummy.RMMsgHandCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RMMsgHandCards::IsInitialized() const {
  return true;
}

void RMMsgHandCards::InternalSwap(RMMsgHandCards* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cards_.InternalSwap(&other->cards_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RMMsgHandCards::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RMMsgPlayerInfo::_Internal {
 public:
};

RMMsgPlayerInfo::RMMsgPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cards_(arena),
  hand_group_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Rummy.RMMsgPlayerInfo)
}
RMMsgPlayerInfo::RMMsgPlayerInfo(const RMMsgPlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cards_(from.cards_),
      hand_group_info_(from.hand_group_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cur_act_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(cur_act_));
  // @@protoc_insertion_point(copy_constructor:Rummy.RMMsgPlayerInfo)
}

void RMMsgPlayerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RMMsgPlayerInfo_Rummy_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&cur_act_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(cur_act_));
}

RMMsgPlayerInfo::~RMMsgPlayerInfo() {
  // @@protoc_insertion_point(destructor:Rummy.RMMsgPlayerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RMMsgPlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RMMsgPlayerInfo::ArenaDtor(void* object) {
  RMMsgPlayerInfo* _this = reinterpret_cast< RMMsgPlayerInfo* >(object);
  (void)_this;
}
void RMMsgPlayerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RMMsgPlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RMMsgPlayerInfo& RMMsgPlayerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RMMsgPlayerInfo_Rummy_2eproto.base);
  return *internal_default_instance();
}


void RMMsgPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Rummy.RMMsgPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cards_.Clear();
  hand_group_info_.Clear();
  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_act_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(cur_act_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RMMsgPlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 play_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          play_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 gold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 win_gold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          win_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 cards = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_cards(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_cards(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cur_act = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          cur_act_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Rummy.RMColumnInfo hand_group_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hand_group_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RMMsgPlayerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rummy.RMMsgPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int32 play_status = 2;
  if (this->play_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_play_status(), target);
  }

  // int64 gold = 3;
  if (this->gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_gold(), target);
  }

  // int64 win_gold = 4;
  if (this->win_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_win_gold(), target);
  }

  // repeated int32 cards = 5;
  {
    int byte_size = _cards_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_cards(), byte_size, target);
    }
  }

  // int32 cur_act = 6;
  if (this->cur_act() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_cur_act(), target);
  }

  // repeated .Rummy.RMColumnInfo hand_group_info = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hand_group_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_hand_group_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rummy.RMMsgPlayerInfo)
  return target;
}

size_t RMMsgPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rummy.RMMsgPlayerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 cards = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->cards_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _cards_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .Rummy.RMColumnInfo hand_group_info = 7;
  total_size += 1UL * this->_internal_hand_group_info_size();
  for (const auto& msg : this->hand_group_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 play_status = 2;
  if (this->play_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_play_status());
  }

  // int64 gold = 3;
  if (this->gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_gold());
  }

  // int64 win_gold = 4;
  if (this->win_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_win_gold());
  }

  // int32 cur_act = 6;
  if (this->cur_act() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur_act());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RMMsgPlayerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rummy.RMMsgPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RMMsgPlayerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RMMsgPlayerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rummy.RMMsgPlayerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rummy.RMMsgPlayerInfo)
    MergeFrom(*source);
  }
}

void RMMsgPlayerInfo::MergeFrom(const RMMsgPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rummy.RMMsgPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cards_.MergeFrom(from.cards_);
  hand_group_info_.MergeFrom(from.hand_group_info_);
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.play_status() != 0) {
    _internal_set_play_status(from._internal_play_status());
  }
  if (from.gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
  if (from.win_gold() != 0) {
    _internal_set_win_gold(from._internal_win_gold());
  }
  if (from.cur_act() != 0) {
    _internal_set_cur_act(from._internal_cur_act());
  }
}

void RMMsgPlayerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rummy.RMMsgPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RMMsgPlayerInfo::CopyFrom(const RMMsgPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rummy.RMMsgPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RMMsgPlayerInfo::IsInitialized() const {
  return true;
}

void RMMsgPlayerInfo::InternalSwap(RMMsgPlayerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cards_.InternalSwap(&other->cards_);
  hand_group_info_.InternalSwap(&other->hand_group_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RMMsgPlayerInfo, cur_act_)
      + sizeof(RMMsgPlayerInfo::cur_act_)
      - PROTOBUF_FIELD_OFFSET(RMMsgPlayerInfo, chair_id_)>(
          reinterpret_cast<char*>(&chair_id_),
          reinterpret_cast<char*>(&other->chair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RMMsgPlayerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RMMsgSceneInfo::_Internal {
 public:
};

RMMsgSceneInfo::RMMsgSceneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  out_cards_(arena),
  player_infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Rummy.RMMsgSceneInfo)
}
RMMsgSceneInfo::RMMsgSceneInfo(const RMMsgSceneInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      out_cards_(from.out_cards_),
      player_infos_(from.player_infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_multiple_, &from.max_multiple_,
    static_cast<size_t>(reinterpret_cast<char*>(&left_card_num_) -
    reinterpret_cast<char*>(&max_multiple_)) + sizeof(left_card_num_));
  // @@protoc_insertion_point(copy_constructor:Rummy.RMMsgSceneInfo)
}

void RMMsgSceneInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RMMsgSceneInfo_Rummy_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&max_multiple_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&left_card_num_) -
      reinterpret_cast<char*>(&max_multiple_)) + sizeof(left_card_num_));
}

RMMsgSceneInfo::~RMMsgSceneInfo() {
  // @@protoc_insertion_point(destructor:Rummy.RMMsgSceneInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RMMsgSceneInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RMMsgSceneInfo::ArenaDtor(void* object) {
  RMMsgSceneInfo* _this = reinterpret_cast< RMMsgSceneInfo* >(object);
  (void)_this;
}
void RMMsgSceneInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RMMsgSceneInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RMMsgSceneInfo& RMMsgSceneInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RMMsgSceneInfo_Rummy_2eproto.base);
  return *internal_default_instance();
}


void RMMsgSceneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Rummy.RMMsgSceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  out_cards_.Clear();
  player_infos_.Clear();
  ::memset(&max_multiple_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&left_card_num_) -
      reinterpret_cast<char*>(&max_multiple_)) + sizeof(left_card_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RMMsgSceneInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 max_multiple = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cell_score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cell_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 table_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          table_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tax = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          tax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 banker_chair_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          banker_chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cur_chair_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          cur_chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cur_chair_act = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          cur_chair_act_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 out_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          out_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          total_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 joker_card = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          joker_card_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 left_card_num = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          left_card_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 out_cards = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_out_cards(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96) {
          _internal_add_out_cards(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Rummy.RMMsgPlayerInfo player_infos = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RMMsgSceneInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rummy.RMMsgSceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 max_multiple = 1;
  if (this->max_multiple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_max_multiple(), target);
  }

  // int64 cell_score = 2;
  if (this->cell_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_cell_score(), target);
  }

  // int32 table_state = 3;
  if (this->table_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_table_state(), target);
  }

  // int32 tax = 4;
  if (this->tax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_tax(), target);
  }

  // int32 banker_chair_id = 5;
  if (this->banker_chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_banker_chair_id(), target);
  }

  // int32 cur_chair_id = 6;
  if (this->cur_chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_cur_chair_id(), target);
  }

  // int32 cur_chair_act = 7;
  if (this->cur_chair_act() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_cur_chair_act(), target);
  }

  // int32 out_time = 8;
  if (this->out_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_out_time(), target);
  }

  // int32 total_time = 9;
  if (this->total_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_total_time(), target);
  }

  // int32 joker_card = 10;
  if (this->joker_card() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_joker_card(), target);
  }

  // int32 left_card_num = 11;
  if (this->left_card_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_left_card_num(), target);
  }

  // repeated int32 out_cards = 12;
  {
    int byte_size = _out_cards_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          12, _internal_out_cards(), byte_size, target);
    }
  }

  // repeated .Rummy.RMMsgPlayerInfo player_infos = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_player_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rummy.RMMsgSceneInfo)
  return target;
}

size_t RMMsgSceneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rummy.RMMsgSceneInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 out_cards = 12;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->out_cards_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _out_cards_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .Rummy.RMMsgPlayerInfo player_infos = 13;
  total_size += 1UL * this->_internal_player_infos_size();
  for (const auto& msg : this->player_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 max_multiple = 1;
  if (this->max_multiple() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max_multiple());
  }

  // int64 cell_score = 2;
  if (this->cell_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cell_score());
  }

  // int32 table_state = 3;
  if (this->table_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_table_state());
  }

  // int32 tax = 4;
  if (this->tax() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tax());
  }

  // int32 banker_chair_id = 5;
  if (this->banker_chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_banker_chair_id());
  }

  // int32 cur_chair_id = 6;
  if (this->cur_chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur_chair_id());
  }

  // int32 cur_chair_act = 7;
  if (this->cur_chair_act() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur_chair_act());
  }

  // int32 out_time = 8;
  if (this->out_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_out_time());
  }

  // int32 total_time = 9;
  if (this->total_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_time());
  }

  // int32 joker_card = 10;
  if (this->joker_card() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_joker_card());
  }

  // int32 left_card_num = 11;
  if (this->left_card_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_left_card_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RMMsgSceneInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rummy.RMMsgSceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RMMsgSceneInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RMMsgSceneInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rummy.RMMsgSceneInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rummy.RMMsgSceneInfo)
    MergeFrom(*source);
  }
}

void RMMsgSceneInfo::MergeFrom(const RMMsgSceneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rummy.RMMsgSceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  out_cards_.MergeFrom(from.out_cards_);
  player_infos_.MergeFrom(from.player_infos_);
  if (from.max_multiple() != 0) {
    _internal_set_max_multiple(from._internal_max_multiple());
  }
  if (from.cell_score() != 0) {
    _internal_set_cell_score(from._internal_cell_score());
  }
  if (from.table_state() != 0) {
    _internal_set_table_state(from._internal_table_state());
  }
  if (from.tax() != 0) {
    _internal_set_tax(from._internal_tax());
  }
  if (from.banker_chair_id() != 0) {
    _internal_set_banker_chair_id(from._internal_banker_chair_id());
  }
  if (from.cur_chair_id() != 0) {
    _internal_set_cur_chair_id(from._internal_cur_chair_id());
  }
  if (from.cur_chair_act() != 0) {
    _internal_set_cur_chair_act(from._internal_cur_chair_act());
  }
  if (from.out_time() != 0) {
    _internal_set_out_time(from._internal_out_time());
  }
  if (from.total_time() != 0) {
    _internal_set_total_time(from._internal_total_time());
  }
  if (from.joker_card() != 0) {
    _internal_set_joker_card(from._internal_joker_card());
  }
  if (from.left_card_num() != 0) {
    _internal_set_left_card_num(from._internal_left_card_num());
  }
}

void RMMsgSceneInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rummy.RMMsgSceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RMMsgSceneInfo::CopyFrom(const RMMsgSceneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rummy.RMMsgSceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RMMsgSceneInfo::IsInitialized() const {
  return true;
}

void RMMsgSceneInfo::InternalSwap(RMMsgSceneInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  out_cards_.InternalSwap(&other->out_cards_);
  player_infos_.InternalSwap(&other->player_infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RMMsgSceneInfo, left_card_num_)
      + sizeof(RMMsgSceneInfo::left_card_num_)
      - PROTOBUF_FIELD_OFFSET(RMMsgSceneInfo, max_multiple_)>(
          reinterpret_cast<char*>(&max_multiple_),
          reinterpret_cast<char*>(&other->max_multiple_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RMMsgSceneInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RMMsgGameStartResp::_Internal {
 public:
};

RMMsgGameStartResp::RMMsgGameStartResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  out_cards_(arena),
  play_index_(arena),
  cards_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Rummy.RMMsgGameStartResp)
}
RMMsgGameStartResp::RMMsgGameStartResp(const RMMsgGameStartResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      out_cards_(from.out_cards_),
      play_index_(from.play_index_),
      cards_(from.cards_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cur_chair_id_, &from.cur_chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&left_card_num_) -
    reinterpret_cast<char*>(&cur_chair_id_)) + sizeof(left_card_num_));
  // @@protoc_insertion_point(copy_constructor:Rummy.RMMsgGameStartResp)
}

void RMMsgGameStartResp::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&cur_chair_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&left_card_num_) -
      reinterpret_cast<char*>(&cur_chair_id_)) + sizeof(left_card_num_));
}

RMMsgGameStartResp::~RMMsgGameStartResp() {
  // @@protoc_insertion_point(destructor:Rummy.RMMsgGameStartResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RMMsgGameStartResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RMMsgGameStartResp::ArenaDtor(void* object) {
  RMMsgGameStartResp* _this = reinterpret_cast< RMMsgGameStartResp* >(object);
  (void)_this;
}
void RMMsgGameStartResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RMMsgGameStartResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RMMsgGameStartResp& RMMsgGameStartResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RMMsgGameStartResp_Rummy_2eproto.base);
  return *internal_default_instance();
}


void RMMsgGameStartResp::Clear() {
// @@protoc_insertion_point(message_clear_start:Rummy.RMMsgGameStartResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  out_cards_.Clear();
  play_index_.Clear();
  cards_.Clear();
  ::memset(&cur_chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&left_card_num_) -
      reinterpret_cast<char*>(&cur_chair_id_)) + sizeof(left_card_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RMMsgGameStartResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 cur_chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cur_chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 banker_chair_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          banker_chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 max_score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cell_score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          cell_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 max_multiple = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          max_multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 new_gold = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          new_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 joker_card = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          joker_card_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 left_card_num = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          left_card_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 out_cards = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_out_cards(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96) {
          _internal_add_out_cards(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 play_index = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_play_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104) {
          _internal_add_play_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 cards = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_cards(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120) {
          _internal_add_cards(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RMMsgGameStartResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rummy.RMMsgGameStartResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cur_chair_id = 1;
  if (this->cur_chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cur_chair_id(), target);
  }

  // int32 banker_chair_id = 2;
  if (this->banker_chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_banker_chair_id(), target);
  }

  // int64 max_score = 3;
  if (this->max_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_max_score(), target);
  }

  // int64 cell_score = 4;
  if (this->cell_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_cell_score(), target);
  }

  // int64 max_multiple = 5;
  if (this->max_multiple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_max_multiple(), target);
  }

  // int64 new_gold = 9;
  if (this->new_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_new_gold(), target);
  }

  // int32 joker_card = 10;
  if (this->joker_card() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_joker_card(), target);
  }

  // int32 left_card_num = 11;
  if (this->left_card_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_left_card_num(), target);
  }

  // repeated int32 out_cards = 12;
  {
    int byte_size = _out_cards_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          12, _internal_out_cards(), byte_size, target);
    }
  }

  // repeated int32 play_index = 13;
  {
    int byte_size = _play_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          13, _internal_play_index(), byte_size, target);
    }
  }

  // repeated int32 cards = 15;
  {
    int byte_size = _cards_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          15, _internal_cards(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rummy.RMMsgGameStartResp)
  return target;
}

size_t RMMsgGameStartResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rummy.RMMsgGameStartResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 out_cards = 12;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->out_cards_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _out_cards_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 play_index = 13;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->play_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _play_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 cards = 15;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->cards_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _cards_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 cur_chair_id = 1;
  if (this->cur_chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur_chair_id());
  }

  // int32 banker_chair_id = 2;
  if (this->banker_chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_banker_chair_id());
  }

  // int64 max_score = 3;
  if (this->max_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max_score());
  }

  // int64 cell_score = 4;
  if (this->cell_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cell_score());
  }

  // int64 max_multiple = 5;
  if (this->max_multiple() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max_multiple());
  }

  // int64 new_gold = 9;
  if (this->new_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_new_gold());
  }

  // int32 joker_card = 10;
  if (this->joker_card() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_joker_card());
  }

  // int32 left_card_num = 11;
  if (this->left_card_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_left_card_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RMMsgGameStartResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rummy.RMMsgGameStartResp)
  GOOGLE_DCHECK_NE(&from, this);
  const RMMsgGameStartResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RMMsgGameStartResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rummy.RMMsgGameStartResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rummy.RMMsgGameStartResp)
    MergeFrom(*source);
  }
}

void RMMsgGameStartResp::MergeFrom(const RMMsgGameStartResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rummy.RMMsgGameStartResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  out_cards_.MergeFrom(from.out_cards_);
  play_index_.MergeFrom(from.play_index_);
  cards_.MergeFrom(from.cards_);
  if (from.cur_chair_id() != 0) {
    _internal_set_cur_chair_id(from._internal_cur_chair_id());
  }
  if (from.banker_chair_id() != 0) {
    _internal_set_banker_chair_id(from._internal_banker_chair_id());
  }
  if (from.max_score() != 0) {
    _internal_set_max_score(from._internal_max_score());
  }
  if (from.cell_score() != 0) {
    _internal_set_cell_score(from._internal_cell_score());
  }
  if (from.max_multiple() != 0) {
    _internal_set_max_multiple(from._internal_max_multiple());
  }
  if (from.new_gold() != 0) {
    _internal_set_new_gold(from._internal_new_gold());
  }
  if (from.joker_card() != 0) {
    _internal_set_joker_card(from._internal_joker_card());
  }
  if (from.left_card_num() != 0) {
    _internal_set_left_card_num(from._internal_left_card_num());
  }
}

void RMMsgGameStartResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rummy.RMMsgGameStartResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RMMsgGameStartResp::CopyFrom(const RMMsgGameStartResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rummy.RMMsgGameStartResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RMMsgGameStartResp::IsInitialized() const {
  return true;
}

void RMMsgGameStartResp::InternalSwap(RMMsgGameStartResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  out_cards_.InternalSwap(&other->out_cards_);
  play_index_.InternalSwap(&other->play_index_);
  cards_.InternalSwap(&other->cards_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RMMsgGameStartResp, left_card_num_)
      + sizeof(RMMsgGameStartResp::left_card_num_)
      - PROTOBUF_FIELD_OFFSET(RMMsgGameStartResp, cur_chair_id_)>(
          reinterpret_cast<char*>(&cur_chair_id_),
          reinterpret_cast<char*>(&other->cur_chair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RMMsgGameStartResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RMMsgNotifyActionResp::_Internal {
 public:
};

RMMsgNotifyActionResp::RMMsgNotifyActionResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Rummy.RMMsgNotifyActionResp)
}
RMMsgNotifyActionResp::RMMsgNotifyActionResp(const RMMsgNotifyActionResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cur_chair_id_, &from.cur_chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&oper_time_) -
    reinterpret_cast<char*>(&cur_chair_id_)) + sizeof(oper_time_));
  // @@protoc_insertion_point(copy_constructor:Rummy.RMMsgNotifyActionResp)
}

void RMMsgNotifyActionResp::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&cur_chair_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&oper_time_) -
      reinterpret_cast<char*>(&cur_chair_id_)) + sizeof(oper_time_));
}

RMMsgNotifyActionResp::~RMMsgNotifyActionResp() {
  // @@protoc_insertion_point(destructor:Rummy.RMMsgNotifyActionResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RMMsgNotifyActionResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RMMsgNotifyActionResp::ArenaDtor(void* object) {
  RMMsgNotifyActionResp* _this = reinterpret_cast< RMMsgNotifyActionResp* >(object);
  (void)_this;
}
void RMMsgNotifyActionResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RMMsgNotifyActionResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RMMsgNotifyActionResp& RMMsgNotifyActionResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RMMsgNotifyActionResp_Rummy_2eproto.base);
  return *internal_default_instance();
}


void RMMsgNotifyActionResp::Clear() {
// @@protoc_insertion_point(message_clear_start:Rummy.RMMsgNotifyActionResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cur_chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oper_time_) -
      reinterpret_cast<char*>(&cur_chair_id_)) + sizeof(oper_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RMMsgNotifyActionResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 cur_chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cur_chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 current_act = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          current_act_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 oper_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          oper_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RMMsgNotifyActionResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rummy.RMMsgNotifyActionResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cur_chair_id = 1;
  if (this->cur_chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cur_chair_id(), target);
  }

  // int32 current_act = 3;
  if (this->current_act() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_current_act(), target);
  }

  // int32 oper_time = 4;
  if (this->oper_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_oper_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rummy.RMMsgNotifyActionResp)
  return target;
}

size_t RMMsgNotifyActionResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rummy.RMMsgNotifyActionResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 cur_chair_id = 1;
  if (this->cur_chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur_chair_id());
  }

  // int32 current_act = 3;
  if (this->current_act() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_current_act());
  }

  // int32 oper_time = 4;
  if (this->oper_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_oper_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RMMsgNotifyActionResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rummy.RMMsgNotifyActionResp)
  GOOGLE_DCHECK_NE(&from, this);
  const RMMsgNotifyActionResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RMMsgNotifyActionResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rummy.RMMsgNotifyActionResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rummy.RMMsgNotifyActionResp)
    MergeFrom(*source);
  }
}

void RMMsgNotifyActionResp::MergeFrom(const RMMsgNotifyActionResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rummy.RMMsgNotifyActionResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cur_chair_id() != 0) {
    _internal_set_cur_chair_id(from._internal_cur_chair_id());
  }
  if (from.current_act() != 0) {
    _internal_set_current_act(from._internal_current_act());
  }
  if (from.oper_time() != 0) {
    _internal_set_oper_time(from._internal_oper_time());
  }
}

void RMMsgNotifyActionResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rummy.RMMsgNotifyActionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RMMsgNotifyActionResp::CopyFrom(const RMMsgNotifyActionResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rummy.RMMsgNotifyActionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RMMsgNotifyActionResp::IsInitialized() const {
  return true;
}

void RMMsgNotifyActionResp::InternalSwap(RMMsgNotifyActionResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RMMsgNotifyActionResp, oper_time_)
      + sizeof(RMMsgNotifyActionResp::oper_time_)
      - PROTOBUF_FIELD_OFFSET(RMMsgNotifyActionResp, cur_chair_id_)>(
          reinterpret_cast<char*>(&cur_chair_id_),
          reinterpret_cast<char*>(&other->cur_chair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RMMsgNotifyActionResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RMMsgAction::_Internal {
 public:
};

RMMsgAction::RMMsgAction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hand_group_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Rummy.RMMsgAction)
}
RMMsgAction::RMMsgAction(const RMMsgAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hand_group_info_(from.hand_group_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&get_out_card_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(get_out_card_));
  // @@protoc_insertion_point(copy_constructor:Rummy.RMMsgAction)
}

void RMMsgAction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RMMsgAction_Rummy_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&get_out_card_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(get_out_card_));
}

RMMsgAction::~RMMsgAction() {
  // @@protoc_insertion_point(destructor:Rummy.RMMsgAction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RMMsgAction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RMMsgAction::ArenaDtor(void* object) {
  RMMsgAction* _this = reinterpret_cast< RMMsgAction* >(object);
  (void)_this;
}
void RMMsgAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RMMsgAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RMMsgAction& RMMsgAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RMMsgAction_Rummy_2eproto.base);
  return *internal_default_instance();
}


void RMMsgAction::Clear() {
// @@protoc_insertion_point(message_clear_start:Rummy.RMMsgAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hand_group_info_.Clear();
  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&get_out_card_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(get_out_card_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RMMsgAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 act_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          act_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dest_card = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          dest_card_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool get_out_card = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          get_out_card_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Rummy.RMColumnInfo hand_group_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hand_group_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RMMsgAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rummy.RMMsgAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int32 act_type = 2;
  if (this->act_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_act_type(), target);
  }

  // int32 dest_card = 3;
  if (this->dest_card() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_dest_card(), target);
  }

  // bool get_out_card = 4;
  if (this->get_out_card() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_get_out_card(), target);
  }

  // repeated .Rummy.RMColumnInfo hand_group_info = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hand_group_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_hand_group_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rummy.RMMsgAction)
  return target;
}

size_t RMMsgAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rummy.RMMsgAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Rummy.RMColumnInfo hand_group_info = 5;
  total_size += 1UL * this->_internal_hand_group_info_size();
  for (const auto& msg : this->hand_group_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 act_type = 2;
  if (this->act_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_act_type());
  }

  // int32 dest_card = 3;
  if (this->dest_card() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dest_card());
  }

  // bool get_out_card = 4;
  if (this->get_out_card() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RMMsgAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rummy.RMMsgAction)
  GOOGLE_DCHECK_NE(&from, this);
  const RMMsgAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RMMsgAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rummy.RMMsgAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rummy.RMMsgAction)
    MergeFrom(*source);
  }
}

void RMMsgAction::MergeFrom(const RMMsgAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rummy.RMMsgAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hand_group_info_.MergeFrom(from.hand_group_info_);
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.act_type() != 0) {
    _internal_set_act_type(from._internal_act_type());
  }
  if (from.dest_card() != 0) {
    _internal_set_dest_card(from._internal_dest_card());
  }
  if (from.get_out_card() != 0) {
    _internal_set_get_out_card(from._internal_get_out_card());
  }
}

void RMMsgAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rummy.RMMsgAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RMMsgAction::CopyFrom(const RMMsgAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rummy.RMMsgAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RMMsgAction::IsInitialized() const {
  return true;
}

void RMMsgAction::InternalSwap(RMMsgAction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hand_group_info_.InternalSwap(&other->hand_group_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RMMsgAction, get_out_card_)
      + sizeof(RMMsgAction::get_out_card_)
      - PROTOBUF_FIELD_OFFSET(RMMsgAction, chair_id_)>(
          reinterpret_cast<char*>(&chair_id_),
          reinterpret_cast<char*>(&other->chair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RMMsgAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RMMsgActionResp::_Internal {
 public:
};

RMMsgActionResp::RMMsgActionResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Rummy.RMMsgActionResp)
}
RMMsgActionResp::RMMsgActionResp(const RMMsgActionResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&left_card_num_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(left_card_num_));
  // @@protoc_insertion_point(copy_constructor:Rummy.RMMsgActionResp)
}

void RMMsgActionResp::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&left_card_num_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(left_card_num_));
}

RMMsgActionResp::~RMMsgActionResp() {
  // @@protoc_insertion_point(destructor:Rummy.RMMsgActionResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RMMsgActionResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RMMsgActionResp::ArenaDtor(void* object) {
  RMMsgActionResp* _this = reinterpret_cast< RMMsgActionResp* >(object);
  (void)_this;
}
void RMMsgActionResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RMMsgActionResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RMMsgActionResp& RMMsgActionResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RMMsgActionResp_Rummy_2eproto.base);
  return *internal_default_instance();
}


void RMMsgActionResp::Clear() {
// @@protoc_insertion_point(message_clear_start:Rummy.RMMsgActionResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&left_card_num_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(left_card_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RMMsgActionResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 act_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          act_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dest_card = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          dest_card_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool get_out_card = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          get_out_card_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 drop_multiple = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          drop_multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool auto_action = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          auto_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 left_card_num = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          left_card_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RMMsgActionResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rummy.RMMsgActionResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int32 act_type = 2;
  if (this->act_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_act_type(), target);
  }

  // int32 dest_card = 3;
  if (this->dest_card() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_dest_card(), target);
  }

  // bool get_out_card = 4;
  if (this->get_out_card() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_get_out_card(), target);
  }

  // uint32 drop_multiple = 6;
  if (this->drop_multiple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_drop_multiple(), target);
  }

  // bool auto_action = 7;
  if (this->auto_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_auto_action(), target);
  }

  // int32 left_card_num = 9;
  if (this->left_card_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_left_card_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rummy.RMMsgActionResp)
  return target;
}

size_t RMMsgActionResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rummy.RMMsgActionResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 act_type = 2;
  if (this->act_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_act_type());
  }

  // int32 dest_card = 3;
  if (this->dest_card() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dest_card());
  }

  // bool get_out_card = 4;
  if (this->get_out_card() != 0) {
    total_size += 1 + 1;
  }

  // bool auto_action = 7;
  if (this->auto_action() != 0) {
    total_size += 1 + 1;
  }

  // uint32 drop_multiple = 6;
  if (this->drop_multiple() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_drop_multiple());
  }

  // int32 left_card_num = 9;
  if (this->left_card_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_left_card_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RMMsgActionResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rummy.RMMsgActionResp)
  GOOGLE_DCHECK_NE(&from, this);
  const RMMsgActionResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RMMsgActionResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rummy.RMMsgActionResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rummy.RMMsgActionResp)
    MergeFrom(*source);
  }
}

void RMMsgActionResp::MergeFrom(const RMMsgActionResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rummy.RMMsgActionResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.act_type() != 0) {
    _internal_set_act_type(from._internal_act_type());
  }
  if (from.dest_card() != 0) {
    _internal_set_dest_card(from._internal_dest_card());
  }
  if (from.get_out_card() != 0) {
    _internal_set_get_out_card(from._internal_get_out_card());
  }
  if (from.auto_action() != 0) {
    _internal_set_auto_action(from._internal_auto_action());
  }
  if (from.drop_multiple() != 0) {
    _internal_set_drop_multiple(from._internal_drop_multiple());
  }
  if (from.left_card_num() != 0) {
    _internal_set_left_card_num(from._internal_left_card_num());
  }
}

void RMMsgActionResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rummy.RMMsgActionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RMMsgActionResp::CopyFrom(const RMMsgActionResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rummy.RMMsgActionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RMMsgActionResp::IsInitialized() const {
  return true;
}

void RMMsgActionResp::InternalSwap(RMMsgActionResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RMMsgActionResp, left_card_num_)
      + sizeof(RMMsgActionResp::left_card_num_)
      - PROTOBUF_FIELD_OFFSET(RMMsgActionResp, chair_id_)>(
          reinterpret_cast<char*>(&chair_id_),
          reinterpret_cast<char*>(&other->chair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RMMsgActionResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RMMsgActionChoice::_Internal {
 public:
  static const ::Rummy::RMMsgAction& determined_action(const RMMsgActionChoice* msg);
};

const ::Rummy::RMMsgAction&
RMMsgActionChoice::_Internal::determined_action(const RMMsgActionChoice* msg) {
  return *msg->determined_action_;
}
RMMsgActionChoice::RMMsgActionChoice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  choices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Rummy.RMMsgActionChoice)
}
RMMsgActionChoice::RMMsgActionChoice(const RMMsgActionChoice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      choices_(from.choices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_determined_action()) {
    determined_action_ = new ::Rummy::RMMsgAction(*from.determined_action_);
  } else {
    determined_action_ = nullptr;
  }
  ::memcpy(&determined_level_, &from.determined_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_determine_) -
    reinterpret_cast<char*>(&determined_level_)) + sizeof(is_determine_));
  // @@protoc_insertion_point(copy_constructor:Rummy.RMMsgActionChoice)
}

void RMMsgActionChoice::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RMMsgActionChoice_Rummy_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&determined_action_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_determine_) -
      reinterpret_cast<char*>(&determined_action_)) + sizeof(is_determine_));
}

RMMsgActionChoice::~RMMsgActionChoice() {
  // @@protoc_insertion_point(destructor:Rummy.RMMsgActionChoice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RMMsgActionChoice::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete determined_action_;
}

void RMMsgActionChoice::ArenaDtor(void* object) {
  RMMsgActionChoice* _this = reinterpret_cast< RMMsgActionChoice* >(object);
  (void)_this;
}
void RMMsgActionChoice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RMMsgActionChoice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RMMsgActionChoice& RMMsgActionChoice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RMMsgActionChoice_Rummy_2eproto.base);
  return *internal_default_instance();
}


void RMMsgActionChoice::Clear() {
// @@protoc_insertion_point(message_clear_start:Rummy.RMMsgActionChoice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  choices_.Clear();
  if (GetArena() == nullptr && determined_action_ != nullptr) {
    delete determined_action_;
  }
  determined_action_ = nullptr;
  ::memset(&determined_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_determine_) -
      reinterpret_cast<char*>(&determined_level_)) + sizeof(is_determine_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RMMsgActionChoice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 determined_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          determined_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_determine = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_determine_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Rummy.RMMsgAction choices = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_choices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .Rummy.RMMsgAction determined_action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_determined_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RMMsgActionChoice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rummy.RMMsgActionChoice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 determined_level = 1;
  if (this->determined_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_determined_level(), target);
  }

  // bool is_determine = 2;
  if (this->is_determine() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_determine(), target);
  }

  // repeated .Rummy.RMMsgAction choices = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_choices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_choices(i), target, stream);
  }

  // .Rummy.RMMsgAction determined_action = 4;
  if (this->has_determined_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::determined_action(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rummy.RMMsgActionChoice)
  return target;
}

size_t RMMsgActionChoice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rummy.RMMsgActionChoice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Rummy.RMMsgAction choices = 3;
  total_size += 1UL * this->_internal_choices_size();
  for (const auto& msg : this->choices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Rummy.RMMsgAction determined_action = 4;
  if (this->has_determined_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *determined_action_);
  }

  // int32 determined_level = 1;
  if (this->determined_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_determined_level());
  }

  // bool is_determine = 2;
  if (this->is_determine() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RMMsgActionChoice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rummy.RMMsgActionChoice)
  GOOGLE_DCHECK_NE(&from, this);
  const RMMsgActionChoice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RMMsgActionChoice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rummy.RMMsgActionChoice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rummy.RMMsgActionChoice)
    MergeFrom(*source);
  }
}

void RMMsgActionChoice::MergeFrom(const RMMsgActionChoice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rummy.RMMsgActionChoice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  choices_.MergeFrom(from.choices_);
  if (from.has_determined_action()) {
    _internal_mutable_determined_action()->::Rummy::RMMsgAction::MergeFrom(from._internal_determined_action());
  }
  if (from.determined_level() != 0) {
    _internal_set_determined_level(from._internal_determined_level());
  }
  if (from.is_determine() != 0) {
    _internal_set_is_determine(from._internal_is_determine());
  }
}

void RMMsgActionChoice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rummy.RMMsgActionChoice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RMMsgActionChoice::CopyFrom(const RMMsgActionChoice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rummy.RMMsgActionChoice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RMMsgActionChoice::IsInitialized() const {
  return true;
}

void RMMsgActionChoice::InternalSwap(RMMsgActionChoice* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  choices_.InternalSwap(&other->choices_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RMMsgActionChoice, is_determine_)
      + sizeof(RMMsgActionChoice::is_determine_)
      - PROTOBUF_FIELD_OFFSET(RMMsgActionChoice, determined_action_)>(
          reinterpret_cast<char*>(&determined_action_),
          reinterpret_cast<char*>(&other->determined_action_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RMMsgActionChoice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RMMsgGameResult::_Internal {
 public:
};

RMMsgGameResult::RMMsgGameResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  player_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Rummy.RMMsgGameResult)
}
RMMsgGameResult::RMMsgGameResult(const RMMsgGameResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      player_info_(from.player_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&game_tax_, &from.game_tax_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_state_) -
    reinterpret_cast<char*>(&game_tax_)) + sizeof(end_state_));
  // @@protoc_insertion_point(copy_constructor:Rummy.RMMsgGameResult)
}

void RMMsgGameResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RMMsgGameResult_Rummy_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&game_tax_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&end_state_) -
      reinterpret_cast<char*>(&game_tax_)) + sizeof(end_state_));
}

RMMsgGameResult::~RMMsgGameResult() {
  // @@protoc_insertion_point(destructor:Rummy.RMMsgGameResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RMMsgGameResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RMMsgGameResult::ArenaDtor(void* object) {
  RMMsgGameResult* _this = reinterpret_cast< RMMsgGameResult* >(object);
  (void)_this;
}
void RMMsgGameResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RMMsgGameResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RMMsgGameResult& RMMsgGameResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RMMsgGameResult_Rummy_2eproto.base);
  return *internal_default_instance();
}


void RMMsgGameResult::Clear() {
// @@protoc_insertion_point(message_clear_start:Rummy.RMMsgGameResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_info_.Clear();
  ::memset(&game_tax_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_state_) -
      reinterpret_cast<char*>(&game_tax_)) + sizeof(end_state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RMMsgGameResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 game_tax = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          game_tax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Rummy.RMMsgPlayerInfo player_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 end_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          end_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RMMsgGameResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rummy.RMMsgGameResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 game_tax = 1;
  if (this->game_tax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_game_tax(), target);
  }

  // repeated .Rummy.RMMsgPlayerInfo player_info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_player_info(i), target, stream);
  }

  // int32 end_state = 3;
  if (this->end_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_end_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rummy.RMMsgGameResult)
  return target;
}

size_t RMMsgGameResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rummy.RMMsgGameResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Rummy.RMMsgPlayerInfo player_info = 2;
  total_size += 1UL * this->_internal_player_info_size();
  for (const auto& msg : this->player_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 game_tax = 1;
  if (this->game_tax() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_tax());
  }

  // int32 end_state = 3;
  if (this->end_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_end_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RMMsgGameResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rummy.RMMsgGameResult)
  GOOGLE_DCHECK_NE(&from, this);
  const RMMsgGameResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RMMsgGameResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rummy.RMMsgGameResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rummy.RMMsgGameResult)
    MergeFrom(*source);
  }
}

void RMMsgGameResult::MergeFrom(const RMMsgGameResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rummy.RMMsgGameResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_info_.MergeFrom(from.player_info_);
  if (from.game_tax() != 0) {
    _internal_set_game_tax(from._internal_game_tax());
  }
  if (from.end_state() != 0) {
    _internal_set_end_state(from._internal_end_state());
  }
}

void RMMsgGameResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rummy.RMMsgGameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RMMsgGameResult::CopyFrom(const RMMsgGameResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rummy.RMMsgGameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RMMsgGameResult::IsInitialized() const {
  return true;
}

void RMMsgGameResult::InternalSwap(RMMsgGameResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  player_info_.InternalSwap(&other->player_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RMMsgGameResult, end_state_)
      + sizeof(RMMsgGameResult::end_state_)
      - PROTOBUF_FIELD_OFFSET(RMMsgGameResult, game_tax_)>(
          reinterpret_cast<char*>(&game_tax_),
          reinterpret_cast<char*>(&other->game_tax_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RMMsgGameResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RMMsgNotifyTrusteeship::_Internal {
 public:
};

RMMsgNotifyTrusteeship::RMMsgNotifyTrusteeship(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Rummy.RMMsgNotifyTrusteeship)
}
RMMsgNotifyTrusteeship::RMMsgNotifyTrusteeship(const RMMsgNotifyTrusteeship& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&seat_index_, &from.seat_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_trusteeship_) -
    reinterpret_cast<char*>(&seat_index_)) + sizeof(is_trusteeship_));
  // @@protoc_insertion_point(copy_constructor:Rummy.RMMsgNotifyTrusteeship)
}

void RMMsgNotifyTrusteeship::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&seat_index_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_trusteeship_) -
      reinterpret_cast<char*>(&seat_index_)) + sizeof(is_trusteeship_));
}

RMMsgNotifyTrusteeship::~RMMsgNotifyTrusteeship() {
  // @@protoc_insertion_point(destructor:Rummy.RMMsgNotifyTrusteeship)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RMMsgNotifyTrusteeship::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RMMsgNotifyTrusteeship::ArenaDtor(void* object) {
  RMMsgNotifyTrusteeship* _this = reinterpret_cast< RMMsgNotifyTrusteeship* >(object);
  (void)_this;
}
void RMMsgNotifyTrusteeship::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RMMsgNotifyTrusteeship::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RMMsgNotifyTrusteeship& RMMsgNotifyTrusteeship::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RMMsgNotifyTrusteeship_Rummy_2eproto.base);
  return *internal_default_instance();
}


void RMMsgNotifyTrusteeship::Clear() {
// @@protoc_insertion_point(message_clear_start:Rummy.RMMsgNotifyTrusteeship)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&seat_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_trusteeship_) -
      reinterpret_cast<char*>(&seat_index_)) + sizeof(is_trusteeship_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RMMsgNotifyTrusteeship::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 seat_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seat_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_trusteeship = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_trusteeship_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RMMsgNotifyTrusteeship::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rummy.RMMsgNotifyTrusteeship)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 seat_index = 1;
  if (this->seat_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_seat_index(), target);
  }

  // bool is_trusteeship = 2;
  if (this->is_trusteeship() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_trusteeship(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rummy.RMMsgNotifyTrusteeship)
  return target;
}

size_t RMMsgNotifyTrusteeship::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rummy.RMMsgNotifyTrusteeship)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 seat_index = 1;
  if (this->seat_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seat_index());
  }

  // bool is_trusteeship = 2;
  if (this->is_trusteeship() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RMMsgNotifyTrusteeship::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rummy.RMMsgNotifyTrusteeship)
  GOOGLE_DCHECK_NE(&from, this);
  const RMMsgNotifyTrusteeship* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RMMsgNotifyTrusteeship>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rummy.RMMsgNotifyTrusteeship)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rummy.RMMsgNotifyTrusteeship)
    MergeFrom(*source);
  }
}

void RMMsgNotifyTrusteeship::MergeFrom(const RMMsgNotifyTrusteeship& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rummy.RMMsgNotifyTrusteeship)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seat_index() != 0) {
    _internal_set_seat_index(from._internal_seat_index());
  }
  if (from.is_trusteeship() != 0) {
    _internal_set_is_trusteeship(from._internal_is_trusteeship());
  }
}

void RMMsgNotifyTrusteeship::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rummy.RMMsgNotifyTrusteeship)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RMMsgNotifyTrusteeship::CopyFrom(const RMMsgNotifyTrusteeship& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rummy.RMMsgNotifyTrusteeship)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RMMsgNotifyTrusteeship::IsInitialized() const {
  return true;
}

void RMMsgNotifyTrusteeship::InternalSwap(RMMsgNotifyTrusteeship* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RMMsgNotifyTrusteeship, is_trusteeship_)
      + sizeof(RMMsgNotifyTrusteeship::is_trusteeship_)
      - PROTOBUF_FIELD_OFFSET(RMMsgNotifyTrusteeship, seat_index_)>(
          reinterpret_cast<char*>(&seat_index_),
          reinterpret_cast<char*>(&other->seat_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RMMsgNotifyTrusteeship::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RMMsgNotifyPlayerAct::_Internal {
 public:
};

RMMsgNotifyPlayerAct::RMMsgNotifyPlayerAct(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Rummy.RMMsgNotifyPlayerAct)
}
RMMsgNotifyPlayerAct::RMMsgNotifyPlayerAct(const RMMsgNotifyPlayerAct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&act_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(act_));
  // @@protoc_insertion_point(copy_constructor:Rummy.RMMsgNotifyPlayerAct)
}

void RMMsgNotifyPlayerAct::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&act_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(act_));
}

RMMsgNotifyPlayerAct::~RMMsgNotifyPlayerAct() {
  // @@protoc_insertion_point(destructor:Rummy.RMMsgNotifyPlayerAct)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RMMsgNotifyPlayerAct::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RMMsgNotifyPlayerAct::ArenaDtor(void* object) {
  RMMsgNotifyPlayerAct* _this = reinterpret_cast< RMMsgNotifyPlayerAct* >(object);
  (void)_this;
}
void RMMsgNotifyPlayerAct::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RMMsgNotifyPlayerAct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RMMsgNotifyPlayerAct& RMMsgNotifyPlayerAct::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RMMsgNotifyPlayerAct_Rummy_2eproto.base);
  return *internal_default_instance();
}


void RMMsgNotifyPlayerAct::Clear() {
// @@protoc_insertion_point(message_clear_start:Rummy.RMMsgNotifyPlayerAct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&act_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(act_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RMMsgNotifyPlayerAct::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 act = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          act_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RMMsgNotifyPlayerAct::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rummy.RMMsgNotifyPlayerAct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int32 act = 2;
  if (this->act() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_act(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rummy.RMMsgNotifyPlayerAct)
  return target;
}

size_t RMMsgNotifyPlayerAct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rummy.RMMsgNotifyPlayerAct)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 act = 2;
  if (this->act() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_act());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RMMsgNotifyPlayerAct::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rummy.RMMsgNotifyPlayerAct)
  GOOGLE_DCHECK_NE(&from, this);
  const RMMsgNotifyPlayerAct* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RMMsgNotifyPlayerAct>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rummy.RMMsgNotifyPlayerAct)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rummy.RMMsgNotifyPlayerAct)
    MergeFrom(*source);
  }
}

void RMMsgNotifyPlayerAct::MergeFrom(const RMMsgNotifyPlayerAct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rummy.RMMsgNotifyPlayerAct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.act() != 0) {
    _internal_set_act(from._internal_act());
  }
}

void RMMsgNotifyPlayerAct::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rummy.RMMsgNotifyPlayerAct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RMMsgNotifyPlayerAct::CopyFrom(const RMMsgNotifyPlayerAct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rummy.RMMsgNotifyPlayerAct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RMMsgNotifyPlayerAct::IsInitialized() const {
  return true;
}

void RMMsgNotifyPlayerAct::InternalSwap(RMMsgNotifyPlayerAct* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RMMsgNotifyPlayerAct, act_)
      + sizeof(RMMsgNotifyPlayerAct::act_)
      - PROTOBUF_FIELD_OFFSET(RMMsgNotifyPlayerAct, chair_id_)>(
          reinterpret_cast<char*>(&chair_id_),
          reinterpret_cast<char*>(&other->chair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RMMsgNotifyPlayerAct::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Rummy
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Rummy::RMColumnInfo* Arena::CreateMaybeMessage< ::Rummy::RMColumnInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rummy::RMColumnInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Rummy::RMMsgTableState* Arena::CreateMaybeMessage< ::Rummy::RMMsgTableState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rummy::RMMsgTableState >(arena);
}
template<> PROTOBUF_NOINLINE ::Rummy::RMMsgHandCards* Arena::CreateMaybeMessage< ::Rummy::RMMsgHandCards >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rummy::RMMsgHandCards >(arena);
}
template<> PROTOBUF_NOINLINE ::Rummy::RMMsgPlayerInfo* Arena::CreateMaybeMessage< ::Rummy::RMMsgPlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rummy::RMMsgPlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Rummy::RMMsgSceneInfo* Arena::CreateMaybeMessage< ::Rummy::RMMsgSceneInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rummy::RMMsgSceneInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Rummy::RMMsgGameStartResp* Arena::CreateMaybeMessage< ::Rummy::RMMsgGameStartResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rummy::RMMsgGameStartResp >(arena);
}
template<> PROTOBUF_NOINLINE ::Rummy::RMMsgNotifyActionResp* Arena::CreateMaybeMessage< ::Rummy::RMMsgNotifyActionResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rummy::RMMsgNotifyActionResp >(arena);
}
template<> PROTOBUF_NOINLINE ::Rummy::RMMsgAction* Arena::CreateMaybeMessage< ::Rummy::RMMsgAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rummy::RMMsgAction >(arena);
}
template<> PROTOBUF_NOINLINE ::Rummy::RMMsgActionResp* Arena::CreateMaybeMessage< ::Rummy::RMMsgActionResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rummy::RMMsgActionResp >(arena);
}
template<> PROTOBUF_NOINLINE ::Rummy::RMMsgActionChoice* Arena::CreateMaybeMessage< ::Rummy::RMMsgActionChoice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rummy::RMMsgActionChoice >(arena);
}
template<> PROTOBUF_NOINLINE ::Rummy::RMMsgGameResult* Arena::CreateMaybeMessage< ::Rummy::RMMsgGameResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rummy::RMMsgGameResult >(arena);
}
template<> PROTOBUF_NOINLINE ::Rummy::RMMsgNotifyTrusteeship* Arena::CreateMaybeMessage< ::Rummy::RMMsgNotifyTrusteeship >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rummy::RMMsgNotifyTrusteeship >(arena);
}
template<> PROTOBUF_NOINLINE ::Rummy::RMMsgNotifyPlayerAct* Arena::CreateMaybeMessage< ::Rummy::RMMsgNotifyPlayerAct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rummy::RMMsgNotifyPlayerAct >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
