// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Roulette.proto

#include "Roulette.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Roulette_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AgainBet_Roulette_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Roulette_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BettonArea_Roulette_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Roulette_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameState_Roulette_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Roulette_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GmaeALLRecord_Roulette_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Roulette_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GmaeConfg_Roulette_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Roulette_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgBet_Roulette_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Roulette_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SingleAgainBet_Roulette_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Roulette_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserInfo_Roulette_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Roulette_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WinMsg_Roulette_2eproto;
namespace Roulette {
class GmaeALLRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GmaeALLRecord> _instance;
} _GmaeALLRecord_default_instance_;
class BettonAreaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BettonArea> _instance;
} _BettonArea_default_instance_;
class UserInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserInfo> _instance;
} _UserInfo_default_instance_;
class GmaeConfgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GmaeConfg> _instance;
} _GmaeConfg_default_instance_;
class GameStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameState> _instance;
} _GameState_default_instance_;
class MsgSceneInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgSceneInfo> _instance;
} _MsgSceneInfo_default_instance_;
class MsgBetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgBet> _instance;
} _MsgBet_default_instance_;
class MsgBetRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgBetResp> _instance;
} _MsgBetResp_default_instance_;
class SingleAgainBetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleAgainBet> _instance;
} _SingleAgainBet_default_instance_;
class AgainBetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AgainBet> _instance;
} _AgainBet_default_instance_;
class MsgAgainBetRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgAgainBetResp> _instance;
} _MsgAgainBetResp_default_instance_;
class RevocationBetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RevocationBet> _instance;
} _RevocationBet_default_instance_;
class WinMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WinMsg> _instance;
} _WinMsg_default_instance_;
class MsgGmaeResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgGmaeResult> _instance;
} _MsgGmaeResult_default_instance_;
}  // namespace Roulette
static void InitDefaultsscc_info_AgainBet_Roulette_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Roulette::_AgainBet_default_instance_;
    new (ptr) ::Roulette::AgainBet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AgainBet_Roulette_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AgainBet_Roulette_2eproto}, {
      &scc_info_SingleAgainBet_Roulette_2eproto.base,}};

static void InitDefaultsscc_info_BettonArea_Roulette_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Roulette::_BettonArea_default_instance_;
    new (ptr) ::Roulette::BettonArea();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BettonArea_Roulette_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BettonArea_Roulette_2eproto}, {}};

static void InitDefaultsscc_info_GameState_Roulette_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Roulette::_GameState_default_instance_;
    new (ptr) ::Roulette::GameState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameState_Roulette_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameState_Roulette_2eproto}, {}};

static void InitDefaultsscc_info_GmaeALLRecord_Roulette_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Roulette::_GmaeALLRecord_default_instance_;
    new (ptr) ::Roulette::GmaeALLRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GmaeALLRecord_Roulette_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GmaeALLRecord_Roulette_2eproto}, {}};

static void InitDefaultsscc_info_GmaeConfg_Roulette_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Roulette::_GmaeConfg_default_instance_;
    new (ptr) ::Roulette::GmaeConfg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GmaeConfg_Roulette_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GmaeConfg_Roulette_2eproto}, {
      &scc_info_BettonArea_Roulette_2eproto.base,}};

static void InitDefaultsscc_info_MsgAgainBetResp_Roulette_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Roulette::_MsgAgainBetResp_default_instance_;
    new (ptr) ::Roulette::MsgAgainBetResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgAgainBetResp_Roulette_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgAgainBetResp_Roulette_2eproto}, {
      &scc_info_AgainBet_Roulette_2eproto.base,}};

static void InitDefaultsscc_info_MsgBet_Roulette_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Roulette::_MsgBet_default_instance_;
    new (ptr) ::Roulette::MsgBet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgBet_Roulette_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgBet_Roulette_2eproto}, {}};

static void InitDefaultsscc_info_MsgBetResp_Roulette_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Roulette::_MsgBetResp_default_instance_;
    new (ptr) ::Roulette::MsgBetResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgBetResp_Roulette_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgBetResp_Roulette_2eproto}, {
      &scc_info_MsgBet_Roulette_2eproto.base,}};

static void InitDefaultsscc_info_MsgGmaeResult_Roulette_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Roulette::_MsgGmaeResult_default_instance_;
    new (ptr) ::Roulette::MsgGmaeResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgGmaeResult_Roulette_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgGmaeResult_Roulette_2eproto}, {
      &scc_info_WinMsg_Roulette_2eproto.base,}};

static void InitDefaultsscc_info_MsgSceneInfo_Roulette_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Roulette::_MsgSceneInfo_default_instance_;
    new (ptr) ::Roulette::MsgSceneInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_MsgSceneInfo_Roulette_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_MsgSceneInfo_Roulette_2eproto}, {
      &scc_info_GmaeConfg_Roulette_2eproto.base,
      &scc_info_GmaeALLRecord_Roulette_2eproto.base,
      &scc_info_GameState_Roulette_2eproto.base,
      &scc_info_UserInfo_Roulette_2eproto.base,}};

static void InitDefaultsscc_info_RevocationBet_Roulette_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Roulette::_RevocationBet_default_instance_;
    new (ptr) ::Roulette::RevocationBet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RevocationBet_Roulette_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RevocationBet_Roulette_2eproto}, {}};

static void InitDefaultsscc_info_SingleAgainBet_Roulette_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Roulette::_SingleAgainBet_default_instance_;
    new (ptr) ::Roulette::SingleAgainBet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SingleAgainBet_Roulette_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SingleAgainBet_Roulette_2eproto}, {}};

static void InitDefaultsscc_info_UserInfo_Roulette_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Roulette::_UserInfo_default_instance_;
    new (ptr) ::Roulette::UserInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserInfo_Roulette_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserInfo_Roulette_2eproto}, {}};

static void InitDefaultsscc_info_WinMsg_Roulette_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Roulette::_WinMsg_default_instance_;
    new (ptr) ::Roulette::WinMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WinMsg_Roulette_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WinMsg_Roulette_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Roulette_2eproto[14];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Roulette_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Roulette_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Roulette_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Roulette::GmaeALLRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Roulette::GmaeALLRecord, black_num_),
  PROTOBUF_FIELD_OFFSET(::Roulette::GmaeALLRecord, red_num_),
  PROTOBUF_FIELD_OFFSET(::Roulette::GmaeALLRecord, even_num_),
  PROTOBUF_FIELD_OFFSET(::Roulette::GmaeALLRecord, odd_num_),
  PROTOBUF_FIELD_OFFSET(::Roulette::GmaeALLRecord, big_num_),
  PROTOBUF_FIELD_OFFSET(::Roulette::GmaeALLRecord, small_num_),
  PROTOBUF_FIELD_OFFSET(::Roulette::GmaeALLRecord, zero_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Roulette::BettonArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Roulette::BettonArea, area_cfg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Roulette::UserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Roulette::UserInfo, total_bet_),
  PROTOBUF_FIELD_OFFSET(::Roulette::UserInfo, total_win_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Roulette::GmaeConfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Roulette::GmaeConfg, bet_),
  PROTOBUF_FIELD_OFFSET(::Roulette::GmaeConfg, bet_limit_min_),
  PROTOBUF_FIELD_OFFSET(::Roulette::GmaeConfg, bet_limit_max_),
  PROTOBUF_FIELD_OFFSET(::Roulette::GmaeConfg, bet_area_cfg_),
  PROTOBUF_FIELD_OFFSET(::Roulette::GmaeConfg, multiple_cfg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Roulette::GameState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Roulette::GameState, game_state_),
  PROTOBUF_FIELD_OFFSET(::Roulette::GameState, times_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgSceneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgSceneInfo, game_fog_),
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgSceneInfo, game_record_),
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgSceneInfo, all_record_),
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgSceneInfo, game_state_),
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgSceneInfo, game_bet_),
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgSceneInfo, user_top_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgBet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgBet, index_),
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgBet, area_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgBetResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgBetResp, chair_id_),
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgBetResp, bet_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Roulette::SingleAgainBet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Roulette::SingleAgainBet, index_),
  PROTOBUF_FIELD_OFFSET(::Roulette::SingleAgainBet, area_),
  PROTOBUF_FIELD_OFFSET(::Roulette::SingleAgainBet, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Roulette::AgainBet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Roulette::AgainBet, again_bet_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgAgainBetResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgAgainBetResp, chair_id_),
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgAgainBetResp, again_bet_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Roulette::RevocationBet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Roulette::RevocationBet, revocation_state_),
  PROTOBUF_FIELD_OFFSET(::Roulette::RevocationBet, bet_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Roulette::WinMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Roulette::WinMsg, chair_id_),
  PROTOBUF_FIELD_OFFSET(::Roulette::WinMsg, gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgGmaeResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgGmaeResult, result_num_),
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgGmaeResult, win_msg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Roulette::GmaeALLRecord)},
  { 12, -1, sizeof(::Roulette::BettonArea)},
  { 18, -1, sizeof(::Roulette::UserInfo)},
  { 25, -1, sizeof(::Roulette::GmaeConfg)},
  { 35, -1, sizeof(::Roulette::GameState)},
  { 42, -1, sizeof(::Roulette::MsgSceneInfo)},
  { 53, -1, sizeof(::Roulette::MsgBet)},
  { 60, -1, sizeof(::Roulette::MsgBetResp)},
  { 67, -1, sizeof(::Roulette::SingleAgainBet)},
  { 75, -1, sizeof(::Roulette::AgainBet)},
  { 81, -1, sizeof(::Roulette::MsgAgainBetResp)},
  { 88, -1, sizeof(::Roulette::RevocationBet)},
  { 95, -1, sizeof(::Roulette::WinMsg)},
  { 102, -1, sizeof(::Roulette::MsgGmaeResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Roulette::_GmaeALLRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Roulette::_BettonArea_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Roulette::_UserInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Roulette::_GmaeConfg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Roulette::_GameState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Roulette::_MsgSceneInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Roulette::_MsgBet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Roulette::_MsgBetResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Roulette::_SingleAgainBet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Roulette::_AgainBet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Roulette::_MsgAgainBetResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Roulette::_RevocationBet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Roulette::_WinMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Roulette::_MsgGmaeResult_default_instance_),
};

const char descriptor_table_protodef_Roulette_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Roulette.proto\022\010Roulette\"\214\001\n\rGmaeALLRe"
  "cord\022\021\n\tblack_num\030\001 \001(\005\022\017\n\007red_num\030\002 \001(\005"
  "\022\020\n\010even_num\030\003 \001(\005\022\017\n\007odd_num\030\004 \001(\005\022\017\n\007b"
  "ig_num\030\005 \001(\005\022\021\n\tsmall_num\030\006 \001(\005\022\020\n\010zero_"
  "num\030\007 \001(\005\"\036\n\nBettonArea\022\020\n\010area_cfg\030\001 \003("
  "\005\"0\n\010UserInfo\022\021\n\ttotal_bet\030\001 \001(\003\022\021\n\ttota"
  "l_win\030\002 \001(\003\"\210\001\n\tGmaeConfg\022\013\n\003bet\030\001 \003(\005\022\025"
  "\n\rbet_limit_min\030\002 \003(\005\022\025\n\rbet_limit_max\030\003"
  " \003(\005\022*\n\014bet_area_cfg\030\004 \003(\0132\024.Roulette.Be"
  "ttonArea\022\024\n\014multiple_cfg\030\005 \003(\005\".\n\tGameSt"
  "ate\022\022\n\ngame_state\030\001 \001(\005\022\r\n\005times\030\002 \001(\005\"\330"
  "\001\n\014MsgSceneInfo\022%\n\010game_fog\030\001 \001(\0132\023.Roul"
  "ette.GmaeConfg\022\023\n\013game_record\030\002 \003(\005\022+\n\na"
  "ll_record\030\003 \003(\0132\027.Roulette.GmaeALLRecord"
  "\022\'\n\ngame_state\030\004 \001(\0132\023.Roulette.GameStat"
  "e\022\020\n\010game_bet\030\005 \003(\005\022$\n\010user_top\030\006 \003(\0132\022."
  "Roulette.UserInfo\"%\n\006MsgBet\022\r\n\005index\030\001 \001"
  "(\005\022\014\n\004area\030\002 \001(\005\"B\n\nMsgBetResp\022\020\n\010chair_"
  "id\030\001 \001(\005\022\"\n\010bet_info\030\002 \001(\0132\020.Roulette.Ms"
  "gBet\"<\n\016SingleAgainBet\022\r\n\005index\030\001 \001(\005\022\014\n"
  "\004area\030\002 \001(\005\022\r\n\005count\030\003 \001(\005\"<\n\010AgainBet\0220"
  "\n\016again_bet_info\030\001 \003(\0132\030.Roulette.Single"
  "AgainBet\"O\n\017MsgAgainBetResp\022\020\n\010chair_id\030"
  "\001 \001(\005\022*\n\016again_bet_info\030\002 \001(\0132\022.Roulette"
  ".AgainBet\"<\n\rRevocationBet\022\030\n\020revocation"
  "_state\030\001 \001(\005\022\021\n\tbet_index\030\002 \001(\005\"(\n\006WinMs"
  "g\022\020\n\010chair_id\030\001 \001(\005\022\014\n\004gold\030\002 \001(\003\"F\n\rMsg"
  "GmaeResult\022\022\n\nresult_num\030\001 \001(\005\022!\n\007win_ms"
  "g\030\002 \003(\0132\020.Roulette.WinMsg*\302\001\n\016EMsgIDRoul"
  "ette\022\027\n\023MsgID_SC_GameRecord\020\000\022\027\n\023MsgID_S"
  "C_GameBottom\020\001\022\031\n\025MsgID_SC_BottomCancel\020"
  "\002\022\027\n\023MsgID_SC_GameResult\020\003\022\026\n\022MsgID_SC_G"
  "ameState\020\004\022\027\n\023MsgID_CS_GameBottom\020\005\022\031\n\025M"
  "sgID_CS_BottomCancel\020\006b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Roulette_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Roulette_2eproto_sccs[14] = {
  &scc_info_AgainBet_Roulette_2eproto.base,
  &scc_info_BettonArea_Roulette_2eproto.base,
  &scc_info_GameState_Roulette_2eproto.base,
  &scc_info_GmaeALLRecord_Roulette_2eproto.base,
  &scc_info_GmaeConfg_Roulette_2eproto.base,
  &scc_info_MsgAgainBetResp_Roulette_2eproto.base,
  &scc_info_MsgBet_Roulette_2eproto.base,
  &scc_info_MsgBetResp_Roulette_2eproto.base,
  &scc_info_MsgGmaeResult_Roulette_2eproto.base,
  &scc_info_MsgSceneInfo_Roulette_2eproto.base,
  &scc_info_RevocationBet_Roulette_2eproto.base,
  &scc_info_SingleAgainBet_Roulette_2eproto.base,
  &scc_info_UserInfo_Roulette_2eproto.base,
  &scc_info_WinMsg_Roulette_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Roulette_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Roulette_2eproto = {
  false, false, descriptor_table_protodef_Roulette_2eproto, "Roulette.proto", 1350,
  &descriptor_table_Roulette_2eproto_once, descriptor_table_Roulette_2eproto_sccs, descriptor_table_Roulette_2eproto_deps, 14, 0,
  schemas, file_default_instances, TableStruct_Roulette_2eproto::offsets,
  file_level_metadata_Roulette_2eproto, 14, file_level_enum_descriptors_Roulette_2eproto, file_level_service_descriptors_Roulette_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Roulette_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Roulette_2eproto)), true);
namespace Roulette {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDRoulette_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Roulette_2eproto);
  return file_level_enum_descriptors_Roulette_2eproto[0];
}
bool EMsgIDRoulette_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class GmaeALLRecord::_Internal {
 public:
};

GmaeALLRecord::GmaeALLRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Roulette.GmaeALLRecord)
}
GmaeALLRecord::GmaeALLRecord(const GmaeALLRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&black_num_, &from.black_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&zero_num_) -
    reinterpret_cast<char*>(&black_num_)) + sizeof(zero_num_));
  // @@protoc_insertion_point(copy_constructor:Roulette.GmaeALLRecord)
}

void GmaeALLRecord::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&black_num_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&zero_num_) -
      reinterpret_cast<char*>(&black_num_)) + sizeof(zero_num_));
}

GmaeALLRecord::~GmaeALLRecord() {
  // @@protoc_insertion_point(destructor:Roulette.GmaeALLRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GmaeALLRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GmaeALLRecord::ArenaDtor(void* object) {
  GmaeALLRecord* _this = reinterpret_cast< GmaeALLRecord* >(object);
  (void)_this;
}
void GmaeALLRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GmaeALLRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GmaeALLRecord& GmaeALLRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GmaeALLRecord_Roulette_2eproto.base);
  return *internal_default_instance();
}


void GmaeALLRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:Roulette.GmaeALLRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&black_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zero_num_) -
      reinterpret_cast<char*>(&black_num_)) + sizeof(zero_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GmaeALLRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 black_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          black_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 red_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          red_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 even_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          even_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 odd_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          odd_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 big_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          big_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 small_num = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          small_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 zero_num = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          zero_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GmaeALLRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Roulette.GmaeALLRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 black_num = 1;
  if (this->black_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_black_num(), target);
  }

  // int32 red_num = 2;
  if (this->red_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_red_num(), target);
  }

  // int32 even_num = 3;
  if (this->even_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_even_num(), target);
  }

  // int32 odd_num = 4;
  if (this->odd_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_odd_num(), target);
  }

  // int32 big_num = 5;
  if (this->big_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_big_num(), target);
  }

  // int32 small_num = 6;
  if (this->small_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_small_num(), target);
  }

  // int32 zero_num = 7;
  if (this->zero_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_zero_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Roulette.GmaeALLRecord)
  return target;
}

size_t GmaeALLRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Roulette.GmaeALLRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 black_num = 1;
  if (this->black_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_black_num());
  }

  // int32 red_num = 2;
  if (this->red_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_red_num());
  }

  // int32 even_num = 3;
  if (this->even_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_even_num());
  }

  // int32 odd_num = 4;
  if (this->odd_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_odd_num());
  }

  // int32 big_num = 5;
  if (this->big_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_big_num());
  }

  // int32 small_num = 6;
  if (this->small_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_small_num());
  }

  // int32 zero_num = 7;
  if (this->zero_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_zero_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GmaeALLRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Roulette.GmaeALLRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const GmaeALLRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GmaeALLRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Roulette.GmaeALLRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Roulette.GmaeALLRecord)
    MergeFrom(*source);
  }
}

void GmaeALLRecord::MergeFrom(const GmaeALLRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Roulette.GmaeALLRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.black_num() != 0) {
    _internal_set_black_num(from._internal_black_num());
  }
  if (from.red_num() != 0) {
    _internal_set_red_num(from._internal_red_num());
  }
  if (from.even_num() != 0) {
    _internal_set_even_num(from._internal_even_num());
  }
  if (from.odd_num() != 0) {
    _internal_set_odd_num(from._internal_odd_num());
  }
  if (from.big_num() != 0) {
    _internal_set_big_num(from._internal_big_num());
  }
  if (from.small_num() != 0) {
    _internal_set_small_num(from._internal_small_num());
  }
  if (from.zero_num() != 0) {
    _internal_set_zero_num(from._internal_zero_num());
  }
}

void GmaeALLRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Roulette.GmaeALLRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GmaeALLRecord::CopyFrom(const GmaeALLRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Roulette.GmaeALLRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GmaeALLRecord::IsInitialized() const {
  return true;
}

void GmaeALLRecord::InternalSwap(GmaeALLRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GmaeALLRecord, zero_num_)
      + sizeof(GmaeALLRecord::zero_num_)
      - PROTOBUF_FIELD_OFFSET(GmaeALLRecord, black_num_)>(
          reinterpret_cast<char*>(&black_num_),
          reinterpret_cast<char*>(&other->black_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GmaeALLRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BettonArea::_Internal {
 public:
};

BettonArea::BettonArea(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  area_cfg_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Roulette.BettonArea)
}
BettonArea::BettonArea(const BettonArea& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      area_cfg_(from.area_cfg_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Roulette.BettonArea)
}

void BettonArea::SharedCtor() {
}

BettonArea::~BettonArea() {
  // @@protoc_insertion_point(destructor:Roulette.BettonArea)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BettonArea::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BettonArea::ArenaDtor(void* object) {
  BettonArea* _this = reinterpret_cast< BettonArea* >(object);
  (void)_this;
}
void BettonArea::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BettonArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BettonArea& BettonArea::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BettonArea_Roulette_2eproto.base);
  return *internal_default_instance();
}


void BettonArea::Clear() {
// @@protoc_insertion_point(message_clear_start:Roulette.BettonArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  area_cfg_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BettonArea::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 area_cfg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_area_cfg(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_area_cfg(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BettonArea::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Roulette.BettonArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 area_cfg = 1;
  {
    int byte_size = _area_cfg_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_area_cfg(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Roulette.BettonArea)
  return target;
}

size_t BettonArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Roulette.BettonArea)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 area_cfg = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->area_cfg_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _area_cfg_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BettonArea::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Roulette.BettonArea)
  GOOGLE_DCHECK_NE(&from, this);
  const BettonArea* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BettonArea>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Roulette.BettonArea)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Roulette.BettonArea)
    MergeFrom(*source);
  }
}

void BettonArea::MergeFrom(const BettonArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Roulette.BettonArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  area_cfg_.MergeFrom(from.area_cfg_);
}

void BettonArea::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Roulette.BettonArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BettonArea::CopyFrom(const BettonArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Roulette.BettonArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BettonArea::IsInitialized() const {
  return true;
}

void BettonArea::InternalSwap(BettonArea* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  area_cfg_.InternalSwap(&other->area_cfg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BettonArea::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UserInfo::_Internal {
 public:
};

UserInfo::UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Roulette.UserInfo)
}
UserInfo::UserInfo(const UserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_bet_, &from.total_bet_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_win_) -
    reinterpret_cast<char*>(&total_bet_)) + sizeof(total_win_));
  // @@protoc_insertion_point(copy_constructor:Roulette.UserInfo)
}

void UserInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&total_bet_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&total_win_) -
      reinterpret_cast<char*>(&total_bet_)) + sizeof(total_win_));
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:Roulette.UserInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserInfo::ArenaDtor(void* object) {
  UserInfo* _this = reinterpret_cast< UserInfo* >(object);
  (void)_this;
}
void UserInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserInfo& UserInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserInfo_Roulette_2eproto.base);
  return *internal_default_instance();
}


void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Roulette.UserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&total_bet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_win_) -
      reinterpret_cast<char*>(&total_bet_)) + sizeof(total_win_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 total_bet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          total_bet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_win = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_win_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Roulette.UserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 total_bet = 1;
  if (this->total_bet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_total_bet(), target);
  }

  // int64 total_win = 2;
  if (this->total_win() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_total_win(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Roulette.UserInfo)
  return target;
}

size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Roulette.UserInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 total_bet = 1;
  if (this->total_bet() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_bet());
  }

  // int64 total_win = 2;
  if (this->total_win() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_win());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Roulette.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Roulette.UserInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Roulette.UserInfo)
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Roulette.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.total_bet() != 0) {
    _internal_set_total_bet(from._internal_total_bet());
  }
  if (from.total_win() != 0) {
    _internal_set_total_win(from._internal_total_win());
  }
}

void UserInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Roulette.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Roulette.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  return true;
}

void UserInfo::InternalSwap(UserInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserInfo, total_win_)
      + sizeof(UserInfo::total_win_)
      - PROTOBUF_FIELD_OFFSET(UserInfo, total_bet_)>(
          reinterpret_cast<char*>(&total_bet_),
          reinterpret_cast<char*>(&other->total_bet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GmaeConfg::_Internal {
 public:
};

GmaeConfg::GmaeConfg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bet_(arena),
  bet_limit_min_(arena),
  bet_limit_max_(arena),
  bet_area_cfg_(arena),
  multiple_cfg_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Roulette.GmaeConfg)
}
GmaeConfg::GmaeConfg(const GmaeConfg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bet_(from.bet_),
      bet_limit_min_(from.bet_limit_min_),
      bet_limit_max_(from.bet_limit_max_),
      bet_area_cfg_(from.bet_area_cfg_),
      multiple_cfg_(from.multiple_cfg_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Roulette.GmaeConfg)
}

void GmaeConfg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GmaeConfg_Roulette_2eproto.base);
}

GmaeConfg::~GmaeConfg() {
  // @@protoc_insertion_point(destructor:Roulette.GmaeConfg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GmaeConfg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GmaeConfg::ArenaDtor(void* object) {
  GmaeConfg* _this = reinterpret_cast< GmaeConfg* >(object);
  (void)_this;
}
void GmaeConfg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GmaeConfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GmaeConfg& GmaeConfg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GmaeConfg_Roulette_2eproto.base);
  return *internal_default_instance();
}


void GmaeConfg::Clear() {
// @@protoc_insertion_point(message_clear_start:Roulette.GmaeConfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bet_.Clear();
  bet_limit_min_.Clear();
  bet_limit_max_.Clear();
  bet_area_cfg_.Clear();
  multiple_cfg_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GmaeConfg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 bet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bet(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_bet(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 bet_limit_min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bet_limit_min(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_bet_limit_min(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 bet_limit_max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bet_limit_max(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_bet_limit_max(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Roulette.BettonArea bet_area_cfg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bet_area_cfg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 multiple_cfg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_multiple_cfg(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_multiple_cfg(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GmaeConfg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Roulette.GmaeConfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 bet = 1;
  {
    int byte_size = _bet_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_bet(), byte_size, target);
    }
  }

  // repeated int32 bet_limit_min = 2;
  {
    int byte_size = _bet_limit_min_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_bet_limit_min(), byte_size, target);
    }
  }

  // repeated int32 bet_limit_max = 3;
  {
    int byte_size = _bet_limit_max_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_bet_limit_max(), byte_size, target);
    }
  }

  // repeated .Roulette.BettonArea bet_area_cfg = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bet_area_cfg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_bet_area_cfg(i), target, stream);
  }

  // repeated int32 multiple_cfg = 5;
  {
    int byte_size = _multiple_cfg_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_multiple_cfg(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Roulette.GmaeConfg)
  return target;
}

size_t GmaeConfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Roulette.GmaeConfg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 bet = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bet_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bet_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 bet_limit_min = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bet_limit_min_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bet_limit_min_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 bet_limit_max = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bet_limit_max_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bet_limit_max_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .Roulette.BettonArea bet_area_cfg = 4;
  total_size += 1UL * this->_internal_bet_area_cfg_size();
  for (const auto& msg : this->bet_area_cfg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 multiple_cfg = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->multiple_cfg_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _multiple_cfg_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GmaeConfg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Roulette.GmaeConfg)
  GOOGLE_DCHECK_NE(&from, this);
  const GmaeConfg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GmaeConfg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Roulette.GmaeConfg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Roulette.GmaeConfg)
    MergeFrom(*source);
  }
}

void GmaeConfg::MergeFrom(const GmaeConfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Roulette.GmaeConfg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bet_.MergeFrom(from.bet_);
  bet_limit_min_.MergeFrom(from.bet_limit_min_);
  bet_limit_max_.MergeFrom(from.bet_limit_max_);
  bet_area_cfg_.MergeFrom(from.bet_area_cfg_);
  multiple_cfg_.MergeFrom(from.multiple_cfg_);
}

void GmaeConfg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Roulette.GmaeConfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GmaeConfg::CopyFrom(const GmaeConfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Roulette.GmaeConfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GmaeConfg::IsInitialized() const {
  return true;
}

void GmaeConfg::InternalSwap(GmaeConfg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bet_.InternalSwap(&other->bet_);
  bet_limit_min_.InternalSwap(&other->bet_limit_min_);
  bet_limit_max_.InternalSwap(&other->bet_limit_max_);
  bet_area_cfg_.InternalSwap(&other->bet_area_cfg_);
  multiple_cfg_.InternalSwap(&other->multiple_cfg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GmaeConfg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GameState::_Internal {
 public:
};

GameState::GameState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Roulette.GameState)
}
GameState::GameState(const GameState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&game_state_, &from.game_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&times_) -
    reinterpret_cast<char*>(&game_state_)) + sizeof(times_));
  // @@protoc_insertion_point(copy_constructor:Roulette.GameState)
}

void GameState::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&game_state_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&times_) -
      reinterpret_cast<char*>(&game_state_)) + sizeof(times_));
}

GameState::~GameState() {
  // @@protoc_insertion_point(destructor:Roulette.GameState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameState::ArenaDtor(void* object) {
  GameState* _this = reinterpret_cast< GameState* >(object);
  (void)_this;
}
void GameState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameState& GameState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameState_Roulette_2eproto.base);
  return *internal_default_instance();
}


void GameState::Clear() {
// @@protoc_insertion_point(message_clear_start:Roulette.GameState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&game_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&times_) -
      reinterpret_cast<char*>(&game_state_)) + sizeof(times_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 game_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          game_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 times = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Roulette.GameState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 game_state = 1;
  if (this->game_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_game_state(), target);
  }

  // int32 times = 2;
  if (this->times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_times(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Roulette.GameState)
  return target;
}

size_t GameState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Roulette.GameState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 game_state = 1;
  if (this->game_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_state());
  }

  // int32 times = 2;
  if (this->times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_times());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Roulette.GameState)
  GOOGLE_DCHECK_NE(&from, this);
  const GameState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Roulette.GameState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Roulette.GameState)
    MergeFrom(*source);
  }
}

void GameState::MergeFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Roulette.GameState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.game_state() != 0) {
    _internal_set_game_state(from._internal_game_state());
  }
  if (from.times() != 0) {
    _internal_set_times(from._internal_times());
  }
}

void GameState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Roulette.GameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameState::CopyFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Roulette.GameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameState::IsInitialized() const {
  return true;
}

void GameState::InternalSwap(GameState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameState, times_)
      + sizeof(GameState::times_)
      - PROTOBUF_FIELD_OFFSET(GameState, game_state_)>(
          reinterpret_cast<char*>(&game_state_),
          reinterpret_cast<char*>(&other->game_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgSceneInfo::_Internal {
 public:
  static const ::Roulette::GmaeConfg& game_fog(const MsgSceneInfo* msg);
  static const ::Roulette::GameState& game_state(const MsgSceneInfo* msg);
};

const ::Roulette::GmaeConfg&
MsgSceneInfo::_Internal::game_fog(const MsgSceneInfo* msg) {
  return *msg->game_fog_;
}
const ::Roulette::GameState&
MsgSceneInfo::_Internal::game_state(const MsgSceneInfo* msg) {
  return *msg->game_state_;
}
MsgSceneInfo::MsgSceneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  game_record_(arena),
  all_record_(arena),
  game_bet_(arena),
  user_top_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Roulette.MsgSceneInfo)
}
MsgSceneInfo::MsgSceneInfo(const MsgSceneInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      game_record_(from.game_record_),
      all_record_(from.all_record_),
      game_bet_(from.game_bet_),
      user_top_(from.user_top_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_game_fog()) {
    game_fog_ = new ::Roulette::GmaeConfg(*from.game_fog_);
  } else {
    game_fog_ = nullptr;
  }
  if (from._internal_has_game_state()) {
    game_state_ = new ::Roulette::GameState(*from.game_state_);
  } else {
    game_state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Roulette.MsgSceneInfo)
}

void MsgSceneInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgSceneInfo_Roulette_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&game_fog_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&game_state_) -
      reinterpret_cast<char*>(&game_fog_)) + sizeof(game_state_));
}

MsgSceneInfo::~MsgSceneInfo() {
  // @@protoc_insertion_point(destructor:Roulette.MsgSceneInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgSceneInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete game_fog_;
  if (this != internal_default_instance()) delete game_state_;
}

void MsgSceneInfo::ArenaDtor(void* object) {
  MsgSceneInfo* _this = reinterpret_cast< MsgSceneInfo* >(object);
  (void)_this;
}
void MsgSceneInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgSceneInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgSceneInfo& MsgSceneInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgSceneInfo_Roulette_2eproto.base);
  return *internal_default_instance();
}


void MsgSceneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Roulette.MsgSceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_record_.Clear();
  all_record_.Clear();
  game_bet_.Clear();
  user_top_.Clear();
  if (GetArena() == nullptr && game_fog_ != nullptr) {
    delete game_fog_;
  }
  game_fog_ = nullptr;
  if (GetArena() == nullptr && game_state_ != nullptr) {
    delete game_state_;
  }
  game_state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgSceneInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Roulette.GmaeConfg game_fog = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_fog(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 game_record = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_game_record(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_game_record(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Roulette.GmaeALLRecord all_record = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_all_record(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .Roulette.GameState game_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 game_bet = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_game_bet(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_game_bet(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Roulette.UserInfo user_top = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user_top(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgSceneInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Roulette.MsgSceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Roulette.GmaeConfg game_fog = 1;
  if (this->has_game_fog()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::game_fog(this), target, stream);
  }

  // repeated int32 game_record = 2;
  {
    int byte_size = _game_record_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_game_record(), byte_size, target);
    }
  }

  // repeated .Roulette.GmaeALLRecord all_record = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_all_record_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_all_record(i), target, stream);
  }

  // .Roulette.GameState game_state = 4;
  if (this->has_game_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::game_state(this), target, stream);
  }

  // repeated int32 game_bet = 5;
  {
    int byte_size = _game_bet_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_game_bet(), byte_size, target);
    }
  }

  // repeated .Roulette.UserInfo user_top = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_user_top_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_user_top(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Roulette.MsgSceneInfo)
  return target;
}

size_t MsgSceneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Roulette.MsgSceneInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 game_record = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->game_record_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _game_record_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .Roulette.GmaeALLRecord all_record = 3;
  total_size += 1UL * this->_internal_all_record_size();
  for (const auto& msg : this->all_record_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 game_bet = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->game_bet_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _game_bet_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .Roulette.UserInfo user_top = 6;
  total_size += 1UL * this->_internal_user_top_size();
  for (const auto& msg : this->user_top_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Roulette.GmaeConfg game_fog = 1;
  if (this->has_game_fog()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *game_fog_);
  }

  // .Roulette.GameState game_state = 4;
  if (this->has_game_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *game_state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgSceneInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Roulette.MsgSceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgSceneInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgSceneInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Roulette.MsgSceneInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Roulette.MsgSceneInfo)
    MergeFrom(*source);
  }
}

void MsgSceneInfo::MergeFrom(const MsgSceneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Roulette.MsgSceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  game_record_.MergeFrom(from.game_record_);
  all_record_.MergeFrom(from.all_record_);
  game_bet_.MergeFrom(from.game_bet_);
  user_top_.MergeFrom(from.user_top_);
  if (from.has_game_fog()) {
    _internal_mutable_game_fog()->::Roulette::GmaeConfg::MergeFrom(from._internal_game_fog());
  }
  if (from.has_game_state()) {
    _internal_mutable_game_state()->::Roulette::GameState::MergeFrom(from._internal_game_state());
  }
}

void MsgSceneInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Roulette.MsgSceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSceneInfo::CopyFrom(const MsgSceneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Roulette.MsgSceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSceneInfo::IsInitialized() const {
  return true;
}

void MsgSceneInfo::InternalSwap(MsgSceneInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  game_record_.InternalSwap(&other->game_record_);
  all_record_.InternalSwap(&other->all_record_);
  game_bet_.InternalSwap(&other->game_bet_);
  user_top_.InternalSwap(&other->user_top_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgSceneInfo, game_state_)
      + sizeof(MsgSceneInfo::game_state_)
      - PROTOBUF_FIELD_OFFSET(MsgSceneInfo, game_fog_)>(
          reinterpret_cast<char*>(&game_fog_),
          reinterpret_cast<char*>(&other->game_fog_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgSceneInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgBet::_Internal {
 public:
};

MsgBet::MsgBet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Roulette.MsgBet)
}
MsgBet::MsgBet(const MsgBet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&area_) -
    reinterpret_cast<char*>(&index_)) + sizeof(area_));
  // @@protoc_insertion_point(copy_constructor:Roulette.MsgBet)
}

void MsgBet::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&area_) -
      reinterpret_cast<char*>(&index_)) + sizeof(area_));
}

MsgBet::~MsgBet() {
  // @@protoc_insertion_point(destructor:Roulette.MsgBet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgBet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgBet::ArenaDtor(void* object) {
  MsgBet* _this = reinterpret_cast< MsgBet* >(object);
  (void)_this;
}
void MsgBet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgBet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgBet& MsgBet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgBet_Roulette_2eproto.base);
  return *internal_default_instance();
}


void MsgBet::Clear() {
// @@protoc_insertion_point(message_clear_start:Roulette.MsgBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&area_) -
      reinterpret_cast<char*>(&index_)) + sizeof(area_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgBet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 area = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgBet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Roulette.MsgBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 area = 2;
  if (this->area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_area(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Roulette.MsgBet)
  return target;
}

size_t MsgBet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Roulette.MsgBet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // int32 area = 2;
  if (this->area() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_area());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgBet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Roulette.MsgBet)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgBet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgBet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Roulette.MsgBet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Roulette.MsgBet)
    MergeFrom(*source);
  }
}

void MsgBet::MergeFrom(const MsgBet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Roulette.MsgBet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.area() != 0) {
    _internal_set_area(from._internal_area());
  }
}

void MsgBet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Roulette.MsgBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBet::CopyFrom(const MsgBet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Roulette.MsgBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBet::IsInitialized() const {
  return true;
}

void MsgBet::InternalSwap(MsgBet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgBet, area_)
      + sizeof(MsgBet::area_)
      - PROTOBUF_FIELD_OFFSET(MsgBet, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgBet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgBetResp::_Internal {
 public:
  static const ::Roulette::MsgBet& bet_info(const MsgBetResp* msg);
};

const ::Roulette::MsgBet&
MsgBetResp::_Internal::bet_info(const MsgBetResp* msg) {
  return *msg->bet_info_;
}
MsgBetResp::MsgBetResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Roulette.MsgBetResp)
}
MsgBetResp::MsgBetResp(const MsgBetResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bet_info()) {
    bet_info_ = new ::Roulette::MsgBet(*from.bet_info_);
  } else {
    bet_info_ = nullptr;
  }
  chair_id_ = from.chair_id_;
  // @@protoc_insertion_point(copy_constructor:Roulette.MsgBetResp)
}

void MsgBetResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgBetResp_Roulette_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bet_info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&bet_info_)) + sizeof(chair_id_));
}

MsgBetResp::~MsgBetResp() {
  // @@protoc_insertion_point(destructor:Roulette.MsgBetResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgBetResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bet_info_;
}

void MsgBetResp::ArenaDtor(void* object) {
  MsgBetResp* _this = reinterpret_cast< MsgBetResp* >(object);
  (void)_this;
}
void MsgBetResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgBetResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgBetResp& MsgBetResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgBetResp_Roulette_2eproto.base);
  return *internal_default_instance();
}


void MsgBetResp::Clear() {
// @@protoc_insertion_point(message_clear_start:Roulette.MsgBetResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && bet_info_ != nullptr) {
    delete bet_info_;
  }
  bet_info_ = nullptr;
  chair_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgBetResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Roulette.MsgBet bet_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bet_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgBetResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Roulette.MsgBetResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // .Roulette.MsgBet bet_info = 2;
  if (this->has_bet_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bet_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Roulette.MsgBetResp)
  return target;
}

size_t MsgBetResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Roulette.MsgBetResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Roulette.MsgBet bet_info = 2;
  if (this->has_bet_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bet_info_);
  }

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgBetResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Roulette.MsgBetResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgBetResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgBetResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Roulette.MsgBetResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Roulette.MsgBetResp)
    MergeFrom(*source);
  }
}

void MsgBetResp::MergeFrom(const MsgBetResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Roulette.MsgBetResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bet_info()) {
    _internal_mutable_bet_info()->::Roulette::MsgBet::MergeFrom(from._internal_bet_info());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
}

void MsgBetResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Roulette.MsgBetResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBetResp::CopyFrom(const MsgBetResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Roulette.MsgBetResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBetResp::IsInitialized() const {
  return true;
}

void MsgBetResp::InternalSwap(MsgBetResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgBetResp, chair_id_)
      + sizeof(MsgBetResp::chair_id_)
      - PROTOBUF_FIELD_OFFSET(MsgBetResp, bet_info_)>(
          reinterpret_cast<char*>(&bet_info_),
          reinterpret_cast<char*>(&other->bet_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgBetResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SingleAgainBet::_Internal {
 public:
};

SingleAgainBet::SingleAgainBet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Roulette.SingleAgainBet)
}
SingleAgainBet::SingleAgainBet(const SingleAgainBet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&index_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:Roulette.SingleAgainBet)
}

void SingleAgainBet::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&index_)) + sizeof(count_));
}

SingleAgainBet::~SingleAgainBet() {
  // @@protoc_insertion_point(destructor:Roulette.SingleAgainBet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SingleAgainBet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SingleAgainBet::ArenaDtor(void* object) {
  SingleAgainBet* _this = reinterpret_cast< SingleAgainBet* >(object);
  (void)_this;
}
void SingleAgainBet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleAgainBet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleAgainBet& SingleAgainBet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleAgainBet_Roulette_2eproto.base);
  return *internal_default_instance();
}


void SingleAgainBet::Clear() {
// @@protoc_insertion_point(message_clear_start:Roulette.SingleAgainBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&index_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleAgainBet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 area = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleAgainBet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Roulette.SingleAgainBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 area = 2;
  if (this->area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_area(), target);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Roulette.SingleAgainBet)
  return target;
}

size_t SingleAgainBet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Roulette.SingleAgainBet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // int32 area = 2;
  if (this->area() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_area());
  }

  // int32 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleAgainBet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Roulette.SingleAgainBet)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleAgainBet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleAgainBet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Roulette.SingleAgainBet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Roulette.SingleAgainBet)
    MergeFrom(*source);
  }
}

void SingleAgainBet::MergeFrom(const SingleAgainBet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Roulette.SingleAgainBet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.area() != 0) {
    _internal_set_area(from._internal_area());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void SingleAgainBet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Roulette.SingleAgainBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleAgainBet::CopyFrom(const SingleAgainBet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Roulette.SingleAgainBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleAgainBet::IsInitialized() const {
  return true;
}

void SingleAgainBet::InternalSwap(SingleAgainBet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleAgainBet, count_)
      + sizeof(SingleAgainBet::count_)
      - PROTOBUF_FIELD_OFFSET(SingleAgainBet, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleAgainBet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AgainBet::_Internal {
 public:
};

AgainBet::AgainBet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  again_bet_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Roulette.AgainBet)
}
AgainBet::AgainBet(const AgainBet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      again_bet_info_(from.again_bet_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Roulette.AgainBet)
}

void AgainBet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AgainBet_Roulette_2eproto.base);
}

AgainBet::~AgainBet() {
  // @@protoc_insertion_point(destructor:Roulette.AgainBet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AgainBet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AgainBet::ArenaDtor(void* object) {
  AgainBet* _this = reinterpret_cast< AgainBet* >(object);
  (void)_this;
}
void AgainBet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AgainBet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AgainBet& AgainBet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AgainBet_Roulette_2eproto.base);
  return *internal_default_instance();
}


void AgainBet::Clear() {
// @@protoc_insertion_point(message_clear_start:Roulette.AgainBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  again_bet_info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgainBet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Roulette.SingleAgainBet again_bet_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_again_bet_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AgainBet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Roulette.AgainBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Roulette.SingleAgainBet again_bet_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_again_bet_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_again_bet_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Roulette.AgainBet)
  return target;
}

size_t AgainBet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Roulette.AgainBet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Roulette.SingleAgainBet again_bet_info = 1;
  total_size += 1UL * this->_internal_again_bet_info_size();
  for (const auto& msg : this->again_bet_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AgainBet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Roulette.AgainBet)
  GOOGLE_DCHECK_NE(&from, this);
  const AgainBet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AgainBet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Roulette.AgainBet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Roulette.AgainBet)
    MergeFrom(*source);
  }
}

void AgainBet::MergeFrom(const AgainBet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Roulette.AgainBet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  again_bet_info_.MergeFrom(from.again_bet_info_);
}

void AgainBet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Roulette.AgainBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgainBet::CopyFrom(const AgainBet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Roulette.AgainBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgainBet::IsInitialized() const {
  return true;
}

void AgainBet::InternalSwap(AgainBet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  again_bet_info_.InternalSwap(&other->again_bet_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AgainBet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgAgainBetResp::_Internal {
 public:
  static const ::Roulette::AgainBet& again_bet_info(const MsgAgainBetResp* msg);
};

const ::Roulette::AgainBet&
MsgAgainBetResp::_Internal::again_bet_info(const MsgAgainBetResp* msg) {
  return *msg->again_bet_info_;
}
MsgAgainBetResp::MsgAgainBetResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Roulette.MsgAgainBetResp)
}
MsgAgainBetResp::MsgAgainBetResp(const MsgAgainBetResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_again_bet_info()) {
    again_bet_info_ = new ::Roulette::AgainBet(*from.again_bet_info_);
  } else {
    again_bet_info_ = nullptr;
  }
  chair_id_ = from.chair_id_;
  // @@protoc_insertion_point(copy_constructor:Roulette.MsgAgainBetResp)
}

void MsgAgainBetResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgAgainBetResp_Roulette_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&again_bet_info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&again_bet_info_)) + sizeof(chair_id_));
}

MsgAgainBetResp::~MsgAgainBetResp() {
  // @@protoc_insertion_point(destructor:Roulette.MsgAgainBetResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgAgainBetResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete again_bet_info_;
}

void MsgAgainBetResp::ArenaDtor(void* object) {
  MsgAgainBetResp* _this = reinterpret_cast< MsgAgainBetResp* >(object);
  (void)_this;
}
void MsgAgainBetResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgAgainBetResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgAgainBetResp& MsgAgainBetResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgAgainBetResp_Roulette_2eproto.base);
  return *internal_default_instance();
}


void MsgAgainBetResp::Clear() {
// @@protoc_insertion_point(message_clear_start:Roulette.MsgAgainBetResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && again_bet_info_ != nullptr) {
    delete again_bet_info_;
  }
  again_bet_info_ = nullptr;
  chair_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgAgainBetResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Roulette.AgainBet again_bet_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_again_bet_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgAgainBetResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Roulette.MsgAgainBetResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // .Roulette.AgainBet again_bet_info = 2;
  if (this->has_again_bet_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::again_bet_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Roulette.MsgAgainBetResp)
  return target;
}

size_t MsgAgainBetResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Roulette.MsgAgainBetResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Roulette.AgainBet again_bet_info = 2;
  if (this->has_again_bet_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *again_bet_info_);
  }

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgAgainBetResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Roulette.MsgAgainBetResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgAgainBetResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgAgainBetResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Roulette.MsgAgainBetResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Roulette.MsgAgainBetResp)
    MergeFrom(*source);
  }
}

void MsgAgainBetResp::MergeFrom(const MsgAgainBetResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Roulette.MsgAgainBetResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_again_bet_info()) {
    _internal_mutable_again_bet_info()->::Roulette::AgainBet::MergeFrom(from._internal_again_bet_info());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
}

void MsgAgainBetResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Roulette.MsgAgainBetResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAgainBetResp::CopyFrom(const MsgAgainBetResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Roulette.MsgAgainBetResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAgainBetResp::IsInitialized() const {
  return true;
}

void MsgAgainBetResp::InternalSwap(MsgAgainBetResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgAgainBetResp, chair_id_)
      + sizeof(MsgAgainBetResp::chair_id_)
      - PROTOBUF_FIELD_OFFSET(MsgAgainBetResp, again_bet_info_)>(
          reinterpret_cast<char*>(&again_bet_info_),
          reinterpret_cast<char*>(&other->again_bet_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgAgainBetResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RevocationBet::_Internal {
 public:
};

RevocationBet::RevocationBet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Roulette.RevocationBet)
}
RevocationBet::RevocationBet(const RevocationBet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&revocation_state_, &from.revocation_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&bet_index_) -
    reinterpret_cast<char*>(&revocation_state_)) + sizeof(bet_index_));
  // @@protoc_insertion_point(copy_constructor:Roulette.RevocationBet)
}

void RevocationBet::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&revocation_state_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bet_index_) -
      reinterpret_cast<char*>(&revocation_state_)) + sizeof(bet_index_));
}

RevocationBet::~RevocationBet() {
  // @@protoc_insertion_point(destructor:Roulette.RevocationBet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RevocationBet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RevocationBet::ArenaDtor(void* object) {
  RevocationBet* _this = reinterpret_cast< RevocationBet* >(object);
  (void)_this;
}
void RevocationBet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RevocationBet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RevocationBet& RevocationBet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RevocationBet_Roulette_2eproto.base);
  return *internal_default_instance();
}


void RevocationBet::Clear() {
// @@protoc_insertion_point(message_clear_start:Roulette.RevocationBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&revocation_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bet_index_) -
      reinterpret_cast<char*>(&revocation_state_)) + sizeof(bet_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RevocationBet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 revocation_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          revocation_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bet_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bet_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RevocationBet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Roulette.RevocationBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 revocation_state = 1;
  if (this->revocation_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_revocation_state(), target);
  }

  // int32 bet_index = 2;
  if (this->bet_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bet_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Roulette.RevocationBet)
  return target;
}

size_t RevocationBet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Roulette.RevocationBet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 revocation_state = 1;
  if (this->revocation_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_revocation_state());
  }

  // int32 bet_index = 2;
  if (this->bet_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bet_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RevocationBet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Roulette.RevocationBet)
  GOOGLE_DCHECK_NE(&from, this);
  const RevocationBet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RevocationBet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Roulette.RevocationBet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Roulette.RevocationBet)
    MergeFrom(*source);
  }
}

void RevocationBet::MergeFrom(const RevocationBet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Roulette.RevocationBet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.revocation_state() != 0) {
    _internal_set_revocation_state(from._internal_revocation_state());
  }
  if (from.bet_index() != 0) {
    _internal_set_bet_index(from._internal_bet_index());
  }
}

void RevocationBet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Roulette.RevocationBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RevocationBet::CopyFrom(const RevocationBet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Roulette.RevocationBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevocationBet::IsInitialized() const {
  return true;
}

void RevocationBet::InternalSwap(RevocationBet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RevocationBet, bet_index_)
      + sizeof(RevocationBet::bet_index_)
      - PROTOBUF_FIELD_OFFSET(RevocationBet, revocation_state_)>(
          reinterpret_cast<char*>(&revocation_state_),
          reinterpret_cast<char*>(&other->revocation_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RevocationBet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WinMsg::_Internal {
 public:
};

WinMsg::WinMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Roulette.WinMsg)
}
WinMsg::WinMsg(const WinMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gold_, &from.gold_,
    static_cast<size_t>(reinterpret_cast<char*>(&chair_id_) -
    reinterpret_cast<char*>(&gold_)) + sizeof(chair_id_));
  // @@protoc_insertion_point(copy_constructor:Roulette.WinMsg)
}

void WinMsg::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gold_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&gold_)) + sizeof(chair_id_));
}

WinMsg::~WinMsg() {
  // @@protoc_insertion_point(destructor:Roulette.WinMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WinMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WinMsg::ArenaDtor(void* object) {
  WinMsg* _this = reinterpret_cast< WinMsg* >(object);
  (void)_this;
}
void WinMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WinMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WinMsg& WinMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WinMsg_Roulette_2eproto.base);
  return *internal_default_instance();
}


void WinMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:Roulette.WinMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&gold_)) + sizeof(chair_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WinMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WinMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Roulette.WinMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int64 gold = 2;
  if (this->gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Roulette.WinMsg)
  return target;
}

size_t WinMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Roulette.WinMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 gold = 2;
  if (this->gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_gold());
  }

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WinMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Roulette.WinMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const WinMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WinMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Roulette.WinMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Roulette.WinMsg)
    MergeFrom(*source);
  }
}

void WinMsg::MergeFrom(const WinMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Roulette.WinMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
}

void WinMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Roulette.WinMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WinMsg::CopyFrom(const WinMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Roulette.WinMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WinMsg::IsInitialized() const {
  return true;
}

void WinMsg::InternalSwap(WinMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WinMsg, chair_id_)
      + sizeof(WinMsg::chair_id_)
      - PROTOBUF_FIELD_OFFSET(WinMsg, gold_)>(
          reinterpret_cast<char*>(&gold_),
          reinterpret_cast<char*>(&other->gold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WinMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgGmaeResult::_Internal {
 public:
};

MsgGmaeResult::MsgGmaeResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  win_msg_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Roulette.MsgGmaeResult)
}
MsgGmaeResult::MsgGmaeResult(const MsgGmaeResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      win_msg_(from.win_msg_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_num_ = from.result_num_;
  // @@protoc_insertion_point(copy_constructor:Roulette.MsgGmaeResult)
}

void MsgGmaeResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgGmaeResult_Roulette_2eproto.base);
  result_num_ = 0;
}

MsgGmaeResult::~MsgGmaeResult() {
  // @@protoc_insertion_point(destructor:Roulette.MsgGmaeResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgGmaeResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgGmaeResult::ArenaDtor(void* object) {
  MsgGmaeResult* _this = reinterpret_cast< MsgGmaeResult* >(object);
  (void)_this;
}
void MsgGmaeResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgGmaeResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgGmaeResult& MsgGmaeResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgGmaeResult_Roulette_2eproto.base);
  return *internal_default_instance();
}


void MsgGmaeResult::Clear() {
// @@protoc_insertion_point(message_clear_start:Roulette.MsgGmaeResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  win_msg_.Clear();
  result_num_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgGmaeResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Roulette.WinMsg win_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_win_msg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgGmaeResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Roulette.MsgGmaeResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result_num = 1;
  if (this->result_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result_num(), target);
  }

  // repeated .Roulette.WinMsg win_msg = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_win_msg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_win_msg(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Roulette.MsgGmaeResult)
  return target;
}

size_t MsgGmaeResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Roulette.MsgGmaeResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Roulette.WinMsg win_msg = 2;
  total_size += 1UL * this->_internal_win_msg_size();
  for (const auto& msg : this->win_msg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 result_num = 1;
  if (this->result_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgGmaeResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Roulette.MsgGmaeResult)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgGmaeResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgGmaeResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Roulette.MsgGmaeResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Roulette.MsgGmaeResult)
    MergeFrom(*source);
  }
}

void MsgGmaeResult::MergeFrom(const MsgGmaeResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Roulette.MsgGmaeResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  win_msg_.MergeFrom(from.win_msg_);
  if (from.result_num() != 0) {
    _internal_set_result_num(from._internal_result_num());
  }
}

void MsgGmaeResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Roulette.MsgGmaeResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGmaeResult::CopyFrom(const MsgGmaeResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Roulette.MsgGmaeResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGmaeResult::IsInitialized() const {
  return true;
}

void MsgGmaeResult::InternalSwap(MsgGmaeResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  win_msg_.InternalSwap(&other->win_msg_);
  swap(result_num_, other->result_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgGmaeResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Roulette
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Roulette::GmaeALLRecord* Arena::CreateMaybeMessage< ::Roulette::GmaeALLRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Roulette::GmaeALLRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::Roulette::BettonArea* Arena::CreateMaybeMessage< ::Roulette::BettonArea >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Roulette::BettonArea >(arena);
}
template<> PROTOBUF_NOINLINE ::Roulette::UserInfo* Arena::CreateMaybeMessage< ::Roulette::UserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Roulette::UserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Roulette::GmaeConfg* Arena::CreateMaybeMessage< ::Roulette::GmaeConfg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Roulette::GmaeConfg >(arena);
}
template<> PROTOBUF_NOINLINE ::Roulette::GameState* Arena::CreateMaybeMessage< ::Roulette::GameState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Roulette::GameState >(arena);
}
template<> PROTOBUF_NOINLINE ::Roulette::MsgSceneInfo* Arena::CreateMaybeMessage< ::Roulette::MsgSceneInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Roulette::MsgSceneInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Roulette::MsgBet* Arena::CreateMaybeMessage< ::Roulette::MsgBet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Roulette::MsgBet >(arena);
}
template<> PROTOBUF_NOINLINE ::Roulette::MsgBetResp* Arena::CreateMaybeMessage< ::Roulette::MsgBetResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Roulette::MsgBetResp >(arena);
}
template<> PROTOBUF_NOINLINE ::Roulette::SingleAgainBet* Arena::CreateMaybeMessage< ::Roulette::SingleAgainBet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Roulette::SingleAgainBet >(arena);
}
template<> PROTOBUF_NOINLINE ::Roulette::AgainBet* Arena::CreateMaybeMessage< ::Roulette::AgainBet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Roulette::AgainBet >(arena);
}
template<> PROTOBUF_NOINLINE ::Roulette::MsgAgainBetResp* Arena::CreateMaybeMessage< ::Roulette::MsgAgainBetResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Roulette::MsgAgainBetResp >(arena);
}
template<> PROTOBUF_NOINLINE ::Roulette::RevocationBet* Arena::CreateMaybeMessage< ::Roulette::RevocationBet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Roulette::RevocationBet >(arena);
}
template<> PROTOBUF_NOINLINE ::Roulette::WinMsg* Arena::CreateMaybeMessage< ::Roulette::WinMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Roulette::WinMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::Roulette::MsgGmaeResult* Arena::CreateMaybeMessage< ::Roulette::MsgGmaeResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Roulette::MsgGmaeResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
