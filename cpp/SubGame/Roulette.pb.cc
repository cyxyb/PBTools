// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Roulette.proto

#include "Roulette.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Roulette_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BetInfo_Roulette_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Roulette_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BettonArea_Roulette_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Roulette_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameALLRecord_Roulette_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Roulette_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameConfg_Roulette_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Roulette_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameState_Roulette_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Roulette_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgAgainBet_Roulette_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Roulette_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgBet_Roulette_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Roulette_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SingleAgainBet_Roulette_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Roulette_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserBetRecord_Roulette_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Roulette_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserInfo_Roulette_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Roulette_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WinMsg_Roulette_2eproto;
namespace Roulette {
class GameALLRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameALLRecord> _instance;
} _GameALLRecord_default_instance_;
class BettonAreaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BettonArea> _instance;
} _BettonArea_default_instance_;
class UserInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserInfo> _instance;
} _UserInfo_default_instance_;
class GameConfgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameConfg> _instance;
} _GameConfg_default_instance_;
class GameStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameState> _instance;
} _GameState_default_instance_;
class UserBetRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserBetRecord> _instance;
} _UserBetRecord_default_instance_;
class MsgSceneInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgSceneInfo> _instance;
} _MsgSceneInfo_default_instance_;
class BetInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BetInfo> _instance;
} _BetInfo_default_instance_;
class MsgBetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgBet> _instance;
} _MsgBet_default_instance_;
class MsgBetRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgBetResp> _instance;
} _MsgBetResp_default_instance_;
class SingleAgainBetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleAgainBet> _instance;
} _SingleAgainBet_default_instance_;
class MsgAgainBetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgAgainBet> _instance;
} _MsgAgainBet_default_instance_;
class MsgAgainBetRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgAgainBetResp> _instance;
} _MsgAgainBetResp_default_instance_;
class RevocationBetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RevocationBet> _instance;
} _RevocationBet_default_instance_;
class WinMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WinMsg> _instance;
} _WinMsg_default_instance_;
class MsgGameResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgGameResult> _instance;
} _MsgGameResult_default_instance_;
}  // namespace Roulette
static void InitDefaultsscc_info_BetInfo_Roulette_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Roulette::_BetInfo_default_instance_;
    new (ptr) ::Roulette::BetInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BetInfo_Roulette_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BetInfo_Roulette_2eproto}, {}};

static void InitDefaultsscc_info_BettonArea_Roulette_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Roulette::_BettonArea_default_instance_;
    new (ptr) ::Roulette::BettonArea();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BettonArea_Roulette_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BettonArea_Roulette_2eproto}, {}};

static void InitDefaultsscc_info_GameALLRecord_Roulette_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Roulette::_GameALLRecord_default_instance_;
    new (ptr) ::Roulette::GameALLRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameALLRecord_Roulette_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameALLRecord_Roulette_2eproto}, {}};

static void InitDefaultsscc_info_GameConfg_Roulette_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Roulette::_GameConfg_default_instance_;
    new (ptr) ::Roulette::GameConfg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameConfg_Roulette_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameConfg_Roulette_2eproto}, {
      &scc_info_BettonArea_Roulette_2eproto.base,}};

static void InitDefaultsscc_info_GameState_Roulette_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Roulette::_GameState_default_instance_;
    new (ptr) ::Roulette::GameState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameState_Roulette_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameState_Roulette_2eproto}, {}};

static void InitDefaultsscc_info_MsgAgainBet_Roulette_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Roulette::_MsgAgainBet_default_instance_;
    new (ptr) ::Roulette::MsgAgainBet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgAgainBet_Roulette_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgAgainBet_Roulette_2eproto}, {
      &scc_info_SingleAgainBet_Roulette_2eproto.base,}};

static void InitDefaultsscc_info_MsgAgainBetResp_Roulette_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Roulette::_MsgAgainBetResp_default_instance_;
    new (ptr) ::Roulette::MsgAgainBetResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgAgainBetResp_Roulette_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgAgainBetResp_Roulette_2eproto}, {
      &scc_info_MsgAgainBet_Roulette_2eproto.base,}};

static void InitDefaultsscc_info_MsgBet_Roulette_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Roulette::_MsgBet_default_instance_;
    new (ptr) ::Roulette::MsgBet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgBet_Roulette_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgBet_Roulette_2eproto}, {
      &scc_info_BetInfo_Roulette_2eproto.base,}};

static void InitDefaultsscc_info_MsgBetResp_Roulette_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Roulette::_MsgBetResp_default_instance_;
    new (ptr) ::Roulette::MsgBetResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgBetResp_Roulette_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgBetResp_Roulette_2eproto}, {
      &scc_info_MsgBet_Roulette_2eproto.base,}};

static void InitDefaultsscc_info_MsgGameResult_Roulette_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Roulette::_MsgGameResult_default_instance_;
    new (ptr) ::Roulette::MsgGameResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgGameResult_Roulette_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgGameResult_Roulette_2eproto}, {
      &scc_info_WinMsg_Roulette_2eproto.base,}};

static void InitDefaultsscc_info_MsgSceneInfo_Roulette_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Roulette::_MsgSceneInfo_default_instance_;
    new (ptr) ::Roulette::MsgSceneInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_MsgSceneInfo_Roulette_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_MsgSceneInfo_Roulette_2eproto}, {
      &scc_info_GameConfg_Roulette_2eproto.base,
      &scc_info_GameALLRecord_Roulette_2eproto.base,
      &scc_info_GameState_Roulette_2eproto.base,
      &scc_info_UserBetRecord_Roulette_2eproto.base,
      &scc_info_UserInfo_Roulette_2eproto.base,}};

static void InitDefaultsscc_info_RevocationBet_Roulette_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Roulette::_RevocationBet_default_instance_;
    new (ptr) ::Roulette::RevocationBet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RevocationBet_Roulette_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RevocationBet_Roulette_2eproto}, {}};

static void InitDefaultsscc_info_SingleAgainBet_Roulette_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Roulette::_SingleAgainBet_default_instance_;
    new (ptr) ::Roulette::SingleAgainBet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SingleAgainBet_Roulette_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SingleAgainBet_Roulette_2eproto}, {}};

static void InitDefaultsscc_info_UserBetRecord_Roulette_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Roulette::_UserBetRecord_default_instance_;
    new (ptr) ::Roulette::UserBetRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserBetRecord_Roulette_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserBetRecord_Roulette_2eproto}, {}};

static void InitDefaultsscc_info_UserInfo_Roulette_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Roulette::_UserInfo_default_instance_;
    new (ptr) ::Roulette::UserInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserInfo_Roulette_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserInfo_Roulette_2eproto}, {}};

static void InitDefaultsscc_info_WinMsg_Roulette_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Roulette::_WinMsg_default_instance_;
    new (ptr) ::Roulette::WinMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WinMsg_Roulette_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WinMsg_Roulette_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Roulette_2eproto[16];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Roulette_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Roulette_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Roulette_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Roulette::GameALLRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Roulette::GameALLRecord, black_num_),
  PROTOBUF_FIELD_OFFSET(::Roulette::GameALLRecord, red_num_),
  PROTOBUF_FIELD_OFFSET(::Roulette::GameALLRecord, even_num_),
  PROTOBUF_FIELD_OFFSET(::Roulette::GameALLRecord, odd_num_),
  PROTOBUF_FIELD_OFFSET(::Roulette::GameALLRecord, big_num_),
  PROTOBUF_FIELD_OFFSET(::Roulette::GameALLRecord, small_num_),
  PROTOBUF_FIELD_OFFSET(::Roulette::GameALLRecord, zero_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Roulette::BettonArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Roulette::BettonArea, area_cfg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Roulette::UserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Roulette::UserInfo, total_bet_),
  PROTOBUF_FIELD_OFFSET(::Roulette::UserInfo, total_win_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Roulette::GameConfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Roulette::GameConfg, bet_),
  PROTOBUF_FIELD_OFFSET(::Roulette::GameConfg, bet_limit_min_),
  PROTOBUF_FIELD_OFFSET(::Roulette::GameConfg, bet_limit_max_),
  PROTOBUF_FIELD_OFFSET(::Roulette::GameConfg, bet_area_cfg_),
  PROTOBUF_FIELD_OFFSET(::Roulette::GameConfg, multiple_cfg_),
  PROTOBUF_FIELD_OFFSET(::Roulette::GameConfg, times_),
  PROTOBUF_FIELD_OFFSET(::Roulette::GameConfg, limit_total_bet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Roulette::GameState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Roulette::GameState, game_state_),
  PROTOBUF_FIELD_OFFSET(::Roulette::GameState, times_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Roulette::UserBetRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Roulette::UserBetRecord, bet_area_),
  PROTOBUF_FIELD_OFFSET(::Roulette::UserBetRecord, bet_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgSceneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgSceneInfo, game_cfg_),
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgSceneInfo, game_record_),
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgSceneInfo, all_record_),
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgSceneInfo, game_state_),
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgSceneInfo, total_bet_),
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgSceneInfo, user_top_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Roulette::BetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Roulette::BetInfo, index_),
  PROTOBUF_FIELD_OFFSET(::Roulette::BetInfo, area_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgBet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgBet, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgBetResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgBetResp, chair_id_),
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgBetResp, bet_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Roulette::SingleAgainBet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Roulette::SingleAgainBet, index_),
  PROTOBUF_FIELD_OFFSET(::Roulette::SingleAgainBet, area_),
  PROTOBUF_FIELD_OFFSET(::Roulette::SingleAgainBet, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgAgainBet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgAgainBet, again_bet_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgAgainBetResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgAgainBetResp, chair_id_),
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgAgainBetResp, again_bet_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Roulette::RevocationBet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Roulette::RevocationBet, revocation_gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Roulette::WinMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Roulette::WinMsg, chair_id_),
  PROTOBUF_FIELD_OFFSET(::Roulette::WinMsg, gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgGameResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgGameResult, result_num_),
  PROTOBUF_FIELD_OFFSET(::Roulette::MsgGameResult, win_msg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Roulette::GameALLRecord)},
  { 12, -1, sizeof(::Roulette::BettonArea)},
  { 18, -1, sizeof(::Roulette::UserInfo)},
  { 25, -1, sizeof(::Roulette::GameConfg)},
  { 37, -1, sizeof(::Roulette::GameState)},
  { 44, -1, sizeof(::Roulette::UserBetRecord)},
  { 51, -1, sizeof(::Roulette::MsgSceneInfo)},
  { 62, -1, sizeof(::Roulette::BetInfo)},
  { 69, -1, sizeof(::Roulette::MsgBet)},
  { 75, -1, sizeof(::Roulette::MsgBetResp)},
  { 82, -1, sizeof(::Roulette::SingleAgainBet)},
  { 90, -1, sizeof(::Roulette::MsgAgainBet)},
  { 96, -1, sizeof(::Roulette::MsgAgainBetResp)},
  { 103, -1, sizeof(::Roulette::RevocationBet)},
  { 109, -1, sizeof(::Roulette::WinMsg)},
  { 116, -1, sizeof(::Roulette::MsgGameResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Roulette::_GameALLRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Roulette::_BettonArea_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Roulette::_UserInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Roulette::_GameConfg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Roulette::_GameState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Roulette::_UserBetRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Roulette::_MsgSceneInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Roulette::_BetInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Roulette::_MsgBet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Roulette::_MsgBetResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Roulette::_SingleAgainBet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Roulette::_MsgAgainBet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Roulette::_MsgAgainBetResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Roulette::_RevocationBet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Roulette::_WinMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Roulette::_MsgGameResult_default_instance_),
};

const char descriptor_table_protodef_Roulette_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Roulette.proto\022\010Roulette\"\214\001\n\rGameALLRe"
  "cord\022\021\n\tblack_num\030\001 \001(\005\022\017\n\007red_num\030\002 \001(\005"
  "\022\020\n\010even_num\030\003 \001(\005\022\017\n\007odd_num\030\004 \001(\005\022\017\n\007b"
  "ig_num\030\005 \001(\005\022\021\n\tsmall_num\030\006 \001(\005\022\020\n\010zero_"
  "num\030\007 \001(\005\"\036\n\nBettonArea\022\020\n\010area_cfg\030\001 \003("
  "\005\"0\n\010UserInfo\022\021\n\ttotal_bet\030\001 \001(\003\022\021\n\ttota"
  "l_win\030\002 \001(\003\"\260\001\n\tGameConfg\022\013\n\003bet\030\001 \003(\005\022\025"
  "\n\rbet_limit_min\030\002 \003(\005\022\025\n\rbet_limit_max\030\003"
  " \003(\005\022*\n\014bet_area_cfg\030\004 \003(\0132\024.Roulette.Be"
  "ttonArea\022\024\n\014multiple_cfg\030\005 \003(\005\022\r\n\005times\030"
  "\006 \003(\005\022\027\n\017limit_total_bet\030\007 \001(\003\".\n\tGameSt"
  "ate\022\022\n\ngame_state\030\001 \001(\005\022\r\n\005times\030\002 \001(\005\"4"
  "\n\rUserBetRecord\022\020\n\010bet_area\030\001 \001(\005\022\021\n\tbet"
  "_value\030\002 \001(\003\"\362\001\n\014MsgSceneInfo\022%\n\010game_cf"
  "g\030\001 \001(\0132\023.Roulette.GameConfg\022\023\n\013game_rec"
  "ord\030\002 \003(\005\022+\n\nall_record\030\003 \001(\0132\027.Roulette"
  ".GameALLRecord\022\'\n\ngame_state\030\004 \001(\0132\023.Rou"
  "lette.GameState\022*\n\ttotal_bet\030\005 \003(\0132\027.Rou"
  "lette.UserBetRecord\022$\n\010user_top\030\006 \003(\0132\022."
  "Roulette.UserInfo\"&\n\007BetInfo\022\r\n\005index\030\001 "
  "\001(\005\022\014\n\004area\030\002 \001(\005\")\n\006MsgBet\022\037\n\004info\030\001 \003("
  "\0132\021.Roulette.BetInfo\"B\n\nMsgBetResp\022\020\n\010ch"
  "air_id\030\001 \001(\005\022\"\n\010bet_info\030\002 \001(\0132\020.Roulett"
  "e.MsgBet\"<\n\016SingleAgainBet\022\r\n\005index\030\001 \001("
  "\005\022\014\n\004area\030\002 \001(\005\022\r\n\005count\030\003 \001(\005\"\?\n\013MsgAga"
  "inBet\0220\n\016again_bet_info\030\001 \003(\0132\030.Roulette"
  ".SingleAgainBet\"R\n\017MsgAgainBetResp\022\020\n\010ch"
  "air_id\030\001 \001(\005\022-\n\016again_bet_info\030\002 \001(\0132\025.R"
  "oulette.MsgAgainBet\"(\n\rRevocationBet\022\027\n\017"
  "revocation_gold\030\001 \003(\005\"(\n\006WinMsg\022\020\n\010chair"
  "_id\030\001 \001(\005\022\014\n\004gold\030\002 \001(\003\"F\n\rMsgGameResult"
  "\022\022\n\nresult_num\030\001 \001(\005\022!\n\007win_msg\030\002 \003(\0132\020."
  "Roulette.WinMsg*\360\001\n\016EMsgIDRoulette\022\027\n\023Ms"
  "gID_SC_GameRecord\020\000\022\027\n\023MsgID_SC_GameBott"
  "om\020\001\022\031\n\025MsgID_SC_BottomCancel\020\002\022\025\n\021MsgID"
  "_SC_AgainBet\020\003\022\027\n\023MsgID_SC_GameResult\020\004\022"
  "\026\n\022MsgID_SC_GameState\020\005\022\027\n\023MsgID_CS_Game"
  "Bottom\020\006\022\031\n\025MsgID_CS_BottomCancel\020\007\022\025\n\021M"
  "sgID_CS_AgainBet\020\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Roulette_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Roulette_2eproto_sccs[16] = {
  &scc_info_BetInfo_Roulette_2eproto.base,
  &scc_info_BettonArea_Roulette_2eproto.base,
  &scc_info_GameALLRecord_Roulette_2eproto.base,
  &scc_info_GameConfg_Roulette_2eproto.base,
  &scc_info_GameState_Roulette_2eproto.base,
  &scc_info_MsgAgainBet_Roulette_2eproto.base,
  &scc_info_MsgAgainBetResp_Roulette_2eproto.base,
  &scc_info_MsgBet_Roulette_2eproto.base,
  &scc_info_MsgBetResp_Roulette_2eproto.base,
  &scc_info_MsgGameResult_Roulette_2eproto.base,
  &scc_info_MsgSceneInfo_Roulette_2eproto.base,
  &scc_info_RevocationBet_Roulette_2eproto.base,
  &scc_info_SingleAgainBet_Roulette_2eproto.base,
  &scc_info_UserBetRecord_Roulette_2eproto.base,
  &scc_info_UserInfo_Roulette_2eproto.base,
  &scc_info_WinMsg_Roulette_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Roulette_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Roulette_2eproto = {
  false, false, descriptor_table_protodef_Roulette_2eproto, "Roulette.proto", 1546,
  &descriptor_table_Roulette_2eproto_once, descriptor_table_Roulette_2eproto_sccs, descriptor_table_Roulette_2eproto_deps, 16, 0,
  schemas, file_default_instances, TableStruct_Roulette_2eproto::offsets,
  file_level_metadata_Roulette_2eproto, 16, file_level_enum_descriptors_Roulette_2eproto, file_level_service_descriptors_Roulette_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Roulette_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Roulette_2eproto)), true);
namespace Roulette {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDRoulette_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Roulette_2eproto);
  return file_level_enum_descriptors_Roulette_2eproto[0];
}
bool EMsgIDRoulette_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class GameALLRecord::_Internal {
 public:
};

GameALLRecord::GameALLRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Roulette.GameALLRecord)
}
GameALLRecord::GameALLRecord(const GameALLRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&black_num_, &from.black_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&zero_num_) -
    reinterpret_cast<char*>(&black_num_)) + sizeof(zero_num_));
  // @@protoc_insertion_point(copy_constructor:Roulette.GameALLRecord)
}

void GameALLRecord::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&black_num_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&zero_num_) -
      reinterpret_cast<char*>(&black_num_)) + sizeof(zero_num_));
}

GameALLRecord::~GameALLRecord() {
  // @@protoc_insertion_point(destructor:Roulette.GameALLRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameALLRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameALLRecord::ArenaDtor(void* object) {
  GameALLRecord* _this = reinterpret_cast< GameALLRecord* >(object);
  (void)_this;
}
void GameALLRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameALLRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameALLRecord& GameALLRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameALLRecord_Roulette_2eproto.base);
  return *internal_default_instance();
}


void GameALLRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:Roulette.GameALLRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&black_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zero_num_) -
      reinterpret_cast<char*>(&black_num_)) + sizeof(zero_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameALLRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 black_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          black_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 red_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          red_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 even_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          even_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 odd_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          odd_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 big_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          big_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 small_num = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          small_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 zero_num = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          zero_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameALLRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Roulette.GameALLRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 black_num = 1;
  if (this->black_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_black_num(), target);
  }

  // int32 red_num = 2;
  if (this->red_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_red_num(), target);
  }

  // int32 even_num = 3;
  if (this->even_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_even_num(), target);
  }

  // int32 odd_num = 4;
  if (this->odd_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_odd_num(), target);
  }

  // int32 big_num = 5;
  if (this->big_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_big_num(), target);
  }

  // int32 small_num = 6;
  if (this->small_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_small_num(), target);
  }

  // int32 zero_num = 7;
  if (this->zero_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_zero_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Roulette.GameALLRecord)
  return target;
}

size_t GameALLRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Roulette.GameALLRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 black_num = 1;
  if (this->black_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_black_num());
  }

  // int32 red_num = 2;
  if (this->red_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_red_num());
  }

  // int32 even_num = 3;
  if (this->even_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_even_num());
  }

  // int32 odd_num = 4;
  if (this->odd_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_odd_num());
  }

  // int32 big_num = 5;
  if (this->big_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_big_num());
  }

  // int32 small_num = 6;
  if (this->small_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_small_num());
  }

  // int32 zero_num = 7;
  if (this->zero_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_zero_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameALLRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Roulette.GameALLRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const GameALLRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameALLRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Roulette.GameALLRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Roulette.GameALLRecord)
    MergeFrom(*source);
  }
}

void GameALLRecord::MergeFrom(const GameALLRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Roulette.GameALLRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.black_num() != 0) {
    _internal_set_black_num(from._internal_black_num());
  }
  if (from.red_num() != 0) {
    _internal_set_red_num(from._internal_red_num());
  }
  if (from.even_num() != 0) {
    _internal_set_even_num(from._internal_even_num());
  }
  if (from.odd_num() != 0) {
    _internal_set_odd_num(from._internal_odd_num());
  }
  if (from.big_num() != 0) {
    _internal_set_big_num(from._internal_big_num());
  }
  if (from.small_num() != 0) {
    _internal_set_small_num(from._internal_small_num());
  }
  if (from.zero_num() != 0) {
    _internal_set_zero_num(from._internal_zero_num());
  }
}

void GameALLRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Roulette.GameALLRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameALLRecord::CopyFrom(const GameALLRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Roulette.GameALLRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameALLRecord::IsInitialized() const {
  return true;
}

void GameALLRecord::InternalSwap(GameALLRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameALLRecord, zero_num_)
      + sizeof(GameALLRecord::zero_num_)
      - PROTOBUF_FIELD_OFFSET(GameALLRecord, black_num_)>(
          reinterpret_cast<char*>(&black_num_),
          reinterpret_cast<char*>(&other->black_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameALLRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BettonArea::_Internal {
 public:
};

BettonArea::BettonArea(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  area_cfg_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Roulette.BettonArea)
}
BettonArea::BettonArea(const BettonArea& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      area_cfg_(from.area_cfg_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Roulette.BettonArea)
}

void BettonArea::SharedCtor() {
}

BettonArea::~BettonArea() {
  // @@protoc_insertion_point(destructor:Roulette.BettonArea)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BettonArea::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BettonArea::ArenaDtor(void* object) {
  BettonArea* _this = reinterpret_cast< BettonArea* >(object);
  (void)_this;
}
void BettonArea::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BettonArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BettonArea& BettonArea::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BettonArea_Roulette_2eproto.base);
  return *internal_default_instance();
}


void BettonArea::Clear() {
// @@protoc_insertion_point(message_clear_start:Roulette.BettonArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  area_cfg_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BettonArea::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 area_cfg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_area_cfg(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_area_cfg(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BettonArea::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Roulette.BettonArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 area_cfg = 1;
  {
    int byte_size = _area_cfg_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_area_cfg(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Roulette.BettonArea)
  return target;
}

size_t BettonArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Roulette.BettonArea)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 area_cfg = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->area_cfg_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _area_cfg_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BettonArea::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Roulette.BettonArea)
  GOOGLE_DCHECK_NE(&from, this);
  const BettonArea* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BettonArea>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Roulette.BettonArea)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Roulette.BettonArea)
    MergeFrom(*source);
  }
}

void BettonArea::MergeFrom(const BettonArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Roulette.BettonArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  area_cfg_.MergeFrom(from.area_cfg_);
}

void BettonArea::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Roulette.BettonArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BettonArea::CopyFrom(const BettonArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Roulette.BettonArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BettonArea::IsInitialized() const {
  return true;
}

void BettonArea::InternalSwap(BettonArea* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  area_cfg_.InternalSwap(&other->area_cfg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BettonArea::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UserInfo::_Internal {
 public:
};

UserInfo::UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Roulette.UserInfo)
}
UserInfo::UserInfo(const UserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_bet_, &from.total_bet_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_win_) -
    reinterpret_cast<char*>(&total_bet_)) + sizeof(total_win_));
  // @@protoc_insertion_point(copy_constructor:Roulette.UserInfo)
}

void UserInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&total_bet_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&total_win_) -
      reinterpret_cast<char*>(&total_bet_)) + sizeof(total_win_));
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:Roulette.UserInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserInfo::ArenaDtor(void* object) {
  UserInfo* _this = reinterpret_cast< UserInfo* >(object);
  (void)_this;
}
void UserInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserInfo& UserInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserInfo_Roulette_2eproto.base);
  return *internal_default_instance();
}


void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Roulette.UserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&total_bet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_win_) -
      reinterpret_cast<char*>(&total_bet_)) + sizeof(total_win_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 total_bet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          total_bet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_win = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_win_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Roulette.UserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 total_bet = 1;
  if (this->total_bet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_total_bet(), target);
  }

  // int64 total_win = 2;
  if (this->total_win() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_total_win(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Roulette.UserInfo)
  return target;
}

size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Roulette.UserInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 total_bet = 1;
  if (this->total_bet() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_bet());
  }

  // int64 total_win = 2;
  if (this->total_win() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_win());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Roulette.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Roulette.UserInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Roulette.UserInfo)
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Roulette.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.total_bet() != 0) {
    _internal_set_total_bet(from._internal_total_bet());
  }
  if (from.total_win() != 0) {
    _internal_set_total_win(from._internal_total_win());
  }
}

void UserInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Roulette.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Roulette.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  return true;
}

void UserInfo::InternalSwap(UserInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserInfo, total_win_)
      + sizeof(UserInfo::total_win_)
      - PROTOBUF_FIELD_OFFSET(UserInfo, total_bet_)>(
          reinterpret_cast<char*>(&total_bet_),
          reinterpret_cast<char*>(&other->total_bet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GameConfg::_Internal {
 public:
};

GameConfg::GameConfg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bet_(arena),
  bet_limit_min_(arena),
  bet_limit_max_(arena),
  bet_area_cfg_(arena),
  multiple_cfg_(arena),
  times_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Roulette.GameConfg)
}
GameConfg::GameConfg(const GameConfg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bet_(from.bet_),
      bet_limit_min_(from.bet_limit_min_),
      bet_limit_max_(from.bet_limit_max_),
      bet_area_cfg_(from.bet_area_cfg_),
      multiple_cfg_(from.multiple_cfg_),
      times_(from.times_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  limit_total_bet_ = from.limit_total_bet_;
  // @@protoc_insertion_point(copy_constructor:Roulette.GameConfg)
}

void GameConfg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameConfg_Roulette_2eproto.base);
  limit_total_bet_ = PROTOBUF_LONGLONG(0);
}

GameConfg::~GameConfg() {
  // @@protoc_insertion_point(destructor:Roulette.GameConfg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameConfg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameConfg::ArenaDtor(void* object) {
  GameConfg* _this = reinterpret_cast< GameConfg* >(object);
  (void)_this;
}
void GameConfg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameConfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameConfg& GameConfg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameConfg_Roulette_2eproto.base);
  return *internal_default_instance();
}


void GameConfg::Clear() {
// @@protoc_insertion_point(message_clear_start:Roulette.GameConfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bet_.Clear();
  bet_limit_min_.Clear();
  bet_limit_max_.Clear();
  bet_area_cfg_.Clear();
  multiple_cfg_.Clear();
  times_.Clear();
  limit_total_bet_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameConfg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 bet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bet(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_bet(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 bet_limit_min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bet_limit_min(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_bet_limit_min(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 bet_limit_max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bet_limit_max(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_bet_limit_max(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Roulette.BettonArea bet_area_cfg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bet_area_cfg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 multiple_cfg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_multiple_cfg(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_multiple_cfg(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 times = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_times(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_times(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 limit_total_bet = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          limit_total_bet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameConfg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Roulette.GameConfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 bet = 1;
  {
    int byte_size = _bet_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_bet(), byte_size, target);
    }
  }

  // repeated int32 bet_limit_min = 2;
  {
    int byte_size = _bet_limit_min_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_bet_limit_min(), byte_size, target);
    }
  }

  // repeated int32 bet_limit_max = 3;
  {
    int byte_size = _bet_limit_max_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_bet_limit_max(), byte_size, target);
    }
  }

  // repeated .Roulette.BettonArea bet_area_cfg = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bet_area_cfg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_bet_area_cfg(i), target, stream);
  }

  // repeated int32 multiple_cfg = 5;
  {
    int byte_size = _multiple_cfg_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_multiple_cfg(), byte_size, target);
    }
  }

  // repeated int32 times = 6;
  {
    int byte_size = _times_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_times(), byte_size, target);
    }
  }

  // int64 limit_total_bet = 7;
  if (this->limit_total_bet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_limit_total_bet(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Roulette.GameConfg)
  return target;
}

size_t GameConfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Roulette.GameConfg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 bet = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bet_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bet_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 bet_limit_min = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bet_limit_min_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bet_limit_min_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 bet_limit_max = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bet_limit_max_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bet_limit_max_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .Roulette.BettonArea bet_area_cfg = 4;
  total_size += 1UL * this->_internal_bet_area_cfg_size();
  for (const auto& msg : this->bet_area_cfg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 multiple_cfg = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->multiple_cfg_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _multiple_cfg_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 times = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->times_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _times_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 limit_total_bet = 7;
  if (this->limit_total_bet() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_limit_total_bet());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameConfg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Roulette.GameConfg)
  GOOGLE_DCHECK_NE(&from, this);
  const GameConfg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameConfg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Roulette.GameConfg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Roulette.GameConfg)
    MergeFrom(*source);
  }
}

void GameConfg::MergeFrom(const GameConfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Roulette.GameConfg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bet_.MergeFrom(from.bet_);
  bet_limit_min_.MergeFrom(from.bet_limit_min_);
  bet_limit_max_.MergeFrom(from.bet_limit_max_);
  bet_area_cfg_.MergeFrom(from.bet_area_cfg_);
  multiple_cfg_.MergeFrom(from.multiple_cfg_);
  times_.MergeFrom(from.times_);
  if (from.limit_total_bet() != 0) {
    _internal_set_limit_total_bet(from._internal_limit_total_bet());
  }
}

void GameConfg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Roulette.GameConfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameConfg::CopyFrom(const GameConfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Roulette.GameConfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameConfg::IsInitialized() const {
  return true;
}

void GameConfg::InternalSwap(GameConfg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bet_.InternalSwap(&other->bet_);
  bet_limit_min_.InternalSwap(&other->bet_limit_min_);
  bet_limit_max_.InternalSwap(&other->bet_limit_max_);
  bet_area_cfg_.InternalSwap(&other->bet_area_cfg_);
  multiple_cfg_.InternalSwap(&other->multiple_cfg_);
  times_.InternalSwap(&other->times_);
  swap(limit_total_bet_, other->limit_total_bet_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameConfg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GameState::_Internal {
 public:
};

GameState::GameState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Roulette.GameState)
}
GameState::GameState(const GameState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&game_state_, &from.game_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&times_) -
    reinterpret_cast<char*>(&game_state_)) + sizeof(times_));
  // @@protoc_insertion_point(copy_constructor:Roulette.GameState)
}

void GameState::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&game_state_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&times_) -
      reinterpret_cast<char*>(&game_state_)) + sizeof(times_));
}

GameState::~GameState() {
  // @@protoc_insertion_point(destructor:Roulette.GameState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameState::ArenaDtor(void* object) {
  GameState* _this = reinterpret_cast< GameState* >(object);
  (void)_this;
}
void GameState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameState& GameState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameState_Roulette_2eproto.base);
  return *internal_default_instance();
}


void GameState::Clear() {
// @@protoc_insertion_point(message_clear_start:Roulette.GameState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&game_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&times_) -
      reinterpret_cast<char*>(&game_state_)) + sizeof(times_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 game_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          game_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 times = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Roulette.GameState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 game_state = 1;
  if (this->game_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_game_state(), target);
  }

  // int32 times = 2;
  if (this->times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_times(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Roulette.GameState)
  return target;
}

size_t GameState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Roulette.GameState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 game_state = 1;
  if (this->game_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_state());
  }

  // int32 times = 2;
  if (this->times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_times());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Roulette.GameState)
  GOOGLE_DCHECK_NE(&from, this);
  const GameState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Roulette.GameState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Roulette.GameState)
    MergeFrom(*source);
  }
}

void GameState::MergeFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Roulette.GameState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.game_state() != 0) {
    _internal_set_game_state(from._internal_game_state());
  }
  if (from.times() != 0) {
    _internal_set_times(from._internal_times());
  }
}

void GameState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Roulette.GameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameState::CopyFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Roulette.GameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameState::IsInitialized() const {
  return true;
}

void GameState::InternalSwap(GameState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameState, times_)
      + sizeof(GameState::times_)
      - PROTOBUF_FIELD_OFFSET(GameState, game_state_)>(
          reinterpret_cast<char*>(&game_state_),
          reinterpret_cast<char*>(&other->game_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UserBetRecord::_Internal {
 public:
};

UserBetRecord::UserBetRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Roulette.UserBetRecord)
}
UserBetRecord::UserBetRecord(const UserBetRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bet_value_, &from.bet_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&bet_area_) -
    reinterpret_cast<char*>(&bet_value_)) + sizeof(bet_area_));
  // @@protoc_insertion_point(copy_constructor:Roulette.UserBetRecord)
}

void UserBetRecord::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bet_value_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bet_area_) -
      reinterpret_cast<char*>(&bet_value_)) + sizeof(bet_area_));
}

UserBetRecord::~UserBetRecord() {
  // @@protoc_insertion_point(destructor:Roulette.UserBetRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserBetRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserBetRecord::ArenaDtor(void* object) {
  UserBetRecord* _this = reinterpret_cast< UserBetRecord* >(object);
  (void)_this;
}
void UserBetRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserBetRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserBetRecord& UserBetRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserBetRecord_Roulette_2eproto.base);
  return *internal_default_instance();
}


void UserBetRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:Roulette.UserBetRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bet_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bet_area_) -
      reinterpret_cast<char*>(&bet_value_)) + sizeof(bet_area_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserBetRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 bet_area = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bet_area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 bet_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bet_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserBetRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Roulette.UserBetRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bet_area = 1;
  if (this->bet_area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bet_area(), target);
  }

  // int64 bet_value = 2;
  if (this->bet_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_bet_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Roulette.UserBetRecord)
  return target;
}

size_t UserBetRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Roulette.UserBetRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 bet_value = 2;
  if (this->bet_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_bet_value());
  }

  // int32 bet_area = 1;
  if (this->bet_area() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bet_area());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserBetRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Roulette.UserBetRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const UserBetRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserBetRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Roulette.UserBetRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Roulette.UserBetRecord)
    MergeFrom(*source);
  }
}

void UserBetRecord::MergeFrom(const UserBetRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Roulette.UserBetRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bet_value() != 0) {
    _internal_set_bet_value(from._internal_bet_value());
  }
  if (from.bet_area() != 0) {
    _internal_set_bet_area(from._internal_bet_area());
  }
}

void UserBetRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Roulette.UserBetRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserBetRecord::CopyFrom(const UserBetRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Roulette.UserBetRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBetRecord::IsInitialized() const {
  return true;
}

void UserBetRecord::InternalSwap(UserBetRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserBetRecord, bet_area_)
      + sizeof(UserBetRecord::bet_area_)
      - PROTOBUF_FIELD_OFFSET(UserBetRecord, bet_value_)>(
          reinterpret_cast<char*>(&bet_value_),
          reinterpret_cast<char*>(&other->bet_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserBetRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgSceneInfo::_Internal {
 public:
  static const ::Roulette::GameConfg& game_cfg(const MsgSceneInfo* msg);
  static const ::Roulette::GameALLRecord& all_record(const MsgSceneInfo* msg);
  static const ::Roulette::GameState& game_state(const MsgSceneInfo* msg);
};

const ::Roulette::GameConfg&
MsgSceneInfo::_Internal::game_cfg(const MsgSceneInfo* msg) {
  return *msg->game_cfg_;
}
const ::Roulette::GameALLRecord&
MsgSceneInfo::_Internal::all_record(const MsgSceneInfo* msg) {
  return *msg->all_record_;
}
const ::Roulette::GameState&
MsgSceneInfo::_Internal::game_state(const MsgSceneInfo* msg) {
  return *msg->game_state_;
}
MsgSceneInfo::MsgSceneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  game_record_(arena),
  total_bet_(arena),
  user_top_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Roulette.MsgSceneInfo)
}
MsgSceneInfo::MsgSceneInfo(const MsgSceneInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      game_record_(from.game_record_),
      total_bet_(from.total_bet_),
      user_top_(from.user_top_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_game_cfg()) {
    game_cfg_ = new ::Roulette::GameConfg(*from.game_cfg_);
  } else {
    game_cfg_ = nullptr;
  }
  if (from._internal_has_all_record()) {
    all_record_ = new ::Roulette::GameALLRecord(*from.all_record_);
  } else {
    all_record_ = nullptr;
  }
  if (from._internal_has_game_state()) {
    game_state_ = new ::Roulette::GameState(*from.game_state_);
  } else {
    game_state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Roulette.MsgSceneInfo)
}

void MsgSceneInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgSceneInfo_Roulette_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&game_cfg_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&game_state_) -
      reinterpret_cast<char*>(&game_cfg_)) + sizeof(game_state_));
}

MsgSceneInfo::~MsgSceneInfo() {
  // @@protoc_insertion_point(destructor:Roulette.MsgSceneInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgSceneInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete game_cfg_;
  if (this != internal_default_instance()) delete all_record_;
  if (this != internal_default_instance()) delete game_state_;
}

void MsgSceneInfo::ArenaDtor(void* object) {
  MsgSceneInfo* _this = reinterpret_cast< MsgSceneInfo* >(object);
  (void)_this;
}
void MsgSceneInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgSceneInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgSceneInfo& MsgSceneInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgSceneInfo_Roulette_2eproto.base);
  return *internal_default_instance();
}


void MsgSceneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Roulette.MsgSceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_record_.Clear();
  total_bet_.Clear();
  user_top_.Clear();
  if (GetArena() == nullptr && game_cfg_ != nullptr) {
    delete game_cfg_;
  }
  game_cfg_ = nullptr;
  if (GetArena() == nullptr && all_record_ != nullptr) {
    delete all_record_;
  }
  all_record_ = nullptr;
  if (GetArena() == nullptr && game_state_ != nullptr) {
    delete game_state_;
  }
  game_state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgSceneInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Roulette.GameConfg game_cfg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_cfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 game_record = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_game_record(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_game_record(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Roulette.GameALLRecord all_record = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_all_record(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Roulette.GameState game_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Roulette.UserBetRecord total_bet = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_total_bet(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Roulette.UserInfo user_top = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user_top(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgSceneInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Roulette.MsgSceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Roulette.GameConfg game_cfg = 1;
  if (this->has_game_cfg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::game_cfg(this), target, stream);
  }

  // repeated int32 game_record = 2;
  {
    int byte_size = _game_record_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_game_record(), byte_size, target);
    }
  }

  // .Roulette.GameALLRecord all_record = 3;
  if (this->has_all_record()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::all_record(this), target, stream);
  }

  // .Roulette.GameState game_state = 4;
  if (this->has_game_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::game_state(this), target, stream);
  }

  // repeated .Roulette.UserBetRecord total_bet = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_total_bet_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_total_bet(i), target, stream);
  }

  // repeated .Roulette.UserInfo user_top = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_user_top_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_user_top(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Roulette.MsgSceneInfo)
  return target;
}

size_t MsgSceneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Roulette.MsgSceneInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 game_record = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->game_record_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _game_record_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .Roulette.UserBetRecord total_bet = 5;
  total_size += 1UL * this->_internal_total_bet_size();
  for (const auto& msg : this->total_bet_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Roulette.UserInfo user_top = 6;
  total_size += 1UL * this->_internal_user_top_size();
  for (const auto& msg : this->user_top_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Roulette.GameConfg game_cfg = 1;
  if (this->has_game_cfg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *game_cfg_);
  }

  // .Roulette.GameALLRecord all_record = 3;
  if (this->has_all_record()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *all_record_);
  }

  // .Roulette.GameState game_state = 4;
  if (this->has_game_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *game_state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgSceneInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Roulette.MsgSceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgSceneInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgSceneInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Roulette.MsgSceneInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Roulette.MsgSceneInfo)
    MergeFrom(*source);
  }
}

void MsgSceneInfo::MergeFrom(const MsgSceneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Roulette.MsgSceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  game_record_.MergeFrom(from.game_record_);
  total_bet_.MergeFrom(from.total_bet_);
  user_top_.MergeFrom(from.user_top_);
  if (from.has_game_cfg()) {
    _internal_mutable_game_cfg()->::Roulette::GameConfg::MergeFrom(from._internal_game_cfg());
  }
  if (from.has_all_record()) {
    _internal_mutable_all_record()->::Roulette::GameALLRecord::MergeFrom(from._internal_all_record());
  }
  if (from.has_game_state()) {
    _internal_mutable_game_state()->::Roulette::GameState::MergeFrom(from._internal_game_state());
  }
}

void MsgSceneInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Roulette.MsgSceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSceneInfo::CopyFrom(const MsgSceneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Roulette.MsgSceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSceneInfo::IsInitialized() const {
  return true;
}

void MsgSceneInfo::InternalSwap(MsgSceneInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  game_record_.InternalSwap(&other->game_record_);
  total_bet_.InternalSwap(&other->total_bet_);
  user_top_.InternalSwap(&other->user_top_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgSceneInfo, game_state_)
      + sizeof(MsgSceneInfo::game_state_)
      - PROTOBUF_FIELD_OFFSET(MsgSceneInfo, game_cfg_)>(
          reinterpret_cast<char*>(&game_cfg_),
          reinterpret_cast<char*>(&other->game_cfg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgSceneInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BetInfo::_Internal {
 public:
};

BetInfo::BetInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Roulette.BetInfo)
}
BetInfo::BetInfo(const BetInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&area_) -
    reinterpret_cast<char*>(&index_)) + sizeof(area_));
  // @@protoc_insertion_point(copy_constructor:Roulette.BetInfo)
}

void BetInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&area_) -
      reinterpret_cast<char*>(&index_)) + sizeof(area_));
}

BetInfo::~BetInfo() {
  // @@protoc_insertion_point(destructor:Roulette.BetInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BetInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BetInfo::ArenaDtor(void* object) {
  BetInfo* _this = reinterpret_cast< BetInfo* >(object);
  (void)_this;
}
void BetInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BetInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BetInfo& BetInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BetInfo_Roulette_2eproto.base);
  return *internal_default_instance();
}


void BetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Roulette.BetInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&area_) -
      reinterpret_cast<char*>(&index_)) + sizeof(area_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BetInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 area = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BetInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Roulette.BetInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 area = 2;
  if (this->area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_area(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Roulette.BetInfo)
  return target;
}

size_t BetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Roulette.BetInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // int32 area = 2;
  if (this->area() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_area());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BetInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Roulette.BetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BetInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BetInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Roulette.BetInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Roulette.BetInfo)
    MergeFrom(*source);
  }
}

void BetInfo::MergeFrom(const BetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Roulette.BetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.area() != 0) {
    _internal_set_area(from._internal_area());
  }
}

void BetInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Roulette.BetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BetInfo::CopyFrom(const BetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Roulette.BetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BetInfo::IsInitialized() const {
  return true;
}

void BetInfo::InternalSwap(BetInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BetInfo, area_)
      + sizeof(BetInfo::area_)
      - PROTOBUF_FIELD_OFFSET(BetInfo, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BetInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgBet::_Internal {
 public:
};

MsgBet::MsgBet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Roulette.MsgBet)
}
MsgBet::MsgBet(const MsgBet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      info_(from.info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Roulette.MsgBet)
}

void MsgBet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgBet_Roulette_2eproto.base);
}

MsgBet::~MsgBet() {
  // @@protoc_insertion_point(destructor:Roulette.MsgBet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgBet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgBet::ArenaDtor(void* object) {
  MsgBet* _this = reinterpret_cast< MsgBet* >(object);
  (void)_this;
}
void MsgBet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgBet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgBet& MsgBet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgBet_Roulette_2eproto.base);
  return *internal_default_instance();
}


void MsgBet::Clear() {
// @@protoc_insertion_point(message_clear_start:Roulette.MsgBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgBet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Roulette.BetInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgBet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Roulette.MsgBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Roulette.BetInfo info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Roulette.MsgBet)
  return target;
}

size_t MsgBet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Roulette.MsgBet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Roulette.BetInfo info = 1;
  total_size += 1UL * this->_internal_info_size();
  for (const auto& msg : this->info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgBet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Roulette.MsgBet)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgBet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgBet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Roulette.MsgBet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Roulette.MsgBet)
    MergeFrom(*source);
  }
}

void MsgBet::MergeFrom(const MsgBet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Roulette.MsgBet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_.MergeFrom(from.info_);
}

void MsgBet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Roulette.MsgBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBet::CopyFrom(const MsgBet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Roulette.MsgBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBet::IsInitialized() const {
  return true;
}

void MsgBet::InternalSwap(MsgBet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  info_.InternalSwap(&other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgBet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgBetResp::_Internal {
 public:
  static const ::Roulette::MsgBet& bet_info(const MsgBetResp* msg);
};

const ::Roulette::MsgBet&
MsgBetResp::_Internal::bet_info(const MsgBetResp* msg) {
  return *msg->bet_info_;
}
MsgBetResp::MsgBetResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Roulette.MsgBetResp)
}
MsgBetResp::MsgBetResp(const MsgBetResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bet_info()) {
    bet_info_ = new ::Roulette::MsgBet(*from.bet_info_);
  } else {
    bet_info_ = nullptr;
  }
  chair_id_ = from.chair_id_;
  // @@protoc_insertion_point(copy_constructor:Roulette.MsgBetResp)
}

void MsgBetResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgBetResp_Roulette_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bet_info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&bet_info_)) + sizeof(chair_id_));
}

MsgBetResp::~MsgBetResp() {
  // @@protoc_insertion_point(destructor:Roulette.MsgBetResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgBetResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bet_info_;
}

void MsgBetResp::ArenaDtor(void* object) {
  MsgBetResp* _this = reinterpret_cast< MsgBetResp* >(object);
  (void)_this;
}
void MsgBetResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgBetResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgBetResp& MsgBetResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgBetResp_Roulette_2eproto.base);
  return *internal_default_instance();
}


void MsgBetResp::Clear() {
// @@protoc_insertion_point(message_clear_start:Roulette.MsgBetResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && bet_info_ != nullptr) {
    delete bet_info_;
  }
  bet_info_ = nullptr;
  chair_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgBetResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Roulette.MsgBet bet_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bet_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgBetResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Roulette.MsgBetResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // .Roulette.MsgBet bet_info = 2;
  if (this->has_bet_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bet_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Roulette.MsgBetResp)
  return target;
}

size_t MsgBetResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Roulette.MsgBetResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Roulette.MsgBet bet_info = 2;
  if (this->has_bet_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bet_info_);
  }

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgBetResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Roulette.MsgBetResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgBetResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgBetResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Roulette.MsgBetResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Roulette.MsgBetResp)
    MergeFrom(*source);
  }
}

void MsgBetResp::MergeFrom(const MsgBetResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Roulette.MsgBetResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bet_info()) {
    _internal_mutable_bet_info()->::Roulette::MsgBet::MergeFrom(from._internal_bet_info());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
}

void MsgBetResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Roulette.MsgBetResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBetResp::CopyFrom(const MsgBetResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Roulette.MsgBetResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBetResp::IsInitialized() const {
  return true;
}

void MsgBetResp::InternalSwap(MsgBetResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgBetResp, chair_id_)
      + sizeof(MsgBetResp::chair_id_)
      - PROTOBUF_FIELD_OFFSET(MsgBetResp, bet_info_)>(
          reinterpret_cast<char*>(&bet_info_),
          reinterpret_cast<char*>(&other->bet_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgBetResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SingleAgainBet::_Internal {
 public:
};

SingleAgainBet::SingleAgainBet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Roulette.SingleAgainBet)
}
SingleAgainBet::SingleAgainBet(const SingleAgainBet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&index_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:Roulette.SingleAgainBet)
}

void SingleAgainBet::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&index_)) + sizeof(count_));
}

SingleAgainBet::~SingleAgainBet() {
  // @@protoc_insertion_point(destructor:Roulette.SingleAgainBet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SingleAgainBet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SingleAgainBet::ArenaDtor(void* object) {
  SingleAgainBet* _this = reinterpret_cast< SingleAgainBet* >(object);
  (void)_this;
}
void SingleAgainBet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleAgainBet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleAgainBet& SingleAgainBet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleAgainBet_Roulette_2eproto.base);
  return *internal_default_instance();
}


void SingleAgainBet::Clear() {
// @@protoc_insertion_point(message_clear_start:Roulette.SingleAgainBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&index_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleAgainBet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 area = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleAgainBet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Roulette.SingleAgainBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 area = 2;
  if (this->area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_area(), target);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Roulette.SingleAgainBet)
  return target;
}

size_t SingleAgainBet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Roulette.SingleAgainBet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // int32 area = 2;
  if (this->area() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_area());
  }

  // int32 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleAgainBet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Roulette.SingleAgainBet)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleAgainBet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleAgainBet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Roulette.SingleAgainBet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Roulette.SingleAgainBet)
    MergeFrom(*source);
  }
}

void SingleAgainBet::MergeFrom(const SingleAgainBet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Roulette.SingleAgainBet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.area() != 0) {
    _internal_set_area(from._internal_area());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void SingleAgainBet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Roulette.SingleAgainBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleAgainBet::CopyFrom(const SingleAgainBet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Roulette.SingleAgainBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleAgainBet::IsInitialized() const {
  return true;
}

void SingleAgainBet::InternalSwap(SingleAgainBet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleAgainBet, count_)
      + sizeof(SingleAgainBet::count_)
      - PROTOBUF_FIELD_OFFSET(SingleAgainBet, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleAgainBet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgAgainBet::_Internal {
 public:
};

MsgAgainBet::MsgAgainBet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  again_bet_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Roulette.MsgAgainBet)
}
MsgAgainBet::MsgAgainBet(const MsgAgainBet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      again_bet_info_(from.again_bet_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Roulette.MsgAgainBet)
}

void MsgAgainBet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgAgainBet_Roulette_2eproto.base);
}

MsgAgainBet::~MsgAgainBet() {
  // @@protoc_insertion_point(destructor:Roulette.MsgAgainBet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgAgainBet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgAgainBet::ArenaDtor(void* object) {
  MsgAgainBet* _this = reinterpret_cast< MsgAgainBet* >(object);
  (void)_this;
}
void MsgAgainBet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgAgainBet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgAgainBet& MsgAgainBet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgAgainBet_Roulette_2eproto.base);
  return *internal_default_instance();
}


void MsgAgainBet::Clear() {
// @@protoc_insertion_point(message_clear_start:Roulette.MsgAgainBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  again_bet_info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgAgainBet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Roulette.SingleAgainBet again_bet_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_again_bet_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgAgainBet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Roulette.MsgAgainBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Roulette.SingleAgainBet again_bet_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_again_bet_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_again_bet_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Roulette.MsgAgainBet)
  return target;
}

size_t MsgAgainBet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Roulette.MsgAgainBet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Roulette.SingleAgainBet again_bet_info = 1;
  total_size += 1UL * this->_internal_again_bet_info_size();
  for (const auto& msg : this->again_bet_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgAgainBet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Roulette.MsgAgainBet)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgAgainBet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgAgainBet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Roulette.MsgAgainBet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Roulette.MsgAgainBet)
    MergeFrom(*source);
  }
}

void MsgAgainBet::MergeFrom(const MsgAgainBet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Roulette.MsgAgainBet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  again_bet_info_.MergeFrom(from.again_bet_info_);
}

void MsgAgainBet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Roulette.MsgAgainBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAgainBet::CopyFrom(const MsgAgainBet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Roulette.MsgAgainBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAgainBet::IsInitialized() const {
  return true;
}

void MsgAgainBet::InternalSwap(MsgAgainBet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  again_bet_info_.InternalSwap(&other->again_bet_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgAgainBet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgAgainBetResp::_Internal {
 public:
  static const ::Roulette::MsgAgainBet& again_bet_info(const MsgAgainBetResp* msg);
};

const ::Roulette::MsgAgainBet&
MsgAgainBetResp::_Internal::again_bet_info(const MsgAgainBetResp* msg) {
  return *msg->again_bet_info_;
}
MsgAgainBetResp::MsgAgainBetResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Roulette.MsgAgainBetResp)
}
MsgAgainBetResp::MsgAgainBetResp(const MsgAgainBetResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_again_bet_info()) {
    again_bet_info_ = new ::Roulette::MsgAgainBet(*from.again_bet_info_);
  } else {
    again_bet_info_ = nullptr;
  }
  chair_id_ = from.chair_id_;
  // @@protoc_insertion_point(copy_constructor:Roulette.MsgAgainBetResp)
}

void MsgAgainBetResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgAgainBetResp_Roulette_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&again_bet_info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&again_bet_info_)) + sizeof(chair_id_));
}

MsgAgainBetResp::~MsgAgainBetResp() {
  // @@protoc_insertion_point(destructor:Roulette.MsgAgainBetResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgAgainBetResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete again_bet_info_;
}

void MsgAgainBetResp::ArenaDtor(void* object) {
  MsgAgainBetResp* _this = reinterpret_cast< MsgAgainBetResp* >(object);
  (void)_this;
}
void MsgAgainBetResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgAgainBetResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgAgainBetResp& MsgAgainBetResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgAgainBetResp_Roulette_2eproto.base);
  return *internal_default_instance();
}


void MsgAgainBetResp::Clear() {
// @@protoc_insertion_point(message_clear_start:Roulette.MsgAgainBetResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && again_bet_info_ != nullptr) {
    delete again_bet_info_;
  }
  again_bet_info_ = nullptr;
  chair_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgAgainBetResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Roulette.MsgAgainBet again_bet_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_again_bet_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgAgainBetResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Roulette.MsgAgainBetResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // .Roulette.MsgAgainBet again_bet_info = 2;
  if (this->has_again_bet_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::again_bet_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Roulette.MsgAgainBetResp)
  return target;
}

size_t MsgAgainBetResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Roulette.MsgAgainBetResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Roulette.MsgAgainBet again_bet_info = 2;
  if (this->has_again_bet_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *again_bet_info_);
  }

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgAgainBetResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Roulette.MsgAgainBetResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgAgainBetResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgAgainBetResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Roulette.MsgAgainBetResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Roulette.MsgAgainBetResp)
    MergeFrom(*source);
  }
}

void MsgAgainBetResp::MergeFrom(const MsgAgainBetResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Roulette.MsgAgainBetResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_again_bet_info()) {
    _internal_mutable_again_bet_info()->::Roulette::MsgAgainBet::MergeFrom(from._internal_again_bet_info());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
}

void MsgAgainBetResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Roulette.MsgAgainBetResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAgainBetResp::CopyFrom(const MsgAgainBetResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Roulette.MsgAgainBetResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAgainBetResp::IsInitialized() const {
  return true;
}

void MsgAgainBetResp::InternalSwap(MsgAgainBetResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgAgainBetResp, chair_id_)
      + sizeof(MsgAgainBetResp::chair_id_)
      - PROTOBUF_FIELD_OFFSET(MsgAgainBetResp, again_bet_info_)>(
          reinterpret_cast<char*>(&again_bet_info_),
          reinterpret_cast<char*>(&other->again_bet_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgAgainBetResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RevocationBet::_Internal {
 public:
};

RevocationBet::RevocationBet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  revocation_gold_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Roulette.RevocationBet)
}
RevocationBet::RevocationBet(const RevocationBet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      revocation_gold_(from.revocation_gold_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Roulette.RevocationBet)
}

void RevocationBet::SharedCtor() {
}

RevocationBet::~RevocationBet() {
  // @@protoc_insertion_point(destructor:Roulette.RevocationBet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RevocationBet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RevocationBet::ArenaDtor(void* object) {
  RevocationBet* _this = reinterpret_cast< RevocationBet* >(object);
  (void)_this;
}
void RevocationBet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RevocationBet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RevocationBet& RevocationBet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RevocationBet_Roulette_2eproto.base);
  return *internal_default_instance();
}


void RevocationBet::Clear() {
// @@protoc_insertion_point(message_clear_start:Roulette.RevocationBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  revocation_gold_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RevocationBet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 revocation_gold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_revocation_gold(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_revocation_gold(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RevocationBet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Roulette.RevocationBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 revocation_gold = 1;
  {
    int byte_size = _revocation_gold_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_revocation_gold(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Roulette.RevocationBet)
  return target;
}

size_t RevocationBet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Roulette.RevocationBet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 revocation_gold = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->revocation_gold_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _revocation_gold_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RevocationBet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Roulette.RevocationBet)
  GOOGLE_DCHECK_NE(&from, this);
  const RevocationBet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RevocationBet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Roulette.RevocationBet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Roulette.RevocationBet)
    MergeFrom(*source);
  }
}

void RevocationBet::MergeFrom(const RevocationBet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Roulette.RevocationBet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  revocation_gold_.MergeFrom(from.revocation_gold_);
}

void RevocationBet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Roulette.RevocationBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RevocationBet::CopyFrom(const RevocationBet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Roulette.RevocationBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevocationBet::IsInitialized() const {
  return true;
}

void RevocationBet::InternalSwap(RevocationBet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  revocation_gold_.InternalSwap(&other->revocation_gold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RevocationBet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WinMsg::_Internal {
 public:
};

WinMsg::WinMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Roulette.WinMsg)
}
WinMsg::WinMsg(const WinMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gold_, &from.gold_,
    static_cast<size_t>(reinterpret_cast<char*>(&chair_id_) -
    reinterpret_cast<char*>(&gold_)) + sizeof(chair_id_));
  // @@protoc_insertion_point(copy_constructor:Roulette.WinMsg)
}

void WinMsg::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gold_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&gold_)) + sizeof(chair_id_));
}

WinMsg::~WinMsg() {
  // @@protoc_insertion_point(destructor:Roulette.WinMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WinMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WinMsg::ArenaDtor(void* object) {
  WinMsg* _this = reinterpret_cast< WinMsg* >(object);
  (void)_this;
}
void WinMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WinMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WinMsg& WinMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WinMsg_Roulette_2eproto.base);
  return *internal_default_instance();
}


void WinMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:Roulette.WinMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&gold_)) + sizeof(chair_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WinMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WinMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Roulette.WinMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int64 gold = 2;
  if (this->gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Roulette.WinMsg)
  return target;
}

size_t WinMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Roulette.WinMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 gold = 2;
  if (this->gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_gold());
  }

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WinMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Roulette.WinMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const WinMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WinMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Roulette.WinMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Roulette.WinMsg)
    MergeFrom(*source);
  }
}

void WinMsg::MergeFrom(const WinMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Roulette.WinMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
}

void WinMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Roulette.WinMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WinMsg::CopyFrom(const WinMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Roulette.WinMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WinMsg::IsInitialized() const {
  return true;
}

void WinMsg::InternalSwap(WinMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WinMsg, chair_id_)
      + sizeof(WinMsg::chair_id_)
      - PROTOBUF_FIELD_OFFSET(WinMsg, gold_)>(
          reinterpret_cast<char*>(&gold_),
          reinterpret_cast<char*>(&other->gold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WinMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgGameResult::_Internal {
 public:
};

MsgGameResult::MsgGameResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  win_msg_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Roulette.MsgGameResult)
}
MsgGameResult::MsgGameResult(const MsgGameResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      win_msg_(from.win_msg_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_num_ = from.result_num_;
  // @@protoc_insertion_point(copy_constructor:Roulette.MsgGameResult)
}

void MsgGameResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgGameResult_Roulette_2eproto.base);
  result_num_ = 0;
}

MsgGameResult::~MsgGameResult() {
  // @@protoc_insertion_point(destructor:Roulette.MsgGameResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgGameResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgGameResult::ArenaDtor(void* object) {
  MsgGameResult* _this = reinterpret_cast< MsgGameResult* >(object);
  (void)_this;
}
void MsgGameResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgGameResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgGameResult& MsgGameResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgGameResult_Roulette_2eproto.base);
  return *internal_default_instance();
}


void MsgGameResult::Clear() {
// @@protoc_insertion_point(message_clear_start:Roulette.MsgGameResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  win_msg_.Clear();
  result_num_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgGameResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Roulette.WinMsg win_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_win_msg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgGameResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Roulette.MsgGameResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result_num = 1;
  if (this->result_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result_num(), target);
  }

  // repeated .Roulette.WinMsg win_msg = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_win_msg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_win_msg(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Roulette.MsgGameResult)
  return target;
}

size_t MsgGameResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Roulette.MsgGameResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Roulette.WinMsg win_msg = 2;
  total_size += 1UL * this->_internal_win_msg_size();
  for (const auto& msg : this->win_msg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 result_num = 1;
  if (this->result_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgGameResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Roulette.MsgGameResult)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgGameResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgGameResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Roulette.MsgGameResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Roulette.MsgGameResult)
    MergeFrom(*source);
  }
}

void MsgGameResult::MergeFrom(const MsgGameResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Roulette.MsgGameResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  win_msg_.MergeFrom(from.win_msg_);
  if (from.result_num() != 0) {
    _internal_set_result_num(from._internal_result_num());
  }
}

void MsgGameResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Roulette.MsgGameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGameResult::CopyFrom(const MsgGameResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Roulette.MsgGameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGameResult::IsInitialized() const {
  return true;
}

void MsgGameResult::InternalSwap(MsgGameResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  win_msg_.InternalSwap(&other->win_msg_);
  swap(result_num_, other->result_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgGameResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Roulette
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Roulette::GameALLRecord* Arena::CreateMaybeMessage< ::Roulette::GameALLRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Roulette::GameALLRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::Roulette::BettonArea* Arena::CreateMaybeMessage< ::Roulette::BettonArea >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Roulette::BettonArea >(arena);
}
template<> PROTOBUF_NOINLINE ::Roulette::UserInfo* Arena::CreateMaybeMessage< ::Roulette::UserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Roulette::UserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Roulette::GameConfg* Arena::CreateMaybeMessage< ::Roulette::GameConfg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Roulette::GameConfg >(arena);
}
template<> PROTOBUF_NOINLINE ::Roulette::GameState* Arena::CreateMaybeMessage< ::Roulette::GameState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Roulette::GameState >(arena);
}
template<> PROTOBUF_NOINLINE ::Roulette::UserBetRecord* Arena::CreateMaybeMessage< ::Roulette::UserBetRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Roulette::UserBetRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::Roulette::MsgSceneInfo* Arena::CreateMaybeMessage< ::Roulette::MsgSceneInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Roulette::MsgSceneInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Roulette::BetInfo* Arena::CreateMaybeMessage< ::Roulette::BetInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Roulette::BetInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Roulette::MsgBet* Arena::CreateMaybeMessage< ::Roulette::MsgBet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Roulette::MsgBet >(arena);
}
template<> PROTOBUF_NOINLINE ::Roulette::MsgBetResp* Arena::CreateMaybeMessage< ::Roulette::MsgBetResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Roulette::MsgBetResp >(arena);
}
template<> PROTOBUF_NOINLINE ::Roulette::SingleAgainBet* Arena::CreateMaybeMessage< ::Roulette::SingleAgainBet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Roulette::SingleAgainBet >(arena);
}
template<> PROTOBUF_NOINLINE ::Roulette::MsgAgainBet* Arena::CreateMaybeMessage< ::Roulette::MsgAgainBet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Roulette::MsgAgainBet >(arena);
}
template<> PROTOBUF_NOINLINE ::Roulette::MsgAgainBetResp* Arena::CreateMaybeMessage< ::Roulette::MsgAgainBetResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Roulette::MsgAgainBetResp >(arena);
}
template<> PROTOBUF_NOINLINE ::Roulette::RevocationBet* Arena::CreateMaybeMessage< ::Roulette::RevocationBet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Roulette::RevocationBet >(arena);
}
template<> PROTOBUF_NOINLINE ::Roulette::WinMsg* Arena::CreateMaybeMessage< ::Roulette::WinMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Roulette::WinMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::Roulette::MsgGameResult* Arena::CreateMaybeMessage< ::Roulette::MsgGameResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Roulette::MsgGameResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
