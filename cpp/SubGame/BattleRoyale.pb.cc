// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BattleRoyale.proto

#include "BattleRoyale.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_BattleRoyale_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgBet_BattleRoyale_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BattleRoyale_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgChairBetData_BattleRoyale_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BattleRoyale_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgChangeBet_BattleRoyale_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BattleRoyale_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgWinData_BattleRoyale_2eproto;
namespace BattleRoyale {
class MsgChairBetDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgChairBetData> _instance;
} _MsgChairBetData_default_instance_;
class MsgSceneInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgSceneInfo> _instance;
} _MsgSceneInfo_default_instance_;
class MsgBetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgBet> _instance;
} _MsgBet_default_instance_;
class MsgBetRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgBetResp> _instance;
} _MsgBetResp_default_instance_;
class MsgChangeBetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgChangeBet> _instance;
} _MsgChangeBet_default_instance_;
class MsgChangeBetRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgChangeBetResp> _instance;
} _MsgChangeBetResp_default_instance_;
class MsgWinDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgWinData> _instance;
} _MsgWinData_default_instance_;
class MsgResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgResult> _instance;
} _MsgResult_default_instance_;
}  // namespace BattleRoyale
static void InitDefaultsscc_info_MsgBet_BattleRoyale_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BattleRoyale::_MsgBet_default_instance_;
    new (ptr) ::BattleRoyale::MsgBet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgBet_BattleRoyale_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgBet_BattleRoyale_2eproto}, {}};

static void InitDefaultsscc_info_MsgBetResp_BattleRoyale_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BattleRoyale::_MsgBetResp_default_instance_;
    new (ptr) ::BattleRoyale::MsgBetResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgBetResp_BattleRoyale_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgBetResp_BattleRoyale_2eproto}, {
      &scc_info_MsgBet_BattleRoyale_2eproto.base,}};

static void InitDefaultsscc_info_MsgChairBetData_BattleRoyale_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BattleRoyale::_MsgChairBetData_default_instance_;
    new (ptr) ::BattleRoyale::MsgChairBetData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgChairBetData_BattleRoyale_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgChairBetData_BattleRoyale_2eproto}, {}};

static void InitDefaultsscc_info_MsgChangeBet_BattleRoyale_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BattleRoyale::_MsgChangeBet_default_instance_;
    new (ptr) ::BattleRoyale::MsgChangeBet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgChangeBet_BattleRoyale_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgChangeBet_BattleRoyale_2eproto}, {}};

static void InitDefaultsscc_info_MsgChangeBetResp_BattleRoyale_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BattleRoyale::_MsgChangeBetResp_default_instance_;
    new (ptr) ::BattleRoyale::MsgChangeBetResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgChangeBetResp_BattleRoyale_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgChangeBetResp_BattleRoyale_2eproto}, {
      &scc_info_MsgChangeBet_BattleRoyale_2eproto.base,}};

static void InitDefaultsscc_info_MsgResult_BattleRoyale_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BattleRoyale::_MsgResult_default_instance_;
    new (ptr) ::BattleRoyale::MsgResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgResult_BattleRoyale_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgResult_BattleRoyale_2eproto}, {
      &scc_info_MsgWinData_BattleRoyale_2eproto.base,}};

static void InitDefaultsscc_info_MsgSceneInfo_BattleRoyale_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BattleRoyale::_MsgSceneInfo_default_instance_;
    new (ptr) ::BattleRoyale::MsgSceneInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgSceneInfo_BattleRoyale_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgSceneInfo_BattleRoyale_2eproto}, {
      &scc_info_MsgChairBetData_BattleRoyale_2eproto.base,}};

static void InitDefaultsscc_info_MsgWinData_BattleRoyale_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BattleRoyale::_MsgWinData_default_instance_;
    new (ptr) ::BattleRoyale::MsgWinData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgWinData_BattleRoyale_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgWinData_BattleRoyale_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_BattleRoyale_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_BattleRoyale_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_BattleRoyale_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_BattleRoyale_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BattleRoyale::MsgChairBetData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BattleRoyale::MsgChairBetData, chair_id_),
  PROTOBUF_FIELD_OFFSET(::BattleRoyale::MsgChairBetData, gold_),
  PROTOBUF_FIELD_OFFSET(::BattleRoyale::MsgChairBetData, area_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BattleRoyale::MsgSceneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BattleRoyale::MsgSceneInfo, bet_),
  PROTOBUF_FIELD_OFFSET(::BattleRoyale::MsgSceneInfo, record_),
  PROTOBUF_FIELD_OFFSET(::BattleRoyale::MsgSceneInfo, bet_limit_),
  PROTOBUF_FIELD_OFFSET(::BattleRoyale::MsgSceneInfo, state_time_),
  PROTOBUF_FIELD_OFFSET(::BattleRoyale::MsgSceneInfo, pass_time_),
  PROTOBUF_FIELD_OFFSET(::BattleRoyale::MsgSceneInfo, state_),
  PROTOBUF_FIELD_OFFSET(::BattleRoyale::MsgSceneInfo, max_area_),
  PROTOBUF_FIELD_OFFSET(::BattleRoyale::MsgSceneInfo, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BattleRoyale::MsgBet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BattleRoyale::MsgBet, index_),
  PROTOBUF_FIELD_OFFSET(::BattleRoyale::MsgBet, area_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BattleRoyale::MsgBetResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BattleRoyale::MsgBetResp, chair_id_),
  PROTOBUF_FIELD_OFFSET(::BattleRoyale::MsgBetResp, bet_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BattleRoyale::MsgChangeBet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BattleRoyale::MsgChangeBet, cur_area_),
  PROTOBUF_FIELD_OFFSET(::BattleRoyale::MsgChangeBet, new_area_),
  PROTOBUF_FIELD_OFFSET(::BattleRoyale::MsgChangeBet, gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BattleRoyale::MsgChangeBetResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BattleRoyale::MsgChangeBetResp, chair_id_),
  PROTOBUF_FIELD_OFFSET(::BattleRoyale::MsgChangeBetResp, bet_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BattleRoyale::MsgWinData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BattleRoyale::MsgWinData, chair_id_),
  PROTOBUF_FIELD_OFFSET(::BattleRoyale::MsgWinData, gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BattleRoyale::MsgResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BattleRoyale::MsgResult, area_),
  PROTOBUF_FIELD_OFFSET(::BattleRoyale::MsgResult, results_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::BattleRoyale::MsgChairBetData)},
  { 8, -1, sizeof(::BattleRoyale::MsgSceneInfo)},
  { 21, -1, sizeof(::BattleRoyale::MsgBet)},
  { 28, -1, sizeof(::BattleRoyale::MsgBetResp)},
  { 35, -1, sizeof(::BattleRoyale::MsgChangeBet)},
  { 43, -1, sizeof(::BattleRoyale::MsgChangeBetResp)},
  { 50, -1, sizeof(::BattleRoyale::MsgWinData)},
  { 57, -1, sizeof(::BattleRoyale::MsgResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BattleRoyale::_MsgChairBetData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BattleRoyale::_MsgSceneInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BattleRoyale::_MsgBet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BattleRoyale::_MsgBetResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BattleRoyale::_MsgChangeBet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BattleRoyale::_MsgChangeBetResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BattleRoyale::_MsgWinData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BattleRoyale::_MsgResult_default_instance_),
};

const char descriptor_table_protodef_BattleRoyale_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022BattleRoyale.proto\022\014BattleRoyale\"\?\n\017Ms"
  "gChairBetData\022\020\n\010chair_id\030\001 \001(\005\022\014\n\004gold\030"
  "\002 \001(\003\022\014\n\004area\030\003 \001(\005\"\263\001\n\014MsgSceneInfo\022\013\n\003"
  "bet\030\001 \003(\005\022\016\n\006record\030\002 \003(\005\022\021\n\tbet_limit\030\003"
  " \001(\005\022\022\n\nstate_time\030\004 \003(\005\022\021\n\tpass_time\030\005 "
  "\001(\005\022\r\n\005state\030\006 \001(\005\022\020\n\010max_area\030\007 \001(\005\022+\n\004"
  "data\030\010 \003(\0132\035.BattleRoyale.MsgChairBetDat"
  "a\"%\n\006MsgBet\022\r\n\005index\030\001 \001(\005\022\014\n\004area\030\002 \001(\005"
  "\"F\n\nMsgBetResp\022\020\n\010chair_id\030\001 \001(\005\022&\n\010bet_"
  "info\030\002 \001(\0132\024.BattleRoyale.MsgBet\"@\n\014MsgC"
  "hangeBet\022\020\n\010cur_area\030\001 \001(\005\022\020\n\010new_area\030\002"
  " \001(\005\022\014\n\004gold\030\003 \001(\003\"R\n\020MsgChangeBetResp\022\020"
  "\n\010chair_id\030\001 \001(\005\022,\n\010bet_info\030\002 \001(\0132\032.Bat"
  "tleRoyale.MsgChangeBet\",\n\nMsgWinData\022\020\n\010"
  "chair_id\030\001 \001(\005\022\014\n\004gold\030\002 \001(\003\"D\n\tMsgResul"
  "t\022\014\n\004area\030\001 \001(\005\022)\n\007results\030\002 \003(\0132\030.Battl"
  "eRoyale.MsgWinData*\325\001\n\rEMsgIDSubGame\022\025\n\021"
  "MsgIDSubGame_Null\020\000\022\024\n\020MsgIDSubGame_Bet\020"
  "\001\022\030\n\024MsgIDSubGame_BetResp\020\002\022\032\n\026MsgIDSubG"
  "ame_BetChange\020\003\022\036\n\032MsgIDSubGame_BetChang"
  "eResp\020\004\022\037\n\033MsgIDSubGame_GameResultResp\020\007"
  "\022 \n\034MsgIDSubGame_NotifyStateResp\020\010b\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_BattleRoyale_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_BattleRoyale_2eproto_sccs[8] = {
  &scc_info_MsgBet_BattleRoyale_2eproto.base,
  &scc_info_MsgBetResp_BattleRoyale_2eproto.base,
  &scc_info_MsgChairBetData_BattleRoyale_2eproto.base,
  &scc_info_MsgChangeBet_BattleRoyale_2eproto.base,
  &scc_info_MsgChangeBetResp_BattleRoyale_2eproto.base,
  &scc_info_MsgResult_BattleRoyale_2eproto.base,
  &scc_info_MsgSceneInfo_BattleRoyale_2eproto.base,
  &scc_info_MsgWinData_BattleRoyale_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_BattleRoyale_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_BattleRoyale_2eproto = {
  false, false, descriptor_table_protodef_BattleRoyale_2eproto, "BattleRoyale.proto", 882,
  &descriptor_table_BattleRoyale_2eproto_once, descriptor_table_BattleRoyale_2eproto_sccs, descriptor_table_BattleRoyale_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_BattleRoyale_2eproto::offsets,
  file_level_metadata_BattleRoyale_2eproto, 8, file_level_enum_descriptors_BattleRoyale_2eproto, file_level_service_descriptors_BattleRoyale_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_BattleRoyale_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_BattleRoyale_2eproto)), true);
namespace BattleRoyale {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDSubGame_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_BattleRoyale_2eproto);
  return file_level_enum_descriptors_BattleRoyale_2eproto[0];
}
bool EMsgIDSubGame_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MsgChairBetData::_Internal {
 public:
};

MsgChairBetData::MsgChairBetData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BattleRoyale.MsgChairBetData)
}
MsgChairBetData::MsgChairBetData(const MsgChairBetData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gold_, &from.gold_,
    static_cast<size_t>(reinterpret_cast<char*>(&area_) -
    reinterpret_cast<char*>(&gold_)) + sizeof(area_));
  // @@protoc_insertion_point(copy_constructor:BattleRoyale.MsgChairBetData)
}

void MsgChairBetData::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gold_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&area_) -
      reinterpret_cast<char*>(&gold_)) + sizeof(area_));
}

MsgChairBetData::~MsgChairBetData() {
  // @@protoc_insertion_point(destructor:BattleRoyale.MsgChairBetData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgChairBetData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgChairBetData::ArenaDtor(void* object) {
  MsgChairBetData* _this = reinterpret_cast< MsgChairBetData* >(object);
  (void)_this;
}
void MsgChairBetData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgChairBetData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgChairBetData& MsgChairBetData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgChairBetData_BattleRoyale_2eproto.base);
  return *internal_default_instance();
}


void MsgChairBetData::Clear() {
// @@protoc_insertion_point(message_clear_start:BattleRoyale.MsgChairBetData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&area_) -
      reinterpret_cast<char*>(&gold_)) + sizeof(area_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgChairBetData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 area = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgChairBetData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BattleRoyale.MsgChairBetData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int64 gold = 2;
  if (this->gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_gold(), target);
  }

  // int32 area = 3;
  if (this->area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_area(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BattleRoyale.MsgChairBetData)
  return target;
}

size_t MsgChairBetData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BattleRoyale.MsgChairBetData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 gold = 2;
  if (this->gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_gold());
  }

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 area = 3;
  if (this->area() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_area());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgChairBetData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BattleRoyale.MsgChairBetData)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgChairBetData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgChairBetData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BattleRoyale.MsgChairBetData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BattleRoyale.MsgChairBetData)
    MergeFrom(*source);
  }
}

void MsgChairBetData::MergeFrom(const MsgChairBetData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BattleRoyale.MsgChairBetData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.area() != 0) {
    _internal_set_area(from._internal_area());
  }
}

void MsgChairBetData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BattleRoyale.MsgChairBetData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgChairBetData::CopyFrom(const MsgChairBetData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BattleRoyale.MsgChairBetData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgChairBetData::IsInitialized() const {
  return true;
}

void MsgChairBetData::InternalSwap(MsgChairBetData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgChairBetData, area_)
      + sizeof(MsgChairBetData::area_)
      - PROTOBUF_FIELD_OFFSET(MsgChairBetData, gold_)>(
          reinterpret_cast<char*>(&gold_),
          reinterpret_cast<char*>(&other->gold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgChairBetData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgSceneInfo::_Internal {
 public:
};

MsgSceneInfo::MsgSceneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bet_(arena),
  record_(arena),
  state_time_(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BattleRoyale.MsgSceneInfo)
}
MsgSceneInfo::MsgSceneInfo(const MsgSceneInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bet_(from.bet_),
      record_(from.record_),
      state_time_(from.state_time_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bet_limit_, &from.bet_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_area_) -
    reinterpret_cast<char*>(&bet_limit_)) + sizeof(max_area_));
  // @@protoc_insertion_point(copy_constructor:BattleRoyale.MsgSceneInfo)
}

void MsgSceneInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgSceneInfo_BattleRoyale_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bet_limit_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&max_area_) -
      reinterpret_cast<char*>(&bet_limit_)) + sizeof(max_area_));
}

MsgSceneInfo::~MsgSceneInfo() {
  // @@protoc_insertion_point(destructor:BattleRoyale.MsgSceneInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgSceneInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgSceneInfo::ArenaDtor(void* object) {
  MsgSceneInfo* _this = reinterpret_cast< MsgSceneInfo* >(object);
  (void)_this;
}
void MsgSceneInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgSceneInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgSceneInfo& MsgSceneInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgSceneInfo_BattleRoyale_2eproto.base);
  return *internal_default_instance();
}


void MsgSceneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BattleRoyale.MsgSceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bet_.Clear();
  record_.Clear();
  state_time_.Clear();
  data_.Clear();
  ::memset(&bet_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_area_) -
      reinterpret_cast<char*>(&bet_limit_)) + sizeof(max_area_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgSceneInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 bet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bet(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_bet(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 record = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_record(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_record(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bet_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bet_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 state_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_state_time(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_state_time(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pass_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          pass_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_area = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          max_area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BattleRoyale.MsgChairBetData data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgSceneInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BattleRoyale.MsgSceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 bet = 1;
  {
    int byte_size = _bet_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_bet(), byte_size, target);
    }
  }

  // repeated int32 record = 2;
  {
    int byte_size = _record_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_record(), byte_size, target);
    }
  }

  // int32 bet_limit = 3;
  if (this->bet_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_bet_limit(), target);
  }

  // repeated int32 state_time = 4;
  {
    int byte_size = _state_time_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_state_time(), byte_size, target);
    }
  }

  // int32 pass_time = 5;
  if (this->pass_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_pass_time(), target);
  }

  // int32 state = 6;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_state(), target);
  }

  // int32 max_area = 7;
  if (this->max_area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_max_area(), target);
  }

  // repeated .BattleRoyale.MsgChairBetData data = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BattleRoyale.MsgSceneInfo)
  return target;
}

size_t MsgSceneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BattleRoyale.MsgSceneInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 bet = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bet_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bet_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 record = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->record_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _record_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 state_time = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->state_time_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _state_time_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .BattleRoyale.MsgChairBetData data = 8;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 bet_limit = 3;
  if (this->bet_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bet_limit());
  }

  // int32 pass_time = 5;
  if (this->pass_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pass_time());
  }

  // int32 state = 6;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // int32 max_area = 7;
  if (this->max_area() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_area());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgSceneInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BattleRoyale.MsgSceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgSceneInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgSceneInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BattleRoyale.MsgSceneInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BattleRoyale.MsgSceneInfo)
    MergeFrom(*source);
  }
}

void MsgSceneInfo::MergeFrom(const MsgSceneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BattleRoyale.MsgSceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bet_.MergeFrom(from.bet_);
  record_.MergeFrom(from.record_);
  state_time_.MergeFrom(from.state_time_);
  data_.MergeFrom(from.data_);
  if (from.bet_limit() != 0) {
    _internal_set_bet_limit(from._internal_bet_limit());
  }
  if (from.pass_time() != 0) {
    _internal_set_pass_time(from._internal_pass_time());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.max_area() != 0) {
    _internal_set_max_area(from._internal_max_area());
  }
}

void MsgSceneInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BattleRoyale.MsgSceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSceneInfo::CopyFrom(const MsgSceneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BattleRoyale.MsgSceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSceneInfo::IsInitialized() const {
  return true;
}

void MsgSceneInfo::InternalSwap(MsgSceneInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bet_.InternalSwap(&other->bet_);
  record_.InternalSwap(&other->record_);
  state_time_.InternalSwap(&other->state_time_);
  data_.InternalSwap(&other->data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgSceneInfo, max_area_)
      + sizeof(MsgSceneInfo::max_area_)
      - PROTOBUF_FIELD_OFFSET(MsgSceneInfo, bet_limit_)>(
          reinterpret_cast<char*>(&bet_limit_),
          reinterpret_cast<char*>(&other->bet_limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgSceneInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgBet::_Internal {
 public:
};

MsgBet::MsgBet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BattleRoyale.MsgBet)
}
MsgBet::MsgBet(const MsgBet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&area_) -
    reinterpret_cast<char*>(&index_)) + sizeof(area_));
  // @@protoc_insertion_point(copy_constructor:BattleRoyale.MsgBet)
}

void MsgBet::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&area_) -
      reinterpret_cast<char*>(&index_)) + sizeof(area_));
}

MsgBet::~MsgBet() {
  // @@protoc_insertion_point(destructor:BattleRoyale.MsgBet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgBet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgBet::ArenaDtor(void* object) {
  MsgBet* _this = reinterpret_cast< MsgBet* >(object);
  (void)_this;
}
void MsgBet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgBet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgBet& MsgBet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgBet_BattleRoyale_2eproto.base);
  return *internal_default_instance();
}


void MsgBet::Clear() {
// @@protoc_insertion_point(message_clear_start:BattleRoyale.MsgBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&area_) -
      reinterpret_cast<char*>(&index_)) + sizeof(area_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgBet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 area = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgBet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BattleRoyale.MsgBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 area = 2;
  if (this->area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_area(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BattleRoyale.MsgBet)
  return target;
}

size_t MsgBet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BattleRoyale.MsgBet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // int32 area = 2;
  if (this->area() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_area());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgBet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BattleRoyale.MsgBet)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgBet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgBet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BattleRoyale.MsgBet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BattleRoyale.MsgBet)
    MergeFrom(*source);
  }
}

void MsgBet::MergeFrom(const MsgBet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BattleRoyale.MsgBet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.area() != 0) {
    _internal_set_area(from._internal_area());
  }
}

void MsgBet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BattleRoyale.MsgBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBet::CopyFrom(const MsgBet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BattleRoyale.MsgBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBet::IsInitialized() const {
  return true;
}

void MsgBet::InternalSwap(MsgBet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgBet, area_)
      + sizeof(MsgBet::area_)
      - PROTOBUF_FIELD_OFFSET(MsgBet, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgBet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgBetResp::_Internal {
 public:
  static const ::BattleRoyale::MsgBet& bet_info(const MsgBetResp* msg);
};

const ::BattleRoyale::MsgBet&
MsgBetResp::_Internal::bet_info(const MsgBetResp* msg) {
  return *msg->bet_info_;
}
MsgBetResp::MsgBetResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BattleRoyale.MsgBetResp)
}
MsgBetResp::MsgBetResp(const MsgBetResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bet_info()) {
    bet_info_ = new ::BattleRoyale::MsgBet(*from.bet_info_);
  } else {
    bet_info_ = nullptr;
  }
  chair_id_ = from.chair_id_;
  // @@protoc_insertion_point(copy_constructor:BattleRoyale.MsgBetResp)
}

void MsgBetResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgBetResp_BattleRoyale_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bet_info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&bet_info_)) + sizeof(chair_id_));
}

MsgBetResp::~MsgBetResp() {
  // @@protoc_insertion_point(destructor:BattleRoyale.MsgBetResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgBetResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bet_info_;
}

void MsgBetResp::ArenaDtor(void* object) {
  MsgBetResp* _this = reinterpret_cast< MsgBetResp* >(object);
  (void)_this;
}
void MsgBetResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgBetResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgBetResp& MsgBetResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgBetResp_BattleRoyale_2eproto.base);
  return *internal_default_instance();
}


void MsgBetResp::Clear() {
// @@protoc_insertion_point(message_clear_start:BattleRoyale.MsgBetResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && bet_info_ != nullptr) {
    delete bet_info_;
  }
  bet_info_ = nullptr;
  chair_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgBetResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BattleRoyale.MsgBet bet_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bet_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgBetResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BattleRoyale.MsgBetResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // .BattleRoyale.MsgBet bet_info = 2;
  if (this->has_bet_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bet_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BattleRoyale.MsgBetResp)
  return target;
}

size_t MsgBetResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BattleRoyale.MsgBetResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BattleRoyale.MsgBet bet_info = 2;
  if (this->has_bet_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bet_info_);
  }

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgBetResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BattleRoyale.MsgBetResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgBetResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgBetResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BattleRoyale.MsgBetResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BattleRoyale.MsgBetResp)
    MergeFrom(*source);
  }
}

void MsgBetResp::MergeFrom(const MsgBetResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BattleRoyale.MsgBetResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bet_info()) {
    _internal_mutable_bet_info()->::BattleRoyale::MsgBet::MergeFrom(from._internal_bet_info());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
}

void MsgBetResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BattleRoyale.MsgBetResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBetResp::CopyFrom(const MsgBetResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BattleRoyale.MsgBetResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBetResp::IsInitialized() const {
  return true;
}

void MsgBetResp::InternalSwap(MsgBetResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgBetResp, chair_id_)
      + sizeof(MsgBetResp::chair_id_)
      - PROTOBUF_FIELD_OFFSET(MsgBetResp, bet_info_)>(
          reinterpret_cast<char*>(&bet_info_),
          reinterpret_cast<char*>(&other->bet_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgBetResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgChangeBet::_Internal {
 public:
};

MsgChangeBet::MsgChangeBet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BattleRoyale.MsgChangeBet)
}
MsgChangeBet::MsgChangeBet(const MsgChangeBet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cur_area_, &from.cur_area_,
    static_cast<size_t>(reinterpret_cast<char*>(&gold_) -
    reinterpret_cast<char*>(&cur_area_)) + sizeof(gold_));
  // @@protoc_insertion_point(copy_constructor:BattleRoyale.MsgChangeBet)
}

void MsgChangeBet::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&cur_area_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&gold_) -
      reinterpret_cast<char*>(&cur_area_)) + sizeof(gold_));
}

MsgChangeBet::~MsgChangeBet() {
  // @@protoc_insertion_point(destructor:BattleRoyale.MsgChangeBet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgChangeBet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgChangeBet::ArenaDtor(void* object) {
  MsgChangeBet* _this = reinterpret_cast< MsgChangeBet* >(object);
  (void)_this;
}
void MsgChangeBet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgChangeBet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgChangeBet& MsgChangeBet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgChangeBet_BattleRoyale_2eproto.base);
  return *internal_default_instance();
}


void MsgChangeBet::Clear() {
// @@protoc_insertion_point(message_clear_start:BattleRoyale.MsgChangeBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cur_area_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gold_) -
      reinterpret_cast<char*>(&cur_area_)) + sizeof(gold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgChangeBet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 cur_area = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cur_area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 new_area = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          new_area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 gold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgChangeBet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BattleRoyale.MsgChangeBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cur_area = 1;
  if (this->cur_area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cur_area(), target);
  }

  // int32 new_area = 2;
  if (this->new_area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_new_area(), target);
  }

  // int64 gold = 3;
  if (this->gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BattleRoyale.MsgChangeBet)
  return target;
}

size_t MsgChangeBet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BattleRoyale.MsgChangeBet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 cur_area = 1;
  if (this->cur_area() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur_area());
  }

  // int32 new_area = 2;
  if (this->new_area() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_new_area());
  }

  // int64 gold = 3;
  if (this->gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_gold());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgChangeBet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BattleRoyale.MsgChangeBet)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgChangeBet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgChangeBet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BattleRoyale.MsgChangeBet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BattleRoyale.MsgChangeBet)
    MergeFrom(*source);
  }
}

void MsgChangeBet::MergeFrom(const MsgChangeBet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BattleRoyale.MsgChangeBet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cur_area() != 0) {
    _internal_set_cur_area(from._internal_cur_area());
  }
  if (from.new_area() != 0) {
    _internal_set_new_area(from._internal_new_area());
  }
  if (from.gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
}

void MsgChangeBet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BattleRoyale.MsgChangeBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgChangeBet::CopyFrom(const MsgChangeBet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BattleRoyale.MsgChangeBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgChangeBet::IsInitialized() const {
  return true;
}

void MsgChangeBet::InternalSwap(MsgChangeBet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgChangeBet, gold_)
      + sizeof(MsgChangeBet::gold_)
      - PROTOBUF_FIELD_OFFSET(MsgChangeBet, cur_area_)>(
          reinterpret_cast<char*>(&cur_area_),
          reinterpret_cast<char*>(&other->cur_area_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgChangeBet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgChangeBetResp::_Internal {
 public:
  static const ::BattleRoyale::MsgChangeBet& bet_info(const MsgChangeBetResp* msg);
};

const ::BattleRoyale::MsgChangeBet&
MsgChangeBetResp::_Internal::bet_info(const MsgChangeBetResp* msg) {
  return *msg->bet_info_;
}
MsgChangeBetResp::MsgChangeBetResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BattleRoyale.MsgChangeBetResp)
}
MsgChangeBetResp::MsgChangeBetResp(const MsgChangeBetResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bet_info()) {
    bet_info_ = new ::BattleRoyale::MsgChangeBet(*from.bet_info_);
  } else {
    bet_info_ = nullptr;
  }
  chair_id_ = from.chair_id_;
  // @@protoc_insertion_point(copy_constructor:BattleRoyale.MsgChangeBetResp)
}

void MsgChangeBetResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgChangeBetResp_BattleRoyale_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bet_info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&bet_info_)) + sizeof(chair_id_));
}

MsgChangeBetResp::~MsgChangeBetResp() {
  // @@protoc_insertion_point(destructor:BattleRoyale.MsgChangeBetResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgChangeBetResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bet_info_;
}

void MsgChangeBetResp::ArenaDtor(void* object) {
  MsgChangeBetResp* _this = reinterpret_cast< MsgChangeBetResp* >(object);
  (void)_this;
}
void MsgChangeBetResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgChangeBetResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgChangeBetResp& MsgChangeBetResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgChangeBetResp_BattleRoyale_2eproto.base);
  return *internal_default_instance();
}


void MsgChangeBetResp::Clear() {
// @@protoc_insertion_point(message_clear_start:BattleRoyale.MsgChangeBetResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && bet_info_ != nullptr) {
    delete bet_info_;
  }
  bet_info_ = nullptr;
  chair_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgChangeBetResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BattleRoyale.MsgChangeBet bet_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bet_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgChangeBetResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BattleRoyale.MsgChangeBetResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // .BattleRoyale.MsgChangeBet bet_info = 2;
  if (this->has_bet_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bet_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BattleRoyale.MsgChangeBetResp)
  return target;
}

size_t MsgChangeBetResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BattleRoyale.MsgChangeBetResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BattleRoyale.MsgChangeBet bet_info = 2;
  if (this->has_bet_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bet_info_);
  }

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgChangeBetResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BattleRoyale.MsgChangeBetResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgChangeBetResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgChangeBetResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BattleRoyale.MsgChangeBetResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BattleRoyale.MsgChangeBetResp)
    MergeFrom(*source);
  }
}

void MsgChangeBetResp::MergeFrom(const MsgChangeBetResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BattleRoyale.MsgChangeBetResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bet_info()) {
    _internal_mutable_bet_info()->::BattleRoyale::MsgChangeBet::MergeFrom(from._internal_bet_info());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
}

void MsgChangeBetResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BattleRoyale.MsgChangeBetResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgChangeBetResp::CopyFrom(const MsgChangeBetResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BattleRoyale.MsgChangeBetResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgChangeBetResp::IsInitialized() const {
  return true;
}

void MsgChangeBetResp::InternalSwap(MsgChangeBetResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgChangeBetResp, chair_id_)
      + sizeof(MsgChangeBetResp::chair_id_)
      - PROTOBUF_FIELD_OFFSET(MsgChangeBetResp, bet_info_)>(
          reinterpret_cast<char*>(&bet_info_),
          reinterpret_cast<char*>(&other->bet_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgChangeBetResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgWinData::_Internal {
 public:
};

MsgWinData::MsgWinData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BattleRoyale.MsgWinData)
}
MsgWinData::MsgWinData(const MsgWinData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gold_, &from.gold_,
    static_cast<size_t>(reinterpret_cast<char*>(&chair_id_) -
    reinterpret_cast<char*>(&gold_)) + sizeof(chair_id_));
  // @@protoc_insertion_point(copy_constructor:BattleRoyale.MsgWinData)
}

void MsgWinData::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gold_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&gold_)) + sizeof(chair_id_));
}

MsgWinData::~MsgWinData() {
  // @@protoc_insertion_point(destructor:BattleRoyale.MsgWinData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgWinData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgWinData::ArenaDtor(void* object) {
  MsgWinData* _this = reinterpret_cast< MsgWinData* >(object);
  (void)_this;
}
void MsgWinData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgWinData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgWinData& MsgWinData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgWinData_BattleRoyale_2eproto.base);
  return *internal_default_instance();
}


void MsgWinData::Clear() {
// @@protoc_insertion_point(message_clear_start:BattleRoyale.MsgWinData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&gold_)) + sizeof(chair_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgWinData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgWinData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BattleRoyale.MsgWinData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int64 gold = 2;
  if (this->gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BattleRoyale.MsgWinData)
  return target;
}

size_t MsgWinData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BattleRoyale.MsgWinData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 gold = 2;
  if (this->gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_gold());
  }

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgWinData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BattleRoyale.MsgWinData)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgWinData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgWinData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BattleRoyale.MsgWinData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BattleRoyale.MsgWinData)
    MergeFrom(*source);
  }
}

void MsgWinData::MergeFrom(const MsgWinData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BattleRoyale.MsgWinData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
}

void MsgWinData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BattleRoyale.MsgWinData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgWinData::CopyFrom(const MsgWinData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BattleRoyale.MsgWinData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgWinData::IsInitialized() const {
  return true;
}

void MsgWinData::InternalSwap(MsgWinData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgWinData, chair_id_)
      + sizeof(MsgWinData::chair_id_)
      - PROTOBUF_FIELD_OFFSET(MsgWinData, gold_)>(
          reinterpret_cast<char*>(&gold_),
          reinterpret_cast<char*>(&other->gold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgWinData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgResult::_Internal {
 public:
};

MsgResult::MsgResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BattleRoyale.MsgResult)
}
MsgResult::MsgResult(const MsgResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  area_ = from.area_;
  // @@protoc_insertion_point(copy_constructor:BattleRoyale.MsgResult)
}

void MsgResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgResult_BattleRoyale_2eproto.base);
  area_ = 0;
}

MsgResult::~MsgResult() {
  // @@protoc_insertion_point(destructor:BattleRoyale.MsgResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgResult::ArenaDtor(void* object) {
  MsgResult* _this = reinterpret_cast< MsgResult* >(object);
  (void)_this;
}
void MsgResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgResult& MsgResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgResult_BattleRoyale_2eproto.base);
  return *internal_default_instance();
}


void MsgResult::Clear() {
// @@protoc_insertion_point(message_clear_start:BattleRoyale.MsgResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  area_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 area = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BattleRoyale.MsgWinData results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BattleRoyale.MsgResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 area = 1;
  if (this->area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_area(), target);
  }

  // repeated .BattleRoyale.MsgWinData results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BattleRoyale.MsgResult)
  return target;
}

size_t MsgResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BattleRoyale.MsgResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BattleRoyale.MsgWinData results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 area = 1;
  if (this->area() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_area());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BattleRoyale.MsgResult)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BattleRoyale.MsgResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BattleRoyale.MsgResult)
    MergeFrom(*source);
  }
}

void MsgResult::MergeFrom(const MsgResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BattleRoyale.MsgResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from.area() != 0) {
    _internal_set_area(from._internal_area());
  }
}

void MsgResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BattleRoyale.MsgResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgResult::CopyFrom(const MsgResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BattleRoyale.MsgResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgResult::IsInitialized() const {
  return true;
}

void MsgResult::InternalSwap(MsgResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  swap(area_, other->area_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace BattleRoyale
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::BattleRoyale::MsgChairBetData* Arena::CreateMaybeMessage< ::BattleRoyale::MsgChairBetData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BattleRoyale::MsgChairBetData >(arena);
}
template<> PROTOBUF_NOINLINE ::BattleRoyale::MsgSceneInfo* Arena::CreateMaybeMessage< ::BattleRoyale::MsgSceneInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BattleRoyale::MsgSceneInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BattleRoyale::MsgBet* Arena::CreateMaybeMessage< ::BattleRoyale::MsgBet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BattleRoyale::MsgBet >(arena);
}
template<> PROTOBUF_NOINLINE ::BattleRoyale::MsgBetResp* Arena::CreateMaybeMessage< ::BattleRoyale::MsgBetResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BattleRoyale::MsgBetResp >(arena);
}
template<> PROTOBUF_NOINLINE ::BattleRoyale::MsgChangeBet* Arena::CreateMaybeMessage< ::BattleRoyale::MsgChangeBet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BattleRoyale::MsgChangeBet >(arena);
}
template<> PROTOBUF_NOINLINE ::BattleRoyale::MsgChangeBetResp* Arena::CreateMaybeMessage< ::BattleRoyale::MsgChangeBetResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BattleRoyale::MsgChangeBetResp >(arena);
}
template<> PROTOBUF_NOINLINE ::BattleRoyale::MsgWinData* Arena::CreateMaybeMessage< ::BattleRoyale::MsgWinData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BattleRoyale::MsgWinData >(arena);
}
template<> PROTOBUF_NOINLINE ::BattleRoyale::MsgResult* Arena::CreateMaybeMessage< ::BattleRoyale::MsgResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BattleRoyale::MsgResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
