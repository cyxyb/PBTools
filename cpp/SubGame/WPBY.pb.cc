// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WPBY.proto

#include "WPBY.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_WPBY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Bullet_WPBY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_WPBY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FishDeadInfo_WPBY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_WPBY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FishLineInfo_WPBY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_WPBY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FishPoint_WPBY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_WPBY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FishTide_WPBY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_WPBY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LineInfo_WPBY_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_WPBY_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadFish_WPBY_2eproto;
class CMD_S_RobotShootDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_S_RobotShoot> _instance;
} _CMD_S_RobotShoot_default_instance_;
class CMD_S_RobotListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_S_RobotList> _instance;
} _CMD_S_RobotList_default_instance_;
class CMD_S_PlayerLockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_S_PlayerLock> _instance;
} _CMD_S_PlayerLock_default_instance_;
class FishPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FishPoint> _instance;
} _FishPoint_default_instance_;
class LineInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LineInfo> _instance;
} _LineInfo_default_instance_;
class FishLineInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FishLineInfo> _instance;
} _FishLineInfo_default_instance_;
class FishTideDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FishTide> _instance;
} _FishTide_default_instance_;
class CMD_S_YuChaoComeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_S_YuChaoCome> _instance;
} _CMD_S_YuChaoCome_default_instance_;
class CMD_S_ShootLKDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_S_ShootLK> _instance;
} _CMD_S_ShootLK_default_instance_;
class CMD_S_JuBuZhaDanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_S_JuBuZhaDan> _instance;
} _CMD_S_JuBuZhaDan_default_instance_;
class CMD_S_YiWangDaJinDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_S_YiWangDaJin> _instance;
} _CMD_S_YiWangDaJin_default_instance_;
class CMD_S_TongLeiZhaDanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_S_TongLeiZhaDan> _instance;
} _CMD_S_TongLeiZhaDan_default_instance_;
class LoadFishDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadFish> _instance;
} _LoadFish_default_instance_;
class CMD_S_YuWangDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_S_YuWang> _instance;
} _CMD_S_YuWang_default_instance_;
class CMD_S_DaSiXiDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_S_DaSiXi> _instance;
} _CMD_S_DaSiXi_default_instance_;
class CMD_S_DaSanYuanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_S_DaSanYuan> _instance;
} _CMD_S_DaSanYuan_default_instance_;
class CMD_S_ZhongYiTangDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_S_ZhongYiTang> _instance;
} _CMD_S_ZhongYiTang_default_instance_;
class CMD_S_ShuiHuZhuanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_S_ShuiHuZhuan> _instance;
} _CMD_S_ShuiHuZhuan_default_instance_;
class CMD_S_ChangeBulletLevelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_S_ChangeBulletLevel> _instance;
} _CMD_S_ChangeBulletLevel_default_instance_;
class CMD_S_CONFIGDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_S_CONFIG> _instance;
} _CMD_S_CONFIG_default_instance_;
class CMD_S_PlayerGunLevelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_S_PlayerGunLevel> _instance;
} _CMD_S_PlayerGunLevel_default_instance_;
class CMD_S_AddFishDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_S_AddFish> _instance;
} _CMD_S_AddFish_default_instance_;
class CMD_S_PlayerEnterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_S_PlayerEnter> _instance;
} _CMD_S_PlayerEnter_default_instance_;
class FishDeadInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FishDeadInfo> _instance;
} _FishDeadInfo_default_instance_;
class CMD_S_FishDeadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_S_FishDead> _instance;
} _CMD_S_FishDead_default_instance_;
class CMD_S_PlayerShootDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_S_PlayerShoot> _instance;
} _CMD_S_PlayerShoot_default_instance_;
class CMD_C_RobotShootDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_C_RobotShoot> _instance;
} _CMD_C_RobotShoot_default_instance_;
class CMD_C_PlayerLockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_C_PlayerLock> _instance;
} _CMD_C_PlayerLock_default_instance_;
class CMD_C_JuBuZhaDanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_C_JuBuZhaDan> _instance;
} _CMD_C_JuBuZhaDan_default_instance_;
class CMD_C_TongLeiZhaDanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_C_TongLeiZhaDan> _instance;
} _CMD_C_TongLeiZhaDan_default_instance_;
class CMD_C_ShuiHuZhuanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_C_ShuiHuZhuan> _instance;
} _CMD_C_ShuiHuZhuan_default_instance_;
class CMD_C_ChangeBulletLevelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_C_ChangeBulletLevel> _instance;
} _CMD_C_ChangeBulletLevel_default_instance_;
class BulletDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Bullet> _instance;
} _Bullet_default_instance_;
class CMD_C_PressShootDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_C_PressShoot> _instance;
} _CMD_C_PressShoot_default_instance_;
class CMD_C_HitedFishDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_C_HitedFish> _instance;
} _CMD_C_HitedFish_default_instance_;
static void InitDefaultsscc_info_Bullet_WPBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Bullet_default_instance_;
    new (ptr) ::Bullet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Bullet_WPBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Bullet_WPBY_2eproto}, {}};

static void InitDefaultsscc_info_CMD_C_ChangeBulletLevel_WPBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMD_C_ChangeBulletLevel_default_instance_;
    new (ptr) ::CMD_C_ChangeBulletLevel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_C_ChangeBulletLevel_WPBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_C_ChangeBulletLevel_WPBY_2eproto}, {}};

static void InitDefaultsscc_info_CMD_C_HitedFish_WPBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMD_C_HitedFish_default_instance_;
    new (ptr) ::CMD_C_HitedFish();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMD_C_HitedFish_WPBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMD_C_HitedFish_WPBY_2eproto}, {
      &scc_info_Bullet_WPBY_2eproto.base,}};

static void InitDefaultsscc_info_CMD_C_JuBuZhaDan_WPBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMD_C_JuBuZhaDan_default_instance_;
    new (ptr) ::CMD_C_JuBuZhaDan();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_C_JuBuZhaDan_WPBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_C_JuBuZhaDan_WPBY_2eproto}, {}};

static void InitDefaultsscc_info_CMD_C_PlayerLock_WPBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMD_C_PlayerLock_default_instance_;
    new (ptr) ::CMD_C_PlayerLock();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_C_PlayerLock_WPBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_C_PlayerLock_WPBY_2eproto}, {}};

static void InitDefaultsscc_info_CMD_C_PressShoot_WPBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMD_C_PressShoot_default_instance_;
    new (ptr) ::CMD_C_PressShoot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMD_C_PressShoot_WPBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMD_C_PressShoot_WPBY_2eproto}, {
      &scc_info_Bullet_WPBY_2eproto.base,}};

static void InitDefaultsscc_info_CMD_C_RobotShoot_WPBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMD_C_RobotShoot_default_instance_;
    new (ptr) ::CMD_C_RobotShoot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_C_RobotShoot_WPBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_C_RobotShoot_WPBY_2eproto}, {}};

static void InitDefaultsscc_info_CMD_C_ShuiHuZhuan_WPBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMD_C_ShuiHuZhuan_default_instance_;
    new (ptr) ::CMD_C_ShuiHuZhuan();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_C_ShuiHuZhuan_WPBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_C_ShuiHuZhuan_WPBY_2eproto}, {}};

static void InitDefaultsscc_info_CMD_C_TongLeiZhaDan_WPBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMD_C_TongLeiZhaDan_default_instance_;
    new (ptr) ::CMD_C_TongLeiZhaDan();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_C_TongLeiZhaDan_WPBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_C_TongLeiZhaDan_WPBY_2eproto}, {}};

static void InitDefaultsscc_info_CMD_S_AddFish_WPBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMD_S_AddFish_default_instance_;
    new (ptr) ::CMD_S_AddFish();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMD_S_AddFish_WPBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMD_S_AddFish_WPBY_2eproto}, {
      &scc_info_LoadFish_WPBY_2eproto.base,}};

static void InitDefaultsscc_info_CMD_S_CONFIG_WPBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMD_S_CONFIG_default_instance_;
    new (ptr) ::CMD_S_CONFIG();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_S_CONFIG_WPBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_S_CONFIG_WPBY_2eproto}, {}};

static void InitDefaultsscc_info_CMD_S_ChangeBulletLevel_WPBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMD_S_ChangeBulletLevel_default_instance_;
    new (ptr) ::CMD_S_ChangeBulletLevel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_S_ChangeBulletLevel_WPBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_S_ChangeBulletLevel_WPBY_2eproto}, {}};

static void InitDefaultsscc_info_CMD_S_DaSanYuan_WPBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMD_S_DaSanYuan_default_instance_;
    new (ptr) ::CMD_S_DaSanYuan();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_S_DaSanYuan_WPBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_S_DaSanYuan_WPBY_2eproto}, {}};

static void InitDefaultsscc_info_CMD_S_DaSiXi_WPBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMD_S_DaSiXi_default_instance_;
    new (ptr) ::CMD_S_DaSiXi();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_S_DaSiXi_WPBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_S_DaSiXi_WPBY_2eproto}, {}};

static void InitDefaultsscc_info_CMD_S_FishDead_WPBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMD_S_FishDead_default_instance_;
    new (ptr) ::CMD_S_FishDead();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMD_S_FishDead_WPBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMD_S_FishDead_WPBY_2eproto}, {
      &scc_info_FishDeadInfo_WPBY_2eproto.base,}};

static void InitDefaultsscc_info_CMD_S_JuBuZhaDan_WPBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMD_S_JuBuZhaDan_default_instance_;
    new (ptr) ::CMD_S_JuBuZhaDan();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_S_JuBuZhaDan_WPBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_S_JuBuZhaDan_WPBY_2eproto}, {}};

static void InitDefaultsscc_info_CMD_S_PlayerEnter_WPBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMD_S_PlayerEnter_default_instance_;
    new (ptr) ::CMD_S_PlayerEnter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMD_S_PlayerEnter_WPBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMD_S_PlayerEnter_WPBY_2eproto}, {
      &scc_info_LoadFish_WPBY_2eproto.base,}};

static void InitDefaultsscc_info_CMD_S_PlayerGunLevel_WPBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMD_S_PlayerGunLevel_default_instance_;
    new (ptr) ::CMD_S_PlayerGunLevel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_S_PlayerGunLevel_WPBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_S_PlayerGunLevel_WPBY_2eproto}, {}};

static void InitDefaultsscc_info_CMD_S_PlayerLock_WPBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMD_S_PlayerLock_default_instance_;
    new (ptr) ::CMD_S_PlayerLock();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_S_PlayerLock_WPBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_S_PlayerLock_WPBY_2eproto}, {}};

static void InitDefaultsscc_info_CMD_S_PlayerShoot_WPBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMD_S_PlayerShoot_default_instance_;
    new (ptr) ::CMD_S_PlayerShoot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_S_PlayerShoot_WPBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_S_PlayerShoot_WPBY_2eproto}, {}};

static void InitDefaultsscc_info_CMD_S_RobotList_WPBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMD_S_RobotList_default_instance_;
    new (ptr) ::CMD_S_RobotList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_S_RobotList_WPBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_S_RobotList_WPBY_2eproto}, {}};

static void InitDefaultsscc_info_CMD_S_RobotShoot_WPBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMD_S_RobotShoot_default_instance_;
    new (ptr) ::CMD_S_RobotShoot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_S_RobotShoot_WPBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_S_RobotShoot_WPBY_2eproto}, {}};

static void InitDefaultsscc_info_CMD_S_ShootLK_WPBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMD_S_ShootLK_default_instance_;
    new (ptr) ::CMD_S_ShootLK();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_S_ShootLK_WPBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_S_ShootLK_WPBY_2eproto}, {}};

static void InitDefaultsscc_info_CMD_S_ShuiHuZhuan_WPBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMD_S_ShuiHuZhuan_default_instance_;
    new (ptr) ::CMD_S_ShuiHuZhuan();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_S_ShuiHuZhuan_WPBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_S_ShuiHuZhuan_WPBY_2eproto}, {}};

static void InitDefaultsscc_info_CMD_S_TongLeiZhaDan_WPBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMD_S_TongLeiZhaDan_default_instance_;
    new (ptr) ::CMD_S_TongLeiZhaDan();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_S_TongLeiZhaDan_WPBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_S_TongLeiZhaDan_WPBY_2eproto}, {}};

static void InitDefaultsscc_info_CMD_S_YiWangDaJin_WPBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMD_S_YiWangDaJin_default_instance_;
    new (ptr) ::CMD_S_YiWangDaJin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_S_YiWangDaJin_WPBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_S_YiWangDaJin_WPBY_2eproto}, {}};

static void InitDefaultsscc_info_CMD_S_YuChaoCome_WPBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMD_S_YuChaoCome_default_instance_;
    new (ptr) ::CMD_S_YuChaoCome();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMD_S_YuChaoCome_WPBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMD_S_YuChaoCome_WPBY_2eproto}, {
      &scc_info_FishTide_WPBY_2eproto.base,}};

static void InitDefaultsscc_info_CMD_S_YuWang_WPBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMD_S_YuWang_default_instance_;
    new (ptr) ::CMD_S_YuWang();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMD_S_YuWang_WPBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMD_S_YuWang_WPBY_2eproto}, {
      &scc_info_LoadFish_WPBY_2eproto.base,}};

static void InitDefaultsscc_info_CMD_S_ZhongYiTang_WPBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMD_S_ZhongYiTang_default_instance_;
    new (ptr) ::CMD_S_ZhongYiTang();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_S_ZhongYiTang_WPBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_S_ZhongYiTang_WPBY_2eproto}, {}};

static void InitDefaultsscc_info_FishDeadInfo_WPBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FishDeadInfo_default_instance_;
    new (ptr) ::FishDeadInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FishDeadInfo_WPBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FishDeadInfo_WPBY_2eproto}, {}};

static void InitDefaultsscc_info_FishLineInfo_WPBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FishLineInfo_default_instance_;
    new (ptr) ::FishLineInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FishLineInfo_WPBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FishLineInfo_WPBY_2eproto}, {
      &scc_info_LineInfo_WPBY_2eproto.base,}};

static void InitDefaultsscc_info_FishPoint_WPBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FishPoint_default_instance_;
    new (ptr) ::FishPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FishPoint_WPBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FishPoint_WPBY_2eproto}, {}};

static void InitDefaultsscc_info_FishTide_WPBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FishTide_default_instance_;
    new (ptr) ::FishTide();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FishTide_WPBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FishTide_WPBY_2eproto}, {
      &scc_info_FishLineInfo_WPBY_2eproto.base,}};

static void InitDefaultsscc_info_LineInfo_WPBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LineInfo_default_instance_;
    new (ptr) ::LineInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LineInfo_WPBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LineInfo_WPBY_2eproto}, {
      &scc_info_FishPoint_WPBY_2eproto.base,}};

static void InitDefaultsscc_info_LoadFish_WPBY_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LoadFish_default_instance_;
    new (ptr) ::LoadFish();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadFish_WPBY_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoadFish_WPBY_2eproto}, {
      &scc_info_FishPoint_WPBY_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_WPBY_2eproto[35];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_WPBY_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_WPBY_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_WPBY_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMD_S_RobotShoot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMD_S_RobotShoot, chair_id_),
  PROTOBUF_FIELD_OFFSET(::CMD_S_RobotShoot, level_),
  PROTOBUF_FIELD_OFFSET(::CMD_S_RobotShoot, type_),
  PROTOBUF_FIELD_OFFSET(::CMD_S_RobotShoot, is_lock_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMD_S_RobotList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMD_S_RobotList, is_robot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMD_S_PlayerLock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMD_S_PlayerLock, chair_id_),
  PROTOBUF_FIELD_OFFSET(::CMD_S_PlayerLock, fish_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FishPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FishPoint, x_),
  PROTOBUF_FIELD_OFFSET(::FishPoint, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LineInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LineInfo, type_),
  PROTOBUF_FIELD_OFFSET(::LineInfo, points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FishLineInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FishLineInfo, line_),
  PROTOBUF_FIELD_OFFSET(::FishLineInfo, kind_),
  PROTOBUF_FIELD_OFFSET(::FishLineInfo, start_delay_time_),
  PROTOBUF_FIELD_OFFSET(::FishLineInfo, delay_time_),
  PROTOBUF_FIELD_OFFSET(::FishLineInfo, fish_num_),
  PROTOBUF_FIELD_OFFSET(::FishLineInfo, lived_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FishTide, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FishTide, fish_tide_start_time_),
  PROTOBUF_FIELD_OFFSET(::FishTide, fish_tide_cur_time_),
  PROTOBUF_FIELD_OFFSET(::FishTide, fish_tide_turn_),
  PROTOBUF_FIELD_OFFSET(::FishTide, line_num_),
  PROTOBUF_FIELD_OFFSET(::FishTide, fish_lines_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMD_S_YuChaoCome, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMD_S_YuChaoCome, yu_chao_id_),
  PROTOBUF_FIELD_OFFSET(::CMD_S_YuChaoCome, fish_tide_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMD_S_ShootLK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMD_S_ShootLK, chair_id_),
  PROTOBUF_FIELD_OFFSET(::CMD_S_ShootLK, id_),
  PROTOBUF_FIELD_OFFSET(::CMD_S_ShootLK, score_),
  PROTOBUF_FIELD_OFFSET(::CMD_S_ShootLK, multiple_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMD_S_JuBuZhaDan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMD_S_JuBuZhaDan, chair_id_),
  PROTOBUF_FIELD_OFFSET(::CMD_S_JuBuZhaDan, fish_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMD_S_YiWangDaJin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMD_S_YiWangDaJin, chair_id_),
  PROTOBUF_FIELD_OFFSET(::CMD_S_YiWangDaJin, bullet_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMD_S_TongLeiZhaDan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMD_S_TongLeiZhaDan, chair_id_),
  PROTOBUF_FIELD_OFFSET(::CMD_S_TongLeiZhaDan, fish_id_),
  PROTOBUF_FIELD_OFFSET(::CMD_S_TongLeiZhaDan, kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LoadFish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LoadFish, kind_),
  PROTOBUF_FIELD_OFFSET(::LoadFish, id_),
  PROTOBUF_FIELD_OFFSET(::LoadFish, create_time_),
  PROTOBUF_FIELD_OFFSET(::LoadFish, continue_time_),
  PROTOBUF_FIELD_OFFSET(::LoadFish, fish_point_),
  PROTOBUF_FIELD_OFFSET(::LoadFish, now_time_),
  PROTOBUF_FIELD_OFFSET(::LoadFish, mul_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMD_S_YuWang, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMD_S_YuWang, chair_id_),
  PROTOBUF_FIELD_OFFSET(::CMD_S_YuWang, kind_),
  PROTOBUF_FIELD_OFFSET(::CMD_S_YuWang, yu_wang_id_),
  PROTOBUF_FIELD_OFFSET(::CMD_S_YuWang, fish_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMD_S_DaSiXi, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMD_S_DaSiXi, id_),
  PROTOBUF_FIELD_OFFSET(::CMD_S_DaSiXi, chair_id_),
  PROTOBUF_FIELD_OFFSET(::CMD_S_DaSiXi, score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMD_S_DaSanYuan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMD_S_DaSanYuan, id_),
  PROTOBUF_FIELD_OFFSET(::CMD_S_DaSanYuan, chair_id_),
  PROTOBUF_FIELD_OFFSET(::CMD_S_DaSanYuan, score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMD_S_ZhongYiTang, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMD_S_ZhongYiTang, chair_id_),
  PROTOBUF_FIELD_OFFSET(::CMD_S_ZhongYiTang, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMD_S_ShuiHuZhuan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMD_S_ShuiHuZhuan, chair_id_),
  PROTOBUF_FIELD_OFFSET(::CMD_S_ShuiHuZhuan, fish_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMD_S_ChangeBulletLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMD_S_ChangeBulletLevel, chair_id_),
  PROTOBUF_FIELD_OFFSET(::CMD_S_ChangeBulletLevel, gun_type_),
  PROTOBUF_FIELD_OFFSET(::CMD_S_ChangeBulletLevel, gun_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMD_S_CONFIG, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMD_S_CONFIG, bullet_score_),
  PROTOBUF_FIELD_OFFSET(::CMD_S_CONFIG, background_picture_id_),
  PROTOBUF_FIELD_OFFSET(::CMD_S_CONFIG, player_lock_fish_id_),
  PROTOBUF_FIELD_OFFSET(::CMD_S_CONFIG, player_cur_score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMD_S_PlayerGunLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMD_S_PlayerGunLevel, gun_level_),
  PROTOBUF_FIELD_OFFSET(::CMD_S_PlayerGunLevel, gun_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMD_S_AddFish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMD_S_AddFish, load_fish_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMD_S_PlayerEnter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMD_S_PlayerEnter, load_fish_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FishDeadInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FishDeadInfo, id_),
  PROTOBUF_FIELD_OFFSET(::FishDeadInfo, score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMD_S_FishDead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMD_S_FishDead, chair_id_),
  PROTOBUF_FIELD_OFFSET(::CMD_S_FishDead, fish_),
  PROTOBUF_FIELD_OFFSET(::CMD_S_FishDead, score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMD_S_PlayerShoot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMD_S_PlayerShoot, chair_id_),
  PROTOBUF_FIELD_OFFSET(::CMD_S_PlayerShoot, x_),
  PROTOBUF_FIELD_OFFSET(::CMD_S_PlayerShoot, y_),
  PROTOBUF_FIELD_OFFSET(::CMD_S_PlayerShoot, level_),
  PROTOBUF_FIELD_OFFSET(::CMD_S_PlayerShoot, type_),
  PROTOBUF_FIELD_OFFSET(::CMD_S_PlayerShoot, player_cur_score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMD_C_RobotShoot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMD_C_RobotShoot, chair_id_),
  PROTOBUF_FIELD_OFFSET(::CMD_C_RobotShoot, level_),
  PROTOBUF_FIELD_OFFSET(::CMD_C_RobotShoot, type_),
  PROTOBUF_FIELD_OFFSET(::CMD_C_RobotShoot, is_lock_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMD_C_PlayerLock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMD_C_PlayerLock, chair_id_),
  PROTOBUF_FIELD_OFFSET(::CMD_C_PlayerLock, fish_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMD_C_JuBuZhaDan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMD_C_JuBuZhaDan, chair_id_),
  PROTOBUF_FIELD_OFFSET(::CMD_C_JuBuZhaDan, te_shu_iu_id_),
  PROTOBUF_FIELD_OFFSET(::CMD_C_JuBuZhaDan, fish_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMD_C_TongLeiZhaDan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMD_C_TongLeiZhaDan, chair_id_),
  PROTOBUF_FIELD_OFFSET(::CMD_C_TongLeiZhaDan, te_shu_iu_id_),
  PROTOBUF_FIELD_OFFSET(::CMD_C_TongLeiZhaDan, fish_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMD_C_ShuiHuZhuan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMD_C_ShuiHuZhuan, chair_id_),
  PROTOBUF_FIELD_OFFSET(::CMD_C_ShuiHuZhuan, te_shu_iu_id_),
  PROTOBUF_FIELD_OFFSET(::CMD_C_ShuiHuZhuan, fish_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMD_C_ChangeBulletLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMD_C_ChangeBulletLevel, chair_id_),
  PROTOBUF_FIELD_OFFSET(::CMD_C_ChangeBulletLevel, gun_type_),
  PROTOBUF_FIELD_OFFSET(::CMD_C_ChangeBulletLevel, gun_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Bullet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Bullet, id_),
  PROTOBUF_FIELD_OFFSET(::Bullet, bullet_kind_),
  PROTOBUF_FIELD_OFFSET(::Bullet, is_use_),
  PROTOBUF_FIELD_OFFSET(::Bullet, level_),
  PROTOBUF_FIELD_OFFSET(::Bullet, type_),
  PROTOBUF_FIELD_OFFSET(::Bullet, chips_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMD_C_PressShoot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMD_C_PressShoot, x_),
  PROTOBUF_FIELD_OFFSET(::CMD_C_PressShoot, y_),
  PROTOBUF_FIELD_OFFSET(::CMD_C_PressShoot, chair_id_),
  PROTOBUF_FIELD_OFFSET(::CMD_C_PressShoot, bullet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMD_C_HitedFish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMD_C_HitedFish, bullet_),
  PROTOBUF_FIELD_OFFSET(::CMD_C_HitedFish, chair_id_),
  PROTOBUF_FIELD_OFFSET(::CMD_C_HitedFish, hit_fish_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CMD_S_RobotShoot)},
  { 9, -1, sizeof(::CMD_S_RobotList)},
  { 15, -1, sizeof(::CMD_S_PlayerLock)},
  { 22, -1, sizeof(::FishPoint)},
  { 29, -1, sizeof(::LineInfo)},
  { 36, -1, sizeof(::FishLineInfo)},
  { 47, -1, sizeof(::FishTide)},
  { 57, -1, sizeof(::CMD_S_YuChaoCome)},
  { 64, -1, sizeof(::CMD_S_ShootLK)},
  { 73, -1, sizeof(::CMD_S_JuBuZhaDan)},
  { 80, -1, sizeof(::CMD_S_YiWangDaJin)},
  { 87, -1, sizeof(::CMD_S_TongLeiZhaDan)},
  { 95, -1, sizeof(::LoadFish)},
  { 107, -1, sizeof(::CMD_S_YuWang)},
  { 116, -1, sizeof(::CMD_S_DaSiXi)},
  { 124, -1, sizeof(::CMD_S_DaSanYuan)},
  { 132, -1, sizeof(::CMD_S_ZhongYiTang)},
  { 139, -1, sizeof(::CMD_S_ShuiHuZhuan)},
  { 146, -1, sizeof(::CMD_S_ChangeBulletLevel)},
  { 154, -1, sizeof(::CMD_S_CONFIG)},
  { 163, -1, sizeof(::CMD_S_PlayerGunLevel)},
  { 170, -1, sizeof(::CMD_S_AddFish)},
  { 176, -1, sizeof(::CMD_S_PlayerEnter)},
  { 182, -1, sizeof(::FishDeadInfo)},
  { 189, -1, sizeof(::CMD_S_FishDead)},
  { 197, -1, sizeof(::CMD_S_PlayerShoot)},
  { 208, -1, sizeof(::CMD_C_RobotShoot)},
  { 217, -1, sizeof(::CMD_C_PlayerLock)},
  { 224, -1, sizeof(::CMD_C_JuBuZhaDan)},
  { 232, -1, sizeof(::CMD_C_TongLeiZhaDan)},
  { 240, -1, sizeof(::CMD_C_ShuiHuZhuan)},
  { 248, -1, sizeof(::CMD_C_ChangeBulletLevel)},
  { 256, -1, sizeof(::Bullet)},
  { 267, -1, sizeof(::CMD_C_PressShoot)},
  { 276, -1, sizeof(::CMD_C_HitedFish)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMD_S_RobotShoot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMD_S_RobotList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMD_S_PlayerLock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FishPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LineInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FishLineInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FishTide_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMD_S_YuChaoCome_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMD_S_ShootLK_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMD_S_JuBuZhaDan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMD_S_YiWangDaJin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMD_S_TongLeiZhaDan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LoadFish_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMD_S_YuWang_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMD_S_DaSiXi_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMD_S_DaSanYuan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMD_S_ZhongYiTang_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMD_S_ShuiHuZhuan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMD_S_ChangeBulletLevel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMD_S_CONFIG_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMD_S_PlayerGunLevel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMD_S_AddFish_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMD_S_PlayerEnter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FishDeadInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMD_S_FishDead_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMD_S_PlayerShoot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMD_C_RobotShoot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMD_C_PlayerLock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMD_C_JuBuZhaDan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMD_C_TongLeiZhaDan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMD_C_ShuiHuZhuan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMD_C_ChangeBulletLevel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Bullet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMD_C_PressShoot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMD_C_HitedFish_default_instance_),
};

const char descriptor_table_protodef_WPBY_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nWPBY.proto\"R\n\020CMD_S_RobotShoot\022\020\n\010chai"
  "r_id\030\001 \001(\005\022\r\n\005level\030\002 \001(\005\022\014\n\004type\030\003 \001(\005\022"
  "\017\n\007is_lock\030\004 \001(\005\"#\n\017CMD_S_RobotList\022\020\n\010i"
  "s_robot\030\001 \003(\010\"5\n\020CMD_S_PlayerLock\022\020\n\010cha"
  "ir_id\030\001 \001(\005\022\017\n\007fish_id\030\002 \001(\005\"!\n\tFishPoin"
  "t\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\"4\n\010LineInfo\022\014\n\004t"
  "ype\030\001 \001(\005\022\032\n\006points\030\002 \003(\0132\n.FishPoint\"\211\001"
  "\n\014FishLineInfo\022\027\n\004line\030\001 \001(\0132\t.LineInfo\022"
  "\014\n\004kind\030\002 \001(\005\022\030\n\020start_delay_time\030\003 \001(\005\022"
  "\022\n\ndelay_time\030\004 \001(\005\022\020\n\010fish_num\030\005 \001(\005\022\022\n"
  "\nlived_time\030\006 \001(\005\"\221\001\n\010FishTide\022\034\n\024fish_t"
  "ide_start_time\030\001 \001(\003\022\032\n\022fish_tide_cur_ti"
  "me\030\002 \001(\003\022\026\n\016fish_tide_turn\030\003 \001(\005\022\020\n\010line"
  "_num\030\004 \001(\005\022!\n\nfish_lines\030\005 \003(\0132\r.FishLin"
  "eInfo\"D\n\020CMD_S_YuChaoCome\022\022\n\nyu_chao_id\030"
  "\001 \001(\005\022\034\n\tfish_tide\030\002 \001(\0132\t.FishTide\"N\n\rC"
  "MD_S_ShootLK\022\020\n\010chair_id\030\001 \001(\005\022\n\n\002id\030\002 \001"
  "(\005\022\r\n\005score\030\003 \001(\005\022\020\n\010multiple\030\004 \001(\005\"5\n\020C"
  "MD_S_JuBuZhaDan\022\020\n\010chair_id\030\001 \001(\005\022\017\n\007fis"
  "h_id\030\002 \001(\005\"8\n\021CMD_S_YiWangDaJin\022\020\n\010chair"
  "_id\030\001 \001(\005\022\021\n\tbullet_id\030\002 \001(\005\"F\n\023CMD_S_To"
  "ngLeiZhaDan\022\020\n\010chair_id\030\001 \001(\005\022\017\n\007fish_id"
  "\030\002 \001(\005\022\014\n\004kind\030\003 \001(\005\"\217\001\n\010LoadFish\022\014\n\004kin"
  "d\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\023\n\013create_time\030\003 \001(\005"
  "\022\025\n\rcontinue_time\030\004 \001(\005\022\036\n\nfish_point\030\005 "
  "\003(\0132\n.FishPoint\022\020\n\010now_time\030\006 \001(\005\022\013\n\003mul"
  "\030\007 \001(\005\"^\n\014CMD_S_YuWang\022\020\n\010chair_id\030\001 \001(\005"
  "\022\014\n\004kind\030\002 \001(\005\022\022\n\nyu_wang_id\030\003 \001(\005\022\032\n\007fi"
  "sh_id\030\004 \003(\0132\t.LoadFish\";\n\014CMD_S_DaSiXi\022\n"
  "\n\002id\030\001 \001(\005\022\020\n\010chair_id\030\002 \001(\005\022\r\n\005score\030\003 "
  "\001(\005\">\n\017CMD_S_DaSanYuan\022\n\n\002id\030\001 \001(\005\022\020\n\010ch"
  "air_id\030\002 \001(\005\022\r\n\005score\030\003 \001(\005\"3\n\021CMD_S_Zho"
  "ngYiTang\022\020\n\010chair_id\030\001 \001(\005\022\014\n\004time\030\002 \001(\005"
  "\"6\n\021CMD_S_ShuiHuZhuan\022\020\n\010chair_id\030\001 \001(\005\022"
  "\017\n\007fish_id\030\002 \001(\005\"P\n\027CMD_S_ChangeBulletLe"
  "vel\022\020\n\010chair_id\030\001 \001(\005\022\020\n\010gun_type\030\002 \001(\005\022"
  "\021\n\tgun_level\030\003 \001(\005\"z\n\014CMD_S_CONFIG\022\024\n\014bu"
  "llet_score\030\001 \003(\005\022\035\n\025background_picture_i"
  "d\030\002 \001(\005\022\033\n\023player_lock_fish_id\030\003 \003(\005\022\030\n\020"
  "player_cur_score\030\004 \003(\003\";\n\024CMD_S_PlayerGu"
  "nLevel\022\021\n\tgun_level\030\001 \003(\005\022\020\n\010gun_type\030\002 "
  "\003(\005\"-\n\rCMD_S_AddFish\022\034\n\tload_fish\030\001 \003(\0132"
  "\t.LoadFish\"1\n\021CMD_S_PlayerEnter\022\034\n\tload_"
  "fish\030\001 \003(\0132\t.LoadFish\")\n\014FishDeadInfo\022\n\n"
  "\002id\030\001 \001(\005\022\r\n\005score\030\002 \001(\005\"N\n\016CMD_S_FishDe"
  "ad\022\020\n\010chair_id\030\001 \001(\005\022\033\n\004fish\030\002 \003(\0132\r.Fis"
  "hDeadInfo\022\r\n\005score\030\003 \001(\003\"r\n\021CMD_S_Player"
  "Shoot\022\020\n\010chair_id\030\001 \001(\005\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030"
  "\003 \001(\002\022\r\n\005level\030\004 \001(\005\022\014\n\004type\030\005 \001(\005\022\030\n\020pl"
  "ayer_cur_score\030\006 \001(\003\"R\n\020CMD_C_RobotShoot"
  "\022\020\n\010chair_id\030\001 \001(\005\022\r\n\005level\030\002 \001(\005\022\014\n\004typ"
  "e\030\003 \001(\005\022\017\n\007is_lock\030\004 \001(\005\"5\n\020CMD_C_Player"
  "Lock\022\020\n\010chair_id\030\001 \001(\005\022\017\n\007fish_id\030\002 \001(\005\""
  "K\n\020CMD_C_JuBuZhaDan\022\020\n\010chair_id\030\001 \001(\005\022\024\n"
  "\014te_shu_iu_id\030\002 \001(\005\022\017\n\007fish_id\030\003 \003(\005\"N\n\023"
  "CMD_C_TongLeiZhaDan\022\020\n\010chair_id\030\001 \001(\005\022\024\n"
  "\014te_shu_iu_id\030\002 \001(\005\022\017\n\007fish_id\030\003 \003(\005\"L\n\021"
  "CMD_C_ShuiHuZhuan\022\020\n\010chair_id\030\001 \001(\005\022\024\n\014t"
  "e_shu_iu_id\030\002 \001(\005\022\017\n\007fish_id\030\003 \003(\005\"P\n\027CM"
  "D_C_ChangeBulletLevel\022\020\n\010chair_id\030\001 \001(\005\022"
  "\020\n\010gun_type\030\002 \001(\005\022\021\n\tgun_level\030\003 \001(\005\"e\n\006"
  "Bullet\022\n\n\002id\030\001 \001(\005\022\023\n\013bullet_kind\030\002 \001(\005\022"
  "\016\n\006is_use\030\003 \001(\005\022\r\n\005level\030\004 \001(\005\022\014\n\004type\030\005"
  " \001(\005\022\r\n\005chips\030\006 \001(\005\"S\n\020CMD_C_PressShoot\022"
  "\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\020\n\010chair_id\030\003 \001(\005\022"
  "\027\n\006bullet\030\004 \001(\0132\007.Bullet\"N\n\017CMD_C_HitedF"
  "ish\022\027\n\006bullet\030\001 \001(\0132\007.Bullet\022\020\n\010chair_id"
  "\030\002 \001(\005\022\020\n\010hit_fish\030\003 \003(\005*\364\007\n\rEMsgIDSubGa"
  "me\022\025\n\021MsgIDSubGame_Null\020\000\022\024\n\016SUB_S_CanSh"
  "oot\020\350\376\002\022\025\n\017SUB_S_CantShoot\020\351\376\002\022\026\n\020SUB_C_"
  "RobotShoot\020\352\376\002\022\026\n\020SUB_S_GAME_START\020\321\206\003\022\024"
  "\n\016SUB_S_ADD_FISH\020\322\206\003\022\025\n\017SUB_S_FISH_DEAD\020"
  "\323\206\003\022\030\n\022SUB_S_PLAYER_SHOOT\020\324\206\003\022\022\n\014SUB_S_C"
  "ONFIG\020\325\206\003\022\035\n\027SUB_S_CHANGEBULLETLEVEL\020\326\206\003"
  "\022\027\n\021SUB_S_SHUIHUZHUAN\020\327\206\003\022\027\n\021SUB_S_ZHONG"
  "YITANG\020\330\206\003\022\025\n\017SUB_S_DASANYUAN\020\331\206\003\022\022\n\014SUB"
  "_S_DASIXI\020\332\206\003\022\022\n\014SUB_S_YUWANG\020\333\206\003\022\031\n\023SUB"
  "_S_TONGLEIZHADAN\020\334\206\003\022\027\n\021SUB_S_YIWANGDAJI"
  "N\020\335\206\003\022\026\n\020SUB_S_JUBUZHADAN\020\336\206\003\022\030\n\022SUB_S_P"
  "LAYER_ENTER\020\337\206\003\022\024\n\016SUB_S_SHOOT_LK\020\340\206\003\022\026\n"
  "\020SUB_S_YUCHAOCOME\020\341\206\003\022\025\n\017SUB_S_YUCHAOPRE"
  "\020\342\206\003\022\032\n\024SUB_S_PLAYERGUNLEVEL\020\343\206\003\022\026\n\020SUB_"
  "S_PlayerLock\020\344\206\003\022\034\n\026SUB_S_PlayerCancelLo"
  "ck\020\345\206\003\022\025\n\017SUB_S_RobotCome\020\346\206\003\022\025\n\017SUB_S_R"
  "obotList\020\347\206\003\022\026\n\020SUB_S_RobotShoot\020\350\206\003\022\037\n\031"
  "SUB_S_RobotMoneyNotEnough\020\351\206\003\022\033\n\025SUB_S_P"
  "LAYER_YC_ENTER\020\352\206\003\022\035\n\027SUB_S_CHECK_ROBOT_"
  "LEAVE\020\353\206\003\022\027\n\021SUB_C_PRESS_SHOOT\020\264\207\003\022\026\n\020SU"
  "B_C_HITED_FISH\020\265\207\003\022\035\n\027SUB_C_CHANGEBULLET"
  "LEVEL\020\266\207\003\022\027\n\021SUB_C_SHUIHUZHUAN\020\267\207\003\022\022\n\014SU"
  "B_C_YUWANG\020\270\207\003\022\031\n\023SUB_C_TONGLEIZHADAN\020\271\207"
  "\003\022\026\n\020SUB_C_JUBUZHADAN\020\272\207\003\022\026\n\020SUB_C_Playe"
  "rLock\020\273\207\003\022\034\n\026SUB_C_PlayerCancelLock\020\274\207\003b"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_WPBY_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_WPBY_2eproto_sccs[35] = {
  &scc_info_Bullet_WPBY_2eproto.base,
  &scc_info_CMD_C_ChangeBulletLevel_WPBY_2eproto.base,
  &scc_info_CMD_C_HitedFish_WPBY_2eproto.base,
  &scc_info_CMD_C_JuBuZhaDan_WPBY_2eproto.base,
  &scc_info_CMD_C_PlayerLock_WPBY_2eproto.base,
  &scc_info_CMD_C_PressShoot_WPBY_2eproto.base,
  &scc_info_CMD_C_RobotShoot_WPBY_2eproto.base,
  &scc_info_CMD_C_ShuiHuZhuan_WPBY_2eproto.base,
  &scc_info_CMD_C_TongLeiZhaDan_WPBY_2eproto.base,
  &scc_info_CMD_S_AddFish_WPBY_2eproto.base,
  &scc_info_CMD_S_CONFIG_WPBY_2eproto.base,
  &scc_info_CMD_S_ChangeBulletLevel_WPBY_2eproto.base,
  &scc_info_CMD_S_DaSanYuan_WPBY_2eproto.base,
  &scc_info_CMD_S_DaSiXi_WPBY_2eproto.base,
  &scc_info_CMD_S_FishDead_WPBY_2eproto.base,
  &scc_info_CMD_S_JuBuZhaDan_WPBY_2eproto.base,
  &scc_info_CMD_S_PlayerEnter_WPBY_2eproto.base,
  &scc_info_CMD_S_PlayerGunLevel_WPBY_2eproto.base,
  &scc_info_CMD_S_PlayerLock_WPBY_2eproto.base,
  &scc_info_CMD_S_PlayerShoot_WPBY_2eproto.base,
  &scc_info_CMD_S_RobotList_WPBY_2eproto.base,
  &scc_info_CMD_S_RobotShoot_WPBY_2eproto.base,
  &scc_info_CMD_S_ShootLK_WPBY_2eproto.base,
  &scc_info_CMD_S_ShuiHuZhuan_WPBY_2eproto.base,
  &scc_info_CMD_S_TongLeiZhaDan_WPBY_2eproto.base,
  &scc_info_CMD_S_YiWangDaJin_WPBY_2eproto.base,
  &scc_info_CMD_S_YuChaoCome_WPBY_2eproto.base,
  &scc_info_CMD_S_YuWang_WPBY_2eproto.base,
  &scc_info_CMD_S_ZhongYiTang_WPBY_2eproto.base,
  &scc_info_FishDeadInfo_WPBY_2eproto.base,
  &scc_info_FishLineInfo_WPBY_2eproto.base,
  &scc_info_FishPoint_WPBY_2eproto.base,
  &scc_info_FishTide_WPBY_2eproto.base,
  &scc_info_LineInfo_WPBY_2eproto.base,
  &scc_info_LoadFish_WPBY_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_WPBY_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_WPBY_2eproto = {
  false, false, descriptor_table_protodef_WPBY_2eproto, "WPBY.proto", 3727,
  &descriptor_table_WPBY_2eproto_once, descriptor_table_WPBY_2eproto_sccs, descriptor_table_WPBY_2eproto_deps, 35, 0,
  schemas, file_default_instances, TableStruct_WPBY_2eproto::offsets,
  file_level_metadata_WPBY_2eproto, 35, file_level_enum_descriptors_WPBY_2eproto, file_level_service_descriptors_WPBY_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_WPBY_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_WPBY_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDSubGame_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_WPBY_2eproto);
  return file_level_enum_descriptors_WPBY_2eproto[0];
}
bool EMsgIDSubGame_IsValid(int value) {
  switch (value) {
    case 0:
    case 49000:
    case 49001:
    case 49002:
    case 50001:
    case 50002:
    case 50003:
    case 50004:
    case 50005:
    case 50006:
    case 50007:
    case 50008:
    case 50009:
    case 50010:
    case 50011:
    case 50012:
    case 50013:
    case 50014:
    case 50015:
    case 50016:
    case 50017:
    case 50018:
    case 50019:
    case 50020:
    case 50021:
    case 50022:
    case 50023:
    case 50024:
    case 50025:
    case 50026:
    case 50027:
    case 50100:
    case 50101:
    case 50102:
    case 50103:
    case 50104:
    case 50105:
    case 50106:
    case 50107:
    case 50108:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMD_S_RobotShoot::_Internal {
 public:
};

CMD_S_RobotShoot::CMD_S_RobotShoot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMD_S_RobotShoot)
}
CMD_S_RobotShoot::CMD_S_RobotShoot(const CMD_S_RobotShoot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_lock_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(is_lock_));
  // @@protoc_insertion_point(copy_constructor:CMD_S_RobotShoot)
}

void CMD_S_RobotShoot::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_lock_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(is_lock_));
}

CMD_S_RobotShoot::~CMD_S_RobotShoot() {
  // @@protoc_insertion_point(destructor:CMD_S_RobotShoot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_S_RobotShoot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_S_RobotShoot::ArenaDtor(void* object) {
  CMD_S_RobotShoot* _this = reinterpret_cast< CMD_S_RobotShoot* >(object);
  (void)_this;
}
void CMD_S_RobotShoot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_S_RobotShoot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_S_RobotShoot& CMD_S_RobotShoot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_S_RobotShoot_WPBY_2eproto.base);
  return *internal_default_instance();
}


void CMD_S_RobotShoot::Clear() {
// @@protoc_insertion_point(message_clear_start:CMD_S_RobotShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_lock_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(is_lock_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_S_RobotShoot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_lock = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_lock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_S_RobotShoot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMD_S_RobotShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int32 level = 2;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_level(), target);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // int32 is_lock = 4;
  if (this->is_lock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_is_lock(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMD_S_RobotShoot)
  return target;
}

size_t CMD_S_RobotShoot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMD_S_RobotShoot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 is_lock = 4;
  if (this->is_lock() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_lock());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_S_RobotShoot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMD_S_RobotShoot)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_S_RobotShoot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_S_RobotShoot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMD_S_RobotShoot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMD_S_RobotShoot)
    MergeFrom(*source);
  }
}

void CMD_S_RobotShoot::MergeFrom(const CMD_S_RobotShoot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMD_S_RobotShoot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.is_lock() != 0) {
    _internal_set_is_lock(from._internal_is_lock());
  }
}

void CMD_S_RobotShoot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMD_S_RobotShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_S_RobotShoot::CopyFrom(const CMD_S_RobotShoot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMD_S_RobotShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S_RobotShoot::IsInitialized() const {
  return true;
}

void CMD_S_RobotShoot::InternalSwap(CMD_S_RobotShoot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_S_RobotShoot, is_lock_)
      + sizeof(CMD_S_RobotShoot::is_lock_)
      - PROTOBUF_FIELD_OFFSET(CMD_S_RobotShoot, chair_id_)>(
          reinterpret_cast<char*>(&chair_id_),
          reinterpret_cast<char*>(&other->chair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_S_RobotShoot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_S_RobotList::_Internal {
 public:
};

CMD_S_RobotList::CMD_S_RobotList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  is_robot_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMD_S_RobotList)
}
CMD_S_RobotList::CMD_S_RobotList(const CMD_S_RobotList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      is_robot_(from.is_robot_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMD_S_RobotList)
}

void CMD_S_RobotList::SharedCtor() {
}

CMD_S_RobotList::~CMD_S_RobotList() {
  // @@protoc_insertion_point(destructor:CMD_S_RobotList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_S_RobotList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_S_RobotList::ArenaDtor(void* object) {
  CMD_S_RobotList* _this = reinterpret_cast< CMD_S_RobotList* >(object);
  (void)_this;
}
void CMD_S_RobotList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_S_RobotList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_S_RobotList& CMD_S_RobotList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_S_RobotList_WPBY_2eproto.base);
  return *internal_default_instance();
}


void CMD_S_RobotList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMD_S_RobotList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_robot_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_S_RobotList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bool is_robot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_is_robot(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_is_robot(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_S_RobotList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMD_S_RobotList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool is_robot = 1;
  if (this->_internal_is_robot_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_is_robot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMD_S_RobotList)
  return target;
}

size_t CMD_S_RobotList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMD_S_RobotList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool is_robot = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_is_robot_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _is_robot_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_S_RobotList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMD_S_RobotList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_S_RobotList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_S_RobotList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMD_S_RobotList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMD_S_RobotList)
    MergeFrom(*source);
  }
}

void CMD_S_RobotList::MergeFrom(const CMD_S_RobotList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMD_S_RobotList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  is_robot_.MergeFrom(from.is_robot_);
}

void CMD_S_RobotList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMD_S_RobotList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_S_RobotList::CopyFrom(const CMD_S_RobotList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMD_S_RobotList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S_RobotList::IsInitialized() const {
  return true;
}

void CMD_S_RobotList::InternalSwap(CMD_S_RobotList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  is_robot_.InternalSwap(&other->is_robot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_S_RobotList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_S_PlayerLock::_Internal {
 public:
};

CMD_S_PlayerLock::CMD_S_PlayerLock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMD_S_PlayerLock)
}
CMD_S_PlayerLock::CMD_S_PlayerLock(const CMD_S_PlayerLock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&fish_id_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(fish_id_));
  // @@protoc_insertion_point(copy_constructor:CMD_S_PlayerLock)
}

void CMD_S_PlayerLock::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&fish_id_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(fish_id_));
}

CMD_S_PlayerLock::~CMD_S_PlayerLock() {
  // @@protoc_insertion_point(destructor:CMD_S_PlayerLock)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_S_PlayerLock::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_S_PlayerLock::ArenaDtor(void* object) {
  CMD_S_PlayerLock* _this = reinterpret_cast< CMD_S_PlayerLock* >(object);
  (void)_this;
}
void CMD_S_PlayerLock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_S_PlayerLock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_S_PlayerLock& CMD_S_PlayerLock::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_S_PlayerLock_WPBY_2eproto.base);
  return *internal_default_instance();
}


void CMD_S_PlayerLock::Clear() {
// @@protoc_insertion_point(message_clear_start:CMD_S_PlayerLock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fish_id_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(fish_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_S_PlayerLock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fish_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_S_PlayerLock::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMD_S_PlayerLock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int32 fish_id = 2;
  if (this->fish_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fish_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMD_S_PlayerLock)
  return target;
}

size_t CMD_S_PlayerLock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMD_S_PlayerLock)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 fish_id = 2;
  if (this->fish_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_S_PlayerLock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMD_S_PlayerLock)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_S_PlayerLock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_S_PlayerLock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMD_S_PlayerLock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMD_S_PlayerLock)
    MergeFrom(*source);
  }
}

void CMD_S_PlayerLock::MergeFrom(const CMD_S_PlayerLock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMD_S_PlayerLock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.fish_id() != 0) {
    _internal_set_fish_id(from._internal_fish_id());
  }
}

void CMD_S_PlayerLock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMD_S_PlayerLock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_S_PlayerLock::CopyFrom(const CMD_S_PlayerLock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMD_S_PlayerLock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S_PlayerLock::IsInitialized() const {
  return true;
}

void CMD_S_PlayerLock::InternalSwap(CMD_S_PlayerLock* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_S_PlayerLock, fish_id_)
      + sizeof(CMD_S_PlayerLock::fish_id_)
      - PROTOBUF_FIELD_OFFSET(CMD_S_PlayerLock, chair_id_)>(
          reinterpret_cast<char*>(&chair_id_),
          reinterpret_cast<char*>(&other->chair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_S_PlayerLock::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FishPoint::_Internal {
 public:
};

FishPoint::FishPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FishPoint)
}
FishPoint::FishPoint(const FishPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:FishPoint)
}

void FishPoint::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

FishPoint::~FishPoint() {
  // @@protoc_insertion_point(destructor:FishPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FishPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FishPoint::ArenaDtor(void* object) {
  FishPoint* _this = reinterpret_cast< FishPoint* >(object);
  (void)_this;
}
void FishPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FishPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FishPoint& FishPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FishPoint_WPBY_2eproto.base);
  return *internal_default_instance();
}


void FishPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:FishPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FishPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FishPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FishPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FishPoint)
  return target;
}

size_t FishPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FishPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FishPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FishPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const FishPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FishPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FishPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FishPoint)
    MergeFrom(*source);
  }
}

void FishPoint::MergeFrom(const FishPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FishPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
}

void FishPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FishPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishPoint::CopyFrom(const FishPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FishPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishPoint::IsInitialized() const {
  return true;
}

void FishPoint::InternalSwap(FishPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FishPoint, y_)
      + sizeof(FishPoint::y_)
      - PROTOBUF_FIELD_OFFSET(FishPoint, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FishPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LineInfo::_Internal {
 public:
};

LineInfo::LineInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LineInfo)
}
LineInfo::LineInfo(const LineInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:LineInfo)
}

void LineInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LineInfo_WPBY_2eproto.base);
  type_ = 0;
}

LineInfo::~LineInfo() {
  // @@protoc_insertion_point(destructor:LineInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LineInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LineInfo::ArenaDtor(void* object) {
  LineInfo* _this = reinterpret_cast< LineInfo* >(object);
  (void)_this;
}
void LineInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LineInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LineInfo& LineInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LineInfo_WPBY_2eproto.base);
  return *internal_default_instance();
}


void LineInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:LineInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LineInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .FishPoint points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LineInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LineInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // repeated .FishPoint points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LineInfo)
  return target;
}

size_t LineInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LineInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .FishPoint points = 2;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LineInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LineInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LineInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LineInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LineInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LineInfo)
    MergeFrom(*source);
  }
}

void LineInfo::MergeFrom(const LineInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LineInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void LineInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LineInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineInfo::CopyFrom(const LineInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LineInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineInfo::IsInitialized() const {
  return true;
}

void LineInfo::InternalSwap(LineInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LineInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FishLineInfo::_Internal {
 public:
  static const ::LineInfo& line(const FishLineInfo* msg);
};

const ::LineInfo&
FishLineInfo::_Internal::line(const FishLineInfo* msg) {
  return *msg->line_;
}
FishLineInfo::FishLineInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FishLineInfo)
}
FishLineInfo::FishLineInfo(const FishLineInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_line()) {
    line_ = new ::LineInfo(*from.line_);
  } else {
    line_ = nullptr;
  }
  ::memcpy(&kind_, &from.kind_,
    static_cast<size_t>(reinterpret_cast<char*>(&lived_time_) -
    reinterpret_cast<char*>(&kind_)) + sizeof(lived_time_));
  // @@protoc_insertion_point(copy_constructor:FishLineInfo)
}

void FishLineInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FishLineInfo_WPBY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&line_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&lived_time_) -
      reinterpret_cast<char*>(&line_)) + sizeof(lived_time_));
}

FishLineInfo::~FishLineInfo() {
  // @@protoc_insertion_point(destructor:FishLineInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FishLineInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete line_;
}

void FishLineInfo::ArenaDtor(void* object) {
  FishLineInfo* _this = reinterpret_cast< FishLineInfo* >(object);
  (void)_this;
}
void FishLineInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FishLineInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FishLineInfo& FishLineInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FishLineInfo_WPBY_2eproto.base);
  return *internal_default_instance();
}


void FishLineInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:FishLineInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && line_ != nullptr) {
    delete line_;
  }
  line_ = nullptr;
  ::memset(&kind_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lived_time_) -
      reinterpret_cast<char*>(&kind_)) + sizeof(lived_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FishLineInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .LineInfo line = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_line(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 kind = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 start_delay_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          start_delay_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 delay_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          delay_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          fish_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lived_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          lived_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FishLineInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FishLineInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LineInfo line = 1;
  if (this->has_line()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::line(this), target, stream);
  }

  // int32 kind = 2;
  if (this->kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_kind(), target);
  }

  // int32 start_delay_time = 3;
  if (this->start_delay_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_start_delay_time(), target);
  }

  // int32 delay_time = 4;
  if (this->delay_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_delay_time(), target);
  }

  // int32 fish_num = 5;
  if (this->fish_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_fish_num(), target);
  }

  // int32 lived_time = 6;
  if (this->lived_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_lived_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FishLineInfo)
  return target;
}

size_t FishLineInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FishLineInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LineInfo line = 1;
  if (this->has_line()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *line_);
  }

  // int32 kind = 2;
  if (this->kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_kind());
  }

  // int32 start_delay_time = 3;
  if (this->start_delay_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start_delay_time());
  }

  // int32 delay_time = 4;
  if (this->delay_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_delay_time());
  }

  // int32 fish_num = 5;
  if (this->fish_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_num());
  }

  // int32 lived_time = 6;
  if (this->lived_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lived_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FishLineInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FishLineInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FishLineInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FishLineInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FishLineInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FishLineInfo)
    MergeFrom(*source);
  }
}

void FishLineInfo::MergeFrom(const FishLineInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FishLineInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_line()) {
    _internal_mutable_line()->::LineInfo::MergeFrom(from._internal_line());
  }
  if (from.kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
  if (from.start_delay_time() != 0) {
    _internal_set_start_delay_time(from._internal_start_delay_time());
  }
  if (from.delay_time() != 0) {
    _internal_set_delay_time(from._internal_delay_time());
  }
  if (from.fish_num() != 0) {
    _internal_set_fish_num(from._internal_fish_num());
  }
  if (from.lived_time() != 0) {
    _internal_set_lived_time(from._internal_lived_time());
  }
}

void FishLineInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FishLineInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishLineInfo::CopyFrom(const FishLineInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FishLineInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishLineInfo::IsInitialized() const {
  return true;
}

void FishLineInfo::InternalSwap(FishLineInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FishLineInfo, lived_time_)
      + sizeof(FishLineInfo::lived_time_)
      - PROTOBUF_FIELD_OFFSET(FishLineInfo, line_)>(
          reinterpret_cast<char*>(&line_),
          reinterpret_cast<char*>(&other->line_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FishLineInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FishTide::_Internal {
 public:
};

FishTide::FishTide(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fish_lines_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FishTide)
}
FishTide::FishTide(const FishTide& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fish_lines_(from.fish_lines_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fish_tide_start_time_, &from.fish_tide_start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&line_num_) -
    reinterpret_cast<char*>(&fish_tide_start_time_)) + sizeof(line_num_));
  // @@protoc_insertion_point(copy_constructor:FishTide)
}

void FishTide::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FishTide_WPBY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fish_tide_start_time_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&line_num_) -
      reinterpret_cast<char*>(&fish_tide_start_time_)) + sizeof(line_num_));
}

FishTide::~FishTide() {
  // @@protoc_insertion_point(destructor:FishTide)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FishTide::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FishTide::ArenaDtor(void* object) {
  FishTide* _this = reinterpret_cast< FishTide* >(object);
  (void)_this;
}
void FishTide::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FishTide::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FishTide& FishTide::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FishTide_WPBY_2eproto.base);
  return *internal_default_instance();
}


void FishTide::Clear() {
// @@protoc_insertion_point(message_clear_start:FishTide)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fish_lines_.Clear();
  ::memset(&fish_tide_start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&line_num_) -
      reinterpret_cast<char*>(&fish_tide_start_time_)) + sizeof(line_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FishTide::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 fish_tide_start_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fish_tide_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 fish_tide_cur_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fish_tide_cur_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_tide_turn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fish_tide_turn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 line_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          line_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .FishLineInfo fish_lines = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fish_lines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FishTide::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FishTide)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 fish_tide_start_time = 1;
  if (this->fish_tide_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_fish_tide_start_time(), target);
  }

  // int64 fish_tide_cur_time = 2;
  if (this->fish_tide_cur_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_fish_tide_cur_time(), target);
  }

  // int32 fish_tide_turn = 3;
  if (this->fish_tide_turn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_fish_tide_turn(), target);
  }

  // int32 line_num = 4;
  if (this->line_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_line_num(), target);
  }

  // repeated .FishLineInfo fish_lines = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fish_lines_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_fish_lines(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FishTide)
  return target;
}

size_t FishTide::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FishTide)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .FishLineInfo fish_lines = 5;
  total_size += 1UL * this->_internal_fish_lines_size();
  for (const auto& msg : this->fish_lines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 fish_tide_start_time = 1;
  if (this->fish_tide_start_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fish_tide_start_time());
  }

  // int64 fish_tide_cur_time = 2;
  if (this->fish_tide_cur_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fish_tide_cur_time());
  }

  // int32 fish_tide_turn = 3;
  if (this->fish_tide_turn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_tide_turn());
  }

  // int32 line_num = 4;
  if (this->line_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_line_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FishTide::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FishTide)
  GOOGLE_DCHECK_NE(&from, this);
  const FishTide* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FishTide>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FishTide)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FishTide)
    MergeFrom(*source);
  }
}

void FishTide::MergeFrom(const FishTide& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FishTide)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fish_lines_.MergeFrom(from.fish_lines_);
  if (from.fish_tide_start_time() != 0) {
    _internal_set_fish_tide_start_time(from._internal_fish_tide_start_time());
  }
  if (from.fish_tide_cur_time() != 0) {
    _internal_set_fish_tide_cur_time(from._internal_fish_tide_cur_time());
  }
  if (from.fish_tide_turn() != 0) {
    _internal_set_fish_tide_turn(from._internal_fish_tide_turn());
  }
  if (from.line_num() != 0) {
    _internal_set_line_num(from._internal_line_num());
  }
}

void FishTide::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FishTide)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishTide::CopyFrom(const FishTide& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FishTide)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishTide::IsInitialized() const {
  return true;
}

void FishTide::InternalSwap(FishTide* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fish_lines_.InternalSwap(&other->fish_lines_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FishTide, line_num_)
      + sizeof(FishTide::line_num_)
      - PROTOBUF_FIELD_OFFSET(FishTide, fish_tide_start_time_)>(
          reinterpret_cast<char*>(&fish_tide_start_time_),
          reinterpret_cast<char*>(&other->fish_tide_start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FishTide::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_S_YuChaoCome::_Internal {
 public:
  static const ::FishTide& fish_tide(const CMD_S_YuChaoCome* msg);
};

const ::FishTide&
CMD_S_YuChaoCome::_Internal::fish_tide(const CMD_S_YuChaoCome* msg) {
  return *msg->fish_tide_;
}
CMD_S_YuChaoCome::CMD_S_YuChaoCome(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMD_S_YuChaoCome)
}
CMD_S_YuChaoCome::CMD_S_YuChaoCome(const CMD_S_YuChaoCome& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fish_tide()) {
    fish_tide_ = new ::FishTide(*from.fish_tide_);
  } else {
    fish_tide_ = nullptr;
  }
  yu_chao_id_ = from.yu_chao_id_;
  // @@protoc_insertion_point(copy_constructor:CMD_S_YuChaoCome)
}

void CMD_S_YuChaoCome::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMD_S_YuChaoCome_WPBY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fish_tide_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&yu_chao_id_) -
      reinterpret_cast<char*>(&fish_tide_)) + sizeof(yu_chao_id_));
}

CMD_S_YuChaoCome::~CMD_S_YuChaoCome() {
  // @@protoc_insertion_point(destructor:CMD_S_YuChaoCome)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_S_YuChaoCome::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete fish_tide_;
}

void CMD_S_YuChaoCome::ArenaDtor(void* object) {
  CMD_S_YuChaoCome* _this = reinterpret_cast< CMD_S_YuChaoCome* >(object);
  (void)_this;
}
void CMD_S_YuChaoCome::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_S_YuChaoCome::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_S_YuChaoCome& CMD_S_YuChaoCome::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_S_YuChaoCome_WPBY_2eproto.base);
  return *internal_default_instance();
}


void CMD_S_YuChaoCome::Clear() {
// @@protoc_insertion_point(message_clear_start:CMD_S_YuChaoCome)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && fish_tide_ != nullptr) {
    delete fish_tide_;
  }
  fish_tide_ = nullptr;
  yu_chao_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_S_YuChaoCome::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 yu_chao_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          yu_chao_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .FishTide fish_tide = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fish_tide(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_S_YuChaoCome::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMD_S_YuChaoCome)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 yu_chao_id = 1;
  if (this->yu_chao_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_yu_chao_id(), target);
  }

  // .FishTide fish_tide = 2;
  if (this->has_fish_tide()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::fish_tide(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMD_S_YuChaoCome)
  return target;
}

size_t CMD_S_YuChaoCome::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMD_S_YuChaoCome)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .FishTide fish_tide = 2;
  if (this->has_fish_tide()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fish_tide_);
  }

  // int32 yu_chao_id = 1;
  if (this->yu_chao_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_yu_chao_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_S_YuChaoCome::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMD_S_YuChaoCome)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_S_YuChaoCome* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_S_YuChaoCome>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMD_S_YuChaoCome)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMD_S_YuChaoCome)
    MergeFrom(*source);
  }
}

void CMD_S_YuChaoCome::MergeFrom(const CMD_S_YuChaoCome& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMD_S_YuChaoCome)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fish_tide()) {
    _internal_mutable_fish_tide()->::FishTide::MergeFrom(from._internal_fish_tide());
  }
  if (from.yu_chao_id() != 0) {
    _internal_set_yu_chao_id(from._internal_yu_chao_id());
  }
}

void CMD_S_YuChaoCome::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMD_S_YuChaoCome)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_S_YuChaoCome::CopyFrom(const CMD_S_YuChaoCome& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMD_S_YuChaoCome)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S_YuChaoCome::IsInitialized() const {
  return true;
}

void CMD_S_YuChaoCome::InternalSwap(CMD_S_YuChaoCome* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_S_YuChaoCome, yu_chao_id_)
      + sizeof(CMD_S_YuChaoCome::yu_chao_id_)
      - PROTOBUF_FIELD_OFFSET(CMD_S_YuChaoCome, fish_tide_)>(
          reinterpret_cast<char*>(&fish_tide_),
          reinterpret_cast<char*>(&other->fish_tide_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_S_YuChaoCome::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_S_ShootLK::_Internal {
 public:
};

CMD_S_ShootLK::CMD_S_ShootLK(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMD_S_ShootLK)
}
CMD_S_ShootLK::CMD_S_ShootLK(const CMD_S_ShootLK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&multiple_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(multiple_));
  // @@protoc_insertion_point(copy_constructor:CMD_S_ShootLK)
}

void CMD_S_ShootLK::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&multiple_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(multiple_));
}

CMD_S_ShootLK::~CMD_S_ShootLK() {
  // @@protoc_insertion_point(destructor:CMD_S_ShootLK)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_S_ShootLK::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_S_ShootLK::ArenaDtor(void* object) {
  CMD_S_ShootLK* _this = reinterpret_cast< CMD_S_ShootLK* >(object);
  (void)_this;
}
void CMD_S_ShootLK::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_S_ShootLK::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_S_ShootLK& CMD_S_ShootLK::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_S_ShootLK_WPBY_2eproto.base);
  return *internal_default_instance();
}


void CMD_S_ShootLK::Clear() {
// @@protoc_insertion_point(message_clear_start:CMD_S_ShootLK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multiple_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(multiple_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_S_ShootLK::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 multiple = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_S_ShootLK::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMD_S_ShootLK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // int32 score = 3;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_score(), target);
  }

  // int32 multiple = 4;
  if (this->multiple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_multiple(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMD_S_ShootLK)
  return target;
}

size_t CMD_S_ShootLK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMD_S_ShootLK)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 score = 3;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  // int32 multiple = 4;
  if (this->multiple() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_multiple());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_S_ShootLK::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMD_S_ShootLK)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_S_ShootLK* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_S_ShootLK>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMD_S_ShootLK)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMD_S_ShootLK)
    MergeFrom(*source);
  }
}

void CMD_S_ShootLK::MergeFrom(const CMD_S_ShootLK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMD_S_ShootLK)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.multiple() != 0) {
    _internal_set_multiple(from._internal_multiple());
  }
}

void CMD_S_ShootLK::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMD_S_ShootLK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_S_ShootLK::CopyFrom(const CMD_S_ShootLK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMD_S_ShootLK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S_ShootLK::IsInitialized() const {
  return true;
}

void CMD_S_ShootLK::InternalSwap(CMD_S_ShootLK* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_S_ShootLK, multiple_)
      + sizeof(CMD_S_ShootLK::multiple_)
      - PROTOBUF_FIELD_OFFSET(CMD_S_ShootLK, chair_id_)>(
          reinterpret_cast<char*>(&chair_id_),
          reinterpret_cast<char*>(&other->chair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_S_ShootLK::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_S_JuBuZhaDan::_Internal {
 public:
};

CMD_S_JuBuZhaDan::CMD_S_JuBuZhaDan(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMD_S_JuBuZhaDan)
}
CMD_S_JuBuZhaDan::CMD_S_JuBuZhaDan(const CMD_S_JuBuZhaDan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&fish_id_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(fish_id_));
  // @@protoc_insertion_point(copy_constructor:CMD_S_JuBuZhaDan)
}

void CMD_S_JuBuZhaDan::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&fish_id_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(fish_id_));
}

CMD_S_JuBuZhaDan::~CMD_S_JuBuZhaDan() {
  // @@protoc_insertion_point(destructor:CMD_S_JuBuZhaDan)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_S_JuBuZhaDan::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_S_JuBuZhaDan::ArenaDtor(void* object) {
  CMD_S_JuBuZhaDan* _this = reinterpret_cast< CMD_S_JuBuZhaDan* >(object);
  (void)_this;
}
void CMD_S_JuBuZhaDan::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_S_JuBuZhaDan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_S_JuBuZhaDan& CMD_S_JuBuZhaDan::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_S_JuBuZhaDan_WPBY_2eproto.base);
  return *internal_default_instance();
}


void CMD_S_JuBuZhaDan::Clear() {
// @@protoc_insertion_point(message_clear_start:CMD_S_JuBuZhaDan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fish_id_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(fish_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_S_JuBuZhaDan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fish_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_S_JuBuZhaDan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMD_S_JuBuZhaDan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int32 fish_id = 2;
  if (this->fish_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fish_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMD_S_JuBuZhaDan)
  return target;
}

size_t CMD_S_JuBuZhaDan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMD_S_JuBuZhaDan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 fish_id = 2;
  if (this->fish_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_S_JuBuZhaDan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMD_S_JuBuZhaDan)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_S_JuBuZhaDan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_S_JuBuZhaDan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMD_S_JuBuZhaDan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMD_S_JuBuZhaDan)
    MergeFrom(*source);
  }
}

void CMD_S_JuBuZhaDan::MergeFrom(const CMD_S_JuBuZhaDan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMD_S_JuBuZhaDan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.fish_id() != 0) {
    _internal_set_fish_id(from._internal_fish_id());
  }
}

void CMD_S_JuBuZhaDan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMD_S_JuBuZhaDan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_S_JuBuZhaDan::CopyFrom(const CMD_S_JuBuZhaDan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMD_S_JuBuZhaDan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S_JuBuZhaDan::IsInitialized() const {
  return true;
}

void CMD_S_JuBuZhaDan::InternalSwap(CMD_S_JuBuZhaDan* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_S_JuBuZhaDan, fish_id_)
      + sizeof(CMD_S_JuBuZhaDan::fish_id_)
      - PROTOBUF_FIELD_OFFSET(CMD_S_JuBuZhaDan, chair_id_)>(
          reinterpret_cast<char*>(&chair_id_),
          reinterpret_cast<char*>(&other->chair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_S_JuBuZhaDan::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_S_YiWangDaJin::_Internal {
 public:
};

CMD_S_YiWangDaJin::CMD_S_YiWangDaJin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMD_S_YiWangDaJin)
}
CMD_S_YiWangDaJin::CMD_S_YiWangDaJin(const CMD_S_YiWangDaJin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&bullet_id_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(bullet_id_));
  // @@protoc_insertion_point(copy_constructor:CMD_S_YiWangDaJin)
}

void CMD_S_YiWangDaJin::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bullet_id_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(bullet_id_));
}

CMD_S_YiWangDaJin::~CMD_S_YiWangDaJin() {
  // @@protoc_insertion_point(destructor:CMD_S_YiWangDaJin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_S_YiWangDaJin::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_S_YiWangDaJin::ArenaDtor(void* object) {
  CMD_S_YiWangDaJin* _this = reinterpret_cast< CMD_S_YiWangDaJin* >(object);
  (void)_this;
}
void CMD_S_YiWangDaJin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_S_YiWangDaJin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_S_YiWangDaJin& CMD_S_YiWangDaJin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_S_YiWangDaJin_WPBY_2eproto.base);
  return *internal_default_instance();
}


void CMD_S_YiWangDaJin::Clear() {
// @@protoc_insertion_point(message_clear_start:CMD_S_YiWangDaJin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bullet_id_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(bullet_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_S_YiWangDaJin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bullet_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bullet_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_S_YiWangDaJin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMD_S_YiWangDaJin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int32 bullet_id = 2;
  if (this->bullet_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bullet_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMD_S_YiWangDaJin)
  return target;
}

size_t CMD_S_YiWangDaJin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMD_S_YiWangDaJin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 bullet_id = 2;
  if (this->bullet_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bullet_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_S_YiWangDaJin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMD_S_YiWangDaJin)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_S_YiWangDaJin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_S_YiWangDaJin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMD_S_YiWangDaJin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMD_S_YiWangDaJin)
    MergeFrom(*source);
  }
}

void CMD_S_YiWangDaJin::MergeFrom(const CMD_S_YiWangDaJin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMD_S_YiWangDaJin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.bullet_id() != 0) {
    _internal_set_bullet_id(from._internal_bullet_id());
  }
}

void CMD_S_YiWangDaJin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMD_S_YiWangDaJin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_S_YiWangDaJin::CopyFrom(const CMD_S_YiWangDaJin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMD_S_YiWangDaJin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S_YiWangDaJin::IsInitialized() const {
  return true;
}

void CMD_S_YiWangDaJin::InternalSwap(CMD_S_YiWangDaJin* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_S_YiWangDaJin, bullet_id_)
      + sizeof(CMD_S_YiWangDaJin::bullet_id_)
      - PROTOBUF_FIELD_OFFSET(CMD_S_YiWangDaJin, chair_id_)>(
          reinterpret_cast<char*>(&chair_id_),
          reinterpret_cast<char*>(&other->chair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_S_YiWangDaJin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_S_TongLeiZhaDan::_Internal {
 public:
};

CMD_S_TongLeiZhaDan::CMD_S_TongLeiZhaDan(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMD_S_TongLeiZhaDan)
}
CMD_S_TongLeiZhaDan::CMD_S_TongLeiZhaDan(const CMD_S_TongLeiZhaDan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(kind_));
  // @@protoc_insertion_point(copy_constructor:CMD_S_TongLeiZhaDan)
}

void CMD_S_TongLeiZhaDan::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&kind_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(kind_));
}

CMD_S_TongLeiZhaDan::~CMD_S_TongLeiZhaDan() {
  // @@protoc_insertion_point(destructor:CMD_S_TongLeiZhaDan)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_S_TongLeiZhaDan::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_S_TongLeiZhaDan::ArenaDtor(void* object) {
  CMD_S_TongLeiZhaDan* _this = reinterpret_cast< CMD_S_TongLeiZhaDan* >(object);
  (void)_this;
}
void CMD_S_TongLeiZhaDan::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_S_TongLeiZhaDan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_S_TongLeiZhaDan& CMD_S_TongLeiZhaDan::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_S_TongLeiZhaDan_WPBY_2eproto.base);
  return *internal_default_instance();
}


void CMD_S_TongLeiZhaDan::Clear() {
// @@protoc_insertion_point(message_clear_start:CMD_S_TongLeiZhaDan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kind_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(kind_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_S_TongLeiZhaDan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fish_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 kind = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_S_TongLeiZhaDan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMD_S_TongLeiZhaDan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int32 fish_id = 2;
  if (this->fish_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fish_id(), target);
  }

  // int32 kind = 3;
  if (this->kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMD_S_TongLeiZhaDan)
  return target;
}

size_t CMD_S_TongLeiZhaDan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMD_S_TongLeiZhaDan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 fish_id = 2;
  if (this->fish_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_id());
  }

  // int32 kind = 3;
  if (this->kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_kind());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_S_TongLeiZhaDan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMD_S_TongLeiZhaDan)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_S_TongLeiZhaDan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_S_TongLeiZhaDan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMD_S_TongLeiZhaDan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMD_S_TongLeiZhaDan)
    MergeFrom(*source);
  }
}

void CMD_S_TongLeiZhaDan::MergeFrom(const CMD_S_TongLeiZhaDan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMD_S_TongLeiZhaDan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.fish_id() != 0) {
    _internal_set_fish_id(from._internal_fish_id());
  }
  if (from.kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
}

void CMD_S_TongLeiZhaDan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMD_S_TongLeiZhaDan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_S_TongLeiZhaDan::CopyFrom(const CMD_S_TongLeiZhaDan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMD_S_TongLeiZhaDan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S_TongLeiZhaDan::IsInitialized() const {
  return true;
}

void CMD_S_TongLeiZhaDan::InternalSwap(CMD_S_TongLeiZhaDan* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_S_TongLeiZhaDan, kind_)
      + sizeof(CMD_S_TongLeiZhaDan::kind_)
      - PROTOBUF_FIELD_OFFSET(CMD_S_TongLeiZhaDan, chair_id_)>(
          reinterpret_cast<char*>(&chair_id_),
          reinterpret_cast<char*>(&other->chair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_S_TongLeiZhaDan::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LoadFish::_Internal {
 public:
};

LoadFish::LoadFish(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fish_point_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LoadFish)
}
LoadFish::LoadFish(const LoadFish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fish_point_(from.fish_point_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&kind_, &from.kind_,
    static_cast<size_t>(reinterpret_cast<char*>(&mul_) -
    reinterpret_cast<char*>(&kind_)) + sizeof(mul_));
  // @@protoc_insertion_point(copy_constructor:LoadFish)
}

void LoadFish::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadFish_WPBY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&kind_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&mul_) -
      reinterpret_cast<char*>(&kind_)) + sizeof(mul_));
}

LoadFish::~LoadFish() {
  // @@protoc_insertion_point(destructor:LoadFish)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadFish::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LoadFish::ArenaDtor(void* object) {
  LoadFish* _this = reinterpret_cast< LoadFish* >(object);
  (void)_this;
}
void LoadFish::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadFish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadFish& LoadFish::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadFish_WPBY_2eproto.base);
  return *internal_default_instance();
}


void LoadFish::Clear() {
// @@protoc_insertion_point(message_clear_start:LoadFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fish_point_.Clear();
  ::memset(&kind_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mul_) -
      reinterpret_cast<char*>(&kind_)) + sizeof(mul_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadFish::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 create_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 continue_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          continue_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .FishPoint fish_point = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fish_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 now_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          now_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mul = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          mul_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadFish::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoadFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 kind = 1;
  if (this->kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_kind(), target);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // int32 create_time = 3;
  if (this->create_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_create_time(), target);
  }

  // int32 continue_time = 4;
  if (this->continue_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_continue_time(), target);
  }

  // repeated .FishPoint fish_point = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fish_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_fish_point(i), target, stream);
  }

  // int32 now_time = 6;
  if (this->now_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_now_time(), target);
  }

  // int32 mul = 7;
  if (this->mul() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_mul(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoadFish)
  return target;
}

size_t LoadFish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoadFish)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .FishPoint fish_point = 5;
  total_size += 1UL * this->_internal_fish_point_size();
  for (const auto& msg : this->fish_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 kind = 1;
  if (this->kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_kind());
  }

  // int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 create_time = 3;
  if (this->create_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_create_time());
  }

  // int32 continue_time = 4;
  if (this->continue_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_continue_time());
  }

  // int32 now_time = 6;
  if (this->now_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_now_time());
  }

  // int32 mul = 7;
  if (this->mul() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mul());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadFish::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoadFish)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadFish* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadFish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoadFish)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoadFish)
    MergeFrom(*source);
  }
}

void LoadFish::MergeFrom(const LoadFish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoadFish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fish_point_.MergeFrom(from.fish_point_);
  if (from.kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.create_time() != 0) {
    _internal_set_create_time(from._internal_create_time());
  }
  if (from.continue_time() != 0) {
    _internal_set_continue_time(from._internal_continue_time());
  }
  if (from.now_time() != 0) {
    _internal_set_now_time(from._internal_now_time());
  }
  if (from.mul() != 0) {
    _internal_set_mul(from._internal_mul());
  }
}

void LoadFish::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoadFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadFish::CopyFrom(const LoadFish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoadFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadFish::IsInitialized() const {
  return true;
}

void LoadFish::InternalSwap(LoadFish* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fish_point_.InternalSwap(&other->fish_point_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoadFish, mul_)
      + sizeof(LoadFish::mul_)
      - PROTOBUF_FIELD_OFFSET(LoadFish, kind_)>(
          reinterpret_cast<char*>(&kind_),
          reinterpret_cast<char*>(&other->kind_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadFish::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_S_YuWang::_Internal {
 public:
};

CMD_S_YuWang::CMD_S_YuWang(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fish_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMD_S_YuWang)
}
CMD_S_YuWang::CMD_S_YuWang(const CMD_S_YuWang& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fish_id_(from.fish_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&yu_wang_id_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(yu_wang_id_));
  // @@protoc_insertion_point(copy_constructor:CMD_S_YuWang)
}

void CMD_S_YuWang::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMD_S_YuWang_WPBY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&yu_wang_id_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(yu_wang_id_));
}

CMD_S_YuWang::~CMD_S_YuWang() {
  // @@protoc_insertion_point(destructor:CMD_S_YuWang)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_S_YuWang::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_S_YuWang::ArenaDtor(void* object) {
  CMD_S_YuWang* _this = reinterpret_cast< CMD_S_YuWang* >(object);
  (void)_this;
}
void CMD_S_YuWang::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_S_YuWang::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_S_YuWang& CMD_S_YuWang::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_S_YuWang_WPBY_2eproto.base);
  return *internal_default_instance();
}


void CMD_S_YuWang::Clear() {
// @@protoc_insertion_point(message_clear_start:CMD_S_YuWang)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fish_id_.Clear();
  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yu_wang_id_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(yu_wang_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_S_YuWang::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 kind = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 yu_wang_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          yu_wang_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .LoadFish fish_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fish_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_S_YuWang::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMD_S_YuWang)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int32 kind = 2;
  if (this->kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_kind(), target);
  }

  // int32 yu_wang_id = 3;
  if (this->yu_wang_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_yu_wang_id(), target);
  }

  // repeated .LoadFish fish_id = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fish_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_fish_id(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMD_S_YuWang)
  return target;
}

size_t CMD_S_YuWang::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMD_S_YuWang)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LoadFish fish_id = 4;
  total_size += 1UL * this->_internal_fish_id_size();
  for (const auto& msg : this->fish_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 kind = 2;
  if (this->kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_kind());
  }

  // int32 yu_wang_id = 3;
  if (this->yu_wang_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_yu_wang_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_S_YuWang::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMD_S_YuWang)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_S_YuWang* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_S_YuWang>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMD_S_YuWang)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMD_S_YuWang)
    MergeFrom(*source);
  }
}

void CMD_S_YuWang::MergeFrom(const CMD_S_YuWang& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMD_S_YuWang)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fish_id_.MergeFrom(from.fish_id_);
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
  if (from.yu_wang_id() != 0) {
    _internal_set_yu_wang_id(from._internal_yu_wang_id());
  }
}

void CMD_S_YuWang::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMD_S_YuWang)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_S_YuWang::CopyFrom(const CMD_S_YuWang& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMD_S_YuWang)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S_YuWang::IsInitialized() const {
  return true;
}

void CMD_S_YuWang::InternalSwap(CMD_S_YuWang* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fish_id_.InternalSwap(&other->fish_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_S_YuWang, yu_wang_id_)
      + sizeof(CMD_S_YuWang::yu_wang_id_)
      - PROTOBUF_FIELD_OFFSET(CMD_S_YuWang, chair_id_)>(
          reinterpret_cast<char*>(&chair_id_),
          reinterpret_cast<char*>(&other->chair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_S_YuWang::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_S_DaSiXi::_Internal {
 public:
};

CMD_S_DaSiXi::CMD_S_DaSiXi(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMD_S_DaSiXi)
}
CMD_S_DaSiXi::CMD_S_DaSiXi(const CMD_S_DaSiXi& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&id_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:CMD_S_DaSiXi)
}

void CMD_S_DaSiXi::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&id_)) + sizeof(score_));
}

CMD_S_DaSiXi::~CMD_S_DaSiXi() {
  // @@protoc_insertion_point(destructor:CMD_S_DaSiXi)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_S_DaSiXi::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_S_DaSiXi::ArenaDtor(void* object) {
  CMD_S_DaSiXi* _this = reinterpret_cast< CMD_S_DaSiXi* >(object);
  (void)_this;
}
void CMD_S_DaSiXi::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_S_DaSiXi::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_S_DaSiXi& CMD_S_DaSiXi::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_S_DaSiXi_WPBY_2eproto.base);
  return *internal_default_instance();
}


void CMD_S_DaSiXi::Clear() {
// @@protoc_insertion_point(message_clear_start:CMD_S_DaSiXi)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&id_)) + sizeof(score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_S_DaSiXi::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chair_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_S_DaSiXi::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMD_S_DaSiXi)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 chair_id = 2;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_chair_id(), target);
  }

  // int32 score = 3;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMD_S_DaSiXi)
  return target;
}

size_t CMD_S_DaSiXi::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMD_S_DaSiXi)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 chair_id = 2;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 score = 3;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_S_DaSiXi::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMD_S_DaSiXi)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_S_DaSiXi* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_S_DaSiXi>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMD_S_DaSiXi)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMD_S_DaSiXi)
    MergeFrom(*source);
  }
}

void CMD_S_DaSiXi::MergeFrom(const CMD_S_DaSiXi& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMD_S_DaSiXi)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
}

void CMD_S_DaSiXi::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMD_S_DaSiXi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_S_DaSiXi::CopyFrom(const CMD_S_DaSiXi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMD_S_DaSiXi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S_DaSiXi::IsInitialized() const {
  return true;
}

void CMD_S_DaSiXi::InternalSwap(CMD_S_DaSiXi* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_S_DaSiXi, score_)
      + sizeof(CMD_S_DaSiXi::score_)
      - PROTOBUF_FIELD_OFFSET(CMD_S_DaSiXi, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_S_DaSiXi::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_S_DaSanYuan::_Internal {
 public:
};

CMD_S_DaSanYuan::CMD_S_DaSanYuan(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMD_S_DaSanYuan)
}
CMD_S_DaSanYuan::CMD_S_DaSanYuan(const CMD_S_DaSanYuan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&id_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:CMD_S_DaSanYuan)
}

void CMD_S_DaSanYuan::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&id_)) + sizeof(score_));
}

CMD_S_DaSanYuan::~CMD_S_DaSanYuan() {
  // @@protoc_insertion_point(destructor:CMD_S_DaSanYuan)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_S_DaSanYuan::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_S_DaSanYuan::ArenaDtor(void* object) {
  CMD_S_DaSanYuan* _this = reinterpret_cast< CMD_S_DaSanYuan* >(object);
  (void)_this;
}
void CMD_S_DaSanYuan::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_S_DaSanYuan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_S_DaSanYuan& CMD_S_DaSanYuan::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_S_DaSanYuan_WPBY_2eproto.base);
  return *internal_default_instance();
}


void CMD_S_DaSanYuan::Clear() {
// @@protoc_insertion_point(message_clear_start:CMD_S_DaSanYuan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&id_)) + sizeof(score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_S_DaSanYuan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chair_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_S_DaSanYuan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMD_S_DaSanYuan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 chair_id = 2;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_chair_id(), target);
  }

  // int32 score = 3;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMD_S_DaSanYuan)
  return target;
}

size_t CMD_S_DaSanYuan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMD_S_DaSanYuan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 chair_id = 2;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 score = 3;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_S_DaSanYuan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMD_S_DaSanYuan)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_S_DaSanYuan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_S_DaSanYuan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMD_S_DaSanYuan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMD_S_DaSanYuan)
    MergeFrom(*source);
  }
}

void CMD_S_DaSanYuan::MergeFrom(const CMD_S_DaSanYuan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMD_S_DaSanYuan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
}

void CMD_S_DaSanYuan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMD_S_DaSanYuan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_S_DaSanYuan::CopyFrom(const CMD_S_DaSanYuan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMD_S_DaSanYuan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S_DaSanYuan::IsInitialized() const {
  return true;
}

void CMD_S_DaSanYuan::InternalSwap(CMD_S_DaSanYuan* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_S_DaSanYuan, score_)
      + sizeof(CMD_S_DaSanYuan::score_)
      - PROTOBUF_FIELD_OFFSET(CMD_S_DaSanYuan, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_S_DaSanYuan::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_S_ZhongYiTang::_Internal {
 public:
};

CMD_S_ZhongYiTang::CMD_S_ZhongYiTang(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMD_S_ZhongYiTang)
}
CMD_S_ZhongYiTang::CMD_S_ZhongYiTang(const CMD_S_ZhongYiTang& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:CMD_S_ZhongYiTang)
}

void CMD_S_ZhongYiTang::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(time_));
}

CMD_S_ZhongYiTang::~CMD_S_ZhongYiTang() {
  // @@protoc_insertion_point(destructor:CMD_S_ZhongYiTang)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_S_ZhongYiTang::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_S_ZhongYiTang::ArenaDtor(void* object) {
  CMD_S_ZhongYiTang* _this = reinterpret_cast< CMD_S_ZhongYiTang* >(object);
  (void)_this;
}
void CMD_S_ZhongYiTang::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_S_ZhongYiTang::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_S_ZhongYiTang& CMD_S_ZhongYiTang::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_S_ZhongYiTang_WPBY_2eproto.base);
  return *internal_default_instance();
}


void CMD_S_ZhongYiTang::Clear() {
// @@protoc_insertion_point(message_clear_start:CMD_S_ZhongYiTang)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_S_ZhongYiTang::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_S_ZhongYiTang::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMD_S_ZhongYiTang)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int32 time = 2;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMD_S_ZhongYiTang)
  return target;
}

size_t CMD_S_ZhongYiTang::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMD_S_ZhongYiTang)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_S_ZhongYiTang::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMD_S_ZhongYiTang)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_S_ZhongYiTang* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_S_ZhongYiTang>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMD_S_ZhongYiTang)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMD_S_ZhongYiTang)
    MergeFrom(*source);
  }
}

void CMD_S_ZhongYiTang::MergeFrom(const CMD_S_ZhongYiTang& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMD_S_ZhongYiTang)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
}

void CMD_S_ZhongYiTang::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMD_S_ZhongYiTang)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_S_ZhongYiTang::CopyFrom(const CMD_S_ZhongYiTang& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMD_S_ZhongYiTang)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S_ZhongYiTang::IsInitialized() const {
  return true;
}

void CMD_S_ZhongYiTang::InternalSwap(CMD_S_ZhongYiTang* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_S_ZhongYiTang, time_)
      + sizeof(CMD_S_ZhongYiTang::time_)
      - PROTOBUF_FIELD_OFFSET(CMD_S_ZhongYiTang, chair_id_)>(
          reinterpret_cast<char*>(&chair_id_),
          reinterpret_cast<char*>(&other->chair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_S_ZhongYiTang::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_S_ShuiHuZhuan::_Internal {
 public:
};

CMD_S_ShuiHuZhuan::CMD_S_ShuiHuZhuan(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMD_S_ShuiHuZhuan)
}
CMD_S_ShuiHuZhuan::CMD_S_ShuiHuZhuan(const CMD_S_ShuiHuZhuan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&fish_id_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(fish_id_));
  // @@protoc_insertion_point(copy_constructor:CMD_S_ShuiHuZhuan)
}

void CMD_S_ShuiHuZhuan::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&fish_id_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(fish_id_));
}

CMD_S_ShuiHuZhuan::~CMD_S_ShuiHuZhuan() {
  // @@protoc_insertion_point(destructor:CMD_S_ShuiHuZhuan)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_S_ShuiHuZhuan::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_S_ShuiHuZhuan::ArenaDtor(void* object) {
  CMD_S_ShuiHuZhuan* _this = reinterpret_cast< CMD_S_ShuiHuZhuan* >(object);
  (void)_this;
}
void CMD_S_ShuiHuZhuan::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_S_ShuiHuZhuan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_S_ShuiHuZhuan& CMD_S_ShuiHuZhuan::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_S_ShuiHuZhuan_WPBY_2eproto.base);
  return *internal_default_instance();
}


void CMD_S_ShuiHuZhuan::Clear() {
// @@protoc_insertion_point(message_clear_start:CMD_S_ShuiHuZhuan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fish_id_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(fish_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_S_ShuiHuZhuan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fish_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_S_ShuiHuZhuan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMD_S_ShuiHuZhuan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int32 fish_id = 2;
  if (this->fish_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fish_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMD_S_ShuiHuZhuan)
  return target;
}

size_t CMD_S_ShuiHuZhuan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMD_S_ShuiHuZhuan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 fish_id = 2;
  if (this->fish_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_S_ShuiHuZhuan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMD_S_ShuiHuZhuan)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_S_ShuiHuZhuan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_S_ShuiHuZhuan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMD_S_ShuiHuZhuan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMD_S_ShuiHuZhuan)
    MergeFrom(*source);
  }
}

void CMD_S_ShuiHuZhuan::MergeFrom(const CMD_S_ShuiHuZhuan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMD_S_ShuiHuZhuan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.fish_id() != 0) {
    _internal_set_fish_id(from._internal_fish_id());
  }
}

void CMD_S_ShuiHuZhuan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMD_S_ShuiHuZhuan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_S_ShuiHuZhuan::CopyFrom(const CMD_S_ShuiHuZhuan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMD_S_ShuiHuZhuan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S_ShuiHuZhuan::IsInitialized() const {
  return true;
}

void CMD_S_ShuiHuZhuan::InternalSwap(CMD_S_ShuiHuZhuan* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_S_ShuiHuZhuan, fish_id_)
      + sizeof(CMD_S_ShuiHuZhuan::fish_id_)
      - PROTOBUF_FIELD_OFFSET(CMD_S_ShuiHuZhuan, chair_id_)>(
          reinterpret_cast<char*>(&chair_id_),
          reinterpret_cast<char*>(&other->chair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_S_ShuiHuZhuan::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_S_ChangeBulletLevel::_Internal {
 public:
};

CMD_S_ChangeBulletLevel::CMD_S_ChangeBulletLevel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMD_S_ChangeBulletLevel)
}
CMD_S_ChangeBulletLevel::CMD_S_ChangeBulletLevel(const CMD_S_ChangeBulletLevel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&gun_level_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(gun_level_));
  // @@protoc_insertion_point(copy_constructor:CMD_S_ChangeBulletLevel)
}

void CMD_S_ChangeBulletLevel::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&gun_level_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(gun_level_));
}

CMD_S_ChangeBulletLevel::~CMD_S_ChangeBulletLevel() {
  // @@protoc_insertion_point(destructor:CMD_S_ChangeBulletLevel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_S_ChangeBulletLevel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_S_ChangeBulletLevel::ArenaDtor(void* object) {
  CMD_S_ChangeBulletLevel* _this = reinterpret_cast< CMD_S_ChangeBulletLevel* >(object);
  (void)_this;
}
void CMD_S_ChangeBulletLevel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_S_ChangeBulletLevel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_S_ChangeBulletLevel& CMD_S_ChangeBulletLevel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_S_ChangeBulletLevel_WPBY_2eproto.base);
  return *internal_default_instance();
}


void CMD_S_ChangeBulletLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:CMD_S_ChangeBulletLevel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gun_level_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(gun_level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_S_ChangeBulletLevel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gun_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gun_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gun_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gun_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_S_ChangeBulletLevel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMD_S_ChangeBulletLevel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int32 gun_type = 2;
  if (this->gun_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_gun_type(), target);
  }

  // int32 gun_level = 3;
  if (this->gun_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_gun_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMD_S_ChangeBulletLevel)
  return target;
}

size_t CMD_S_ChangeBulletLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMD_S_ChangeBulletLevel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 gun_type = 2;
  if (this->gun_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gun_type());
  }

  // int32 gun_level = 3;
  if (this->gun_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gun_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_S_ChangeBulletLevel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMD_S_ChangeBulletLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_S_ChangeBulletLevel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_S_ChangeBulletLevel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMD_S_ChangeBulletLevel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMD_S_ChangeBulletLevel)
    MergeFrom(*source);
  }
}

void CMD_S_ChangeBulletLevel::MergeFrom(const CMD_S_ChangeBulletLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMD_S_ChangeBulletLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.gun_type() != 0) {
    _internal_set_gun_type(from._internal_gun_type());
  }
  if (from.gun_level() != 0) {
    _internal_set_gun_level(from._internal_gun_level());
  }
}

void CMD_S_ChangeBulletLevel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMD_S_ChangeBulletLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_S_ChangeBulletLevel::CopyFrom(const CMD_S_ChangeBulletLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMD_S_ChangeBulletLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S_ChangeBulletLevel::IsInitialized() const {
  return true;
}

void CMD_S_ChangeBulletLevel::InternalSwap(CMD_S_ChangeBulletLevel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_S_ChangeBulletLevel, gun_level_)
      + sizeof(CMD_S_ChangeBulletLevel::gun_level_)
      - PROTOBUF_FIELD_OFFSET(CMD_S_ChangeBulletLevel, chair_id_)>(
          reinterpret_cast<char*>(&chair_id_),
          reinterpret_cast<char*>(&other->chair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_S_ChangeBulletLevel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_S_CONFIG::_Internal {
 public:
};

CMD_S_CONFIG::CMD_S_CONFIG(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bullet_score_(arena),
  player_lock_fish_id_(arena),
  player_cur_score_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMD_S_CONFIG)
}
CMD_S_CONFIG::CMD_S_CONFIG(const CMD_S_CONFIG& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bullet_score_(from.bullet_score_),
      player_lock_fish_id_(from.player_lock_fish_id_),
      player_cur_score_(from.player_cur_score_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  background_picture_id_ = from.background_picture_id_;
  // @@protoc_insertion_point(copy_constructor:CMD_S_CONFIG)
}

void CMD_S_CONFIG::SharedCtor() {
  background_picture_id_ = 0;
}

CMD_S_CONFIG::~CMD_S_CONFIG() {
  // @@protoc_insertion_point(destructor:CMD_S_CONFIG)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_S_CONFIG::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_S_CONFIG::ArenaDtor(void* object) {
  CMD_S_CONFIG* _this = reinterpret_cast< CMD_S_CONFIG* >(object);
  (void)_this;
}
void CMD_S_CONFIG::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_S_CONFIG::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_S_CONFIG& CMD_S_CONFIG::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_S_CONFIG_WPBY_2eproto.base);
  return *internal_default_instance();
}


void CMD_S_CONFIG::Clear() {
// @@protoc_insertion_point(message_clear_start:CMD_S_CONFIG)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bullet_score_.Clear();
  player_lock_fish_id_.Clear();
  player_cur_score_.Clear();
  background_picture_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_S_CONFIG::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 bullet_score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bullet_score(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_bullet_score(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 background_picture_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          background_picture_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 player_lock_fish_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_player_lock_fish_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_player_lock_fish_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 player_cur_score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_player_cur_score(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_player_cur_score(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_S_CONFIG::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMD_S_CONFIG)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 bullet_score = 1;
  {
    int byte_size = _bullet_score_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_bullet_score(), byte_size, target);
    }
  }

  // int32 background_picture_id = 2;
  if (this->background_picture_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_background_picture_id(), target);
  }

  // repeated int32 player_lock_fish_id = 3;
  {
    int byte_size = _player_lock_fish_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_player_lock_fish_id(), byte_size, target);
    }
  }

  // repeated int64 player_cur_score = 4;
  {
    int byte_size = _player_cur_score_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_player_cur_score(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMD_S_CONFIG)
  return target;
}

size_t CMD_S_CONFIG::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMD_S_CONFIG)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 bullet_score = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bullet_score_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bullet_score_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 player_lock_fish_id = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->player_lock_fish_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _player_lock_fish_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 player_cur_score = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->player_cur_score_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _player_cur_score_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 background_picture_id = 2;
  if (this->background_picture_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_background_picture_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_S_CONFIG::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMD_S_CONFIG)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_S_CONFIG* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_S_CONFIG>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMD_S_CONFIG)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMD_S_CONFIG)
    MergeFrom(*source);
  }
}

void CMD_S_CONFIG::MergeFrom(const CMD_S_CONFIG& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMD_S_CONFIG)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bullet_score_.MergeFrom(from.bullet_score_);
  player_lock_fish_id_.MergeFrom(from.player_lock_fish_id_);
  player_cur_score_.MergeFrom(from.player_cur_score_);
  if (from.background_picture_id() != 0) {
    _internal_set_background_picture_id(from._internal_background_picture_id());
  }
}

void CMD_S_CONFIG::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMD_S_CONFIG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_S_CONFIG::CopyFrom(const CMD_S_CONFIG& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMD_S_CONFIG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S_CONFIG::IsInitialized() const {
  return true;
}

void CMD_S_CONFIG::InternalSwap(CMD_S_CONFIG* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bullet_score_.InternalSwap(&other->bullet_score_);
  player_lock_fish_id_.InternalSwap(&other->player_lock_fish_id_);
  player_cur_score_.InternalSwap(&other->player_cur_score_);
  swap(background_picture_id_, other->background_picture_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_S_CONFIG::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_S_PlayerGunLevel::_Internal {
 public:
};

CMD_S_PlayerGunLevel::CMD_S_PlayerGunLevel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  gun_level_(arena),
  gun_type_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMD_S_PlayerGunLevel)
}
CMD_S_PlayerGunLevel::CMD_S_PlayerGunLevel(const CMD_S_PlayerGunLevel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      gun_level_(from.gun_level_),
      gun_type_(from.gun_type_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMD_S_PlayerGunLevel)
}

void CMD_S_PlayerGunLevel::SharedCtor() {
}

CMD_S_PlayerGunLevel::~CMD_S_PlayerGunLevel() {
  // @@protoc_insertion_point(destructor:CMD_S_PlayerGunLevel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_S_PlayerGunLevel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_S_PlayerGunLevel::ArenaDtor(void* object) {
  CMD_S_PlayerGunLevel* _this = reinterpret_cast< CMD_S_PlayerGunLevel* >(object);
  (void)_this;
}
void CMD_S_PlayerGunLevel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_S_PlayerGunLevel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_S_PlayerGunLevel& CMD_S_PlayerGunLevel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_S_PlayerGunLevel_WPBY_2eproto.base);
  return *internal_default_instance();
}


void CMD_S_PlayerGunLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:CMD_S_PlayerGunLevel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gun_level_.Clear();
  gun_type_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_S_PlayerGunLevel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 gun_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_gun_level(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_gun_level(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 gun_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_gun_type(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_gun_type(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_S_PlayerGunLevel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMD_S_PlayerGunLevel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 gun_level = 1;
  {
    int byte_size = _gun_level_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_gun_level(), byte_size, target);
    }
  }

  // repeated int32 gun_type = 2;
  {
    int byte_size = _gun_type_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_gun_type(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMD_S_PlayerGunLevel)
  return target;
}

size_t CMD_S_PlayerGunLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMD_S_PlayerGunLevel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 gun_level = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->gun_level_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _gun_level_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 gun_type = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->gun_type_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _gun_type_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_S_PlayerGunLevel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMD_S_PlayerGunLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_S_PlayerGunLevel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_S_PlayerGunLevel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMD_S_PlayerGunLevel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMD_S_PlayerGunLevel)
    MergeFrom(*source);
  }
}

void CMD_S_PlayerGunLevel::MergeFrom(const CMD_S_PlayerGunLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMD_S_PlayerGunLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gun_level_.MergeFrom(from.gun_level_);
  gun_type_.MergeFrom(from.gun_type_);
}

void CMD_S_PlayerGunLevel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMD_S_PlayerGunLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_S_PlayerGunLevel::CopyFrom(const CMD_S_PlayerGunLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMD_S_PlayerGunLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S_PlayerGunLevel::IsInitialized() const {
  return true;
}

void CMD_S_PlayerGunLevel::InternalSwap(CMD_S_PlayerGunLevel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gun_level_.InternalSwap(&other->gun_level_);
  gun_type_.InternalSwap(&other->gun_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_S_PlayerGunLevel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_S_AddFish::_Internal {
 public:
};

CMD_S_AddFish::CMD_S_AddFish(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  load_fish_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMD_S_AddFish)
}
CMD_S_AddFish::CMD_S_AddFish(const CMD_S_AddFish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      load_fish_(from.load_fish_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMD_S_AddFish)
}

void CMD_S_AddFish::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMD_S_AddFish_WPBY_2eproto.base);
}

CMD_S_AddFish::~CMD_S_AddFish() {
  // @@protoc_insertion_point(destructor:CMD_S_AddFish)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_S_AddFish::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_S_AddFish::ArenaDtor(void* object) {
  CMD_S_AddFish* _this = reinterpret_cast< CMD_S_AddFish* >(object);
  (void)_this;
}
void CMD_S_AddFish::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_S_AddFish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_S_AddFish& CMD_S_AddFish::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_S_AddFish_WPBY_2eproto.base);
  return *internal_default_instance();
}


void CMD_S_AddFish::Clear() {
// @@protoc_insertion_point(message_clear_start:CMD_S_AddFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  load_fish_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_S_AddFish::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .LoadFish load_fish = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_load_fish(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_S_AddFish::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMD_S_AddFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .LoadFish load_fish = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_load_fish_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_load_fish(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMD_S_AddFish)
  return target;
}

size_t CMD_S_AddFish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMD_S_AddFish)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LoadFish load_fish = 1;
  total_size += 1UL * this->_internal_load_fish_size();
  for (const auto& msg : this->load_fish_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_S_AddFish::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMD_S_AddFish)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_S_AddFish* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_S_AddFish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMD_S_AddFish)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMD_S_AddFish)
    MergeFrom(*source);
  }
}

void CMD_S_AddFish::MergeFrom(const CMD_S_AddFish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMD_S_AddFish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  load_fish_.MergeFrom(from.load_fish_);
}

void CMD_S_AddFish::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMD_S_AddFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_S_AddFish::CopyFrom(const CMD_S_AddFish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMD_S_AddFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S_AddFish::IsInitialized() const {
  return true;
}

void CMD_S_AddFish::InternalSwap(CMD_S_AddFish* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  load_fish_.InternalSwap(&other->load_fish_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_S_AddFish::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_S_PlayerEnter::_Internal {
 public:
};

CMD_S_PlayerEnter::CMD_S_PlayerEnter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  load_fish_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMD_S_PlayerEnter)
}
CMD_S_PlayerEnter::CMD_S_PlayerEnter(const CMD_S_PlayerEnter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      load_fish_(from.load_fish_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMD_S_PlayerEnter)
}

void CMD_S_PlayerEnter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMD_S_PlayerEnter_WPBY_2eproto.base);
}

CMD_S_PlayerEnter::~CMD_S_PlayerEnter() {
  // @@protoc_insertion_point(destructor:CMD_S_PlayerEnter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_S_PlayerEnter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_S_PlayerEnter::ArenaDtor(void* object) {
  CMD_S_PlayerEnter* _this = reinterpret_cast< CMD_S_PlayerEnter* >(object);
  (void)_this;
}
void CMD_S_PlayerEnter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_S_PlayerEnter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_S_PlayerEnter& CMD_S_PlayerEnter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_S_PlayerEnter_WPBY_2eproto.base);
  return *internal_default_instance();
}


void CMD_S_PlayerEnter::Clear() {
// @@protoc_insertion_point(message_clear_start:CMD_S_PlayerEnter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  load_fish_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_S_PlayerEnter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .LoadFish load_fish = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_load_fish(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_S_PlayerEnter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMD_S_PlayerEnter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .LoadFish load_fish = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_load_fish_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_load_fish(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMD_S_PlayerEnter)
  return target;
}

size_t CMD_S_PlayerEnter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMD_S_PlayerEnter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LoadFish load_fish = 1;
  total_size += 1UL * this->_internal_load_fish_size();
  for (const auto& msg : this->load_fish_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_S_PlayerEnter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMD_S_PlayerEnter)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_S_PlayerEnter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_S_PlayerEnter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMD_S_PlayerEnter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMD_S_PlayerEnter)
    MergeFrom(*source);
  }
}

void CMD_S_PlayerEnter::MergeFrom(const CMD_S_PlayerEnter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMD_S_PlayerEnter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  load_fish_.MergeFrom(from.load_fish_);
}

void CMD_S_PlayerEnter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMD_S_PlayerEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_S_PlayerEnter::CopyFrom(const CMD_S_PlayerEnter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMD_S_PlayerEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S_PlayerEnter::IsInitialized() const {
  return true;
}

void CMD_S_PlayerEnter::InternalSwap(CMD_S_PlayerEnter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  load_fish_.InternalSwap(&other->load_fish_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_S_PlayerEnter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FishDeadInfo::_Internal {
 public:
};

FishDeadInfo::FishDeadInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FishDeadInfo)
}
FishDeadInfo::FishDeadInfo(const FishDeadInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&id_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:FishDeadInfo)
}

void FishDeadInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&id_)) + sizeof(score_));
}

FishDeadInfo::~FishDeadInfo() {
  // @@protoc_insertion_point(destructor:FishDeadInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FishDeadInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FishDeadInfo::ArenaDtor(void* object) {
  FishDeadInfo* _this = reinterpret_cast< FishDeadInfo* >(object);
  (void)_this;
}
void FishDeadInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FishDeadInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FishDeadInfo& FishDeadInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FishDeadInfo_WPBY_2eproto.base);
  return *internal_default_instance();
}


void FishDeadInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:FishDeadInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&id_)) + sizeof(score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FishDeadInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FishDeadInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FishDeadInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 score = 2;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FishDeadInfo)
  return target;
}

size_t FishDeadInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FishDeadInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 score = 2;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FishDeadInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FishDeadInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FishDeadInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FishDeadInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FishDeadInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FishDeadInfo)
    MergeFrom(*source);
  }
}

void FishDeadInfo::MergeFrom(const FishDeadInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FishDeadInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
}

void FishDeadInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FishDeadInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishDeadInfo::CopyFrom(const FishDeadInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FishDeadInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishDeadInfo::IsInitialized() const {
  return true;
}

void FishDeadInfo::InternalSwap(FishDeadInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FishDeadInfo, score_)
      + sizeof(FishDeadInfo::score_)
      - PROTOBUF_FIELD_OFFSET(FishDeadInfo, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FishDeadInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_S_FishDead::_Internal {
 public:
};

CMD_S_FishDead::CMD_S_FishDead(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fish_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMD_S_FishDead)
}
CMD_S_FishDead::CMD_S_FishDead(const CMD_S_FishDead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fish_(from.fish_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&chair_id_) -
    reinterpret_cast<char*>(&score_)) + sizeof(chair_id_));
  // @@protoc_insertion_point(copy_constructor:CMD_S_FishDead)
}

void CMD_S_FishDead::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMD_S_FishDead_WPBY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&score_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&score_)) + sizeof(chair_id_));
}

CMD_S_FishDead::~CMD_S_FishDead() {
  // @@protoc_insertion_point(destructor:CMD_S_FishDead)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_S_FishDead::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_S_FishDead::ArenaDtor(void* object) {
  CMD_S_FishDead* _this = reinterpret_cast< CMD_S_FishDead* >(object);
  (void)_this;
}
void CMD_S_FishDead::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_S_FishDead::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_S_FishDead& CMD_S_FishDead::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_S_FishDead_WPBY_2eproto.base);
  return *internal_default_instance();
}


void CMD_S_FishDead::Clear() {
// @@protoc_insertion_point(message_clear_start:CMD_S_FishDead)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fish_.Clear();
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&score_)) + sizeof(chair_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_S_FishDead::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .FishDeadInfo fish = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fish(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_S_FishDead::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMD_S_FishDead)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // repeated .FishDeadInfo fish = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fish_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_fish(i), target, stream);
  }

  // int64 score = 3;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMD_S_FishDead)
  return target;
}

size_t CMD_S_FishDead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMD_S_FishDead)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .FishDeadInfo fish = 2;
  total_size += 1UL * this->_internal_fish_size();
  for (const auto& msg : this->fish_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 score = 3;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_score());
  }

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_S_FishDead::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMD_S_FishDead)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_S_FishDead* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_S_FishDead>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMD_S_FishDead)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMD_S_FishDead)
    MergeFrom(*source);
  }
}

void CMD_S_FishDead::MergeFrom(const CMD_S_FishDead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMD_S_FishDead)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fish_.MergeFrom(from.fish_);
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
}

void CMD_S_FishDead::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMD_S_FishDead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_S_FishDead::CopyFrom(const CMD_S_FishDead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMD_S_FishDead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S_FishDead::IsInitialized() const {
  return true;
}

void CMD_S_FishDead::InternalSwap(CMD_S_FishDead* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fish_.InternalSwap(&other->fish_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_S_FishDead, chair_id_)
      + sizeof(CMD_S_FishDead::chair_id_)
      - PROTOBUF_FIELD_OFFSET(CMD_S_FishDead, score_)>(
          reinterpret_cast<char*>(&score_),
          reinterpret_cast<char*>(&other->score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_S_FishDead::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_S_PlayerShoot::_Internal {
 public:
};

CMD_S_PlayerShoot::CMD_S_PlayerShoot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMD_S_PlayerShoot)
}
CMD_S_PlayerShoot::CMD_S_PlayerShoot(const CMD_S_PlayerShoot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:CMD_S_PlayerShoot)
}

void CMD_S_PlayerShoot::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(type_));
}

CMD_S_PlayerShoot::~CMD_S_PlayerShoot() {
  // @@protoc_insertion_point(destructor:CMD_S_PlayerShoot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_S_PlayerShoot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_S_PlayerShoot::ArenaDtor(void* object) {
  CMD_S_PlayerShoot* _this = reinterpret_cast< CMD_S_PlayerShoot* >(object);
  (void)_this;
}
void CMD_S_PlayerShoot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_S_PlayerShoot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_S_PlayerShoot& CMD_S_PlayerShoot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_S_PlayerShoot_WPBY_2eproto.base);
  return *internal_default_instance();
}


void CMD_S_PlayerShoot::Clear() {
// @@protoc_insertion_point(message_clear_start:CMD_S_PlayerShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_S_PlayerShoot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 player_cur_score = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          player_cur_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_S_PlayerShoot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMD_S_PlayerShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // int32 level = 4;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_level(), target);
  }

  // int32 type = 5;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_type(), target);
  }

  // int64 player_cur_score = 6;
  if (this->player_cur_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_player_cur_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMD_S_PlayerShoot)
  return target;
}

size_t CMD_S_PlayerShoot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMD_S_PlayerShoot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 level = 4;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  // int64 player_cur_score = 6;
  if (this->player_cur_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_player_cur_score());
  }

  // int32 type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_S_PlayerShoot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMD_S_PlayerShoot)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_S_PlayerShoot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_S_PlayerShoot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMD_S_PlayerShoot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMD_S_PlayerShoot)
    MergeFrom(*source);
  }
}

void CMD_S_PlayerShoot::MergeFrom(const CMD_S_PlayerShoot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMD_S_PlayerShoot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.player_cur_score() != 0) {
    _internal_set_player_cur_score(from._internal_player_cur_score());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void CMD_S_PlayerShoot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMD_S_PlayerShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_S_PlayerShoot::CopyFrom(const CMD_S_PlayerShoot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMD_S_PlayerShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S_PlayerShoot::IsInitialized() const {
  return true;
}

void CMD_S_PlayerShoot::InternalSwap(CMD_S_PlayerShoot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_S_PlayerShoot, type_)
      + sizeof(CMD_S_PlayerShoot::type_)
      - PROTOBUF_FIELD_OFFSET(CMD_S_PlayerShoot, chair_id_)>(
          reinterpret_cast<char*>(&chair_id_),
          reinterpret_cast<char*>(&other->chair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_S_PlayerShoot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_C_RobotShoot::_Internal {
 public:
};

CMD_C_RobotShoot::CMD_C_RobotShoot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMD_C_RobotShoot)
}
CMD_C_RobotShoot::CMD_C_RobotShoot(const CMD_C_RobotShoot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_lock_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(is_lock_));
  // @@protoc_insertion_point(copy_constructor:CMD_C_RobotShoot)
}

void CMD_C_RobotShoot::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_lock_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(is_lock_));
}

CMD_C_RobotShoot::~CMD_C_RobotShoot() {
  // @@protoc_insertion_point(destructor:CMD_C_RobotShoot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_C_RobotShoot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_C_RobotShoot::ArenaDtor(void* object) {
  CMD_C_RobotShoot* _this = reinterpret_cast< CMD_C_RobotShoot* >(object);
  (void)_this;
}
void CMD_C_RobotShoot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_C_RobotShoot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_C_RobotShoot& CMD_C_RobotShoot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_C_RobotShoot_WPBY_2eproto.base);
  return *internal_default_instance();
}


void CMD_C_RobotShoot::Clear() {
// @@protoc_insertion_point(message_clear_start:CMD_C_RobotShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_lock_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(is_lock_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_C_RobotShoot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_lock = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_lock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_C_RobotShoot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMD_C_RobotShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int32 level = 2;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_level(), target);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // int32 is_lock = 4;
  if (this->is_lock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_is_lock(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMD_C_RobotShoot)
  return target;
}

size_t CMD_C_RobotShoot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMD_C_RobotShoot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 is_lock = 4;
  if (this->is_lock() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_lock());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_C_RobotShoot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMD_C_RobotShoot)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_C_RobotShoot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_C_RobotShoot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMD_C_RobotShoot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMD_C_RobotShoot)
    MergeFrom(*source);
  }
}

void CMD_C_RobotShoot::MergeFrom(const CMD_C_RobotShoot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMD_C_RobotShoot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.is_lock() != 0) {
    _internal_set_is_lock(from._internal_is_lock());
  }
}

void CMD_C_RobotShoot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMD_C_RobotShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_C_RobotShoot::CopyFrom(const CMD_C_RobotShoot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMD_C_RobotShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_C_RobotShoot::IsInitialized() const {
  return true;
}

void CMD_C_RobotShoot::InternalSwap(CMD_C_RobotShoot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_C_RobotShoot, is_lock_)
      + sizeof(CMD_C_RobotShoot::is_lock_)
      - PROTOBUF_FIELD_OFFSET(CMD_C_RobotShoot, chair_id_)>(
          reinterpret_cast<char*>(&chair_id_),
          reinterpret_cast<char*>(&other->chair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_C_RobotShoot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_C_PlayerLock::_Internal {
 public:
};

CMD_C_PlayerLock::CMD_C_PlayerLock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMD_C_PlayerLock)
}
CMD_C_PlayerLock::CMD_C_PlayerLock(const CMD_C_PlayerLock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&fish_id_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(fish_id_));
  // @@protoc_insertion_point(copy_constructor:CMD_C_PlayerLock)
}

void CMD_C_PlayerLock::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&fish_id_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(fish_id_));
}

CMD_C_PlayerLock::~CMD_C_PlayerLock() {
  // @@protoc_insertion_point(destructor:CMD_C_PlayerLock)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_C_PlayerLock::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_C_PlayerLock::ArenaDtor(void* object) {
  CMD_C_PlayerLock* _this = reinterpret_cast< CMD_C_PlayerLock* >(object);
  (void)_this;
}
void CMD_C_PlayerLock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_C_PlayerLock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_C_PlayerLock& CMD_C_PlayerLock::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_C_PlayerLock_WPBY_2eproto.base);
  return *internal_default_instance();
}


void CMD_C_PlayerLock::Clear() {
// @@protoc_insertion_point(message_clear_start:CMD_C_PlayerLock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fish_id_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(fish_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_C_PlayerLock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fish_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fish_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_C_PlayerLock::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMD_C_PlayerLock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int32 fish_id = 2;
  if (this->fish_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fish_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMD_C_PlayerLock)
  return target;
}

size_t CMD_C_PlayerLock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMD_C_PlayerLock)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 fish_id = 2;
  if (this->fish_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fish_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_C_PlayerLock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMD_C_PlayerLock)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_C_PlayerLock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_C_PlayerLock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMD_C_PlayerLock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMD_C_PlayerLock)
    MergeFrom(*source);
  }
}

void CMD_C_PlayerLock::MergeFrom(const CMD_C_PlayerLock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMD_C_PlayerLock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.fish_id() != 0) {
    _internal_set_fish_id(from._internal_fish_id());
  }
}

void CMD_C_PlayerLock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMD_C_PlayerLock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_C_PlayerLock::CopyFrom(const CMD_C_PlayerLock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMD_C_PlayerLock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_C_PlayerLock::IsInitialized() const {
  return true;
}

void CMD_C_PlayerLock::InternalSwap(CMD_C_PlayerLock* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_C_PlayerLock, fish_id_)
      + sizeof(CMD_C_PlayerLock::fish_id_)
      - PROTOBUF_FIELD_OFFSET(CMD_C_PlayerLock, chair_id_)>(
          reinterpret_cast<char*>(&chair_id_),
          reinterpret_cast<char*>(&other->chair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_C_PlayerLock::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_C_JuBuZhaDan::_Internal {
 public:
};

CMD_C_JuBuZhaDan::CMD_C_JuBuZhaDan(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fish_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMD_C_JuBuZhaDan)
}
CMD_C_JuBuZhaDan::CMD_C_JuBuZhaDan(const CMD_C_JuBuZhaDan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fish_id_(from.fish_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&te_shu_iu_id_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(te_shu_iu_id_));
  // @@protoc_insertion_point(copy_constructor:CMD_C_JuBuZhaDan)
}

void CMD_C_JuBuZhaDan::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&te_shu_iu_id_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(te_shu_iu_id_));
}

CMD_C_JuBuZhaDan::~CMD_C_JuBuZhaDan() {
  // @@protoc_insertion_point(destructor:CMD_C_JuBuZhaDan)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_C_JuBuZhaDan::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_C_JuBuZhaDan::ArenaDtor(void* object) {
  CMD_C_JuBuZhaDan* _this = reinterpret_cast< CMD_C_JuBuZhaDan* >(object);
  (void)_this;
}
void CMD_C_JuBuZhaDan::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_C_JuBuZhaDan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_C_JuBuZhaDan& CMD_C_JuBuZhaDan::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_C_JuBuZhaDan_WPBY_2eproto.base);
  return *internal_default_instance();
}


void CMD_C_JuBuZhaDan::Clear() {
// @@protoc_insertion_point(message_clear_start:CMD_C_JuBuZhaDan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fish_id_.Clear();
  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&te_shu_iu_id_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(te_shu_iu_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_C_JuBuZhaDan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 te_shu_iu_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          te_shu_iu_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 fish_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_fish_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_fish_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_C_JuBuZhaDan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMD_C_JuBuZhaDan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int32 te_shu_iu_id = 2;
  if (this->te_shu_iu_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_te_shu_iu_id(), target);
  }

  // repeated int32 fish_id = 3;
  {
    int byte_size = _fish_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_fish_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMD_C_JuBuZhaDan)
  return target;
}

size_t CMD_C_JuBuZhaDan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMD_C_JuBuZhaDan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 fish_id = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->fish_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _fish_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 te_shu_iu_id = 2;
  if (this->te_shu_iu_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_te_shu_iu_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_C_JuBuZhaDan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMD_C_JuBuZhaDan)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_C_JuBuZhaDan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_C_JuBuZhaDan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMD_C_JuBuZhaDan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMD_C_JuBuZhaDan)
    MergeFrom(*source);
  }
}

void CMD_C_JuBuZhaDan::MergeFrom(const CMD_C_JuBuZhaDan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMD_C_JuBuZhaDan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fish_id_.MergeFrom(from.fish_id_);
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.te_shu_iu_id() != 0) {
    _internal_set_te_shu_iu_id(from._internal_te_shu_iu_id());
  }
}

void CMD_C_JuBuZhaDan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMD_C_JuBuZhaDan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_C_JuBuZhaDan::CopyFrom(const CMD_C_JuBuZhaDan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMD_C_JuBuZhaDan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_C_JuBuZhaDan::IsInitialized() const {
  return true;
}

void CMD_C_JuBuZhaDan::InternalSwap(CMD_C_JuBuZhaDan* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fish_id_.InternalSwap(&other->fish_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_C_JuBuZhaDan, te_shu_iu_id_)
      + sizeof(CMD_C_JuBuZhaDan::te_shu_iu_id_)
      - PROTOBUF_FIELD_OFFSET(CMD_C_JuBuZhaDan, chair_id_)>(
          reinterpret_cast<char*>(&chair_id_),
          reinterpret_cast<char*>(&other->chair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_C_JuBuZhaDan::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_C_TongLeiZhaDan::_Internal {
 public:
};

CMD_C_TongLeiZhaDan::CMD_C_TongLeiZhaDan(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fish_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMD_C_TongLeiZhaDan)
}
CMD_C_TongLeiZhaDan::CMD_C_TongLeiZhaDan(const CMD_C_TongLeiZhaDan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fish_id_(from.fish_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&te_shu_iu_id_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(te_shu_iu_id_));
  // @@protoc_insertion_point(copy_constructor:CMD_C_TongLeiZhaDan)
}

void CMD_C_TongLeiZhaDan::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&te_shu_iu_id_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(te_shu_iu_id_));
}

CMD_C_TongLeiZhaDan::~CMD_C_TongLeiZhaDan() {
  // @@protoc_insertion_point(destructor:CMD_C_TongLeiZhaDan)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_C_TongLeiZhaDan::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_C_TongLeiZhaDan::ArenaDtor(void* object) {
  CMD_C_TongLeiZhaDan* _this = reinterpret_cast< CMD_C_TongLeiZhaDan* >(object);
  (void)_this;
}
void CMD_C_TongLeiZhaDan::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_C_TongLeiZhaDan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_C_TongLeiZhaDan& CMD_C_TongLeiZhaDan::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_C_TongLeiZhaDan_WPBY_2eproto.base);
  return *internal_default_instance();
}


void CMD_C_TongLeiZhaDan::Clear() {
// @@protoc_insertion_point(message_clear_start:CMD_C_TongLeiZhaDan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fish_id_.Clear();
  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&te_shu_iu_id_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(te_shu_iu_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_C_TongLeiZhaDan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 te_shu_iu_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          te_shu_iu_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 fish_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_fish_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_fish_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_C_TongLeiZhaDan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMD_C_TongLeiZhaDan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int32 te_shu_iu_id = 2;
  if (this->te_shu_iu_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_te_shu_iu_id(), target);
  }

  // repeated int32 fish_id = 3;
  {
    int byte_size = _fish_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_fish_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMD_C_TongLeiZhaDan)
  return target;
}

size_t CMD_C_TongLeiZhaDan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMD_C_TongLeiZhaDan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 fish_id = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->fish_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _fish_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 te_shu_iu_id = 2;
  if (this->te_shu_iu_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_te_shu_iu_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_C_TongLeiZhaDan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMD_C_TongLeiZhaDan)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_C_TongLeiZhaDan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_C_TongLeiZhaDan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMD_C_TongLeiZhaDan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMD_C_TongLeiZhaDan)
    MergeFrom(*source);
  }
}

void CMD_C_TongLeiZhaDan::MergeFrom(const CMD_C_TongLeiZhaDan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMD_C_TongLeiZhaDan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fish_id_.MergeFrom(from.fish_id_);
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.te_shu_iu_id() != 0) {
    _internal_set_te_shu_iu_id(from._internal_te_shu_iu_id());
  }
}

void CMD_C_TongLeiZhaDan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMD_C_TongLeiZhaDan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_C_TongLeiZhaDan::CopyFrom(const CMD_C_TongLeiZhaDan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMD_C_TongLeiZhaDan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_C_TongLeiZhaDan::IsInitialized() const {
  return true;
}

void CMD_C_TongLeiZhaDan::InternalSwap(CMD_C_TongLeiZhaDan* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fish_id_.InternalSwap(&other->fish_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_C_TongLeiZhaDan, te_shu_iu_id_)
      + sizeof(CMD_C_TongLeiZhaDan::te_shu_iu_id_)
      - PROTOBUF_FIELD_OFFSET(CMD_C_TongLeiZhaDan, chair_id_)>(
          reinterpret_cast<char*>(&chair_id_),
          reinterpret_cast<char*>(&other->chair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_C_TongLeiZhaDan::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_C_ShuiHuZhuan::_Internal {
 public:
};

CMD_C_ShuiHuZhuan::CMD_C_ShuiHuZhuan(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fish_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMD_C_ShuiHuZhuan)
}
CMD_C_ShuiHuZhuan::CMD_C_ShuiHuZhuan(const CMD_C_ShuiHuZhuan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fish_id_(from.fish_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&te_shu_iu_id_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(te_shu_iu_id_));
  // @@protoc_insertion_point(copy_constructor:CMD_C_ShuiHuZhuan)
}

void CMD_C_ShuiHuZhuan::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&te_shu_iu_id_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(te_shu_iu_id_));
}

CMD_C_ShuiHuZhuan::~CMD_C_ShuiHuZhuan() {
  // @@protoc_insertion_point(destructor:CMD_C_ShuiHuZhuan)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_C_ShuiHuZhuan::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_C_ShuiHuZhuan::ArenaDtor(void* object) {
  CMD_C_ShuiHuZhuan* _this = reinterpret_cast< CMD_C_ShuiHuZhuan* >(object);
  (void)_this;
}
void CMD_C_ShuiHuZhuan::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_C_ShuiHuZhuan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_C_ShuiHuZhuan& CMD_C_ShuiHuZhuan::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_C_ShuiHuZhuan_WPBY_2eproto.base);
  return *internal_default_instance();
}


void CMD_C_ShuiHuZhuan::Clear() {
// @@protoc_insertion_point(message_clear_start:CMD_C_ShuiHuZhuan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fish_id_.Clear();
  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&te_shu_iu_id_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(te_shu_iu_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_C_ShuiHuZhuan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 te_shu_iu_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          te_shu_iu_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 fish_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_fish_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_fish_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_C_ShuiHuZhuan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMD_C_ShuiHuZhuan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int32 te_shu_iu_id = 2;
  if (this->te_shu_iu_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_te_shu_iu_id(), target);
  }

  // repeated int32 fish_id = 3;
  {
    int byte_size = _fish_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_fish_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMD_C_ShuiHuZhuan)
  return target;
}

size_t CMD_C_ShuiHuZhuan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMD_C_ShuiHuZhuan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 fish_id = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->fish_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _fish_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 te_shu_iu_id = 2;
  if (this->te_shu_iu_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_te_shu_iu_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_C_ShuiHuZhuan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMD_C_ShuiHuZhuan)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_C_ShuiHuZhuan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_C_ShuiHuZhuan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMD_C_ShuiHuZhuan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMD_C_ShuiHuZhuan)
    MergeFrom(*source);
  }
}

void CMD_C_ShuiHuZhuan::MergeFrom(const CMD_C_ShuiHuZhuan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMD_C_ShuiHuZhuan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fish_id_.MergeFrom(from.fish_id_);
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.te_shu_iu_id() != 0) {
    _internal_set_te_shu_iu_id(from._internal_te_shu_iu_id());
  }
}

void CMD_C_ShuiHuZhuan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMD_C_ShuiHuZhuan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_C_ShuiHuZhuan::CopyFrom(const CMD_C_ShuiHuZhuan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMD_C_ShuiHuZhuan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_C_ShuiHuZhuan::IsInitialized() const {
  return true;
}

void CMD_C_ShuiHuZhuan::InternalSwap(CMD_C_ShuiHuZhuan* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fish_id_.InternalSwap(&other->fish_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_C_ShuiHuZhuan, te_shu_iu_id_)
      + sizeof(CMD_C_ShuiHuZhuan::te_shu_iu_id_)
      - PROTOBUF_FIELD_OFFSET(CMD_C_ShuiHuZhuan, chair_id_)>(
          reinterpret_cast<char*>(&chair_id_),
          reinterpret_cast<char*>(&other->chair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_C_ShuiHuZhuan::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_C_ChangeBulletLevel::_Internal {
 public:
};

CMD_C_ChangeBulletLevel::CMD_C_ChangeBulletLevel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMD_C_ChangeBulletLevel)
}
CMD_C_ChangeBulletLevel::CMD_C_ChangeBulletLevel(const CMD_C_ChangeBulletLevel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chair_id_, &from.chair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&gun_level_) -
    reinterpret_cast<char*>(&chair_id_)) + sizeof(gun_level_));
  // @@protoc_insertion_point(copy_constructor:CMD_C_ChangeBulletLevel)
}

void CMD_C_ChangeBulletLevel::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&gun_level_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(gun_level_));
}

CMD_C_ChangeBulletLevel::~CMD_C_ChangeBulletLevel() {
  // @@protoc_insertion_point(destructor:CMD_C_ChangeBulletLevel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_C_ChangeBulletLevel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_C_ChangeBulletLevel::ArenaDtor(void* object) {
  CMD_C_ChangeBulletLevel* _this = reinterpret_cast< CMD_C_ChangeBulletLevel* >(object);
  (void)_this;
}
void CMD_C_ChangeBulletLevel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_C_ChangeBulletLevel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_C_ChangeBulletLevel& CMD_C_ChangeBulletLevel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_C_ChangeBulletLevel_WPBY_2eproto.base);
  return *internal_default_instance();
}


void CMD_C_ChangeBulletLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:CMD_C_ChangeBulletLevel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gun_level_) -
      reinterpret_cast<char*>(&chair_id_)) + sizeof(gun_level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_C_ChangeBulletLevel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gun_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gun_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gun_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gun_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_C_ChangeBulletLevel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMD_C_ChangeBulletLevel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int32 gun_type = 2;
  if (this->gun_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_gun_type(), target);
  }

  // int32 gun_level = 3;
  if (this->gun_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_gun_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMD_C_ChangeBulletLevel)
  return target;
}

size_t CMD_C_ChangeBulletLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMD_C_ChangeBulletLevel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 gun_type = 2;
  if (this->gun_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gun_type());
  }

  // int32 gun_level = 3;
  if (this->gun_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gun_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_C_ChangeBulletLevel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMD_C_ChangeBulletLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_C_ChangeBulletLevel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_C_ChangeBulletLevel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMD_C_ChangeBulletLevel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMD_C_ChangeBulletLevel)
    MergeFrom(*source);
  }
}

void CMD_C_ChangeBulletLevel::MergeFrom(const CMD_C_ChangeBulletLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMD_C_ChangeBulletLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.gun_type() != 0) {
    _internal_set_gun_type(from._internal_gun_type());
  }
  if (from.gun_level() != 0) {
    _internal_set_gun_level(from._internal_gun_level());
  }
}

void CMD_C_ChangeBulletLevel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMD_C_ChangeBulletLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_C_ChangeBulletLevel::CopyFrom(const CMD_C_ChangeBulletLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMD_C_ChangeBulletLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_C_ChangeBulletLevel::IsInitialized() const {
  return true;
}

void CMD_C_ChangeBulletLevel::InternalSwap(CMD_C_ChangeBulletLevel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_C_ChangeBulletLevel, gun_level_)
      + sizeof(CMD_C_ChangeBulletLevel::gun_level_)
      - PROTOBUF_FIELD_OFFSET(CMD_C_ChangeBulletLevel, chair_id_)>(
          reinterpret_cast<char*>(&chair_id_),
          reinterpret_cast<char*>(&other->chair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_C_ChangeBulletLevel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Bullet::_Internal {
 public:
};

Bullet::Bullet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Bullet)
}
Bullet::Bullet(const Bullet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&chips_) -
    reinterpret_cast<char*>(&id_)) + sizeof(chips_));
  // @@protoc_insertion_point(copy_constructor:Bullet)
}

void Bullet::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chips_) -
      reinterpret_cast<char*>(&id_)) + sizeof(chips_));
}

Bullet::~Bullet() {
  // @@protoc_insertion_point(destructor:Bullet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Bullet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Bullet::ArenaDtor(void* object) {
  Bullet* _this = reinterpret_cast< Bullet* >(object);
  (void)_this;
}
void Bullet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Bullet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Bullet& Bullet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Bullet_WPBY_2eproto.base);
  return *internal_default_instance();
}


void Bullet::Clear() {
// @@protoc_insertion_point(message_clear_start:Bullet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chips_) -
      reinterpret_cast<char*>(&id_)) + sizeof(chips_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Bullet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bullet_kind = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bullet_kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_use = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_use_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chips = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          chips_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Bullet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Bullet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 bullet_kind = 2;
  if (this->bullet_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bullet_kind(), target);
  }

  // int32 is_use = 3;
  if (this->is_use() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_is_use(), target);
  }

  // int32 level = 4;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_level(), target);
  }

  // int32 type = 5;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_type(), target);
  }

  // int32 chips = 6;
  if (this->chips() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_chips(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Bullet)
  return target;
}

size_t Bullet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Bullet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 bullet_kind = 2;
  if (this->bullet_kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bullet_kind());
  }

  // int32 is_use = 3;
  if (this->is_use() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_use());
  }

  // int32 level = 4;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  // int32 type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 chips = 6;
  if (this->chips() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chips());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Bullet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Bullet)
  GOOGLE_DCHECK_NE(&from, this);
  const Bullet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Bullet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Bullet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Bullet)
    MergeFrom(*source);
  }
}

void Bullet::MergeFrom(const Bullet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Bullet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.bullet_kind() != 0) {
    _internal_set_bullet_kind(from._internal_bullet_kind());
  }
  if (from.is_use() != 0) {
    _internal_set_is_use(from._internal_is_use());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.chips() != 0) {
    _internal_set_chips(from._internal_chips());
  }
}

void Bullet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Bullet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bullet::CopyFrom(const Bullet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Bullet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bullet::IsInitialized() const {
  return true;
}

void Bullet::InternalSwap(Bullet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Bullet, chips_)
      + sizeof(Bullet::chips_)
      - PROTOBUF_FIELD_OFFSET(Bullet, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Bullet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_C_PressShoot::_Internal {
 public:
  static const ::Bullet& bullet(const CMD_C_PressShoot* msg);
};

const ::Bullet&
CMD_C_PressShoot::_Internal::bullet(const CMD_C_PressShoot* msg) {
  return *msg->bullet_;
}
CMD_C_PressShoot::CMD_C_PressShoot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMD_C_PressShoot)
}
CMD_C_PressShoot::CMD_C_PressShoot(const CMD_C_PressShoot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bullet()) {
    bullet_ = new ::Bullet(*from.bullet_);
  } else {
    bullet_ = nullptr;
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&chair_id_) -
    reinterpret_cast<char*>(&x_)) + sizeof(chair_id_));
  // @@protoc_insertion_point(copy_constructor:CMD_C_PressShoot)
}

void CMD_C_PressShoot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMD_C_PressShoot_WPBY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bullet_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&bullet_)) + sizeof(chair_id_));
}

CMD_C_PressShoot::~CMD_C_PressShoot() {
  // @@protoc_insertion_point(destructor:CMD_C_PressShoot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_C_PressShoot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bullet_;
}

void CMD_C_PressShoot::ArenaDtor(void* object) {
  CMD_C_PressShoot* _this = reinterpret_cast< CMD_C_PressShoot* >(object);
  (void)_this;
}
void CMD_C_PressShoot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_C_PressShoot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_C_PressShoot& CMD_C_PressShoot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_C_PressShoot_WPBY_2eproto.base);
  return *internal_default_instance();
}


void CMD_C_PressShoot::Clear() {
// @@protoc_insertion_point(message_clear_start:CMD_C_PressShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && bullet_ != nullptr) {
    delete bullet_;
  }
  bullet_ = nullptr;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&x_)) + sizeof(chair_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_C_PressShoot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 chair_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Bullet bullet = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bullet(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_C_PressShoot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMD_C_PressShoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // int32 chair_id = 3;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_chair_id(), target);
  }

  // .Bullet bullet = 4;
  if (this->has_bullet()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::bullet(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMD_C_PressShoot)
  return target;
}

size_t CMD_C_PressShoot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMD_C_PressShoot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Bullet bullet = 4;
  if (this->has_bullet()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bullet_);
  }

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 chair_id = 3;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_C_PressShoot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMD_C_PressShoot)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_C_PressShoot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_C_PressShoot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMD_C_PressShoot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMD_C_PressShoot)
    MergeFrom(*source);
  }
}

void CMD_C_PressShoot::MergeFrom(const CMD_C_PressShoot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMD_C_PressShoot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bullet()) {
    _internal_mutable_bullet()->::Bullet::MergeFrom(from._internal_bullet());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
}

void CMD_C_PressShoot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMD_C_PressShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_C_PressShoot::CopyFrom(const CMD_C_PressShoot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMD_C_PressShoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_C_PressShoot::IsInitialized() const {
  return true;
}

void CMD_C_PressShoot::InternalSwap(CMD_C_PressShoot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_C_PressShoot, chair_id_)
      + sizeof(CMD_C_PressShoot::chair_id_)
      - PROTOBUF_FIELD_OFFSET(CMD_C_PressShoot, bullet_)>(
          reinterpret_cast<char*>(&bullet_),
          reinterpret_cast<char*>(&other->bullet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_C_PressShoot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_C_HitedFish::_Internal {
 public:
  static const ::Bullet& bullet(const CMD_C_HitedFish* msg);
};

const ::Bullet&
CMD_C_HitedFish::_Internal::bullet(const CMD_C_HitedFish* msg) {
  return *msg->bullet_;
}
CMD_C_HitedFish::CMD_C_HitedFish(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hit_fish_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMD_C_HitedFish)
}
CMD_C_HitedFish::CMD_C_HitedFish(const CMD_C_HitedFish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hit_fish_(from.hit_fish_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bullet()) {
    bullet_ = new ::Bullet(*from.bullet_);
  } else {
    bullet_ = nullptr;
  }
  chair_id_ = from.chair_id_;
  // @@protoc_insertion_point(copy_constructor:CMD_C_HitedFish)
}

void CMD_C_HitedFish::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMD_C_HitedFish_WPBY_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bullet_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&bullet_)) + sizeof(chair_id_));
}

CMD_C_HitedFish::~CMD_C_HitedFish() {
  // @@protoc_insertion_point(destructor:CMD_C_HitedFish)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_C_HitedFish::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bullet_;
}

void CMD_C_HitedFish::ArenaDtor(void* object) {
  CMD_C_HitedFish* _this = reinterpret_cast< CMD_C_HitedFish* >(object);
  (void)_this;
}
void CMD_C_HitedFish::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_C_HitedFish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_C_HitedFish& CMD_C_HitedFish::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_C_HitedFish_WPBY_2eproto.base);
  return *internal_default_instance();
}


void CMD_C_HitedFish::Clear() {
// @@protoc_insertion_point(message_clear_start:CMD_C_HitedFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hit_fish_.Clear();
  if (GetArena() == nullptr && bullet_ != nullptr) {
    delete bullet_;
  }
  bullet_ = nullptr;
  chair_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_C_HitedFish::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Bullet bullet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bullet(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chair_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 hit_fish = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_hit_fish(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_hit_fish(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_C_HitedFish::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMD_C_HitedFish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Bullet bullet = 1;
  if (this->has_bullet()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bullet(this), target, stream);
  }

  // int32 chair_id = 2;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_chair_id(), target);
  }

  // repeated int32 hit_fish = 3;
  {
    int byte_size = _hit_fish_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_hit_fish(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMD_C_HitedFish)
  return target;
}

size_t CMD_C_HitedFish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMD_C_HitedFish)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 hit_fish = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->hit_fish_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _hit_fish_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .Bullet bullet = 1;
  if (this->has_bullet()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bullet_);
  }

  // int32 chair_id = 2;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_C_HitedFish::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMD_C_HitedFish)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_C_HitedFish* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_C_HitedFish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMD_C_HitedFish)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMD_C_HitedFish)
    MergeFrom(*source);
  }
}

void CMD_C_HitedFish::MergeFrom(const CMD_C_HitedFish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMD_C_HitedFish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hit_fish_.MergeFrom(from.hit_fish_);
  if (from.has_bullet()) {
    _internal_mutable_bullet()->::Bullet::MergeFrom(from._internal_bullet());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
}

void CMD_C_HitedFish::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMD_C_HitedFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_C_HitedFish::CopyFrom(const CMD_C_HitedFish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMD_C_HitedFish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_C_HitedFish::IsInitialized() const {
  return true;
}

void CMD_C_HitedFish::InternalSwap(CMD_C_HitedFish* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hit_fish_.InternalSwap(&other->hit_fish_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_C_HitedFish, chair_id_)
      + sizeof(CMD_C_HitedFish::chair_id_)
      - PROTOBUF_FIELD_OFFSET(CMD_C_HitedFish, bullet_)>(
          reinterpret_cast<char*>(&bullet_),
          reinterpret_cast<char*>(&other->bullet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_C_HitedFish::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMD_S_RobotShoot* Arena::CreateMaybeMessage< ::CMD_S_RobotShoot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMD_S_RobotShoot >(arena);
}
template<> PROTOBUF_NOINLINE ::CMD_S_RobotList* Arena::CreateMaybeMessage< ::CMD_S_RobotList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMD_S_RobotList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMD_S_PlayerLock* Arena::CreateMaybeMessage< ::CMD_S_PlayerLock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMD_S_PlayerLock >(arena);
}
template<> PROTOBUF_NOINLINE ::FishPoint* Arena::CreateMaybeMessage< ::FishPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FishPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::LineInfo* Arena::CreateMaybeMessage< ::LineInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LineInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::FishLineInfo* Arena::CreateMaybeMessage< ::FishLineInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FishLineInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::FishTide* Arena::CreateMaybeMessage< ::FishTide >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FishTide >(arena);
}
template<> PROTOBUF_NOINLINE ::CMD_S_YuChaoCome* Arena::CreateMaybeMessage< ::CMD_S_YuChaoCome >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMD_S_YuChaoCome >(arena);
}
template<> PROTOBUF_NOINLINE ::CMD_S_ShootLK* Arena::CreateMaybeMessage< ::CMD_S_ShootLK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMD_S_ShootLK >(arena);
}
template<> PROTOBUF_NOINLINE ::CMD_S_JuBuZhaDan* Arena::CreateMaybeMessage< ::CMD_S_JuBuZhaDan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMD_S_JuBuZhaDan >(arena);
}
template<> PROTOBUF_NOINLINE ::CMD_S_YiWangDaJin* Arena::CreateMaybeMessage< ::CMD_S_YiWangDaJin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMD_S_YiWangDaJin >(arena);
}
template<> PROTOBUF_NOINLINE ::CMD_S_TongLeiZhaDan* Arena::CreateMaybeMessage< ::CMD_S_TongLeiZhaDan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMD_S_TongLeiZhaDan >(arena);
}
template<> PROTOBUF_NOINLINE ::LoadFish* Arena::CreateMaybeMessage< ::LoadFish >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LoadFish >(arena);
}
template<> PROTOBUF_NOINLINE ::CMD_S_YuWang* Arena::CreateMaybeMessage< ::CMD_S_YuWang >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMD_S_YuWang >(arena);
}
template<> PROTOBUF_NOINLINE ::CMD_S_DaSiXi* Arena::CreateMaybeMessage< ::CMD_S_DaSiXi >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMD_S_DaSiXi >(arena);
}
template<> PROTOBUF_NOINLINE ::CMD_S_DaSanYuan* Arena::CreateMaybeMessage< ::CMD_S_DaSanYuan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMD_S_DaSanYuan >(arena);
}
template<> PROTOBUF_NOINLINE ::CMD_S_ZhongYiTang* Arena::CreateMaybeMessage< ::CMD_S_ZhongYiTang >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMD_S_ZhongYiTang >(arena);
}
template<> PROTOBUF_NOINLINE ::CMD_S_ShuiHuZhuan* Arena::CreateMaybeMessage< ::CMD_S_ShuiHuZhuan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMD_S_ShuiHuZhuan >(arena);
}
template<> PROTOBUF_NOINLINE ::CMD_S_ChangeBulletLevel* Arena::CreateMaybeMessage< ::CMD_S_ChangeBulletLevel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMD_S_ChangeBulletLevel >(arena);
}
template<> PROTOBUF_NOINLINE ::CMD_S_CONFIG* Arena::CreateMaybeMessage< ::CMD_S_CONFIG >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMD_S_CONFIG >(arena);
}
template<> PROTOBUF_NOINLINE ::CMD_S_PlayerGunLevel* Arena::CreateMaybeMessage< ::CMD_S_PlayerGunLevel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMD_S_PlayerGunLevel >(arena);
}
template<> PROTOBUF_NOINLINE ::CMD_S_AddFish* Arena::CreateMaybeMessage< ::CMD_S_AddFish >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMD_S_AddFish >(arena);
}
template<> PROTOBUF_NOINLINE ::CMD_S_PlayerEnter* Arena::CreateMaybeMessage< ::CMD_S_PlayerEnter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMD_S_PlayerEnter >(arena);
}
template<> PROTOBUF_NOINLINE ::FishDeadInfo* Arena::CreateMaybeMessage< ::FishDeadInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FishDeadInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMD_S_FishDead* Arena::CreateMaybeMessage< ::CMD_S_FishDead >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMD_S_FishDead >(arena);
}
template<> PROTOBUF_NOINLINE ::CMD_S_PlayerShoot* Arena::CreateMaybeMessage< ::CMD_S_PlayerShoot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMD_S_PlayerShoot >(arena);
}
template<> PROTOBUF_NOINLINE ::CMD_C_RobotShoot* Arena::CreateMaybeMessage< ::CMD_C_RobotShoot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMD_C_RobotShoot >(arena);
}
template<> PROTOBUF_NOINLINE ::CMD_C_PlayerLock* Arena::CreateMaybeMessage< ::CMD_C_PlayerLock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMD_C_PlayerLock >(arena);
}
template<> PROTOBUF_NOINLINE ::CMD_C_JuBuZhaDan* Arena::CreateMaybeMessage< ::CMD_C_JuBuZhaDan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMD_C_JuBuZhaDan >(arena);
}
template<> PROTOBUF_NOINLINE ::CMD_C_TongLeiZhaDan* Arena::CreateMaybeMessage< ::CMD_C_TongLeiZhaDan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMD_C_TongLeiZhaDan >(arena);
}
template<> PROTOBUF_NOINLINE ::CMD_C_ShuiHuZhuan* Arena::CreateMaybeMessage< ::CMD_C_ShuiHuZhuan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMD_C_ShuiHuZhuan >(arena);
}
template<> PROTOBUF_NOINLINE ::CMD_C_ChangeBulletLevel* Arena::CreateMaybeMessage< ::CMD_C_ChangeBulletLevel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMD_C_ChangeBulletLevel >(arena);
}
template<> PROTOBUF_NOINLINE ::Bullet* Arena::CreateMaybeMessage< ::Bullet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Bullet >(arena);
}
template<> PROTOBUF_NOINLINE ::CMD_C_PressShoot* Arena::CreateMaybeMessage< ::CMD_C_PressShoot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMD_C_PressShoot >(arena);
}
template<> PROTOBUF_NOINLINE ::CMD_C_HitedFish* Arena::CreateMaybeMessage< ::CMD_C_HitedFish >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMD_C_HitedFish >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
