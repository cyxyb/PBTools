// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FLM.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_FLM_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_FLM_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_FLM_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_FLM_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FLM_2eproto;
namespace FLM {
class CMD_3D_SC_Result;
class CMD_3D_SC_ResultDefaultTypeInternal;
extern CMD_3D_SC_ResultDefaultTypeInternal _CMD_3D_SC_Result_default_instance_;
class Is_HitIcon;
class Is_HitIconDefaultTypeInternal;
extern Is_HitIconDefaultTypeInternal _Is_HitIcon_default_instance_;
class SC_SceneInfo;
class SC_SceneInfoDefaultTypeInternal;
extern SC_SceneInfoDefaultTypeInternal _SC_SceneInfo_default_instance_;
}  // namespace FLM
PROTOBUF_NAMESPACE_OPEN
template<> ::FLM::CMD_3D_SC_Result* Arena::CreateMaybeMessage<::FLM::CMD_3D_SC_Result>(Arena*);
template<> ::FLM::Is_HitIcon* Arena::CreateMaybeMessage<::FLM::Is_HitIcon>(Arena*);
template<> ::FLM::SC_SceneInfo* Arena::CreateMaybeMessage<::FLM::SC_SceneInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace FLM {

enum EMsgIDFLM : int {
  SUB_CS_GAME_START = 0,
  SUB_SC_GAME_OVER = 1,
  SUB_SC_UPDATE_PRIZE_POOL = 2,
  EMsgIDFLM_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EMsgIDFLM_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EMsgIDFLM_IsValid(int value);
constexpr EMsgIDFLM EMsgIDFLM_MIN = SUB_CS_GAME_START;
constexpr EMsgIDFLM EMsgIDFLM_MAX = SUB_SC_UPDATE_PRIZE_POOL;
constexpr int EMsgIDFLM_ARRAYSIZE = EMsgIDFLM_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDFLM_descriptor();
template<typename T>
inline const std::string& EMsgIDFLM_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EMsgIDFLM>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EMsgIDFLM_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EMsgIDFLM_descriptor(), enum_t_value);
}
inline bool EMsgIDFLM_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EMsgIDFLM* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EMsgIDFLM>(
    EMsgIDFLM_descriptor(), name, value);
}
// ===================================================================

class Is_HitIcon PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLM.Is_HitIcon) */ {
 public:
  inline Is_HitIcon() : Is_HitIcon(nullptr) {}
  virtual ~Is_HitIcon();

  Is_HitIcon(const Is_HitIcon& from);
  Is_HitIcon(Is_HitIcon&& from) noexcept
    : Is_HitIcon() {
    *this = ::std::move(from);
  }

  inline Is_HitIcon& operator=(const Is_HitIcon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Is_HitIcon& operator=(Is_HitIcon&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Is_HitIcon& default_instance();

  static inline const Is_HitIcon* internal_default_instance() {
    return reinterpret_cast<const Is_HitIcon*>(
               &_Is_HitIcon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Is_HitIcon& a, Is_HitIcon& b) {
    a.Swap(&b);
  }
  inline void Swap(Is_HitIcon* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Is_HitIcon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Is_HitIcon* New() const final {
    return CreateMaybeMessage<Is_HitIcon>(nullptr);
  }

  Is_HitIcon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Is_HitIcon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Is_HitIcon& from);
  void MergeFrom(const Is_HitIcon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Is_HitIcon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLM.Is_HitIcon";
  }
  protected:
  explicit Is_HitIcon(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FLM_2eproto);
    return ::descriptor_table_FLM_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsHitIconFieldNumber = 1,
  };
  // repeated bool is_hit_icon = 1;
  int is_hit_icon_size() const;
  private:
  int _internal_is_hit_icon_size() const;
  public:
  void clear_is_hit_icon();
  private:
  bool _internal_is_hit_icon(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_is_hit_icon() const;
  void _internal_add_is_hit_icon(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_is_hit_icon();
  public:
  bool is_hit_icon(int index) const;
  void set_is_hit_icon(int index, bool value);
  void add_is_hit_icon(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      is_hit_icon() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_is_hit_icon();

  // @@protoc_insertion_point(class_scope:FLM.Is_HitIcon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > is_hit_icon_;
  mutable std::atomic<int> _is_hit_icon_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FLM_2eproto;
};
// -------------------------------------------------------------------

class SC_SceneInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLM.SC_SceneInfo) */ {
 public:
  inline SC_SceneInfo() : SC_SceneInfo(nullptr) {}
  virtual ~SC_SceneInfo();

  SC_SceneInfo(const SC_SceneInfo& from);
  SC_SceneInfo(SC_SceneInfo&& from) noexcept
    : SC_SceneInfo() {
    *this = ::std::move(from);
  }

  inline SC_SceneInfo& operator=(const SC_SceneInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_SceneInfo& operator=(SC_SceneInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_SceneInfo& default_instance();

  static inline const SC_SceneInfo* internal_default_instance() {
    return reinterpret_cast<const SC_SceneInfo*>(
               &_SC_SceneInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SC_SceneInfo& a, SC_SceneInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_SceneInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_SceneInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_SceneInfo* New() const final {
    return CreateMaybeMessage<SC_SceneInfo>(nullptr);
  }

  SC_SceneInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_SceneInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_SceneInfo& from);
  void MergeFrom(const SC_SceneInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_SceneInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLM.SC_SceneInfo";
  }
  protected:
  explicit SC_SceneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FLM_2eproto);
    return ::descriptor_table_FLM_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChipListFieldNumber = 2,
    kFuScoreFieldNumber = 3,
    kIconFieldNumber = 4,
    kGoldNumFieldNumber = 5,
    kIsHitFieldNumber = 6,
    kCurChipFieldNumber = 1,
    kFreeTimeFieldNumber = 8,
    kLineWinScoreFieldNumber = 7,
    kTotalRateFieldNumber = 10,
    kGoldModeNumFieldNumber = 9,
  };
  // repeated int32 chip_list = 2;
  int chip_list_size() const;
  private:
  int _internal_chip_list_size() const;
  public:
  void clear_chip_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chip_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_chip_list() const;
  void _internal_add_chip_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_chip_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 chip_list(int index) const;
  void set_chip_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_chip_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      chip_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_chip_list();

  // repeated int32 fu_score = 3;
  int fu_score_size() const;
  private:
  int _internal_fu_score_size() const;
  public:
  void clear_fu_score();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fu_score(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_fu_score() const;
  void _internal_add_fu_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_fu_score();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 fu_score(int index) const;
  void set_fu_score(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_fu_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      fu_score() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_fu_score();

  // repeated int32 icon = 4;
  int icon_size() const;
  private:
  int _internal_icon_size() const;
  public:
  void clear_icon();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_icon(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_icon() const;
  void _internal_add_icon(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_icon();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 icon(int index) const;
  void set_icon(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_icon(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      icon() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_icon();

  // repeated int32 gold_num = 5;
  int gold_num_size() const;
  private:
  int _internal_gold_num_size() const;
  public:
  void clear_gold_num();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gold_num(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_gold_num() const;
  void _internal_add_gold_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_gold_num();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 gold_num(int index) const;
  void set_gold_num(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_gold_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      gold_num() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_gold_num();

  // repeated .FLM.Is_HitIcon is_hit = 6;
  int is_hit_size() const;
  private:
  int _internal_is_hit_size() const;
  public:
  void clear_is_hit();
  ::FLM::Is_HitIcon* mutable_is_hit(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FLM::Is_HitIcon >*
      mutable_is_hit();
  private:
  const ::FLM::Is_HitIcon& _internal_is_hit(int index) const;
  ::FLM::Is_HitIcon* _internal_add_is_hit();
  public:
  const ::FLM::Is_HitIcon& is_hit(int index) const;
  ::FLM::Is_HitIcon* add_is_hit();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FLM::Is_HitIcon >&
      is_hit() const;

  // int32 cur_chip = 1;
  void clear_cur_chip();
  ::PROTOBUF_NAMESPACE_ID::int32 cur_chip() const;
  void set_cur_chip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cur_chip() const;
  void _internal_set_cur_chip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 free_time = 8;
  void clear_free_time();
  ::PROTOBUF_NAMESPACE_ID::int32 free_time() const;
  void set_free_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_free_time() const;
  void _internal_set_free_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 line_win_score = 7;
  void clear_line_win_score();
  ::PROTOBUF_NAMESPACE_ID::int64 line_win_score() const;
  void set_line_win_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_line_win_score() const;
  void _internal_set_line_win_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 total_rate = 10;
  void clear_total_rate();
  ::PROTOBUF_NAMESPACE_ID::int64 total_rate() const;
  void set_total_rate(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total_rate() const;
  void _internal_set_total_rate(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 gold_mode_num = 9;
  void clear_gold_mode_num();
  ::PROTOBUF_NAMESPACE_ID::int32 gold_mode_num() const;
  void set_gold_mode_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gold_mode_num() const;
  void _internal_set_gold_mode_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:FLM.SC_SceneInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > chip_list_;
  mutable std::atomic<int> _chip_list_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > fu_score_;
  mutable std::atomic<int> _fu_score_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > icon_;
  mutable std::atomic<int> _icon_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > gold_num_;
  mutable std::atomic<int> _gold_num_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FLM::Is_HitIcon > is_hit_;
  ::PROTOBUF_NAMESPACE_ID::int32 cur_chip_;
  ::PROTOBUF_NAMESPACE_ID::int32 free_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 line_win_score_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_rate_;
  ::PROTOBUF_NAMESPACE_ID::int32 gold_mode_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FLM_2eproto;
};
// -------------------------------------------------------------------

class CMD_3D_SC_Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLM.CMD_3D_SC_Result) */ {
 public:
  inline CMD_3D_SC_Result() : CMD_3D_SC_Result(nullptr) {}
  virtual ~CMD_3D_SC_Result();

  CMD_3D_SC_Result(const CMD_3D_SC_Result& from);
  CMD_3D_SC_Result(CMD_3D_SC_Result&& from) noexcept
    : CMD_3D_SC_Result() {
    *this = ::std::move(from);
  }

  inline CMD_3D_SC_Result& operator=(const CMD_3D_SC_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMD_3D_SC_Result& operator=(CMD_3D_SC_Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMD_3D_SC_Result& default_instance();

  static inline const CMD_3D_SC_Result* internal_default_instance() {
    return reinterpret_cast<const CMD_3D_SC_Result*>(
               &_CMD_3D_SC_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMD_3D_SC_Result& a, CMD_3D_SC_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(CMD_3D_SC_Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMD_3D_SC_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMD_3D_SC_Result* New() const final {
    return CreateMaybeMessage<CMD_3D_SC_Result>(nullptr);
  }

  CMD_3D_SC_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMD_3D_SC_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMD_3D_SC_Result& from);
  void MergeFrom(const CMD_3D_SC_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMD_3D_SC_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLM.CMD_3D_SC_Result";
  }
  protected:
  explicit CMD_3D_SC_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FLM_2eproto);
    return ::descriptor_table_FLM_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIconFieldNumber = 1,
    kGoldNumFieldNumber = 2,
    kIsHitFieldNumber = 3,
    kLineWinScoreFieldNumber = 4,
    kFreeTimeFieldNumber = 5,
    kGoldModeNumFieldNumber = 6,
    kTotalRateFieldNumber = 7,
  };
  // repeated int32 icon = 1;
  int icon_size() const;
  private:
  int _internal_icon_size() const;
  public:
  void clear_icon();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_icon(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_icon() const;
  void _internal_add_icon(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_icon();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 icon(int index) const;
  void set_icon(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_icon(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      icon() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_icon();

  // repeated int32 gold_num = 2;
  int gold_num_size() const;
  private:
  int _internal_gold_num_size() const;
  public:
  void clear_gold_num();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gold_num(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_gold_num() const;
  void _internal_add_gold_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_gold_num();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 gold_num(int index) const;
  void set_gold_num(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_gold_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      gold_num() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_gold_num();

  // repeated .FLM.Is_HitIcon is_hit = 3;
  int is_hit_size() const;
  private:
  int _internal_is_hit_size() const;
  public:
  void clear_is_hit();
  ::FLM::Is_HitIcon* mutable_is_hit(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FLM::Is_HitIcon >*
      mutable_is_hit();
  private:
  const ::FLM::Is_HitIcon& _internal_is_hit(int index) const;
  ::FLM::Is_HitIcon* _internal_add_is_hit();
  public:
  const ::FLM::Is_HitIcon& is_hit(int index) const;
  ::FLM::Is_HitIcon* add_is_hit();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FLM::Is_HitIcon >&
      is_hit() const;

  // int64 line_win_score = 4;
  void clear_line_win_score();
  ::PROTOBUF_NAMESPACE_ID::int64 line_win_score() const;
  void set_line_win_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_line_win_score() const;
  void _internal_set_line_win_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 free_time = 5;
  void clear_free_time();
  ::PROTOBUF_NAMESPACE_ID::int32 free_time() const;
  void set_free_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_free_time() const;
  void _internal_set_free_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gold_mode_num = 6;
  void clear_gold_mode_num();
  ::PROTOBUF_NAMESPACE_ID::int32 gold_mode_num() const;
  void set_gold_mode_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gold_mode_num() const;
  void _internal_set_gold_mode_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 total_rate = 7;
  void clear_total_rate();
  ::PROTOBUF_NAMESPACE_ID::int64 total_rate() const;
  void set_total_rate(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total_rate() const;
  void _internal_set_total_rate(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:FLM.CMD_3D_SC_Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > icon_;
  mutable std::atomic<int> _icon_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > gold_num_;
  mutable std::atomic<int> _gold_num_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FLM::Is_HitIcon > is_hit_;
  ::PROTOBUF_NAMESPACE_ID::int64 line_win_score_;
  ::PROTOBUF_NAMESPACE_ID::int32 free_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 gold_mode_num_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FLM_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Is_HitIcon

// repeated bool is_hit_icon = 1;
inline int Is_HitIcon::_internal_is_hit_icon_size() const {
  return is_hit_icon_.size();
}
inline int Is_HitIcon::is_hit_icon_size() const {
  return _internal_is_hit_icon_size();
}
inline void Is_HitIcon::clear_is_hit_icon() {
  is_hit_icon_.Clear();
}
inline bool Is_HitIcon::_internal_is_hit_icon(int index) const {
  return is_hit_icon_.Get(index);
}
inline bool Is_HitIcon::is_hit_icon(int index) const {
  // @@protoc_insertion_point(field_get:FLM.Is_HitIcon.is_hit_icon)
  return _internal_is_hit_icon(index);
}
inline void Is_HitIcon::set_is_hit_icon(int index, bool value) {
  is_hit_icon_.Set(index, value);
  // @@protoc_insertion_point(field_set:FLM.Is_HitIcon.is_hit_icon)
}
inline void Is_HitIcon::_internal_add_is_hit_icon(bool value) {
  is_hit_icon_.Add(value);
}
inline void Is_HitIcon::add_is_hit_icon(bool value) {
  _internal_add_is_hit_icon(value);
  // @@protoc_insertion_point(field_add:FLM.Is_HitIcon.is_hit_icon)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
Is_HitIcon::_internal_is_hit_icon() const {
  return is_hit_icon_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
Is_HitIcon::is_hit_icon() const {
  // @@protoc_insertion_point(field_list:FLM.Is_HitIcon.is_hit_icon)
  return _internal_is_hit_icon();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
Is_HitIcon::_internal_mutable_is_hit_icon() {
  return &is_hit_icon_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
Is_HitIcon::mutable_is_hit_icon() {
  // @@protoc_insertion_point(field_mutable_list:FLM.Is_HitIcon.is_hit_icon)
  return _internal_mutable_is_hit_icon();
}

// -------------------------------------------------------------------

// SC_SceneInfo

// int32 cur_chip = 1;
inline void SC_SceneInfo::clear_cur_chip() {
  cur_chip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::_internal_cur_chip() const {
  return cur_chip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::cur_chip() const {
  // @@protoc_insertion_point(field_get:FLM.SC_SceneInfo.cur_chip)
  return _internal_cur_chip();
}
inline void SC_SceneInfo::_internal_set_cur_chip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cur_chip_ = value;
}
inline void SC_SceneInfo::set_cur_chip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cur_chip(value);
  // @@protoc_insertion_point(field_set:FLM.SC_SceneInfo.cur_chip)
}

// repeated int32 chip_list = 2;
inline int SC_SceneInfo::_internal_chip_list_size() const {
  return chip_list_.size();
}
inline int SC_SceneInfo::chip_list_size() const {
  return _internal_chip_list_size();
}
inline void SC_SceneInfo::clear_chip_list() {
  chip_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::_internal_chip_list(int index) const {
  return chip_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::chip_list(int index) const {
  // @@protoc_insertion_point(field_get:FLM.SC_SceneInfo.chip_list)
  return _internal_chip_list(index);
}
inline void SC_SceneInfo::set_chip_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  chip_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:FLM.SC_SceneInfo.chip_list)
}
inline void SC_SceneInfo::_internal_add_chip_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  chip_list_.Add(value);
}
inline void SC_SceneInfo::add_chip_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_chip_list(value);
  // @@protoc_insertion_point(field_add:FLM.SC_SceneInfo.chip_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SC_SceneInfo::_internal_chip_list() const {
  return chip_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SC_SceneInfo::chip_list() const {
  // @@protoc_insertion_point(field_list:FLM.SC_SceneInfo.chip_list)
  return _internal_chip_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SC_SceneInfo::_internal_mutable_chip_list() {
  return &chip_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SC_SceneInfo::mutable_chip_list() {
  // @@protoc_insertion_point(field_mutable_list:FLM.SC_SceneInfo.chip_list)
  return _internal_mutable_chip_list();
}

// repeated int32 fu_score = 3;
inline int SC_SceneInfo::_internal_fu_score_size() const {
  return fu_score_.size();
}
inline int SC_SceneInfo::fu_score_size() const {
  return _internal_fu_score_size();
}
inline void SC_SceneInfo::clear_fu_score() {
  fu_score_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::_internal_fu_score(int index) const {
  return fu_score_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::fu_score(int index) const {
  // @@protoc_insertion_point(field_get:FLM.SC_SceneInfo.fu_score)
  return _internal_fu_score(index);
}
inline void SC_SceneInfo::set_fu_score(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  fu_score_.Set(index, value);
  // @@protoc_insertion_point(field_set:FLM.SC_SceneInfo.fu_score)
}
inline void SC_SceneInfo::_internal_add_fu_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  fu_score_.Add(value);
}
inline void SC_SceneInfo::add_fu_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_fu_score(value);
  // @@protoc_insertion_point(field_add:FLM.SC_SceneInfo.fu_score)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SC_SceneInfo::_internal_fu_score() const {
  return fu_score_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SC_SceneInfo::fu_score() const {
  // @@protoc_insertion_point(field_list:FLM.SC_SceneInfo.fu_score)
  return _internal_fu_score();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SC_SceneInfo::_internal_mutable_fu_score() {
  return &fu_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SC_SceneInfo::mutable_fu_score() {
  // @@protoc_insertion_point(field_mutable_list:FLM.SC_SceneInfo.fu_score)
  return _internal_mutable_fu_score();
}

// repeated int32 icon = 4;
inline int SC_SceneInfo::_internal_icon_size() const {
  return icon_.size();
}
inline int SC_SceneInfo::icon_size() const {
  return _internal_icon_size();
}
inline void SC_SceneInfo::clear_icon() {
  icon_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::_internal_icon(int index) const {
  return icon_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::icon(int index) const {
  // @@protoc_insertion_point(field_get:FLM.SC_SceneInfo.icon)
  return _internal_icon(index);
}
inline void SC_SceneInfo::set_icon(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  icon_.Set(index, value);
  // @@protoc_insertion_point(field_set:FLM.SC_SceneInfo.icon)
}
inline void SC_SceneInfo::_internal_add_icon(::PROTOBUF_NAMESPACE_ID::int32 value) {
  icon_.Add(value);
}
inline void SC_SceneInfo::add_icon(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_icon(value);
  // @@protoc_insertion_point(field_add:FLM.SC_SceneInfo.icon)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SC_SceneInfo::_internal_icon() const {
  return icon_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SC_SceneInfo::icon() const {
  // @@protoc_insertion_point(field_list:FLM.SC_SceneInfo.icon)
  return _internal_icon();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SC_SceneInfo::_internal_mutable_icon() {
  return &icon_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SC_SceneInfo::mutable_icon() {
  // @@protoc_insertion_point(field_mutable_list:FLM.SC_SceneInfo.icon)
  return _internal_mutable_icon();
}

// repeated int32 gold_num = 5;
inline int SC_SceneInfo::_internal_gold_num_size() const {
  return gold_num_.size();
}
inline int SC_SceneInfo::gold_num_size() const {
  return _internal_gold_num_size();
}
inline void SC_SceneInfo::clear_gold_num() {
  gold_num_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::_internal_gold_num(int index) const {
  return gold_num_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::gold_num(int index) const {
  // @@protoc_insertion_point(field_get:FLM.SC_SceneInfo.gold_num)
  return _internal_gold_num(index);
}
inline void SC_SceneInfo::set_gold_num(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  gold_num_.Set(index, value);
  // @@protoc_insertion_point(field_set:FLM.SC_SceneInfo.gold_num)
}
inline void SC_SceneInfo::_internal_add_gold_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  gold_num_.Add(value);
}
inline void SC_SceneInfo::add_gold_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_gold_num(value);
  // @@protoc_insertion_point(field_add:FLM.SC_SceneInfo.gold_num)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SC_SceneInfo::_internal_gold_num() const {
  return gold_num_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SC_SceneInfo::gold_num() const {
  // @@protoc_insertion_point(field_list:FLM.SC_SceneInfo.gold_num)
  return _internal_gold_num();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SC_SceneInfo::_internal_mutable_gold_num() {
  return &gold_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SC_SceneInfo::mutable_gold_num() {
  // @@protoc_insertion_point(field_mutable_list:FLM.SC_SceneInfo.gold_num)
  return _internal_mutable_gold_num();
}

// repeated .FLM.Is_HitIcon is_hit = 6;
inline int SC_SceneInfo::_internal_is_hit_size() const {
  return is_hit_.size();
}
inline int SC_SceneInfo::is_hit_size() const {
  return _internal_is_hit_size();
}
inline void SC_SceneInfo::clear_is_hit() {
  is_hit_.Clear();
}
inline ::FLM::Is_HitIcon* SC_SceneInfo::mutable_is_hit(int index) {
  // @@protoc_insertion_point(field_mutable:FLM.SC_SceneInfo.is_hit)
  return is_hit_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FLM::Is_HitIcon >*
SC_SceneInfo::mutable_is_hit() {
  // @@protoc_insertion_point(field_mutable_list:FLM.SC_SceneInfo.is_hit)
  return &is_hit_;
}
inline const ::FLM::Is_HitIcon& SC_SceneInfo::_internal_is_hit(int index) const {
  return is_hit_.Get(index);
}
inline const ::FLM::Is_HitIcon& SC_SceneInfo::is_hit(int index) const {
  // @@protoc_insertion_point(field_get:FLM.SC_SceneInfo.is_hit)
  return _internal_is_hit(index);
}
inline ::FLM::Is_HitIcon* SC_SceneInfo::_internal_add_is_hit() {
  return is_hit_.Add();
}
inline ::FLM::Is_HitIcon* SC_SceneInfo::add_is_hit() {
  // @@protoc_insertion_point(field_add:FLM.SC_SceneInfo.is_hit)
  return _internal_add_is_hit();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FLM::Is_HitIcon >&
SC_SceneInfo::is_hit() const {
  // @@protoc_insertion_point(field_list:FLM.SC_SceneInfo.is_hit)
  return is_hit_;
}

// int64 line_win_score = 7;
inline void SC_SceneInfo::clear_line_win_score() {
  line_win_score_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SC_SceneInfo::_internal_line_win_score() const {
  return line_win_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SC_SceneInfo::line_win_score() const {
  // @@protoc_insertion_point(field_get:FLM.SC_SceneInfo.line_win_score)
  return _internal_line_win_score();
}
inline void SC_SceneInfo::_internal_set_line_win_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  line_win_score_ = value;
}
inline void SC_SceneInfo::set_line_win_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_line_win_score(value);
  // @@protoc_insertion_point(field_set:FLM.SC_SceneInfo.line_win_score)
}

// int32 free_time = 8;
inline void SC_SceneInfo::clear_free_time() {
  free_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::_internal_free_time() const {
  return free_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::free_time() const {
  // @@protoc_insertion_point(field_get:FLM.SC_SceneInfo.free_time)
  return _internal_free_time();
}
inline void SC_SceneInfo::_internal_set_free_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  free_time_ = value;
}
inline void SC_SceneInfo::set_free_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_free_time(value);
  // @@protoc_insertion_point(field_set:FLM.SC_SceneInfo.free_time)
}

// int32 gold_mode_num = 9;
inline void SC_SceneInfo::clear_gold_mode_num() {
  gold_mode_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::_internal_gold_mode_num() const {
  return gold_mode_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::gold_mode_num() const {
  // @@protoc_insertion_point(field_get:FLM.SC_SceneInfo.gold_mode_num)
  return _internal_gold_mode_num();
}
inline void SC_SceneInfo::_internal_set_gold_mode_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gold_mode_num_ = value;
}
inline void SC_SceneInfo::set_gold_mode_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gold_mode_num(value);
  // @@protoc_insertion_point(field_set:FLM.SC_SceneInfo.gold_mode_num)
}

// int64 total_rate = 10;
inline void SC_SceneInfo::clear_total_rate() {
  total_rate_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SC_SceneInfo::_internal_total_rate() const {
  return total_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SC_SceneInfo::total_rate() const {
  // @@protoc_insertion_point(field_get:FLM.SC_SceneInfo.total_rate)
  return _internal_total_rate();
}
inline void SC_SceneInfo::_internal_set_total_rate(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_rate_ = value;
}
inline void SC_SceneInfo::set_total_rate(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total_rate(value);
  // @@protoc_insertion_point(field_set:FLM.SC_SceneInfo.total_rate)
}

// -------------------------------------------------------------------

// CMD_3D_SC_Result

// repeated int32 icon = 1;
inline int CMD_3D_SC_Result::_internal_icon_size() const {
  return icon_.size();
}
inline int CMD_3D_SC_Result::icon_size() const {
  return _internal_icon_size();
}
inline void CMD_3D_SC_Result::clear_icon() {
  icon_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_3D_SC_Result::_internal_icon(int index) const {
  return icon_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_3D_SC_Result::icon(int index) const {
  // @@protoc_insertion_point(field_get:FLM.CMD_3D_SC_Result.icon)
  return _internal_icon(index);
}
inline void CMD_3D_SC_Result::set_icon(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  icon_.Set(index, value);
  // @@protoc_insertion_point(field_set:FLM.CMD_3D_SC_Result.icon)
}
inline void CMD_3D_SC_Result::_internal_add_icon(::PROTOBUF_NAMESPACE_ID::int32 value) {
  icon_.Add(value);
}
inline void CMD_3D_SC_Result::add_icon(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_icon(value);
  // @@protoc_insertion_point(field_add:FLM.CMD_3D_SC_Result.icon)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMD_3D_SC_Result::_internal_icon() const {
  return icon_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMD_3D_SC_Result::icon() const {
  // @@protoc_insertion_point(field_list:FLM.CMD_3D_SC_Result.icon)
  return _internal_icon();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMD_3D_SC_Result::_internal_mutable_icon() {
  return &icon_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMD_3D_SC_Result::mutable_icon() {
  // @@protoc_insertion_point(field_mutable_list:FLM.CMD_3D_SC_Result.icon)
  return _internal_mutable_icon();
}

// repeated int32 gold_num = 2;
inline int CMD_3D_SC_Result::_internal_gold_num_size() const {
  return gold_num_.size();
}
inline int CMD_3D_SC_Result::gold_num_size() const {
  return _internal_gold_num_size();
}
inline void CMD_3D_SC_Result::clear_gold_num() {
  gold_num_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_3D_SC_Result::_internal_gold_num(int index) const {
  return gold_num_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_3D_SC_Result::gold_num(int index) const {
  // @@protoc_insertion_point(field_get:FLM.CMD_3D_SC_Result.gold_num)
  return _internal_gold_num(index);
}
inline void CMD_3D_SC_Result::set_gold_num(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  gold_num_.Set(index, value);
  // @@protoc_insertion_point(field_set:FLM.CMD_3D_SC_Result.gold_num)
}
inline void CMD_3D_SC_Result::_internal_add_gold_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  gold_num_.Add(value);
}
inline void CMD_3D_SC_Result::add_gold_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_gold_num(value);
  // @@protoc_insertion_point(field_add:FLM.CMD_3D_SC_Result.gold_num)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMD_3D_SC_Result::_internal_gold_num() const {
  return gold_num_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMD_3D_SC_Result::gold_num() const {
  // @@protoc_insertion_point(field_list:FLM.CMD_3D_SC_Result.gold_num)
  return _internal_gold_num();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMD_3D_SC_Result::_internal_mutable_gold_num() {
  return &gold_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMD_3D_SC_Result::mutable_gold_num() {
  // @@protoc_insertion_point(field_mutable_list:FLM.CMD_3D_SC_Result.gold_num)
  return _internal_mutable_gold_num();
}

// repeated .FLM.Is_HitIcon is_hit = 3;
inline int CMD_3D_SC_Result::_internal_is_hit_size() const {
  return is_hit_.size();
}
inline int CMD_3D_SC_Result::is_hit_size() const {
  return _internal_is_hit_size();
}
inline void CMD_3D_SC_Result::clear_is_hit() {
  is_hit_.Clear();
}
inline ::FLM::Is_HitIcon* CMD_3D_SC_Result::mutable_is_hit(int index) {
  // @@protoc_insertion_point(field_mutable:FLM.CMD_3D_SC_Result.is_hit)
  return is_hit_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FLM::Is_HitIcon >*
CMD_3D_SC_Result::mutable_is_hit() {
  // @@protoc_insertion_point(field_mutable_list:FLM.CMD_3D_SC_Result.is_hit)
  return &is_hit_;
}
inline const ::FLM::Is_HitIcon& CMD_3D_SC_Result::_internal_is_hit(int index) const {
  return is_hit_.Get(index);
}
inline const ::FLM::Is_HitIcon& CMD_3D_SC_Result::is_hit(int index) const {
  // @@protoc_insertion_point(field_get:FLM.CMD_3D_SC_Result.is_hit)
  return _internal_is_hit(index);
}
inline ::FLM::Is_HitIcon* CMD_3D_SC_Result::_internal_add_is_hit() {
  return is_hit_.Add();
}
inline ::FLM::Is_HitIcon* CMD_3D_SC_Result::add_is_hit() {
  // @@protoc_insertion_point(field_add:FLM.CMD_3D_SC_Result.is_hit)
  return _internal_add_is_hit();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FLM::Is_HitIcon >&
CMD_3D_SC_Result::is_hit() const {
  // @@protoc_insertion_point(field_list:FLM.CMD_3D_SC_Result.is_hit)
  return is_hit_;
}

// int64 line_win_score = 4;
inline void CMD_3D_SC_Result::clear_line_win_score() {
  line_win_score_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CMD_3D_SC_Result::_internal_line_win_score() const {
  return line_win_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CMD_3D_SC_Result::line_win_score() const {
  // @@protoc_insertion_point(field_get:FLM.CMD_3D_SC_Result.line_win_score)
  return _internal_line_win_score();
}
inline void CMD_3D_SC_Result::_internal_set_line_win_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  line_win_score_ = value;
}
inline void CMD_3D_SC_Result::set_line_win_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_line_win_score(value);
  // @@protoc_insertion_point(field_set:FLM.CMD_3D_SC_Result.line_win_score)
}

// int32 free_time = 5;
inline void CMD_3D_SC_Result::clear_free_time() {
  free_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_3D_SC_Result::_internal_free_time() const {
  return free_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_3D_SC_Result::free_time() const {
  // @@protoc_insertion_point(field_get:FLM.CMD_3D_SC_Result.free_time)
  return _internal_free_time();
}
inline void CMD_3D_SC_Result::_internal_set_free_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  free_time_ = value;
}
inline void CMD_3D_SC_Result::set_free_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_free_time(value);
  // @@protoc_insertion_point(field_set:FLM.CMD_3D_SC_Result.free_time)
}

// int32 gold_mode_num = 6;
inline void CMD_3D_SC_Result::clear_gold_mode_num() {
  gold_mode_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_3D_SC_Result::_internal_gold_mode_num() const {
  return gold_mode_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_3D_SC_Result::gold_mode_num() const {
  // @@protoc_insertion_point(field_get:FLM.CMD_3D_SC_Result.gold_mode_num)
  return _internal_gold_mode_num();
}
inline void CMD_3D_SC_Result::_internal_set_gold_mode_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gold_mode_num_ = value;
}
inline void CMD_3D_SC_Result::set_gold_mode_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gold_mode_num(value);
  // @@protoc_insertion_point(field_set:FLM.CMD_3D_SC_Result.gold_mode_num)
}

// int64 total_rate = 7;
inline void CMD_3D_SC_Result::clear_total_rate() {
  total_rate_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CMD_3D_SC_Result::_internal_total_rate() const {
  return total_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CMD_3D_SC_Result::total_rate() const {
  // @@protoc_insertion_point(field_get:FLM.CMD_3D_SC_Result.total_rate)
  return _internal_total_rate();
}
inline void CMD_3D_SC_Result::_internal_set_total_rate(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_rate_ = value;
}
inline void CMD_3D_SC_Result::set_total_rate(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total_rate(value);
  // @@protoc_insertion_point(field_set:FLM.CMD_3D_SC_Result.total_rate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace FLM

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::FLM::EMsgIDFLM> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FLM::EMsgIDFLM>() {
  return ::FLM::EMsgIDFLM_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_FLM_2eproto
