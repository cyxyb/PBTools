// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: JSBY.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_JSBY_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_JSBY_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_JSBY_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_JSBY_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[129]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_JSBY_2eproto;
namespace JSBY {
class ActivityInfo;
class ActivityInfoDefaultTypeInternal;
extern ActivityInfoDefaultTypeInternal _ActivityInfo_default_instance_;
class CSActivityInfo;
class CSActivityInfoDefaultTypeInternal;
extern CSActivityInfoDefaultTypeInternal _CSActivityInfo_default_instance_;
class CSButtonRecords;
class CSButtonRecordsDefaultTypeInternal;
extern CSButtonRecordsDefaultTypeInternal _CSButtonRecords_default_instance_;
class CSChangeBackground;
class CSChangeBackgroundDefaultTypeInternal;
extern CSChangeBackgroundDefaultTypeInternal _CSChangeBackground_default_instance_;
class CSChangePoisonBomTimes;
class CSChangePoisonBomTimesDefaultTypeInternal;
extern CSChangePoisonBomTimesDefaultTypeInternal _CSChangePoisonBomTimes_default_instance_;
class CSDebugData;
class CSDebugDataDefaultTypeInternal;
extern CSDebugDataDefaultTypeInternal _CSDebugData_default_instance_;
class CSDoublingBox;
class CSDoublingBoxDefaultTypeInternal;
extern CSDoublingBoxDefaultTypeInternal _CSDoublingBox_default_instance_;
class CSDragonRelease;
class CSDragonReleaseDefaultTypeInternal;
extern CSDragonReleaseDefaultTypeInternal _CSDragonRelease_default_instance_;
class CSEndTrusteeship;
class CSEndTrusteeshipDefaultTypeInternal;
extern CSEndTrusteeshipDefaultTypeInternal _CSEndTrusteeship_default_instance_;
class CSEnterStage;
class CSEnterStageDefaultTypeInternal;
extern CSEnterStageDefaultTypeInternal _CSEnterStage_default_instance_;
class CSEquipDragonProps;
class CSEquipDragonPropsDefaultTypeInternal;
extern CSEquipDragonPropsDefaultTypeInternal _CSEquipDragonProps_default_instance_;
class CSExchangeBox;
class CSExchangeBoxDefaultTypeInternal;
extern CSExchangeBoxDefaultTypeInternal _CSExchangeBox_default_instance_;
class CSGetActivityAward;
class CSGetActivityAwardDefaultTypeInternal;
extern CSGetActivityAwardDefaultTypeInternal _CSGetActivityAward_default_instance_;
class CSGetCurrentTime;
class CSGetCurrentTimeDefaultTypeInternal;
extern CSGetCurrentTimeDefaultTypeInternal _CSGetCurrentTime_default_instance_;
class CSGetDragonProps;
class CSGetDragonPropsDefaultTypeInternal;
extern CSGetDragonPropsDefaultTypeInternal _CSGetDragonProps_default_instance_;
class CSGetMaterialsInfo;
class CSGetMaterialsInfoDefaultTypeInternal;
extern CSGetMaterialsInfoDefaultTypeInternal _CSGetMaterialsInfo_default_instance_;
class CSGetShopInfo;
class CSGetShopInfoDefaultTypeInternal;
extern CSGetShopInfoDefaultTypeInternal _CSGetShopInfo_default_instance_;
class CSGetTableId;
class CSGetTableIdDefaultTypeInternal;
extern CSGetTableIdDefaultTypeInternal _CSGetTableId_default_instance_;
class CSGetTowerMonster;
class CSGetTowerMonsterDefaultTypeInternal;
extern CSGetTowerMonsterDefaultTypeInternal _CSGetTowerMonster_default_instance_;
class CSGetTowerStep;
class CSGetTowerStepDefaultTypeInternal;
extern CSGetTowerStepDefaultTypeInternal _CSGetTowerStep_default_instance_;
class CSGetTrusteeship;
class CSGetTrusteeshipDefaultTypeInternal;
extern CSGetTrusteeshipDefaultTypeInternal _CSGetTrusteeship_default_instance_;
class CSGetVersion;
class CSGetVersionDefaultTypeInternal;
extern CSGetVersionDefaultTypeInternal _CSGetVersion_default_instance_;
class CSKeepRatio;
class CSKeepRatioDefaultTypeInternal;
extern CSKeepRatioDefaultTypeInternal _CSKeepRatio_default_instance_;
class CSLoginGameWithToken;
class CSLoginGameWithTokenDefaultTypeInternal;
extern CSLoginGameWithTokenDefaultTypeInternal _CSLoginGameWithToken_default_instance_;
class CSOneKeyUpdateHero;
class CSOneKeyUpdateHeroDefaultTypeInternal;
extern CSOneKeyUpdateHeroDefaultTypeInternal _CSOneKeyUpdateHero_default_instance_;
class CSPoisonBombLocation;
class CSPoisonBombLocationDefaultTypeInternal;
extern CSPoisonBombLocationDefaultTypeInternal _CSPoisonBombLocation_default_instance_;
class CSRequestAttack;
class CSRequestAttackDefaultTypeInternal;
extern CSRequestAttackDefaultTypeInternal _CSRequestAttack_default_instance_;
class CSSealConvertMoney;
class CSSealConvertMoneyDefaultTypeInternal;
extern CSSealConvertMoneyDefaultTypeInternal _CSSealConvertMoney_default_instance_;
class CSSetTowerStep;
class CSSetTowerStepDefaultTypeInternal;
extern CSSetTowerStepDefaultTypeInternal _CSSetTowerStep_default_instance_;
class CSSetTrusteeship;
class CSSetTrusteeshipDefaultTypeInternal;
extern CSSetTrusteeshipDefaultTypeInternal _CSSetTrusteeship_default_instance_;
class CSShopBuy;
class CSShopBuyDefaultTypeInternal;
extern CSShopBuyDefaultTypeInternal _CSShopBuy_default_instance_;
class CSTowerExchangeHero;
class CSTowerExchangeHeroDefaultTypeInternal;
extern CSTowerExchangeHeroDefaultTypeInternal _CSTowerExchangeHero_default_instance_;
class CSTowerHeroAtkInfo;
class CSTowerHeroAtkInfoDefaultTypeInternal;
extern CSTowerHeroAtkInfoDefaultTypeInternal _CSTowerHeroAtkInfo_default_instance_;
class CSTowerMonsterExit;
class CSTowerMonsterExitDefaultTypeInternal;
extern CSTowerMonsterExitDefaultTypeInternal _CSTowerMonsterExit_default_instance_;
class CSTowerPlayerLockTarget;
class CSTowerPlayerLockTargetDefaultTypeInternal;
extern CSTowerPlayerLockTargetDefaultTypeInternal _CSTowerPlayerLockTarget_default_instance_;
class CSTowerUpdateHero;
class CSTowerUpdateHeroDefaultTypeInternal;
extern CSTowerUpdateHeroDefaultTypeInternal _CSTowerUpdateHero_default_instance_;
class ChannelTowerMonster;
class ChannelTowerMonsterDefaultTypeInternal;
extern ChannelTowerMonsterDefaultTypeInternal _ChannelTowerMonster_default_instance_;
class ConnectMonster;
class ConnectMonsterDefaultTypeInternal;
extern ConnectMonsterDefaultTypeInternal _ConnectMonster_default_instance_;
class DragonProps;
class DragonPropsDefaultTypeInternal;
extern DragonPropsDefaultTypeInternal _DragonProps_default_instance_;
class FreshMoney;
class FreshMoneyDefaultTypeInternal;
extern FreshMoneyDefaultTypeInternal _FreshMoney_default_instance_;
class HeroInfo;
class HeroInfoDefaultTypeInternal;
extern HeroInfoDefaultTypeInternal _HeroInfo_default_instance_;
class HeroMoney;
class HeroMoneyDefaultTypeInternal;
extern HeroMoneyDefaultTypeInternal _HeroMoney_default_instance_;
class LockTargetInfo;
class LockTargetInfoDefaultTypeInternal;
extern LockTargetInfoDefaultTypeInternal _LockTargetInfo_default_instance_;
class MaterialsInfo;
class MaterialsInfoDefaultTypeInternal;
extern MaterialsInfoDefaultTypeInternal _MaterialsInfo_default_instance_;
class PoisonBombLocation;
class PoisonBombLocationDefaultTypeInternal;
extern PoisonBombLocationDefaultTypeInternal _PoisonBombLocation_default_instance_;
class PoisonbombConvert;
class PoisonbombConvertDefaultTypeInternal;
extern PoisonbombConvertDefaultTypeInternal _PoisonbombConvert_default_instance_;
class PoisonbombType;
class PoisonbombTypeDefaultTypeInternal;
extern PoisonbombTypeDefaultTypeInternal _PoisonbombType_default_instance_;
class PropsInfo;
class PropsInfoDefaultTypeInternal;
extern PropsInfoDefaultTypeInternal _PropsInfo_default_instance_;
class RewardInfo;
class RewardInfoDefaultTypeInternal;
extern RewardInfoDefaultTypeInternal _RewardInfo_default_instance_;
class SCAcquireSeal;
class SCAcquireSealDefaultTypeInternal;
extern SCAcquireSealDefaultTypeInternal _SCAcquireSeal_default_instance_;
class SCActivityInfo;
class SCActivityInfoDefaultTypeInternal;
extern SCActivityInfoDefaultTypeInternal _SCActivityInfo_default_instance_;
class SCButtonRecords;
class SCButtonRecordsDefaultTypeInternal;
extern SCButtonRecordsDefaultTypeInternal _SCButtonRecords_default_instance_;
class SCChangeBackground;
class SCChangeBackgroundDefaultTypeInternal;
extern SCChangeBackgroundDefaultTypeInternal _SCChangeBackground_default_instance_;
class SCChangePoisonBomTimes;
class SCChangePoisonBomTimesDefaultTypeInternal;
extern SCChangePoisonBomTimesDefaultTypeInternal _SCChangePoisonBomTimes_default_instance_;
class SCDebugData;
class SCDebugDataDefaultTypeInternal;
extern SCDebugDataDefaultTypeInternal _SCDebugData_default_instance_;
class SCDoublingBox;
class SCDoublingBoxDefaultTypeInternal;
extern SCDoublingBoxDefaultTypeInternal _SCDoublingBox_default_instance_;
class SCDragonRelease;
class SCDragonReleaseDefaultTypeInternal;
extern SCDragonReleaseDefaultTypeInternal _SCDragonRelease_default_instance_;
class SCDropCard;
class SCDropCardDefaultTypeInternal;
extern SCDropCardDefaultTypeInternal _SCDropCard_default_instance_;
class SCEndTrusteeship;
class SCEndTrusteeshipDefaultTypeInternal;
extern SCEndTrusteeshipDefaultTypeInternal _SCEndTrusteeship_default_instance_;
class SCEnterStage;
class SCEnterStageDefaultTypeInternal;
extern SCEnterStageDefaultTypeInternal _SCEnterStage_default_instance_;
class SCEquipDragonProps;
class SCEquipDragonPropsDefaultTypeInternal;
extern SCEquipDragonPropsDefaultTypeInternal _SCEquipDragonProps_default_instance_;
class SCExchangeBox;
class SCExchangeBoxDefaultTypeInternal;
extern SCExchangeBoxDefaultTypeInternal _SCExchangeBox_default_instance_;
class SCFunctionSwitch;
class SCFunctionSwitchDefaultTypeInternal;
extern SCFunctionSwitchDefaultTypeInternal _SCFunctionSwitch_default_instance_;
class SCGetActivityAward;
class SCGetActivityAwardDefaultTypeInternal;
extern SCGetActivityAwardDefaultTypeInternal _SCGetActivityAward_default_instance_;
class SCGetCurrentTime;
class SCGetCurrentTimeDefaultTypeInternal;
extern SCGetCurrentTimeDefaultTypeInternal _SCGetCurrentTime_default_instance_;
class SCGetDragonProps;
class SCGetDragonPropsDefaultTypeInternal;
extern SCGetDragonPropsDefaultTypeInternal _SCGetDragonProps_default_instance_;
class SCGetMaterialsInfo;
class SCGetMaterialsInfoDefaultTypeInternal;
extern SCGetMaterialsInfoDefaultTypeInternal _SCGetMaterialsInfo_default_instance_;
class SCGetShopInfo;
class SCGetShopInfoDefaultTypeInternal;
extern SCGetShopInfoDefaultTypeInternal _SCGetShopInfo_default_instance_;
class SCGetTableId;
class SCGetTableIdDefaultTypeInternal;
extern SCGetTableIdDefaultTypeInternal _SCGetTableId_default_instance_;
class SCGetTowerGuide;
class SCGetTowerGuideDefaultTypeInternal;
extern SCGetTowerGuideDefaultTypeInternal _SCGetTowerGuide_default_instance_;
class SCGetTowerMonster;
class SCGetTowerMonsterDefaultTypeInternal;
extern SCGetTowerMonsterDefaultTypeInternal _SCGetTowerMonster_default_instance_;
class SCGetTrusteeship;
class SCGetTrusteeshipDefaultTypeInternal;
extern SCGetTrusteeshipDefaultTypeInternal _SCGetTrusteeship_default_instance_;
class SCGetVersion;
class SCGetVersionDefaultTypeInternal;
extern SCGetVersionDefaultTypeInternal _SCGetVersion_default_instance_;
class SCGiantUpgrade;
class SCGiantUpgradeDefaultTypeInternal;
extern SCGiantUpgradeDefaultTypeInternal _SCGiantUpgrade_default_instance_;
class SCKeepRatio;
class SCKeepRatioDefaultTypeInternal;
extern SCKeepRatioDefaultTypeInternal _SCKeepRatio_default_instance_;
class SCLeaveTowerTable;
class SCLeaveTowerTableDefaultTypeInternal;
extern SCLeaveTowerTableDefaultTypeInternal _SCLeaveTowerTable_default_instance_;
class SCLeaveTowerTableCountdown;
class SCLeaveTowerTableCountdownDefaultTypeInternal;
extern SCLeaveTowerTableCountdownDefaultTypeInternal _SCLeaveTowerTableCountdown_default_instance_;
class SCLoginGameWithToken;
class SCLoginGameWithTokenDefaultTypeInternal;
extern SCLoginGameWithTokenDefaultTypeInternal _SCLoginGameWithToken_default_instance_;
class SCNotifyActivityInfo;
class SCNotifyActivityInfoDefaultTypeInternal;
extern SCNotifyActivityInfoDefaultTypeInternal _SCNotifyActivityInfo_default_instance_;
class SCNotifyTowerTablePlayer;
class SCNotifyTowerTablePlayerDefaultTypeInternal;
extern SCNotifyTowerTablePlayerDefaultTypeInternal _SCNotifyTowerTablePlayer_default_instance_;
class SCOneKeyUpdateHero;
class SCOneKeyUpdateHeroDefaultTypeInternal;
extern SCOneKeyUpdateHeroDefaultTypeInternal _SCOneKeyUpdateHero_default_instance_;
class SCPlayerVipLevel;
class SCPlayerVipLevelDefaultTypeInternal;
extern SCPlayerVipLevelDefaultTypeInternal _SCPlayerVipLevel_default_instance_;
class SCPoisonBomTimes;
class SCPoisonBomTimesDefaultTypeInternal;
extern SCPoisonBomTimesDefaultTypeInternal _SCPoisonBomTimes_default_instance_;
class SCPoisonBombConvert;
class SCPoisonBombConvertDefaultTypeInternal;
extern SCPoisonBombConvertDefaultTypeInternal _SCPoisonBombConvert_default_instance_;
class SCPoisonBombLocation;
class SCPoisonBombLocationDefaultTypeInternal;
extern SCPoisonBombLocationDefaultTypeInternal _SCPoisonBombLocation_default_instance_;
class SCPoisonbombTypes;
class SCPoisonbombTypesDefaultTypeInternal;
extern SCPoisonbombTypesDefaultTypeInternal _SCPoisonbombTypes_default_instance_;
class SCPushBalloonTimes;
class SCPushBalloonTimesDefaultTypeInternal;
extern SCPushBalloonTimesDefaultTypeInternal _SCPushBalloonTimes_default_instance_;
class SCPushConnectMonster;
class SCPushConnectMonsterDefaultTypeInternal;
extern SCPushConnectMonsterDefaultTypeInternal _SCPushConnectMonster_default_instance_;
class SCPushDragonEnd;
class SCPushDragonEndDefaultTypeInternal;
extern SCPushDragonEndDefaultTypeInternal _SCPushDragonEnd_default_instance_;
class SCPushDragonProps;
class SCPushDragonPropsDefaultTypeInternal;
extern SCPushDragonPropsDefaultTypeInternal _SCPushDragonProps_default_instance_;
class SCPushDragonRelease;
class SCPushDragonReleaseDefaultTypeInternal;
extern SCPushDragonReleaseDefaultTypeInternal _SCPushDragonRelease_default_instance_;
class SCPushDropMaterials;
class SCPushDropMaterialsDefaultTypeInternal;
extern SCPushDropMaterialsDefaultTypeInternal _SCPushDropMaterials_default_instance_;
class SCPushGhostDragonEnd;
class SCPushGhostDragonEndDefaultTypeInternal;
extern SCPushGhostDragonEndDefaultTypeInternal _SCPushGhostDragonEnd_default_instance_;
class SCPushGhostDragonRelease;
class SCPushGhostDragonReleaseDefaultTypeInternal;
extern SCPushGhostDragonReleaseDefaultTypeInternal _SCPushGhostDragonRelease_default_instance_;
class SCPushGiantEnd;
class SCPushGiantEndDefaultTypeInternal;
extern SCPushGiantEndDefaultTypeInternal _SCPushGiantEnd_default_instance_;
class SCPushMonsterBuff;
class SCPushMonsterBuffDefaultTypeInternal;
extern SCPushMonsterBuffDefaultTypeInternal _SCPushMonsterBuff_default_instance_;
class SCPushMonsterDead;
class SCPushMonsterDeadDefaultTypeInternal;
extern SCPushMonsterDeadDefaultTypeInternal _SCPushMonsterDead_default_instance_;
class SCPushPropsInfo;
class SCPushPropsInfoDefaultTypeInternal;
extern SCPushPropsInfoDefaultTypeInternal _SCPushPropsInfo_default_instance_;
class SCPushSelfDragonState;
class SCPushSelfDragonStateDefaultTypeInternal;
extern SCPushSelfDragonStateDefaultTypeInternal _SCPushSelfDragonState_default_instance_;
class SCPushSelfGhostDragonState;
class SCPushSelfGhostDragonStateDefaultTypeInternal;
extern SCPushSelfGhostDragonStateDefaultTypeInternal _SCPushSelfGhostDragonState_default_instance_;
class SCPushSyncHeroMoney;
class SCPushSyncHeroMoneyDefaultTypeInternal;
extern SCPushSyncHeroMoneyDefaultTypeInternal _SCPushSyncHeroMoney_default_instance_;
class SCPushTowerUpdateHero;
class SCPushTowerUpdateHeroDefaultTypeInternal;
extern SCPushTowerUpdateHeroDefaultTypeInternal _SCPushTowerUpdateHero_default_instance_;
class SCRequestAttack;
class SCRequestAttackDefaultTypeInternal;
extern SCRequestAttackDefaultTypeInternal _SCRequestAttack_default_instance_;
class SCSealConvertMoney;
class SCSealConvertMoneyDefaultTypeInternal;
extern SCSealConvertMoneyDefaultTypeInternal _SCSealConvertMoney_default_instance_;
class SCSetTowerStep;
class SCSetTowerStepDefaultTypeInternal;
extern SCSetTowerStepDefaultTypeInternal _SCSetTowerStep_default_instance_;
class SCSetTrusteeship;
class SCSetTrusteeshipDefaultTypeInternal;
extern SCSetTrusteeshipDefaultTypeInternal _SCSetTrusteeship_default_instance_;
class SCShopBuy;
class SCShopBuyDefaultTypeInternal;
extern SCShopBuyDefaultTypeInternal _SCShopBuy_default_instance_;
class SCSyncGetTowerMonster;
class SCSyncGetTowerMonsterDefaultTypeInternal;
extern SCSyncGetTowerMonsterDefaultTypeInternal _SCSyncGetTowerMonster_default_instance_;
class SCSyncMoney;
class SCSyncMoneyDefaultTypeInternal;
extern SCSyncMoneyDefaultTypeInternal _SCSyncMoney_default_instance_;
class SCTowerExchangeHero;
class SCTowerExchangeHeroDefaultTypeInternal;
extern SCTowerExchangeHeroDefaultTypeInternal _SCTowerExchangeHero_default_instance_;
class SCTowerHeroAtkInfo;
class SCTowerHeroAtkInfoDefaultTypeInternal;
extern SCTowerHeroAtkInfoDefaultTypeInternal _SCTowerHeroAtkInfo_default_instance_;
class SCTowerMonster;
class SCTowerMonsterDefaultTypeInternal;
extern SCTowerMonsterDefaultTypeInternal _SCTowerMonster_default_instance_;
class SCTowerMonsterExit;
class SCTowerMonsterExitDefaultTypeInternal;
extern SCTowerMonsterExitDefaultTypeInternal _SCTowerMonsterExit_default_instance_;
class SCTowerPlayerLockTarget;
class SCTowerPlayerLockTargetDefaultTypeInternal;
extern SCTowerPlayerLockTargetDefaultTypeInternal _SCTowerPlayerLockTarget_default_instance_;
class SCTowerUpdateHero;
class SCTowerUpdateHeroDefaultTypeInternal;
extern SCTowerUpdateHeroDefaultTypeInternal _SCTowerUpdateHero_default_instance_;
class ShopInfo;
class ShopInfoDefaultTypeInternal;
extern ShopInfoDefaultTypeInternal _ShopInfo_default_instance_;
class ShutdownService;
class ShutdownServiceDefaultTypeInternal;
extern ShutdownServiceDefaultTypeInternal _ShutdownService_default_instance_;
class SpecialAttackInfo;
class SpecialAttackInfoDefaultTypeInternal;
extern SpecialAttackInfoDefaultTypeInternal _SpecialAttackInfo_default_instance_;
class SpecialMonsterAttack;
class SpecialMonsterAttackDefaultTypeInternal;
extern SpecialMonsterAttackDefaultTypeInternal _SpecialMonsterAttack_default_instance_;
class SwitchInfo;
class SwitchInfoDefaultTypeInternal;
extern SwitchInfoDefaultTypeInternal _SwitchInfo_default_instance_;
class TablePlayerInfo;
class TablePlayerInfoDefaultTypeInternal;
extern TablePlayerInfoDefaultTypeInternal _TablePlayerInfo_default_instance_;
class TableState;
class TableStateDefaultTypeInternal;
extern TableStateDefaultTypeInternal _TableState_default_instance_;
class TowerGuideInfo;
class TowerGuideInfoDefaultTypeInternal;
extern TowerGuideInfoDefaultTypeInternal _TowerGuideInfo_default_instance_;
class TowerHeroAtkInfo;
class TowerHeroAtkInfoDefaultTypeInternal;
extern TowerHeroAtkInfoDefaultTypeInternal _TowerHeroAtkInfo_default_instance_;
class TowerHeroInfo;
class TowerHeroInfoDefaultTypeInternal;
extern TowerHeroInfoDefaultTypeInternal _TowerHeroInfo_default_instance_;
class TowerMonster;
class TowerMonsterDefaultTypeInternal;
extern TowerMonsterDefaultTypeInternal _TowerMonster_default_instance_;
class TrusteeshipInfo;
class TrusteeshipInfoDefaultTypeInternal;
extern TrusteeshipInfoDefaultTypeInternal _TrusteeshipInfo_default_instance_;
class TrusteeshipMoney;
class TrusteeshipMoneyDefaultTypeInternal;
extern TrusteeshipMoneyDefaultTypeInternal _TrusteeshipMoney_default_instance_;
class UserBomTimes;
class UserBomTimesDefaultTypeInternal;
extern UserBomTimesDefaultTypeInternal _UserBomTimes_default_instance_;
}  // namespace JSBY
PROTOBUF_NAMESPACE_OPEN
template<> ::JSBY::ActivityInfo* Arena::CreateMaybeMessage<::JSBY::ActivityInfo>(Arena*);
template<> ::JSBY::CSActivityInfo* Arena::CreateMaybeMessage<::JSBY::CSActivityInfo>(Arena*);
template<> ::JSBY::CSButtonRecords* Arena::CreateMaybeMessage<::JSBY::CSButtonRecords>(Arena*);
template<> ::JSBY::CSChangeBackground* Arena::CreateMaybeMessage<::JSBY::CSChangeBackground>(Arena*);
template<> ::JSBY::CSChangePoisonBomTimes* Arena::CreateMaybeMessage<::JSBY::CSChangePoisonBomTimes>(Arena*);
template<> ::JSBY::CSDebugData* Arena::CreateMaybeMessage<::JSBY::CSDebugData>(Arena*);
template<> ::JSBY::CSDoublingBox* Arena::CreateMaybeMessage<::JSBY::CSDoublingBox>(Arena*);
template<> ::JSBY::CSDragonRelease* Arena::CreateMaybeMessage<::JSBY::CSDragonRelease>(Arena*);
template<> ::JSBY::CSEndTrusteeship* Arena::CreateMaybeMessage<::JSBY::CSEndTrusteeship>(Arena*);
template<> ::JSBY::CSEnterStage* Arena::CreateMaybeMessage<::JSBY::CSEnterStage>(Arena*);
template<> ::JSBY::CSEquipDragonProps* Arena::CreateMaybeMessage<::JSBY::CSEquipDragonProps>(Arena*);
template<> ::JSBY::CSExchangeBox* Arena::CreateMaybeMessage<::JSBY::CSExchangeBox>(Arena*);
template<> ::JSBY::CSGetActivityAward* Arena::CreateMaybeMessage<::JSBY::CSGetActivityAward>(Arena*);
template<> ::JSBY::CSGetCurrentTime* Arena::CreateMaybeMessage<::JSBY::CSGetCurrentTime>(Arena*);
template<> ::JSBY::CSGetDragonProps* Arena::CreateMaybeMessage<::JSBY::CSGetDragonProps>(Arena*);
template<> ::JSBY::CSGetMaterialsInfo* Arena::CreateMaybeMessage<::JSBY::CSGetMaterialsInfo>(Arena*);
template<> ::JSBY::CSGetShopInfo* Arena::CreateMaybeMessage<::JSBY::CSGetShopInfo>(Arena*);
template<> ::JSBY::CSGetTableId* Arena::CreateMaybeMessage<::JSBY::CSGetTableId>(Arena*);
template<> ::JSBY::CSGetTowerMonster* Arena::CreateMaybeMessage<::JSBY::CSGetTowerMonster>(Arena*);
template<> ::JSBY::CSGetTowerStep* Arena::CreateMaybeMessage<::JSBY::CSGetTowerStep>(Arena*);
template<> ::JSBY::CSGetTrusteeship* Arena::CreateMaybeMessage<::JSBY::CSGetTrusteeship>(Arena*);
template<> ::JSBY::CSGetVersion* Arena::CreateMaybeMessage<::JSBY::CSGetVersion>(Arena*);
template<> ::JSBY::CSKeepRatio* Arena::CreateMaybeMessage<::JSBY::CSKeepRatio>(Arena*);
template<> ::JSBY::CSLoginGameWithToken* Arena::CreateMaybeMessage<::JSBY::CSLoginGameWithToken>(Arena*);
template<> ::JSBY::CSOneKeyUpdateHero* Arena::CreateMaybeMessage<::JSBY::CSOneKeyUpdateHero>(Arena*);
template<> ::JSBY::CSPoisonBombLocation* Arena::CreateMaybeMessage<::JSBY::CSPoisonBombLocation>(Arena*);
template<> ::JSBY::CSRequestAttack* Arena::CreateMaybeMessage<::JSBY::CSRequestAttack>(Arena*);
template<> ::JSBY::CSSealConvertMoney* Arena::CreateMaybeMessage<::JSBY::CSSealConvertMoney>(Arena*);
template<> ::JSBY::CSSetTowerStep* Arena::CreateMaybeMessage<::JSBY::CSSetTowerStep>(Arena*);
template<> ::JSBY::CSSetTrusteeship* Arena::CreateMaybeMessage<::JSBY::CSSetTrusteeship>(Arena*);
template<> ::JSBY::CSShopBuy* Arena::CreateMaybeMessage<::JSBY::CSShopBuy>(Arena*);
template<> ::JSBY::CSTowerExchangeHero* Arena::CreateMaybeMessage<::JSBY::CSTowerExchangeHero>(Arena*);
template<> ::JSBY::CSTowerHeroAtkInfo* Arena::CreateMaybeMessage<::JSBY::CSTowerHeroAtkInfo>(Arena*);
template<> ::JSBY::CSTowerMonsterExit* Arena::CreateMaybeMessage<::JSBY::CSTowerMonsterExit>(Arena*);
template<> ::JSBY::CSTowerPlayerLockTarget* Arena::CreateMaybeMessage<::JSBY::CSTowerPlayerLockTarget>(Arena*);
template<> ::JSBY::CSTowerUpdateHero* Arena::CreateMaybeMessage<::JSBY::CSTowerUpdateHero>(Arena*);
template<> ::JSBY::ChannelTowerMonster* Arena::CreateMaybeMessage<::JSBY::ChannelTowerMonster>(Arena*);
template<> ::JSBY::ConnectMonster* Arena::CreateMaybeMessage<::JSBY::ConnectMonster>(Arena*);
template<> ::JSBY::DragonProps* Arena::CreateMaybeMessage<::JSBY::DragonProps>(Arena*);
template<> ::JSBY::FreshMoney* Arena::CreateMaybeMessage<::JSBY::FreshMoney>(Arena*);
template<> ::JSBY::HeroInfo* Arena::CreateMaybeMessage<::JSBY::HeroInfo>(Arena*);
template<> ::JSBY::HeroMoney* Arena::CreateMaybeMessage<::JSBY::HeroMoney>(Arena*);
template<> ::JSBY::LockTargetInfo* Arena::CreateMaybeMessage<::JSBY::LockTargetInfo>(Arena*);
template<> ::JSBY::MaterialsInfo* Arena::CreateMaybeMessage<::JSBY::MaterialsInfo>(Arena*);
template<> ::JSBY::PoisonBombLocation* Arena::CreateMaybeMessage<::JSBY::PoisonBombLocation>(Arena*);
template<> ::JSBY::PoisonbombConvert* Arena::CreateMaybeMessage<::JSBY::PoisonbombConvert>(Arena*);
template<> ::JSBY::PoisonbombType* Arena::CreateMaybeMessage<::JSBY::PoisonbombType>(Arena*);
template<> ::JSBY::PropsInfo* Arena::CreateMaybeMessage<::JSBY::PropsInfo>(Arena*);
template<> ::JSBY::RewardInfo* Arena::CreateMaybeMessage<::JSBY::RewardInfo>(Arena*);
template<> ::JSBY::SCAcquireSeal* Arena::CreateMaybeMessage<::JSBY::SCAcquireSeal>(Arena*);
template<> ::JSBY::SCActivityInfo* Arena::CreateMaybeMessage<::JSBY::SCActivityInfo>(Arena*);
template<> ::JSBY::SCButtonRecords* Arena::CreateMaybeMessage<::JSBY::SCButtonRecords>(Arena*);
template<> ::JSBY::SCChangeBackground* Arena::CreateMaybeMessage<::JSBY::SCChangeBackground>(Arena*);
template<> ::JSBY::SCChangePoisonBomTimes* Arena::CreateMaybeMessage<::JSBY::SCChangePoisonBomTimes>(Arena*);
template<> ::JSBY::SCDebugData* Arena::CreateMaybeMessage<::JSBY::SCDebugData>(Arena*);
template<> ::JSBY::SCDoublingBox* Arena::CreateMaybeMessage<::JSBY::SCDoublingBox>(Arena*);
template<> ::JSBY::SCDragonRelease* Arena::CreateMaybeMessage<::JSBY::SCDragonRelease>(Arena*);
template<> ::JSBY::SCDropCard* Arena::CreateMaybeMessage<::JSBY::SCDropCard>(Arena*);
template<> ::JSBY::SCEndTrusteeship* Arena::CreateMaybeMessage<::JSBY::SCEndTrusteeship>(Arena*);
template<> ::JSBY::SCEnterStage* Arena::CreateMaybeMessage<::JSBY::SCEnterStage>(Arena*);
template<> ::JSBY::SCEquipDragonProps* Arena::CreateMaybeMessage<::JSBY::SCEquipDragonProps>(Arena*);
template<> ::JSBY::SCExchangeBox* Arena::CreateMaybeMessage<::JSBY::SCExchangeBox>(Arena*);
template<> ::JSBY::SCFunctionSwitch* Arena::CreateMaybeMessage<::JSBY::SCFunctionSwitch>(Arena*);
template<> ::JSBY::SCGetActivityAward* Arena::CreateMaybeMessage<::JSBY::SCGetActivityAward>(Arena*);
template<> ::JSBY::SCGetCurrentTime* Arena::CreateMaybeMessage<::JSBY::SCGetCurrentTime>(Arena*);
template<> ::JSBY::SCGetDragonProps* Arena::CreateMaybeMessage<::JSBY::SCGetDragonProps>(Arena*);
template<> ::JSBY::SCGetMaterialsInfo* Arena::CreateMaybeMessage<::JSBY::SCGetMaterialsInfo>(Arena*);
template<> ::JSBY::SCGetShopInfo* Arena::CreateMaybeMessage<::JSBY::SCGetShopInfo>(Arena*);
template<> ::JSBY::SCGetTableId* Arena::CreateMaybeMessage<::JSBY::SCGetTableId>(Arena*);
template<> ::JSBY::SCGetTowerGuide* Arena::CreateMaybeMessage<::JSBY::SCGetTowerGuide>(Arena*);
template<> ::JSBY::SCGetTowerMonster* Arena::CreateMaybeMessage<::JSBY::SCGetTowerMonster>(Arena*);
template<> ::JSBY::SCGetTrusteeship* Arena::CreateMaybeMessage<::JSBY::SCGetTrusteeship>(Arena*);
template<> ::JSBY::SCGetVersion* Arena::CreateMaybeMessage<::JSBY::SCGetVersion>(Arena*);
template<> ::JSBY::SCGiantUpgrade* Arena::CreateMaybeMessage<::JSBY::SCGiantUpgrade>(Arena*);
template<> ::JSBY::SCKeepRatio* Arena::CreateMaybeMessage<::JSBY::SCKeepRatio>(Arena*);
template<> ::JSBY::SCLeaveTowerTable* Arena::CreateMaybeMessage<::JSBY::SCLeaveTowerTable>(Arena*);
template<> ::JSBY::SCLeaveTowerTableCountdown* Arena::CreateMaybeMessage<::JSBY::SCLeaveTowerTableCountdown>(Arena*);
template<> ::JSBY::SCLoginGameWithToken* Arena::CreateMaybeMessage<::JSBY::SCLoginGameWithToken>(Arena*);
template<> ::JSBY::SCNotifyActivityInfo* Arena::CreateMaybeMessage<::JSBY::SCNotifyActivityInfo>(Arena*);
template<> ::JSBY::SCNotifyTowerTablePlayer* Arena::CreateMaybeMessage<::JSBY::SCNotifyTowerTablePlayer>(Arena*);
template<> ::JSBY::SCOneKeyUpdateHero* Arena::CreateMaybeMessage<::JSBY::SCOneKeyUpdateHero>(Arena*);
template<> ::JSBY::SCPlayerVipLevel* Arena::CreateMaybeMessage<::JSBY::SCPlayerVipLevel>(Arena*);
template<> ::JSBY::SCPoisonBomTimes* Arena::CreateMaybeMessage<::JSBY::SCPoisonBomTimes>(Arena*);
template<> ::JSBY::SCPoisonBombConvert* Arena::CreateMaybeMessage<::JSBY::SCPoisonBombConvert>(Arena*);
template<> ::JSBY::SCPoisonBombLocation* Arena::CreateMaybeMessage<::JSBY::SCPoisonBombLocation>(Arena*);
template<> ::JSBY::SCPoisonbombTypes* Arena::CreateMaybeMessage<::JSBY::SCPoisonbombTypes>(Arena*);
template<> ::JSBY::SCPushBalloonTimes* Arena::CreateMaybeMessage<::JSBY::SCPushBalloonTimes>(Arena*);
template<> ::JSBY::SCPushConnectMonster* Arena::CreateMaybeMessage<::JSBY::SCPushConnectMonster>(Arena*);
template<> ::JSBY::SCPushDragonEnd* Arena::CreateMaybeMessage<::JSBY::SCPushDragonEnd>(Arena*);
template<> ::JSBY::SCPushDragonProps* Arena::CreateMaybeMessage<::JSBY::SCPushDragonProps>(Arena*);
template<> ::JSBY::SCPushDragonRelease* Arena::CreateMaybeMessage<::JSBY::SCPushDragonRelease>(Arena*);
template<> ::JSBY::SCPushDropMaterials* Arena::CreateMaybeMessage<::JSBY::SCPushDropMaterials>(Arena*);
template<> ::JSBY::SCPushGhostDragonEnd* Arena::CreateMaybeMessage<::JSBY::SCPushGhostDragonEnd>(Arena*);
template<> ::JSBY::SCPushGhostDragonRelease* Arena::CreateMaybeMessage<::JSBY::SCPushGhostDragonRelease>(Arena*);
template<> ::JSBY::SCPushGiantEnd* Arena::CreateMaybeMessage<::JSBY::SCPushGiantEnd>(Arena*);
template<> ::JSBY::SCPushMonsterBuff* Arena::CreateMaybeMessage<::JSBY::SCPushMonsterBuff>(Arena*);
template<> ::JSBY::SCPushMonsterDead* Arena::CreateMaybeMessage<::JSBY::SCPushMonsterDead>(Arena*);
template<> ::JSBY::SCPushPropsInfo* Arena::CreateMaybeMessage<::JSBY::SCPushPropsInfo>(Arena*);
template<> ::JSBY::SCPushSelfDragonState* Arena::CreateMaybeMessage<::JSBY::SCPushSelfDragonState>(Arena*);
template<> ::JSBY::SCPushSelfGhostDragonState* Arena::CreateMaybeMessage<::JSBY::SCPushSelfGhostDragonState>(Arena*);
template<> ::JSBY::SCPushSyncHeroMoney* Arena::CreateMaybeMessage<::JSBY::SCPushSyncHeroMoney>(Arena*);
template<> ::JSBY::SCPushTowerUpdateHero* Arena::CreateMaybeMessage<::JSBY::SCPushTowerUpdateHero>(Arena*);
template<> ::JSBY::SCRequestAttack* Arena::CreateMaybeMessage<::JSBY::SCRequestAttack>(Arena*);
template<> ::JSBY::SCSealConvertMoney* Arena::CreateMaybeMessage<::JSBY::SCSealConvertMoney>(Arena*);
template<> ::JSBY::SCSetTowerStep* Arena::CreateMaybeMessage<::JSBY::SCSetTowerStep>(Arena*);
template<> ::JSBY::SCSetTrusteeship* Arena::CreateMaybeMessage<::JSBY::SCSetTrusteeship>(Arena*);
template<> ::JSBY::SCShopBuy* Arena::CreateMaybeMessage<::JSBY::SCShopBuy>(Arena*);
template<> ::JSBY::SCSyncGetTowerMonster* Arena::CreateMaybeMessage<::JSBY::SCSyncGetTowerMonster>(Arena*);
template<> ::JSBY::SCSyncMoney* Arena::CreateMaybeMessage<::JSBY::SCSyncMoney>(Arena*);
template<> ::JSBY::SCTowerExchangeHero* Arena::CreateMaybeMessage<::JSBY::SCTowerExchangeHero>(Arena*);
template<> ::JSBY::SCTowerHeroAtkInfo* Arena::CreateMaybeMessage<::JSBY::SCTowerHeroAtkInfo>(Arena*);
template<> ::JSBY::SCTowerMonster* Arena::CreateMaybeMessage<::JSBY::SCTowerMonster>(Arena*);
template<> ::JSBY::SCTowerMonsterExit* Arena::CreateMaybeMessage<::JSBY::SCTowerMonsterExit>(Arena*);
template<> ::JSBY::SCTowerPlayerLockTarget* Arena::CreateMaybeMessage<::JSBY::SCTowerPlayerLockTarget>(Arena*);
template<> ::JSBY::SCTowerUpdateHero* Arena::CreateMaybeMessage<::JSBY::SCTowerUpdateHero>(Arena*);
template<> ::JSBY::ShopInfo* Arena::CreateMaybeMessage<::JSBY::ShopInfo>(Arena*);
template<> ::JSBY::ShutdownService* Arena::CreateMaybeMessage<::JSBY::ShutdownService>(Arena*);
template<> ::JSBY::SpecialAttackInfo* Arena::CreateMaybeMessage<::JSBY::SpecialAttackInfo>(Arena*);
template<> ::JSBY::SpecialMonsterAttack* Arena::CreateMaybeMessage<::JSBY::SpecialMonsterAttack>(Arena*);
template<> ::JSBY::SwitchInfo* Arena::CreateMaybeMessage<::JSBY::SwitchInfo>(Arena*);
template<> ::JSBY::TablePlayerInfo* Arena::CreateMaybeMessage<::JSBY::TablePlayerInfo>(Arena*);
template<> ::JSBY::TableState* Arena::CreateMaybeMessage<::JSBY::TableState>(Arena*);
template<> ::JSBY::TowerGuideInfo* Arena::CreateMaybeMessage<::JSBY::TowerGuideInfo>(Arena*);
template<> ::JSBY::TowerHeroAtkInfo* Arena::CreateMaybeMessage<::JSBY::TowerHeroAtkInfo>(Arena*);
template<> ::JSBY::TowerHeroInfo* Arena::CreateMaybeMessage<::JSBY::TowerHeroInfo>(Arena*);
template<> ::JSBY::TowerMonster* Arena::CreateMaybeMessage<::JSBY::TowerMonster>(Arena*);
template<> ::JSBY::TrusteeshipInfo* Arena::CreateMaybeMessage<::JSBY::TrusteeshipInfo>(Arena*);
template<> ::JSBY::TrusteeshipMoney* Arena::CreateMaybeMessage<::JSBY::TrusteeshipMoney>(Arena*);
template<> ::JSBY::UserBomTimes* Arena::CreateMaybeMessage<::JSBY::UserBomTimes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace JSBY {

enum EMsgIDSubGame : int {
  Req_Invalid = 0,
  Req_Ping = 1000,
  Req_LoginGameWithToken = 1001,
  Req_LogoutGame = 1002,
  Push_LogoutGame = 1003,
  Req_RequestAttack = 1004,
  Push_SyncMoney = 1005,
  Push_SyncFreeTimes = 1006,
  Req_UpdateHeroInfo = 1007,
  Req_UpgradeHeroInfo = 1008,
  Req_EnterStage = 1009,
  Push_PoisonBomTimes = 1028,
  Req_GetTrusteeship = 1029,
  Req_SetTrusteeship = 1030,
  Req_EndTrusteeship = 1031,
  Push_EndTrusteeship = 1032,
  Req_GetVersion = 1039,
  Req_ChangePoisonBomTimes = 1040,
  Req_KeepRatio = 1044,
  Push_LeaveTowerTable = 1046,
  Push_NotifyTowerTablePlayer = 1047,
  Push_GetTowerMonster = 1048,
  Req_GetTowerMonster = 1049,
  Push_TowerMonster = 1050,
  Req_TowerHeroAtkInfo = 1051,
  Push_TowerHeroAtkInfo = 1052,
  Req_TowerUpdateHero = 1053,
  Push_TowerUpdateHero = 1054,
  Req_TowerPlayerLockTarget = 1055,
  Push_TowerPlayerLockTarget = 1056,
  Req_ChangeBackground = 1057,
  Req_GetCurrentTime = 1058,
  Push_SyncGetTowerMonster = 1070,
  Req_TowerMonsterExit = 1079,
  Req_GetTowerNewGuide = 1081,
  Req_SetTowerNewGuide = 1082,
  Req_ActivityInfo = 1083,
  Push_NotifyActivityInfo = 1084,
  Req_GetActivityAward = 1085,
  Req_TowerExchangeHero = 1089,
  Push_TowerExchangeHero = 1099,
  Req_ButtonRecords = 1100,
  Push_SyncBatBulletInfo = 1101,
  Push_LeaveTowerTableCountdown = 1102,
  Req_PoisonBombLocation = 1103,
  Push_PoisonBombLocation = 1104,
  Push_PoisonBombConvert = 1105,
  Push_PoisonBombType = 1106,
  Req_DragonRelease = 1107,
  Push_DragonRelease = 1108,
  Push_DragonEnd = 1109,
  Push_SelfDragonState = 1110,
  Req_OneKeyUpdateHero = 1111,
  Push_OneKeyUpdateHero = 1112,
  Push_GhostDragonRelease = 1113,
  Push_GhostDragonEnd = 1114,
  Push_SelfGhostDragonState = 1115,
  Push_SyncHeroMoney = 1116,
  Push_PushMonsterDead = 1117,
  Req_DebugData = 1118,
  Push_PushMonsterBuff = 1119,
  Req_GetTableId = 1120,
  Push_PlayerVipLevel = 1121,
  Req_GetDragonProps = 1122,
  Req_EquipDragonProps = 1123,
  Push_DragonProps = 1124,
  Req_GetShopInfo = 1125,
  Push_PropsInfo = 1126,
  Req_GetMaterialsInfo = 1127,
  Req_ExchangeBox = 1128,
  Req_DoublingBox = 1129,
  Req_ShopBuy = 1130,
  Push_DropMaterials = 1131,
  Push_BalloonTimes = 1132,
  Push_FunctionSwitch = 1133,
  Push_ConnectMonster = 1134,
  Push_GiantUpgrade = 1140,
  Push_PushGiantEnd = 1141,
  Push_DropCard = 1142,
  Push_AcquireMxlSeal = 1143,
  Req_SealConvertMoney = 1144,
  EMsgIDSubGame_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EMsgIDSubGame_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EMsgIDSubGame_IsValid(int value);
constexpr EMsgIDSubGame EMsgIDSubGame_MIN = Req_Invalid;
constexpr EMsgIDSubGame EMsgIDSubGame_MAX = Req_SealConvertMoney;
constexpr int EMsgIDSubGame_ARRAYSIZE = EMsgIDSubGame_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDSubGame_descriptor();
template<typename T>
inline const std::string& EMsgIDSubGame_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EMsgIDSubGame>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EMsgIDSubGame_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EMsgIDSubGame_descriptor(), enum_t_value);
}
inline bool EMsgIDSubGame_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EMsgIDSubGame* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EMsgIDSubGame>(
    EMsgIDSubGame_descriptor(), name, value);
}
enum ErrCode : int {
  Success = 0,
  EnterRoomIsClosing = 999,
  QPEnterRoomFailed = 10001,
  QPBaseUserInfoGetFailed = 10002,
  QPReadGoldFailed = 10003,
  LackMoneyInServer = 10004,
  LoadPlayerDataFailed = 10005,
  ParameterIsWrong = 10006,
  LackOfMoney = 10007,
  DeserializeFailed = 10008,
  CreatePlayerFailed = 10009,
  PlayerNotExist = 10010,
  PlayerAlreadyLogin = 10011,
  ConfigNoHasHero = 10012,
  PlayerNoHasHero = 10013,
  HeroPositionError = 10014,
  HeroHasUpgradeMaxLevel = 10015,
  HasNotEnoughEnzyme = 10016,
  ConfigNoHasMonster = 10017,
  HeroUpdateFailed = 10018,
  HeroHasExist = 10019,
  AttackMonsterFailed = 10020,
  MonsterScoreErr = 10021,
  NotFindLiquidMedicine = 10022,
  HasNotEnoughLiquidMedicine = 10023,
  NotFindLaboratory = 10024,
  LaboratoryUpgradeMaxLevel = 10025,
  NotFindLevelUnlockEquation = 10026,
  UnlockParameterError = 10027,
  LaboratoryNotUnlock = 10028,
  NotFindEnzymeEquation = 10029,
  LaboratoryNotReachUnlockLevel = 10030,
  LaboratoryHasUnlock = 10031,
  NotFindDailyTask = 10032,
  NotFindDailyTaskCfg = 10033,
  HasGetDailyTaskAward = 10034,
  NoReachDailyTaskCondition = 10035,
  NoReachDailyTaskSchedule = 10036,
  DailyTaskIDError = 10037,
  ReachDailyTaskOver = 10038,
  IsNotStageMode = 10039,
  ModeNotExistMoster = 10040,
  NoExistGhostLoong = 10041,
  BuyLiquidMedicineMaxTimes = 10042,
  HighModeMonsterSetError = 10043,
  MonsterHasKill = 10044,
  TrusteeshipIsEnd = 10045,
  TrusteeshipCfgError = 10046,
  TrusteeshipNoVIPLevel = 10047,
  NotUseSameLiquid = 10048,
  PlayerNotTrusteeship = 10049,
  ExistWaitPlayer = 10050,
  SendProtoFrequently = 10051,
  PoisonBomPositionIdError = 10052,
  PoisonBomTimesNotFind = 10053,
  NotReachUnlockConditions = 10054,
  HasGetScheduleAward = 10055,
  NotFindScheduleCfg = 10056,
  BuyNostrumLiquidOnlyOne = 10057,
  HeroLevelNotUnlock = 10058,
  NoExistMergeSkill = 10059,
  HasNotEnoughStone = 10060,
  HasNotEnoughCrystalStone = 10061,
  NotKillingEnoughMonsters = 10062,
  Notint32owerMode = 10063,
  Notint32hisMode = 10064,
  NotExistMonster = 10065,
  HasHeroOfOtherPlayers = 10066,
  HasNotEnoughScore = 10067,
  PositionNoHasHero = 10068,
  PassNoNotExist = 10069,
  NotInMultiMode = 10070,
  HighModeMonsterNoCfg = 10071,
  NightKingBossHasMax = 10072,
  HeroAppearedIsMax = 10073,
  FailureToEnterStage = 10074,
  PositionIsOtherPlayer = 10075,
  MultiTableStateError = 10076,
  InOtherMode = 10077,
  NotEnoughStageNum = 10078,
  NewGuideHasCompleted = 10079,
  ActivityNotExist = 10080,
  ActivityNotCondition = 10081,
  ActivityHasGetAward = 10082,
  ActivityIsNotWeChat = 10083,
  HasOtherHero = 10084,
  BatBulletNotFind = 10085,
  DragonNotRelease = 10086,
  DragonNowRelease = 10087,
  DragonCoolDown = 10088,
  TrusteeshipDragonNotRealse = 10089,
  DragonAttackConfigWron = 10090,
  GhostDragonNotRelease = 10091,
  InvalidToken = 10092,
  LoadPlayerWithPropsFailed = 10093,
  PlayerDataFailed = 10094,
  EnterGameNotifyHall = 10095,
  NotDragonProps = 10096,
  VipPropsExpired = 10097,
  UseHeroNeedVipProps = 10098,
  NotEnoughVipLevel = 10099,
  NotEnoughMaterials = 10100,
  NotEnoughDiamonds = 10101,
  NotFindGragonBox = 10102,
  NotFindGoods = 10103,
  GoodsNumError = 10104,
  NotAttackSameType = 10105,
  HeroMxlOverLimit = 10106,
  ErrCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ErrCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ErrCode_IsValid(int value);
constexpr ErrCode ErrCode_MIN = Success;
constexpr ErrCode ErrCode_MAX = HeroMxlOverLimit;
constexpr int ErrCode_ARRAYSIZE = ErrCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrCode_descriptor();
template<typename T>
inline const std::string& ErrCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ErrCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ErrCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ErrCode_descriptor(), enum_t_value);
}
inline bool ErrCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ErrCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ErrCode>(
    ErrCode_descriptor(), name, value);
}
enum ModeType : int {
  Stage = 0,
  High = 1,
  Tower = 2,
  Multi = 3,
  None = 4,
  Max = 5,
  ModeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ModeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ModeType_IsValid(int value);
constexpr ModeType ModeType_MIN = Stage;
constexpr ModeType ModeType_MAX = Max;
constexpr int ModeType_ARRAYSIZE = ModeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModeType_descriptor();
template<typename T>
inline const std::string& ModeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ModeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ModeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ModeType_descriptor(), enum_t_value);
}
inline bool ModeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ModeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ModeType>(
    ModeType_descriptor(), name, value);
}
enum StepType : int {
  StepHigh = 0,
  StepUpgradeHero = 1,
  StepGhostLoong = 2,
  StepMax = 3,
  StepType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StepType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StepType_IsValid(int value);
constexpr StepType StepType_MIN = StepHigh;
constexpr StepType StepType_MAX = StepMax;
constexpr int StepType_ARRAYSIZE = StepType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StepType_descriptor();
template<typename T>
inline const std::string& StepType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StepType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StepType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StepType_descriptor(), enum_t_value);
}
inline bool StepType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StepType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StepType>(
    StepType_descriptor(), name, value);
}
enum ShopType : int {
  NoneType = 0,
  Materials = 1,
  MaxShopType = 2,
  ShopType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ShopType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ShopType_IsValid(int value);
constexpr ShopType ShopType_MIN = NoneType;
constexpr ShopType ShopType_MAX = MaxShopType;
constexpr int ShopType_ARRAYSIZE = ShopType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShopType_descriptor();
template<typename T>
inline const std::string& ShopType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ShopType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ShopType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ShopType_descriptor(), enum_t_value);
}
inline bool ShopType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ShopType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ShopType>(
    ShopType_descriptor(), name, value);
}
enum HallMsgCode : int {
  HMC_Invalid = 0,
  HMC_CHat = 1,
  HMC_ServerUpdate = 2,
  HMC_MailPublish = 7,
  HMC_AwardGoldUpdate = 8,
  HMC_TriggerArenaAwardGold = 9,
  HMC_AwardGoldPoolTriggerLog = 10,
  HMC_FreshMoney = 11,
  HMC_BplUpdateJackpotPool = 12,
  HMC_BplInsertJackpotRecord = 13,
  HMC_AddArenaAwardGoldPoolNotify = 14,
  HMC_Ping = 15,
  HMC_ShutdownService = 16,
  HMC_TransferToCelint32 = 17,
  HMC_CheckWeChatLogin = 18,
  HMC_UserInfoUserEnterGame = 19,
  HMC_UserInfoUserExitGame = 20,
  HMC_AntinDulge = 21,
  HMC_TurntableRecord = 22,
  HMC_GetAwardGoldValue = 23,
  HallMsgCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  HallMsgCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool HallMsgCode_IsValid(int value);
constexpr HallMsgCode HallMsgCode_MIN = HMC_Invalid;
constexpr HallMsgCode HallMsgCode_MAX = HMC_GetAwardGoldValue;
constexpr int HallMsgCode_ARRAYSIZE = HallMsgCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HallMsgCode_descriptor();
template<typename T>
inline const std::string& HallMsgCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HallMsgCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HallMsgCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HallMsgCode_descriptor(), enum_t_value);
}
inline bool HallMsgCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HallMsgCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HallMsgCode>(
    HallMsgCode_descriptor(), name, value);
}
enum HallMsgErrorCode : int {
  HMEC_Invalid = 0,
  HMEC_Param = 1,
  HMEC_Register = 2,
  HMEC_Sucess = 3,
  HMEC_PlayerNotExist = 4,
  HMEC_DeserializeFailed = 5,
  HMEC_FreshUserMoney = 6,
  HMEC_SystemError = 7,
  HallMsgErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  HallMsgErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool HallMsgErrorCode_IsValid(int value);
constexpr HallMsgErrorCode HallMsgErrorCode_MIN = HMEC_Invalid;
constexpr HallMsgErrorCode HallMsgErrorCode_MAX = HMEC_SystemError;
constexpr int HallMsgErrorCode_ARRAYSIZE = HallMsgErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HallMsgErrorCode_descriptor();
template<typename T>
inline const std::string& HallMsgErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HallMsgErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HallMsgErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HallMsgErrorCode_descriptor(), enum_t_value);
}
inline bool HallMsgErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HallMsgErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HallMsgErrorCode>(
    HallMsgErrorCode_descriptor(), name, value);
}
// ===================================================================

class HeroInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.HeroInfo) */ {
 public:
  inline HeroInfo() : HeroInfo(nullptr) {}
  virtual ~HeroInfo();

  HeroInfo(const HeroInfo& from);
  HeroInfo(HeroInfo&& from) noexcept
    : HeroInfo() {
    *this = ::std::move(from);
  }

  inline HeroInfo& operator=(const HeroInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeroInfo& operator=(HeroInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HeroInfo& default_instance();

  static inline const HeroInfo* internal_default_instance() {
    return reinterpret_cast<const HeroInfo*>(
               &_HeroInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HeroInfo& a, HeroInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(HeroInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeroInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeroInfo* New() const final {
    return CreateMaybeMessage<HeroInfo>(nullptr);
  }

  HeroInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeroInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HeroInfo& from);
  void MergeFrom(const HeroInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeroInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.HeroInfo";
  }
  protected:
  explicit HeroInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 1,
    kLevelFieldNumber = 2,
    kPositionFieldNumber = 3,
    kUnlockFieldNumber = 4,
  };
  // int32 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Level = 2;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Position = 3;
  void clear_position();
  ::PROTOBUF_NAMESPACE_ID::int32 position() const;
  void set_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_position() const;
  void _internal_set_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Unlock = 4;
  void clear_unlock();
  ::PROTOBUF_NAMESPACE_ID::int32 unlock() const;
  void set_unlock(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_unlock() const;
  void _internal_set_unlock(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.HeroInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 position_;
  ::PROTOBUF_NAMESPACE_ID::int32 unlock_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class CSLoginGameWithToken PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.CSLoginGameWithToken) */ {
 public:
  inline CSLoginGameWithToken() : CSLoginGameWithToken(nullptr) {}
  virtual ~CSLoginGameWithToken();

  CSLoginGameWithToken(const CSLoginGameWithToken& from);
  CSLoginGameWithToken(CSLoginGameWithToken&& from) noexcept
    : CSLoginGameWithToken() {
    *this = ::std::move(from);
  }

  inline CSLoginGameWithToken& operator=(const CSLoginGameWithToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSLoginGameWithToken& operator=(CSLoginGameWithToken&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSLoginGameWithToken& default_instance();

  static inline const CSLoginGameWithToken* internal_default_instance() {
    return reinterpret_cast<const CSLoginGameWithToken*>(
               &_CSLoginGameWithToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CSLoginGameWithToken& a, CSLoginGameWithToken& b) {
    a.Swap(&b);
  }
  inline void Swap(CSLoginGameWithToken* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSLoginGameWithToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSLoginGameWithToken* New() const final {
    return CreateMaybeMessage<CSLoginGameWithToken>(nullptr);
  }

  CSLoginGameWithToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSLoginGameWithToken>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSLoginGameWithToken& from);
  void MergeFrom(const CSLoginGameWithToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSLoginGameWithToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.CSLoginGameWithToken";
  }
  protected:
  explicit CSLoginGameWithToken(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kClientVersionFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
  };
  // string Token = 2;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string ClientVersion = 3;
  void clear_clientversion();
  const std::string& clientversion() const;
  void set_clientversion(const std::string& value);
  void set_clientversion(std::string&& value);
  void set_clientversion(const char* value);
  void set_clientversion(const char* value, size_t size);
  std::string* mutable_clientversion();
  std::string* release_clientversion();
  void set_allocated_clientversion(std::string* clientversion);
  private:
  const std::string& _internal_clientversion() const;
  void _internal_set_clientversion(const std::string& value);
  std::string* _internal_mutable_clientversion();
  public:

  // int32 PlayerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.CSLoginGameWithToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientversion_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCLoginGameWithToken PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCLoginGameWithToken) */ {
 public:
  inline SCLoginGameWithToken() : SCLoginGameWithToken(nullptr) {}
  virtual ~SCLoginGameWithToken();

  SCLoginGameWithToken(const SCLoginGameWithToken& from);
  SCLoginGameWithToken(SCLoginGameWithToken&& from) noexcept
    : SCLoginGameWithToken() {
    *this = ::std::move(from);
  }

  inline SCLoginGameWithToken& operator=(const SCLoginGameWithToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCLoginGameWithToken& operator=(SCLoginGameWithToken&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCLoginGameWithToken& default_instance();

  static inline const SCLoginGameWithToken* internal_default_instance() {
    return reinterpret_cast<const SCLoginGameWithToken*>(
               &_SCLoginGameWithToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SCLoginGameWithToken& a, SCLoginGameWithToken& b) {
    a.Swap(&b);
  }
  inline void Swap(SCLoginGameWithToken* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCLoginGameWithToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCLoginGameWithToken* New() const final {
    return CreateMaybeMessage<SCLoginGameWithToken>(nullptr);
  }

  SCLoginGameWithToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCLoginGameWithToken>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCLoginGameWithToken& from);
  void MergeFrom(const SCLoginGameWithToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCLoginGameWithToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCLoginGameWithToken";
  }
  protected:
  explicit SCLoginGameWithToken(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMoneyFieldNumber = 1,
    kIsFirstLoginFieldNumber = 2,
    kUseRatioFieldNumber = 3,
  };
  // int32 Money = 1;
  void clear_money();
  ::PROTOBUF_NAMESPACE_ID::int32 money() const;
  void set_money(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_money() const;
  void _internal_set_money(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 IsFirstLogin = 2;
  void clear_isfirstlogin();
  ::PROTOBUF_NAMESPACE_ID::int32 isfirstlogin() const;
  void set_isfirstlogin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_isfirstlogin() const;
  void _internal_set_isfirstlogin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 UseRatio = 3;
  void clear_useratio();
  ::PROTOBUF_NAMESPACE_ID::int32 useratio() const;
  void set_useratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_useratio() const;
  void _internal_set_useratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCLoginGameWithToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 money_;
  ::PROTOBUF_NAMESPACE_ID::int32 isfirstlogin_;
  ::PROTOBUF_NAMESPACE_ID::int32 useratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class UserBomTimes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.UserBomTimes) */ {
 public:
  inline UserBomTimes() : UserBomTimes(nullptr) {}
  virtual ~UserBomTimes();

  UserBomTimes(const UserBomTimes& from);
  UserBomTimes(UserBomTimes&& from) noexcept
    : UserBomTimes() {
    *this = ::std::move(from);
  }

  inline UserBomTimes& operator=(const UserBomTimes& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserBomTimes& operator=(UserBomTimes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserBomTimes& default_instance();

  static inline const UserBomTimes* internal_default_instance() {
    return reinterpret_cast<const UserBomTimes*>(
               &_UserBomTimes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UserBomTimes& a, UserBomTimes& b) {
    a.Swap(&b);
  }
  inline void Swap(UserBomTimes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserBomTimes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserBomTimes* New() const final {
    return CreateMaybeMessage<UserBomTimes>(nullptr);
  }

  UserBomTimes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserBomTimes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserBomTimes& from);
  void MergeFrom(const UserBomTimes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserBomTimes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.UserBomTimes";
  }
  protected:
  explicit UserBomTimes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsePositionIdFieldNumber = 1,
    kUsePositionTimesFieldNumber = 2,
    kOverBomFieldNumber = 3,
    kAllOverFieldNumber = 4,
  };
  // int32 UsePositionId = 1;
  void clear_usepositionid();
  ::PROTOBUF_NAMESPACE_ID::int32 usepositionid() const;
  void set_usepositionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_usepositionid() const;
  void _internal_set_usepositionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 UsePositionTimes = 2;
  void clear_usepositiontimes();
  ::PROTOBUF_NAMESPACE_ID::int32 usepositiontimes() const;
  void set_usepositiontimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_usepositiontimes() const;
  void _internal_set_usepositiontimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool OverBom = 3;
  void clear_overbom();
  bool overbom() const;
  void set_overbom(bool value);
  private:
  bool _internal_overbom() const;
  void _internal_set_overbom(bool value);
  public:

  // bool AllOver = 4;
  void clear_allover();
  bool allover() const;
  void set_allover(bool value);
  private:
  bool _internal_allover() const;
  void _internal_set_allover(bool value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.UserBomTimes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 usepositionid_;
  ::PROTOBUF_NAMESPACE_ID::int32 usepositiontimes_;
  bool overbom_;
  bool allover_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SpecialMonsterAttack PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SpecialMonsterAttack) */ {
 public:
  inline SpecialMonsterAttack() : SpecialMonsterAttack(nullptr) {}
  virtual ~SpecialMonsterAttack();

  SpecialMonsterAttack(const SpecialMonsterAttack& from);
  SpecialMonsterAttack(SpecialMonsterAttack&& from) noexcept
    : SpecialMonsterAttack() {
    *this = ::std::move(from);
  }

  inline SpecialMonsterAttack& operator=(const SpecialMonsterAttack& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpecialMonsterAttack& operator=(SpecialMonsterAttack&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpecialMonsterAttack& default_instance();

  static inline const SpecialMonsterAttack* internal_default_instance() {
    return reinterpret_cast<const SpecialMonsterAttack*>(
               &_SpecialMonsterAttack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SpecialMonsterAttack& a, SpecialMonsterAttack& b) {
    a.Swap(&b);
  }
  inline void Swap(SpecialMonsterAttack* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpecialMonsterAttack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpecialMonsterAttack* New() const final {
    return CreateMaybeMessage<SpecialMonsterAttack>(nullptr);
  }

  SpecialMonsterAttack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpecialMonsterAttack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpecialMonsterAttack& from);
  void MergeFrom(const SpecialMonsterAttack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpecialMonsterAttack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SpecialMonsterAttack";
  }
  protected:
  explicit SpecialMonsterAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionIdFieldNumber = 1,
    kMonsterIdFieldNumber = 2,
    kChannelIdFieldNumber = 3,
    kProcessTimeFieldNumber = 4,
  };
  // int32 PositionId = 1;
  void clear_positionid();
  ::PROTOBUF_NAMESPACE_ID::int32 positionid() const;
  void set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_positionid() const;
  void _internal_set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 MonsterId = 2;
  void clear_monsterid();
  ::PROTOBUF_NAMESPACE_ID::int32 monsterid() const;
  void set_monsterid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_monsterid() const;
  void _internal_set_monsterid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ChannelId = 3;
  void clear_channelid();
  ::PROTOBUF_NAMESPACE_ID::int32 channelid() const;
  void set_channelid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channelid() const;
  void _internal_set_channelid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ProcessTime = 4;
  void clear_processtime();
  ::PROTOBUF_NAMESPACE_ID::int32 processtime() const;
  void set_processtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_processtime() const;
  void _internal_set_processtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SpecialMonsterAttack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 positionid_;
  ::PROTOBUF_NAMESPACE_ID::int32 monsterid_;
  ::PROTOBUF_NAMESPACE_ID::int32 channelid_;
  ::PROTOBUF_NAMESPACE_ID::int32 processtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class CSRequestAttack PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.CSRequestAttack) */ {
 public:
  inline CSRequestAttack() : CSRequestAttack(nullptr) {}
  virtual ~CSRequestAttack();

  CSRequestAttack(const CSRequestAttack& from);
  CSRequestAttack(CSRequestAttack&& from) noexcept
    : CSRequestAttack() {
    *this = ::std::move(from);
  }

  inline CSRequestAttack& operator=(const CSRequestAttack& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRequestAttack& operator=(CSRequestAttack&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSRequestAttack& default_instance();

  static inline const CSRequestAttack* internal_default_instance() {
    return reinterpret_cast<const CSRequestAttack*>(
               &_CSRequestAttack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CSRequestAttack& a, CSRequestAttack& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRequestAttack* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRequestAttack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSRequestAttack* New() const final {
    return CreateMaybeMessage<CSRequestAttack>(nullptr);
  }

  CSRequestAttack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSRequestAttack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSRequestAttack& from);
  void MergeFrom(const CSRequestAttack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSRequestAttack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.CSRequestAttack";
  }
  protected:
  explicit CSRequestAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpecialInfoFieldNumber = 8,
    kRatioFieldNumber = 1,
    kModeFieldNumber = 2,
    kMonsterIdFieldNumber = 3,
    kPositionIdFieldNumber = 4,
    kUsePositionIdFieldNumber = 5,
    kUsePositionTimesFieldNumber = 6,
    kSpecialTypeFieldNumber = 7,
    kDragonEndFieldNumber = 9,
    kHeroUniqueIdFieldNumber = 10,
  };
  // .JSBY.SpecialMonsterAttack SpecialInfo = 8;
  bool has_specialinfo() const;
  private:
  bool _internal_has_specialinfo() const;
  public:
  void clear_specialinfo();
  const ::JSBY::SpecialMonsterAttack& specialinfo() const;
  ::JSBY::SpecialMonsterAttack* release_specialinfo();
  ::JSBY::SpecialMonsterAttack* mutable_specialinfo();
  void set_allocated_specialinfo(::JSBY::SpecialMonsterAttack* specialinfo);
  private:
  const ::JSBY::SpecialMonsterAttack& _internal_specialinfo() const;
  ::JSBY::SpecialMonsterAttack* _internal_mutable_specialinfo();
  public:
  void unsafe_arena_set_allocated_specialinfo(
      ::JSBY::SpecialMonsterAttack* specialinfo);
  ::JSBY::SpecialMonsterAttack* unsafe_arena_release_specialinfo();

  // float Ratio = 1;
  void clear_ratio();
  float ratio() const;
  void set_ratio(float value);
  private:
  float _internal_ratio() const;
  void _internal_set_ratio(float value);
  public:

  // int32 Mode = 2;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 MonsterId = 3;
  void clear_monsterid();
  ::PROTOBUF_NAMESPACE_ID::int32 monsterid() const;
  void set_monsterid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_monsterid() const;
  void _internal_set_monsterid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 PositionId = 4;
  void clear_positionid();
  ::PROTOBUF_NAMESPACE_ID::int32 positionid() const;
  void set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_positionid() const;
  void _internal_set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 UsePositionId = 5;
  void clear_usepositionid();
  ::PROTOBUF_NAMESPACE_ID::int32 usepositionid() const;
  void set_usepositionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_usepositionid() const;
  void _internal_set_usepositionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 UsePositionTimes = 6;
  void clear_usepositiontimes();
  ::PROTOBUF_NAMESPACE_ID::int32 usepositiontimes() const;
  void set_usepositiontimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_usepositiontimes() const;
  void _internal_set_usepositiontimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 SpecialType = 7;
  void clear_specialtype();
  ::PROTOBUF_NAMESPACE_ID::int32 specialtype() const;
  void set_specialtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_specialtype() const;
  void _internal_set_specialtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool DragonEnd = 9;
  void clear_dragonend();
  bool dragonend() const;
  void set_dragonend(bool value);
  private:
  bool _internal_dragonend() const;
  void _internal_set_dragonend(bool value);
  public:

  // int32 HeroUniqueId = 10;
  void clear_herouniqueid();
  ::PROTOBUF_NAMESPACE_ID::int32 herouniqueid() const;
  void set_herouniqueid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_herouniqueid() const;
  void _internal_set_herouniqueid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.CSRequestAttack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::JSBY::SpecialMonsterAttack* specialinfo_;
  float ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 monsterid_;
  ::PROTOBUF_NAMESPACE_ID::int32 positionid_;
  ::PROTOBUF_NAMESPACE_ID::int32 usepositionid_;
  ::PROTOBUF_NAMESPACE_ID::int32 usepositiontimes_;
  ::PROTOBUF_NAMESPACE_ID::int32 specialtype_;
  bool dragonend_;
  ::PROTOBUF_NAMESPACE_ID::int32 herouniqueid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCRequestAttack PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCRequestAttack) */ {
 public:
  inline SCRequestAttack() : SCRequestAttack(nullptr) {}
  virtual ~SCRequestAttack();

  SCRequestAttack(const SCRequestAttack& from);
  SCRequestAttack(SCRequestAttack&& from) noexcept
    : SCRequestAttack() {
    *this = ::std::move(from);
  }

  inline SCRequestAttack& operator=(const SCRequestAttack& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCRequestAttack& operator=(SCRequestAttack&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCRequestAttack& default_instance();

  static inline const SCRequestAttack* internal_default_instance() {
    return reinterpret_cast<const SCRequestAttack*>(
               &_SCRequestAttack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SCRequestAttack& a, SCRequestAttack& b) {
    a.Swap(&b);
  }
  inline void Swap(SCRequestAttack* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCRequestAttack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCRequestAttack* New() const final {
    return CreateMaybeMessage<SCRequestAttack>(nullptr);
  }

  SCRequestAttack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCRequestAttack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCRequestAttack& from);
  void MergeFrom(const SCRequestAttack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCRequestAttack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCRequestAttack";
  }
  protected:
  explicit SCRequestAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:JSBY.SCRequestAttack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SpecialAttackInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SpecialAttackInfo) */ {
 public:
  inline SpecialAttackInfo() : SpecialAttackInfo(nullptr) {}
  virtual ~SpecialAttackInfo();

  SpecialAttackInfo(const SpecialAttackInfo& from);
  SpecialAttackInfo(SpecialAttackInfo&& from) noexcept
    : SpecialAttackInfo() {
    *this = ::std::move(from);
  }

  inline SpecialAttackInfo& operator=(const SpecialAttackInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpecialAttackInfo& operator=(SpecialAttackInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpecialAttackInfo& default_instance();

  static inline const SpecialAttackInfo* internal_default_instance() {
    return reinterpret_cast<const SpecialAttackInfo*>(
               &_SpecialAttackInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SpecialAttackInfo& a, SpecialAttackInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SpecialAttackInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpecialAttackInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpecialAttackInfo* New() const final {
    return CreateMaybeMessage<SpecialAttackInfo>(nullptr);
  }

  SpecialAttackInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpecialAttackInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpecialAttackInfo& from);
  void MergeFrom(const SpecialAttackInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpecialAttackInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SpecialAttackInfo";
  }
  protected:
  explicit SpecialAttackInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKillIDFieldNumber = 1,
    kSelfIDFieldNumber = 2,
  };
  // int32 KillID = 1;
  void clear_killid();
  ::PROTOBUF_NAMESPACE_ID::int32 killid() const;
  void set_killid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_killid() const;
  void _internal_set_killid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 SelfID = 2;
  void clear_selfid();
  ::PROTOBUF_NAMESPACE_ID::int32 selfid() const;
  void set_selfid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_selfid() const;
  void _internal_set_selfid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SpecialAttackInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 killid_;
  ::PROTOBUF_NAMESPACE_ID::int32 selfid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCSyncMoney PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCSyncMoney) */ {
 public:
  inline SCSyncMoney() : SCSyncMoney(nullptr) {}
  virtual ~SCSyncMoney();

  SCSyncMoney(const SCSyncMoney& from);
  SCSyncMoney(SCSyncMoney&& from) noexcept
    : SCSyncMoney() {
    *this = ::std::move(from);
  }

  inline SCSyncMoney& operator=(const SCSyncMoney& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSyncMoney& operator=(SCSyncMoney&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSyncMoney& default_instance();

  static inline const SCSyncMoney* internal_default_instance() {
    return reinterpret_cast<const SCSyncMoney*>(
               &_SCSyncMoney_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SCSyncMoney& a, SCSyncMoney& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSyncMoney* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSyncMoney* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSyncMoney* New() const final {
    return CreateMaybeMessage<SCSyncMoney>(nullptr);
  }

  SCSyncMoney* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSyncMoney>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSyncMoney& from);
  void MergeFrom(const SCSyncMoney& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSyncMoney* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCSyncMoney";
  }
  protected:
  explicit SCSyncMoney(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOthersFieldNumber = 14,
    kBearMultipleFieldNumber = 18,
    kBomFieldNumber = 8,
    kAttackInfoFieldNumber = 10,
    kMoneyFieldNumber = 1,
    kMonsterIdFieldNumber = 2,
    kPositionIdFieldNumber = 3,
    kTypeFieldNumber = 4,
    kRatioFieldNumber = 5,
    kPlayerIdFieldNumber = 6,
    kMoneyVariationFieldNumber = 7,
    kHeroUniqueIdFieldNumber = 9,
    kEaredFieldNumber = 11,
    kAddRatioFieldNumber = 12,
    kBalloonRatioFieldNumber = 13,
    kGiantHitPowerFieldNumber = 15,
    kMxlSealMoneyFieldNumber = 16,
    kMxlSealAddAwardRatioFieldNumber = 17,
  };
  // string Others = 14;
  void clear_others();
  const std::string& others() const;
  void set_others(const std::string& value);
  void set_others(std::string&& value);
  void set_others(const char* value);
  void set_others(const char* value, size_t size);
  std::string* mutable_others();
  std::string* release_others();
  void set_allocated_others(std::string* others);
  private:
  const std::string& _internal_others() const;
  void _internal_set_others(const std::string& value);
  std::string* _internal_mutable_others();
  public:

  // string BearMultiple = 18;
  void clear_bearmultiple();
  const std::string& bearmultiple() const;
  void set_bearmultiple(const std::string& value);
  void set_bearmultiple(std::string&& value);
  void set_bearmultiple(const char* value);
  void set_bearmultiple(const char* value, size_t size);
  std::string* mutable_bearmultiple();
  std::string* release_bearmultiple();
  void set_allocated_bearmultiple(std::string* bearmultiple);
  private:
  const std::string& _internal_bearmultiple() const;
  void _internal_set_bearmultiple(const std::string& value);
  std::string* _internal_mutable_bearmultiple();
  public:

  // .JSBY.UserBomTimes Bom = 8;
  bool has_bom() const;
  private:
  bool _internal_has_bom() const;
  public:
  void clear_bom();
  const ::JSBY::UserBomTimes& bom() const;
  ::JSBY::UserBomTimes* release_bom();
  ::JSBY::UserBomTimes* mutable_bom();
  void set_allocated_bom(::JSBY::UserBomTimes* bom);
  private:
  const ::JSBY::UserBomTimes& _internal_bom() const;
  ::JSBY::UserBomTimes* _internal_mutable_bom();
  public:
  void unsafe_arena_set_allocated_bom(
      ::JSBY::UserBomTimes* bom);
  ::JSBY::UserBomTimes* unsafe_arena_release_bom();

  // .JSBY.SpecialAttackInfo AttackInfo = 10;
  bool has_attackinfo() const;
  private:
  bool _internal_has_attackinfo() const;
  public:
  void clear_attackinfo();
  const ::JSBY::SpecialAttackInfo& attackinfo() const;
  ::JSBY::SpecialAttackInfo* release_attackinfo();
  ::JSBY::SpecialAttackInfo* mutable_attackinfo();
  void set_allocated_attackinfo(::JSBY::SpecialAttackInfo* attackinfo);
  private:
  const ::JSBY::SpecialAttackInfo& _internal_attackinfo() const;
  ::JSBY::SpecialAttackInfo* _internal_mutable_attackinfo();
  public:
  void unsafe_arena_set_allocated_attackinfo(
      ::JSBY::SpecialAttackInfo* attackinfo);
  ::JSBY::SpecialAttackInfo* unsafe_arena_release_attackinfo();

  // int32 Money = 1;
  void clear_money();
  ::PROTOBUF_NAMESPACE_ID::int32 money() const;
  void set_money(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_money() const;
  void _internal_set_money(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 MonsterId = 2;
  void clear_monsterid();
  ::PROTOBUF_NAMESPACE_ID::int32 monsterid() const;
  void set_monsterid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_monsterid() const;
  void _internal_set_monsterid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 PositionId = 3;
  void clear_positionid();
  ::PROTOBUF_NAMESPACE_ID::int32 positionid() const;
  void set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_positionid() const;
  void _internal_set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Type = 4;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Ratio = 5;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 PlayerId = 6;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 MoneyVariation = 7;
  void clear_moneyvariation();
  ::PROTOBUF_NAMESPACE_ID::int32 moneyvariation() const;
  void set_moneyvariation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_moneyvariation() const;
  void _internal_set_moneyvariation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 HeroUniqueId = 9;
  void clear_herouniqueid();
  ::PROTOBUF_NAMESPACE_ID::int32 herouniqueid() const;
  void set_herouniqueid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_herouniqueid() const;
  void _internal_set_herouniqueid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Eared = 11;
  void clear_eared();
  ::PROTOBUF_NAMESPACE_ID::int32 eared() const;
  void set_eared(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eared() const;
  void _internal_set_eared(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 AddRatio = 12;
  void clear_addratio();
  ::PROTOBUF_NAMESPACE_ID::int32 addratio() const;
  void set_addratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_addratio() const;
  void _internal_set_addratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 BalloonRatio = 13;
  void clear_balloonratio();
  ::PROTOBUF_NAMESPACE_ID::int32 balloonratio() const;
  void set_balloonratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_balloonratio() const;
  void _internal_set_balloonratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 GiantHitPower = 15;
  void clear_gianthitpower();
  ::PROTOBUF_NAMESPACE_ID::int32 gianthitpower() const;
  void set_gianthitpower(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gianthitpower() const;
  void _internal_set_gianthitpower(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 MxlSealMoney = 16;
  void clear_mxlsealmoney();
  ::PROTOBUF_NAMESPACE_ID::int32 mxlsealmoney() const;
  void set_mxlsealmoney(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mxlsealmoney() const;
  void _internal_set_mxlsealmoney(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 MxlSealAddAwardRatio = 17;
  void clear_mxlsealaddawardratio();
  ::PROTOBUF_NAMESPACE_ID::int32 mxlsealaddawardratio() const;
  void set_mxlsealaddawardratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mxlsealaddawardratio() const;
  void _internal_set_mxlsealaddawardratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCSyncMoney)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr others_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bearmultiple_;
  ::JSBY::UserBomTimes* bom_;
  ::JSBY::SpecialAttackInfo* attackinfo_;
  ::PROTOBUF_NAMESPACE_ID::int32 money_;
  ::PROTOBUF_NAMESPACE_ID::int32 monsterid_;
  ::PROTOBUF_NAMESPACE_ID::int32 positionid_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 moneyvariation_;
  ::PROTOBUF_NAMESPACE_ID::int32 herouniqueid_;
  ::PROTOBUF_NAMESPACE_ID::int32 eared_;
  ::PROTOBUF_NAMESPACE_ID::int32 addratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 balloonratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 gianthitpower_;
  ::PROTOBUF_NAMESPACE_ID::int32 mxlsealmoney_;
  ::PROTOBUF_NAMESPACE_ID::int32 mxlsealaddawardratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCPoisonBomTimes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCPoisonBomTimes) */ {
 public:
  inline SCPoisonBomTimes() : SCPoisonBomTimes(nullptr) {}
  virtual ~SCPoisonBomTimes();

  SCPoisonBomTimes(const SCPoisonBomTimes& from);
  SCPoisonBomTimes(SCPoisonBomTimes&& from) noexcept
    : SCPoisonBomTimes() {
    *this = ::std::move(from);
  }

  inline SCPoisonBomTimes& operator=(const SCPoisonBomTimes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPoisonBomTimes& operator=(SCPoisonBomTimes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPoisonBomTimes& default_instance();

  static inline const SCPoisonBomTimes* internal_default_instance() {
    return reinterpret_cast<const SCPoisonBomTimes*>(
               &_SCPoisonBomTimes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SCPoisonBomTimes& a, SCPoisonBomTimes& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPoisonBomTimes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPoisonBomTimes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPoisonBomTimes* New() const final {
    return CreateMaybeMessage<SCPoisonBomTimes>(nullptr);
  }

  SCPoisonBomTimes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPoisonBomTimes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPoisonBomTimes& from);
  void MergeFrom(const SCPoisonBomTimes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPoisonBomTimes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCPoisonBomTimes";
  }
  protected:
  explicit SCPoisonBomTimes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddTimesFieldNumber = 4,
    kAttackInfoFieldNumber = 7,
    kPositionIdFieldNumber = 1,
    kTimesFieldNumber = 2,
    kRatioFieldNumber = 3,
    kKillPlayerIdFieldNumber = 5,
    kHeroUniqueIdFieldNumber = 6,
  };
  // repeated int32 AddTimes = 4;
  int addtimes_size() const;
  private:
  int _internal_addtimes_size() const;
  public:
  void clear_addtimes();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_addtimes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_addtimes() const;
  void _internal_add_addtimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_addtimes();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 addtimes(int index) const;
  void set_addtimes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_addtimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      addtimes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_addtimes();

  // .JSBY.SpecialAttackInfo AttackInfo = 7;
  bool has_attackinfo() const;
  private:
  bool _internal_has_attackinfo() const;
  public:
  void clear_attackinfo();
  const ::JSBY::SpecialAttackInfo& attackinfo() const;
  ::JSBY::SpecialAttackInfo* release_attackinfo();
  ::JSBY::SpecialAttackInfo* mutable_attackinfo();
  void set_allocated_attackinfo(::JSBY::SpecialAttackInfo* attackinfo);
  private:
  const ::JSBY::SpecialAttackInfo& _internal_attackinfo() const;
  ::JSBY::SpecialAttackInfo* _internal_mutable_attackinfo();
  public:
  void unsafe_arena_set_allocated_attackinfo(
      ::JSBY::SpecialAttackInfo* attackinfo);
  ::JSBY::SpecialAttackInfo* unsafe_arena_release_attackinfo();

  // int32 PositionId = 1;
  void clear_positionid();
  ::PROTOBUF_NAMESPACE_ID::int32 positionid() const;
  void set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_positionid() const;
  void _internal_set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Times = 2;
  void clear_times();
  ::PROTOBUF_NAMESPACE_ID::int32 times() const;
  void set_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_times() const;
  void _internal_set_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Ratio = 3;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 KillPlayerId = 5;
  void clear_killplayerid();
  ::PROTOBUF_NAMESPACE_ID::int32 killplayerid() const;
  void set_killplayerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_killplayerid() const;
  void _internal_set_killplayerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 HeroUniqueId = 6;
  void clear_herouniqueid();
  ::PROTOBUF_NAMESPACE_ID::int32 herouniqueid() const;
  void set_herouniqueid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_herouniqueid() const;
  void _internal_set_herouniqueid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCPoisonBomTimes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > addtimes_;
  mutable std::atomic<int> _addtimes_cached_byte_size_;
  ::JSBY::SpecialAttackInfo* attackinfo_;
  ::PROTOBUF_NAMESPACE_ID::int32 positionid_;
  ::PROTOBUF_NAMESPACE_ID::int32 times_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 killplayerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 herouniqueid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class CSChangePoisonBomTimes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.CSChangePoisonBomTimes) */ {
 public:
  inline CSChangePoisonBomTimes() : CSChangePoisonBomTimes(nullptr) {}
  virtual ~CSChangePoisonBomTimes();

  CSChangePoisonBomTimes(const CSChangePoisonBomTimes& from);
  CSChangePoisonBomTimes(CSChangePoisonBomTimes&& from) noexcept
    : CSChangePoisonBomTimes() {
    *this = ::std::move(from);
  }

  inline CSChangePoisonBomTimes& operator=(const CSChangePoisonBomTimes& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSChangePoisonBomTimes& operator=(CSChangePoisonBomTimes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSChangePoisonBomTimes& default_instance();

  static inline const CSChangePoisonBomTimes* internal_default_instance() {
    return reinterpret_cast<const CSChangePoisonBomTimes*>(
               &_CSChangePoisonBomTimes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CSChangePoisonBomTimes& a, CSChangePoisonBomTimes& b) {
    a.Swap(&b);
  }
  inline void Swap(CSChangePoisonBomTimes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSChangePoisonBomTimes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSChangePoisonBomTimes* New() const final {
    return CreateMaybeMessage<CSChangePoisonBomTimes>(nullptr);
  }

  CSChangePoisonBomTimes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSChangePoisonBomTimes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSChangePoisonBomTimes& from);
  void MergeFrom(const CSChangePoisonBomTimes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSChangePoisonBomTimes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.CSChangePoisonBomTimes";
  }
  protected:
  explicit CSChangePoisonBomTimes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionIdFieldNumber = 1,
    kUsePositionTimesFieldNumber = 2,
    kNewPositionIdFieldNumber = 3,
  };
  // int32 PositionId = 1;
  void clear_positionid();
  ::PROTOBUF_NAMESPACE_ID::int32 positionid() const;
  void set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_positionid() const;
  void _internal_set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 UsePositionTimes = 2;
  void clear_usepositiontimes();
  ::PROTOBUF_NAMESPACE_ID::int32 usepositiontimes() const;
  void set_usepositiontimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_usepositiontimes() const;
  void _internal_set_usepositiontimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 NewPositionId = 3;
  void clear_newpositionid();
  ::PROTOBUF_NAMESPACE_ID::int32 newpositionid() const;
  void set_newpositionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_newpositionid() const;
  void _internal_set_newpositionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.CSChangePoisonBomTimes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 positionid_;
  ::PROTOBUF_NAMESPACE_ID::int32 usepositiontimes_;
  ::PROTOBUF_NAMESPACE_ID::int32 newpositionid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCChangePoisonBomTimes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCChangePoisonBomTimes) */ {
 public:
  inline SCChangePoisonBomTimes() : SCChangePoisonBomTimes(nullptr) {}
  virtual ~SCChangePoisonBomTimes();

  SCChangePoisonBomTimes(const SCChangePoisonBomTimes& from);
  SCChangePoisonBomTimes(SCChangePoisonBomTimes&& from) noexcept
    : SCChangePoisonBomTimes() {
    *this = ::std::move(from);
  }

  inline SCChangePoisonBomTimes& operator=(const SCChangePoisonBomTimes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCChangePoisonBomTimes& operator=(SCChangePoisonBomTimes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCChangePoisonBomTimes& default_instance();

  static inline const SCChangePoisonBomTimes* internal_default_instance() {
    return reinterpret_cast<const SCChangePoisonBomTimes*>(
               &_SCChangePoisonBomTimes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SCChangePoisonBomTimes& a, SCChangePoisonBomTimes& b) {
    a.Swap(&b);
  }
  inline void Swap(SCChangePoisonBomTimes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCChangePoisonBomTimes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCChangePoisonBomTimes* New() const final {
    return CreateMaybeMessage<SCChangePoisonBomTimes>(nullptr);
  }

  SCChangePoisonBomTimes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCChangePoisonBomTimes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCChangePoisonBomTimes& from);
  void MergeFrom(const SCChangePoisonBomTimes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCChangePoisonBomTimes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCChangePoisonBomTimes";
  }
  protected:
  explicit SCChangePoisonBomTimes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:JSBY.SCChangePoisonBomTimes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class CSEnterStage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.CSEnterStage) */ {
 public:
  inline CSEnterStage() : CSEnterStage(nullptr) {}
  virtual ~CSEnterStage();

  CSEnterStage(const CSEnterStage& from);
  CSEnterStage(CSEnterStage&& from) noexcept
    : CSEnterStage() {
    *this = ::std::move(from);
  }

  inline CSEnterStage& operator=(const CSEnterStage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSEnterStage& operator=(CSEnterStage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSEnterStage& default_instance();

  static inline const CSEnterStage* internal_default_instance() {
    return reinterpret_cast<const CSEnterStage*>(
               &_CSEnterStage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CSEnterStage& a, CSEnterStage& b) {
    a.Swap(&b);
  }
  inline void Swap(CSEnterStage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSEnterStage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSEnterStage* New() const final {
    return CreateMaybeMessage<CSEnterStage>(nullptr);
  }

  CSEnterStage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSEnterStage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSEnterStage& from);
  void MergeFrom(const CSEnterStage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSEnterStage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.CSEnterStage";
  }
  protected:
  explicit CSEnterStage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnterFieldNumber = 1,
    kModeFieldNumber = 2,
  };
  // bool Enter = 1;
  void clear_enter();
  bool enter() const;
  void set_enter(bool value);
  private:
  bool _internal_enter() const;
  void _internal_set_enter(bool value);
  public:

  // .JSBY.ModeType Mode = 2;
  void clear_mode();
  ::JSBY::ModeType mode() const;
  void set_mode(::JSBY::ModeType value);
  private:
  ::JSBY::ModeType _internal_mode() const;
  void _internal_set_mode(::JSBY::ModeType value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.CSEnterStage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool enter_;
  int mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCEnterStage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCEnterStage) */ {
 public:
  inline SCEnterStage() : SCEnterStage(nullptr) {}
  virtual ~SCEnterStage();

  SCEnterStage(const SCEnterStage& from);
  SCEnterStage(SCEnterStage&& from) noexcept
    : SCEnterStage() {
    *this = ::std::move(from);
  }

  inline SCEnterStage& operator=(const SCEnterStage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCEnterStage& operator=(SCEnterStage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCEnterStage& default_instance();

  static inline const SCEnterStage* internal_default_instance() {
    return reinterpret_cast<const SCEnterStage*>(
               &_SCEnterStage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SCEnterStage& a, SCEnterStage& b) {
    a.Swap(&b);
  }
  inline void Swap(SCEnterStage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCEnterStage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCEnterStage* New() const final {
    return CreateMaybeMessage<SCEnterStage>(nullptr);
  }

  SCEnterStage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCEnterStage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCEnterStage& from);
  void MergeFrom(const SCEnterStage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCEnterStage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCEnterStage";
  }
  protected:
  explicit SCEnterStage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseRatioFieldNumber = 1,
  };
  // int32 UseRatio = 1;
  void clear_useratio();
  ::PROTOBUF_NAMESPACE_ID::int32 useratio() const;
  void set_useratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_useratio() const;
  void _internal_set_useratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCEnterStage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 useratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class CSKeepRatio PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.CSKeepRatio) */ {
 public:
  inline CSKeepRatio() : CSKeepRatio(nullptr) {}
  virtual ~CSKeepRatio();

  CSKeepRatio(const CSKeepRatio& from);
  CSKeepRatio(CSKeepRatio&& from) noexcept
    : CSKeepRatio() {
    *this = ::std::move(from);
  }

  inline CSKeepRatio& operator=(const CSKeepRatio& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSKeepRatio& operator=(CSKeepRatio&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSKeepRatio& default_instance();

  static inline const CSKeepRatio* internal_default_instance() {
    return reinterpret_cast<const CSKeepRatio*>(
               &_CSKeepRatio_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CSKeepRatio& a, CSKeepRatio& b) {
    a.Swap(&b);
  }
  inline void Swap(CSKeepRatio* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSKeepRatio* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSKeepRatio* New() const final {
    return CreateMaybeMessage<CSKeepRatio>(nullptr);
  }

  CSKeepRatio* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSKeepRatio>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSKeepRatio& from);
  void MergeFrom(const CSKeepRatio& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSKeepRatio* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.CSKeepRatio";
  }
  protected:
  explicit CSKeepRatio(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRatioFieldNumber = 1,
  };
  // int32 Ratio = 1;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.CSKeepRatio)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCKeepRatio PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCKeepRatio) */ {
 public:
  inline SCKeepRatio() : SCKeepRatio(nullptr) {}
  virtual ~SCKeepRatio();

  SCKeepRatio(const SCKeepRatio& from);
  SCKeepRatio(SCKeepRatio&& from) noexcept
    : SCKeepRatio() {
    *this = ::std::move(from);
  }

  inline SCKeepRatio& operator=(const SCKeepRatio& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCKeepRatio& operator=(SCKeepRatio&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCKeepRatio& default_instance();

  static inline const SCKeepRatio* internal_default_instance() {
    return reinterpret_cast<const SCKeepRatio*>(
               &_SCKeepRatio_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SCKeepRatio& a, SCKeepRatio& b) {
    a.Swap(&b);
  }
  inline void Swap(SCKeepRatio* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCKeepRatio* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCKeepRatio* New() const final {
    return CreateMaybeMessage<SCKeepRatio>(nullptr);
  }

  SCKeepRatio* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCKeepRatio>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCKeepRatio& from);
  void MergeFrom(const SCKeepRatio& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCKeepRatio* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCKeepRatio";
  }
  protected:
  explicit SCKeepRatio(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:JSBY.SCKeepRatio)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class TrusteeshipInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.TrusteeshipInfo) */ {
 public:
  inline TrusteeshipInfo() : TrusteeshipInfo(nullptr) {}
  virtual ~TrusteeshipInfo();

  TrusteeshipInfo(const TrusteeshipInfo& from);
  TrusteeshipInfo(TrusteeshipInfo&& from) noexcept
    : TrusteeshipInfo() {
    *this = ::std::move(from);
  }

  inline TrusteeshipInfo& operator=(const TrusteeshipInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrusteeshipInfo& operator=(TrusteeshipInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrusteeshipInfo& default_instance();

  static inline const TrusteeshipInfo* internal_default_instance() {
    return reinterpret_cast<const TrusteeshipInfo*>(
               &_TrusteeshipInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(TrusteeshipInfo& a, TrusteeshipInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TrusteeshipInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrusteeshipInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrusteeshipInfo* New() const final {
    return CreateMaybeMessage<TrusteeshipInfo>(nullptr);
  }

  TrusteeshipInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrusteeshipInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrusteeshipInfo& from);
  void MergeFrom(const TrusteeshipInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrusteeshipInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.TrusteeshipInfo";
  }
  protected:
  explicit TrusteeshipInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHighSetValueFieldNumber = 2,
    kLowSetValueFieldNumber = 4,
    kIsTrusteeshipFieldNumber = 1,
    kHighSetOpenFieldNumber = 3,
    kLowSetOpenFieldNumber = 5,
    kTimeSetOpenFieldNumber = 7,
    kTimeSetValueFieldNumber = 6,
  };
  // int32 HighSetValue = 2;
  void clear_highsetvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 highsetvalue() const;
  void set_highsetvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_highsetvalue() const;
  void _internal_set_highsetvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 LowSetValue = 4;
  void clear_lowsetvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 lowsetvalue() const;
  void set_lowsetvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lowsetvalue() const;
  void _internal_set_lowsetvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool IsTrusteeship = 1;
  void clear_istrusteeship();
  bool istrusteeship() const;
  void set_istrusteeship(bool value);
  private:
  bool _internal_istrusteeship() const;
  void _internal_set_istrusteeship(bool value);
  public:

  // bool HighSetOpen = 3;
  void clear_highsetopen();
  bool highsetopen() const;
  void set_highsetopen(bool value);
  private:
  bool _internal_highsetopen() const;
  void _internal_set_highsetopen(bool value);
  public:

  // bool LowSetOpen = 5;
  void clear_lowsetopen();
  bool lowsetopen() const;
  void set_lowsetopen(bool value);
  private:
  bool _internal_lowsetopen() const;
  void _internal_set_lowsetopen(bool value);
  public:

  // bool TimeSetOpen = 7;
  void clear_timesetopen();
  bool timesetopen() const;
  void set_timesetopen(bool value);
  private:
  bool _internal_timesetopen() const;
  void _internal_set_timesetopen(bool value);
  public:

  // float TimeSetValue = 6;
  void clear_timesetvalue();
  float timesetvalue() const;
  void set_timesetvalue(float value);
  private:
  float _internal_timesetvalue() const;
  void _internal_set_timesetvalue(float value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.TrusteeshipInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 highsetvalue_;
  ::PROTOBUF_NAMESPACE_ID::int32 lowsetvalue_;
  bool istrusteeship_;
  bool highsetopen_;
  bool lowsetopen_;
  bool timesetopen_;
  float timesetvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class CSGetTrusteeship PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.CSGetTrusteeship) */ {
 public:
  inline CSGetTrusteeship() : CSGetTrusteeship(nullptr) {}
  virtual ~CSGetTrusteeship();

  CSGetTrusteeship(const CSGetTrusteeship& from);
  CSGetTrusteeship(CSGetTrusteeship&& from) noexcept
    : CSGetTrusteeship() {
    *this = ::std::move(from);
  }

  inline CSGetTrusteeship& operator=(const CSGetTrusteeship& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSGetTrusteeship& operator=(CSGetTrusteeship&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSGetTrusteeship& default_instance();

  static inline const CSGetTrusteeship* internal_default_instance() {
    return reinterpret_cast<const CSGetTrusteeship*>(
               &_CSGetTrusteeship_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CSGetTrusteeship& a, CSGetTrusteeship& b) {
    a.Swap(&b);
  }
  inline void Swap(CSGetTrusteeship* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSGetTrusteeship* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSGetTrusteeship* New() const final {
    return CreateMaybeMessage<CSGetTrusteeship>(nullptr);
  }

  CSGetTrusteeship* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSGetTrusteeship>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSGetTrusteeship& from);
  void MergeFrom(const CSGetTrusteeship& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSGetTrusteeship* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.CSGetTrusteeship";
  }
  protected:
  explicit CSGetTrusteeship(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:JSBY.CSGetTrusteeship)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCGetTrusteeship PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCGetTrusteeship) */ {
 public:
  inline SCGetTrusteeship() : SCGetTrusteeship(nullptr) {}
  virtual ~SCGetTrusteeship();

  SCGetTrusteeship(const SCGetTrusteeship& from);
  SCGetTrusteeship(SCGetTrusteeship&& from) noexcept
    : SCGetTrusteeship() {
    *this = ::std::move(from);
  }

  inline SCGetTrusteeship& operator=(const SCGetTrusteeship& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGetTrusteeship& operator=(SCGetTrusteeship&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGetTrusteeship& default_instance();

  static inline const SCGetTrusteeship* internal_default_instance() {
    return reinterpret_cast<const SCGetTrusteeship*>(
               &_SCGetTrusteeship_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SCGetTrusteeship& a, SCGetTrusteeship& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGetTrusteeship* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGetTrusteeship* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGetTrusteeship* New() const final {
    return CreateMaybeMessage<SCGetTrusteeship>(nullptr);
  }

  SCGetTrusteeship* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGetTrusteeship>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGetTrusteeship& from);
  void MergeFrom(const SCGetTrusteeship& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGetTrusteeship* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCGetTrusteeship";
  }
  protected:
  explicit SCGetTrusteeship(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kLeftTimeFieldNumber = 2,
    kVIPLevelFieldNumber = 3,
  };
  // .JSBY.TrusteeshipInfo Info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::JSBY::TrusteeshipInfo& info() const;
  ::JSBY::TrusteeshipInfo* release_info();
  ::JSBY::TrusteeshipInfo* mutable_info();
  void set_allocated_info(::JSBY::TrusteeshipInfo* info);
  private:
  const ::JSBY::TrusteeshipInfo& _internal_info() const;
  ::JSBY::TrusteeshipInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::JSBY::TrusteeshipInfo* info);
  ::JSBY::TrusteeshipInfo* unsafe_arena_release_info();

  // int32 LeftTime = 2;
  void clear_lefttime();
  ::PROTOBUF_NAMESPACE_ID::int32 lefttime() const;
  void set_lefttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lefttime() const;
  void _internal_set_lefttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 VIPLevel = 3;
  void clear_viplevel();
  ::PROTOBUF_NAMESPACE_ID::int32 viplevel() const;
  void set_viplevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_viplevel() const;
  void _internal_set_viplevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCGetTrusteeship)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::JSBY::TrusteeshipInfo* info_;
  ::PROTOBUF_NAMESPACE_ID::int32 lefttime_;
  ::PROTOBUF_NAMESPACE_ID::int32 viplevel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class CSSetTrusteeship PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.CSSetTrusteeship) */ {
 public:
  inline CSSetTrusteeship() : CSSetTrusteeship(nullptr) {}
  virtual ~CSSetTrusteeship();

  CSSetTrusteeship(const CSSetTrusteeship& from);
  CSSetTrusteeship(CSSetTrusteeship&& from) noexcept
    : CSSetTrusteeship() {
    *this = ::std::move(from);
  }

  inline CSSetTrusteeship& operator=(const CSSetTrusteeship& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSetTrusteeship& operator=(CSSetTrusteeship&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSetTrusteeship& default_instance();

  static inline const CSSetTrusteeship* internal_default_instance() {
    return reinterpret_cast<const CSSetTrusteeship*>(
               &_CSSetTrusteeship_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CSSetTrusteeship& a, CSSetTrusteeship& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSetTrusteeship* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSetTrusteeship* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSetTrusteeship* New() const final {
    return CreateMaybeMessage<CSSetTrusteeship>(nullptr);
  }

  CSSetTrusteeship* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSetTrusteeship>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSetTrusteeship& from);
  void MergeFrom(const CSSetTrusteeship& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSetTrusteeship* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.CSSetTrusteeship";
  }
  protected:
  explicit CSSetTrusteeship(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .JSBY.TrusteeshipInfo Info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::JSBY::TrusteeshipInfo& info() const;
  ::JSBY::TrusteeshipInfo* release_info();
  ::JSBY::TrusteeshipInfo* mutable_info();
  void set_allocated_info(::JSBY::TrusteeshipInfo* info);
  private:
  const ::JSBY::TrusteeshipInfo& _internal_info() const;
  ::JSBY::TrusteeshipInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::JSBY::TrusteeshipInfo* info);
  ::JSBY::TrusteeshipInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:JSBY.CSSetTrusteeship)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::JSBY::TrusteeshipInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCSetTrusteeship PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCSetTrusteeship) */ {
 public:
  inline SCSetTrusteeship() : SCSetTrusteeship(nullptr) {}
  virtual ~SCSetTrusteeship();

  SCSetTrusteeship(const SCSetTrusteeship& from);
  SCSetTrusteeship(SCSetTrusteeship&& from) noexcept
    : SCSetTrusteeship() {
    *this = ::std::move(from);
  }

  inline SCSetTrusteeship& operator=(const SCSetTrusteeship& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSetTrusteeship& operator=(SCSetTrusteeship&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSetTrusteeship& default_instance();

  static inline const SCSetTrusteeship* internal_default_instance() {
    return reinterpret_cast<const SCSetTrusteeship*>(
               &_SCSetTrusteeship_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SCSetTrusteeship& a, SCSetTrusteeship& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSetTrusteeship* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSetTrusteeship* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSetTrusteeship* New() const final {
    return CreateMaybeMessage<SCSetTrusteeship>(nullptr);
  }

  SCSetTrusteeship* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSetTrusteeship>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSetTrusteeship& from);
  void MergeFrom(const SCSetTrusteeship& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSetTrusteeship* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCSetTrusteeship";
  }
  protected:
  explicit SCSetTrusteeship(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:JSBY.SCSetTrusteeship)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class TrusteeshipMoney PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.TrusteeshipMoney) */ {
 public:
  inline TrusteeshipMoney() : TrusteeshipMoney(nullptr) {}
  virtual ~TrusteeshipMoney();

  TrusteeshipMoney(const TrusteeshipMoney& from);
  TrusteeshipMoney(TrusteeshipMoney&& from) noexcept
    : TrusteeshipMoney() {
    *this = ::std::move(from);
  }

  inline TrusteeshipMoney& operator=(const TrusteeshipMoney& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrusteeshipMoney& operator=(TrusteeshipMoney&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrusteeshipMoney& default_instance();

  static inline const TrusteeshipMoney* internal_default_instance() {
    return reinterpret_cast<const TrusteeshipMoney*>(
               &_TrusteeshipMoney_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(TrusteeshipMoney& a, TrusteeshipMoney& b) {
    a.Swap(&b);
  }
  inline void Swap(TrusteeshipMoney* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrusteeshipMoney* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrusteeshipMoney* New() const final {
    return CreateMaybeMessage<TrusteeshipMoney>(nullptr);
  }

  TrusteeshipMoney* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrusteeshipMoney>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrusteeshipMoney& from);
  void MergeFrom(const TrusteeshipMoney& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrusteeshipMoney* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.TrusteeshipMoney";
  }
  protected:
  explicit TrusteeshipMoney(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonsterTypeFieldNumber = 1,
    kMoneyFieldNumber = 2,
  };
  // int32 MonsterType = 1;
  void clear_monstertype();
  ::PROTOBUF_NAMESPACE_ID::int32 monstertype() const;
  void set_monstertype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_monstertype() const;
  void _internal_set_monstertype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Money = 2;
  void clear_money();
  ::PROTOBUF_NAMESPACE_ID::int32 money() const;
  void set_money(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_money() const;
  void _internal_set_money(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.TrusteeshipMoney)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 monstertype_;
  ::PROTOBUF_NAMESPACE_ID::int32 money_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class CSEndTrusteeship PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.CSEndTrusteeship) */ {
 public:
  inline CSEndTrusteeship() : CSEndTrusteeship(nullptr) {}
  virtual ~CSEndTrusteeship();

  CSEndTrusteeship(const CSEndTrusteeship& from);
  CSEndTrusteeship(CSEndTrusteeship&& from) noexcept
    : CSEndTrusteeship() {
    *this = ::std::move(from);
  }

  inline CSEndTrusteeship& operator=(const CSEndTrusteeship& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSEndTrusteeship& operator=(CSEndTrusteeship&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSEndTrusteeship& default_instance();

  static inline const CSEndTrusteeship* internal_default_instance() {
    return reinterpret_cast<const CSEndTrusteeship*>(
               &_CSEndTrusteeship_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CSEndTrusteeship& a, CSEndTrusteeship& b) {
    a.Swap(&b);
  }
  inline void Swap(CSEndTrusteeship* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSEndTrusteeship* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSEndTrusteeship* New() const final {
    return CreateMaybeMessage<CSEndTrusteeship>(nullptr);
  }

  CSEndTrusteeship* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSEndTrusteeship>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSEndTrusteeship& from);
  void MergeFrom(const CSEndTrusteeship& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSEndTrusteeship* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.CSEndTrusteeship";
  }
  protected:
  explicit CSEndTrusteeship(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotifyFieldNumber = 1,
  };
  // bool Notify = 1;
  void clear_notify();
  bool notify() const;
  void set_notify(bool value);
  private:
  bool _internal_notify() const;
  void _internal_set_notify(bool value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.CSEndTrusteeship)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool notify_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCEndTrusteeship PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCEndTrusteeship) */ {
 public:
  inline SCEndTrusteeship() : SCEndTrusteeship(nullptr) {}
  virtual ~SCEndTrusteeship();

  SCEndTrusteeship(const SCEndTrusteeship& from);
  SCEndTrusteeship(SCEndTrusteeship&& from) noexcept
    : SCEndTrusteeship() {
    *this = ::std::move(from);
  }

  inline SCEndTrusteeship& operator=(const SCEndTrusteeship& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCEndTrusteeship& operator=(SCEndTrusteeship&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCEndTrusteeship& default_instance();

  static inline const SCEndTrusteeship* internal_default_instance() {
    return reinterpret_cast<const SCEndTrusteeship*>(
               &_SCEndTrusteeship_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SCEndTrusteeship& a, SCEndTrusteeship& b) {
    a.Swap(&b);
  }
  inline void Swap(SCEndTrusteeship* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCEndTrusteeship* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCEndTrusteeship* New() const final {
    return CreateMaybeMessage<SCEndTrusteeship>(nullptr);
  }

  SCEndTrusteeship* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCEndTrusteeship>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCEndTrusteeship& from);
  void MergeFrom(const SCEndTrusteeship& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCEndTrusteeship* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCEndTrusteeship";
  }
  protected:
  explicit SCEndTrusteeship(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kTotalMoneyFieldNumber = 2,
    kTotalTimeFieldNumber = 3,
  };
  // .JSBY.TrusteeshipMoney Info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::JSBY::TrusteeshipMoney& info() const;
  ::JSBY::TrusteeshipMoney* release_info();
  ::JSBY::TrusteeshipMoney* mutable_info();
  void set_allocated_info(::JSBY::TrusteeshipMoney* info);
  private:
  const ::JSBY::TrusteeshipMoney& _internal_info() const;
  ::JSBY::TrusteeshipMoney* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::JSBY::TrusteeshipMoney* info);
  ::JSBY::TrusteeshipMoney* unsafe_arena_release_info();

  // int32 TotalMoney = 2;
  void clear_totalmoney();
  ::PROTOBUF_NAMESPACE_ID::int32 totalmoney() const;
  void set_totalmoney(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_totalmoney() const;
  void _internal_set_totalmoney(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 TotalTime = 3;
  void clear_totaltime();
  ::PROTOBUF_NAMESPACE_ID::int32 totaltime() const;
  void set_totaltime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_totaltime() const;
  void _internal_set_totaltime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCEndTrusteeship)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::JSBY::TrusteeshipMoney* info_;
  ::PROTOBUF_NAMESPACE_ID::int32 totalmoney_;
  ::PROTOBUF_NAMESPACE_ID::int32 totaltime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class CSGetVersion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.CSGetVersion) */ {
 public:
  inline CSGetVersion() : CSGetVersion(nullptr) {}
  virtual ~CSGetVersion();

  CSGetVersion(const CSGetVersion& from);
  CSGetVersion(CSGetVersion&& from) noexcept
    : CSGetVersion() {
    *this = ::std::move(from);
  }

  inline CSGetVersion& operator=(const CSGetVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSGetVersion& operator=(CSGetVersion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSGetVersion& default_instance();

  static inline const CSGetVersion* internal_default_instance() {
    return reinterpret_cast<const CSGetVersion*>(
               &_CSGetVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CSGetVersion& a, CSGetVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(CSGetVersion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSGetVersion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSGetVersion* New() const final {
    return CreateMaybeMessage<CSGetVersion>(nullptr);
  }

  CSGetVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSGetVersion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSGetVersion& from);
  void MergeFrom(const CSGetVersion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSGetVersion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.CSGetVersion";
  }
  protected:
  explicit CSGetVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:JSBY.CSGetVersion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCGetVersion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCGetVersion) */ {
 public:
  inline SCGetVersion() : SCGetVersion(nullptr) {}
  virtual ~SCGetVersion();

  SCGetVersion(const SCGetVersion& from);
  SCGetVersion(SCGetVersion&& from) noexcept
    : SCGetVersion() {
    *this = ::std::move(from);
  }

  inline SCGetVersion& operator=(const SCGetVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGetVersion& operator=(SCGetVersion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGetVersion& default_instance();

  static inline const SCGetVersion* internal_default_instance() {
    return reinterpret_cast<const SCGetVersion*>(
               &_SCGetVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SCGetVersion& a, SCGetVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGetVersion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGetVersion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGetVersion* New() const final {
    return CreateMaybeMessage<SCGetVersion>(nullptr);
  }

  SCGetVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGetVersion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGetVersion& from);
  void MergeFrom(const SCGetVersion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGetVersion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCGetVersion";
  }
  protected:
  explicit SCGetVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsNewFieldNumber = 1,
  };
  // bool IsNew = 1;
  void clear_isnew();
  bool isnew() const;
  void set_isnew(bool value);
  private:
  bool _internal_isnew() const;
  void _internal_set_isnew(bool value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCGetVersion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool isnew_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class ActivityInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.ActivityInfo) */ {
 public:
  inline ActivityInfo() : ActivityInfo(nullptr) {}
  virtual ~ActivityInfo();

  ActivityInfo(const ActivityInfo& from);
  ActivityInfo(ActivityInfo&& from) noexcept
    : ActivityInfo() {
    *this = ::std::move(from);
  }

  inline ActivityInfo& operator=(const ActivityInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityInfo& operator=(ActivityInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActivityInfo& default_instance();

  static inline const ActivityInfo* internal_default_instance() {
    return reinterpret_cast<const ActivityInfo*>(
               &_ActivityInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ActivityInfo& a, ActivityInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivityInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActivityInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivityInfo* New() const final {
    return CreateMaybeMessage<ActivityInfo>(nullptr);
  }

  ActivityInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivityInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActivityInfo& from);
  void MergeFrom(const ActivityInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActivityInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.ActivityInfo";
  }
  protected:
  explicit ActivityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 4,
    kIDFieldNumber = 1,
    kMoneyFieldNumber = 2,
    kEnzymeFieldNumber = 3,
    kFlagFieldNumber = 5,
  };
  // string Name = 4;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Money = 2;
  void clear_money();
  ::PROTOBUF_NAMESPACE_ID::int32 money() const;
  void set_money(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_money() const;
  void _internal_set_money(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Enzyme = 3;
  void clear_enzyme();
  ::PROTOBUF_NAMESPACE_ID::int32 enzyme() const;
  void set_enzyme(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_enzyme() const;
  void _internal_set_enzyme(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Flag = 5;
  void clear_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flag() const;
  void _internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.ActivityInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 money_;
  ::PROTOBUF_NAMESPACE_ID::int32 enzyme_;
  ::PROTOBUF_NAMESPACE_ID::int32 flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class CSActivityInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.CSActivityInfo) */ {
 public:
  inline CSActivityInfo() : CSActivityInfo(nullptr) {}
  virtual ~CSActivityInfo();

  CSActivityInfo(const CSActivityInfo& from);
  CSActivityInfo(CSActivityInfo&& from) noexcept
    : CSActivityInfo() {
    *this = ::std::move(from);
  }

  inline CSActivityInfo& operator=(const CSActivityInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSActivityInfo& operator=(CSActivityInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSActivityInfo& default_instance();

  static inline const CSActivityInfo* internal_default_instance() {
    return reinterpret_cast<const CSActivityInfo*>(
               &_CSActivityInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CSActivityInfo& a, CSActivityInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSActivityInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSActivityInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSActivityInfo* New() const final {
    return CreateMaybeMessage<CSActivityInfo>(nullptr);
  }

  CSActivityInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSActivityInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSActivityInfo& from);
  void MergeFrom(const CSActivityInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSActivityInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.CSActivityInfo";
  }
  protected:
  explicit CSActivityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:JSBY.CSActivityInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCActivityInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCActivityInfo) */ {
 public:
  inline SCActivityInfo() : SCActivityInfo(nullptr) {}
  virtual ~SCActivityInfo();

  SCActivityInfo(const SCActivityInfo& from);
  SCActivityInfo(SCActivityInfo&& from) noexcept
    : SCActivityInfo() {
    *this = ::std::move(from);
  }

  inline SCActivityInfo& operator=(const SCActivityInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCActivityInfo& operator=(SCActivityInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCActivityInfo& default_instance();

  static inline const SCActivityInfo* internal_default_instance() {
    return reinterpret_cast<const SCActivityInfo*>(
               &_SCActivityInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(SCActivityInfo& a, SCActivityInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCActivityInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCActivityInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCActivityInfo* New() const final {
    return CreateMaybeMessage<SCActivityInfo>(nullptr);
  }

  SCActivityInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCActivityInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCActivityInfo& from);
  void MergeFrom(const SCActivityInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCActivityInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCActivityInfo";
  }
  protected:
  explicit SCActivityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBegint32ImeFieldNumber = 3,
    kEndTimeFieldNumber = 4,
    kInfoFieldNumber = 1,
    kLeftTimeFieldNumber = 2,
  };
  // string Begint32ime = 3;
  void clear_begint32ime();
  const std::string& begint32ime() const;
  void set_begint32ime(const std::string& value);
  void set_begint32ime(std::string&& value);
  void set_begint32ime(const char* value);
  void set_begint32ime(const char* value, size_t size);
  std::string* mutable_begint32ime();
  std::string* release_begint32ime();
  void set_allocated_begint32ime(std::string* begint32ime);
  private:
  const std::string& _internal_begint32ime() const;
  void _internal_set_begint32ime(const std::string& value);
  std::string* _internal_mutable_begint32ime();
  public:

  // string EndTime = 4;
  void clear_endtime();
  const std::string& endtime() const;
  void set_endtime(const std::string& value);
  void set_endtime(std::string&& value);
  void set_endtime(const char* value);
  void set_endtime(const char* value, size_t size);
  std::string* mutable_endtime();
  std::string* release_endtime();
  void set_allocated_endtime(std::string* endtime);
  private:
  const std::string& _internal_endtime() const;
  void _internal_set_endtime(const std::string& value);
  std::string* _internal_mutable_endtime();
  public:

  // .JSBY.ActivityInfo Info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::JSBY::ActivityInfo& info() const;
  ::JSBY::ActivityInfo* release_info();
  ::JSBY::ActivityInfo* mutable_info();
  void set_allocated_info(::JSBY::ActivityInfo* info);
  private:
  const ::JSBY::ActivityInfo& _internal_info() const;
  ::JSBY::ActivityInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::JSBY::ActivityInfo* info);
  ::JSBY::ActivityInfo* unsafe_arena_release_info();

  // int32 LeftTime = 2;
  void clear_lefttime();
  ::PROTOBUF_NAMESPACE_ID::int32 lefttime() const;
  void set_lefttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lefttime() const;
  void _internal_set_lefttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCActivityInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr begint32ime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endtime_;
  ::JSBY::ActivityInfo* info_;
  ::PROTOBUF_NAMESPACE_ID::int32 lefttime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCNotifyActivityInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCNotifyActivityInfo) */ {
 public:
  inline SCNotifyActivityInfo() : SCNotifyActivityInfo(nullptr) {}
  virtual ~SCNotifyActivityInfo();

  SCNotifyActivityInfo(const SCNotifyActivityInfo& from);
  SCNotifyActivityInfo(SCNotifyActivityInfo&& from) noexcept
    : SCNotifyActivityInfo() {
    *this = ::std::move(from);
  }

  inline SCNotifyActivityInfo& operator=(const SCNotifyActivityInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCNotifyActivityInfo& operator=(SCNotifyActivityInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCNotifyActivityInfo& default_instance();

  static inline const SCNotifyActivityInfo* internal_default_instance() {
    return reinterpret_cast<const SCNotifyActivityInfo*>(
               &_SCNotifyActivityInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(SCNotifyActivityInfo& a, SCNotifyActivityInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCNotifyActivityInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCNotifyActivityInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCNotifyActivityInfo* New() const final {
    return CreateMaybeMessage<SCNotifyActivityInfo>(nullptr);
  }

  SCNotifyActivityInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCNotifyActivityInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCNotifyActivityInfo& from);
  void MergeFrom(const SCNotifyActivityInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCNotifyActivityInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCNotifyActivityInfo";
  }
  protected:
  explicit SCNotifyActivityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBegint32ImeFieldNumber = 3,
    kEndTimeFieldNumber = 4,
    kInfoFieldNumber = 1,
    kLeftTimeFieldNumber = 2,
  };
  // string Begint32ime = 3;
  void clear_begint32ime();
  const std::string& begint32ime() const;
  void set_begint32ime(const std::string& value);
  void set_begint32ime(std::string&& value);
  void set_begint32ime(const char* value);
  void set_begint32ime(const char* value, size_t size);
  std::string* mutable_begint32ime();
  std::string* release_begint32ime();
  void set_allocated_begint32ime(std::string* begint32ime);
  private:
  const std::string& _internal_begint32ime() const;
  void _internal_set_begint32ime(const std::string& value);
  std::string* _internal_mutable_begint32ime();
  public:

  // string EndTime = 4;
  void clear_endtime();
  const std::string& endtime() const;
  void set_endtime(const std::string& value);
  void set_endtime(std::string&& value);
  void set_endtime(const char* value);
  void set_endtime(const char* value, size_t size);
  std::string* mutable_endtime();
  std::string* release_endtime();
  void set_allocated_endtime(std::string* endtime);
  private:
  const std::string& _internal_endtime() const;
  void _internal_set_endtime(const std::string& value);
  std::string* _internal_mutable_endtime();
  public:

  // .JSBY.ActivityInfo Info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::JSBY::ActivityInfo& info() const;
  ::JSBY::ActivityInfo* release_info();
  ::JSBY::ActivityInfo* mutable_info();
  void set_allocated_info(::JSBY::ActivityInfo* info);
  private:
  const ::JSBY::ActivityInfo& _internal_info() const;
  ::JSBY::ActivityInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::JSBY::ActivityInfo* info);
  ::JSBY::ActivityInfo* unsafe_arena_release_info();

  // int32 LeftTime = 2;
  void clear_lefttime();
  ::PROTOBUF_NAMESPACE_ID::int32 lefttime() const;
  void set_lefttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lefttime() const;
  void _internal_set_lefttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCNotifyActivityInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr begint32ime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endtime_;
  ::JSBY::ActivityInfo* info_;
  ::PROTOBUF_NAMESPACE_ID::int32 lefttime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class CSGetActivityAward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.CSGetActivityAward) */ {
 public:
  inline CSGetActivityAward() : CSGetActivityAward(nullptr) {}
  virtual ~CSGetActivityAward();

  CSGetActivityAward(const CSGetActivityAward& from);
  CSGetActivityAward(CSGetActivityAward&& from) noexcept
    : CSGetActivityAward() {
    *this = ::std::move(from);
  }

  inline CSGetActivityAward& operator=(const CSGetActivityAward& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSGetActivityAward& operator=(CSGetActivityAward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSGetActivityAward& default_instance();

  static inline const CSGetActivityAward* internal_default_instance() {
    return reinterpret_cast<const CSGetActivityAward*>(
               &_CSGetActivityAward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CSGetActivityAward& a, CSGetActivityAward& b) {
    a.Swap(&b);
  }
  inline void Swap(CSGetActivityAward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSGetActivityAward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSGetActivityAward* New() const final {
    return CreateMaybeMessage<CSGetActivityAward>(nullptr);
  }

  CSGetActivityAward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSGetActivityAward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSGetActivityAward& from);
  void MergeFrom(const CSGetActivityAward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSGetActivityAward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.CSGetActivityAward";
  }
  protected:
  explicit CSGetActivityAward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 1,
  };
  // int32 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.CSGetActivityAward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCGetActivityAward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCGetActivityAward) */ {
 public:
  inline SCGetActivityAward() : SCGetActivityAward(nullptr) {}
  virtual ~SCGetActivityAward();

  SCGetActivityAward(const SCGetActivityAward& from);
  SCGetActivityAward(SCGetActivityAward&& from) noexcept
    : SCGetActivityAward() {
    *this = ::std::move(from);
  }

  inline SCGetActivityAward& operator=(const SCGetActivityAward& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGetActivityAward& operator=(SCGetActivityAward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGetActivityAward& default_instance();

  static inline const SCGetActivityAward* internal_default_instance() {
    return reinterpret_cast<const SCGetActivityAward*>(
               &_SCGetActivityAward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(SCGetActivityAward& a, SCGetActivityAward& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGetActivityAward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGetActivityAward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGetActivityAward* New() const final {
    return CreateMaybeMessage<SCGetActivityAward>(nullptr);
  }

  SCGetActivityAward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGetActivityAward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGetActivityAward& from);
  void MergeFrom(const SCGetActivityAward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGetActivityAward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCGetActivityAward";
  }
  protected:
  explicit SCGetActivityAward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // int32 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Flag = 2;
  void clear_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flag() const;
  void _internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCGetActivityAward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class CSButtonRecords PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.CSButtonRecords) */ {
 public:
  inline CSButtonRecords() : CSButtonRecords(nullptr) {}
  virtual ~CSButtonRecords();

  CSButtonRecords(const CSButtonRecords& from);
  CSButtonRecords(CSButtonRecords&& from) noexcept
    : CSButtonRecords() {
    *this = ::std::move(from);
  }

  inline CSButtonRecords& operator=(const CSButtonRecords& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSButtonRecords& operator=(CSButtonRecords&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSButtonRecords& default_instance();

  static inline const CSButtonRecords* internal_default_instance() {
    return reinterpret_cast<const CSButtonRecords*>(
               &_CSButtonRecords_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CSButtonRecords& a, CSButtonRecords& b) {
    a.Swap(&b);
  }
  inline void Swap(CSButtonRecords* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSButtonRecords* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSButtonRecords* New() const final {
    return CreateMaybeMessage<CSButtonRecords>(nullptr);
  }

  CSButtonRecords* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSButtonRecords>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSButtonRecords& from);
  void MergeFrom(const CSButtonRecords& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSButtonRecords* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.CSButtonRecords";
  }
  protected:
  explicit CSButtonRecords(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 1,
    kModeFieldNumber = 2,
  };
  // int32 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Mode = 2;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.CSButtonRecords)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCButtonRecords PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCButtonRecords) */ {
 public:
  inline SCButtonRecords() : SCButtonRecords(nullptr) {}
  virtual ~SCButtonRecords();

  SCButtonRecords(const SCButtonRecords& from);
  SCButtonRecords(SCButtonRecords&& from) noexcept
    : SCButtonRecords() {
    *this = ::std::move(from);
  }

  inline SCButtonRecords& operator=(const SCButtonRecords& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCButtonRecords& operator=(SCButtonRecords&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCButtonRecords& default_instance();

  static inline const SCButtonRecords* internal_default_instance() {
    return reinterpret_cast<const SCButtonRecords*>(
               &_SCButtonRecords_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(SCButtonRecords& a, SCButtonRecords& b) {
    a.Swap(&b);
  }
  inline void Swap(SCButtonRecords* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCButtonRecords* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCButtonRecords* New() const final {
    return CreateMaybeMessage<SCButtonRecords>(nullptr);
  }

  SCButtonRecords* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCButtonRecords>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCButtonRecords& from);
  void MergeFrom(const SCButtonRecords& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCButtonRecords* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCButtonRecords";
  }
  protected:
  explicit SCButtonRecords(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:JSBY.SCButtonRecords)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class TowerHeroInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.TowerHeroInfo) */ {
 public:
  inline TowerHeroInfo() : TowerHeroInfo(nullptr) {}
  virtual ~TowerHeroInfo();

  TowerHeroInfo(const TowerHeroInfo& from);
  TowerHeroInfo(TowerHeroInfo&& from) noexcept
    : TowerHeroInfo() {
    *this = ::std::move(from);
  }

  inline TowerHeroInfo& operator=(const TowerHeroInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TowerHeroInfo& operator=(TowerHeroInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TowerHeroInfo& default_instance();

  static inline const TowerHeroInfo* internal_default_instance() {
    return reinterpret_cast<const TowerHeroInfo*>(
               &_TowerHeroInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(TowerHeroInfo& a, TowerHeroInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TowerHeroInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TowerHeroInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TowerHeroInfo* New() const final {
    return CreateMaybeMessage<TowerHeroInfo>(nullptr);
  }

  TowerHeroInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TowerHeroInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TowerHeroInfo& from);
  void MergeFrom(const TowerHeroInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TowerHeroInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.TowerHeroInfo";
  }
  protected:
  explicit TowerHeroInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeroIdFieldNumber = 1,
    kPositionIdFieldNumber = 2,
    kIsAtkFieldNumber = 3,
    kTimestampFieldNumber = 4,
    kTargetPositionIdFieldNumber = 5,
    kUniqueIdFieldNumber = 6,
  };
  // int32 HeroId = 1;
  void clear_heroid();
  ::PROTOBUF_NAMESPACE_ID::int32 heroid() const;
  void set_heroid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_heroid() const;
  void _internal_set_heroid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 PositionId = 2;
  void clear_positionid();
  ::PROTOBUF_NAMESPACE_ID::int32 positionid() const;
  void set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_positionid() const;
  void _internal_set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool IsAtk = 3;
  void clear_isatk();
  bool isatk() const;
  void set_isatk(bool value);
  private:
  bool _internal_isatk() const;
  void _internal_set_isatk(bool value);
  public:

  // int32 Timestamp = 4;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 TargetPositionId = 5;
  void clear_targetpositionid();
  ::PROTOBUF_NAMESPACE_ID::int32 targetpositionid() const;
  void set_targetpositionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_targetpositionid() const;
  void _internal_set_targetpositionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 UniqueId = 6;
  void clear_uniqueid();
  ::PROTOBUF_NAMESPACE_ID::int32 uniqueid() const;
  void set_uniqueid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uniqueid() const;
  void _internal_set_uniqueid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.TowerHeroInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 heroid_;
  ::PROTOBUF_NAMESPACE_ID::int32 positionid_;
  bool isatk_;
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 targetpositionid_;
  ::PROTOBUF_NAMESPACE_ID::int32 uniqueid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class TowerHeroAtkInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.TowerHeroAtkInfo) */ {
 public:
  inline TowerHeroAtkInfo() : TowerHeroAtkInfo(nullptr) {}
  virtual ~TowerHeroAtkInfo();

  TowerHeroAtkInfo(const TowerHeroAtkInfo& from);
  TowerHeroAtkInfo(TowerHeroAtkInfo&& from) noexcept
    : TowerHeroAtkInfo() {
    *this = ::std::move(from);
  }

  inline TowerHeroAtkInfo& operator=(const TowerHeroAtkInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TowerHeroAtkInfo& operator=(TowerHeroAtkInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TowerHeroAtkInfo& default_instance();

  static inline const TowerHeroAtkInfo* internal_default_instance() {
    return reinterpret_cast<const TowerHeroAtkInfo*>(
               &_TowerHeroAtkInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(TowerHeroAtkInfo& a, TowerHeroAtkInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TowerHeroAtkInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TowerHeroAtkInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TowerHeroAtkInfo* New() const final {
    return CreateMaybeMessage<TowerHeroAtkInfo>(nullptr);
  }

  TowerHeroAtkInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TowerHeroAtkInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TowerHeroAtkInfo& from);
  void MergeFrom(const TowerHeroAtkInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TowerHeroAtkInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.TowerHeroAtkInfo";
  }
  protected:
  explicit TowerHeroAtkInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeroPositionIdFieldNumber = 1,
    kIsAtkFieldNumber = 2,
  };
  // int32 HeroPositionId = 1;
  void clear_heropositionid();
  ::PROTOBUF_NAMESPACE_ID::int32 heropositionid() const;
  void set_heropositionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_heropositionid() const;
  void _internal_set_heropositionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool IsAtk = 2;
  void clear_isatk();
  bool isatk() const;
  void set_isatk(bool value);
  private:
  bool _internal_isatk() const;
  void _internal_set_isatk(bool value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.TowerHeroAtkInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 heropositionid_;
  bool isatk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class TablePlayerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.TablePlayerInfo) */ {
 public:
  inline TablePlayerInfo() : TablePlayerInfo(nullptr) {}
  virtual ~TablePlayerInfo();

  TablePlayerInfo(const TablePlayerInfo& from);
  TablePlayerInfo(TablePlayerInfo&& from) noexcept
    : TablePlayerInfo() {
    *this = ::std::move(from);
  }

  inline TablePlayerInfo& operator=(const TablePlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TablePlayerInfo& operator=(TablePlayerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TablePlayerInfo& default_instance();

  static inline const TablePlayerInfo* internal_default_instance() {
    return reinterpret_cast<const TablePlayerInfo*>(
               &_TablePlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(TablePlayerInfo& a, TablePlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TablePlayerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TablePlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TablePlayerInfo* New() const final {
    return CreateMaybeMessage<TablePlayerInfo>(nullptr);
  }

  TablePlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TablePlayerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TablePlayerInfo& from);
  void MergeFrom(const TablePlayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TablePlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.TablePlayerInfo";
  }
  protected:
  explicit TablePlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 5,
    kHeadFieldNumber = 6,
    kInfoFieldNumber = 7,
    kChairIdFieldNumber = 1,
    kPlayerIdFieldNumber = 2,
    kMoneyFieldNumber = 3,
    kSexFieldNumber = 4,
    kMoneyVariationFieldNumber = 8,
    kVipLevelFieldNumber = 9,
    kIsVipFieldNumber = 10,
    kBackgroundFieldNumber = 11,
    kEffectFieldNumber = 12,
  };
  // string Name = 5;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Head = 6;
  void clear_head();
  const std::string& head() const;
  void set_head(const std::string& value);
  void set_head(std::string&& value);
  void set_head(const char* value);
  void set_head(const char* value, size_t size);
  std::string* mutable_head();
  std::string* release_head();
  void set_allocated_head(std::string* head);
  private:
  const std::string& _internal_head() const;
  void _internal_set_head(const std::string& value);
  std::string* _internal_mutable_head();
  public:

  // .JSBY.TowerHeroInfo Info = 7;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::JSBY::TowerHeroInfo& info() const;
  ::JSBY::TowerHeroInfo* release_info();
  ::JSBY::TowerHeroInfo* mutable_info();
  void set_allocated_info(::JSBY::TowerHeroInfo* info);
  private:
  const ::JSBY::TowerHeroInfo& _internal_info() const;
  ::JSBY::TowerHeroInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::JSBY::TowerHeroInfo* info);
  ::JSBY::TowerHeroInfo* unsafe_arena_release_info();

  // int32 ChairId = 1;
  void clear_chairid();
  ::PROTOBUF_NAMESPACE_ID::int32 chairid() const;
  void set_chairid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chairid() const;
  void _internal_set_chairid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 PlayerId = 2;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Money = 3;
  void clear_money();
  ::PROTOBUF_NAMESPACE_ID::int32 money() const;
  void set_money(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_money() const;
  void _internal_set_money(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Sex = 4;
  void clear_sex();
  ::PROTOBUF_NAMESPACE_ID::int32 sex() const;
  void set_sex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sex() const;
  void _internal_set_sex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 MoneyVariation = 8;
  void clear_moneyvariation();
  ::PROTOBUF_NAMESPACE_ID::int32 moneyvariation() const;
  void set_moneyvariation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_moneyvariation() const;
  void _internal_set_moneyvariation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 VipLevel = 9;
  void clear_viplevel();
  ::PROTOBUF_NAMESPACE_ID::int32 viplevel() const;
  void set_viplevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_viplevel() const;
  void _internal_set_viplevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool IsVip = 10;
  void clear_isvip();
  bool isvip() const;
  void set_isvip(bool value);
  private:
  bool _internal_isvip() const;
  void _internal_set_isvip(bool value);
  public:

  // int32 Background = 11;
  void clear_background();
  ::PROTOBUF_NAMESPACE_ID::int32 background() const;
  void set_background(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_background() const;
  void _internal_set_background(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Effect = 12;
  void clear_effect();
  ::PROTOBUF_NAMESPACE_ID::int32 effect() const;
  void set_effect(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_effect() const;
  void _internal_set_effect(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.TablePlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr head_;
  ::JSBY::TowerHeroInfo* info_;
  ::PROTOBUF_NAMESPACE_ID::int32 chairid_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 money_;
  ::PROTOBUF_NAMESPACE_ID::int32 sex_;
  ::PROTOBUF_NAMESPACE_ID::int32 moneyvariation_;
  ::PROTOBUF_NAMESPACE_ID::int32 viplevel_;
  bool isvip_;
  ::PROTOBUF_NAMESPACE_ID::int32 background_;
  ::PROTOBUF_NAMESPACE_ID::int32 effect_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCNotifyTowerTablePlayer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCNotifyTowerTablePlayer) */ {
 public:
  inline SCNotifyTowerTablePlayer() : SCNotifyTowerTablePlayer(nullptr) {}
  virtual ~SCNotifyTowerTablePlayer();

  SCNotifyTowerTablePlayer(const SCNotifyTowerTablePlayer& from);
  SCNotifyTowerTablePlayer(SCNotifyTowerTablePlayer&& from) noexcept
    : SCNotifyTowerTablePlayer() {
    *this = ::std::move(from);
  }

  inline SCNotifyTowerTablePlayer& operator=(const SCNotifyTowerTablePlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCNotifyTowerTablePlayer& operator=(SCNotifyTowerTablePlayer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCNotifyTowerTablePlayer& default_instance();

  static inline const SCNotifyTowerTablePlayer* internal_default_instance() {
    return reinterpret_cast<const SCNotifyTowerTablePlayer*>(
               &_SCNotifyTowerTablePlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(SCNotifyTowerTablePlayer& a, SCNotifyTowerTablePlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(SCNotifyTowerTablePlayer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCNotifyTowerTablePlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCNotifyTowerTablePlayer* New() const final {
    return CreateMaybeMessage<SCNotifyTowerTablePlayer>(nullptr);
  }

  SCNotifyTowerTablePlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCNotifyTowerTablePlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCNotifyTowerTablePlayer& from);
  void MergeFrom(const SCNotifyTowerTablePlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCNotifyTowerTablePlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCNotifyTowerTablePlayer";
  }
  protected:
  explicit SCNotifyTowerTablePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kTableIDFieldNumber = 2,
  };
  // .JSBY.TablePlayerInfo Info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::JSBY::TablePlayerInfo& info() const;
  ::JSBY::TablePlayerInfo* release_info();
  ::JSBY::TablePlayerInfo* mutable_info();
  void set_allocated_info(::JSBY::TablePlayerInfo* info);
  private:
  const ::JSBY::TablePlayerInfo& _internal_info() const;
  ::JSBY::TablePlayerInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::JSBY::TablePlayerInfo* info);
  ::JSBY::TablePlayerInfo* unsafe_arena_release_info();

  // int32 TableID = 2;
  void clear_tableid();
  ::PROTOBUF_NAMESPACE_ID::int32 tableid() const;
  void set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tableid() const;
  void _internal_set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCNotifyTowerTablePlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::JSBY::TablePlayerInfo* info_;
  ::PROTOBUF_NAMESPACE_ID::int32 tableid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCLeaveTowerTable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCLeaveTowerTable) */ {
 public:
  inline SCLeaveTowerTable() : SCLeaveTowerTable(nullptr) {}
  virtual ~SCLeaveTowerTable();

  SCLeaveTowerTable(const SCLeaveTowerTable& from);
  SCLeaveTowerTable(SCLeaveTowerTable&& from) noexcept
    : SCLeaveTowerTable() {
    *this = ::std::move(from);
  }

  inline SCLeaveTowerTable& operator=(const SCLeaveTowerTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCLeaveTowerTable& operator=(SCLeaveTowerTable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCLeaveTowerTable& default_instance();

  static inline const SCLeaveTowerTable* internal_default_instance() {
    return reinterpret_cast<const SCLeaveTowerTable*>(
               &_SCLeaveTowerTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(SCLeaveTowerTable& a, SCLeaveTowerTable& b) {
    a.Swap(&b);
  }
  inline void Swap(SCLeaveTowerTable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCLeaveTowerTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCLeaveTowerTable* New() const final {
    return CreateMaybeMessage<SCLeaveTowerTable>(nullptr);
  }

  SCLeaveTowerTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCLeaveTowerTable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCLeaveTowerTable& from);
  void MergeFrom(const SCLeaveTowerTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCLeaveTowerTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCLeaveTowerTable";
  }
  protected:
  explicit SCLeaveTowerTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kIsAgainEnterFieldNumber = 2,
  };
  // int32 PlayerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool IsAgainEnter = 2;
  void clear_isagainenter();
  bool isagainenter() const;
  void set_isagainenter(bool value);
  private:
  bool _internal_isagainenter() const;
  void _internal_set_isagainenter(bool value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCLeaveTowerTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  bool isagainenter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class TowerMonster PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.TowerMonster) */ {
 public:
  inline TowerMonster() : TowerMonster(nullptr) {}
  virtual ~TowerMonster();

  TowerMonster(const TowerMonster& from);
  TowerMonster(TowerMonster&& from) noexcept
    : TowerMonster() {
    *this = ::std::move(from);
  }

  inline TowerMonster& operator=(const TowerMonster& from) {
    CopyFrom(from);
    return *this;
  }
  inline TowerMonster& operator=(TowerMonster&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TowerMonster& default_instance();

  static inline const TowerMonster* internal_default_instance() {
    return reinterpret_cast<const TowerMonster*>(
               &_TowerMonster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(TowerMonster& a, TowerMonster& b) {
    a.Swap(&b);
  }
  inline void Swap(TowerMonster* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TowerMonster* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TowerMonster* New() const final {
    return CreateMaybeMessage<TowerMonster>(nullptr);
  }

  TowerMonster* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TowerMonster>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TowerMonster& from);
  void MergeFrom(const TowerMonster& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TowerMonster* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.TowerMonster";
  }
  protected:
  explicit TowerMonster(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuffFieldNumber = 5,
    kPositionFieldNumber = 1,
    kProcessTimeFieldNumber = 2,
    kReadyTimeFieldNumber = 3,
    kMonsterIDFieldNumber = 4,
    kIsConnectFieldNumber = 6,
    kLevelFieldNumber = 7,
  };
  // repeated int32 Buff = 5;
  int buff_size() const;
  private:
  int _internal_buff_size() const;
  public:
  void clear_buff();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_buff(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_buff() const;
  void _internal_add_buff(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_buff();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 buff(int index) const;
  void set_buff(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_buff(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      buff() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_buff();

  // int32 Position = 1;
  void clear_position();
  ::PROTOBUF_NAMESPACE_ID::int32 position() const;
  void set_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_position() const;
  void _internal_set_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ProcessTime = 2;
  void clear_processtime();
  ::PROTOBUF_NAMESPACE_ID::int32 processtime() const;
  void set_processtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_processtime() const;
  void _internal_set_processtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ReadyTime = 3;
  void clear_readytime();
  ::PROTOBUF_NAMESPACE_ID::int32 readytime() const;
  void set_readytime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_readytime() const;
  void _internal_set_readytime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 MonsterID = 4;
  void clear_monsterid();
  ::PROTOBUF_NAMESPACE_ID::int32 monsterid() const;
  void set_monsterid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_monsterid() const;
  void _internal_set_monsterid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool IsConnect = 6;
  void clear_isconnect();
  bool isconnect() const;
  void set_isconnect(bool value);
  private:
  bool _internal_isconnect() const;
  void _internal_set_isconnect(bool value);
  public:

  // int32 Level = 7;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.TowerMonster)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > buff_;
  mutable std::atomic<int> _buff_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 position_;
  ::PROTOBUF_NAMESPACE_ID::int32 processtime_;
  ::PROTOBUF_NAMESPACE_ID::int32 readytime_;
  ::PROTOBUF_NAMESPACE_ID::int32 monsterid_;
  bool isconnect_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class ChannelTowerMonster PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.ChannelTowerMonster) */ {
 public:
  inline ChannelTowerMonster() : ChannelTowerMonster(nullptr) {}
  virtual ~ChannelTowerMonster();

  ChannelTowerMonster(const ChannelTowerMonster& from);
  ChannelTowerMonster(ChannelTowerMonster&& from) noexcept
    : ChannelTowerMonster() {
    *this = ::std::move(from);
  }

  inline ChannelTowerMonster& operator=(const ChannelTowerMonster& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelTowerMonster& operator=(ChannelTowerMonster&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelTowerMonster& default_instance();

  static inline const ChannelTowerMonster* internal_default_instance() {
    return reinterpret_cast<const ChannelTowerMonster*>(
               &_ChannelTowerMonster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(ChannelTowerMonster& a, ChannelTowerMonster& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelTowerMonster* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelTowerMonster* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelTowerMonster* New() const final {
    return CreateMaybeMessage<ChannelTowerMonster>(nullptr);
  }

  ChannelTowerMonster* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelTowerMonster>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelTowerMonster& from);
  void MergeFrom(const ChannelTowerMonster& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelTowerMonster* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.ChannelTowerMonster";
  }
  protected:
  explicit ChannelTowerMonster(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelInfoFieldNumber = 2,
    kChannelIdFieldNumber = 1,
  };
  // .JSBY.TowerMonster ChannelInfo = 2;
  bool has_channelinfo() const;
  private:
  bool _internal_has_channelinfo() const;
  public:
  void clear_channelinfo();
  const ::JSBY::TowerMonster& channelinfo() const;
  ::JSBY::TowerMonster* release_channelinfo();
  ::JSBY::TowerMonster* mutable_channelinfo();
  void set_allocated_channelinfo(::JSBY::TowerMonster* channelinfo);
  private:
  const ::JSBY::TowerMonster& _internal_channelinfo() const;
  ::JSBY::TowerMonster* _internal_mutable_channelinfo();
  public:
  void unsafe_arena_set_allocated_channelinfo(
      ::JSBY::TowerMonster* channelinfo);
  ::JSBY::TowerMonster* unsafe_arena_release_channelinfo();

  // int32 ChannelId = 1;
  void clear_channelid();
  ::PROTOBUF_NAMESPACE_ID::int32 channelid() const;
  void set_channelid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channelid() const;
  void _internal_set_channelid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.ChannelTowerMonster)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::JSBY::TowerMonster* channelinfo_;
  ::PROTOBUF_NAMESPACE_ID::int32 channelid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCGetTowerMonster PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCGetTowerMonster) */ {
 public:
  inline SCGetTowerMonster() : SCGetTowerMonster(nullptr) {}
  virtual ~SCGetTowerMonster();

  SCGetTowerMonster(const SCGetTowerMonster& from);
  SCGetTowerMonster(SCGetTowerMonster&& from) noexcept
    : SCGetTowerMonster() {
    *this = ::std::move(from);
  }

  inline SCGetTowerMonster& operator=(const SCGetTowerMonster& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGetTowerMonster& operator=(SCGetTowerMonster&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGetTowerMonster& default_instance();

  static inline const SCGetTowerMonster* internal_default_instance() {
    return reinterpret_cast<const SCGetTowerMonster*>(
               &_SCGetTowerMonster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(SCGetTowerMonster& a, SCGetTowerMonster& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGetTowerMonster* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGetTowerMonster* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGetTowerMonster* New() const final {
    return CreateMaybeMessage<SCGetTowerMonster>(nullptr);
  }

  SCGetTowerMonster* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGetTowerMonster>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGetTowerMonster& from);
  void MergeFrom(const SCGetTowerMonster& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGetTowerMonster* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCGetTowerMonster";
  }
  protected:
  explicit SCGetTowerMonster(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReqPlayerIdFieldNumber = 1,
  };
  // int32 ReqPlayerId = 1;
  void clear_reqplayerid();
  ::PROTOBUF_NAMESPACE_ID::int32 reqplayerid() const;
  void set_reqplayerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reqplayerid() const;
  void _internal_set_reqplayerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCGetTowerMonster)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 reqplayerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class CSGetTowerMonster PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.CSGetTowerMonster) */ {
 public:
  inline CSGetTowerMonster() : CSGetTowerMonster(nullptr) {}
  virtual ~CSGetTowerMonster();

  CSGetTowerMonster(const CSGetTowerMonster& from);
  CSGetTowerMonster(CSGetTowerMonster&& from) noexcept
    : CSGetTowerMonster() {
    *this = ::std::move(from);
  }

  inline CSGetTowerMonster& operator=(const CSGetTowerMonster& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSGetTowerMonster& operator=(CSGetTowerMonster&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSGetTowerMonster& default_instance();

  static inline const CSGetTowerMonster* internal_default_instance() {
    return reinterpret_cast<const CSGetTowerMonster*>(
               &_CSGetTowerMonster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(CSGetTowerMonster& a, CSGetTowerMonster& b) {
    a.Swap(&b);
  }
  inline void Swap(CSGetTowerMonster* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSGetTowerMonster* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSGetTowerMonster* New() const final {
    return CreateMaybeMessage<CSGetTowerMonster>(nullptr);
  }

  CSGetTowerMonster* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSGetTowerMonster>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSGetTowerMonster& from);
  void MergeFrom(const CSGetTowerMonster& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSGetTowerMonster* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.CSGetTowerMonster";
  }
  protected:
  explicit CSGetTowerMonster(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 2,
    kReqPlayerIdFieldNumber = 1,
  };
  // .JSBY.ChannelTowerMonster Info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::JSBY::ChannelTowerMonster& info() const;
  ::JSBY::ChannelTowerMonster* release_info();
  ::JSBY::ChannelTowerMonster* mutable_info();
  void set_allocated_info(::JSBY::ChannelTowerMonster* info);
  private:
  const ::JSBY::ChannelTowerMonster& _internal_info() const;
  ::JSBY::ChannelTowerMonster* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::JSBY::ChannelTowerMonster* info);
  ::JSBY::ChannelTowerMonster* unsafe_arena_release_info();

  // int32 ReqPlayerId = 1;
  void clear_reqplayerid();
  ::PROTOBUF_NAMESPACE_ID::int32 reqplayerid() const;
  void set_reqplayerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reqplayerid() const;
  void _internal_set_reqplayerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.CSGetTowerMonster)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::JSBY::ChannelTowerMonster* info_;
  ::PROTOBUF_NAMESPACE_ID::int32 reqplayerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCSyncGetTowerMonster PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCSyncGetTowerMonster) */ {
 public:
  inline SCSyncGetTowerMonster() : SCSyncGetTowerMonster(nullptr) {}
  virtual ~SCSyncGetTowerMonster();

  SCSyncGetTowerMonster(const SCSyncGetTowerMonster& from);
  SCSyncGetTowerMonster(SCSyncGetTowerMonster&& from) noexcept
    : SCSyncGetTowerMonster() {
    *this = ::std::move(from);
  }

  inline SCSyncGetTowerMonster& operator=(const SCSyncGetTowerMonster& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSyncGetTowerMonster& operator=(SCSyncGetTowerMonster&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSyncGetTowerMonster& default_instance();

  static inline const SCSyncGetTowerMonster* internal_default_instance() {
    return reinterpret_cast<const SCSyncGetTowerMonster*>(
               &_SCSyncGetTowerMonster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(SCSyncGetTowerMonster& a, SCSyncGetTowerMonster& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSyncGetTowerMonster* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSyncGetTowerMonster* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSyncGetTowerMonster* New() const final {
    return CreateMaybeMessage<SCSyncGetTowerMonster>(nullptr);
  }

  SCSyncGetTowerMonster* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSyncGetTowerMonster>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSyncGetTowerMonster& from);
  void MergeFrom(const SCSyncGetTowerMonster& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSyncGetTowerMonster* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCSyncGetTowerMonster";
  }
  protected:
  explicit SCSyncGetTowerMonster(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 2,
    kTableIDFieldNumber = 1,
  };
  // .JSBY.ChannelTowerMonster Info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::JSBY::ChannelTowerMonster& info() const;
  ::JSBY::ChannelTowerMonster* release_info();
  ::JSBY::ChannelTowerMonster* mutable_info();
  void set_allocated_info(::JSBY::ChannelTowerMonster* info);
  private:
  const ::JSBY::ChannelTowerMonster& _internal_info() const;
  ::JSBY::ChannelTowerMonster* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::JSBY::ChannelTowerMonster* info);
  ::JSBY::ChannelTowerMonster* unsafe_arena_release_info();

  // int32 TableID = 1;
  void clear_tableid();
  ::PROTOBUF_NAMESPACE_ID::int32 tableid() const;
  void set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tableid() const;
  void _internal_set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCSyncGetTowerMonster)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::JSBY::ChannelTowerMonster* info_;
  ::PROTOBUF_NAMESPACE_ID::int32 tableid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCTowerMonster PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCTowerMonster) */ {
 public:
  inline SCTowerMonster() : SCTowerMonster(nullptr) {}
  virtual ~SCTowerMonster();

  SCTowerMonster(const SCTowerMonster& from);
  SCTowerMonster(SCTowerMonster&& from) noexcept
    : SCTowerMonster() {
    *this = ::std::move(from);
  }

  inline SCTowerMonster& operator=(const SCTowerMonster& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCTowerMonster& operator=(SCTowerMonster&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCTowerMonster& default_instance();

  static inline const SCTowerMonster* internal_default_instance() {
    return reinterpret_cast<const SCTowerMonster*>(
               &_SCTowerMonster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(SCTowerMonster& a, SCTowerMonster& b) {
    a.Swap(&b);
  }
  inline void Swap(SCTowerMonster* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCTowerMonster* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCTowerMonster* New() const final {
    return CreateMaybeMessage<SCTowerMonster>(nullptr);
  }

  SCTowerMonster* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCTowerMonster>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCTowerMonster& from);
  void MergeFrom(const SCTowerMonster& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCTowerMonster* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCTowerMonster";
  }
  protected:
  explicit SCTowerMonster(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 2,
    kTableIDFieldNumber = 1,
  };
  // .JSBY.ChannelTowerMonster Info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::JSBY::ChannelTowerMonster& info() const;
  ::JSBY::ChannelTowerMonster* release_info();
  ::JSBY::ChannelTowerMonster* mutable_info();
  void set_allocated_info(::JSBY::ChannelTowerMonster* info);
  private:
  const ::JSBY::ChannelTowerMonster& _internal_info() const;
  ::JSBY::ChannelTowerMonster* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::JSBY::ChannelTowerMonster* info);
  ::JSBY::ChannelTowerMonster* unsafe_arena_release_info();

  // int32 TableID = 1;
  void clear_tableid();
  ::PROTOBUF_NAMESPACE_ID::int32 tableid() const;
  void set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tableid() const;
  void _internal_set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCTowerMonster)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::JSBY::ChannelTowerMonster* info_;
  ::PROTOBUF_NAMESPACE_ID::int32 tableid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class CSTowerHeroAtkInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.CSTowerHeroAtkInfo) */ {
 public:
  inline CSTowerHeroAtkInfo() : CSTowerHeroAtkInfo(nullptr) {}
  virtual ~CSTowerHeroAtkInfo();

  CSTowerHeroAtkInfo(const CSTowerHeroAtkInfo& from);
  CSTowerHeroAtkInfo(CSTowerHeroAtkInfo&& from) noexcept
    : CSTowerHeroAtkInfo() {
    *this = ::std::move(from);
  }

  inline CSTowerHeroAtkInfo& operator=(const CSTowerHeroAtkInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSTowerHeroAtkInfo& operator=(CSTowerHeroAtkInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSTowerHeroAtkInfo& default_instance();

  static inline const CSTowerHeroAtkInfo* internal_default_instance() {
    return reinterpret_cast<const CSTowerHeroAtkInfo*>(
               &_CSTowerHeroAtkInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(CSTowerHeroAtkInfo& a, CSTowerHeroAtkInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSTowerHeroAtkInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSTowerHeroAtkInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSTowerHeroAtkInfo* New() const final {
    return CreateMaybeMessage<CSTowerHeroAtkInfo>(nullptr);
  }

  CSTowerHeroAtkInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSTowerHeroAtkInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSTowerHeroAtkInfo& from);
  void MergeFrom(const CSTowerHeroAtkInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSTowerHeroAtkInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.CSTowerHeroAtkInfo";
  }
  protected:
  explicit CSTowerHeroAtkInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // repeated .JSBY.TowerHeroAtkInfo Info = 1;
  int info_size() const;
  private:
  int _internal_info_size() const;
  public:
  void clear_info();
  ::JSBY::TowerHeroAtkInfo* mutable_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSBY::TowerHeroAtkInfo >*
      mutable_info();
  private:
  const ::JSBY::TowerHeroAtkInfo& _internal_info(int index) const;
  ::JSBY::TowerHeroAtkInfo* _internal_add_info();
  public:
  const ::JSBY::TowerHeroAtkInfo& info(int index) const;
  ::JSBY::TowerHeroAtkInfo* add_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSBY::TowerHeroAtkInfo >&
      info() const;

  // @@protoc_insertion_point(class_scope:JSBY.CSTowerHeroAtkInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSBY::TowerHeroAtkInfo > info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCTowerHeroAtkInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCTowerHeroAtkInfo) */ {
 public:
  inline SCTowerHeroAtkInfo() : SCTowerHeroAtkInfo(nullptr) {}
  virtual ~SCTowerHeroAtkInfo();

  SCTowerHeroAtkInfo(const SCTowerHeroAtkInfo& from);
  SCTowerHeroAtkInfo(SCTowerHeroAtkInfo&& from) noexcept
    : SCTowerHeroAtkInfo() {
    *this = ::std::move(from);
  }

  inline SCTowerHeroAtkInfo& operator=(const SCTowerHeroAtkInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCTowerHeroAtkInfo& operator=(SCTowerHeroAtkInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCTowerHeroAtkInfo& default_instance();

  static inline const SCTowerHeroAtkInfo* internal_default_instance() {
    return reinterpret_cast<const SCTowerHeroAtkInfo*>(
               &_SCTowerHeroAtkInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(SCTowerHeroAtkInfo& a, SCTowerHeroAtkInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCTowerHeroAtkInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCTowerHeroAtkInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCTowerHeroAtkInfo* New() const final {
    return CreateMaybeMessage<SCTowerHeroAtkInfo>(nullptr);
  }

  SCTowerHeroAtkInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCTowerHeroAtkInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCTowerHeroAtkInfo& from);
  void MergeFrom(const SCTowerHeroAtkInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCTowerHeroAtkInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCTowerHeroAtkInfo";
  }
  protected:
  explicit SCTowerHeroAtkInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .JSBY.TowerHeroAtkInfo Info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::JSBY::TowerHeroAtkInfo& info() const;
  ::JSBY::TowerHeroAtkInfo* release_info();
  ::JSBY::TowerHeroAtkInfo* mutable_info();
  void set_allocated_info(::JSBY::TowerHeroAtkInfo* info);
  private:
  const ::JSBY::TowerHeroAtkInfo& _internal_info() const;
  ::JSBY::TowerHeroAtkInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::JSBY::TowerHeroAtkInfo* info);
  ::JSBY::TowerHeroAtkInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:JSBY.SCTowerHeroAtkInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::JSBY::TowerHeroAtkInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class CSTowerUpdateHero PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.CSTowerUpdateHero) */ {
 public:
  inline CSTowerUpdateHero() : CSTowerUpdateHero(nullptr) {}
  virtual ~CSTowerUpdateHero();

  CSTowerUpdateHero(const CSTowerUpdateHero& from);
  CSTowerUpdateHero(CSTowerUpdateHero&& from) noexcept
    : CSTowerUpdateHero() {
    *this = ::std::move(from);
  }

  inline CSTowerUpdateHero& operator=(const CSTowerUpdateHero& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSTowerUpdateHero& operator=(CSTowerUpdateHero&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSTowerUpdateHero& default_instance();

  static inline const CSTowerUpdateHero* internal_default_instance() {
    return reinterpret_cast<const CSTowerUpdateHero*>(
               &_CSTowerUpdateHero_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(CSTowerUpdateHero& a, CSTowerUpdateHero& b) {
    a.Swap(&b);
  }
  inline void Swap(CSTowerUpdateHero* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSTowerUpdateHero* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSTowerUpdateHero* New() const final {
    return CreateMaybeMessage<CSTowerUpdateHero>(nullptr);
  }

  CSTowerUpdateHero* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSTowerUpdateHero>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSTowerUpdateHero& from);
  void MergeFrom(const CSTowerUpdateHero& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSTowerUpdateHero* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.CSTowerUpdateHero";
  }
  protected:
  explicit CSTowerUpdateHero(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kLeaveFieldNumber = 2,
  };
  // .JSBY.TowerHeroInfo Info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::JSBY::TowerHeroInfo& info() const;
  ::JSBY::TowerHeroInfo* release_info();
  ::JSBY::TowerHeroInfo* mutable_info();
  void set_allocated_info(::JSBY::TowerHeroInfo* info);
  private:
  const ::JSBY::TowerHeroInfo& _internal_info() const;
  ::JSBY::TowerHeroInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::JSBY::TowerHeroInfo* info);
  ::JSBY::TowerHeroInfo* unsafe_arena_release_info();

  // bool Leave = 2;
  void clear_leave();
  bool leave() const;
  void set_leave(bool value);
  private:
  bool _internal_leave() const;
  void _internal_set_leave(bool value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.CSTowerUpdateHero)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::JSBY::TowerHeroInfo* info_;
  bool leave_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCTowerUpdateHero PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCTowerUpdateHero) */ {
 public:
  inline SCTowerUpdateHero() : SCTowerUpdateHero(nullptr) {}
  virtual ~SCTowerUpdateHero();

  SCTowerUpdateHero(const SCTowerUpdateHero& from);
  SCTowerUpdateHero(SCTowerUpdateHero&& from) noexcept
    : SCTowerUpdateHero() {
    *this = ::std::move(from);
  }

  inline SCTowerUpdateHero& operator=(const SCTowerUpdateHero& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCTowerUpdateHero& operator=(SCTowerUpdateHero&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCTowerUpdateHero& default_instance();

  static inline const SCTowerUpdateHero* internal_default_instance() {
    return reinterpret_cast<const SCTowerUpdateHero*>(
               &_SCTowerUpdateHero_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(SCTowerUpdateHero& a, SCTowerUpdateHero& b) {
    a.Swap(&b);
  }
  inline void Swap(SCTowerUpdateHero* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCTowerUpdateHero* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCTowerUpdateHero* New() const final {
    return CreateMaybeMessage<SCTowerUpdateHero>(nullptr);
  }

  SCTowerUpdateHero* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCTowerUpdateHero>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCTowerUpdateHero& from);
  void MergeFrom(const SCTowerUpdateHero& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCTowerUpdateHero* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCTowerUpdateHero";
  }
  protected:
  explicit SCTowerUpdateHero(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUniqueIdFieldNumber = 1,
  };
  // int32 UniqueId = 1;
  void clear_uniqueid();
  ::PROTOBUF_NAMESPACE_ID::int32 uniqueid() const;
  void set_uniqueid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uniqueid() const;
  void _internal_set_uniqueid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCTowerUpdateHero)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 uniqueid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCPushTowerUpdateHero PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCPushTowerUpdateHero) */ {
 public:
  inline SCPushTowerUpdateHero() : SCPushTowerUpdateHero(nullptr) {}
  virtual ~SCPushTowerUpdateHero();

  SCPushTowerUpdateHero(const SCPushTowerUpdateHero& from);
  SCPushTowerUpdateHero(SCPushTowerUpdateHero&& from) noexcept
    : SCPushTowerUpdateHero() {
    *this = ::std::move(from);
  }

  inline SCPushTowerUpdateHero& operator=(const SCPushTowerUpdateHero& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPushTowerUpdateHero& operator=(SCPushTowerUpdateHero&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPushTowerUpdateHero& default_instance();

  static inline const SCPushTowerUpdateHero* internal_default_instance() {
    return reinterpret_cast<const SCPushTowerUpdateHero*>(
               &_SCPushTowerUpdateHero_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(SCPushTowerUpdateHero& a, SCPushTowerUpdateHero& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPushTowerUpdateHero* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPushTowerUpdateHero* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPushTowerUpdateHero* New() const final {
    return CreateMaybeMessage<SCPushTowerUpdateHero>(nullptr);
  }

  SCPushTowerUpdateHero* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPushTowerUpdateHero>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPushTowerUpdateHero& from);
  void MergeFrom(const SCPushTowerUpdateHero& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPushTowerUpdateHero* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCPushTowerUpdateHero";
  }
  protected:
  explicit SCPushTowerUpdateHero(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kReqPlayerIdFieldNumber = 2,
    kLeaveFieldNumber = 3,
  };
  // .JSBY.TowerHeroInfo Info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::JSBY::TowerHeroInfo& info() const;
  ::JSBY::TowerHeroInfo* release_info();
  ::JSBY::TowerHeroInfo* mutable_info();
  void set_allocated_info(::JSBY::TowerHeroInfo* info);
  private:
  const ::JSBY::TowerHeroInfo& _internal_info() const;
  ::JSBY::TowerHeroInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::JSBY::TowerHeroInfo* info);
  ::JSBY::TowerHeroInfo* unsafe_arena_release_info();

  // int32 ReqPlayerId = 2;
  void clear_reqplayerid();
  ::PROTOBUF_NAMESPACE_ID::int32 reqplayerid() const;
  void set_reqplayerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reqplayerid() const;
  void _internal_set_reqplayerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool Leave = 3;
  void clear_leave();
  bool leave() const;
  void set_leave(bool value);
  private:
  bool _internal_leave() const;
  void _internal_set_leave(bool value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCPushTowerUpdateHero)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::JSBY::TowerHeroInfo* info_;
  ::PROTOBUF_NAMESPACE_ID::int32 reqplayerid_;
  bool leave_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class LockTargetInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.LockTargetInfo) */ {
 public:
  inline LockTargetInfo() : LockTargetInfo(nullptr) {}
  virtual ~LockTargetInfo();

  LockTargetInfo(const LockTargetInfo& from);
  LockTargetInfo(LockTargetInfo&& from) noexcept
    : LockTargetInfo() {
    *this = ::std::move(from);
  }

  inline LockTargetInfo& operator=(const LockTargetInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LockTargetInfo& operator=(LockTargetInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LockTargetInfo& default_instance();

  static inline const LockTargetInfo* internal_default_instance() {
    return reinterpret_cast<const LockTargetInfo*>(
               &_LockTargetInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(LockTargetInfo& a, LockTargetInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LockTargetInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LockTargetInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LockTargetInfo* New() const final {
    return CreateMaybeMessage<LockTargetInfo>(nullptr);
  }

  LockTargetInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LockTargetInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LockTargetInfo& from);
  void MergeFrom(const LockTargetInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LockTargetInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.LockTargetInfo";
  }
  protected:
  explicit LockTargetInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionIdFieldNumber = 1,
    kTargetPositionIdFieldNumber = 2,
  };
  // int32 PositionId = 1;
  void clear_positionid();
  ::PROTOBUF_NAMESPACE_ID::int32 positionid() const;
  void set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_positionid() const;
  void _internal_set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 TargetPositionId = 2;
  void clear_targetpositionid();
  ::PROTOBUF_NAMESPACE_ID::int32 targetpositionid() const;
  void set_targetpositionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_targetpositionid() const;
  void _internal_set_targetpositionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.LockTargetInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 positionid_;
  ::PROTOBUF_NAMESPACE_ID::int32 targetpositionid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class CSTowerPlayerLockTarget PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.CSTowerPlayerLockTarget) */ {
 public:
  inline CSTowerPlayerLockTarget() : CSTowerPlayerLockTarget(nullptr) {}
  virtual ~CSTowerPlayerLockTarget();

  CSTowerPlayerLockTarget(const CSTowerPlayerLockTarget& from);
  CSTowerPlayerLockTarget(CSTowerPlayerLockTarget&& from) noexcept
    : CSTowerPlayerLockTarget() {
    *this = ::std::move(from);
  }

  inline CSTowerPlayerLockTarget& operator=(const CSTowerPlayerLockTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSTowerPlayerLockTarget& operator=(CSTowerPlayerLockTarget&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSTowerPlayerLockTarget& default_instance();

  static inline const CSTowerPlayerLockTarget* internal_default_instance() {
    return reinterpret_cast<const CSTowerPlayerLockTarget*>(
               &_CSTowerPlayerLockTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CSTowerPlayerLockTarget& a, CSTowerPlayerLockTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(CSTowerPlayerLockTarget* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSTowerPlayerLockTarget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSTowerPlayerLockTarget* New() const final {
    return CreateMaybeMessage<CSTowerPlayerLockTarget>(nullptr);
  }

  CSTowerPlayerLockTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSTowerPlayerLockTarget>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSTowerPlayerLockTarget& from);
  void MergeFrom(const CSTowerPlayerLockTarget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSTowerPlayerLockTarget* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.CSTowerPlayerLockTarget";
  }
  protected:
  explicit CSTowerPlayerLockTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLockInfoFieldNumber = 1,
  };
  // repeated .JSBY.LockTargetInfo LockInfo = 1;
  int lockinfo_size() const;
  private:
  int _internal_lockinfo_size() const;
  public:
  void clear_lockinfo();
  ::JSBY::LockTargetInfo* mutable_lockinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSBY::LockTargetInfo >*
      mutable_lockinfo();
  private:
  const ::JSBY::LockTargetInfo& _internal_lockinfo(int index) const;
  ::JSBY::LockTargetInfo* _internal_add_lockinfo();
  public:
  const ::JSBY::LockTargetInfo& lockinfo(int index) const;
  ::JSBY::LockTargetInfo* add_lockinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSBY::LockTargetInfo >&
      lockinfo() const;

  // @@protoc_insertion_point(class_scope:JSBY.CSTowerPlayerLockTarget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSBY::LockTargetInfo > lockinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCTowerPlayerLockTarget PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCTowerPlayerLockTarget) */ {
 public:
  inline SCTowerPlayerLockTarget() : SCTowerPlayerLockTarget(nullptr) {}
  virtual ~SCTowerPlayerLockTarget();

  SCTowerPlayerLockTarget(const SCTowerPlayerLockTarget& from);
  SCTowerPlayerLockTarget(SCTowerPlayerLockTarget&& from) noexcept
    : SCTowerPlayerLockTarget() {
    *this = ::std::move(from);
  }

  inline SCTowerPlayerLockTarget& operator=(const SCTowerPlayerLockTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCTowerPlayerLockTarget& operator=(SCTowerPlayerLockTarget&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCTowerPlayerLockTarget& default_instance();

  static inline const SCTowerPlayerLockTarget* internal_default_instance() {
    return reinterpret_cast<const SCTowerPlayerLockTarget*>(
               &_SCTowerPlayerLockTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(SCTowerPlayerLockTarget& a, SCTowerPlayerLockTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(SCTowerPlayerLockTarget* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCTowerPlayerLockTarget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCTowerPlayerLockTarget* New() const final {
    return CreateMaybeMessage<SCTowerPlayerLockTarget>(nullptr);
  }

  SCTowerPlayerLockTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCTowerPlayerLockTarget>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCTowerPlayerLockTarget& from);
  void MergeFrom(const SCTowerPlayerLockTarget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCTowerPlayerLockTarget* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCTowerPlayerLockTarget";
  }
  protected:
  explicit SCTowerPlayerLockTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLockInfoFieldNumber = 1,
  };
  // .JSBY.LockTargetInfo LockInfo = 1;
  bool has_lockinfo() const;
  private:
  bool _internal_has_lockinfo() const;
  public:
  void clear_lockinfo();
  const ::JSBY::LockTargetInfo& lockinfo() const;
  ::JSBY::LockTargetInfo* release_lockinfo();
  ::JSBY::LockTargetInfo* mutable_lockinfo();
  void set_allocated_lockinfo(::JSBY::LockTargetInfo* lockinfo);
  private:
  const ::JSBY::LockTargetInfo& _internal_lockinfo() const;
  ::JSBY::LockTargetInfo* _internal_mutable_lockinfo();
  public:
  void unsafe_arena_set_allocated_lockinfo(
      ::JSBY::LockTargetInfo* lockinfo);
  ::JSBY::LockTargetInfo* unsafe_arena_release_lockinfo();

  // @@protoc_insertion_point(class_scope:JSBY.SCTowerPlayerLockTarget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::JSBY::LockTargetInfo* lockinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class CSChangeBackground PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.CSChangeBackground) */ {
 public:
  inline CSChangeBackground() : CSChangeBackground(nullptr) {}
  virtual ~CSChangeBackground();

  CSChangeBackground(const CSChangeBackground& from);
  CSChangeBackground(CSChangeBackground&& from) noexcept
    : CSChangeBackground() {
    *this = ::std::move(from);
  }

  inline CSChangeBackground& operator=(const CSChangeBackground& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSChangeBackground& operator=(CSChangeBackground&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSChangeBackground& default_instance();

  static inline const CSChangeBackground* internal_default_instance() {
    return reinterpret_cast<const CSChangeBackground*>(
               &_CSChangeBackground_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(CSChangeBackground& a, CSChangeBackground& b) {
    a.Swap(&b);
  }
  inline void Swap(CSChangeBackground* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSChangeBackground* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSChangeBackground* New() const final {
    return CreateMaybeMessage<CSChangeBackground>(nullptr);
  }

  CSChangeBackground* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSChangeBackground>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSChangeBackground& from);
  void MergeFrom(const CSChangeBackground& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSChangeBackground* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.CSChangeBackground";
  }
  protected:
  explicit CSChangeBackground(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsBackFieldNumber = 1,
  };
  // bool IsBack = 1;
  void clear_isback();
  bool isback() const;
  void set_isback(bool value);
  private:
  bool _internal_isback() const;
  void _internal_set_isback(bool value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.CSChangeBackground)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool isback_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCChangeBackground PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCChangeBackground) */ {
 public:
  inline SCChangeBackground() : SCChangeBackground(nullptr) {}
  virtual ~SCChangeBackground();

  SCChangeBackground(const SCChangeBackground& from);
  SCChangeBackground(SCChangeBackground&& from) noexcept
    : SCChangeBackground() {
    *this = ::std::move(from);
  }

  inline SCChangeBackground& operator=(const SCChangeBackground& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCChangeBackground& operator=(SCChangeBackground&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCChangeBackground& default_instance();

  static inline const SCChangeBackground* internal_default_instance() {
    return reinterpret_cast<const SCChangeBackground*>(
               &_SCChangeBackground_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(SCChangeBackground& a, SCChangeBackground& b) {
    a.Swap(&b);
  }
  inline void Swap(SCChangeBackground* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCChangeBackground* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCChangeBackground* New() const final {
    return CreateMaybeMessage<SCChangeBackground>(nullptr);
  }

  SCChangeBackground* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCChangeBackground>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCChangeBackground& from);
  void MergeFrom(const SCChangeBackground& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCChangeBackground* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCChangeBackground";
  }
  protected:
  explicit SCChangeBackground(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:JSBY.SCChangeBackground)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class CSTowerMonsterExit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.CSTowerMonsterExit) */ {
 public:
  inline CSTowerMonsterExit() : CSTowerMonsterExit(nullptr) {}
  virtual ~CSTowerMonsterExit();

  CSTowerMonsterExit(const CSTowerMonsterExit& from);
  CSTowerMonsterExit(CSTowerMonsterExit&& from) noexcept
    : CSTowerMonsterExit() {
    *this = ::std::move(from);
  }

  inline CSTowerMonsterExit& operator=(const CSTowerMonsterExit& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSTowerMonsterExit& operator=(CSTowerMonsterExit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSTowerMonsterExit& default_instance();

  static inline const CSTowerMonsterExit* internal_default_instance() {
    return reinterpret_cast<const CSTowerMonsterExit*>(
               &_CSTowerMonsterExit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(CSTowerMonsterExit& a, CSTowerMonsterExit& b) {
    a.Swap(&b);
  }
  inline void Swap(CSTowerMonsterExit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSTowerMonsterExit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSTowerMonsterExit* New() const final {
    return CreateMaybeMessage<CSTowerMonsterExit>(nullptr);
  }

  CSTowerMonsterExit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSTowerMonsterExit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSTowerMonsterExit& from);
  void MergeFrom(const CSTowerMonsterExit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSTowerMonsterExit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.CSTowerMonsterExit";
  }
  protected:
  explicit CSTowerMonsterExit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionIdFieldNumber = 1,
  };
  // int32 PositionId = 1;
  void clear_positionid();
  ::PROTOBUF_NAMESPACE_ID::int32 positionid() const;
  void set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_positionid() const;
  void _internal_set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.CSTowerMonsterExit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 positionid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCTowerMonsterExit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCTowerMonsterExit) */ {
 public:
  inline SCTowerMonsterExit() : SCTowerMonsterExit(nullptr) {}
  virtual ~SCTowerMonsterExit();

  SCTowerMonsterExit(const SCTowerMonsterExit& from);
  SCTowerMonsterExit(SCTowerMonsterExit&& from) noexcept
    : SCTowerMonsterExit() {
    *this = ::std::move(from);
  }

  inline SCTowerMonsterExit& operator=(const SCTowerMonsterExit& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCTowerMonsterExit& operator=(SCTowerMonsterExit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCTowerMonsterExit& default_instance();

  static inline const SCTowerMonsterExit* internal_default_instance() {
    return reinterpret_cast<const SCTowerMonsterExit*>(
               &_SCTowerMonsterExit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(SCTowerMonsterExit& a, SCTowerMonsterExit& b) {
    a.Swap(&b);
  }
  inline void Swap(SCTowerMonsterExit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCTowerMonsterExit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCTowerMonsterExit* New() const final {
    return CreateMaybeMessage<SCTowerMonsterExit>(nullptr);
  }

  SCTowerMonsterExit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCTowerMonsterExit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCTowerMonsterExit& from);
  void MergeFrom(const SCTowerMonsterExit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCTowerMonsterExit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCTowerMonsterExit";
  }
  protected:
  explicit SCTowerMonsterExit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:JSBY.SCTowerMonsterExit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class CSGetCurrentTime PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.CSGetCurrentTime) */ {
 public:
  inline CSGetCurrentTime() : CSGetCurrentTime(nullptr) {}
  virtual ~CSGetCurrentTime();

  CSGetCurrentTime(const CSGetCurrentTime& from);
  CSGetCurrentTime(CSGetCurrentTime&& from) noexcept
    : CSGetCurrentTime() {
    *this = ::std::move(from);
  }

  inline CSGetCurrentTime& operator=(const CSGetCurrentTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSGetCurrentTime& operator=(CSGetCurrentTime&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSGetCurrentTime& default_instance();

  static inline const CSGetCurrentTime* internal_default_instance() {
    return reinterpret_cast<const CSGetCurrentTime*>(
               &_CSGetCurrentTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(CSGetCurrentTime& a, CSGetCurrentTime& b) {
    a.Swap(&b);
  }
  inline void Swap(CSGetCurrentTime* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSGetCurrentTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSGetCurrentTime* New() const final {
    return CreateMaybeMessage<CSGetCurrentTime>(nullptr);
  }

  CSGetCurrentTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSGetCurrentTime>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSGetCurrentTime& from);
  void MergeFrom(const CSGetCurrentTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSGetCurrentTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.CSGetCurrentTime";
  }
  protected:
  explicit CSGetCurrentTime(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:JSBY.CSGetCurrentTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCGetCurrentTime PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCGetCurrentTime) */ {
 public:
  inline SCGetCurrentTime() : SCGetCurrentTime(nullptr) {}
  virtual ~SCGetCurrentTime();

  SCGetCurrentTime(const SCGetCurrentTime& from);
  SCGetCurrentTime(SCGetCurrentTime&& from) noexcept
    : SCGetCurrentTime() {
    *this = ::std::move(from);
  }

  inline SCGetCurrentTime& operator=(const SCGetCurrentTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGetCurrentTime& operator=(SCGetCurrentTime&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGetCurrentTime& default_instance();

  static inline const SCGetCurrentTime* internal_default_instance() {
    return reinterpret_cast<const SCGetCurrentTime*>(
               &_SCGetCurrentTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(SCGetCurrentTime& a, SCGetCurrentTime& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGetCurrentTime* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGetCurrentTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGetCurrentTime* New() const final {
    return CreateMaybeMessage<SCGetCurrentTime>(nullptr);
  }

  SCGetCurrentTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGetCurrentTime>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGetCurrentTime& from);
  void MergeFrom(const SCGetCurrentTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGetCurrentTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCGetCurrentTime";
  }
  protected:
  explicit SCGetCurrentTime(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
  };
  // int32 Timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCGetCurrentTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class TowerGuideInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.TowerGuideInfo) */ {
 public:
  inline TowerGuideInfo() : TowerGuideInfo(nullptr) {}
  virtual ~TowerGuideInfo();

  TowerGuideInfo(const TowerGuideInfo& from);
  TowerGuideInfo(TowerGuideInfo&& from) noexcept
    : TowerGuideInfo() {
    *this = ::std::move(from);
  }

  inline TowerGuideInfo& operator=(const TowerGuideInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TowerGuideInfo& operator=(TowerGuideInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TowerGuideInfo& default_instance();

  static inline const TowerGuideInfo* internal_default_instance() {
    return reinterpret_cast<const TowerGuideInfo*>(
               &_TowerGuideInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(TowerGuideInfo& a, TowerGuideInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TowerGuideInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TowerGuideInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TowerGuideInfo* New() const final {
    return CreateMaybeMessage<TowerGuideInfo>(nullptr);
  }

  TowerGuideInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TowerGuideInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TowerGuideInfo& from);
  void MergeFrom(const TowerGuideInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TowerGuideInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.TowerGuideInfo";
  }
  protected:
  explicit TowerGuideInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuideStepFieldNumber = 1,
    kIsFinshFieldNumber = 2,
  };
  // int32 GuideStep = 1;
  void clear_guidestep();
  ::PROTOBUF_NAMESPACE_ID::int32 guidestep() const;
  void set_guidestep(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_guidestep() const;
  void _internal_set_guidestep(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool IsFinsh = 2;
  void clear_isfinsh();
  bool isfinsh() const;
  void set_isfinsh(bool value);
  private:
  bool _internal_isfinsh() const;
  void _internal_set_isfinsh(bool value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.TowerGuideInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 guidestep_;
  bool isfinsh_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class CSGetTowerStep PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.CSGetTowerStep) */ {
 public:
  inline CSGetTowerStep() : CSGetTowerStep(nullptr) {}
  virtual ~CSGetTowerStep();

  CSGetTowerStep(const CSGetTowerStep& from);
  CSGetTowerStep(CSGetTowerStep&& from) noexcept
    : CSGetTowerStep() {
    *this = ::std::move(from);
  }

  inline CSGetTowerStep& operator=(const CSGetTowerStep& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSGetTowerStep& operator=(CSGetTowerStep&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSGetTowerStep& default_instance();

  static inline const CSGetTowerStep* internal_default_instance() {
    return reinterpret_cast<const CSGetTowerStep*>(
               &_CSGetTowerStep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(CSGetTowerStep& a, CSGetTowerStep& b) {
    a.Swap(&b);
  }
  inline void Swap(CSGetTowerStep* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSGetTowerStep* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSGetTowerStep* New() const final {
    return CreateMaybeMessage<CSGetTowerStep>(nullptr);
  }

  CSGetTowerStep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSGetTowerStep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSGetTowerStep& from);
  void MergeFrom(const CSGetTowerStep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSGetTowerStep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.CSGetTowerStep";
  }
  protected:
  explicit CSGetTowerStep(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:JSBY.CSGetTowerStep)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCGetTowerGuide PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCGetTowerGuide) */ {
 public:
  inline SCGetTowerGuide() : SCGetTowerGuide(nullptr) {}
  virtual ~SCGetTowerGuide();

  SCGetTowerGuide(const SCGetTowerGuide& from);
  SCGetTowerGuide(SCGetTowerGuide&& from) noexcept
    : SCGetTowerGuide() {
    *this = ::std::move(from);
  }

  inline SCGetTowerGuide& operator=(const SCGetTowerGuide& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGetTowerGuide& operator=(SCGetTowerGuide&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGetTowerGuide& default_instance();

  static inline const SCGetTowerGuide* internal_default_instance() {
    return reinterpret_cast<const SCGetTowerGuide*>(
               &_SCGetTowerGuide_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(SCGetTowerGuide& a, SCGetTowerGuide& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGetTowerGuide* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGetTowerGuide* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGetTowerGuide* New() const final {
    return CreateMaybeMessage<SCGetTowerGuide>(nullptr);
  }

  SCGetTowerGuide* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGetTowerGuide>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGetTowerGuide& from);
  void MergeFrom(const SCGetTowerGuide& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGetTowerGuide* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCGetTowerGuide";
  }
  protected:
  explicit SCGetTowerGuide(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuideInfoFieldNumber = 1,
  };
  // .JSBY.TowerGuideInfo GuideInfo = 1;
  bool has_guideinfo() const;
  private:
  bool _internal_has_guideinfo() const;
  public:
  void clear_guideinfo();
  const ::JSBY::TowerGuideInfo& guideinfo() const;
  ::JSBY::TowerGuideInfo* release_guideinfo();
  ::JSBY::TowerGuideInfo* mutable_guideinfo();
  void set_allocated_guideinfo(::JSBY::TowerGuideInfo* guideinfo);
  private:
  const ::JSBY::TowerGuideInfo& _internal_guideinfo() const;
  ::JSBY::TowerGuideInfo* _internal_mutable_guideinfo();
  public:
  void unsafe_arena_set_allocated_guideinfo(
      ::JSBY::TowerGuideInfo* guideinfo);
  ::JSBY::TowerGuideInfo* unsafe_arena_release_guideinfo();

  // @@protoc_insertion_point(class_scope:JSBY.SCGetTowerGuide)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::JSBY::TowerGuideInfo* guideinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class CSSetTowerStep PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.CSSetTowerStep) */ {
 public:
  inline CSSetTowerStep() : CSSetTowerStep(nullptr) {}
  virtual ~CSSetTowerStep();

  CSSetTowerStep(const CSSetTowerStep& from);
  CSSetTowerStep(CSSetTowerStep&& from) noexcept
    : CSSetTowerStep() {
    *this = ::std::move(from);
  }

  inline CSSetTowerStep& operator=(const CSSetTowerStep& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSetTowerStep& operator=(CSSetTowerStep&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSetTowerStep& default_instance();

  static inline const CSSetTowerStep* internal_default_instance() {
    return reinterpret_cast<const CSSetTowerStep*>(
               &_CSSetTowerStep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(CSSetTowerStep& a, CSSetTowerStep& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSetTowerStep* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSetTowerStep* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSetTowerStep* New() const final {
    return CreateMaybeMessage<CSSetTowerStep>(nullptr);
  }

  CSSetTowerStep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSetTowerStep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSetTowerStep& from);
  void MergeFrom(const CSSetTowerStep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSetTowerStep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.CSSetTowerStep";
  }
  protected:
  explicit CSSetTowerStep(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuideInfoFieldNumber = 1,
  };
  // .JSBY.TowerGuideInfo GuideInfo = 1;
  bool has_guideinfo() const;
  private:
  bool _internal_has_guideinfo() const;
  public:
  void clear_guideinfo();
  const ::JSBY::TowerGuideInfo& guideinfo() const;
  ::JSBY::TowerGuideInfo* release_guideinfo();
  ::JSBY::TowerGuideInfo* mutable_guideinfo();
  void set_allocated_guideinfo(::JSBY::TowerGuideInfo* guideinfo);
  private:
  const ::JSBY::TowerGuideInfo& _internal_guideinfo() const;
  ::JSBY::TowerGuideInfo* _internal_mutable_guideinfo();
  public:
  void unsafe_arena_set_allocated_guideinfo(
      ::JSBY::TowerGuideInfo* guideinfo);
  ::JSBY::TowerGuideInfo* unsafe_arena_release_guideinfo();

  // @@protoc_insertion_point(class_scope:JSBY.CSSetTowerStep)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::JSBY::TowerGuideInfo* guideinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCSetTowerStep PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCSetTowerStep) */ {
 public:
  inline SCSetTowerStep() : SCSetTowerStep(nullptr) {}
  virtual ~SCSetTowerStep();

  SCSetTowerStep(const SCSetTowerStep& from);
  SCSetTowerStep(SCSetTowerStep&& from) noexcept
    : SCSetTowerStep() {
    *this = ::std::move(from);
  }

  inline SCSetTowerStep& operator=(const SCSetTowerStep& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSetTowerStep& operator=(SCSetTowerStep&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSetTowerStep& default_instance();

  static inline const SCSetTowerStep* internal_default_instance() {
    return reinterpret_cast<const SCSetTowerStep*>(
               &_SCSetTowerStep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(SCSetTowerStep& a, SCSetTowerStep& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSetTowerStep* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSetTowerStep* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSetTowerStep* New() const final {
    return CreateMaybeMessage<SCSetTowerStep>(nullptr);
  }

  SCSetTowerStep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSetTowerStep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSetTowerStep& from);
  void MergeFrom(const SCSetTowerStep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSetTowerStep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCSetTowerStep";
  }
  protected:
  explicit SCSetTowerStep(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:JSBY.SCSetTowerStep)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class CSTowerExchangeHero PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.CSTowerExchangeHero) */ {
 public:
  inline CSTowerExchangeHero() : CSTowerExchangeHero(nullptr) {}
  virtual ~CSTowerExchangeHero();

  CSTowerExchangeHero(const CSTowerExchangeHero& from);
  CSTowerExchangeHero(CSTowerExchangeHero&& from) noexcept
    : CSTowerExchangeHero() {
    *this = ::std::move(from);
  }

  inline CSTowerExchangeHero& operator=(const CSTowerExchangeHero& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSTowerExchangeHero& operator=(CSTowerExchangeHero&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSTowerExchangeHero& default_instance();

  static inline const CSTowerExchangeHero* internal_default_instance() {
    return reinterpret_cast<const CSTowerExchangeHero*>(
               &_CSTowerExchangeHero_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(CSTowerExchangeHero& a, CSTowerExchangeHero& b) {
    a.Swap(&b);
  }
  inline void Swap(CSTowerExchangeHero* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSTowerExchangeHero* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSTowerExchangeHero* New() const final {
    return CreateMaybeMessage<CSTowerExchangeHero>(nullptr);
  }

  CSTowerExchangeHero* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSTowerExchangeHero>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSTowerExchangeHero& from);
  void MergeFrom(const CSTowerExchangeHero& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSTowerExchangeHero* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.CSTowerExchangeHero";
  }
  protected:
  explicit CSTowerExchangeHero(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewPositionIdFieldNumber = 1,
    kOldPositionIdFieldNumber = 2,
  };
  // int32 NewPositionId = 1;
  void clear_newpositionid();
  ::PROTOBUF_NAMESPACE_ID::int32 newpositionid() const;
  void set_newpositionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_newpositionid() const;
  void _internal_set_newpositionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 OldPositionId = 2;
  void clear_oldpositionid();
  ::PROTOBUF_NAMESPACE_ID::int32 oldpositionid() const;
  void set_oldpositionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_oldpositionid() const;
  void _internal_set_oldpositionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.CSTowerExchangeHero)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 newpositionid_;
  ::PROTOBUF_NAMESPACE_ID::int32 oldpositionid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCTowerExchangeHero PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCTowerExchangeHero) */ {
 public:
  inline SCTowerExchangeHero() : SCTowerExchangeHero(nullptr) {}
  virtual ~SCTowerExchangeHero();

  SCTowerExchangeHero(const SCTowerExchangeHero& from);
  SCTowerExchangeHero(SCTowerExchangeHero&& from) noexcept
    : SCTowerExchangeHero() {
    *this = ::std::move(from);
  }

  inline SCTowerExchangeHero& operator=(const SCTowerExchangeHero& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCTowerExchangeHero& operator=(SCTowerExchangeHero&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCTowerExchangeHero& default_instance();

  static inline const SCTowerExchangeHero* internal_default_instance() {
    return reinterpret_cast<const SCTowerExchangeHero*>(
               &_SCTowerExchangeHero_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(SCTowerExchangeHero& a, SCTowerExchangeHero& b) {
    a.Swap(&b);
  }
  inline void Swap(SCTowerExchangeHero* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCTowerExchangeHero* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCTowerExchangeHero* New() const final {
    return CreateMaybeMessage<SCTowerExchangeHero>(nullptr);
  }

  SCTowerExchangeHero* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCTowerExchangeHero>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCTowerExchangeHero& from);
  void MergeFrom(const SCTowerExchangeHero& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCTowerExchangeHero* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCTowerExchangeHero";
  }
  protected:
  explicit SCTowerExchangeHero(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewPositionIdFieldNumber = 1,
    kOldPositionIdFieldNumber = 2,
    kReqPlayerIdFieldNumber = 3,
  };
  // int32 NewPositionId = 1;
  void clear_newpositionid();
  ::PROTOBUF_NAMESPACE_ID::int32 newpositionid() const;
  void set_newpositionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_newpositionid() const;
  void _internal_set_newpositionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 OldPositionId = 2;
  void clear_oldpositionid();
  ::PROTOBUF_NAMESPACE_ID::int32 oldpositionid() const;
  void set_oldpositionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_oldpositionid() const;
  void _internal_set_oldpositionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ReqPlayerId = 3;
  void clear_reqplayerid();
  ::PROTOBUF_NAMESPACE_ID::int32 reqplayerid() const;
  void set_reqplayerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reqplayerid() const;
  void _internal_set_reqplayerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCTowerExchangeHero)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 newpositionid_;
  ::PROTOBUF_NAMESPACE_ID::int32 oldpositionid_;
  ::PROTOBUF_NAMESPACE_ID::int32 reqplayerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCLeaveTowerTableCountdown PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCLeaveTowerTableCountdown) */ {
 public:
  inline SCLeaveTowerTableCountdown() : SCLeaveTowerTableCountdown(nullptr) {}
  virtual ~SCLeaveTowerTableCountdown();

  SCLeaveTowerTableCountdown(const SCLeaveTowerTableCountdown& from);
  SCLeaveTowerTableCountdown(SCLeaveTowerTableCountdown&& from) noexcept
    : SCLeaveTowerTableCountdown() {
    *this = ::std::move(from);
  }

  inline SCLeaveTowerTableCountdown& operator=(const SCLeaveTowerTableCountdown& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCLeaveTowerTableCountdown& operator=(SCLeaveTowerTableCountdown&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCLeaveTowerTableCountdown& default_instance();

  static inline const SCLeaveTowerTableCountdown* internal_default_instance() {
    return reinterpret_cast<const SCLeaveTowerTableCountdown*>(
               &_SCLeaveTowerTableCountdown_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(SCLeaveTowerTableCountdown& a, SCLeaveTowerTableCountdown& b) {
    a.Swap(&b);
  }
  inline void Swap(SCLeaveTowerTableCountdown* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCLeaveTowerTableCountdown* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCLeaveTowerTableCountdown* New() const final {
    return CreateMaybeMessage<SCLeaveTowerTableCountdown>(nullptr);
  }

  SCLeaveTowerTableCountdown* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCLeaveTowerTableCountdown>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCLeaveTowerTableCountdown& from);
  void MergeFrom(const SCLeaveTowerTableCountdown& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCLeaveTowerTableCountdown* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCLeaveTowerTableCountdown";
  }
  protected:
  explicit SCLeaveTowerTableCountdown(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableIDFieldNumber = 1,
  };
  // int32 TableID = 1;
  void clear_tableid();
  ::PROTOBUF_NAMESPACE_ID::int32 tableid() const;
  void set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tableid() const;
  void _internal_set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCLeaveTowerTableCountdown)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 tableid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class PoisonBombLocation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.PoisonBombLocation) */ {
 public:
  inline PoisonBombLocation() : PoisonBombLocation(nullptr) {}
  virtual ~PoisonBombLocation();

  PoisonBombLocation(const PoisonBombLocation& from);
  PoisonBombLocation(PoisonBombLocation&& from) noexcept
    : PoisonBombLocation() {
    *this = ::std::move(from);
  }

  inline PoisonBombLocation& operator=(const PoisonBombLocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoisonBombLocation& operator=(PoisonBombLocation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PoisonBombLocation& default_instance();

  static inline const PoisonBombLocation* internal_default_instance() {
    return reinterpret_cast<const PoisonBombLocation*>(
               &_PoisonBombLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(PoisonBombLocation& a, PoisonBombLocation& b) {
    a.Swap(&b);
  }
  inline void Swap(PoisonBombLocation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoisonBombLocation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PoisonBombLocation* New() const final {
    return CreateMaybeMessage<PoisonBombLocation>(nullptr);
  }

  PoisonBombLocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PoisonBombLocation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PoisonBombLocation& from);
  void MergeFrom(const PoisonBombLocation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoisonBombLocation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.PoisonBombLocation";
  }
  protected:
  explicit PoisonBombLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kAngleFieldNumber = 4,
  };
  // int32 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 X = 2;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Y = 3;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Angle = 4;
  void clear_angle();
  ::PROTOBUF_NAMESPACE_ID::int32 angle() const;
  void set_angle(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_angle() const;
  void _internal_set_angle(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.PoisonBombLocation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  ::PROTOBUF_NAMESPACE_ID::int32 angle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class CSPoisonBombLocation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.CSPoisonBombLocation) */ {
 public:
  inline CSPoisonBombLocation() : CSPoisonBombLocation(nullptr) {}
  virtual ~CSPoisonBombLocation();

  CSPoisonBombLocation(const CSPoisonBombLocation& from);
  CSPoisonBombLocation(CSPoisonBombLocation&& from) noexcept
    : CSPoisonBombLocation() {
    *this = ::std::move(from);
  }

  inline CSPoisonBombLocation& operator=(const CSPoisonBombLocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSPoisonBombLocation& operator=(CSPoisonBombLocation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSPoisonBombLocation& default_instance();

  static inline const CSPoisonBombLocation* internal_default_instance() {
    return reinterpret_cast<const CSPoisonBombLocation*>(
               &_CSPoisonBombLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(CSPoisonBombLocation& a, CSPoisonBombLocation& b) {
    a.Swap(&b);
  }
  inline void Swap(CSPoisonBombLocation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSPoisonBombLocation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSPoisonBombLocation* New() const final {
    return CreateMaybeMessage<CSPoisonBombLocation>(nullptr);
  }

  CSPoisonBombLocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSPoisonBombLocation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSPoisonBombLocation& from);
  void MergeFrom(const CSPoisonBombLocation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSPoisonBombLocation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.CSPoisonBombLocation";
  }
  protected:
  explicit CSPoisonBombLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .JSBY.PoisonBombLocation Info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::JSBY::PoisonBombLocation& info() const;
  ::JSBY::PoisonBombLocation* release_info();
  ::JSBY::PoisonBombLocation* mutable_info();
  void set_allocated_info(::JSBY::PoisonBombLocation* info);
  private:
  const ::JSBY::PoisonBombLocation& _internal_info() const;
  ::JSBY::PoisonBombLocation* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::JSBY::PoisonBombLocation* info);
  ::JSBY::PoisonBombLocation* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:JSBY.CSPoisonBombLocation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::JSBY::PoisonBombLocation* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCPoisonBombLocation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCPoisonBombLocation) */ {
 public:
  inline SCPoisonBombLocation() : SCPoisonBombLocation(nullptr) {}
  virtual ~SCPoisonBombLocation();

  SCPoisonBombLocation(const SCPoisonBombLocation& from);
  SCPoisonBombLocation(SCPoisonBombLocation&& from) noexcept
    : SCPoisonBombLocation() {
    *this = ::std::move(from);
  }

  inline SCPoisonBombLocation& operator=(const SCPoisonBombLocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPoisonBombLocation& operator=(SCPoisonBombLocation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPoisonBombLocation& default_instance();

  static inline const SCPoisonBombLocation* internal_default_instance() {
    return reinterpret_cast<const SCPoisonBombLocation*>(
               &_SCPoisonBombLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(SCPoisonBombLocation& a, SCPoisonBombLocation& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPoisonBombLocation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPoisonBombLocation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPoisonBombLocation* New() const final {
    return CreateMaybeMessage<SCPoisonBombLocation>(nullptr);
  }

  SCPoisonBombLocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPoisonBombLocation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPoisonBombLocation& from);
  void MergeFrom(const SCPoisonBombLocation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPoisonBombLocation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCPoisonBombLocation";
  }
  protected:
  explicit SCPoisonBombLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .JSBY.PoisonBombLocation Info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::JSBY::PoisonBombLocation& info() const;
  ::JSBY::PoisonBombLocation* release_info();
  ::JSBY::PoisonBombLocation* mutable_info();
  void set_allocated_info(::JSBY::PoisonBombLocation* info);
  private:
  const ::JSBY::PoisonBombLocation& _internal_info() const;
  ::JSBY::PoisonBombLocation* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::JSBY::PoisonBombLocation* info);
  ::JSBY::PoisonBombLocation* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:JSBY.SCPoisonBombLocation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::JSBY::PoisonBombLocation* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class PoisonbombConvert PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.PoisonbombConvert) */ {
 public:
  inline PoisonbombConvert() : PoisonbombConvert(nullptr) {}
  virtual ~PoisonbombConvert();

  PoisonbombConvert(const PoisonbombConvert& from);
  PoisonbombConvert(PoisonbombConvert&& from) noexcept
    : PoisonbombConvert() {
    *this = ::std::move(from);
  }

  inline PoisonbombConvert& operator=(const PoisonbombConvert& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoisonbombConvert& operator=(PoisonbombConvert&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PoisonbombConvert& default_instance();

  static inline const PoisonbombConvert* internal_default_instance() {
    return reinterpret_cast<const PoisonbombConvert*>(
               &_PoisonbombConvert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(PoisonbombConvert& a, PoisonbombConvert& b) {
    a.Swap(&b);
  }
  inline void Swap(PoisonbombConvert* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoisonbombConvert* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PoisonbombConvert* New() const final {
    return CreateMaybeMessage<PoisonbombConvert>(nullptr);
  }

  PoisonbombConvert* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PoisonbombConvert>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PoisonbombConvert& from);
  void MergeFrom(const PoisonbombConvert& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoisonbombConvert* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.PoisonbombConvert";
  }
  protected:
  explicit PoisonbombConvert(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonsterIdFieldNumber = 1,
    kPositionIdFieldNumber = 2,
    kPoisonBombIdFieldNumber = 3,
  };
  // int32 MonsterId = 1;
  void clear_monsterid();
  ::PROTOBUF_NAMESPACE_ID::int32 monsterid() const;
  void set_monsterid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_monsterid() const;
  void _internal_set_monsterid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 PositionId = 2;
  void clear_positionid();
  ::PROTOBUF_NAMESPACE_ID::int32 positionid() const;
  void set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_positionid() const;
  void _internal_set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 PoisonBombId = 3;
  void clear_poisonbombid();
  ::PROTOBUF_NAMESPACE_ID::int32 poisonbombid() const;
  void set_poisonbombid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_poisonbombid() const;
  void _internal_set_poisonbombid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.PoisonbombConvert)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 monsterid_;
  ::PROTOBUF_NAMESPACE_ID::int32 positionid_;
  ::PROTOBUF_NAMESPACE_ID::int32 poisonbombid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCPoisonBombConvert PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCPoisonBombConvert) */ {
 public:
  inline SCPoisonBombConvert() : SCPoisonBombConvert(nullptr) {}
  virtual ~SCPoisonBombConvert();

  SCPoisonBombConvert(const SCPoisonBombConvert& from);
  SCPoisonBombConvert(SCPoisonBombConvert&& from) noexcept
    : SCPoisonBombConvert() {
    *this = ::std::move(from);
  }

  inline SCPoisonBombConvert& operator=(const SCPoisonBombConvert& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPoisonBombConvert& operator=(SCPoisonBombConvert&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPoisonBombConvert& default_instance();

  static inline const SCPoisonBombConvert* internal_default_instance() {
    return reinterpret_cast<const SCPoisonBombConvert*>(
               &_SCPoisonBombConvert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(SCPoisonBombConvert& a, SCPoisonBombConvert& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPoisonBombConvert* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPoisonBombConvert* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPoisonBombConvert* New() const final {
    return CreateMaybeMessage<SCPoisonBombConvert>(nullptr);
  }

  SCPoisonBombConvert* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPoisonBombConvert>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPoisonBombConvert& from);
  void MergeFrom(const SCPoisonBombConvert& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPoisonBombConvert* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCPoisonBombConvert";
  }
  protected:
  explicit SCPoisonBombConvert(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 2,
    kPoisonBombIdFieldNumber = 1,
    kKillPlayerIDFieldNumber = 3,
  };
  // .JSBY.PoisonbombConvert Info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::JSBY::PoisonbombConvert& info() const;
  ::JSBY::PoisonbombConvert* release_info();
  ::JSBY::PoisonbombConvert* mutable_info();
  void set_allocated_info(::JSBY::PoisonbombConvert* info);
  private:
  const ::JSBY::PoisonbombConvert& _internal_info() const;
  ::JSBY::PoisonbombConvert* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::JSBY::PoisonbombConvert* info);
  ::JSBY::PoisonbombConvert* unsafe_arena_release_info();

  // int32 PoisonBombId = 1;
  void clear_poisonbombid();
  ::PROTOBUF_NAMESPACE_ID::int32 poisonbombid() const;
  void set_poisonbombid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_poisonbombid() const;
  void _internal_set_poisonbombid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 KillPlayerID = 3;
  void clear_killplayerid();
  ::PROTOBUF_NAMESPACE_ID::int32 killplayerid() const;
  void set_killplayerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_killplayerid() const;
  void _internal_set_killplayerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCPoisonBombConvert)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::JSBY::PoisonbombConvert* info_;
  ::PROTOBUF_NAMESPACE_ID::int32 poisonbombid_;
  ::PROTOBUF_NAMESPACE_ID::int32 killplayerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class PoisonbombType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.PoisonbombType) */ {
 public:
  inline PoisonbombType() : PoisonbombType(nullptr) {}
  virtual ~PoisonbombType();

  PoisonbombType(const PoisonbombType& from);
  PoisonbombType(PoisonbombType&& from) noexcept
    : PoisonbombType() {
    *this = ::std::move(from);
  }

  inline PoisonbombType& operator=(const PoisonbombType& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoisonbombType& operator=(PoisonbombType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PoisonbombType& default_instance();

  static inline const PoisonbombType* internal_default_instance() {
    return reinterpret_cast<const PoisonbombType*>(
               &_PoisonbombType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(PoisonbombType& a, PoisonbombType& b) {
    a.Swap(&b);
  }
  inline void Swap(PoisonbombType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoisonbombType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PoisonbombType* New() const final {
    return CreateMaybeMessage<PoisonbombType>(nullptr);
  }

  PoisonbombType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PoisonbombType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PoisonbombType& from);
  void MergeFrom(const PoisonbombType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoisonbombType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.PoisonbombType";
  }
  protected:
  explicit PoisonbombType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonsterIdFieldNumber = 1,
    kMasterPoisonBombIdFieldNumber = 2,
    kPoisonBombIdFieldNumber = 3,
    kKillPlayerIdFieldNumber = 4,
    kChannelIdFieldNumber = 5,
    kProcessTimeFieldNumber = 6,
  };
  // int32 MonsterId = 1;
  void clear_monsterid();
  ::PROTOBUF_NAMESPACE_ID::int32 monsterid() const;
  void set_monsterid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_monsterid() const;
  void _internal_set_monsterid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 MasterPoisonBombId = 2;
  void clear_masterpoisonbombid();
  ::PROTOBUF_NAMESPACE_ID::int32 masterpoisonbombid() const;
  void set_masterpoisonbombid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_masterpoisonbombid() const;
  void _internal_set_masterpoisonbombid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 PoisonBombId = 3;
  void clear_poisonbombid();
  ::PROTOBUF_NAMESPACE_ID::int32 poisonbombid() const;
  void set_poisonbombid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_poisonbombid() const;
  void _internal_set_poisonbombid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 KillPlayerId = 4;
  void clear_killplayerid();
  ::PROTOBUF_NAMESPACE_ID::int32 killplayerid() const;
  void set_killplayerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_killplayerid() const;
  void _internal_set_killplayerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ChannelId = 5;
  void clear_channelid();
  ::PROTOBUF_NAMESPACE_ID::int32 channelid() const;
  void set_channelid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channelid() const;
  void _internal_set_channelid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ProcessTime = 6;
  void clear_processtime();
  ::PROTOBUF_NAMESPACE_ID::int32 processtime() const;
  void set_processtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_processtime() const;
  void _internal_set_processtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.PoisonbombType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 monsterid_;
  ::PROTOBUF_NAMESPACE_ID::int32 masterpoisonbombid_;
  ::PROTOBUF_NAMESPACE_ID::int32 poisonbombid_;
  ::PROTOBUF_NAMESPACE_ID::int32 killplayerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 channelid_;
  ::PROTOBUF_NAMESPACE_ID::int32 processtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCPoisonbombTypes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCPoisonbombTypes) */ {
 public:
  inline SCPoisonbombTypes() : SCPoisonbombTypes(nullptr) {}
  virtual ~SCPoisonbombTypes();

  SCPoisonbombTypes(const SCPoisonbombTypes& from);
  SCPoisonbombTypes(SCPoisonbombTypes&& from) noexcept
    : SCPoisonbombTypes() {
    *this = ::std::move(from);
  }

  inline SCPoisonbombTypes& operator=(const SCPoisonbombTypes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPoisonbombTypes& operator=(SCPoisonbombTypes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPoisonbombTypes& default_instance();

  static inline const SCPoisonbombTypes* internal_default_instance() {
    return reinterpret_cast<const SCPoisonbombTypes*>(
               &_SCPoisonbombTypes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(SCPoisonbombTypes& a, SCPoisonbombTypes& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPoisonbombTypes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPoisonbombTypes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPoisonbombTypes* New() const final {
    return CreateMaybeMessage<SCPoisonbombTypes>(nullptr);
  }

  SCPoisonbombTypes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPoisonbombTypes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPoisonbombTypes& from);
  void MergeFrom(const SCPoisonbombTypes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPoisonbombTypes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCPoisonbombTypes";
  }
  protected:
  explicit SCPoisonbombTypes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // repeated .JSBY.PoisonbombType Info = 1;
  int info_size() const;
  private:
  int _internal_info_size() const;
  public:
  void clear_info();
  ::JSBY::PoisonbombType* mutable_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSBY::PoisonbombType >*
      mutable_info();
  private:
  const ::JSBY::PoisonbombType& _internal_info(int index) const;
  ::JSBY::PoisonbombType* _internal_add_info();
  public:
  const ::JSBY::PoisonbombType& info(int index) const;
  ::JSBY::PoisonbombType* add_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSBY::PoisonbombType >&
      info() const;

  // @@protoc_insertion_point(class_scope:JSBY.SCPoisonbombTypes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSBY::PoisonbombType > info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class CSDragonRelease PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.CSDragonRelease) */ {
 public:
  inline CSDragonRelease() : CSDragonRelease(nullptr) {}
  virtual ~CSDragonRelease();

  CSDragonRelease(const CSDragonRelease& from);
  CSDragonRelease(CSDragonRelease&& from) noexcept
    : CSDragonRelease() {
    *this = ::std::move(from);
  }

  inline CSDragonRelease& operator=(const CSDragonRelease& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDragonRelease& operator=(CSDragonRelease&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSDragonRelease& default_instance();

  static inline const CSDragonRelease* internal_default_instance() {
    return reinterpret_cast<const CSDragonRelease*>(
               &_CSDragonRelease_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(CSDragonRelease& a, CSDragonRelease& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDragonRelease* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDragonRelease* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSDragonRelease* New() const final {
    return CreateMaybeMessage<CSDragonRelease>(nullptr);
  }

  CSDragonRelease* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSDragonRelease>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSDragonRelease& from);
  void MergeFrom(const CSDragonRelease& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDragonRelease* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.CSDragonRelease";
  }
  protected:
  explicit CSDragonRelease(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRatioFieldNumber = 1,
    kPropsIDFieldNumber = 2,
  };
  // int32 Ratio = 1;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 PropsID = 2;
  void clear_propsid();
  ::PROTOBUF_NAMESPACE_ID::int32 propsid() const;
  void set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_propsid() const;
  void _internal_set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.CSDragonRelease)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 propsid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCDragonRelease PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCDragonRelease) */ {
 public:
  inline SCDragonRelease() : SCDragonRelease(nullptr) {}
  virtual ~SCDragonRelease();

  SCDragonRelease(const SCDragonRelease& from);
  SCDragonRelease(SCDragonRelease&& from) noexcept
    : SCDragonRelease() {
    *this = ::std::move(from);
  }

  inline SCDragonRelease& operator=(const SCDragonRelease& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCDragonRelease& operator=(SCDragonRelease&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCDragonRelease& default_instance();

  static inline const SCDragonRelease* internal_default_instance() {
    return reinterpret_cast<const SCDragonRelease*>(
               &_SCDragonRelease_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(SCDragonRelease& a, SCDragonRelease& b) {
    a.Swap(&b);
  }
  inline void Swap(SCDragonRelease* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCDragonRelease* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCDragonRelease* New() const final {
    return CreateMaybeMessage<SCDragonRelease>(nullptr);
  }

  SCDragonRelease* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCDragonRelease>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCDragonRelease& from);
  void MergeFrom(const SCDragonRelease& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCDragonRelease* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCDragonRelease";
  }
  protected:
  explicit SCDragonRelease(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttackInfoFieldNumber = 3,
    kStartTimeFieldNumber = 1,
    kPlayerIdFieldNumber = 2,
  };
  // .JSBY.SpecialAttackInfo AttackInfo = 3;
  bool has_attackinfo() const;
  private:
  bool _internal_has_attackinfo() const;
  public:
  void clear_attackinfo();
  const ::JSBY::SpecialAttackInfo& attackinfo() const;
  ::JSBY::SpecialAttackInfo* release_attackinfo();
  ::JSBY::SpecialAttackInfo* mutable_attackinfo();
  void set_allocated_attackinfo(::JSBY::SpecialAttackInfo* attackinfo);
  private:
  const ::JSBY::SpecialAttackInfo& _internal_attackinfo() const;
  ::JSBY::SpecialAttackInfo* _internal_mutable_attackinfo();
  public:
  void unsafe_arena_set_allocated_attackinfo(
      ::JSBY::SpecialAttackInfo* attackinfo);
  ::JSBY::SpecialAttackInfo* unsafe_arena_release_attackinfo();

  // int32 StartTime = 1;
  void clear_starttime();
  ::PROTOBUF_NAMESPACE_ID::int32 starttime() const;
  void set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_starttime() const;
  void _internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 PlayerId = 2;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCDragonRelease)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::JSBY::SpecialAttackInfo* attackinfo_;
  ::PROTOBUF_NAMESPACE_ID::int32 starttime_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCPushDragonRelease PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCPushDragonRelease) */ {
 public:
  inline SCPushDragonRelease() : SCPushDragonRelease(nullptr) {}
  virtual ~SCPushDragonRelease();

  SCPushDragonRelease(const SCPushDragonRelease& from);
  SCPushDragonRelease(SCPushDragonRelease&& from) noexcept
    : SCPushDragonRelease() {
    *this = ::std::move(from);
  }

  inline SCPushDragonRelease& operator=(const SCPushDragonRelease& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPushDragonRelease& operator=(SCPushDragonRelease&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPushDragonRelease& default_instance();

  static inline const SCPushDragonRelease* internal_default_instance() {
    return reinterpret_cast<const SCPushDragonRelease*>(
               &_SCPushDragonRelease_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(SCPushDragonRelease& a, SCPushDragonRelease& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPushDragonRelease* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPushDragonRelease* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPushDragonRelease* New() const final {
    return CreateMaybeMessage<SCPushDragonRelease>(nullptr);
  }

  SCPushDragonRelease* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPushDragonRelease>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPushDragonRelease& from);
  void MergeFrom(const SCPushDragonRelease& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPushDragonRelease* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCPushDragonRelease";
  }
  protected:
  explicit SCPushDragonRelease(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttackInfoFieldNumber = 3,
    kStartTimeFieldNumber = 1,
    kPlayerIdFieldNumber = 2,
  };
  // .JSBY.SpecialAttackInfo AttackInfo = 3;
  bool has_attackinfo() const;
  private:
  bool _internal_has_attackinfo() const;
  public:
  void clear_attackinfo();
  const ::JSBY::SpecialAttackInfo& attackinfo() const;
  ::JSBY::SpecialAttackInfo* release_attackinfo();
  ::JSBY::SpecialAttackInfo* mutable_attackinfo();
  void set_allocated_attackinfo(::JSBY::SpecialAttackInfo* attackinfo);
  private:
  const ::JSBY::SpecialAttackInfo& _internal_attackinfo() const;
  ::JSBY::SpecialAttackInfo* _internal_mutable_attackinfo();
  public:
  void unsafe_arena_set_allocated_attackinfo(
      ::JSBY::SpecialAttackInfo* attackinfo);
  ::JSBY::SpecialAttackInfo* unsafe_arena_release_attackinfo();

  // int32 StartTime = 1;
  void clear_starttime();
  ::PROTOBUF_NAMESPACE_ID::int32 starttime() const;
  void set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_starttime() const;
  void _internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 PlayerId = 2;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCPushDragonRelease)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::JSBY::SpecialAttackInfo* attackinfo_;
  ::PROTOBUF_NAMESPACE_ID::int32 starttime_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCPushDragonEnd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCPushDragonEnd) */ {
 public:
  inline SCPushDragonEnd() : SCPushDragonEnd(nullptr) {}
  virtual ~SCPushDragonEnd();

  SCPushDragonEnd(const SCPushDragonEnd& from);
  SCPushDragonEnd(SCPushDragonEnd&& from) noexcept
    : SCPushDragonEnd() {
    *this = ::std::move(from);
  }

  inline SCPushDragonEnd& operator=(const SCPushDragonEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPushDragonEnd& operator=(SCPushDragonEnd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPushDragonEnd& default_instance();

  static inline const SCPushDragonEnd* internal_default_instance() {
    return reinterpret_cast<const SCPushDragonEnd*>(
               &_SCPushDragonEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(SCPushDragonEnd& a, SCPushDragonEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPushDragonEnd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPushDragonEnd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPushDragonEnd* New() const final {
    return CreateMaybeMessage<SCPushDragonEnd>(nullptr);
  }

  SCPushDragonEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPushDragonEnd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPushDragonEnd& from);
  void MergeFrom(const SCPushDragonEnd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPushDragonEnd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCPushDragonEnd";
  }
  protected:
  explicit SCPushDragonEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // int32 PlayerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCPushDragonEnd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCPushSelfDragonState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCPushSelfDragonState) */ {
 public:
  inline SCPushSelfDragonState() : SCPushSelfDragonState(nullptr) {}
  virtual ~SCPushSelfDragonState();

  SCPushSelfDragonState(const SCPushSelfDragonState& from);
  SCPushSelfDragonState(SCPushSelfDragonState&& from) noexcept
    : SCPushSelfDragonState() {
    *this = ::std::move(from);
  }

  inline SCPushSelfDragonState& operator=(const SCPushSelfDragonState& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPushSelfDragonState& operator=(SCPushSelfDragonState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPushSelfDragonState& default_instance();

  static inline const SCPushSelfDragonState* internal_default_instance() {
    return reinterpret_cast<const SCPushSelfDragonState*>(
               &_SCPushSelfDragonState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(SCPushSelfDragonState& a, SCPushSelfDragonState& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPushSelfDragonState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPushSelfDragonState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPushSelfDragonState* New() const final {
    return CreateMaybeMessage<SCPushSelfDragonState>(nullptr);
  }

  SCPushSelfDragonState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPushSelfDragonState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPushSelfDragonState& from);
  void MergeFrom(const SCPushSelfDragonState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPushSelfDragonState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCPushSelfDragonState";
  }
  protected:
  explicit SCPushSelfDragonState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProgressBarCountFieldNumber = 1,
    kProgressBarFieldNumber = 2,
    kPropsIDFieldNumber = 3,
  };
  // int32 ProgressBarCount = 1;
  void clear_progressbarcount();
  ::PROTOBUF_NAMESPACE_ID::int32 progressbarcount() const;
  void set_progressbarcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_progressbarcount() const;
  void _internal_set_progressbarcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ProgressBar = 2;
  void clear_progressbar();
  ::PROTOBUF_NAMESPACE_ID::int32 progressbar() const;
  void set_progressbar(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_progressbar() const;
  void _internal_set_progressbar(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 PropsID = 3;
  void clear_propsid();
  ::PROTOBUF_NAMESPACE_ID::int32 propsid() const;
  void set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_propsid() const;
  void _internal_set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCPushSelfDragonState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 progressbarcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 progressbar_;
  ::PROTOBUF_NAMESPACE_ID::int32 propsid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class CSOneKeyUpdateHero PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.CSOneKeyUpdateHero) */ {
 public:
  inline CSOneKeyUpdateHero() : CSOneKeyUpdateHero(nullptr) {}
  virtual ~CSOneKeyUpdateHero();

  CSOneKeyUpdateHero(const CSOneKeyUpdateHero& from);
  CSOneKeyUpdateHero(CSOneKeyUpdateHero&& from) noexcept
    : CSOneKeyUpdateHero() {
    *this = ::std::move(from);
  }

  inline CSOneKeyUpdateHero& operator=(const CSOneKeyUpdateHero& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSOneKeyUpdateHero& operator=(CSOneKeyUpdateHero&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSOneKeyUpdateHero& default_instance();

  static inline const CSOneKeyUpdateHero* internal_default_instance() {
    return reinterpret_cast<const CSOneKeyUpdateHero*>(
               &_CSOneKeyUpdateHero_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(CSOneKeyUpdateHero& a, CSOneKeyUpdateHero& b) {
    a.Swap(&b);
  }
  inline void Swap(CSOneKeyUpdateHero* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSOneKeyUpdateHero* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSOneKeyUpdateHero* New() const final {
    return CreateMaybeMessage<CSOneKeyUpdateHero>(nullptr);
  }

  CSOneKeyUpdateHero* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSOneKeyUpdateHero>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSOneKeyUpdateHero& from);
  void MergeFrom(const CSOneKeyUpdateHero& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSOneKeyUpdateHero* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.CSOneKeyUpdateHero";
  }
  protected:
  explicit CSOneKeyUpdateHero(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeroIdFieldNumber = 1,
  };
  // repeated int32 HeroId = 1;
  int heroid_size() const;
  private:
  int _internal_heroid_size() const;
  public:
  void clear_heroid();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_heroid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_heroid() const;
  void _internal_add_heroid(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_heroid();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 heroid(int index) const;
  void set_heroid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_heroid(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      heroid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_heroid();

  // @@protoc_insertion_point(class_scope:JSBY.CSOneKeyUpdateHero)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > heroid_;
  mutable std::atomic<int> _heroid_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCOneKeyUpdateHero PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCOneKeyUpdateHero) */ {
 public:
  inline SCOneKeyUpdateHero() : SCOneKeyUpdateHero(nullptr) {}
  virtual ~SCOneKeyUpdateHero();

  SCOneKeyUpdateHero(const SCOneKeyUpdateHero& from);
  SCOneKeyUpdateHero(SCOneKeyUpdateHero&& from) noexcept
    : SCOneKeyUpdateHero() {
    *this = ::std::move(from);
  }

  inline SCOneKeyUpdateHero& operator=(const SCOneKeyUpdateHero& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCOneKeyUpdateHero& operator=(SCOneKeyUpdateHero&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCOneKeyUpdateHero& default_instance();

  static inline const SCOneKeyUpdateHero* internal_default_instance() {
    return reinterpret_cast<const SCOneKeyUpdateHero*>(
               &_SCOneKeyUpdateHero_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(SCOneKeyUpdateHero& a, SCOneKeyUpdateHero& b) {
    a.Swap(&b);
  }
  inline void Swap(SCOneKeyUpdateHero* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCOneKeyUpdateHero* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCOneKeyUpdateHero* New() const final {
    return CreateMaybeMessage<SCOneKeyUpdateHero>(nullptr);
  }

  SCOneKeyUpdateHero* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCOneKeyUpdateHero>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCOneKeyUpdateHero& from);
  void MergeFrom(const SCOneKeyUpdateHero& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCOneKeyUpdateHero* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCOneKeyUpdateHero";
  }
  protected:
  explicit SCOneKeyUpdateHero(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaveInfoFieldNumber = 2,
    kUpdateInfoFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kTableIdFieldNumber = 4,
  };
  // .JSBY.TowerHeroInfo LeaveInfo = 2;
  bool has_leaveinfo() const;
  private:
  bool _internal_has_leaveinfo() const;
  public:
  void clear_leaveinfo();
  const ::JSBY::TowerHeroInfo& leaveinfo() const;
  ::JSBY::TowerHeroInfo* release_leaveinfo();
  ::JSBY::TowerHeroInfo* mutable_leaveinfo();
  void set_allocated_leaveinfo(::JSBY::TowerHeroInfo* leaveinfo);
  private:
  const ::JSBY::TowerHeroInfo& _internal_leaveinfo() const;
  ::JSBY::TowerHeroInfo* _internal_mutable_leaveinfo();
  public:
  void unsafe_arena_set_allocated_leaveinfo(
      ::JSBY::TowerHeroInfo* leaveinfo);
  ::JSBY::TowerHeroInfo* unsafe_arena_release_leaveinfo();

  // .JSBY.TowerHeroInfo updateInfo = 3;
  bool has_updateinfo() const;
  private:
  bool _internal_has_updateinfo() const;
  public:
  void clear_updateinfo();
  const ::JSBY::TowerHeroInfo& updateinfo() const;
  ::JSBY::TowerHeroInfo* release_updateinfo();
  ::JSBY::TowerHeroInfo* mutable_updateinfo();
  void set_allocated_updateinfo(::JSBY::TowerHeroInfo* updateinfo);
  private:
  const ::JSBY::TowerHeroInfo& _internal_updateinfo() const;
  ::JSBY::TowerHeroInfo* _internal_mutable_updateinfo();
  public:
  void unsafe_arena_set_allocated_updateinfo(
      ::JSBY::TowerHeroInfo* updateinfo);
  ::JSBY::TowerHeroInfo* unsafe_arena_release_updateinfo();

  // int32 PlayerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 TableId = 4;
  void clear_tableid();
  ::PROTOBUF_NAMESPACE_ID::int32 tableid() const;
  void set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tableid() const;
  void _internal_set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCOneKeyUpdateHero)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::JSBY::TowerHeroInfo* leaveinfo_;
  ::JSBY::TowerHeroInfo* updateinfo_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 tableid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCPushGhostDragonRelease PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCPushGhostDragonRelease) */ {
 public:
  inline SCPushGhostDragonRelease() : SCPushGhostDragonRelease(nullptr) {}
  virtual ~SCPushGhostDragonRelease();

  SCPushGhostDragonRelease(const SCPushGhostDragonRelease& from);
  SCPushGhostDragonRelease(SCPushGhostDragonRelease&& from) noexcept
    : SCPushGhostDragonRelease() {
    *this = ::std::move(from);
  }

  inline SCPushGhostDragonRelease& operator=(const SCPushGhostDragonRelease& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPushGhostDragonRelease& operator=(SCPushGhostDragonRelease&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPushGhostDragonRelease& default_instance();

  static inline const SCPushGhostDragonRelease* internal_default_instance() {
    return reinterpret_cast<const SCPushGhostDragonRelease*>(
               &_SCPushGhostDragonRelease_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(SCPushGhostDragonRelease& a, SCPushGhostDragonRelease& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPushGhostDragonRelease* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPushGhostDragonRelease* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPushGhostDragonRelease* New() const final {
    return CreateMaybeMessage<SCPushGhostDragonRelease>(nullptr);
  }

  SCPushGhostDragonRelease* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPushGhostDragonRelease>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPushGhostDragonRelease& from);
  void MergeFrom(const SCPushGhostDragonRelease& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPushGhostDragonRelease* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCPushGhostDragonRelease";
  }
  protected:
  explicit SCPushGhostDragonRelease(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttackInfoFieldNumber = 7,
    kStartTimeFieldNumber = 1,
    kPlayerIdFieldNumber = 2,
    kPositionIdFieldNumber = 3,
    kAttackCountFieldNumber = 4,
    kUseCountFieldNumber = 5,
    kRatioFieldNumber = 6,
  };
  // .JSBY.SpecialAttackInfo AttackInfo = 7;
  bool has_attackinfo() const;
  private:
  bool _internal_has_attackinfo() const;
  public:
  void clear_attackinfo();
  const ::JSBY::SpecialAttackInfo& attackinfo() const;
  ::JSBY::SpecialAttackInfo* release_attackinfo();
  ::JSBY::SpecialAttackInfo* mutable_attackinfo();
  void set_allocated_attackinfo(::JSBY::SpecialAttackInfo* attackinfo);
  private:
  const ::JSBY::SpecialAttackInfo& _internal_attackinfo() const;
  ::JSBY::SpecialAttackInfo* _internal_mutable_attackinfo();
  public:
  void unsafe_arena_set_allocated_attackinfo(
      ::JSBY::SpecialAttackInfo* attackinfo);
  ::JSBY::SpecialAttackInfo* unsafe_arena_release_attackinfo();

  // int32 StartTime = 1;
  void clear_starttime();
  ::PROTOBUF_NAMESPACE_ID::int32 starttime() const;
  void set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_starttime() const;
  void _internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 PlayerId = 2;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 PositionId = 3;
  void clear_positionid();
  ::PROTOBUF_NAMESPACE_ID::int32 positionid() const;
  void set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_positionid() const;
  void _internal_set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 AttackCount = 4;
  void clear_attackcount();
  ::PROTOBUF_NAMESPACE_ID::int32 attackcount() const;
  void set_attackcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attackcount() const;
  void _internal_set_attackcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 UseCount = 5;
  void clear_usecount();
  ::PROTOBUF_NAMESPACE_ID::int32 usecount() const;
  void set_usecount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_usecount() const;
  void _internal_set_usecount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Ratio = 6;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCPushGhostDragonRelease)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::JSBY::SpecialAttackInfo* attackinfo_;
  ::PROTOBUF_NAMESPACE_ID::int32 starttime_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 positionid_;
  ::PROTOBUF_NAMESPACE_ID::int32 attackcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 usecount_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCPushGhostDragonEnd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCPushGhostDragonEnd) */ {
 public:
  inline SCPushGhostDragonEnd() : SCPushGhostDragonEnd(nullptr) {}
  virtual ~SCPushGhostDragonEnd();

  SCPushGhostDragonEnd(const SCPushGhostDragonEnd& from);
  SCPushGhostDragonEnd(SCPushGhostDragonEnd&& from) noexcept
    : SCPushGhostDragonEnd() {
    *this = ::std::move(from);
  }

  inline SCPushGhostDragonEnd& operator=(const SCPushGhostDragonEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPushGhostDragonEnd& operator=(SCPushGhostDragonEnd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPushGhostDragonEnd& default_instance();

  static inline const SCPushGhostDragonEnd* internal_default_instance() {
    return reinterpret_cast<const SCPushGhostDragonEnd*>(
               &_SCPushGhostDragonEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(SCPushGhostDragonEnd& a, SCPushGhostDragonEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPushGhostDragonEnd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPushGhostDragonEnd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPushGhostDragonEnd* New() const final {
    return CreateMaybeMessage<SCPushGhostDragonEnd>(nullptr);
  }

  SCPushGhostDragonEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPushGhostDragonEnd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPushGhostDragonEnd& from);
  void MergeFrom(const SCPushGhostDragonEnd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPushGhostDragonEnd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCPushGhostDragonEnd";
  }
  protected:
  explicit SCPushGhostDragonEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kTableIDFieldNumber = 2,
  };
  // int32 PlayerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 TableID = 2;
  void clear_tableid();
  ::PROTOBUF_NAMESPACE_ID::int32 tableid() const;
  void set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tableid() const;
  void _internal_set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCPushGhostDragonEnd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 tableid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCPushSelfGhostDragonState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCPushSelfGhostDragonState) */ {
 public:
  inline SCPushSelfGhostDragonState() : SCPushSelfGhostDragonState(nullptr) {}
  virtual ~SCPushSelfGhostDragonState();

  SCPushSelfGhostDragonState(const SCPushSelfGhostDragonState& from);
  SCPushSelfGhostDragonState(SCPushSelfGhostDragonState&& from) noexcept
    : SCPushSelfGhostDragonState() {
    *this = ::std::move(from);
  }

  inline SCPushSelfGhostDragonState& operator=(const SCPushSelfGhostDragonState& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPushSelfGhostDragonState& operator=(SCPushSelfGhostDragonState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPushSelfGhostDragonState& default_instance();

  static inline const SCPushSelfGhostDragonState* internal_default_instance() {
    return reinterpret_cast<const SCPushSelfGhostDragonState*>(
               &_SCPushSelfGhostDragonState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(SCPushSelfGhostDragonState& a, SCPushSelfGhostDragonState& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPushSelfGhostDragonState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPushSelfGhostDragonState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPushSelfGhostDragonState* New() const final {
    return CreateMaybeMessage<SCPushSelfGhostDragonState>(nullptr);
  }

  SCPushSelfGhostDragonState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPushSelfGhostDragonState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPushSelfGhostDragonState& from);
  void MergeFrom(const SCPushSelfGhostDragonState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPushSelfGhostDragonState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCPushSelfGhostDragonState";
  }
  protected:
  explicit SCPushSelfGhostDragonState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
  };
  // int32 Count = 1;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCPushSelfGhostDragonState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class HeroMoney PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.HeroMoney) */ {
 public:
  inline HeroMoney() : HeroMoney(nullptr) {}
  virtual ~HeroMoney();

  HeroMoney(const HeroMoney& from);
  HeroMoney(HeroMoney&& from) noexcept
    : HeroMoney() {
    *this = ::std::move(from);
  }

  inline HeroMoney& operator=(const HeroMoney& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeroMoney& operator=(HeroMoney&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HeroMoney& default_instance();

  static inline const HeroMoney* internal_default_instance() {
    return reinterpret_cast<const HeroMoney*>(
               &_HeroMoney_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(HeroMoney& a, HeroMoney& b) {
    a.Swap(&b);
  }
  inline void Swap(HeroMoney* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeroMoney* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeroMoney* New() const final {
    return CreateMaybeMessage<HeroMoney>(nullptr);
  }

  HeroMoney* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeroMoney>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HeroMoney& from);
  void MergeFrom(const HeroMoney& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeroMoney* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.HeroMoney";
  }
  protected:
  explicit HeroMoney(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUniqueIdFieldNumber = 1,
    kPlayerIdFieldNumber = 2,
    kMoneyFieldNumber = 3,
  };
  // int32 UniqueId = 1;
  void clear_uniqueid();
  ::PROTOBUF_NAMESPACE_ID::int32 uniqueid() const;
  void set_uniqueid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uniqueid() const;
  void _internal_set_uniqueid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 PlayerId = 2;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Money = 3;
  void clear_money();
  ::PROTOBUF_NAMESPACE_ID::int32 money() const;
  void set_money(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_money() const;
  void _internal_set_money(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.HeroMoney)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 uniqueid_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 money_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCPushSyncHeroMoney PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCPushSyncHeroMoney) */ {
 public:
  inline SCPushSyncHeroMoney() : SCPushSyncHeroMoney(nullptr) {}
  virtual ~SCPushSyncHeroMoney();

  SCPushSyncHeroMoney(const SCPushSyncHeroMoney& from);
  SCPushSyncHeroMoney(SCPushSyncHeroMoney&& from) noexcept
    : SCPushSyncHeroMoney() {
    *this = ::std::move(from);
  }

  inline SCPushSyncHeroMoney& operator=(const SCPushSyncHeroMoney& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPushSyncHeroMoney& operator=(SCPushSyncHeroMoney&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPushSyncHeroMoney& default_instance();

  static inline const SCPushSyncHeroMoney* internal_default_instance() {
    return reinterpret_cast<const SCPushSyncHeroMoney*>(
               &_SCPushSyncHeroMoney_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(SCPushSyncHeroMoney& a, SCPushSyncHeroMoney& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPushSyncHeroMoney* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPushSyncHeroMoney* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPushSyncHeroMoney* New() const final {
    return CreateMaybeMessage<SCPushSyncHeroMoney>(nullptr);
  }

  SCPushSyncHeroMoney* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPushSyncHeroMoney>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPushSyncHeroMoney& from);
  void MergeFrom(const SCPushSyncHeroMoney& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPushSyncHeroMoney* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCPushSyncHeroMoney";
  }
  protected:
  explicit SCPushSyncHeroMoney(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeroMoneyFieldNumber = 1,
  };
  // .JSBY.HeroMoney HeroMoney = 1;
  bool has_heromoney() const;
  private:
  bool _internal_has_heromoney() const;
  public:
  void clear_heromoney();
  const ::JSBY::HeroMoney& heromoney() const;
  ::JSBY::HeroMoney* release_heromoney();
  ::JSBY::HeroMoney* mutable_heromoney();
  void set_allocated_heromoney(::JSBY::HeroMoney* heromoney);
  private:
  const ::JSBY::HeroMoney& _internal_heromoney() const;
  ::JSBY::HeroMoney* _internal_mutable_heromoney();
  public:
  void unsafe_arena_set_allocated_heromoney(
      ::JSBY::HeroMoney* heromoney);
  ::JSBY::HeroMoney* unsafe_arena_release_heromoney();

  // @@protoc_insertion_point(class_scope:JSBY.SCPushSyncHeroMoney)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::JSBY::HeroMoney* heromoney_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCPushMonsterDead PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCPushMonsterDead) */ {
 public:
  inline SCPushMonsterDead() : SCPushMonsterDead(nullptr) {}
  virtual ~SCPushMonsterDead();

  SCPushMonsterDead(const SCPushMonsterDead& from);
  SCPushMonsterDead(SCPushMonsterDead&& from) noexcept
    : SCPushMonsterDead() {
    *this = ::std::move(from);
  }

  inline SCPushMonsterDead& operator=(const SCPushMonsterDead& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPushMonsterDead& operator=(SCPushMonsterDead&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPushMonsterDead& default_instance();

  static inline const SCPushMonsterDead* internal_default_instance() {
    return reinterpret_cast<const SCPushMonsterDead*>(
               &_SCPushMonsterDead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(SCPushMonsterDead& a, SCPushMonsterDead& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPushMonsterDead* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPushMonsterDead* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPushMonsterDead* New() const final {
    return CreateMaybeMessage<SCPushMonsterDead>(nullptr);
  }

  SCPushMonsterDead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPushMonsterDead>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPushMonsterDead& from);
  void MergeFrom(const SCPushMonsterDead& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPushMonsterDead* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCPushMonsterDead";
  }
  protected:
  explicit SCPushMonsterDead(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionIDFieldNumber = 1,
    kTableIDFieldNumber = 2,
  };
  // int32 PositionID = 1;
  void clear_positionid();
  ::PROTOBUF_NAMESPACE_ID::int32 positionid() const;
  void set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_positionid() const;
  void _internal_set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 TableID = 2;
  void clear_tableid();
  ::PROTOBUF_NAMESPACE_ID::int32 tableid() const;
  void set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tableid() const;
  void _internal_set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCPushMonsterDead)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 positionid_;
  ::PROTOBUF_NAMESPACE_ID::int32 tableid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class CSDebugData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.CSDebugData) */ {
 public:
  inline CSDebugData() : CSDebugData(nullptr) {}
  virtual ~CSDebugData();

  CSDebugData(const CSDebugData& from);
  CSDebugData(CSDebugData&& from) noexcept
    : CSDebugData() {
    *this = ::std::move(from);
  }

  inline CSDebugData& operator=(const CSDebugData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDebugData& operator=(CSDebugData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSDebugData& default_instance();

  static inline const CSDebugData* internal_default_instance() {
    return reinterpret_cast<const CSDebugData*>(
               &_CSDebugData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(CSDebugData& a, CSDebugData& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDebugData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDebugData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSDebugData* New() const final {
    return CreateMaybeMessage<CSDebugData>(nullptr);
  }

  CSDebugData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSDebugData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSDebugData& from);
  void MergeFrom(const CSDebugData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDebugData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.CSDebugData";
  }
  protected:
  explicit CSDebugData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDebugDataFieldNumber = 1,
  };
  // string DebugData = 1;
  void clear_debugdata();
  const std::string& debugdata() const;
  void set_debugdata(const std::string& value);
  void set_debugdata(std::string&& value);
  void set_debugdata(const char* value);
  void set_debugdata(const char* value, size_t size);
  std::string* mutable_debugdata();
  std::string* release_debugdata();
  void set_allocated_debugdata(std::string* debugdata);
  private:
  const std::string& _internal_debugdata() const;
  void _internal_set_debugdata(const std::string& value);
  std::string* _internal_mutable_debugdata();
  public:

  // @@protoc_insertion_point(class_scope:JSBY.CSDebugData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr debugdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCDebugData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCDebugData) */ {
 public:
  inline SCDebugData() : SCDebugData(nullptr) {}
  virtual ~SCDebugData();

  SCDebugData(const SCDebugData& from);
  SCDebugData(SCDebugData&& from) noexcept
    : SCDebugData() {
    *this = ::std::move(from);
  }

  inline SCDebugData& operator=(const SCDebugData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCDebugData& operator=(SCDebugData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCDebugData& default_instance();

  static inline const SCDebugData* internal_default_instance() {
    return reinterpret_cast<const SCDebugData*>(
               &_SCDebugData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(SCDebugData& a, SCDebugData& b) {
    a.Swap(&b);
  }
  inline void Swap(SCDebugData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCDebugData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCDebugData* New() const final {
    return CreateMaybeMessage<SCDebugData>(nullptr);
  }

  SCDebugData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCDebugData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCDebugData& from);
  void MergeFrom(const SCDebugData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCDebugData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCDebugData";
  }
  protected:
  explicit SCDebugData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:JSBY.SCDebugData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCPushMonsterBuff PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCPushMonsterBuff) */ {
 public:
  inline SCPushMonsterBuff() : SCPushMonsterBuff(nullptr) {}
  virtual ~SCPushMonsterBuff();

  SCPushMonsterBuff(const SCPushMonsterBuff& from);
  SCPushMonsterBuff(SCPushMonsterBuff&& from) noexcept
    : SCPushMonsterBuff() {
    *this = ::std::move(from);
  }

  inline SCPushMonsterBuff& operator=(const SCPushMonsterBuff& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPushMonsterBuff& operator=(SCPushMonsterBuff&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPushMonsterBuff& default_instance();

  static inline const SCPushMonsterBuff* internal_default_instance() {
    return reinterpret_cast<const SCPushMonsterBuff*>(
               &_SCPushMonsterBuff_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(SCPushMonsterBuff& a, SCPushMonsterBuff& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPushMonsterBuff* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPushMonsterBuff* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPushMonsterBuff* New() const final {
    return CreateMaybeMessage<SCPushMonsterBuff>(nullptr);
  }

  SCPushMonsterBuff* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPushMonsterBuff>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPushMonsterBuff& from);
  void MergeFrom(const SCPushMonsterBuff& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPushMonsterBuff* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCPushMonsterBuff";
  }
  protected:
  explicit SCPushMonsterBuff(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionIDFieldNumber = 1,
    kBuffTypeFieldNumber = 2,
    kStateFieldNumber = 3,
  };
  // int32 PositionID = 1;
  void clear_positionid();
  ::PROTOBUF_NAMESPACE_ID::int32 positionid() const;
  void set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_positionid() const;
  void _internal_set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 BuffType = 2;
  void clear_bufftype();
  ::PROTOBUF_NAMESPACE_ID::int32 bufftype() const;
  void set_bufftype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bufftype() const;
  void _internal_set_bufftype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 State = 3;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCPushMonsterBuff)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 positionid_;
  ::PROTOBUF_NAMESPACE_ID::int32 bufftype_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class TableState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.TableState) */ {
 public:
  inline TableState() : TableState(nullptr) {}
  virtual ~TableState();

  TableState(const TableState& from);
  TableState(TableState&& from) noexcept
    : TableState() {
    *this = ::std::move(from);
  }

  inline TableState& operator=(const TableState& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableState& operator=(TableState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TableState& default_instance();

  static inline const TableState* internal_default_instance() {
    return reinterpret_cast<const TableState*>(
               &_TableState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(TableState& a, TableState& b) {
    a.Swap(&b);
  }
  inline void Swap(TableState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableState* New() const final {
    return CreateMaybeMessage<TableState>(nullptr);
  }

  TableState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableState& from);
  void MergeFrom(const TableState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.TableState";
  }
  protected:
  explicit TableState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableIdFieldNumber = 1,
    kTablePlayerFieldNumber = 2,
  };
  // int32 TableId = 1;
  void clear_tableid();
  ::PROTOBUF_NAMESPACE_ID::int32 tableid() const;
  void set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tableid() const;
  void _internal_set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 TablePlayer = 2;
  void clear_tableplayer();
  ::PROTOBUF_NAMESPACE_ID::int32 tableplayer() const;
  void set_tableplayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tableplayer() const;
  void _internal_set_tableplayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.TableState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 tableid_;
  ::PROTOBUF_NAMESPACE_ID::int32 tableplayer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class CSGetTableId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.CSGetTableId) */ {
 public:
  inline CSGetTableId() : CSGetTableId(nullptr) {}
  virtual ~CSGetTableId();

  CSGetTableId(const CSGetTableId& from);
  CSGetTableId(CSGetTableId&& from) noexcept
    : CSGetTableId() {
    *this = ::std::move(from);
  }

  inline CSGetTableId& operator=(const CSGetTableId& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSGetTableId& operator=(CSGetTableId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSGetTableId& default_instance();

  static inline const CSGetTableId* internal_default_instance() {
    return reinterpret_cast<const CSGetTableId*>(
               &_CSGetTableId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(CSGetTableId& a, CSGetTableId& b) {
    a.Swap(&b);
  }
  inline void Swap(CSGetTableId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSGetTableId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSGetTableId* New() const final {
    return CreateMaybeMessage<CSGetTableId>(nullptr);
  }

  CSGetTableId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSGetTableId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSGetTableId& from);
  void MergeFrom(const CSGetTableId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSGetTableId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.CSGetTableId";
  }
  protected:
  explicit CSGetTableId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:JSBY.CSGetTableId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCGetTableId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCGetTableId) */ {
 public:
  inline SCGetTableId() : SCGetTableId(nullptr) {}
  virtual ~SCGetTableId();

  SCGetTableId(const SCGetTableId& from);
  SCGetTableId(SCGetTableId&& from) noexcept
    : SCGetTableId() {
    *this = ::std::move(from);
  }

  inline SCGetTableId& operator=(const SCGetTableId& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGetTableId& operator=(SCGetTableId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGetTableId& default_instance();

  static inline const SCGetTableId* internal_default_instance() {
    return reinterpret_cast<const SCGetTableId*>(
               &_SCGetTableId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(SCGetTableId& a, SCGetTableId& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGetTableId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGetTableId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGetTableId* New() const final {
    return CreateMaybeMessage<SCGetTableId>(nullptr);
  }

  SCGetTableId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGetTableId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGetTableId& from);
  void MergeFrom(const SCGetTableId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGetTableId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCGetTableId";
  }
  protected:
  explicit SCGetTableId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableIdFieldNumber = 1,
  };
  // .JSBY.TableState TableId = 1;
  bool has_tableid() const;
  private:
  bool _internal_has_tableid() const;
  public:
  void clear_tableid();
  const ::JSBY::TableState& tableid() const;
  ::JSBY::TableState* release_tableid();
  ::JSBY::TableState* mutable_tableid();
  void set_allocated_tableid(::JSBY::TableState* tableid);
  private:
  const ::JSBY::TableState& _internal_tableid() const;
  ::JSBY::TableState* _internal_mutable_tableid();
  public:
  void unsafe_arena_set_allocated_tableid(
      ::JSBY::TableState* tableid);
  ::JSBY::TableState* unsafe_arena_release_tableid();

  // @@protoc_insertion_point(class_scope:JSBY.SCGetTableId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::JSBY::TableState* tableid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCPlayerVipLevel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCPlayerVipLevel) */ {
 public:
  inline SCPlayerVipLevel() : SCPlayerVipLevel(nullptr) {}
  virtual ~SCPlayerVipLevel();

  SCPlayerVipLevel(const SCPlayerVipLevel& from);
  SCPlayerVipLevel(SCPlayerVipLevel&& from) noexcept
    : SCPlayerVipLevel() {
    *this = ::std::move(from);
  }

  inline SCPlayerVipLevel& operator=(const SCPlayerVipLevel& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPlayerVipLevel& operator=(SCPlayerVipLevel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPlayerVipLevel& default_instance();

  static inline const SCPlayerVipLevel* internal_default_instance() {
    return reinterpret_cast<const SCPlayerVipLevel*>(
               &_SCPlayerVipLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(SCPlayerVipLevel& a, SCPlayerVipLevel& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPlayerVipLevel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPlayerVipLevel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPlayerVipLevel* New() const final {
    return CreateMaybeMessage<SCPlayerVipLevel>(nullptr);
  }

  SCPlayerVipLevel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPlayerVipLevel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPlayerVipLevel& from);
  void MergeFrom(const SCPlayerVipLevel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPlayerVipLevel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCPlayerVipLevel";
  }
  protected:
  explicit SCPlayerVipLevel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kLevelFieldNumber = 2,
    kIsVipFieldNumber = 3,
  };
  // int32 PlayerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Level = 2;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool IsVip = 3;
  void clear_isvip();
  bool isvip() const;
  void set_isvip(bool value);
  private:
  bool _internal_isvip() const;
  void _internal_set_isvip(bool value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCPlayerVipLevel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  bool isvip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class DragonProps PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.DragonProps) */ {
 public:
  inline DragonProps() : DragonProps(nullptr) {}
  virtual ~DragonProps();

  DragonProps(const DragonProps& from);
  DragonProps(DragonProps&& from) noexcept
    : DragonProps() {
    *this = ::std::move(from);
  }

  inline DragonProps& operator=(const DragonProps& from) {
    CopyFrom(from);
    return *this;
  }
  inline DragonProps& operator=(DragonProps&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DragonProps& default_instance();

  static inline const DragonProps* internal_default_instance() {
    return reinterpret_cast<const DragonProps*>(
               &_DragonProps_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(DragonProps& a, DragonProps& b) {
    a.Swap(&b);
  }
  inline void Swap(DragonProps* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DragonProps* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DragonProps* New() const final {
    return CreateMaybeMessage<DragonProps>(nullptr);
  }

  DragonProps* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DragonProps>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DragonProps& from);
  void MergeFrom(const DragonProps& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DragonProps* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.DragonProps";
  }
  protected:
  explicit DragonProps(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProgressBarCountFieldNumber = 1,
    kProgressBarFieldNumber = 2,
    kPropsIDFieldNumber = 3,
  };
  // int32 ProgressBarCount = 1;
  void clear_progressbarcount();
  ::PROTOBUF_NAMESPACE_ID::int32 progressbarcount() const;
  void set_progressbarcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_progressbarcount() const;
  void _internal_set_progressbarcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ProgressBar = 2;
  void clear_progressbar();
  ::PROTOBUF_NAMESPACE_ID::int32 progressbar() const;
  void set_progressbar(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_progressbar() const;
  void _internal_set_progressbar(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 PropsID = 3;
  void clear_propsid();
  ::PROTOBUF_NAMESPACE_ID::int32 propsid() const;
  void set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_propsid() const;
  void _internal_set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.DragonProps)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 progressbarcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 progressbar_;
  ::PROTOBUF_NAMESPACE_ID::int32 propsid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class CSGetDragonProps PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.CSGetDragonProps) */ {
 public:
  inline CSGetDragonProps() : CSGetDragonProps(nullptr) {}
  virtual ~CSGetDragonProps();

  CSGetDragonProps(const CSGetDragonProps& from);
  CSGetDragonProps(CSGetDragonProps&& from) noexcept
    : CSGetDragonProps() {
    *this = ::std::move(from);
  }

  inline CSGetDragonProps& operator=(const CSGetDragonProps& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSGetDragonProps& operator=(CSGetDragonProps&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSGetDragonProps& default_instance();

  static inline const CSGetDragonProps* internal_default_instance() {
    return reinterpret_cast<const CSGetDragonProps*>(
               &_CSGetDragonProps_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(CSGetDragonProps& a, CSGetDragonProps& b) {
    a.Swap(&b);
  }
  inline void Swap(CSGetDragonProps* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSGetDragonProps* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSGetDragonProps* New() const final {
    return CreateMaybeMessage<CSGetDragonProps>(nullptr);
  }

  CSGetDragonProps* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSGetDragonProps>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSGetDragonProps& from);
  void MergeFrom(const CSGetDragonProps& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSGetDragonProps* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.CSGetDragonProps";
  }
  protected:
  explicit CSGetDragonProps(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:JSBY.CSGetDragonProps)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCGetDragonProps PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCGetDragonProps) */ {
 public:
  inline SCGetDragonProps() : SCGetDragonProps(nullptr) {}
  virtual ~SCGetDragonProps();

  SCGetDragonProps(const SCGetDragonProps& from);
  SCGetDragonProps(SCGetDragonProps&& from) noexcept
    : SCGetDragonProps() {
    *this = ::std::move(from);
  }

  inline SCGetDragonProps& operator=(const SCGetDragonProps& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGetDragonProps& operator=(SCGetDragonProps&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGetDragonProps& default_instance();

  static inline const SCGetDragonProps* internal_default_instance() {
    return reinterpret_cast<const SCGetDragonProps*>(
               &_SCGetDragonProps_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(SCGetDragonProps& a, SCGetDragonProps& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGetDragonProps* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGetDragonProps* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGetDragonProps* New() const final {
    return CreateMaybeMessage<SCGetDragonProps>(nullptr);
  }

  SCGetDragonProps* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGetDragonProps>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGetDragonProps& from);
  void MergeFrom(const SCGetDragonProps& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGetDragonProps* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCGetDragonProps";
  }
  protected:
  explicit SCGetDragonProps(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // repeated .JSBY.DragonProps Info = 1;
  int info_size() const;
  private:
  int _internal_info_size() const;
  public:
  void clear_info();
  ::JSBY::DragonProps* mutable_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSBY::DragonProps >*
      mutable_info();
  private:
  const ::JSBY::DragonProps& _internal_info(int index) const;
  ::JSBY::DragonProps* _internal_add_info();
  public:
  const ::JSBY::DragonProps& info(int index) const;
  ::JSBY::DragonProps* add_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSBY::DragonProps >&
      info() const;

  // @@protoc_insertion_point(class_scope:JSBY.SCGetDragonProps)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSBY::DragonProps > info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class CSEquipDragonProps PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.CSEquipDragonProps) */ {
 public:
  inline CSEquipDragonProps() : CSEquipDragonProps(nullptr) {}
  virtual ~CSEquipDragonProps();

  CSEquipDragonProps(const CSEquipDragonProps& from);
  CSEquipDragonProps(CSEquipDragonProps&& from) noexcept
    : CSEquipDragonProps() {
    *this = ::std::move(from);
  }

  inline CSEquipDragonProps& operator=(const CSEquipDragonProps& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSEquipDragonProps& operator=(CSEquipDragonProps&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSEquipDragonProps& default_instance();

  static inline const CSEquipDragonProps* internal_default_instance() {
    return reinterpret_cast<const CSEquipDragonProps*>(
               &_CSEquipDragonProps_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(CSEquipDragonProps& a, CSEquipDragonProps& b) {
    a.Swap(&b);
  }
  inline void Swap(CSEquipDragonProps* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSEquipDragonProps* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSEquipDragonProps* New() const final {
    return CreateMaybeMessage<CSEquipDragonProps>(nullptr);
  }

  CSEquipDragonProps* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSEquipDragonProps>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSEquipDragonProps& from);
  void MergeFrom(const CSEquipDragonProps& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSEquipDragonProps* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.CSEquipDragonProps";
  }
  protected:
  explicit CSEquipDragonProps(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropsIDFieldNumber = 1,
  };
  // int32 PropsID = 1;
  void clear_propsid();
  ::PROTOBUF_NAMESPACE_ID::int32 propsid() const;
  void set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_propsid() const;
  void _internal_set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.CSEquipDragonProps)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 propsid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCEquipDragonProps PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCEquipDragonProps) */ {
 public:
  inline SCEquipDragonProps() : SCEquipDragonProps(nullptr) {}
  virtual ~SCEquipDragonProps();

  SCEquipDragonProps(const SCEquipDragonProps& from);
  SCEquipDragonProps(SCEquipDragonProps&& from) noexcept
    : SCEquipDragonProps() {
    *this = ::std::move(from);
  }

  inline SCEquipDragonProps& operator=(const SCEquipDragonProps& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCEquipDragonProps& operator=(SCEquipDragonProps&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCEquipDragonProps& default_instance();

  static inline const SCEquipDragonProps* internal_default_instance() {
    return reinterpret_cast<const SCEquipDragonProps*>(
               &_SCEquipDragonProps_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(SCEquipDragonProps& a, SCEquipDragonProps& b) {
    a.Swap(&b);
  }
  inline void Swap(SCEquipDragonProps* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCEquipDragonProps* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCEquipDragonProps* New() const final {
    return CreateMaybeMessage<SCEquipDragonProps>(nullptr);
  }

  SCEquipDragonProps* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCEquipDragonProps>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCEquipDragonProps& from);
  void MergeFrom(const SCEquipDragonProps& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCEquipDragonProps* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCEquipDragonProps";
  }
  protected:
  explicit SCEquipDragonProps(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .JSBY.DragonProps Info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::JSBY::DragonProps& info() const;
  ::JSBY::DragonProps* release_info();
  ::JSBY::DragonProps* mutable_info();
  void set_allocated_info(::JSBY::DragonProps* info);
  private:
  const ::JSBY::DragonProps& _internal_info() const;
  ::JSBY::DragonProps* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::JSBY::DragonProps* info);
  ::JSBY::DragonProps* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:JSBY.SCEquipDragonProps)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::JSBY::DragonProps* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCPushDragonProps PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCPushDragonProps) */ {
 public:
  inline SCPushDragonProps() : SCPushDragonProps(nullptr) {}
  virtual ~SCPushDragonProps();

  SCPushDragonProps(const SCPushDragonProps& from);
  SCPushDragonProps(SCPushDragonProps&& from) noexcept
    : SCPushDragonProps() {
    *this = ::std::move(from);
  }

  inline SCPushDragonProps& operator=(const SCPushDragonProps& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPushDragonProps& operator=(SCPushDragonProps&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPushDragonProps& default_instance();

  static inline const SCPushDragonProps* internal_default_instance() {
    return reinterpret_cast<const SCPushDragonProps*>(
               &_SCPushDragonProps_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(SCPushDragonProps& a, SCPushDragonProps& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPushDragonProps* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPushDragonProps* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPushDragonProps* New() const final {
    return CreateMaybeMessage<SCPushDragonProps>(nullptr);
  }

  SCPushDragonProps* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPushDragonProps>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPushDragonProps& from);
  void MergeFrom(const SCPushDragonProps& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPushDragonProps* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCPushDragonProps";
  }
  protected:
  explicit SCPushDragonProps(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .JSBY.DragonProps Info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::JSBY::DragonProps& info() const;
  ::JSBY::DragonProps* release_info();
  ::JSBY::DragonProps* mutable_info();
  void set_allocated_info(::JSBY::DragonProps* info);
  private:
  const ::JSBY::DragonProps& _internal_info() const;
  ::JSBY::DragonProps* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::JSBY::DragonProps* info);
  ::JSBY::DragonProps* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:JSBY.SCPushDragonProps)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::JSBY::DragonProps* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class ShopInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.ShopInfo) */ {
 public:
  inline ShopInfo() : ShopInfo(nullptr) {}
  virtual ~ShopInfo();

  ShopInfo(const ShopInfo& from);
  ShopInfo(ShopInfo&& from) noexcept
    : ShopInfo() {
    *this = ::std::move(from);
  }

  inline ShopInfo& operator=(const ShopInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShopInfo& operator=(ShopInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShopInfo& default_instance();

  static inline const ShopInfo* internal_default_instance() {
    return reinterpret_cast<const ShopInfo*>(
               &_ShopInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(ShopInfo& a, ShopInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ShopInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShopInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShopInfo* New() const final {
    return CreateMaybeMessage<ShopInfo>(nullptr);
  }

  ShopInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShopInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShopInfo& from);
  void MergeFrom(const ShopInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShopInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.ShopInfo";
  }
  protected:
  explicit ShopInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kShopIDFieldNumber = 1,
    kValueFieldNumber = 3,
    kCurrencyTypeFieldNumber = 4,
    kPriceFieldNumber = 5,
    kNumFieldNumber = 6,
  };
  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 ShopID = 1;
  void clear_shopid();
  ::PROTOBUF_NAMESPACE_ID::int32 shopid() const;
  void set_shopid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shopid() const;
  void _internal_set_shopid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Value = 3;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 CurrencyType = 4;
  void clear_currencytype();
  ::PROTOBUF_NAMESPACE_ID::int32 currencytype() const;
  void set_currencytype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_currencytype() const;
  void _internal_set_currencytype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Price = 5;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::int32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Num = 6;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.ShopInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 shopid_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  ::PROTOBUF_NAMESPACE_ID::int32 currencytype_;
  ::PROTOBUF_NAMESPACE_ID::int32 price_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class CSGetShopInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.CSGetShopInfo) */ {
 public:
  inline CSGetShopInfo() : CSGetShopInfo(nullptr) {}
  virtual ~CSGetShopInfo();

  CSGetShopInfo(const CSGetShopInfo& from);
  CSGetShopInfo(CSGetShopInfo&& from) noexcept
    : CSGetShopInfo() {
    *this = ::std::move(from);
  }

  inline CSGetShopInfo& operator=(const CSGetShopInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSGetShopInfo& operator=(CSGetShopInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSGetShopInfo& default_instance();

  static inline const CSGetShopInfo* internal_default_instance() {
    return reinterpret_cast<const CSGetShopInfo*>(
               &_CSGetShopInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(CSGetShopInfo& a, CSGetShopInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSGetShopInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSGetShopInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSGetShopInfo* New() const final {
    return CreateMaybeMessage<CSGetShopInfo>(nullptr);
  }

  CSGetShopInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSGetShopInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSGetShopInfo& from);
  void MergeFrom(const CSGetShopInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSGetShopInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.CSGetShopInfo";
  }
  protected:
  explicit CSGetShopInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShopInfoTypeFieldNumber = 1,
  };
  // .JSBY.ShopType ShopInfoType = 1;
  void clear_shopinfotype();
  ::JSBY::ShopType shopinfotype() const;
  void set_shopinfotype(::JSBY::ShopType value);
  private:
  ::JSBY::ShopType _internal_shopinfotype() const;
  void _internal_set_shopinfotype(::JSBY::ShopType value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.CSGetShopInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int shopinfotype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCGetShopInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCGetShopInfo) */ {
 public:
  inline SCGetShopInfo() : SCGetShopInfo(nullptr) {}
  virtual ~SCGetShopInfo();

  SCGetShopInfo(const SCGetShopInfo& from);
  SCGetShopInfo(SCGetShopInfo&& from) noexcept
    : SCGetShopInfo() {
    *this = ::std::move(from);
  }

  inline SCGetShopInfo& operator=(const SCGetShopInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGetShopInfo& operator=(SCGetShopInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGetShopInfo& default_instance();

  static inline const SCGetShopInfo* internal_default_instance() {
    return reinterpret_cast<const SCGetShopInfo*>(
               &_SCGetShopInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(SCGetShopInfo& a, SCGetShopInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGetShopInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGetShopInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGetShopInfo* New() const final {
    return CreateMaybeMessage<SCGetShopInfo>(nullptr);
  }

  SCGetShopInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGetShopInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGetShopInfo& from);
  void MergeFrom(const SCGetShopInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGetShopInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCGetShopInfo";
  }
  protected:
  explicit SCGetShopInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .JSBY.ShopInfo Info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::JSBY::ShopInfo& info() const;
  ::JSBY::ShopInfo* release_info();
  ::JSBY::ShopInfo* mutable_info();
  void set_allocated_info(::JSBY::ShopInfo* info);
  private:
  const ::JSBY::ShopInfo& _internal_info() const;
  ::JSBY::ShopInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::JSBY::ShopInfo* info);
  ::JSBY::ShopInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:JSBY.SCGetShopInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::JSBY::ShopInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class PropsInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.PropsInfo) */ {
 public:
  inline PropsInfo() : PropsInfo(nullptr) {}
  virtual ~PropsInfo();

  PropsInfo(const PropsInfo& from);
  PropsInfo(PropsInfo&& from) noexcept
    : PropsInfo() {
    *this = ::std::move(from);
  }

  inline PropsInfo& operator=(const PropsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropsInfo& operator=(PropsInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PropsInfo& default_instance();

  static inline const PropsInfo* internal_default_instance() {
    return reinterpret_cast<const PropsInfo*>(
               &_PropsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(PropsInfo& a, PropsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PropsInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropsInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PropsInfo* New() const final {
    return CreateMaybeMessage<PropsInfo>(nullptr);
  }

  PropsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PropsInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PropsInfo& from);
  void MergeFrom(const PropsInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropsInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.PropsInfo";
  }
  protected:
  explicit PropsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropsIDFieldNumber = 1,
    kTotalNumFieldNumber = 2,
    kAddNumFieldNumber = 3,
  };
  // int32 PropsID = 1;
  void clear_propsid();
  ::PROTOBUF_NAMESPACE_ID::int32 propsid() const;
  void set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_propsid() const;
  void _internal_set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 TotalNum = 2;
  void clear_totalnum();
  ::PROTOBUF_NAMESPACE_ID::int32 totalnum() const;
  void set_totalnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_totalnum() const;
  void _internal_set_totalnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 AddNum = 3;
  void clear_addnum();
  ::PROTOBUF_NAMESPACE_ID::int32 addnum() const;
  void set_addnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_addnum() const;
  void _internal_set_addnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.PropsInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 propsid_;
  ::PROTOBUF_NAMESPACE_ID::int32 totalnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 addnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCPushPropsInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCPushPropsInfo) */ {
 public:
  inline SCPushPropsInfo() : SCPushPropsInfo(nullptr) {}
  virtual ~SCPushPropsInfo();

  SCPushPropsInfo(const SCPushPropsInfo& from);
  SCPushPropsInfo(SCPushPropsInfo&& from) noexcept
    : SCPushPropsInfo() {
    *this = ::std::move(from);
  }

  inline SCPushPropsInfo& operator=(const SCPushPropsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPushPropsInfo& operator=(SCPushPropsInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPushPropsInfo& default_instance();

  static inline const SCPushPropsInfo* internal_default_instance() {
    return reinterpret_cast<const SCPushPropsInfo*>(
               &_SCPushPropsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(SCPushPropsInfo& a, SCPushPropsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPushPropsInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPushPropsInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPushPropsInfo* New() const final {
    return CreateMaybeMessage<SCPushPropsInfo>(nullptr);
  }

  SCPushPropsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPushPropsInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPushPropsInfo& from);
  void MergeFrom(const SCPushPropsInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPushPropsInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCPushPropsInfo";
  }
  protected:
  explicit SCPushPropsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .JSBY.PropsInfo Info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::JSBY::PropsInfo& info() const;
  ::JSBY::PropsInfo* release_info();
  ::JSBY::PropsInfo* mutable_info();
  void set_allocated_info(::JSBY::PropsInfo* info);
  private:
  const ::JSBY::PropsInfo& _internal_info() const;
  ::JSBY::PropsInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::JSBY::PropsInfo* info);
  ::JSBY::PropsInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:JSBY.SCPushPropsInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::JSBY::PropsInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class CSGetMaterialsInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.CSGetMaterialsInfo) */ {
 public:
  inline CSGetMaterialsInfo() : CSGetMaterialsInfo(nullptr) {}
  virtual ~CSGetMaterialsInfo();

  CSGetMaterialsInfo(const CSGetMaterialsInfo& from);
  CSGetMaterialsInfo(CSGetMaterialsInfo&& from) noexcept
    : CSGetMaterialsInfo() {
    *this = ::std::move(from);
  }

  inline CSGetMaterialsInfo& operator=(const CSGetMaterialsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSGetMaterialsInfo& operator=(CSGetMaterialsInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSGetMaterialsInfo& default_instance();

  static inline const CSGetMaterialsInfo* internal_default_instance() {
    return reinterpret_cast<const CSGetMaterialsInfo*>(
               &_CSGetMaterialsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(CSGetMaterialsInfo& a, CSGetMaterialsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSGetMaterialsInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSGetMaterialsInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSGetMaterialsInfo* New() const final {
    return CreateMaybeMessage<CSGetMaterialsInfo>(nullptr);
  }

  CSGetMaterialsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSGetMaterialsInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSGetMaterialsInfo& from);
  void MergeFrom(const CSGetMaterialsInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSGetMaterialsInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.CSGetMaterialsInfo";
  }
  protected:
  explicit CSGetMaterialsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:JSBY.CSGetMaterialsInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCGetMaterialsInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCGetMaterialsInfo) */ {
 public:
  inline SCGetMaterialsInfo() : SCGetMaterialsInfo(nullptr) {}
  virtual ~SCGetMaterialsInfo();

  SCGetMaterialsInfo(const SCGetMaterialsInfo& from);
  SCGetMaterialsInfo(SCGetMaterialsInfo&& from) noexcept
    : SCGetMaterialsInfo() {
    *this = ::std::move(from);
  }

  inline SCGetMaterialsInfo& operator=(const SCGetMaterialsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGetMaterialsInfo& operator=(SCGetMaterialsInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGetMaterialsInfo& default_instance();

  static inline const SCGetMaterialsInfo* internal_default_instance() {
    return reinterpret_cast<const SCGetMaterialsInfo*>(
               &_SCGetMaterialsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(SCGetMaterialsInfo& a, SCGetMaterialsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGetMaterialsInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGetMaterialsInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGetMaterialsInfo* New() const final {
    return CreateMaybeMessage<SCGetMaterialsInfo>(nullptr);
  }

  SCGetMaterialsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGetMaterialsInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGetMaterialsInfo& from);
  void MergeFrom(const SCGetMaterialsInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGetMaterialsInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCGetMaterialsInfo";
  }
  protected:
  explicit SCGetMaterialsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .JSBY.PropsInfo Info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::JSBY::PropsInfo& info() const;
  ::JSBY::PropsInfo* release_info();
  ::JSBY::PropsInfo* mutable_info();
  void set_allocated_info(::JSBY::PropsInfo* info);
  private:
  const ::JSBY::PropsInfo& _internal_info() const;
  ::JSBY::PropsInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::JSBY::PropsInfo* info);
  ::JSBY::PropsInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:JSBY.SCGetMaterialsInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::JSBY::PropsInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class CSExchangeBox PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.CSExchangeBox) */ {
 public:
  inline CSExchangeBox() : CSExchangeBox(nullptr) {}
  virtual ~CSExchangeBox();

  CSExchangeBox(const CSExchangeBox& from);
  CSExchangeBox(CSExchangeBox&& from) noexcept
    : CSExchangeBox() {
    *this = ::std::move(from);
  }

  inline CSExchangeBox& operator=(const CSExchangeBox& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSExchangeBox& operator=(CSExchangeBox&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSExchangeBox& default_instance();

  static inline const CSExchangeBox* internal_default_instance() {
    return reinterpret_cast<const CSExchangeBox*>(
               &_CSExchangeBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(CSExchangeBox& a, CSExchangeBox& b) {
    a.Swap(&b);
  }
  inline void Swap(CSExchangeBox* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSExchangeBox* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSExchangeBox* New() const final {
    return CreateMaybeMessage<CSExchangeBox>(nullptr);
  }

  CSExchangeBox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSExchangeBox>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSExchangeBox& from);
  void MergeFrom(const CSExchangeBox& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSExchangeBox* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.CSExchangeBox";
  }
  protected:
  explicit CSExchangeBox(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeIDFieldNumber = 1,
  };
  // int32 TypeID = 1;
  void clear_typeid_();
  ::PROTOBUF_NAMESPACE_ID::int32 typeid_() const;
  void set_typeid_(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_typeid_() const;
  void _internal_set_typeid_(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.CSExchangeBox)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 typeid__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class RewardInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.RewardInfo) */ {
 public:
  inline RewardInfo() : RewardInfo(nullptr) {}
  virtual ~RewardInfo();

  RewardInfo(const RewardInfo& from);
  RewardInfo(RewardInfo&& from) noexcept
    : RewardInfo() {
    *this = ::std::move(from);
  }

  inline RewardInfo& operator=(const RewardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RewardInfo& operator=(RewardInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RewardInfo& default_instance();

  static inline const RewardInfo* internal_default_instance() {
    return reinterpret_cast<const RewardInfo*>(
               &_RewardInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(RewardInfo& a, RewardInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RewardInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RewardInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RewardInfo* New() const final {
    return CreateMaybeMessage<RewardInfo>(nullptr);
  }

  RewardInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RewardInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RewardInfo& from);
  void MergeFrom(const RewardInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RewardInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.RewardInfo";
  }
  protected:
  explicit RewardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropIDFieldNumber = 1,
    kPropNumFieldNumber = 2,
  };
  // int32 PropID = 1;
  void clear_propid();
  ::PROTOBUF_NAMESPACE_ID::int32 propid() const;
  void set_propid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_propid() const;
  void _internal_set_propid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 PropNum = 2;
  void clear_propnum();
  ::PROTOBUF_NAMESPACE_ID::int32 propnum() const;
  void set_propnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_propnum() const;
  void _internal_set_propnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.RewardInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 propid_;
  ::PROTOBUF_NAMESPACE_ID::int32 propnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCExchangeBox PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCExchangeBox) */ {
 public:
  inline SCExchangeBox() : SCExchangeBox(nullptr) {}
  virtual ~SCExchangeBox();

  SCExchangeBox(const SCExchangeBox& from);
  SCExchangeBox(SCExchangeBox&& from) noexcept
    : SCExchangeBox() {
    *this = ::std::move(from);
  }

  inline SCExchangeBox& operator=(const SCExchangeBox& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCExchangeBox& operator=(SCExchangeBox&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCExchangeBox& default_instance();

  static inline const SCExchangeBox* internal_default_instance() {
    return reinterpret_cast<const SCExchangeBox*>(
               &_SCExchangeBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(SCExchangeBox& a, SCExchangeBox& b) {
    a.Swap(&b);
  }
  inline void Swap(SCExchangeBox* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCExchangeBox* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCExchangeBox* New() const final {
    return CreateMaybeMessage<SCExchangeBox>(nullptr);
  }

  SCExchangeBox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCExchangeBox>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCExchangeBox& from);
  void MergeFrom(const SCExchangeBox& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCExchangeBox* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCExchangeBox";
  }
  protected:
  explicit SCExchangeBox(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardFieldNumber = 3,
    kAddRewardFieldNumber = 4,
    kTypeIDFieldNumber = 1,
    kIDFieldNumber = 2,
    kDoublingCostFieldNumber = 5,
  };
  // .JSBY.RewardInfo Reward = 3;
  bool has_reward() const;
  private:
  bool _internal_has_reward() const;
  public:
  void clear_reward();
  const ::JSBY::RewardInfo& reward() const;
  ::JSBY::RewardInfo* release_reward();
  ::JSBY::RewardInfo* mutable_reward();
  void set_allocated_reward(::JSBY::RewardInfo* reward);
  private:
  const ::JSBY::RewardInfo& _internal_reward() const;
  ::JSBY::RewardInfo* _internal_mutable_reward();
  public:
  void unsafe_arena_set_allocated_reward(
      ::JSBY::RewardInfo* reward);
  ::JSBY::RewardInfo* unsafe_arena_release_reward();

  // .JSBY.RewardInfo AddReward = 4;
  bool has_addreward() const;
  private:
  bool _internal_has_addreward() const;
  public:
  void clear_addreward();
  const ::JSBY::RewardInfo& addreward() const;
  ::JSBY::RewardInfo* release_addreward();
  ::JSBY::RewardInfo* mutable_addreward();
  void set_allocated_addreward(::JSBY::RewardInfo* addreward);
  private:
  const ::JSBY::RewardInfo& _internal_addreward() const;
  ::JSBY::RewardInfo* _internal_mutable_addreward();
  public:
  void unsafe_arena_set_allocated_addreward(
      ::JSBY::RewardInfo* addreward);
  ::JSBY::RewardInfo* unsafe_arena_release_addreward();

  // int32 TypeID = 1;
  void clear_typeid_();
  ::PROTOBUF_NAMESPACE_ID::int32 typeid_() const;
  void set_typeid_(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_typeid_() const;
  void _internal_set_typeid_(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ID = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 DoublingCost = 5;
  void clear_doublingcost();
  ::PROTOBUF_NAMESPACE_ID::int32 doublingcost() const;
  void set_doublingcost(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_doublingcost() const;
  void _internal_set_doublingcost(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCExchangeBox)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::JSBY::RewardInfo* reward_;
  ::JSBY::RewardInfo* addreward_;
  ::PROTOBUF_NAMESPACE_ID::int32 typeid__;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 doublingcost_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class CSDoublingBox PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.CSDoublingBox) */ {
 public:
  inline CSDoublingBox() : CSDoublingBox(nullptr) {}
  virtual ~CSDoublingBox();

  CSDoublingBox(const CSDoublingBox& from);
  CSDoublingBox(CSDoublingBox&& from) noexcept
    : CSDoublingBox() {
    *this = ::std::move(from);
  }

  inline CSDoublingBox& operator=(const CSDoublingBox& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDoublingBox& operator=(CSDoublingBox&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSDoublingBox& default_instance();

  static inline const CSDoublingBox* internal_default_instance() {
    return reinterpret_cast<const CSDoublingBox*>(
               &_CSDoublingBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(CSDoublingBox& a, CSDoublingBox& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDoublingBox* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDoublingBox* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSDoublingBox* New() const final {
    return CreateMaybeMessage<CSDoublingBox>(nullptr);
  }

  CSDoublingBox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSDoublingBox>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSDoublingBox& from);
  void MergeFrom(const CSDoublingBox& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDoublingBox* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.CSDoublingBox";
  }
  protected:
  explicit CSDoublingBox(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsDoublingFieldNumber = 1,
  };
  // bool IsDoubling = 1;
  void clear_isdoubling();
  bool isdoubling() const;
  void set_isdoubling(bool value);
  private:
  bool _internal_isdoubling() const;
  void _internal_set_isdoubling(bool value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.CSDoublingBox)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool isdoubling_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCDoublingBox PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCDoublingBox) */ {
 public:
  inline SCDoublingBox() : SCDoublingBox(nullptr) {}
  virtual ~SCDoublingBox();

  SCDoublingBox(const SCDoublingBox& from);
  SCDoublingBox(SCDoublingBox&& from) noexcept
    : SCDoublingBox() {
    *this = ::std::move(from);
  }

  inline SCDoublingBox& operator=(const SCDoublingBox& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCDoublingBox& operator=(SCDoublingBox&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCDoublingBox& default_instance();

  static inline const SCDoublingBox* internal_default_instance() {
    return reinterpret_cast<const SCDoublingBox*>(
               &_SCDoublingBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(SCDoublingBox& a, SCDoublingBox& b) {
    a.Swap(&b);
  }
  inline void Swap(SCDoublingBox* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCDoublingBox* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCDoublingBox* New() const final {
    return CreateMaybeMessage<SCDoublingBox>(nullptr);
  }

  SCDoublingBox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCDoublingBox>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCDoublingBox& from);
  void MergeFrom(const SCDoublingBox& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCDoublingBox* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCDoublingBox";
  }
  protected:
  explicit SCDoublingBox(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardFieldNumber = 3,
    kAddRewardFieldNumber = 4,
    kIsDoubleFieldNumber = 1,
    kIDFieldNumber = 2,
  };
  // .JSBY.RewardInfo Reward = 3;
  bool has_reward() const;
  private:
  bool _internal_has_reward() const;
  public:
  void clear_reward();
  const ::JSBY::RewardInfo& reward() const;
  ::JSBY::RewardInfo* release_reward();
  ::JSBY::RewardInfo* mutable_reward();
  void set_allocated_reward(::JSBY::RewardInfo* reward);
  private:
  const ::JSBY::RewardInfo& _internal_reward() const;
  ::JSBY::RewardInfo* _internal_mutable_reward();
  public:
  void unsafe_arena_set_allocated_reward(
      ::JSBY::RewardInfo* reward);
  ::JSBY::RewardInfo* unsafe_arena_release_reward();

  // .JSBY.RewardInfo AddReward = 4;
  bool has_addreward() const;
  private:
  bool _internal_has_addreward() const;
  public:
  void clear_addreward();
  const ::JSBY::RewardInfo& addreward() const;
  ::JSBY::RewardInfo* release_addreward();
  ::JSBY::RewardInfo* mutable_addreward();
  void set_allocated_addreward(::JSBY::RewardInfo* addreward);
  private:
  const ::JSBY::RewardInfo& _internal_addreward() const;
  ::JSBY::RewardInfo* _internal_mutable_addreward();
  public:
  void unsafe_arena_set_allocated_addreward(
      ::JSBY::RewardInfo* addreward);
  ::JSBY::RewardInfo* unsafe_arena_release_addreward();

  // bool IsDouble = 1;
  void clear_isdouble();
  bool isdouble() const;
  void set_isdouble(bool value);
  private:
  bool _internal_isdouble() const;
  void _internal_set_isdouble(bool value);
  public:

  // int32 ID = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCDoublingBox)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::JSBY::RewardInfo* reward_;
  ::JSBY::RewardInfo* addreward_;
  bool isdouble_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class CSShopBuy PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.CSShopBuy) */ {
 public:
  inline CSShopBuy() : CSShopBuy(nullptr) {}
  virtual ~CSShopBuy();

  CSShopBuy(const CSShopBuy& from);
  CSShopBuy(CSShopBuy&& from) noexcept
    : CSShopBuy() {
    *this = ::std::move(from);
  }

  inline CSShopBuy& operator=(const CSShopBuy& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSShopBuy& operator=(CSShopBuy&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSShopBuy& default_instance();

  static inline const CSShopBuy* internal_default_instance() {
    return reinterpret_cast<const CSShopBuy*>(
               &_CSShopBuy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(CSShopBuy& a, CSShopBuy& b) {
    a.Swap(&b);
  }
  inline void Swap(CSShopBuy* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSShopBuy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSShopBuy* New() const final {
    return CreateMaybeMessage<CSShopBuy>(nullptr);
  }

  CSShopBuy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSShopBuy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSShopBuy& from);
  void MergeFrom(const CSShopBuy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSShopBuy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.CSShopBuy";
  }
  protected:
  explicit CSShopBuy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropsIDFieldNumber = 1,
    kPropsNumFieldNumber = 2,
  };
  // int32 PropsID = 1;
  void clear_propsid();
  ::PROTOBUF_NAMESPACE_ID::int32 propsid() const;
  void set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_propsid() const;
  void _internal_set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 PropsNum = 2;
  void clear_propsnum();
  ::PROTOBUF_NAMESPACE_ID::int32 propsnum() const;
  void set_propsnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_propsnum() const;
  void _internal_set_propsnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.CSShopBuy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 propsid_;
  ::PROTOBUF_NAMESPACE_ID::int32 propsnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCShopBuy PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCShopBuy) */ {
 public:
  inline SCShopBuy() : SCShopBuy(nullptr) {}
  virtual ~SCShopBuy();

  SCShopBuy(const SCShopBuy& from);
  SCShopBuy(SCShopBuy&& from) noexcept
    : SCShopBuy() {
    *this = ::std::move(from);
  }

  inline SCShopBuy& operator=(const SCShopBuy& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCShopBuy& operator=(SCShopBuy&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCShopBuy& default_instance();

  static inline const SCShopBuy* internal_default_instance() {
    return reinterpret_cast<const SCShopBuy*>(
               &_SCShopBuy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(SCShopBuy& a, SCShopBuy& b) {
    a.Swap(&b);
  }
  inline void Swap(SCShopBuy* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCShopBuy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCShopBuy* New() const final {
    return CreateMaybeMessage<SCShopBuy>(nullptr);
  }

  SCShopBuy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCShopBuy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCShopBuy& from);
  void MergeFrom(const SCShopBuy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCShopBuy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCShopBuy";
  }
  protected:
  explicit SCShopBuy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropsIDFieldNumber = 1,
    kPropsNumFieldNumber = 2,
  };
  // int32 PropsID = 1;
  void clear_propsid();
  ::PROTOBUF_NAMESPACE_ID::int32 propsid() const;
  void set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_propsid() const;
  void _internal_set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 PropsNum = 2;
  void clear_propsnum();
  ::PROTOBUF_NAMESPACE_ID::int32 propsnum() const;
  void set_propsnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_propsnum() const;
  void _internal_set_propsnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCShopBuy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 propsid_;
  ::PROTOBUF_NAMESPACE_ID::int32 propsnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class MaterialsInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.MaterialsInfo) */ {
 public:
  inline MaterialsInfo() : MaterialsInfo(nullptr) {}
  virtual ~MaterialsInfo();

  MaterialsInfo(const MaterialsInfo& from);
  MaterialsInfo(MaterialsInfo&& from) noexcept
    : MaterialsInfo() {
    *this = ::std::move(from);
  }

  inline MaterialsInfo& operator=(const MaterialsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MaterialsInfo& operator=(MaterialsInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MaterialsInfo& default_instance();

  static inline const MaterialsInfo* internal_default_instance() {
    return reinterpret_cast<const MaterialsInfo*>(
               &_MaterialsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(MaterialsInfo& a, MaterialsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MaterialsInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MaterialsInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MaterialsInfo* New() const final {
    return CreateMaybeMessage<MaterialsInfo>(nullptr);
  }

  MaterialsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MaterialsInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MaterialsInfo& from);
  void MergeFrom(const MaterialsInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MaterialsInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.MaterialsInfo";
  }
  protected:
  explicit MaterialsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionIdFieldNumber = 1,
    kPropsIDFieldNumber = 2,
    kNumFieldNumber = 3,
  };
  // int32 PositionId = 1;
  void clear_positionid();
  ::PROTOBUF_NAMESPACE_ID::int32 positionid() const;
  void set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_positionid() const;
  void _internal_set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 PropsID = 2;
  void clear_propsid();
  ::PROTOBUF_NAMESPACE_ID::int32 propsid() const;
  void set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_propsid() const;
  void _internal_set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Num = 3;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.MaterialsInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 positionid_;
  ::PROTOBUF_NAMESPACE_ID::int32 propsid_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCPushDropMaterials PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCPushDropMaterials) */ {
 public:
  inline SCPushDropMaterials() : SCPushDropMaterials(nullptr) {}
  virtual ~SCPushDropMaterials();

  SCPushDropMaterials(const SCPushDropMaterials& from);
  SCPushDropMaterials(SCPushDropMaterials&& from) noexcept
    : SCPushDropMaterials() {
    *this = ::std::move(from);
  }

  inline SCPushDropMaterials& operator=(const SCPushDropMaterials& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPushDropMaterials& operator=(SCPushDropMaterials&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPushDropMaterials& default_instance();

  static inline const SCPushDropMaterials* internal_default_instance() {
    return reinterpret_cast<const SCPushDropMaterials*>(
               &_SCPushDropMaterials_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(SCPushDropMaterials& a, SCPushDropMaterials& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPushDropMaterials* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPushDropMaterials* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPushDropMaterials* New() const final {
    return CreateMaybeMessage<SCPushDropMaterials>(nullptr);
  }

  SCPushDropMaterials* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPushDropMaterials>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPushDropMaterials& from);
  void MergeFrom(const SCPushDropMaterials& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPushDropMaterials* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCPushDropMaterials";
  }
  protected:
  explicit SCPushDropMaterials(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // repeated .JSBY.MaterialsInfo Info = 1;
  int info_size() const;
  private:
  int _internal_info_size() const;
  public:
  void clear_info();
  ::JSBY::MaterialsInfo* mutable_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSBY::MaterialsInfo >*
      mutable_info();
  private:
  const ::JSBY::MaterialsInfo& _internal_info(int index) const;
  ::JSBY::MaterialsInfo* _internal_add_info();
  public:
  const ::JSBY::MaterialsInfo& info(int index) const;
  ::JSBY::MaterialsInfo* add_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSBY::MaterialsInfo >&
      info() const;

  // @@protoc_insertion_point(class_scope:JSBY.SCPushDropMaterials)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSBY::MaterialsInfo > info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCPushBalloonTimes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCPushBalloonTimes) */ {
 public:
  inline SCPushBalloonTimes() : SCPushBalloonTimes(nullptr) {}
  virtual ~SCPushBalloonTimes();

  SCPushBalloonTimes(const SCPushBalloonTimes& from);
  SCPushBalloonTimes(SCPushBalloonTimes&& from) noexcept
    : SCPushBalloonTimes() {
    *this = ::std::move(from);
  }

  inline SCPushBalloonTimes& operator=(const SCPushBalloonTimes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPushBalloonTimes& operator=(SCPushBalloonTimes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPushBalloonTimes& default_instance();

  static inline const SCPushBalloonTimes* internal_default_instance() {
    return reinterpret_cast<const SCPushBalloonTimes*>(
               &_SCPushBalloonTimes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(SCPushBalloonTimes& a, SCPushBalloonTimes& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPushBalloonTimes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPushBalloonTimes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPushBalloonTimes* New() const final {
    return CreateMaybeMessage<SCPushBalloonTimes>(nullptr);
  }

  SCPushBalloonTimes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPushBalloonTimes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPushBalloonTimes& from);
  void MergeFrom(const SCPushBalloonTimes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPushBalloonTimes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCPushBalloonTimes";
  }
  protected:
  explicit SCPushBalloonTimes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttackInfoFieldNumber = 7,
    kPositionIdFieldNumber = 1,
    kPlayerIdFieldNumber = 2,
    kFreeTimesFieldNumber = 3,
    kRatioFieldNumber = 4,
    kStartTimeFieldNumber = 5,
    kAttackCountFieldNumber = 6,
  };
  // .JSBY.SpecialAttackInfo AttackInfo = 7;
  bool has_attackinfo() const;
  private:
  bool _internal_has_attackinfo() const;
  public:
  void clear_attackinfo();
  const ::JSBY::SpecialAttackInfo& attackinfo() const;
  ::JSBY::SpecialAttackInfo* release_attackinfo();
  ::JSBY::SpecialAttackInfo* mutable_attackinfo();
  void set_allocated_attackinfo(::JSBY::SpecialAttackInfo* attackinfo);
  private:
  const ::JSBY::SpecialAttackInfo& _internal_attackinfo() const;
  ::JSBY::SpecialAttackInfo* _internal_mutable_attackinfo();
  public:
  void unsafe_arena_set_allocated_attackinfo(
      ::JSBY::SpecialAttackInfo* attackinfo);
  ::JSBY::SpecialAttackInfo* unsafe_arena_release_attackinfo();

  // int32 PositionId = 1;
  void clear_positionid();
  ::PROTOBUF_NAMESPACE_ID::int32 positionid() const;
  void set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_positionid() const;
  void _internal_set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 PlayerId = 2;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 FreeTimes = 3;
  void clear_freetimes();
  ::PROTOBUF_NAMESPACE_ID::int32 freetimes() const;
  void set_freetimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_freetimes() const;
  void _internal_set_freetimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Ratio = 4;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 StartTime = 5;
  void clear_starttime();
  ::PROTOBUF_NAMESPACE_ID::int32 starttime() const;
  void set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_starttime() const;
  void _internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 AttackCount = 6;
  void clear_attackcount();
  ::PROTOBUF_NAMESPACE_ID::int32 attackcount() const;
  void set_attackcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attackcount() const;
  void _internal_set_attackcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCPushBalloonTimes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::JSBY::SpecialAttackInfo* attackinfo_;
  ::PROTOBUF_NAMESPACE_ID::int32 positionid_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 freetimes_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 starttime_;
  ::PROTOBUF_NAMESPACE_ID::int32 attackcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SwitchInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SwitchInfo) */ {
 public:
  inline SwitchInfo() : SwitchInfo(nullptr) {}
  virtual ~SwitchInfo();

  SwitchInfo(const SwitchInfo& from);
  SwitchInfo(SwitchInfo&& from) noexcept
    : SwitchInfo() {
    *this = ::std::move(from);
  }

  inline SwitchInfo& operator=(const SwitchInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwitchInfo& operator=(SwitchInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SwitchInfo& default_instance();

  static inline const SwitchInfo* internal_default_instance() {
    return reinterpret_cast<const SwitchInfo*>(
               &_SwitchInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(SwitchInfo& a, SwitchInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SwitchInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwitchInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SwitchInfo* New() const final {
    return CreateMaybeMessage<SwitchInfo>(nullptr);
  }

  SwitchInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SwitchInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SwitchInfo& from);
  void MergeFrom(const SwitchInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwitchInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SwitchInfo";
  }
  protected:
  explicit SwitchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kOpenFieldNumber = 2,
  };
  // int32 Id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool Open = 2;
  void clear_open();
  bool open() const;
  void set_open(bool value);
  private:
  bool _internal_open() const;
  void _internal_set_open(bool value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SwitchInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  bool open_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCFunctionSwitch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCFunctionSwitch) */ {
 public:
  inline SCFunctionSwitch() : SCFunctionSwitch(nullptr) {}
  virtual ~SCFunctionSwitch();

  SCFunctionSwitch(const SCFunctionSwitch& from);
  SCFunctionSwitch(SCFunctionSwitch&& from) noexcept
    : SCFunctionSwitch() {
    *this = ::std::move(from);
  }

  inline SCFunctionSwitch& operator=(const SCFunctionSwitch& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCFunctionSwitch& operator=(SCFunctionSwitch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCFunctionSwitch& default_instance();

  static inline const SCFunctionSwitch* internal_default_instance() {
    return reinterpret_cast<const SCFunctionSwitch*>(
               &_SCFunctionSwitch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(SCFunctionSwitch& a, SCFunctionSwitch& b) {
    a.Swap(&b);
  }
  inline void Swap(SCFunctionSwitch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCFunctionSwitch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCFunctionSwitch* New() const final {
    return CreateMaybeMessage<SCFunctionSwitch>(nullptr);
  }

  SCFunctionSwitch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCFunctionSwitch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCFunctionSwitch& from);
  void MergeFrom(const SCFunctionSwitch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCFunctionSwitch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCFunctionSwitch";
  }
  protected:
  explicit SCFunctionSwitch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .JSBY.SwitchInfo Info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::JSBY::SwitchInfo& info() const;
  ::JSBY::SwitchInfo* release_info();
  ::JSBY::SwitchInfo* mutable_info();
  void set_allocated_info(::JSBY::SwitchInfo* info);
  private:
  const ::JSBY::SwitchInfo& _internal_info() const;
  ::JSBY::SwitchInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::JSBY::SwitchInfo* info);
  ::JSBY::SwitchInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:JSBY.SCFunctionSwitch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::JSBY::SwitchInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class CSSealConvertMoney PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.CSSealConvertMoney) */ {
 public:
  inline CSSealConvertMoney() : CSSealConvertMoney(nullptr) {}
  virtual ~CSSealConvertMoney();

  CSSealConvertMoney(const CSSealConvertMoney& from);
  CSSealConvertMoney(CSSealConvertMoney&& from) noexcept
    : CSSealConvertMoney() {
    *this = ::std::move(from);
  }

  inline CSSealConvertMoney& operator=(const CSSealConvertMoney& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSSealConvertMoney& operator=(CSSealConvertMoney&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSSealConvertMoney& default_instance();

  static inline const CSSealConvertMoney* internal_default_instance() {
    return reinterpret_cast<const CSSealConvertMoney*>(
               &_CSSealConvertMoney_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(CSSealConvertMoney& a, CSSealConvertMoney& b) {
    a.Swap(&b);
  }
  inline void Swap(CSSealConvertMoney* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSSealConvertMoney* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSSealConvertMoney* New() const final {
    return CreateMaybeMessage<CSSealConvertMoney>(nullptr);
  }

  CSSealConvertMoney* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSSealConvertMoney>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSSealConvertMoney& from);
  void MergeFrom(const CSSealConvertMoney& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSSealConvertMoney* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.CSSealConvertMoney";
  }
  protected:
  explicit CSSealConvertMoney(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:JSBY.CSSealConvertMoney)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCSealConvertMoney PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCSealConvertMoney) */ {
 public:
  inline SCSealConvertMoney() : SCSealConvertMoney(nullptr) {}
  virtual ~SCSealConvertMoney();

  SCSealConvertMoney(const SCSealConvertMoney& from);
  SCSealConvertMoney(SCSealConvertMoney&& from) noexcept
    : SCSealConvertMoney() {
    *this = ::std::move(from);
  }

  inline SCSealConvertMoney& operator=(const SCSealConvertMoney& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCSealConvertMoney& operator=(SCSealConvertMoney&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCSealConvertMoney& default_instance();

  static inline const SCSealConvertMoney* internal_default_instance() {
    return reinterpret_cast<const SCSealConvertMoney*>(
               &_SCSealConvertMoney_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(SCSealConvertMoney& a, SCSealConvertMoney& b) {
    a.Swap(&b);
  }
  inline void Swap(SCSealConvertMoney* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCSealConvertMoney* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCSealConvertMoney* New() const final {
    return CreateMaybeMessage<SCSealConvertMoney>(nullptr);
  }

  SCSealConvertMoney* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCSealConvertMoney>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCSealConvertMoney& from);
  void MergeFrom(const SCSealConvertMoney& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCSealConvertMoney* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCSealConvertMoney";
  }
  protected:
  explicit SCSealConvertMoney(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kSealFieldNumber = 2,
    kMoneyFieldNumber = 3,
  };
  // int32 PlayerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Seal = 2;
  void clear_seal();
  ::PROTOBUF_NAMESPACE_ID::int32 seal() const;
  void set_seal(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seal() const;
  void _internal_set_seal(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Money = 3;
  void clear_money();
  ::PROTOBUF_NAMESPACE_ID::int32 money() const;
  void set_money(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_money() const;
  void _internal_set_money(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCSealConvertMoney)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 seal_;
  ::PROTOBUF_NAMESPACE_ID::int32 money_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class ConnectMonster PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.ConnectMonster) */ {
 public:
  inline ConnectMonster() : ConnectMonster(nullptr) {}
  virtual ~ConnectMonster();

  ConnectMonster(const ConnectMonster& from);
  ConnectMonster(ConnectMonster&& from) noexcept
    : ConnectMonster() {
    *this = ::std::move(from);
  }

  inline ConnectMonster& operator=(const ConnectMonster& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectMonster& operator=(ConnectMonster&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectMonster& default_instance();

  static inline const ConnectMonster* internal_default_instance() {
    return reinterpret_cast<const ConnectMonster*>(
               &_ConnectMonster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(ConnectMonster& a, ConnectMonster& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectMonster* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectMonster* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectMonster* New() const final {
    return CreateMaybeMessage<ConnectMonster>(nullptr);
  }

  ConnectMonster* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectMonster>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectMonster& from);
  void MergeFrom(const ConnectMonster& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectMonster* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.ConnectMonster";
  }
  protected:
  explicit ConnectMonster(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionIDFieldNumber = 1,
    kMonsterIDFieldNumber = 2,
  };
  // int32 PositionID = 1;
  void clear_positionid();
  ::PROTOBUF_NAMESPACE_ID::int32 positionid() const;
  void set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_positionid() const;
  void _internal_set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 MonsterID = 2;
  void clear_monsterid();
  ::PROTOBUF_NAMESPACE_ID::int32 monsterid() const;
  void set_monsterid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_monsterid() const;
  void _internal_set_monsterid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.ConnectMonster)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 positionid_;
  ::PROTOBUF_NAMESPACE_ID::int32 monsterid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCPushConnectMonster PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCPushConnectMonster) */ {
 public:
  inline SCPushConnectMonster() : SCPushConnectMonster(nullptr) {}
  virtual ~SCPushConnectMonster();

  SCPushConnectMonster(const SCPushConnectMonster& from);
  SCPushConnectMonster(SCPushConnectMonster&& from) noexcept
    : SCPushConnectMonster() {
    *this = ::std::move(from);
  }

  inline SCPushConnectMonster& operator=(const SCPushConnectMonster& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPushConnectMonster& operator=(SCPushConnectMonster&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPushConnectMonster& default_instance();

  static inline const SCPushConnectMonster* internal_default_instance() {
    return reinterpret_cast<const SCPushConnectMonster*>(
               &_SCPushConnectMonster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(SCPushConnectMonster& a, SCPushConnectMonster& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPushConnectMonster* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPushConnectMonster* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPushConnectMonster* New() const final {
    return CreateMaybeMessage<SCPushConnectMonster>(nullptr);
  }

  SCPushConnectMonster* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPushConnectMonster>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPushConnectMonster& from);
  void MergeFrom(const SCPushConnectMonster& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPushConnectMonster* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCPushConnectMonster";
  }
  protected:
  explicit SCPushConnectMonster(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectFieldNumber = 1,
    kConnectIDFieldNumber = 2,
    kAttackPositionIDFieldNumber = 3,
  };
  // repeated .JSBY.ConnectMonster Connect = 1;
  int connect_size() const;
  private:
  int _internal_connect_size() const;
  public:
  void clear_connect();
  ::JSBY::ConnectMonster* mutable_connect(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSBY::ConnectMonster >*
      mutable_connect();
  private:
  const ::JSBY::ConnectMonster& _internal_connect(int index) const;
  ::JSBY::ConnectMonster* _internal_add_connect();
  public:
  const ::JSBY::ConnectMonster& connect(int index) const;
  ::JSBY::ConnectMonster* add_connect();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSBY::ConnectMonster >&
      connect() const;

  // int32 ConnectID = 2;
  void clear_connectid();
  ::PROTOBUF_NAMESPACE_ID::int32 connectid() const;
  void set_connectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_connectid() const;
  void _internal_set_connectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 AttackPositionID = 3;
  void clear_attackpositionid();
  ::PROTOBUF_NAMESPACE_ID::int32 attackpositionid() const;
  void set_attackpositionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attackpositionid() const;
  void _internal_set_attackpositionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCPushConnectMonster)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSBY::ConnectMonster > connect_;
  ::PROTOBUF_NAMESPACE_ID::int32 connectid_;
  ::PROTOBUF_NAMESPACE_ID::int32 attackpositionid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCGiantUpgrade PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCGiantUpgrade) */ {
 public:
  inline SCGiantUpgrade() : SCGiantUpgrade(nullptr) {}
  virtual ~SCGiantUpgrade();

  SCGiantUpgrade(const SCGiantUpgrade& from);
  SCGiantUpgrade(SCGiantUpgrade&& from) noexcept
    : SCGiantUpgrade() {
    *this = ::std::move(from);
  }

  inline SCGiantUpgrade& operator=(const SCGiantUpgrade& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCGiantUpgrade& operator=(SCGiantUpgrade&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCGiantUpgrade& default_instance();

  static inline const SCGiantUpgrade* internal_default_instance() {
    return reinterpret_cast<const SCGiantUpgrade*>(
               &_SCGiantUpgrade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(SCGiantUpgrade& a, SCGiantUpgrade& b) {
    a.Swap(&b);
  }
  inline void Swap(SCGiantUpgrade* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCGiantUpgrade* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCGiantUpgrade* New() const final {
    return CreateMaybeMessage<SCGiantUpgrade>(nullptr);
  }

  SCGiantUpgrade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCGiantUpgrade>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCGiantUpgrade& from);
  void MergeFrom(const SCGiantUpgrade& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCGiantUpgrade* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCGiantUpgrade";
  }
  protected:
  explicit SCGiantUpgrade(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttackInfoFieldNumber = 5,
    kPlayerIdFieldNumber = 1,
    kPositionIdFieldNumber = 2,
    kLevelFieldNumber = 3,
    kAttackTimesFieldNumber = 4,
    kIsOverFieldNumber = 6,
    kRatioFieldNumber = 7,
  };
  // .JSBY.SpecialAttackInfo AttackInfo = 5;
  bool has_attackinfo() const;
  private:
  bool _internal_has_attackinfo() const;
  public:
  void clear_attackinfo();
  const ::JSBY::SpecialAttackInfo& attackinfo() const;
  ::JSBY::SpecialAttackInfo* release_attackinfo();
  ::JSBY::SpecialAttackInfo* mutable_attackinfo();
  void set_allocated_attackinfo(::JSBY::SpecialAttackInfo* attackinfo);
  private:
  const ::JSBY::SpecialAttackInfo& _internal_attackinfo() const;
  ::JSBY::SpecialAttackInfo* _internal_mutable_attackinfo();
  public:
  void unsafe_arena_set_allocated_attackinfo(
      ::JSBY::SpecialAttackInfo* attackinfo);
  ::JSBY::SpecialAttackInfo* unsafe_arena_release_attackinfo();

  // int32 PlayerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 PositionId = 2;
  void clear_positionid();
  ::PROTOBUF_NAMESPACE_ID::int32 positionid() const;
  void set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_positionid() const;
  void _internal_set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Level = 3;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 AttackTimes = 4;
  void clear_attacktimes();
  ::PROTOBUF_NAMESPACE_ID::int32 attacktimes() const;
  void set_attacktimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attacktimes() const;
  void _internal_set_attacktimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool IsOver = 6;
  void clear_isover();
  bool isover() const;
  void set_isover(bool value);
  private:
  bool _internal_isover() const;
  void _internal_set_isover(bool value);
  public:

  // int32 Ratio = 7;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCGiantUpgrade)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::JSBY::SpecialAttackInfo* attackinfo_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 positionid_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 attacktimes_;
  bool isover_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCPushGiantEnd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCPushGiantEnd) */ {
 public:
  inline SCPushGiantEnd() : SCPushGiantEnd(nullptr) {}
  virtual ~SCPushGiantEnd();

  SCPushGiantEnd(const SCPushGiantEnd& from);
  SCPushGiantEnd(SCPushGiantEnd&& from) noexcept
    : SCPushGiantEnd() {
    *this = ::std::move(from);
  }

  inline SCPushGiantEnd& operator=(const SCPushGiantEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCPushGiantEnd& operator=(SCPushGiantEnd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCPushGiantEnd& default_instance();

  static inline const SCPushGiantEnd* internal_default_instance() {
    return reinterpret_cast<const SCPushGiantEnd*>(
               &_SCPushGiantEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(SCPushGiantEnd& a, SCPushGiantEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(SCPushGiantEnd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCPushGiantEnd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCPushGiantEnd* New() const final {
    return CreateMaybeMessage<SCPushGiantEnd>(nullptr);
  }

  SCPushGiantEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCPushGiantEnd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCPushGiantEnd& from);
  void MergeFrom(const SCPushGiantEnd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCPushGiantEnd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCPushGiantEnd";
  }
  protected:
  explicit SCPushGiantEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kPositionIdFieldNumber = 2,
  };
  // int32 PlayerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 PositionId = 2;
  void clear_positionid();
  ::PROTOBUF_NAMESPACE_ID::int32 positionid() const;
  void set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_positionid() const;
  void _internal_set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCPushGiantEnd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 positionid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCDropCard PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCDropCard) */ {
 public:
  inline SCDropCard() : SCDropCard(nullptr) {}
  virtual ~SCDropCard();

  SCDropCard(const SCDropCard& from);
  SCDropCard(SCDropCard&& from) noexcept
    : SCDropCard() {
    *this = ::std::move(from);
  }

  inline SCDropCard& operator=(const SCDropCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCDropCard& operator=(SCDropCard&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCDropCard& default_instance();

  static inline const SCDropCard* internal_default_instance() {
    return reinterpret_cast<const SCDropCard*>(
               &_SCDropCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(SCDropCard& a, SCDropCard& b) {
    a.Swap(&b);
  }
  inline void Swap(SCDropCard* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCDropCard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCDropCard* New() const final {
    return CreateMaybeMessage<SCDropCard>(nullptr);
  }

  SCDropCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCDropCard>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCDropCard& from);
  void MergeFrom(const SCDropCard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCDropCard* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCDropCard";
  }
  protected:
  explicit SCDropCard(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 1,
    kTypeIDFieldNumber = 2,
    kQualityFieldNumber = 3,
    kBasePowerFieldNumber = 4,
    kExtendPowerFieldNumber = 5,
    kEquipFieldNumber = 6,
    kPositionIDFieldNumber = 7,
  };
  // int32 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 TypeID = 2;
  void clear_typeid_();
  ::PROTOBUF_NAMESPACE_ID::int32 typeid_() const;
  void set_typeid_(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_typeid_() const;
  void _internal_set_typeid_(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Quality = 3;
  void clear_quality();
  ::PROTOBUF_NAMESPACE_ID::int32 quality() const;
  void set_quality(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_quality() const;
  void _internal_set_quality(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 BasePower = 4;
  void clear_basepower();
  ::PROTOBUF_NAMESPACE_ID::int32 basepower() const;
  void set_basepower(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_basepower() const;
  void _internal_set_basepower(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ExtendPower = 5;
  void clear_extendpower();
  ::PROTOBUF_NAMESPACE_ID::int32 extendpower() const;
  void set_extendpower(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_extendpower() const;
  void _internal_set_extendpower(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Equip = 6;
  void clear_equip();
  ::PROTOBUF_NAMESPACE_ID::int32 equip() const;
  void set_equip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_equip() const;
  void _internal_set_equip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 PositionID = 7;
  void clear_positionid();
  ::PROTOBUF_NAMESPACE_ID::int32 positionid() const;
  void set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_positionid() const;
  void _internal_set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCDropCard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 typeid__;
  ::PROTOBUF_NAMESPACE_ID::int32 quality_;
  ::PROTOBUF_NAMESPACE_ID::int32 basepower_;
  ::PROTOBUF_NAMESPACE_ID::int32 extendpower_;
  ::PROTOBUF_NAMESPACE_ID::int32 equip_;
  ::PROTOBUF_NAMESPACE_ID::int32 positionid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class SCAcquireSeal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.SCAcquireSeal) */ {
 public:
  inline SCAcquireSeal() : SCAcquireSeal(nullptr) {}
  virtual ~SCAcquireSeal();

  SCAcquireSeal(const SCAcquireSeal& from);
  SCAcquireSeal(SCAcquireSeal&& from) noexcept
    : SCAcquireSeal() {
    *this = ::std::move(from);
  }

  inline SCAcquireSeal& operator=(const SCAcquireSeal& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCAcquireSeal& operator=(SCAcquireSeal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCAcquireSeal& default_instance();

  static inline const SCAcquireSeal* internal_default_instance() {
    return reinterpret_cast<const SCAcquireSeal*>(
               &_SCAcquireSeal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(SCAcquireSeal& a, SCAcquireSeal& b) {
    a.Swap(&b);
  }
  inline void Swap(SCAcquireSeal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCAcquireSeal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCAcquireSeal* New() const final {
    return CreateMaybeMessage<SCAcquireSeal>(nullptr);
  }

  SCAcquireSeal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCAcquireSeal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCAcquireSeal& from);
  void MergeFrom(const SCAcquireSeal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCAcquireSeal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.SCAcquireSeal";
  }
  protected:
  explicit SCAcquireSeal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kMxlSealAddAwardRatioFieldNumber = 2,
    kHeroPositionIdFieldNumber = 3,
  };
  // int32 PlayerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 MxlSealAddAwardRatio = 2;
  void clear_mxlsealaddawardratio();
  ::PROTOBUF_NAMESPACE_ID::int32 mxlsealaddawardratio() const;
  void set_mxlsealaddawardratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mxlsealaddawardratio() const;
  void _internal_set_mxlsealaddawardratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 HeroPositionId = 3;
  void clear_heropositionid();
  ::PROTOBUF_NAMESPACE_ID::int32 heropositionid() const;
  void set_heropositionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_heropositionid() const;
  void _internal_set_heropositionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.SCAcquireSeal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 mxlsealaddawardratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 heropositionid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class FreshMoney PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.FreshMoney) */ {
 public:
  inline FreshMoney() : FreshMoney(nullptr) {}
  virtual ~FreshMoney();

  FreshMoney(const FreshMoney& from);
  FreshMoney(FreshMoney&& from) noexcept
    : FreshMoney() {
    *this = ::std::move(from);
  }

  inline FreshMoney& operator=(const FreshMoney& from) {
    CopyFrom(from);
    return *this;
  }
  inline FreshMoney& operator=(FreshMoney&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FreshMoney& default_instance();

  static inline const FreshMoney* internal_default_instance() {
    return reinterpret_cast<const FreshMoney*>(
               &_FreshMoney_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(FreshMoney& a, FreshMoney& b) {
    a.Swap(&b);
  }
  inline void Swap(FreshMoney* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FreshMoney* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FreshMoney* New() const final {
    return CreateMaybeMessage<FreshMoney>(nullptr);
  }

  FreshMoney* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FreshMoney>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FreshMoney& from);
  void MergeFrom(const FreshMoney& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FreshMoney* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.FreshMoney";
  }
  protected:
  explicit FreshMoney(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kFeeFieldNumber = 2,
    kGameIDFieldNumber = 3,
    kCYMoneyFieldNumber = 4,
  };
  // int32 PlayerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Fee = 2;
  void clear_fee();
  ::PROTOBUF_NAMESPACE_ID::int32 fee() const;
  void set_fee(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fee() const;
  void _internal_set_fee(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 GameID = 3;
  void clear_gameid();
  ::PROTOBUF_NAMESPACE_ID::int32 gameid() const;
  void set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gameid() const;
  void _internal_set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 CYMoney = 4;
  void clear_cymoney();
  ::PROTOBUF_NAMESPACE_ID::int32 cymoney() const;
  void set_cymoney(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cymoney() const;
  void _internal_set_cymoney(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.FreshMoney)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 fee_;
  ::PROTOBUF_NAMESPACE_ID::int32 gameid_;
  ::PROTOBUF_NAMESPACE_ID::int32 cymoney_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// -------------------------------------------------------------------

class ShutdownService PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JSBY.ShutdownService) */ {
 public:
  inline ShutdownService() : ShutdownService(nullptr) {}
  virtual ~ShutdownService();

  ShutdownService(const ShutdownService& from);
  ShutdownService(ShutdownService&& from) noexcept
    : ShutdownService() {
    *this = ::std::move(from);
  }

  inline ShutdownService& operator=(const ShutdownService& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShutdownService& operator=(ShutdownService&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShutdownService& default_instance();

  static inline const ShutdownService* internal_default_instance() {
    return reinterpret_cast<const ShutdownService*>(
               &_ShutdownService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  friend void swap(ShutdownService& a, ShutdownService& b) {
    a.Swap(&b);
  }
  inline void Swap(ShutdownService* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShutdownService* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShutdownService* New() const final {
    return CreateMaybeMessage<ShutdownService>(nullptr);
  }

  ShutdownService* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShutdownService>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShutdownService& from);
  void MergeFrom(const ShutdownService& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShutdownService* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JSBY.ShutdownService";
  }
  protected:
  explicit ShutdownService(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JSBY_2eproto);
    return ::descriptor_table_JSBY_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameIDFieldNumber = 1,
    kArenaIDFieldNumber = 2,
    kServerIDFieldNumber = 3,
  };
  // int32 GameID = 1;
  void clear_gameid();
  ::PROTOBUF_NAMESPACE_ID::int32 gameid() const;
  void set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gameid() const;
  void _internal_set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ArenaID = 2;
  void clear_arenaid();
  ::PROTOBUF_NAMESPACE_ID::int32 arenaid() const;
  void set_arenaid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_arenaid() const;
  void _internal_set_arenaid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ServerID = 3;
  void clear_serverid();
  ::PROTOBUF_NAMESPACE_ID::int32 serverid() const;
  void set_serverid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serverid() const;
  void _internal_set_serverid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JSBY.ShutdownService)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 gameid_;
  ::PROTOBUF_NAMESPACE_ID::int32 arenaid_;
  ::PROTOBUF_NAMESPACE_ID::int32 serverid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JSBY_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HeroInfo

// int32 ID = 1;
inline void HeroInfo::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeroInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeroInfo::id() const {
  // @@protoc_insertion_point(field_get:JSBY.HeroInfo.ID)
  return _internal_id();
}
inline void HeroInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void HeroInfo::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:JSBY.HeroInfo.ID)
}

// int32 Level = 2;
inline void HeroInfo::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeroInfo::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeroInfo::level() const {
  // @@protoc_insertion_point(field_get:JSBY.HeroInfo.Level)
  return _internal_level();
}
inline void HeroInfo::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void HeroInfo::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:JSBY.HeroInfo.Level)
}

// int32 Position = 3;
inline void HeroInfo::clear_position() {
  position_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeroInfo::_internal_position() const {
  return position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeroInfo::position() const {
  // @@protoc_insertion_point(field_get:JSBY.HeroInfo.Position)
  return _internal_position();
}
inline void HeroInfo::_internal_set_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  position_ = value;
}
inline void HeroInfo::set_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:JSBY.HeroInfo.Position)
}

// int32 Unlock = 4;
inline void HeroInfo::clear_unlock() {
  unlock_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeroInfo::_internal_unlock() const {
  return unlock_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeroInfo::unlock() const {
  // @@protoc_insertion_point(field_get:JSBY.HeroInfo.Unlock)
  return _internal_unlock();
}
inline void HeroInfo::_internal_set_unlock(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  unlock_ = value;
}
inline void HeroInfo::set_unlock(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_unlock(value);
  // @@protoc_insertion_point(field_set:JSBY.HeroInfo.Unlock)
}

// -------------------------------------------------------------------

// CSLoginGameWithToken

// int32 PlayerId = 1;
inline void CSLoginGameWithToken::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSLoginGameWithToken::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSLoginGameWithToken::playerid() const {
  // @@protoc_insertion_point(field_get:JSBY.CSLoginGameWithToken.PlayerId)
  return _internal_playerid();
}
inline void CSLoginGameWithToken::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void CSLoginGameWithToken::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:JSBY.CSLoginGameWithToken.PlayerId)
}

// string Token = 2;
inline void CSLoginGameWithToken::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& CSLoginGameWithToken::token() const {
  // @@protoc_insertion_point(field_get:JSBY.CSLoginGameWithToken.Token)
  return _internal_token();
}
inline void CSLoginGameWithToken::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:JSBY.CSLoginGameWithToken.Token)
}
inline std::string* CSLoginGameWithToken::mutable_token() {
  // @@protoc_insertion_point(field_mutable:JSBY.CSLoginGameWithToken.Token)
  return _internal_mutable_token();
}
inline const std::string& CSLoginGameWithToken::_internal_token() const {
  return token_.Get();
}
inline void CSLoginGameWithToken::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSLoginGameWithToken::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:JSBY.CSLoginGameWithToken.Token)
}
inline void CSLoginGameWithToken::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:JSBY.CSLoginGameWithToken.Token)
}
inline void CSLoginGameWithToken::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:JSBY.CSLoginGameWithToken.Token)
}
inline std::string* CSLoginGameWithToken::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSLoginGameWithToken::release_token() {
  // @@protoc_insertion_point(field_release:JSBY.CSLoginGameWithToken.Token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSLoginGameWithToken::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:JSBY.CSLoginGameWithToken.Token)
}

// string ClientVersion = 3;
inline void CSLoginGameWithToken::clear_clientversion() {
  clientversion_.ClearToEmpty();
}
inline const std::string& CSLoginGameWithToken::clientversion() const {
  // @@protoc_insertion_point(field_get:JSBY.CSLoginGameWithToken.ClientVersion)
  return _internal_clientversion();
}
inline void CSLoginGameWithToken::set_clientversion(const std::string& value) {
  _internal_set_clientversion(value);
  // @@protoc_insertion_point(field_set:JSBY.CSLoginGameWithToken.ClientVersion)
}
inline std::string* CSLoginGameWithToken::mutable_clientversion() {
  // @@protoc_insertion_point(field_mutable:JSBY.CSLoginGameWithToken.ClientVersion)
  return _internal_mutable_clientversion();
}
inline const std::string& CSLoginGameWithToken::_internal_clientversion() const {
  return clientversion_.Get();
}
inline void CSLoginGameWithToken::_internal_set_clientversion(const std::string& value) {
  
  clientversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSLoginGameWithToken::set_clientversion(std::string&& value) {
  
  clientversion_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:JSBY.CSLoginGameWithToken.ClientVersion)
}
inline void CSLoginGameWithToken::set_clientversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:JSBY.CSLoginGameWithToken.ClientVersion)
}
inline void CSLoginGameWithToken::set_clientversion(const char* value,
    size_t size) {
  
  clientversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:JSBY.CSLoginGameWithToken.ClientVersion)
}
inline std::string* CSLoginGameWithToken::_internal_mutable_clientversion() {
  
  return clientversion_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSLoginGameWithToken::release_clientversion() {
  // @@protoc_insertion_point(field_release:JSBY.CSLoginGameWithToken.ClientVersion)
  return clientversion_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSLoginGameWithToken::set_allocated_clientversion(std::string* clientversion) {
  if (clientversion != nullptr) {
    
  } else {
    
  }
  clientversion_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientversion,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:JSBY.CSLoginGameWithToken.ClientVersion)
}

// -------------------------------------------------------------------

// SCLoginGameWithToken

// int32 Money = 1;
inline void SCLoginGameWithToken::clear_money() {
  money_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLoginGameWithToken::_internal_money() const {
  return money_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLoginGameWithToken::money() const {
  // @@protoc_insertion_point(field_get:JSBY.SCLoginGameWithToken.Money)
  return _internal_money();
}
inline void SCLoginGameWithToken::_internal_set_money(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  money_ = value;
}
inline void SCLoginGameWithToken::set_money(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:JSBY.SCLoginGameWithToken.Money)
}

// int32 IsFirstLogin = 2;
inline void SCLoginGameWithToken::clear_isfirstlogin() {
  isfirstlogin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLoginGameWithToken::_internal_isfirstlogin() const {
  return isfirstlogin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLoginGameWithToken::isfirstlogin() const {
  // @@protoc_insertion_point(field_get:JSBY.SCLoginGameWithToken.IsFirstLogin)
  return _internal_isfirstlogin();
}
inline void SCLoginGameWithToken::_internal_set_isfirstlogin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  isfirstlogin_ = value;
}
inline void SCLoginGameWithToken::set_isfirstlogin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_isfirstlogin(value);
  // @@protoc_insertion_point(field_set:JSBY.SCLoginGameWithToken.IsFirstLogin)
}

// int32 UseRatio = 3;
inline void SCLoginGameWithToken::clear_useratio() {
  useratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLoginGameWithToken::_internal_useratio() const {
  return useratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLoginGameWithToken::useratio() const {
  // @@protoc_insertion_point(field_get:JSBY.SCLoginGameWithToken.UseRatio)
  return _internal_useratio();
}
inline void SCLoginGameWithToken::_internal_set_useratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  useratio_ = value;
}
inline void SCLoginGameWithToken::set_useratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_useratio(value);
  // @@protoc_insertion_point(field_set:JSBY.SCLoginGameWithToken.UseRatio)
}

// -------------------------------------------------------------------

// UserBomTimes

// int32 UsePositionId = 1;
inline void UserBomTimes::clear_usepositionid() {
  usepositionid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserBomTimes::_internal_usepositionid() const {
  return usepositionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserBomTimes::usepositionid() const {
  // @@protoc_insertion_point(field_get:JSBY.UserBomTimes.UsePositionId)
  return _internal_usepositionid();
}
inline void UserBomTimes::_internal_set_usepositionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  usepositionid_ = value;
}
inline void UserBomTimes::set_usepositionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_usepositionid(value);
  // @@protoc_insertion_point(field_set:JSBY.UserBomTimes.UsePositionId)
}

// int32 UsePositionTimes = 2;
inline void UserBomTimes::clear_usepositiontimes() {
  usepositiontimes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserBomTimes::_internal_usepositiontimes() const {
  return usepositiontimes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserBomTimes::usepositiontimes() const {
  // @@protoc_insertion_point(field_get:JSBY.UserBomTimes.UsePositionTimes)
  return _internal_usepositiontimes();
}
inline void UserBomTimes::_internal_set_usepositiontimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  usepositiontimes_ = value;
}
inline void UserBomTimes::set_usepositiontimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_usepositiontimes(value);
  // @@protoc_insertion_point(field_set:JSBY.UserBomTimes.UsePositionTimes)
}

// bool OverBom = 3;
inline void UserBomTimes::clear_overbom() {
  overbom_ = false;
}
inline bool UserBomTimes::_internal_overbom() const {
  return overbom_;
}
inline bool UserBomTimes::overbom() const {
  // @@protoc_insertion_point(field_get:JSBY.UserBomTimes.OverBom)
  return _internal_overbom();
}
inline void UserBomTimes::_internal_set_overbom(bool value) {
  
  overbom_ = value;
}
inline void UserBomTimes::set_overbom(bool value) {
  _internal_set_overbom(value);
  // @@protoc_insertion_point(field_set:JSBY.UserBomTimes.OverBom)
}

// bool AllOver = 4;
inline void UserBomTimes::clear_allover() {
  allover_ = false;
}
inline bool UserBomTimes::_internal_allover() const {
  return allover_;
}
inline bool UserBomTimes::allover() const {
  // @@protoc_insertion_point(field_get:JSBY.UserBomTimes.AllOver)
  return _internal_allover();
}
inline void UserBomTimes::_internal_set_allover(bool value) {
  
  allover_ = value;
}
inline void UserBomTimes::set_allover(bool value) {
  _internal_set_allover(value);
  // @@protoc_insertion_point(field_set:JSBY.UserBomTimes.AllOver)
}

// -------------------------------------------------------------------

// SpecialMonsterAttack

// int32 PositionId = 1;
inline void SpecialMonsterAttack::clear_positionid() {
  positionid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpecialMonsterAttack::_internal_positionid() const {
  return positionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpecialMonsterAttack::positionid() const {
  // @@protoc_insertion_point(field_get:JSBY.SpecialMonsterAttack.PositionId)
  return _internal_positionid();
}
inline void SpecialMonsterAttack::_internal_set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  positionid_ = value;
}
inline void SpecialMonsterAttack::set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_positionid(value);
  // @@protoc_insertion_point(field_set:JSBY.SpecialMonsterAttack.PositionId)
}

// int32 MonsterId = 2;
inline void SpecialMonsterAttack::clear_monsterid() {
  monsterid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpecialMonsterAttack::_internal_monsterid() const {
  return monsterid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpecialMonsterAttack::monsterid() const {
  // @@protoc_insertion_point(field_get:JSBY.SpecialMonsterAttack.MonsterId)
  return _internal_monsterid();
}
inline void SpecialMonsterAttack::_internal_set_monsterid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  monsterid_ = value;
}
inline void SpecialMonsterAttack::set_monsterid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_monsterid(value);
  // @@protoc_insertion_point(field_set:JSBY.SpecialMonsterAttack.MonsterId)
}

// int32 ChannelId = 3;
inline void SpecialMonsterAttack::clear_channelid() {
  channelid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpecialMonsterAttack::_internal_channelid() const {
  return channelid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpecialMonsterAttack::channelid() const {
  // @@protoc_insertion_point(field_get:JSBY.SpecialMonsterAttack.ChannelId)
  return _internal_channelid();
}
inline void SpecialMonsterAttack::_internal_set_channelid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channelid_ = value;
}
inline void SpecialMonsterAttack::set_channelid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:JSBY.SpecialMonsterAttack.ChannelId)
}

// int32 ProcessTime = 4;
inline void SpecialMonsterAttack::clear_processtime() {
  processtime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpecialMonsterAttack::_internal_processtime() const {
  return processtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpecialMonsterAttack::processtime() const {
  // @@protoc_insertion_point(field_get:JSBY.SpecialMonsterAttack.ProcessTime)
  return _internal_processtime();
}
inline void SpecialMonsterAttack::_internal_set_processtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  processtime_ = value;
}
inline void SpecialMonsterAttack::set_processtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_processtime(value);
  // @@protoc_insertion_point(field_set:JSBY.SpecialMonsterAttack.ProcessTime)
}

// -------------------------------------------------------------------

// CSRequestAttack

// float Ratio = 1;
inline void CSRequestAttack::clear_ratio() {
  ratio_ = 0;
}
inline float CSRequestAttack::_internal_ratio() const {
  return ratio_;
}
inline float CSRequestAttack::ratio() const {
  // @@protoc_insertion_point(field_get:JSBY.CSRequestAttack.Ratio)
  return _internal_ratio();
}
inline void CSRequestAttack::_internal_set_ratio(float value) {
  
  ratio_ = value;
}
inline void CSRequestAttack::set_ratio(float value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:JSBY.CSRequestAttack.Ratio)
}

// int32 Mode = 2;
inline void CSRequestAttack::clear_mode() {
  mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSRequestAttack::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSRequestAttack::mode() const {
  // @@protoc_insertion_point(field_get:JSBY.CSRequestAttack.Mode)
  return _internal_mode();
}
inline void CSRequestAttack::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mode_ = value;
}
inline void CSRequestAttack::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:JSBY.CSRequestAttack.Mode)
}

// int32 MonsterId = 3;
inline void CSRequestAttack::clear_monsterid() {
  monsterid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSRequestAttack::_internal_monsterid() const {
  return monsterid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSRequestAttack::monsterid() const {
  // @@protoc_insertion_point(field_get:JSBY.CSRequestAttack.MonsterId)
  return _internal_monsterid();
}
inline void CSRequestAttack::_internal_set_monsterid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  monsterid_ = value;
}
inline void CSRequestAttack::set_monsterid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_monsterid(value);
  // @@protoc_insertion_point(field_set:JSBY.CSRequestAttack.MonsterId)
}

// int32 PositionId = 4;
inline void CSRequestAttack::clear_positionid() {
  positionid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSRequestAttack::_internal_positionid() const {
  return positionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSRequestAttack::positionid() const {
  // @@protoc_insertion_point(field_get:JSBY.CSRequestAttack.PositionId)
  return _internal_positionid();
}
inline void CSRequestAttack::_internal_set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  positionid_ = value;
}
inline void CSRequestAttack::set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_positionid(value);
  // @@protoc_insertion_point(field_set:JSBY.CSRequestAttack.PositionId)
}

// int32 UsePositionId = 5;
inline void CSRequestAttack::clear_usepositionid() {
  usepositionid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSRequestAttack::_internal_usepositionid() const {
  return usepositionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSRequestAttack::usepositionid() const {
  // @@protoc_insertion_point(field_get:JSBY.CSRequestAttack.UsePositionId)
  return _internal_usepositionid();
}
inline void CSRequestAttack::_internal_set_usepositionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  usepositionid_ = value;
}
inline void CSRequestAttack::set_usepositionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_usepositionid(value);
  // @@protoc_insertion_point(field_set:JSBY.CSRequestAttack.UsePositionId)
}

// int32 UsePositionTimes = 6;
inline void CSRequestAttack::clear_usepositiontimes() {
  usepositiontimes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSRequestAttack::_internal_usepositiontimes() const {
  return usepositiontimes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSRequestAttack::usepositiontimes() const {
  // @@protoc_insertion_point(field_get:JSBY.CSRequestAttack.UsePositionTimes)
  return _internal_usepositiontimes();
}
inline void CSRequestAttack::_internal_set_usepositiontimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  usepositiontimes_ = value;
}
inline void CSRequestAttack::set_usepositiontimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_usepositiontimes(value);
  // @@protoc_insertion_point(field_set:JSBY.CSRequestAttack.UsePositionTimes)
}

// int32 SpecialType = 7;
inline void CSRequestAttack::clear_specialtype() {
  specialtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSRequestAttack::_internal_specialtype() const {
  return specialtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSRequestAttack::specialtype() const {
  // @@protoc_insertion_point(field_get:JSBY.CSRequestAttack.SpecialType)
  return _internal_specialtype();
}
inline void CSRequestAttack::_internal_set_specialtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  specialtype_ = value;
}
inline void CSRequestAttack::set_specialtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_specialtype(value);
  // @@protoc_insertion_point(field_set:JSBY.CSRequestAttack.SpecialType)
}

// .JSBY.SpecialMonsterAttack SpecialInfo = 8;
inline bool CSRequestAttack::_internal_has_specialinfo() const {
  return this != internal_default_instance() && specialinfo_ != nullptr;
}
inline bool CSRequestAttack::has_specialinfo() const {
  return _internal_has_specialinfo();
}
inline void CSRequestAttack::clear_specialinfo() {
  if (GetArena() == nullptr && specialinfo_ != nullptr) {
    delete specialinfo_;
  }
  specialinfo_ = nullptr;
}
inline const ::JSBY::SpecialMonsterAttack& CSRequestAttack::_internal_specialinfo() const {
  const ::JSBY::SpecialMonsterAttack* p = specialinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::SpecialMonsterAttack&>(
      ::JSBY::_SpecialMonsterAttack_default_instance_);
}
inline const ::JSBY::SpecialMonsterAttack& CSRequestAttack::specialinfo() const {
  // @@protoc_insertion_point(field_get:JSBY.CSRequestAttack.SpecialInfo)
  return _internal_specialinfo();
}
inline void CSRequestAttack::unsafe_arena_set_allocated_specialinfo(
    ::JSBY::SpecialMonsterAttack* specialinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(specialinfo_);
  }
  specialinfo_ = specialinfo;
  if (specialinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.CSRequestAttack.SpecialInfo)
}
inline ::JSBY::SpecialMonsterAttack* CSRequestAttack::release_specialinfo() {
  
  ::JSBY::SpecialMonsterAttack* temp = specialinfo_;
  specialinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::SpecialMonsterAttack* CSRequestAttack::unsafe_arena_release_specialinfo() {
  // @@protoc_insertion_point(field_release:JSBY.CSRequestAttack.SpecialInfo)
  
  ::JSBY::SpecialMonsterAttack* temp = specialinfo_;
  specialinfo_ = nullptr;
  return temp;
}
inline ::JSBY::SpecialMonsterAttack* CSRequestAttack::_internal_mutable_specialinfo() {
  
  if (specialinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::SpecialMonsterAttack>(GetArena());
    specialinfo_ = p;
  }
  return specialinfo_;
}
inline ::JSBY::SpecialMonsterAttack* CSRequestAttack::mutable_specialinfo() {
  // @@protoc_insertion_point(field_mutable:JSBY.CSRequestAttack.SpecialInfo)
  return _internal_mutable_specialinfo();
}
inline void CSRequestAttack::set_allocated_specialinfo(::JSBY::SpecialMonsterAttack* specialinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete specialinfo_;
  }
  if (specialinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(specialinfo);
    if (message_arena != submessage_arena) {
      specialinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, specialinfo, submessage_arena);
    }
    
  } else {
    
  }
  specialinfo_ = specialinfo;
  // @@protoc_insertion_point(field_set_allocated:JSBY.CSRequestAttack.SpecialInfo)
}

// bool DragonEnd = 9;
inline void CSRequestAttack::clear_dragonend() {
  dragonend_ = false;
}
inline bool CSRequestAttack::_internal_dragonend() const {
  return dragonend_;
}
inline bool CSRequestAttack::dragonend() const {
  // @@protoc_insertion_point(field_get:JSBY.CSRequestAttack.DragonEnd)
  return _internal_dragonend();
}
inline void CSRequestAttack::_internal_set_dragonend(bool value) {
  
  dragonend_ = value;
}
inline void CSRequestAttack::set_dragonend(bool value) {
  _internal_set_dragonend(value);
  // @@protoc_insertion_point(field_set:JSBY.CSRequestAttack.DragonEnd)
}

// int32 HeroUniqueId = 10;
inline void CSRequestAttack::clear_herouniqueid() {
  herouniqueid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSRequestAttack::_internal_herouniqueid() const {
  return herouniqueid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSRequestAttack::herouniqueid() const {
  // @@protoc_insertion_point(field_get:JSBY.CSRequestAttack.HeroUniqueId)
  return _internal_herouniqueid();
}
inline void CSRequestAttack::_internal_set_herouniqueid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  herouniqueid_ = value;
}
inline void CSRequestAttack::set_herouniqueid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_herouniqueid(value);
  // @@protoc_insertion_point(field_set:JSBY.CSRequestAttack.HeroUniqueId)
}

// -------------------------------------------------------------------

// SCRequestAttack

// -------------------------------------------------------------------

// SpecialAttackInfo

// int32 KillID = 1;
inline void SpecialAttackInfo::clear_killid() {
  killid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpecialAttackInfo::_internal_killid() const {
  return killid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpecialAttackInfo::killid() const {
  // @@protoc_insertion_point(field_get:JSBY.SpecialAttackInfo.KillID)
  return _internal_killid();
}
inline void SpecialAttackInfo::_internal_set_killid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  killid_ = value;
}
inline void SpecialAttackInfo::set_killid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_killid(value);
  // @@protoc_insertion_point(field_set:JSBY.SpecialAttackInfo.KillID)
}

// int32 SelfID = 2;
inline void SpecialAttackInfo::clear_selfid() {
  selfid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpecialAttackInfo::_internal_selfid() const {
  return selfid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpecialAttackInfo::selfid() const {
  // @@protoc_insertion_point(field_get:JSBY.SpecialAttackInfo.SelfID)
  return _internal_selfid();
}
inline void SpecialAttackInfo::_internal_set_selfid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  selfid_ = value;
}
inline void SpecialAttackInfo::set_selfid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_selfid(value);
  // @@protoc_insertion_point(field_set:JSBY.SpecialAttackInfo.SelfID)
}

// -------------------------------------------------------------------

// SCSyncMoney

// int32 Money = 1;
inline void SCSyncMoney::clear_money() {
  money_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::_internal_money() const {
  return money_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::money() const {
  // @@protoc_insertion_point(field_get:JSBY.SCSyncMoney.Money)
  return _internal_money();
}
inline void SCSyncMoney::_internal_set_money(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  money_ = value;
}
inline void SCSyncMoney::set_money(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:JSBY.SCSyncMoney.Money)
}

// int32 MonsterId = 2;
inline void SCSyncMoney::clear_monsterid() {
  monsterid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::_internal_monsterid() const {
  return monsterid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::monsterid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCSyncMoney.MonsterId)
  return _internal_monsterid();
}
inline void SCSyncMoney::_internal_set_monsterid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  monsterid_ = value;
}
inline void SCSyncMoney::set_monsterid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_monsterid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCSyncMoney.MonsterId)
}

// int32 PositionId = 3;
inline void SCSyncMoney::clear_positionid() {
  positionid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::_internal_positionid() const {
  return positionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::positionid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCSyncMoney.PositionId)
  return _internal_positionid();
}
inline void SCSyncMoney::_internal_set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  positionid_ = value;
}
inline void SCSyncMoney::set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_positionid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCSyncMoney.PositionId)
}

// int32 Type = 4;
inline void SCSyncMoney::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::type() const {
  // @@protoc_insertion_point(field_get:JSBY.SCSyncMoney.Type)
  return _internal_type();
}
inline void SCSyncMoney::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void SCSyncMoney::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:JSBY.SCSyncMoney.Type)
}

// int32 Ratio = 5;
inline void SCSyncMoney::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::ratio() const {
  // @@protoc_insertion_point(field_get:JSBY.SCSyncMoney.Ratio)
  return _internal_ratio();
}
inline void SCSyncMoney::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void SCSyncMoney::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:JSBY.SCSyncMoney.Ratio)
}

// int32 PlayerId = 6;
inline void SCSyncMoney::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::playerid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCSyncMoney.PlayerId)
  return _internal_playerid();
}
inline void SCSyncMoney::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void SCSyncMoney::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCSyncMoney.PlayerId)
}

// int32 MoneyVariation = 7;
inline void SCSyncMoney::clear_moneyvariation() {
  moneyvariation_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::_internal_moneyvariation() const {
  return moneyvariation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::moneyvariation() const {
  // @@protoc_insertion_point(field_get:JSBY.SCSyncMoney.MoneyVariation)
  return _internal_moneyvariation();
}
inline void SCSyncMoney::_internal_set_moneyvariation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  moneyvariation_ = value;
}
inline void SCSyncMoney::set_moneyvariation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_moneyvariation(value);
  // @@protoc_insertion_point(field_set:JSBY.SCSyncMoney.MoneyVariation)
}

// .JSBY.UserBomTimes Bom = 8;
inline bool SCSyncMoney::_internal_has_bom() const {
  return this != internal_default_instance() && bom_ != nullptr;
}
inline bool SCSyncMoney::has_bom() const {
  return _internal_has_bom();
}
inline void SCSyncMoney::clear_bom() {
  if (GetArena() == nullptr && bom_ != nullptr) {
    delete bom_;
  }
  bom_ = nullptr;
}
inline const ::JSBY::UserBomTimes& SCSyncMoney::_internal_bom() const {
  const ::JSBY::UserBomTimes* p = bom_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::UserBomTimes&>(
      ::JSBY::_UserBomTimes_default_instance_);
}
inline const ::JSBY::UserBomTimes& SCSyncMoney::bom() const {
  // @@protoc_insertion_point(field_get:JSBY.SCSyncMoney.Bom)
  return _internal_bom();
}
inline void SCSyncMoney::unsafe_arena_set_allocated_bom(
    ::JSBY::UserBomTimes* bom) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bom_);
  }
  bom_ = bom;
  if (bom) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.SCSyncMoney.Bom)
}
inline ::JSBY::UserBomTimes* SCSyncMoney::release_bom() {
  
  ::JSBY::UserBomTimes* temp = bom_;
  bom_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::UserBomTimes* SCSyncMoney::unsafe_arena_release_bom() {
  // @@protoc_insertion_point(field_release:JSBY.SCSyncMoney.Bom)
  
  ::JSBY::UserBomTimes* temp = bom_;
  bom_ = nullptr;
  return temp;
}
inline ::JSBY::UserBomTimes* SCSyncMoney::_internal_mutable_bom() {
  
  if (bom_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::UserBomTimes>(GetArena());
    bom_ = p;
  }
  return bom_;
}
inline ::JSBY::UserBomTimes* SCSyncMoney::mutable_bom() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCSyncMoney.Bom)
  return _internal_mutable_bom();
}
inline void SCSyncMoney::set_allocated_bom(::JSBY::UserBomTimes* bom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bom_;
  }
  if (bom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bom);
    if (message_arena != submessage_arena) {
      bom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bom, submessage_arena);
    }
    
  } else {
    
  }
  bom_ = bom;
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCSyncMoney.Bom)
}

// int32 HeroUniqueId = 9;
inline void SCSyncMoney::clear_herouniqueid() {
  herouniqueid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::_internal_herouniqueid() const {
  return herouniqueid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::herouniqueid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCSyncMoney.HeroUniqueId)
  return _internal_herouniqueid();
}
inline void SCSyncMoney::_internal_set_herouniqueid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  herouniqueid_ = value;
}
inline void SCSyncMoney::set_herouniqueid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_herouniqueid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCSyncMoney.HeroUniqueId)
}

// .JSBY.SpecialAttackInfo AttackInfo = 10;
inline bool SCSyncMoney::_internal_has_attackinfo() const {
  return this != internal_default_instance() && attackinfo_ != nullptr;
}
inline bool SCSyncMoney::has_attackinfo() const {
  return _internal_has_attackinfo();
}
inline void SCSyncMoney::clear_attackinfo() {
  if (GetArena() == nullptr && attackinfo_ != nullptr) {
    delete attackinfo_;
  }
  attackinfo_ = nullptr;
}
inline const ::JSBY::SpecialAttackInfo& SCSyncMoney::_internal_attackinfo() const {
  const ::JSBY::SpecialAttackInfo* p = attackinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::SpecialAttackInfo&>(
      ::JSBY::_SpecialAttackInfo_default_instance_);
}
inline const ::JSBY::SpecialAttackInfo& SCSyncMoney::attackinfo() const {
  // @@protoc_insertion_point(field_get:JSBY.SCSyncMoney.AttackInfo)
  return _internal_attackinfo();
}
inline void SCSyncMoney::unsafe_arena_set_allocated_attackinfo(
    ::JSBY::SpecialAttackInfo* attackinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attackinfo_);
  }
  attackinfo_ = attackinfo;
  if (attackinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.SCSyncMoney.AttackInfo)
}
inline ::JSBY::SpecialAttackInfo* SCSyncMoney::release_attackinfo() {
  
  ::JSBY::SpecialAttackInfo* temp = attackinfo_;
  attackinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::SpecialAttackInfo* SCSyncMoney::unsafe_arena_release_attackinfo() {
  // @@protoc_insertion_point(field_release:JSBY.SCSyncMoney.AttackInfo)
  
  ::JSBY::SpecialAttackInfo* temp = attackinfo_;
  attackinfo_ = nullptr;
  return temp;
}
inline ::JSBY::SpecialAttackInfo* SCSyncMoney::_internal_mutable_attackinfo() {
  
  if (attackinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::SpecialAttackInfo>(GetArena());
    attackinfo_ = p;
  }
  return attackinfo_;
}
inline ::JSBY::SpecialAttackInfo* SCSyncMoney::mutable_attackinfo() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCSyncMoney.AttackInfo)
  return _internal_mutable_attackinfo();
}
inline void SCSyncMoney::set_allocated_attackinfo(::JSBY::SpecialAttackInfo* attackinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete attackinfo_;
  }
  if (attackinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(attackinfo);
    if (message_arena != submessage_arena) {
      attackinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attackinfo, submessage_arena);
    }
    
  } else {
    
  }
  attackinfo_ = attackinfo;
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCSyncMoney.AttackInfo)
}

// int32 Eared = 11;
inline void SCSyncMoney::clear_eared() {
  eared_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::_internal_eared() const {
  return eared_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::eared() const {
  // @@protoc_insertion_point(field_get:JSBY.SCSyncMoney.Eared)
  return _internal_eared();
}
inline void SCSyncMoney::_internal_set_eared(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  eared_ = value;
}
inline void SCSyncMoney::set_eared(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eared(value);
  // @@protoc_insertion_point(field_set:JSBY.SCSyncMoney.Eared)
}

// int32 AddRatio = 12;
inline void SCSyncMoney::clear_addratio() {
  addratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::_internal_addratio() const {
  return addratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::addratio() const {
  // @@protoc_insertion_point(field_get:JSBY.SCSyncMoney.AddRatio)
  return _internal_addratio();
}
inline void SCSyncMoney::_internal_set_addratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  addratio_ = value;
}
inline void SCSyncMoney::set_addratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_addratio(value);
  // @@protoc_insertion_point(field_set:JSBY.SCSyncMoney.AddRatio)
}

// int32 BalloonRatio = 13;
inline void SCSyncMoney::clear_balloonratio() {
  balloonratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::_internal_balloonratio() const {
  return balloonratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::balloonratio() const {
  // @@protoc_insertion_point(field_get:JSBY.SCSyncMoney.BalloonRatio)
  return _internal_balloonratio();
}
inline void SCSyncMoney::_internal_set_balloonratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  balloonratio_ = value;
}
inline void SCSyncMoney::set_balloonratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_balloonratio(value);
  // @@protoc_insertion_point(field_set:JSBY.SCSyncMoney.BalloonRatio)
}

// string Others = 14;
inline void SCSyncMoney::clear_others() {
  others_.ClearToEmpty();
}
inline const std::string& SCSyncMoney::others() const {
  // @@protoc_insertion_point(field_get:JSBY.SCSyncMoney.Others)
  return _internal_others();
}
inline void SCSyncMoney::set_others(const std::string& value) {
  _internal_set_others(value);
  // @@protoc_insertion_point(field_set:JSBY.SCSyncMoney.Others)
}
inline std::string* SCSyncMoney::mutable_others() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCSyncMoney.Others)
  return _internal_mutable_others();
}
inline const std::string& SCSyncMoney::_internal_others() const {
  return others_.Get();
}
inline void SCSyncMoney::_internal_set_others(const std::string& value) {
  
  others_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SCSyncMoney::set_others(std::string&& value) {
  
  others_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:JSBY.SCSyncMoney.Others)
}
inline void SCSyncMoney::set_others(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  others_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:JSBY.SCSyncMoney.Others)
}
inline void SCSyncMoney::set_others(const char* value,
    size_t size) {
  
  others_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:JSBY.SCSyncMoney.Others)
}
inline std::string* SCSyncMoney::_internal_mutable_others() {
  
  return others_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SCSyncMoney::release_others() {
  // @@protoc_insertion_point(field_release:JSBY.SCSyncMoney.Others)
  return others_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SCSyncMoney::set_allocated_others(std::string* others) {
  if (others != nullptr) {
    
  } else {
    
  }
  others_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), others,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCSyncMoney.Others)
}

// int32 GiantHitPower = 15;
inline void SCSyncMoney::clear_gianthitpower() {
  gianthitpower_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::_internal_gianthitpower() const {
  return gianthitpower_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::gianthitpower() const {
  // @@protoc_insertion_point(field_get:JSBY.SCSyncMoney.GiantHitPower)
  return _internal_gianthitpower();
}
inline void SCSyncMoney::_internal_set_gianthitpower(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gianthitpower_ = value;
}
inline void SCSyncMoney::set_gianthitpower(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gianthitpower(value);
  // @@protoc_insertion_point(field_set:JSBY.SCSyncMoney.GiantHitPower)
}

// int32 MxlSealMoney = 16;
inline void SCSyncMoney::clear_mxlsealmoney() {
  mxlsealmoney_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::_internal_mxlsealmoney() const {
  return mxlsealmoney_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::mxlsealmoney() const {
  // @@protoc_insertion_point(field_get:JSBY.SCSyncMoney.MxlSealMoney)
  return _internal_mxlsealmoney();
}
inline void SCSyncMoney::_internal_set_mxlsealmoney(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mxlsealmoney_ = value;
}
inline void SCSyncMoney::set_mxlsealmoney(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mxlsealmoney(value);
  // @@protoc_insertion_point(field_set:JSBY.SCSyncMoney.MxlSealMoney)
}

// int32 MxlSealAddAwardRatio = 17;
inline void SCSyncMoney::clear_mxlsealaddawardratio() {
  mxlsealaddawardratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::_internal_mxlsealaddawardratio() const {
  return mxlsealaddawardratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncMoney::mxlsealaddawardratio() const {
  // @@protoc_insertion_point(field_get:JSBY.SCSyncMoney.MxlSealAddAwardRatio)
  return _internal_mxlsealaddawardratio();
}
inline void SCSyncMoney::_internal_set_mxlsealaddawardratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mxlsealaddawardratio_ = value;
}
inline void SCSyncMoney::set_mxlsealaddawardratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mxlsealaddawardratio(value);
  // @@protoc_insertion_point(field_set:JSBY.SCSyncMoney.MxlSealAddAwardRatio)
}

// string BearMultiple = 18;
inline void SCSyncMoney::clear_bearmultiple() {
  bearmultiple_.ClearToEmpty();
}
inline const std::string& SCSyncMoney::bearmultiple() const {
  // @@protoc_insertion_point(field_get:JSBY.SCSyncMoney.BearMultiple)
  return _internal_bearmultiple();
}
inline void SCSyncMoney::set_bearmultiple(const std::string& value) {
  _internal_set_bearmultiple(value);
  // @@protoc_insertion_point(field_set:JSBY.SCSyncMoney.BearMultiple)
}
inline std::string* SCSyncMoney::mutable_bearmultiple() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCSyncMoney.BearMultiple)
  return _internal_mutable_bearmultiple();
}
inline const std::string& SCSyncMoney::_internal_bearmultiple() const {
  return bearmultiple_.Get();
}
inline void SCSyncMoney::_internal_set_bearmultiple(const std::string& value) {
  
  bearmultiple_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SCSyncMoney::set_bearmultiple(std::string&& value) {
  
  bearmultiple_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:JSBY.SCSyncMoney.BearMultiple)
}
inline void SCSyncMoney::set_bearmultiple(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bearmultiple_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:JSBY.SCSyncMoney.BearMultiple)
}
inline void SCSyncMoney::set_bearmultiple(const char* value,
    size_t size) {
  
  bearmultiple_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:JSBY.SCSyncMoney.BearMultiple)
}
inline std::string* SCSyncMoney::_internal_mutable_bearmultiple() {
  
  return bearmultiple_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SCSyncMoney::release_bearmultiple() {
  // @@protoc_insertion_point(field_release:JSBY.SCSyncMoney.BearMultiple)
  return bearmultiple_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SCSyncMoney::set_allocated_bearmultiple(std::string* bearmultiple) {
  if (bearmultiple != nullptr) {
    
  } else {
    
  }
  bearmultiple_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bearmultiple,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCSyncMoney.BearMultiple)
}

// -------------------------------------------------------------------

// SCPoisonBomTimes

// int32 PositionId = 1;
inline void SCPoisonBomTimes::clear_positionid() {
  positionid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPoisonBomTimes::_internal_positionid() const {
  return positionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPoisonBomTimes::positionid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPoisonBomTimes.PositionId)
  return _internal_positionid();
}
inline void SCPoisonBomTimes::_internal_set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  positionid_ = value;
}
inline void SCPoisonBomTimes::set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_positionid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPoisonBomTimes.PositionId)
}

// int32 Times = 2;
inline void SCPoisonBomTimes::clear_times() {
  times_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPoisonBomTimes::_internal_times() const {
  return times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPoisonBomTimes::times() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPoisonBomTimes.Times)
  return _internal_times();
}
inline void SCPoisonBomTimes::_internal_set_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  times_ = value;
}
inline void SCPoisonBomTimes::set_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_times(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPoisonBomTimes.Times)
}

// int32 Ratio = 3;
inline void SCPoisonBomTimes::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPoisonBomTimes::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPoisonBomTimes::ratio() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPoisonBomTimes.Ratio)
  return _internal_ratio();
}
inline void SCPoisonBomTimes::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void SCPoisonBomTimes::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPoisonBomTimes.Ratio)
}

// repeated int32 AddTimes = 4;
inline int SCPoisonBomTimes::_internal_addtimes_size() const {
  return addtimes_.size();
}
inline int SCPoisonBomTimes::addtimes_size() const {
  return _internal_addtimes_size();
}
inline void SCPoisonBomTimes::clear_addtimes() {
  addtimes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPoisonBomTimes::_internal_addtimes(int index) const {
  return addtimes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPoisonBomTimes::addtimes(int index) const {
  // @@protoc_insertion_point(field_get:JSBY.SCPoisonBomTimes.AddTimes)
  return _internal_addtimes(index);
}
inline void SCPoisonBomTimes::set_addtimes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  addtimes_.Set(index, value);
  // @@protoc_insertion_point(field_set:JSBY.SCPoisonBomTimes.AddTimes)
}
inline void SCPoisonBomTimes::_internal_add_addtimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  addtimes_.Add(value);
}
inline void SCPoisonBomTimes::add_addtimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_addtimes(value);
  // @@protoc_insertion_point(field_add:JSBY.SCPoisonBomTimes.AddTimes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SCPoisonBomTimes::_internal_addtimes() const {
  return addtimes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SCPoisonBomTimes::addtimes() const {
  // @@protoc_insertion_point(field_list:JSBY.SCPoisonBomTimes.AddTimes)
  return _internal_addtimes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SCPoisonBomTimes::_internal_mutable_addtimes() {
  return &addtimes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SCPoisonBomTimes::mutable_addtimes() {
  // @@protoc_insertion_point(field_mutable_list:JSBY.SCPoisonBomTimes.AddTimes)
  return _internal_mutable_addtimes();
}

// int32 KillPlayerId = 5;
inline void SCPoisonBomTimes::clear_killplayerid() {
  killplayerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPoisonBomTimes::_internal_killplayerid() const {
  return killplayerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPoisonBomTimes::killplayerid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPoisonBomTimes.KillPlayerId)
  return _internal_killplayerid();
}
inline void SCPoisonBomTimes::_internal_set_killplayerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  killplayerid_ = value;
}
inline void SCPoisonBomTimes::set_killplayerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_killplayerid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPoisonBomTimes.KillPlayerId)
}

// int32 HeroUniqueId = 6;
inline void SCPoisonBomTimes::clear_herouniqueid() {
  herouniqueid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPoisonBomTimes::_internal_herouniqueid() const {
  return herouniqueid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPoisonBomTimes::herouniqueid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPoisonBomTimes.HeroUniqueId)
  return _internal_herouniqueid();
}
inline void SCPoisonBomTimes::_internal_set_herouniqueid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  herouniqueid_ = value;
}
inline void SCPoisonBomTimes::set_herouniqueid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_herouniqueid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPoisonBomTimes.HeroUniqueId)
}

// .JSBY.SpecialAttackInfo AttackInfo = 7;
inline bool SCPoisonBomTimes::_internal_has_attackinfo() const {
  return this != internal_default_instance() && attackinfo_ != nullptr;
}
inline bool SCPoisonBomTimes::has_attackinfo() const {
  return _internal_has_attackinfo();
}
inline void SCPoisonBomTimes::clear_attackinfo() {
  if (GetArena() == nullptr && attackinfo_ != nullptr) {
    delete attackinfo_;
  }
  attackinfo_ = nullptr;
}
inline const ::JSBY::SpecialAttackInfo& SCPoisonBomTimes::_internal_attackinfo() const {
  const ::JSBY::SpecialAttackInfo* p = attackinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::SpecialAttackInfo&>(
      ::JSBY::_SpecialAttackInfo_default_instance_);
}
inline const ::JSBY::SpecialAttackInfo& SCPoisonBomTimes::attackinfo() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPoisonBomTimes.AttackInfo)
  return _internal_attackinfo();
}
inline void SCPoisonBomTimes::unsafe_arena_set_allocated_attackinfo(
    ::JSBY::SpecialAttackInfo* attackinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attackinfo_);
  }
  attackinfo_ = attackinfo;
  if (attackinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.SCPoisonBomTimes.AttackInfo)
}
inline ::JSBY::SpecialAttackInfo* SCPoisonBomTimes::release_attackinfo() {
  
  ::JSBY::SpecialAttackInfo* temp = attackinfo_;
  attackinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::SpecialAttackInfo* SCPoisonBomTimes::unsafe_arena_release_attackinfo() {
  // @@protoc_insertion_point(field_release:JSBY.SCPoisonBomTimes.AttackInfo)
  
  ::JSBY::SpecialAttackInfo* temp = attackinfo_;
  attackinfo_ = nullptr;
  return temp;
}
inline ::JSBY::SpecialAttackInfo* SCPoisonBomTimes::_internal_mutable_attackinfo() {
  
  if (attackinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::SpecialAttackInfo>(GetArena());
    attackinfo_ = p;
  }
  return attackinfo_;
}
inline ::JSBY::SpecialAttackInfo* SCPoisonBomTimes::mutable_attackinfo() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCPoisonBomTimes.AttackInfo)
  return _internal_mutable_attackinfo();
}
inline void SCPoisonBomTimes::set_allocated_attackinfo(::JSBY::SpecialAttackInfo* attackinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete attackinfo_;
  }
  if (attackinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(attackinfo);
    if (message_arena != submessage_arena) {
      attackinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attackinfo, submessage_arena);
    }
    
  } else {
    
  }
  attackinfo_ = attackinfo;
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCPoisonBomTimes.AttackInfo)
}

// -------------------------------------------------------------------

// CSChangePoisonBomTimes

// int32 PositionId = 1;
inline void CSChangePoisonBomTimes::clear_positionid() {
  positionid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSChangePoisonBomTimes::_internal_positionid() const {
  return positionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSChangePoisonBomTimes::positionid() const {
  // @@protoc_insertion_point(field_get:JSBY.CSChangePoisonBomTimes.PositionId)
  return _internal_positionid();
}
inline void CSChangePoisonBomTimes::_internal_set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  positionid_ = value;
}
inline void CSChangePoisonBomTimes::set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_positionid(value);
  // @@protoc_insertion_point(field_set:JSBY.CSChangePoisonBomTimes.PositionId)
}

// int32 UsePositionTimes = 2;
inline void CSChangePoisonBomTimes::clear_usepositiontimes() {
  usepositiontimes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSChangePoisonBomTimes::_internal_usepositiontimes() const {
  return usepositiontimes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSChangePoisonBomTimes::usepositiontimes() const {
  // @@protoc_insertion_point(field_get:JSBY.CSChangePoisonBomTimes.UsePositionTimes)
  return _internal_usepositiontimes();
}
inline void CSChangePoisonBomTimes::_internal_set_usepositiontimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  usepositiontimes_ = value;
}
inline void CSChangePoisonBomTimes::set_usepositiontimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_usepositiontimes(value);
  // @@protoc_insertion_point(field_set:JSBY.CSChangePoisonBomTimes.UsePositionTimes)
}

// int32 NewPositionId = 3;
inline void CSChangePoisonBomTimes::clear_newpositionid() {
  newpositionid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSChangePoisonBomTimes::_internal_newpositionid() const {
  return newpositionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSChangePoisonBomTimes::newpositionid() const {
  // @@protoc_insertion_point(field_get:JSBY.CSChangePoisonBomTimes.NewPositionId)
  return _internal_newpositionid();
}
inline void CSChangePoisonBomTimes::_internal_set_newpositionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  newpositionid_ = value;
}
inline void CSChangePoisonBomTimes::set_newpositionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_newpositionid(value);
  // @@protoc_insertion_point(field_set:JSBY.CSChangePoisonBomTimes.NewPositionId)
}

// -------------------------------------------------------------------

// SCChangePoisonBomTimes

// -------------------------------------------------------------------

// CSEnterStage

// bool Enter = 1;
inline void CSEnterStage::clear_enter() {
  enter_ = false;
}
inline bool CSEnterStage::_internal_enter() const {
  return enter_;
}
inline bool CSEnterStage::enter() const {
  // @@protoc_insertion_point(field_get:JSBY.CSEnterStage.Enter)
  return _internal_enter();
}
inline void CSEnterStage::_internal_set_enter(bool value) {
  
  enter_ = value;
}
inline void CSEnterStage::set_enter(bool value) {
  _internal_set_enter(value);
  // @@protoc_insertion_point(field_set:JSBY.CSEnterStage.Enter)
}

// .JSBY.ModeType Mode = 2;
inline void CSEnterStage::clear_mode() {
  mode_ = 0;
}
inline ::JSBY::ModeType CSEnterStage::_internal_mode() const {
  return static_cast< ::JSBY::ModeType >(mode_);
}
inline ::JSBY::ModeType CSEnterStage::mode() const {
  // @@protoc_insertion_point(field_get:JSBY.CSEnterStage.Mode)
  return _internal_mode();
}
inline void CSEnterStage::_internal_set_mode(::JSBY::ModeType value) {
  
  mode_ = value;
}
inline void CSEnterStage::set_mode(::JSBY::ModeType value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:JSBY.CSEnterStage.Mode)
}

// -------------------------------------------------------------------

// SCEnterStage

// int32 UseRatio = 1;
inline void SCEnterStage::clear_useratio() {
  useratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCEnterStage::_internal_useratio() const {
  return useratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCEnterStage::useratio() const {
  // @@protoc_insertion_point(field_get:JSBY.SCEnterStage.UseRatio)
  return _internal_useratio();
}
inline void SCEnterStage::_internal_set_useratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  useratio_ = value;
}
inline void SCEnterStage::set_useratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_useratio(value);
  // @@protoc_insertion_point(field_set:JSBY.SCEnterStage.UseRatio)
}

// -------------------------------------------------------------------

// CSKeepRatio

// int32 Ratio = 1;
inline void CSKeepRatio::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSKeepRatio::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSKeepRatio::ratio() const {
  // @@protoc_insertion_point(field_get:JSBY.CSKeepRatio.Ratio)
  return _internal_ratio();
}
inline void CSKeepRatio::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void CSKeepRatio::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:JSBY.CSKeepRatio.Ratio)
}

// -------------------------------------------------------------------

// SCKeepRatio

// -------------------------------------------------------------------

// TrusteeshipInfo

// bool IsTrusteeship = 1;
inline void TrusteeshipInfo::clear_istrusteeship() {
  istrusteeship_ = false;
}
inline bool TrusteeshipInfo::_internal_istrusteeship() const {
  return istrusteeship_;
}
inline bool TrusteeshipInfo::istrusteeship() const {
  // @@protoc_insertion_point(field_get:JSBY.TrusteeshipInfo.IsTrusteeship)
  return _internal_istrusteeship();
}
inline void TrusteeshipInfo::_internal_set_istrusteeship(bool value) {
  
  istrusteeship_ = value;
}
inline void TrusteeshipInfo::set_istrusteeship(bool value) {
  _internal_set_istrusteeship(value);
  // @@protoc_insertion_point(field_set:JSBY.TrusteeshipInfo.IsTrusteeship)
}

// int32 HighSetValue = 2;
inline void TrusteeshipInfo::clear_highsetvalue() {
  highsetvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrusteeshipInfo::_internal_highsetvalue() const {
  return highsetvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrusteeshipInfo::highsetvalue() const {
  // @@protoc_insertion_point(field_get:JSBY.TrusteeshipInfo.HighSetValue)
  return _internal_highsetvalue();
}
inline void TrusteeshipInfo::_internal_set_highsetvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  highsetvalue_ = value;
}
inline void TrusteeshipInfo::set_highsetvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_highsetvalue(value);
  // @@protoc_insertion_point(field_set:JSBY.TrusteeshipInfo.HighSetValue)
}

// bool HighSetOpen = 3;
inline void TrusteeshipInfo::clear_highsetopen() {
  highsetopen_ = false;
}
inline bool TrusteeshipInfo::_internal_highsetopen() const {
  return highsetopen_;
}
inline bool TrusteeshipInfo::highsetopen() const {
  // @@protoc_insertion_point(field_get:JSBY.TrusteeshipInfo.HighSetOpen)
  return _internal_highsetopen();
}
inline void TrusteeshipInfo::_internal_set_highsetopen(bool value) {
  
  highsetopen_ = value;
}
inline void TrusteeshipInfo::set_highsetopen(bool value) {
  _internal_set_highsetopen(value);
  // @@protoc_insertion_point(field_set:JSBY.TrusteeshipInfo.HighSetOpen)
}

// int32 LowSetValue = 4;
inline void TrusteeshipInfo::clear_lowsetvalue() {
  lowsetvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrusteeshipInfo::_internal_lowsetvalue() const {
  return lowsetvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrusteeshipInfo::lowsetvalue() const {
  // @@protoc_insertion_point(field_get:JSBY.TrusteeshipInfo.LowSetValue)
  return _internal_lowsetvalue();
}
inline void TrusteeshipInfo::_internal_set_lowsetvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lowsetvalue_ = value;
}
inline void TrusteeshipInfo::set_lowsetvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lowsetvalue(value);
  // @@protoc_insertion_point(field_set:JSBY.TrusteeshipInfo.LowSetValue)
}

// bool LowSetOpen = 5;
inline void TrusteeshipInfo::clear_lowsetopen() {
  lowsetopen_ = false;
}
inline bool TrusteeshipInfo::_internal_lowsetopen() const {
  return lowsetopen_;
}
inline bool TrusteeshipInfo::lowsetopen() const {
  // @@protoc_insertion_point(field_get:JSBY.TrusteeshipInfo.LowSetOpen)
  return _internal_lowsetopen();
}
inline void TrusteeshipInfo::_internal_set_lowsetopen(bool value) {
  
  lowsetopen_ = value;
}
inline void TrusteeshipInfo::set_lowsetopen(bool value) {
  _internal_set_lowsetopen(value);
  // @@protoc_insertion_point(field_set:JSBY.TrusteeshipInfo.LowSetOpen)
}

// float TimeSetValue = 6;
inline void TrusteeshipInfo::clear_timesetvalue() {
  timesetvalue_ = 0;
}
inline float TrusteeshipInfo::_internal_timesetvalue() const {
  return timesetvalue_;
}
inline float TrusteeshipInfo::timesetvalue() const {
  // @@protoc_insertion_point(field_get:JSBY.TrusteeshipInfo.TimeSetValue)
  return _internal_timesetvalue();
}
inline void TrusteeshipInfo::_internal_set_timesetvalue(float value) {
  
  timesetvalue_ = value;
}
inline void TrusteeshipInfo::set_timesetvalue(float value) {
  _internal_set_timesetvalue(value);
  // @@protoc_insertion_point(field_set:JSBY.TrusteeshipInfo.TimeSetValue)
}

// bool TimeSetOpen = 7;
inline void TrusteeshipInfo::clear_timesetopen() {
  timesetopen_ = false;
}
inline bool TrusteeshipInfo::_internal_timesetopen() const {
  return timesetopen_;
}
inline bool TrusteeshipInfo::timesetopen() const {
  // @@protoc_insertion_point(field_get:JSBY.TrusteeshipInfo.TimeSetOpen)
  return _internal_timesetopen();
}
inline void TrusteeshipInfo::_internal_set_timesetopen(bool value) {
  
  timesetopen_ = value;
}
inline void TrusteeshipInfo::set_timesetopen(bool value) {
  _internal_set_timesetopen(value);
  // @@protoc_insertion_point(field_set:JSBY.TrusteeshipInfo.TimeSetOpen)
}

// -------------------------------------------------------------------

// CSGetTrusteeship

// -------------------------------------------------------------------

// SCGetTrusteeship

// .JSBY.TrusteeshipInfo Info = 1;
inline bool SCGetTrusteeship::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool SCGetTrusteeship::has_info() const {
  return _internal_has_info();
}
inline void SCGetTrusteeship::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::JSBY::TrusteeshipInfo& SCGetTrusteeship::_internal_info() const {
  const ::JSBY::TrusteeshipInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::TrusteeshipInfo&>(
      ::JSBY::_TrusteeshipInfo_default_instance_);
}
inline const ::JSBY::TrusteeshipInfo& SCGetTrusteeship::info() const {
  // @@protoc_insertion_point(field_get:JSBY.SCGetTrusteeship.Info)
  return _internal_info();
}
inline void SCGetTrusteeship::unsafe_arena_set_allocated_info(
    ::JSBY::TrusteeshipInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.SCGetTrusteeship.Info)
}
inline ::JSBY::TrusteeshipInfo* SCGetTrusteeship::release_info() {
  
  ::JSBY::TrusteeshipInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::TrusteeshipInfo* SCGetTrusteeship::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:JSBY.SCGetTrusteeship.Info)
  
  ::JSBY::TrusteeshipInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::JSBY::TrusteeshipInfo* SCGetTrusteeship::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::TrusteeshipInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::JSBY::TrusteeshipInfo* SCGetTrusteeship::mutable_info() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCGetTrusteeship.Info)
  return _internal_mutable_info();
}
inline void SCGetTrusteeship::set_allocated_info(::JSBY::TrusteeshipInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCGetTrusteeship.Info)
}

// int32 LeftTime = 2;
inline void SCGetTrusteeship::clear_lefttime() {
  lefttime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetTrusteeship::_internal_lefttime() const {
  return lefttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetTrusteeship::lefttime() const {
  // @@protoc_insertion_point(field_get:JSBY.SCGetTrusteeship.LeftTime)
  return _internal_lefttime();
}
inline void SCGetTrusteeship::_internal_set_lefttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lefttime_ = value;
}
inline void SCGetTrusteeship::set_lefttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lefttime(value);
  // @@protoc_insertion_point(field_set:JSBY.SCGetTrusteeship.LeftTime)
}

// int32 VIPLevel = 3;
inline void SCGetTrusteeship::clear_viplevel() {
  viplevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetTrusteeship::_internal_viplevel() const {
  return viplevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetTrusteeship::viplevel() const {
  // @@protoc_insertion_point(field_get:JSBY.SCGetTrusteeship.VIPLevel)
  return _internal_viplevel();
}
inline void SCGetTrusteeship::_internal_set_viplevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  viplevel_ = value;
}
inline void SCGetTrusteeship::set_viplevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_viplevel(value);
  // @@protoc_insertion_point(field_set:JSBY.SCGetTrusteeship.VIPLevel)
}

// -------------------------------------------------------------------

// CSSetTrusteeship

// .JSBY.TrusteeshipInfo Info = 1;
inline bool CSSetTrusteeship::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool CSSetTrusteeship::has_info() const {
  return _internal_has_info();
}
inline void CSSetTrusteeship::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::JSBY::TrusteeshipInfo& CSSetTrusteeship::_internal_info() const {
  const ::JSBY::TrusteeshipInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::TrusteeshipInfo&>(
      ::JSBY::_TrusteeshipInfo_default_instance_);
}
inline const ::JSBY::TrusteeshipInfo& CSSetTrusteeship::info() const {
  // @@protoc_insertion_point(field_get:JSBY.CSSetTrusteeship.Info)
  return _internal_info();
}
inline void CSSetTrusteeship::unsafe_arena_set_allocated_info(
    ::JSBY::TrusteeshipInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.CSSetTrusteeship.Info)
}
inline ::JSBY::TrusteeshipInfo* CSSetTrusteeship::release_info() {
  
  ::JSBY::TrusteeshipInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::TrusteeshipInfo* CSSetTrusteeship::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:JSBY.CSSetTrusteeship.Info)
  
  ::JSBY::TrusteeshipInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::JSBY::TrusteeshipInfo* CSSetTrusteeship::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::TrusteeshipInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::JSBY::TrusteeshipInfo* CSSetTrusteeship::mutable_info() {
  // @@protoc_insertion_point(field_mutable:JSBY.CSSetTrusteeship.Info)
  return _internal_mutable_info();
}
inline void CSSetTrusteeship::set_allocated_info(::JSBY::TrusteeshipInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:JSBY.CSSetTrusteeship.Info)
}

// -------------------------------------------------------------------

// SCSetTrusteeship

// -------------------------------------------------------------------

// TrusteeshipMoney

// int32 MonsterType = 1;
inline void TrusteeshipMoney::clear_monstertype() {
  monstertype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrusteeshipMoney::_internal_monstertype() const {
  return monstertype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrusteeshipMoney::monstertype() const {
  // @@protoc_insertion_point(field_get:JSBY.TrusteeshipMoney.MonsterType)
  return _internal_monstertype();
}
inline void TrusteeshipMoney::_internal_set_monstertype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  monstertype_ = value;
}
inline void TrusteeshipMoney::set_monstertype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_monstertype(value);
  // @@protoc_insertion_point(field_set:JSBY.TrusteeshipMoney.MonsterType)
}

// int32 Money = 2;
inline void TrusteeshipMoney::clear_money() {
  money_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrusteeshipMoney::_internal_money() const {
  return money_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrusteeshipMoney::money() const {
  // @@protoc_insertion_point(field_get:JSBY.TrusteeshipMoney.Money)
  return _internal_money();
}
inline void TrusteeshipMoney::_internal_set_money(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  money_ = value;
}
inline void TrusteeshipMoney::set_money(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:JSBY.TrusteeshipMoney.Money)
}

// -------------------------------------------------------------------

// CSEndTrusteeship

// bool Notify = 1;
inline void CSEndTrusteeship::clear_notify() {
  notify_ = false;
}
inline bool CSEndTrusteeship::_internal_notify() const {
  return notify_;
}
inline bool CSEndTrusteeship::notify() const {
  // @@protoc_insertion_point(field_get:JSBY.CSEndTrusteeship.Notify)
  return _internal_notify();
}
inline void CSEndTrusteeship::_internal_set_notify(bool value) {
  
  notify_ = value;
}
inline void CSEndTrusteeship::set_notify(bool value) {
  _internal_set_notify(value);
  // @@protoc_insertion_point(field_set:JSBY.CSEndTrusteeship.Notify)
}

// -------------------------------------------------------------------

// SCEndTrusteeship

// .JSBY.TrusteeshipMoney Info = 1;
inline bool SCEndTrusteeship::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool SCEndTrusteeship::has_info() const {
  return _internal_has_info();
}
inline void SCEndTrusteeship::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::JSBY::TrusteeshipMoney& SCEndTrusteeship::_internal_info() const {
  const ::JSBY::TrusteeshipMoney* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::TrusteeshipMoney&>(
      ::JSBY::_TrusteeshipMoney_default_instance_);
}
inline const ::JSBY::TrusteeshipMoney& SCEndTrusteeship::info() const {
  // @@protoc_insertion_point(field_get:JSBY.SCEndTrusteeship.Info)
  return _internal_info();
}
inline void SCEndTrusteeship::unsafe_arena_set_allocated_info(
    ::JSBY::TrusteeshipMoney* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.SCEndTrusteeship.Info)
}
inline ::JSBY::TrusteeshipMoney* SCEndTrusteeship::release_info() {
  
  ::JSBY::TrusteeshipMoney* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::TrusteeshipMoney* SCEndTrusteeship::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:JSBY.SCEndTrusteeship.Info)
  
  ::JSBY::TrusteeshipMoney* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::JSBY::TrusteeshipMoney* SCEndTrusteeship::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::TrusteeshipMoney>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::JSBY::TrusteeshipMoney* SCEndTrusteeship::mutable_info() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCEndTrusteeship.Info)
  return _internal_mutable_info();
}
inline void SCEndTrusteeship::set_allocated_info(::JSBY::TrusteeshipMoney* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCEndTrusteeship.Info)
}

// int32 TotalMoney = 2;
inline void SCEndTrusteeship::clear_totalmoney() {
  totalmoney_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCEndTrusteeship::_internal_totalmoney() const {
  return totalmoney_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCEndTrusteeship::totalmoney() const {
  // @@protoc_insertion_point(field_get:JSBY.SCEndTrusteeship.TotalMoney)
  return _internal_totalmoney();
}
inline void SCEndTrusteeship::_internal_set_totalmoney(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  totalmoney_ = value;
}
inline void SCEndTrusteeship::set_totalmoney(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_totalmoney(value);
  // @@protoc_insertion_point(field_set:JSBY.SCEndTrusteeship.TotalMoney)
}

// int32 TotalTime = 3;
inline void SCEndTrusteeship::clear_totaltime() {
  totaltime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCEndTrusteeship::_internal_totaltime() const {
  return totaltime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCEndTrusteeship::totaltime() const {
  // @@protoc_insertion_point(field_get:JSBY.SCEndTrusteeship.TotalTime)
  return _internal_totaltime();
}
inline void SCEndTrusteeship::_internal_set_totaltime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  totaltime_ = value;
}
inline void SCEndTrusteeship::set_totaltime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_totaltime(value);
  // @@protoc_insertion_point(field_set:JSBY.SCEndTrusteeship.TotalTime)
}

// -------------------------------------------------------------------

// CSGetVersion

// -------------------------------------------------------------------

// SCGetVersion

// bool IsNew = 1;
inline void SCGetVersion::clear_isnew() {
  isnew_ = false;
}
inline bool SCGetVersion::_internal_isnew() const {
  return isnew_;
}
inline bool SCGetVersion::isnew() const {
  // @@protoc_insertion_point(field_get:JSBY.SCGetVersion.IsNew)
  return _internal_isnew();
}
inline void SCGetVersion::_internal_set_isnew(bool value) {
  
  isnew_ = value;
}
inline void SCGetVersion::set_isnew(bool value) {
  _internal_set_isnew(value);
  // @@protoc_insertion_point(field_set:JSBY.SCGetVersion.IsNew)
}

// -------------------------------------------------------------------

// ActivityInfo

// int32 ID = 1;
inline void ActivityInfo::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityInfo::id() const {
  // @@protoc_insertion_point(field_get:JSBY.ActivityInfo.ID)
  return _internal_id();
}
inline void ActivityInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void ActivityInfo::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:JSBY.ActivityInfo.ID)
}

// int32 Money = 2;
inline void ActivityInfo::clear_money() {
  money_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityInfo::_internal_money() const {
  return money_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityInfo::money() const {
  // @@protoc_insertion_point(field_get:JSBY.ActivityInfo.Money)
  return _internal_money();
}
inline void ActivityInfo::_internal_set_money(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  money_ = value;
}
inline void ActivityInfo::set_money(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:JSBY.ActivityInfo.Money)
}

// int32 Enzyme = 3;
inline void ActivityInfo::clear_enzyme() {
  enzyme_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityInfo::_internal_enzyme() const {
  return enzyme_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityInfo::enzyme() const {
  // @@protoc_insertion_point(field_get:JSBY.ActivityInfo.Enzyme)
  return _internal_enzyme();
}
inline void ActivityInfo::_internal_set_enzyme(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  enzyme_ = value;
}
inline void ActivityInfo::set_enzyme(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_enzyme(value);
  // @@protoc_insertion_point(field_set:JSBY.ActivityInfo.Enzyme)
}

// string Name = 4;
inline void ActivityInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ActivityInfo::name() const {
  // @@protoc_insertion_point(field_get:JSBY.ActivityInfo.Name)
  return _internal_name();
}
inline void ActivityInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:JSBY.ActivityInfo.Name)
}
inline std::string* ActivityInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:JSBY.ActivityInfo.Name)
  return _internal_mutable_name();
}
inline const std::string& ActivityInfo::_internal_name() const {
  return name_.Get();
}
inline void ActivityInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ActivityInfo::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:JSBY.ActivityInfo.Name)
}
inline void ActivityInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:JSBY.ActivityInfo.Name)
}
inline void ActivityInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:JSBY.ActivityInfo.Name)
}
inline std::string* ActivityInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ActivityInfo::release_name() {
  // @@protoc_insertion_point(field_release:JSBY.ActivityInfo.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ActivityInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:JSBY.ActivityInfo.Name)
}

// int32 Flag = 5;
inline void ActivityInfo::clear_flag() {
  flag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityInfo::_internal_flag() const {
  return flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityInfo::flag() const {
  // @@protoc_insertion_point(field_get:JSBY.ActivityInfo.Flag)
  return _internal_flag();
}
inline void ActivityInfo::_internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flag_ = value;
}
inline void ActivityInfo::set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:JSBY.ActivityInfo.Flag)
}

// -------------------------------------------------------------------

// CSActivityInfo

// -------------------------------------------------------------------

// SCActivityInfo

// .JSBY.ActivityInfo Info = 1;
inline bool SCActivityInfo::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool SCActivityInfo::has_info() const {
  return _internal_has_info();
}
inline void SCActivityInfo::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::JSBY::ActivityInfo& SCActivityInfo::_internal_info() const {
  const ::JSBY::ActivityInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::ActivityInfo&>(
      ::JSBY::_ActivityInfo_default_instance_);
}
inline const ::JSBY::ActivityInfo& SCActivityInfo::info() const {
  // @@protoc_insertion_point(field_get:JSBY.SCActivityInfo.Info)
  return _internal_info();
}
inline void SCActivityInfo::unsafe_arena_set_allocated_info(
    ::JSBY::ActivityInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.SCActivityInfo.Info)
}
inline ::JSBY::ActivityInfo* SCActivityInfo::release_info() {
  
  ::JSBY::ActivityInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::ActivityInfo* SCActivityInfo::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:JSBY.SCActivityInfo.Info)
  
  ::JSBY::ActivityInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::JSBY::ActivityInfo* SCActivityInfo::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::ActivityInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::JSBY::ActivityInfo* SCActivityInfo::mutable_info() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCActivityInfo.Info)
  return _internal_mutable_info();
}
inline void SCActivityInfo::set_allocated_info(::JSBY::ActivityInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCActivityInfo.Info)
}

// int32 LeftTime = 2;
inline void SCActivityInfo::clear_lefttime() {
  lefttime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCActivityInfo::_internal_lefttime() const {
  return lefttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCActivityInfo::lefttime() const {
  // @@protoc_insertion_point(field_get:JSBY.SCActivityInfo.LeftTime)
  return _internal_lefttime();
}
inline void SCActivityInfo::_internal_set_lefttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lefttime_ = value;
}
inline void SCActivityInfo::set_lefttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lefttime(value);
  // @@protoc_insertion_point(field_set:JSBY.SCActivityInfo.LeftTime)
}

// string Begint32ime = 3;
inline void SCActivityInfo::clear_begint32ime() {
  begint32ime_.ClearToEmpty();
}
inline const std::string& SCActivityInfo::begint32ime() const {
  // @@protoc_insertion_point(field_get:JSBY.SCActivityInfo.Begint32ime)
  return _internal_begint32ime();
}
inline void SCActivityInfo::set_begint32ime(const std::string& value) {
  _internal_set_begint32ime(value);
  // @@protoc_insertion_point(field_set:JSBY.SCActivityInfo.Begint32ime)
}
inline std::string* SCActivityInfo::mutable_begint32ime() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCActivityInfo.Begint32ime)
  return _internal_mutable_begint32ime();
}
inline const std::string& SCActivityInfo::_internal_begint32ime() const {
  return begint32ime_.Get();
}
inline void SCActivityInfo::_internal_set_begint32ime(const std::string& value) {
  
  begint32ime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SCActivityInfo::set_begint32ime(std::string&& value) {
  
  begint32ime_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:JSBY.SCActivityInfo.Begint32ime)
}
inline void SCActivityInfo::set_begint32ime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  begint32ime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:JSBY.SCActivityInfo.Begint32ime)
}
inline void SCActivityInfo::set_begint32ime(const char* value,
    size_t size) {
  
  begint32ime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:JSBY.SCActivityInfo.Begint32ime)
}
inline std::string* SCActivityInfo::_internal_mutable_begint32ime() {
  
  return begint32ime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SCActivityInfo::release_begint32ime() {
  // @@protoc_insertion_point(field_release:JSBY.SCActivityInfo.Begint32ime)
  return begint32ime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SCActivityInfo::set_allocated_begint32ime(std::string* begint32ime) {
  if (begint32ime != nullptr) {
    
  } else {
    
  }
  begint32ime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), begint32ime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCActivityInfo.Begint32ime)
}

// string EndTime = 4;
inline void SCActivityInfo::clear_endtime() {
  endtime_.ClearToEmpty();
}
inline const std::string& SCActivityInfo::endtime() const {
  // @@protoc_insertion_point(field_get:JSBY.SCActivityInfo.EndTime)
  return _internal_endtime();
}
inline void SCActivityInfo::set_endtime(const std::string& value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:JSBY.SCActivityInfo.EndTime)
}
inline std::string* SCActivityInfo::mutable_endtime() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCActivityInfo.EndTime)
  return _internal_mutable_endtime();
}
inline const std::string& SCActivityInfo::_internal_endtime() const {
  return endtime_.Get();
}
inline void SCActivityInfo::_internal_set_endtime(const std::string& value) {
  
  endtime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SCActivityInfo::set_endtime(std::string&& value) {
  
  endtime_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:JSBY.SCActivityInfo.EndTime)
}
inline void SCActivityInfo::set_endtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endtime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:JSBY.SCActivityInfo.EndTime)
}
inline void SCActivityInfo::set_endtime(const char* value,
    size_t size) {
  
  endtime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:JSBY.SCActivityInfo.EndTime)
}
inline std::string* SCActivityInfo::_internal_mutable_endtime() {
  
  return endtime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SCActivityInfo::release_endtime() {
  // @@protoc_insertion_point(field_release:JSBY.SCActivityInfo.EndTime)
  return endtime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SCActivityInfo::set_allocated_endtime(std::string* endtime) {
  if (endtime != nullptr) {
    
  } else {
    
  }
  endtime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endtime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCActivityInfo.EndTime)
}

// -------------------------------------------------------------------

// SCNotifyActivityInfo

// .JSBY.ActivityInfo Info = 1;
inline bool SCNotifyActivityInfo::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool SCNotifyActivityInfo::has_info() const {
  return _internal_has_info();
}
inline void SCNotifyActivityInfo::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::JSBY::ActivityInfo& SCNotifyActivityInfo::_internal_info() const {
  const ::JSBY::ActivityInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::ActivityInfo&>(
      ::JSBY::_ActivityInfo_default_instance_);
}
inline const ::JSBY::ActivityInfo& SCNotifyActivityInfo::info() const {
  // @@protoc_insertion_point(field_get:JSBY.SCNotifyActivityInfo.Info)
  return _internal_info();
}
inline void SCNotifyActivityInfo::unsafe_arena_set_allocated_info(
    ::JSBY::ActivityInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.SCNotifyActivityInfo.Info)
}
inline ::JSBY::ActivityInfo* SCNotifyActivityInfo::release_info() {
  
  ::JSBY::ActivityInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::ActivityInfo* SCNotifyActivityInfo::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:JSBY.SCNotifyActivityInfo.Info)
  
  ::JSBY::ActivityInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::JSBY::ActivityInfo* SCNotifyActivityInfo::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::ActivityInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::JSBY::ActivityInfo* SCNotifyActivityInfo::mutable_info() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCNotifyActivityInfo.Info)
  return _internal_mutable_info();
}
inline void SCNotifyActivityInfo::set_allocated_info(::JSBY::ActivityInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCNotifyActivityInfo.Info)
}

// int32 LeftTime = 2;
inline void SCNotifyActivityInfo::clear_lefttime() {
  lefttime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCNotifyActivityInfo::_internal_lefttime() const {
  return lefttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCNotifyActivityInfo::lefttime() const {
  // @@protoc_insertion_point(field_get:JSBY.SCNotifyActivityInfo.LeftTime)
  return _internal_lefttime();
}
inline void SCNotifyActivityInfo::_internal_set_lefttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lefttime_ = value;
}
inline void SCNotifyActivityInfo::set_lefttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lefttime(value);
  // @@protoc_insertion_point(field_set:JSBY.SCNotifyActivityInfo.LeftTime)
}

// string Begint32ime = 3;
inline void SCNotifyActivityInfo::clear_begint32ime() {
  begint32ime_.ClearToEmpty();
}
inline const std::string& SCNotifyActivityInfo::begint32ime() const {
  // @@protoc_insertion_point(field_get:JSBY.SCNotifyActivityInfo.Begint32ime)
  return _internal_begint32ime();
}
inline void SCNotifyActivityInfo::set_begint32ime(const std::string& value) {
  _internal_set_begint32ime(value);
  // @@protoc_insertion_point(field_set:JSBY.SCNotifyActivityInfo.Begint32ime)
}
inline std::string* SCNotifyActivityInfo::mutable_begint32ime() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCNotifyActivityInfo.Begint32ime)
  return _internal_mutable_begint32ime();
}
inline const std::string& SCNotifyActivityInfo::_internal_begint32ime() const {
  return begint32ime_.Get();
}
inline void SCNotifyActivityInfo::_internal_set_begint32ime(const std::string& value) {
  
  begint32ime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SCNotifyActivityInfo::set_begint32ime(std::string&& value) {
  
  begint32ime_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:JSBY.SCNotifyActivityInfo.Begint32ime)
}
inline void SCNotifyActivityInfo::set_begint32ime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  begint32ime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:JSBY.SCNotifyActivityInfo.Begint32ime)
}
inline void SCNotifyActivityInfo::set_begint32ime(const char* value,
    size_t size) {
  
  begint32ime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:JSBY.SCNotifyActivityInfo.Begint32ime)
}
inline std::string* SCNotifyActivityInfo::_internal_mutable_begint32ime() {
  
  return begint32ime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SCNotifyActivityInfo::release_begint32ime() {
  // @@protoc_insertion_point(field_release:JSBY.SCNotifyActivityInfo.Begint32ime)
  return begint32ime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SCNotifyActivityInfo::set_allocated_begint32ime(std::string* begint32ime) {
  if (begint32ime != nullptr) {
    
  } else {
    
  }
  begint32ime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), begint32ime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCNotifyActivityInfo.Begint32ime)
}

// string EndTime = 4;
inline void SCNotifyActivityInfo::clear_endtime() {
  endtime_.ClearToEmpty();
}
inline const std::string& SCNotifyActivityInfo::endtime() const {
  // @@protoc_insertion_point(field_get:JSBY.SCNotifyActivityInfo.EndTime)
  return _internal_endtime();
}
inline void SCNotifyActivityInfo::set_endtime(const std::string& value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:JSBY.SCNotifyActivityInfo.EndTime)
}
inline std::string* SCNotifyActivityInfo::mutable_endtime() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCNotifyActivityInfo.EndTime)
  return _internal_mutable_endtime();
}
inline const std::string& SCNotifyActivityInfo::_internal_endtime() const {
  return endtime_.Get();
}
inline void SCNotifyActivityInfo::_internal_set_endtime(const std::string& value) {
  
  endtime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SCNotifyActivityInfo::set_endtime(std::string&& value) {
  
  endtime_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:JSBY.SCNotifyActivityInfo.EndTime)
}
inline void SCNotifyActivityInfo::set_endtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endtime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:JSBY.SCNotifyActivityInfo.EndTime)
}
inline void SCNotifyActivityInfo::set_endtime(const char* value,
    size_t size) {
  
  endtime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:JSBY.SCNotifyActivityInfo.EndTime)
}
inline std::string* SCNotifyActivityInfo::_internal_mutable_endtime() {
  
  return endtime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SCNotifyActivityInfo::release_endtime() {
  // @@protoc_insertion_point(field_release:JSBY.SCNotifyActivityInfo.EndTime)
  return endtime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SCNotifyActivityInfo::set_allocated_endtime(std::string* endtime) {
  if (endtime != nullptr) {
    
  } else {
    
  }
  endtime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endtime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCNotifyActivityInfo.EndTime)
}

// -------------------------------------------------------------------

// CSGetActivityAward

// int32 ID = 1;
inline void CSGetActivityAward::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSGetActivityAward::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSGetActivityAward::id() const {
  // @@protoc_insertion_point(field_get:JSBY.CSGetActivityAward.ID)
  return _internal_id();
}
inline void CSGetActivityAward::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void CSGetActivityAward::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:JSBY.CSGetActivityAward.ID)
}

// -------------------------------------------------------------------

// SCGetActivityAward

// int32 ID = 1;
inline void SCGetActivityAward::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetActivityAward::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetActivityAward::id() const {
  // @@protoc_insertion_point(field_get:JSBY.SCGetActivityAward.ID)
  return _internal_id();
}
inline void SCGetActivityAward::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void SCGetActivityAward::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:JSBY.SCGetActivityAward.ID)
}

// int32 Flag = 2;
inline void SCGetActivityAward::clear_flag() {
  flag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetActivityAward::_internal_flag() const {
  return flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetActivityAward::flag() const {
  // @@protoc_insertion_point(field_get:JSBY.SCGetActivityAward.Flag)
  return _internal_flag();
}
inline void SCGetActivityAward::_internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flag_ = value;
}
inline void SCGetActivityAward::set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:JSBY.SCGetActivityAward.Flag)
}

// -------------------------------------------------------------------

// CSButtonRecords

// int32 ID = 1;
inline void CSButtonRecords::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSButtonRecords::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSButtonRecords::id() const {
  // @@protoc_insertion_point(field_get:JSBY.CSButtonRecords.ID)
  return _internal_id();
}
inline void CSButtonRecords::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void CSButtonRecords::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:JSBY.CSButtonRecords.ID)
}

// int32 Mode = 2;
inline void CSButtonRecords::clear_mode() {
  mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSButtonRecords::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSButtonRecords::mode() const {
  // @@protoc_insertion_point(field_get:JSBY.CSButtonRecords.Mode)
  return _internal_mode();
}
inline void CSButtonRecords::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mode_ = value;
}
inline void CSButtonRecords::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:JSBY.CSButtonRecords.Mode)
}

// -------------------------------------------------------------------

// SCButtonRecords

// -------------------------------------------------------------------

// TowerHeroInfo

// int32 HeroId = 1;
inline void TowerHeroInfo::clear_heroid() {
  heroid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TowerHeroInfo::_internal_heroid() const {
  return heroid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TowerHeroInfo::heroid() const {
  // @@protoc_insertion_point(field_get:JSBY.TowerHeroInfo.HeroId)
  return _internal_heroid();
}
inline void TowerHeroInfo::_internal_set_heroid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  heroid_ = value;
}
inline void TowerHeroInfo::set_heroid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_heroid(value);
  // @@protoc_insertion_point(field_set:JSBY.TowerHeroInfo.HeroId)
}

// int32 PositionId = 2;
inline void TowerHeroInfo::clear_positionid() {
  positionid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TowerHeroInfo::_internal_positionid() const {
  return positionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TowerHeroInfo::positionid() const {
  // @@protoc_insertion_point(field_get:JSBY.TowerHeroInfo.PositionId)
  return _internal_positionid();
}
inline void TowerHeroInfo::_internal_set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  positionid_ = value;
}
inline void TowerHeroInfo::set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_positionid(value);
  // @@protoc_insertion_point(field_set:JSBY.TowerHeroInfo.PositionId)
}

// bool IsAtk = 3;
inline void TowerHeroInfo::clear_isatk() {
  isatk_ = false;
}
inline bool TowerHeroInfo::_internal_isatk() const {
  return isatk_;
}
inline bool TowerHeroInfo::isatk() const {
  // @@protoc_insertion_point(field_get:JSBY.TowerHeroInfo.IsAtk)
  return _internal_isatk();
}
inline void TowerHeroInfo::_internal_set_isatk(bool value) {
  
  isatk_ = value;
}
inline void TowerHeroInfo::set_isatk(bool value) {
  _internal_set_isatk(value);
  // @@protoc_insertion_point(field_set:JSBY.TowerHeroInfo.IsAtk)
}

// int32 Timestamp = 4;
inline void TowerHeroInfo::clear_timestamp() {
  timestamp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TowerHeroInfo::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TowerHeroInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:JSBY.TowerHeroInfo.Timestamp)
  return _internal_timestamp();
}
inline void TowerHeroInfo::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timestamp_ = value;
}
inline void TowerHeroInfo::set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:JSBY.TowerHeroInfo.Timestamp)
}

// int32 TargetPositionId = 5;
inline void TowerHeroInfo::clear_targetpositionid() {
  targetpositionid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TowerHeroInfo::_internal_targetpositionid() const {
  return targetpositionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TowerHeroInfo::targetpositionid() const {
  // @@protoc_insertion_point(field_get:JSBY.TowerHeroInfo.TargetPositionId)
  return _internal_targetpositionid();
}
inline void TowerHeroInfo::_internal_set_targetpositionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  targetpositionid_ = value;
}
inline void TowerHeroInfo::set_targetpositionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_targetpositionid(value);
  // @@protoc_insertion_point(field_set:JSBY.TowerHeroInfo.TargetPositionId)
}

// int32 UniqueId = 6;
inline void TowerHeroInfo::clear_uniqueid() {
  uniqueid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TowerHeroInfo::_internal_uniqueid() const {
  return uniqueid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TowerHeroInfo::uniqueid() const {
  // @@protoc_insertion_point(field_get:JSBY.TowerHeroInfo.UniqueId)
  return _internal_uniqueid();
}
inline void TowerHeroInfo::_internal_set_uniqueid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uniqueid_ = value;
}
inline void TowerHeroInfo::set_uniqueid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uniqueid(value);
  // @@protoc_insertion_point(field_set:JSBY.TowerHeroInfo.UniqueId)
}

// -------------------------------------------------------------------

// TowerHeroAtkInfo

// int32 HeroPositionId = 1;
inline void TowerHeroAtkInfo::clear_heropositionid() {
  heropositionid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TowerHeroAtkInfo::_internal_heropositionid() const {
  return heropositionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TowerHeroAtkInfo::heropositionid() const {
  // @@protoc_insertion_point(field_get:JSBY.TowerHeroAtkInfo.HeroPositionId)
  return _internal_heropositionid();
}
inline void TowerHeroAtkInfo::_internal_set_heropositionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  heropositionid_ = value;
}
inline void TowerHeroAtkInfo::set_heropositionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_heropositionid(value);
  // @@protoc_insertion_point(field_set:JSBY.TowerHeroAtkInfo.HeroPositionId)
}

// bool IsAtk = 2;
inline void TowerHeroAtkInfo::clear_isatk() {
  isatk_ = false;
}
inline bool TowerHeroAtkInfo::_internal_isatk() const {
  return isatk_;
}
inline bool TowerHeroAtkInfo::isatk() const {
  // @@protoc_insertion_point(field_get:JSBY.TowerHeroAtkInfo.IsAtk)
  return _internal_isatk();
}
inline void TowerHeroAtkInfo::_internal_set_isatk(bool value) {
  
  isatk_ = value;
}
inline void TowerHeroAtkInfo::set_isatk(bool value) {
  _internal_set_isatk(value);
  // @@protoc_insertion_point(field_set:JSBY.TowerHeroAtkInfo.IsAtk)
}

// -------------------------------------------------------------------

// TablePlayerInfo

// int32 ChairId = 1;
inline void TablePlayerInfo::clear_chairid() {
  chairid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TablePlayerInfo::_internal_chairid() const {
  return chairid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TablePlayerInfo::chairid() const {
  // @@protoc_insertion_point(field_get:JSBY.TablePlayerInfo.ChairId)
  return _internal_chairid();
}
inline void TablePlayerInfo::_internal_set_chairid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chairid_ = value;
}
inline void TablePlayerInfo::set_chairid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chairid(value);
  // @@protoc_insertion_point(field_set:JSBY.TablePlayerInfo.ChairId)
}

// int32 PlayerId = 2;
inline void TablePlayerInfo::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TablePlayerInfo::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TablePlayerInfo::playerid() const {
  // @@protoc_insertion_point(field_get:JSBY.TablePlayerInfo.PlayerId)
  return _internal_playerid();
}
inline void TablePlayerInfo::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void TablePlayerInfo::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:JSBY.TablePlayerInfo.PlayerId)
}

// int32 Money = 3;
inline void TablePlayerInfo::clear_money() {
  money_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TablePlayerInfo::_internal_money() const {
  return money_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TablePlayerInfo::money() const {
  // @@protoc_insertion_point(field_get:JSBY.TablePlayerInfo.Money)
  return _internal_money();
}
inline void TablePlayerInfo::_internal_set_money(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  money_ = value;
}
inline void TablePlayerInfo::set_money(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:JSBY.TablePlayerInfo.Money)
}

// int32 Sex = 4;
inline void TablePlayerInfo::clear_sex() {
  sex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TablePlayerInfo::_internal_sex() const {
  return sex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TablePlayerInfo::sex() const {
  // @@protoc_insertion_point(field_get:JSBY.TablePlayerInfo.Sex)
  return _internal_sex();
}
inline void TablePlayerInfo::_internal_set_sex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sex_ = value;
}
inline void TablePlayerInfo::set_sex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:JSBY.TablePlayerInfo.Sex)
}

// string Name = 5;
inline void TablePlayerInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& TablePlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:JSBY.TablePlayerInfo.Name)
  return _internal_name();
}
inline void TablePlayerInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:JSBY.TablePlayerInfo.Name)
}
inline std::string* TablePlayerInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:JSBY.TablePlayerInfo.Name)
  return _internal_mutable_name();
}
inline const std::string& TablePlayerInfo::_internal_name() const {
  return name_.Get();
}
inline void TablePlayerInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TablePlayerInfo::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:JSBY.TablePlayerInfo.Name)
}
inline void TablePlayerInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:JSBY.TablePlayerInfo.Name)
}
inline void TablePlayerInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:JSBY.TablePlayerInfo.Name)
}
inline std::string* TablePlayerInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TablePlayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:JSBY.TablePlayerInfo.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TablePlayerInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:JSBY.TablePlayerInfo.Name)
}

// string Head = 6;
inline void TablePlayerInfo::clear_head() {
  head_.ClearToEmpty();
}
inline const std::string& TablePlayerInfo::head() const {
  // @@protoc_insertion_point(field_get:JSBY.TablePlayerInfo.Head)
  return _internal_head();
}
inline void TablePlayerInfo::set_head(const std::string& value) {
  _internal_set_head(value);
  // @@protoc_insertion_point(field_set:JSBY.TablePlayerInfo.Head)
}
inline std::string* TablePlayerInfo::mutable_head() {
  // @@protoc_insertion_point(field_mutable:JSBY.TablePlayerInfo.Head)
  return _internal_mutable_head();
}
inline const std::string& TablePlayerInfo::_internal_head() const {
  return head_.Get();
}
inline void TablePlayerInfo::_internal_set_head(const std::string& value) {
  
  head_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TablePlayerInfo::set_head(std::string&& value) {
  
  head_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:JSBY.TablePlayerInfo.Head)
}
inline void TablePlayerInfo::set_head(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  head_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:JSBY.TablePlayerInfo.Head)
}
inline void TablePlayerInfo::set_head(const char* value,
    size_t size) {
  
  head_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:JSBY.TablePlayerInfo.Head)
}
inline std::string* TablePlayerInfo::_internal_mutable_head() {
  
  return head_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TablePlayerInfo::release_head() {
  // @@protoc_insertion_point(field_release:JSBY.TablePlayerInfo.Head)
  return head_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TablePlayerInfo::set_allocated_head(std::string* head) {
  if (head != nullptr) {
    
  } else {
    
  }
  head_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), head,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:JSBY.TablePlayerInfo.Head)
}

// .JSBY.TowerHeroInfo Info = 7;
inline bool TablePlayerInfo::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool TablePlayerInfo::has_info() const {
  return _internal_has_info();
}
inline void TablePlayerInfo::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::JSBY::TowerHeroInfo& TablePlayerInfo::_internal_info() const {
  const ::JSBY::TowerHeroInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::TowerHeroInfo&>(
      ::JSBY::_TowerHeroInfo_default_instance_);
}
inline const ::JSBY::TowerHeroInfo& TablePlayerInfo::info() const {
  // @@protoc_insertion_point(field_get:JSBY.TablePlayerInfo.Info)
  return _internal_info();
}
inline void TablePlayerInfo::unsafe_arena_set_allocated_info(
    ::JSBY::TowerHeroInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.TablePlayerInfo.Info)
}
inline ::JSBY::TowerHeroInfo* TablePlayerInfo::release_info() {
  
  ::JSBY::TowerHeroInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::TowerHeroInfo* TablePlayerInfo::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:JSBY.TablePlayerInfo.Info)
  
  ::JSBY::TowerHeroInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::JSBY::TowerHeroInfo* TablePlayerInfo::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::TowerHeroInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::JSBY::TowerHeroInfo* TablePlayerInfo::mutable_info() {
  // @@protoc_insertion_point(field_mutable:JSBY.TablePlayerInfo.Info)
  return _internal_mutable_info();
}
inline void TablePlayerInfo::set_allocated_info(::JSBY::TowerHeroInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:JSBY.TablePlayerInfo.Info)
}

// int32 MoneyVariation = 8;
inline void TablePlayerInfo::clear_moneyvariation() {
  moneyvariation_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TablePlayerInfo::_internal_moneyvariation() const {
  return moneyvariation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TablePlayerInfo::moneyvariation() const {
  // @@protoc_insertion_point(field_get:JSBY.TablePlayerInfo.MoneyVariation)
  return _internal_moneyvariation();
}
inline void TablePlayerInfo::_internal_set_moneyvariation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  moneyvariation_ = value;
}
inline void TablePlayerInfo::set_moneyvariation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_moneyvariation(value);
  // @@protoc_insertion_point(field_set:JSBY.TablePlayerInfo.MoneyVariation)
}

// int32 VipLevel = 9;
inline void TablePlayerInfo::clear_viplevel() {
  viplevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TablePlayerInfo::_internal_viplevel() const {
  return viplevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TablePlayerInfo::viplevel() const {
  // @@protoc_insertion_point(field_get:JSBY.TablePlayerInfo.VipLevel)
  return _internal_viplevel();
}
inline void TablePlayerInfo::_internal_set_viplevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  viplevel_ = value;
}
inline void TablePlayerInfo::set_viplevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_viplevel(value);
  // @@protoc_insertion_point(field_set:JSBY.TablePlayerInfo.VipLevel)
}

// bool IsVip = 10;
inline void TablePlayerInfo::clear_isvip() {
  isvip_ = false;
}
inline bool TablePlayerInfo::_internal_isvip() const {
  return isvip_;
}
inline bool TablePlayerInfo::isvip() const {
  // @@protoc_insertion_point(field_get:JSBY.TablePlayerInfo.IsVip)
  return _internal_isvip();
}
inline void TablePlayerInfo::_internal_set_isvip(bool value) {
  
  isvip_ = value;
}
inline void TablePlayerInfo::set_isvip(bool value) {
  _internal_set_isvip(value);
  // @@protoc_insertion_point(field_set:JSBY.TablePlayerInfo.IsVip)
}

// int32 Background = 11;
inline void TablePlayerInfo::clear_background() {
  background_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TablePlayerInfo::_internal_background() const {
  return background_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TablePlayerInfo::background() const {
  // @@protoc_insertion_point(field_get:JSBY.TablePlayerInfo.Background)
  return _internal_background();
}
inline void TablePlayerInfo::_internal_set_background(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  background_ = value;
}
inline void TablePlayerInfo::set_background(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_background(value);
  // @@protoc_insertion_point(field_set:JSBY.TablePlayerInfo.Background)
}

// int32 Effect = 12;
inline void TablePlayerInfo::clear_effect() {
  effect_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TablePlayerInfo::_internal_effect() const {
  return effect_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TablePlayerInfo::effect() const {
  // @@protoc_insertion_point(field_get:JSBY.TablePlayerInfo.Effect)
  return _internal_effect();
}
inline void TablePlayerInfo::_internal_set_effect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  effect_ = value;
}
inline void TablePlayerInfo::set_effect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_effect(value);
  // @@protoc_insertion_point(field_set:JSBY.TablePlayerInfo.Effect)
}

// -------------------------------------------------------------------

// SCNotifyTowerTablePlayer

// .JSBY.TablePlayerInfo Info = 1;
inline bool SCNotifyTowerTablePlayer::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool SCNotifyTowerTablePlayer::has_info() const {
  return _internal_has_info();
}
inline void SCNotifyTowerTablePlayer::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::JSBY::TablePlayerInfo& SCNotifyTowerTablePlayer::_internal_info() const {
  const ::JSBY::TablePlayerInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::TablePlayerInfo&>(
      ::JSBY::_TablePlayerInfo_default_instance_);
}
inline const ::JSBY::TablePlayerInfo& SCNotifyTowerTablePlayer::info() const {
  // @@protoc_insertion_point(field_get:JSBY.SCNotifyTowerTablePlayer.Info)
  return _internal_info();
}
inline void SCNotifyTowerTablePlayer::unsafe_arena_set_allocated_info(
    ::JSBY::TablePlayerInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.SCNotifyTowerTablePlayer.Info)
}
inline ::JSBY::TablePlayerInfo* SCNotifyTowerTablePlayer::release_info() {
  
  ::JSBY::TablePlayerInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::TablePlayerInfo* SCNotifyTowerTablePlayer::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:JSBY.SCNotifyTowerTablePlayer.Info)
  
  ::JSBY::TablePlayerInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::JSBY::TablePlayerInfo* SCNotifyTowerTablePlayer::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::TablePlayerInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::JSBY::TablePlayerInfo* SCNotifyTowerTablePlayer::mutable_info() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCNotifyTowerTablePlayer.Info)
  return _internal_mutable_info();
}
inline void SCNotifyTowerTablePlayer::set_allocated_info(::JSBY::TablePlayerInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCNotifyTowerTablePlayer.Info)
}

// int32 TableID = 2;
inline void SCNotifyTowerTablePlayer::clear_tableid() {
  tableid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCNotifyTowerTablePlayer::_internal_tableid() const {
  return tableid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCNotifyTowerTablePlayer::tableid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCNotifyTowerTablePlayer.TableID)
  return _internal_tableid();
}
inline void SCNotifyTowerTablePlayer::_internal_set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tableid_ = value;
}
inline void SCNotifyTowerTablePlayer::set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tableid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCNotifyTowerTablePlayer.TableID)
}

// -------------------------------------------------------------------

// SCLeaveTowerTable

// int32 PlayerId = 1;
inline void SCLeaveTowerTable::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLeaveTowerTable::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLeaveTowerTable::playerid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCLeaveTowerTable.PlayerId)
  return _internal_playerid();
}
inline void SCLeaveTowerTable::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void SCLeaveTowerTable::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCLeaveTowerTable.PlayerId)
}

// bool IsAgainEnter = 2;
inline void SCLeaveTowerTable::clear_isagainenter() {
  isagainenter_ = false;
}
inline bool SCLeaveTowerTable::_internal_isagainenter() const {
  return isagainenter_;
}
inline bool SCLeaveTowerTable::isagainenter() const {
  // @@protoc_insertion_point(field_get:JSBY.SCLeaveTowerTable.IsAgainEnter)
  return _internal_isagainenter();
}
inline void SCLeaveTowerTable::_internal_set_isagainenter(bool value) {
  
  isagainenter_ = value;
}
inline void SCLeaveTowerTable::set_isagainenter(bool value) {
  _internal_set_isagainenter(value);
  // @@protoc_insertion_point(field_set:JSBY.SCLeaveTowerTable.IsAgainEnter)
}

// -------------------------------------------------------------------

// TowerMonster

// int32 Position = 1;
inline void TowerMonster::clear_position() {
  position_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TowerMonster::_internal_position() const {
  return position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TowerMonster::position() const {
  // @@protoc_insertion_point(field_get:JSBY.TowerMonster.Position)
  return _internal_position();
}
inline void TowerMonster::_internal_set_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  position_ = value;
}
inline void TowerMonster::set_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:JSBY.TowerMonster.Position)
}

// int32 ProcessTime = 2;
inline void TowerMonster::clear_processtime() {
  processtime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TowerMonster::_internal_processtime() const {
  return processtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TowerMonster::processtime() const {
  // @@protoc_insertion_point(field_get:JSBY.TowerMonster.ProcessTime)
  return _internal_processtime();
}
inline void TowerMonster::_internal_set_processtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  processtime_ = value;
}
inline void TowerMonster::set_processtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_processtime(value);
  // @@protoc_insertion_point(field_set:JSBY.TowerMonster.ProcessTime)
}

// int32 ReadyTime = 3;
inline void TowerMonster::clear_readytime() {
  readytime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TowerMonster::_internal_readytime() const {
  return readytime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TowerMonster::readytime() const {
  // @@protoc_insertion_point(field_get:JSBY.TowerMonster.ReadyTime)
  return _internal_readytime();
}
inline void TowerMonster::_internal_set_readytime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  readytime_ = value;
}
inline void TowerMonster::set_readytime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_readytime(value);
  // @@protoc_insertion_point(field_set:JSBY.TowerMonster.ReadyTime)
}

// int32 MonsterID = 4;
inline void TowerMonster::clear_monsterid() {
  monsterid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TowerMonster::_internal_monsterid() const {
  return monsterid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TowerMonster::monsterid() const {
  // @@protoc_insertion_point(field_get:JSBY.TowerMonster.MonsterID)
  return _internal_monsterid();
}
inline void TowerMonster::_internal_set_monsterid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  monsterid_ = value;
}
inline void TowerMonster::set_monsterid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_monsterid(value);
  // @@protoc_insertion_point(field_set:JSBY.TowerMonster.MonsterID)
}

// repeated int32 Buff = 5;
inline int TowerMonster::_internal_buff_size() const {
  return buff_.size();
}
inline int TowerMonster::buff_size() const {
  return _internal_buff_size();
}
inline void TowerMonster::clear_buff() {
  buff_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TowerMonster::_internal_buff(int index) const {
  return buff_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TowerMonster::buff(int index) const {
  // @@protoc_insertion_point(field_get:JSBY.TowerMonster.Buff)
  return _internal_buff(index);
}
inline void TowerMonster::set_buff(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  buff_.Set(index, value);
  // @@protoc_insertion_point(field_set:JSBY.TowerMonster.Buff)
}
inline void TowerMonster::_internal_add_buff(::PROTOBUF_NAMESPACE_ID::int32 value) {
  buff_.Add(value);
}
inline void TowerMonster::add_buff(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_buff(value);
  // @@protoc_insertion_point(field_add:JSBY.TowerMonster.Buff)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TowerMonster::_internal_buff() const {
  return buff_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TowerMonster::buff() const {
  // @@protoc_insertion_point(field_list:JSBY.TowerMonster.Buff)
  return _internal_buff();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TowerMonster::_internal_mutable_buff() {
  return &buff_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TowerMonster::mutable_buff() {
  // @@protoc_insertion_point(field_mutable_list:JSBY.TowerMonster.Buff)
  return _internal_mutable_buff();
}

// bool IsConnect = 6;
inline void TowerMonster::clear_isconnect() {
  isconnect_ = false;
}
inline bool TowerMonster::_internal_isconnect() const {
  return isconnect_;
}
inline bool TowerMonster::isconnect() const {
  // @@protoc_insertion_point(field_get:JSBY.TowerMonster.IsConnect)
  return _internal_isconnect();
}
inline void TowerMonster::_internal_set_isconnect(bool value) {
  
  isconnect_ = value;
}
inline void TowerMonster::set_isconnect(bool value) {
  _internal_set_isconnect(value);
  // @@protoc_insertion_point(field_set:JSBY.TowerMonster.IsConnect)
}

// int32 Level = 7;
inline void TowerMonster::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TowerMonster::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TowerMonster::level() const {
  // @@protoc_insertion_point(field_get:JSBY.TowerMonster.Level)
  return _internal_level();
}
inline void TowerMonster::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void TowerMonster::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:JSBY.TowerMonster.Level)
}

// -------------------------------------------------------------------

// ChannelTowerMonster

// int32 ChannelId = 1;
inline void ChannelTowerMonster::clear_channelid() {
  channelid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChannelTowerMonster::_internal_channelid() const {
  return channelid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChannelTowerMonster::channelid() const {
  // @@protoc_insertion_point(field_get:JSBY.ChannelTowerMonster.ChannelId)
  return _internal_channelid();
}
inline void ChannelTowerMonster::_internal_set_channelid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channelid_ = value;
}
inline void ChannelTowerMonster::set_channelid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:JSBY.ChannelTowerMonster.ChannelId)
}

// .JSBY.TowerMonster ChannelInfo = 2;
inline bool ChannelTowerMonster::_internal_has_channelinfo() const {
  return this != internal_default_instance() && channelinfo_ != nullptr;
}
inline bool ChannelTowerMonster::has_channelinfo() const {
  return _internal_has_channelinfo();
}
inline void ChannelTowerMonster::clear_channelinfo() {
  if (GetArena() == nullptr && channelinfo_ != nullptr) {
    delete channelinfo_;
  }
  channelinfo_ = nullptr;
}
inline const ::JSBY::TowerMonster& ChannelTowerMonster::_internal_channelinfo() const {
  const ::JSBY::TowerMonster* p = channelinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::TowerMonster&>(
      ::JSBY::_TowerMonster_default_instance_);
}
inline const ::JSBY::TowerMonster& ChannelTowerMonster::channelinfo() const {
  // @@protoc_insertion_point(field_get:JSBY.ChannelTowerMonster.ChannelInfo)
  return _internal_channelinfo();
}
inline void ChannelTowerMonster::unsafe_arena_set_allocated_channelinfo(
    ::JSBY::TowerMonster* channelinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channelinfo_);
  }
  channelinfo_ = channelinfo;
  if (channelinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.ChannelTowerMonster.ChannelInfo)
}
inline ::JSBY::TowerMonster* ChannelTowerMonster::release_channelinfo() {
  
  ::JSBY::TowerMonster* temp = channelinfo_;
  channelinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::TowerMonster* ChannelTowerMonster::unsafe_arena_release_channelinfo() {
  // @@protoc_insertion_point(field_release:JSBY.ChannelTowerMonster.ChannelInfo)
  
  ::JSBY::TowerMonster* temp = channelinfo_;
  channelinfo_ = nullptr;
  return temp;
}
inline ::JSBY::TowerMonster* ChannelTowerMonster::_internal_mutable_channelinfo() {
  
  if (channelinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::TowerMonster>(GetArena());
    channelinfo_ = p;
  }
  return channelinfo_;
}
inline ::JSBY::TowerMonster* ChannelTowerMonster::mutable_channelinfo() {
  // @@protoc_insertion_point(field_mutable:JSBY.ChannelTowerMonster.ChannelInfo)
  return _internal_mutable_channelinfo();
}
inline void ChannelTowerMonster::set_allocated_channelinfo(::JSBY::TowerMonster* channelinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete channelinfo_;
  }
  if (channelinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(channelinfo);
    if (message_arena != submessage_arena) {
      channelinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channelinfo, submessage_arena);
    }
    
  } else {
    
  }
  channelinfo_ = channelinfo;
  // @@protoc_insertion_point(field_set_allocated:JSBY.ChannelTowerMonster.ChannelInfo)
}

// -------------------------------------------------------------------

// SCGetTowerMonster

// int32 ReqPlayerId = 1;
inline void SCGetTowerMonster::clear_reqplayerid() {
  reqplayerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetTowerMonster::_internal_reqplayerid() const {
  return reqplayerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetTowerMonster::reqplayerid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCGetTowerMonster.ReqPlayerId)
  return _internal_reqplayerid();
}
inline void SCGetTowerMonster::_internal_set_reqplayerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reqplayerid_ = value;
}
inline void SCGetTowerMonster::set_reqplayerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reqplayerid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCGetTowerMonster.ReqPlayerId)
}

// -------------------------------------------------------------------

// CSGetTowerMonster

// int32 ReqPlayerId = 1;
inline void CSGetTowerMonster::clear_reqplayerid() {
  reqplayerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSGetTowerMonster::_internal_reqplayerid() const {
  return reqplayerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSGetTowerMonster::reqplayerid() const {
  // @@protoc_insertion_point(field_get:JSBY.CSGetTowerMonster.ReqPlayerId)
  return _internal_reqplayerid();
}
inline void CSGetTowerMonster::_internal_set_reqplayerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reqplayerid_ = value;
}
inline void CSGetTowerMonster::set_reqplayerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reqplayerid(value);
  // @@protoc_insertion_point(field_set:JSBY.CSGetTowerMonster.ReqPlayerId)
}

// .JSBY.ChannelTowerMonster Info = 2;
inline bool CSGetTowerMonster::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool CSGetTowerMonster::has_info() const {
  return _internal_has_info();
}
inline void CSGetTowerMonster::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::JSBY::ChannelTowerMonster& CSGetTowerMonster::_internal_info() const {
  const ::JSBY::ChannelTowerMonster* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::ChannelTowerMonster&>(
      ::JSBY::_ChannelTowerMonster_default_instance_);
}
inline const ::JSBY::ChannelTowerMonster& CSGetTowerMonster::info() const {
  // @@protoc_insertion_point(field_get:JSBY.CSGetTowerMonster.Info)
  return _internal_info();
}
inline void CSGetTowerMonster::unsafe_arena_set_allocated_info(
    ::JSBY::ChannelTowerMonster* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.CSGetTowerMonster.Info)
}
inline ::JSBY::ChannelTowerMonster* CSGetTowerMonster::release_info() {
  
  ::JSBY::ChannelTowerMonster* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::ChannelTowerMonster* CSGetTowerMonster::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:JSBY.CSGetTowerMonster.Info)
  
  ::JSBY::ChannelTowerMonster* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::JSBY::ChannelTowerMonster* CSGetTowerMonster::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::ChannelTowerMonster>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::JSBY::ChannelTowerMonster* CSGetTowerMonster::mutable_info() {
  // @@protoc_insertion_point(field_mutable:JSBY.CSGetTowerMonster.Info)
  return _internal_mutable_info();
}
inline void CSGetTowerMonster::set_allocated_info(::JSBY::ChannelTowerMonster* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:JSBY.CSGetTowerMonster.Info)
}

// -------------------------------------------------------------------

// SCSyncGetTowerMonster

// int32 TableID = 1;
inline void SCSyncGetTowerMonster::clear_tableid() {
  tableid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncGetTowerMonster::_internal_tableid() const {
  return tableid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSyncGetTowerMonster::tableid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCSyncGetTowerMonster.TableID)
  return _internal_tableid();
}
inline void SCSyncGetTowerMonster::_internal_set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tableid_ = value;
}
inline void SCSyncGetTowerMonster::set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tableid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCSyncGetTowerMonster.TableID)
}

// .JSBY.ChannelTowerMonster Info = 2;
inline bool SCSyncGetTowerMonster::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool SCSyncGetTowerMonster::has_info() const {
  return _internal_has_info();
}
inline void SCSyncGetTowerMonster::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::JSBY::ChannelTowerMonster& SCSyncGetTowerMonster::_internal_info() const {
  const ::JSBY::ChannelTowerMonster* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::ChannelTowerMonster&>(
      ::JSBY::_ChannelTowerMonster_default_instance_);
}
inline const ::JSBY::ChannelTowerMonster& SCSyncGetTowerMonster::info() const {
  // @@protoc_insertion_point(field_get:JSBY.SCSyncGetTowerMonster.Info)
  return _internal_info();
}
inline void SCSyncGetTowerMonster::unsafe_arena_set_allocated_info(
    ::JSBY::ChannelTowerMonster* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.SCSyncGetTowerMonster.Info)
}
inline ::JSBY::ChannelTowerMonster* SCSyncGetTowerMonster::release_info() {
  
  ::JSBY::ChannelTowerMonster* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::ChannelTowerMonster* SCSyncGetTowerMonster::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:JSBY.SCSyncGetTowerMonster.Info)
  
  ::JSBY::ChannelTowerMonster* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::JSBY::ChannelTowerMonster* SCSyncGetTowerMonster::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::ChannelTowerMonster>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::JSBY::ChannelTowerMonster* SCSyncGetTowerMonster::mutable_info() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCSyncGetTowerMonster.Info)
  return _internal_mutable_info();
}
inline void SCSyncGetTowerMonster::set_allocated_info(::JSBY::ChannelTowerMonster* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCSyncGetTowerMonster.Info)
}

// -------------------------------------------------------------------

// SCTowerMonster

// int32 TableID = 1;
inline void SCTowerMonster::clear_tableid() {
  tableid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTowerMonster::_internal_tableid() const {
  return tableid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTowerMonster::tableid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCTowerMonster.TableID)
  return _internal_tableid();
}
inline void SCTowerMonster::_internal_set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tableid_ = value;
}
inline void SCTowerMonster::set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tableid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCTowerMonster.TableID)
}

// .JSBY.ChannelTowerMonster Info = 2;
inline bool SCTowerMonster::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool SCTowerMonster::has_info() const {
  return _internal_has_info();
}
inline void SCTowerMonster::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::JSBY::ChannelTowerMonster& SCTowerMonster::_internal_info() const {
  const ::JSBY::ChannelTowerMonster* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::ChannelTowerMonster&>(
      ::JSBY::_ChannelTowerMonster_default_instance_);
}
inline const ::JSBY::ChannelTowerMonster& SCTowerMonster::info() const {
  // @@protoc_insertion_point(field_get:JSBY.SCTowerMonster.Info)
  return _internal_info();
}
inline void SCTowerMonster::unsafe_arena_set_allocated_info(
    ::JSBY::ChannelTowerMonster* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.SCTowerMonster.Info)
}
inline ::JSBY::ChannelTowerMonster* SCTowerMonster::release_info() {
  
  ::JSBY::ChannelTowerMonster* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::ChannelTowerMonster* SCTowerMonster::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:JSBY.SCTowerMonster.Info)
  
  ::JSBY::ChannelTowerMonster* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::JSBY::ChannelTowerMonster* SCTowerMonster::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::ChannelTowerMonster>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::JSBY::ChannelTowerMonster* SCTowerMonster::mutable_info() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCTowerMonster.Info)
  return _internal_mutable_info();
}
inline void SCTowerMonster::set_allocated_info(::JSBY::ChannelTowerMonster* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCTowerMonster.Info)
}

// -------------------------------------------------------------------

// CSTowerHeroAtkInfo

// repeated .JSBY.TowerHeroAtkInfo Info = 1;
inline int CSTowerHeroAtkInfo::_internal_info_size() const {
  return info_.size();
}
inline int CSTowerHeroAtkInfo::info_size() const {
  return _internal_info_size();
}
inline void CSTowerHeroAtkInfo::clear_info() {
  info_.Clear();
}
inline ::JSBY::TowerHeroAtkInfo* CSTowerHeroAtkInfo::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:JSBY.CSTowerHeroAtkInfo.Info)
  return info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSBY::TowerHeroAtkInfo >*
CSTowerHeroAtkInfo::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:JSBY.CSTowerHeroAtkInfo.Info)
  return &info_;
}
inline const ::JSBY::TowerHeroAtkInfo& CSTowerHeroAtkInfo::_internal_info(int index) const {
  return info_.Get(index);
}
inline const ::JSBY::TowerHeroAtkInfo& CSTowerHeroAtkInfo::info(int index) const {
  // @@protoc_insertion_point(field_get:JSBY.CSTowerHeroAtkInfo.Info)
  return _internal_info(index);
}
inline ::JSBY::TowerHeroAtkInfo* CSTowerHeroAtkInfo::_internal_add_info() {
  return info_.Add();
}
inline ::JSBY::TowerHeroAtkInfo* CSTowerHeroAtkInfo::add_info() {
  // @@protoc_insertion_point(field_add:JSBY.CSTowerHeroAtkInfo.Info)
  return _internal_add_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSBY::TowerHeroAtkInfo >&
CSTowerHeroAtkInfo::info() const {
  // @@protoc_insertion_point(field_list:JSBY.CSTowerHeroAtkInfo.Info)
  return info_;
}

// -------------------------------------------------------------------

// SCTowerHeroAtkInfo

// .JSBY.TowerHeroAtkInfo Info = 1;
inline bool SCTowerHeroAtkInfo::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool SCTowerHeroAtkInfo::has_info() const {
  return _internal_has_info();
}
inline void SCTowerHeroAtkInfo::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::JSBY::TowerHeroAtkInfo& SCTowerHeroAtkInfo::_internal_info() const {
  const ::JSBY::TowerHeroAtkInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::TowerHeroAtkInfo&>(
      ::JSBY::_TowerHeroAtkInfo_default_instance_);
}
inline const ::JSBY::TowerHeroAtkInfo& SCTowerHeroAtkInfo::info() const {
  // @@protoc_insertion_point(field_get:JSBY.SCTowerHeroAtkInfo.Info)
  return _internal_info();
}
inline void SCTowerHeroAtkInfo::unsafe_arena_set_allocated_info(
    ::JSBY::TowerHeroAtkInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.SCTowerHeroAtkInfo.Info)
}
inline ::JSBY::TowerHeroAtkInfo* SCTowerHeroAtkInfo::release_info() {
  
  ::JSBY::TowerHeroAtkInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::TowerHeroAtkInfo* SCTowerHeroAtkInfo::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:JSBY.SCTowerHeroAtkInfo.Info)
  
  ::JSBY::TowerHeroAtkInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::JSBY::TowerHeroAtkInfo* SCTowerHeroAtkInfo::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::TowerHeroAtkInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::JSBY::TowerHeroAtkInfo* SCTowerHeroAtkInfo::mutable_info() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCTowerHeroAtkInfo.Info)
  return _internal_mutable_info();
}
inline void SCTowerHeroAtkInfo::set_allocated_info(::JSBY::TowerHeroAtkInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCTowerHeroAtkInfo.Info)
}

// -------------------------------------------------------------------

// CSTowerUpdateHero

// .JSBY.TowerHeroInfo Info = 1;
inline bool CSTowerUpdateHero::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool CSTowerUpdateHero::has_info() const {
  return _internal_has_info();
}
inline void CSTowerUpdateHero::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::JSBY::TowerHeroInfo& CSTowerUpdateHero::_internal_info() const {
  const ::JSBY::TowerHeroInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::TowerHeroInfo&>(
      ::JSBY::_TowerHeroInfo_default_instance_);
}
inline const ::JSBY::TowerHeroInfo& CSTowerUpdateHero::info() const {
  // @@protoc_insertion_point(field_get:JSBY.CSTowerUpdateHero.Info)
  return _internal_info();
}
inline void CSTowerUpdateHero::unsafe_arena_set_allocated_info(
    ::JSBY::TowerHeroInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.CSTowerUpdateHero.Info)
}
inline ::JSBY::TowerHeroInfo* CSTowerUpdateHero::release_info() {
  
  ::JSBY::TowerHeroInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::TowerHeroInfo* CSTowerUpdateHero::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:JSBY.CSTowerUpdateHero.Info)
  
  ::JSBY::TowerHeroInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::JSBY::TowerHeroInfo* CSTowerUpdateHero::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::TowerHeroInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::JSBY::TowerHeroInfo* CSTowerUpdateHero::mutable_info() {
  // @@protoc_insertion_point(field_mutable:JSBY.CSTowerUpdateHero.Info)
  return _internal_mutable_info();
}
inline void CSTowerUpdateHero::set_allocated_info(::JSBY::TowerHeroInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:JSBY.CSTowerUpdateHero.Info)
}

// bool Leave = 2;
inline void CSTowerUpdateHero::clear_leave() {
  leave_ = false;
}
inline bool CSTowerUpdateHero::_internal_leave() const {
  return leave_;
}
inline bool CSTowerUpdateHero::leave() const {
  // @@protoc_insertion_point(field_get:JSBY.CSTowerUpdateHero.Leave)
  return _internal_leave();
}
inline void CSTowerUpdateHero::_internal_set_leave(bool value) {
  
  leave_ = value;
}
inline void CSTowerUpdateHero::set_leave(bool value) {
  _internal_set_leave(value);
  // @@protoc_insertion_point(field_set:JSBY.CSTowerUpdateHero.Leave)
}

// -------------------------------------------------------------------

// SCTowerUpdateHero

// int32 UniqueId = 1;
inline void SCTowerUpdateHero::clear_uniqueid() {
  uniqueid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTowerUpdateHero::_internal_uniqueid() const {
  return uniqueid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTowerUpdateHero::uniqueid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCTowerUpdateHero.UniqueId)
  return _internal_uniqueid();
}
inline void SCTowerUpdateHero::_internal_set_uniqueid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uniqueid_ = value;
}
inline void SCTowerUpdateHero::set_uniqueid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uniqueid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCTowerUpdateHero.UniqueId)
}

// -------------------------------------------------------------------

// SCPushTowerUpdateHero

// .JSBY.TowerHeroInfo Info = 1;
inline bool SCPushTowerUpdateHero::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool SCPushTowerUpdateHero::has_info() const {
  return _internal_has_info();
}
inline void SCPushTowerUpdateHero::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::JSBY::TowerHeroInfo& SCPushTowerUpdateHero::_internal_info() const {
  const ::JSBY::TowerHeroInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::TowerHeroInfo&>(
      ::JSBY::_TowerHeroInfo_default_instance_);
}
inline const ::JSBY::TowerHeroInfo& SCPushTowerUpdateHero::info() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushTowerUpdateHero.Info)
  return _internal_info();
}
inline void SCPushTowerUpdateHero::unsafe_arena_set_allocated_info(
    ::JSBY::TowerHeroInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.SCPushTowerUpdateHero.Info)
}
inline ::JSBY::TowerHeroInfo* SCPushTowerUpdateHero::release_info() {
  
  ::JSBY::TowerHeroInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::TowerHeroInfo* SCPushTowerUpdateHero::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:JSBY.SCPushTowerUpdateHero.Info)
  
  ::JSBY::TowerHeroInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::JSBY::TowerHeroInfo* SCPushTowerUpdateHero::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::TowerHeroInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::JSBY::TowerHeroInfo* SCPushTowerUpdateHero::mutable_info() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCPushTowerUpdateHero.Info)
  return _internal_mutable_info();
}
inline void SCPushTowerUpdateHero::set_allocated_info(::JSBY::TowerHeroInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCPushTowerUpdateHero.Info)
}

// int32 ReqPlayerId = 2;
inline void SCPushTowerUpdateHero::clear_reqplayerid() {
  reqplayerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushTowerUpdateHero::_internal_reqplayerid() const {
  return reqplayerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushTowerUpdateHero::reqplayerid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushTowerUpdateHero.ReqPlayerId)
  return _internal_reqplayerid();
}
inline void SCPushTowerUpdateHero::_internal_set_reqplayerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reqplayerid_ = value;
}
inline void SCPushTowerUpdateHero::set_reqplayerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reqplayerid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPushTowerUpdateHero.ReqPlayerId)
}

// bool Leave = 3;
inline void SCPushTowerUpdateHero::clear_leave() {
  leave_ = false;
}
inline bool SCPushTowerUpdateHero::_internal_leave() const {
  return leave_;
}
inline bool SCPushTowerUpdateHero::leave() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushTowerUpdateHero.Leave)
  return _internal_leave();
}
inline void SCPushTowerUpdateHero::_internal_set_leave(bool value) {
  
  leave_ = value;
}
inline void SCPushTowerUpdateHero::set_leave(bool value) {
  _internal_set_leave(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPushTowerUpdateHero.Leave)
}

// -------------------------------------------------------------------

// LockTargetInfo

// int32 PositionId = 1;
inline void LockTargetInfo::clear_positionid() {
  positionid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LockTargetInfo::_internal_positionid() const {
  return positionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LockTargetInfo::positionid() const {
  // @@protoc_insertion_point(field_get:JSBY.LockTargetInfo.PositionId)
  return _internal_positionid();
}
inline void LockTargetInfo::_internal_set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  positionid_ = value;
}
inline void LockTargetInfo::set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_positionid(value);
  // @@protoc_insertion_point(field_set:JSBY.LockTargetInfo.PositionId)
}

// int32 TargetPositionId = 2;
inline void LockTargetInfo::clear_targetpositionid() {
  targetpositionid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LockTargetInfo::_internal_targetpositionid() const {
  return targetpositionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LockTargetInfo::targetpositionid() const {
  // @@protoc_insertion_point(field_get:JSBY.LockTargetInfo.TargetPositionId)
  return _internal_targetpositionid();
}
inline void LockTargetInfo::_internal_set_targetpositionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  targetpositionid_ = value;
}
inline void LockTargetInfo::set_targetpositionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_targetpositionid(value);
  // @@protoc_insertion_point(field_set:JSBY.LockTargetInfo.TargetPositionId)
}

// -------------------------------------------------------------------

// CSTowerPlayerLockTarget

// repeated .JSBY.LockTargetInfo LockInfo = 1;
inline int CSTowerPlayerLockTarget::_internal_lockinfo_size() const {
  return lockinfo_.size();
}
inline int CSTowerPlayerLockTarget::lockinfo_size() const {
  return _internal_lockinfo_size();
}
inline void CSTowerPlayerLockTarget::clear_lockinfo() {
  lockinfo_.Clear();
}
inline ::JSBY::LockTargetInfo* CSTowerPlayerLockTarget::mutable_lockinfo(int index) {
  // @@protoc_insertion_point(field_mutable:JSBY.CSTowerPlayerLockTarget.LockInfo)
  return lockinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSBY::LockTargetInfo >*
CSTowerPlayerLockTarget::mutable_lockinfo() {
  // @@protoc_insertion_point(field_mutable_list:JSBY.CSTowerPlayerLockTarget.LockInfo)
  return &lockinfo_;
}
inline const ::JSBY::LockTargetInfo& CSTowerPlayerLockTarget::_internal_lockinfo(int index) const {
  return lockinfo_.Get(index);
}
inline const ::JSBY::LockTargetInfo& CSTowerPlayerLockTarget::lockinfo(int index) const {
  // @@protoc_insertion_point(field_get:JSBY.CSTowerPlayerLockTarget.LockInfo)
  return _internal_lockinfo(index);
}
inline ::JSBY::LockTargetInfo* CSTowerPlayerLockTarget::_internal_add_lockinfo() {
  return lockinfo_.Add();
}
inline ::JSBY::LockTargetInfo* CSTowerPlayerLockTarget::add_lockinfo() {
  // @@protoc_insertion_point(field_add:JSBY.CSTowerPlayerLockTarget.LockInfo)
  return _internal_add_lockinfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSBY::LockTargetInfo >&
CSTowerPlayerLockTarget::lockinfo() const {
  // @@protoc_insertion_point(field_list:JSBY.CSTowerPlayerLockTarget.LockInfo)
  return lockinfo_;
}

// -------------------------------------------------------------------

// SCTowerPlayerLockTarget

// .JSBY.LockTargetInfo LockInfo = 1;
inline bool SCTowerPlayerLockTarget::_internal_has_lockinfo() const {
  return this != internal_default_instance() && lockinfo_ != nullptr;
}
inline bool SCTowerPlayerLockTarget::has_lockinfo() const {
  return _internal_has_lockinfo();
}
inline void SCTowerPlayerLockTarget::clear_lockinfo() {
  if (GetArena() == nullptr && lockinfo_ != nullptr) {
    delete lockinfo_;
  }
  lockinfo_ = nullptr;
}
inline const ::JSBY::LockTargetInfo& SCTowerPlayerLockTarget::_internal_lockinfo() const {
  const ::JSBY::LockTargetInfo* p = lockinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::LockTargetInfo&>(
      ::JSBY::_LockTargetInfo_default_instance_);
}
inline const ::JSBY::LockTargetInfo& SCTowerPlayerLockTarget::lockinfo() const {
  // @@protoc_insertion_point(field_get:JSBY.SCTowerPlayerLockTarget.LockInfo)
  return _internal_lockinfo();
}
inline void SCTowerPlayerLockTarget::unsafe_arena_set_allocated_lockinfo(
    ::JSBY::LockTargetInfo* lockinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lockinfo_);
  }
  lockinfo_ = lockinfo;
  if (lockinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.SCTowerPlayerLockTarget.LockInfo)
}
inline ::JSBY::LockTargetInfo* SCTowerPlayerLockTarget::release_lockinfo() {
  
  ::JSBY::LockTargetInfo* temp = lockinfo_;
  lockinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::LockTargetInfo* SCTowerPlayerLockTarget::unsafe_arena_release_lockinfo() {
  // @@protoc_insertion_point(field_release:JSBY.SCTowerPlayerLockTarget.LockInfo)
  
  ::JSBY::LockTargetInfo* temp = lockinfo_;
  lockinfo_ = nullptr;
  return temp;
}
inline ::JSBY::LockTargetInfo* SCTowerPlayerLockTarget::_internal_mutable_lockinfo() {
  
  if (lockinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::LockTargetInfo>(GetArena());
    lockinfo_ = p;
  }
  return lockinfo_;
}
inline ::JSBY::LockTargetInfo* SCTowerPlayerLockTarget::mutable_lockinfo() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCTowerPlayerLockTarget.LockInfo)
  return _internal_mutable_lockinfo();
}
inline void SCTowerPlayerLockTarget::set_allocated_lockinfo(::JSBY::LockTargetInfo* lockinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lockinfo_;
  }
  if (lockinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lockinfo);
    if (message_arena != submessage_arena) {
      lockinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lockinfo, submessage_arena);
    }
    
  } else {
    
  }
  lockinfo_ = lockinfo;
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCTowerPlayerLockTarget.LockInfo)
}

// -------------------------------------------------------------------

// CSChangeBackground

// bool IsBack = 1;
inline void CSChangeBackground::clear_isback() {
  isback_ = false;
}
inline bool CSChangeBackground::_internal_isback() const {
  return isback_;
}
inline bool CSChangeBackground::isback() const {
  // @@protoc_insertion_point(field_get:JSBY.CSChangeBackground.IsBack)
  return _internal_isback();
}
inline void CSChangeBackground::_internal_set_isback(bool value) {
  
  isback_ = value;
}
inline void CSChangeBackground::set_isback(bool value) {
  _internal_set_isback(value);
  // @@protoc_insertion_point(field_set:JSBY.CSChangeBackground.IsBack)
}

// -------------------------------------------------------------------

// SCChangeBackground

// -------------------------------------------------------------------

// CSTowerMonsterExit

// int32 PositionId = 1;
inline void CSTowerMonsterExit::clear_positionid() {
  positionid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSTowerMonsterExit::_internal_positionid() const {
  return positionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSTowerMonsterExit::positionid() const {
  // @@protoc_insertion_point(field_get:JSBY.CSTowerMonsterExit.PositionId)
  return _internal_positionid();
}
inline void CSTowerMonsterExit::_internal_set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  positionid_ = value;
}
inline void CSTowerMonsterExit::set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_positionid(value);
  // @@protoc_insertion_point(field_set:JSBY.CSTowerMonsterExit.PositionId)
}

// -------------------------------------------------------------------

// SCTowerMonsterExit

// -------------------------------------------------------------------

// CSGetCurrentTime

// -------------------------------------------------------------------

// SCGetCurrentTime

// int32 Timestamp = 1;
inline void SCGetCurrentTime::clear_timestamp() {
  timestamp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetCurrentTime::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGetCurrentTime::timestamp() const {
  // @@protoc_insertion_point(field_get:JSBY.SCGetCurrentTime.Timestamp)
  return _internal_timestamp();
}
inline void SCGetCurrentTime::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timestamp_ = value;
}
inline void SCGetCurrentTime::set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:JSBY.SCGetCurrentTime.Timestamp)
}

// -------------------------------------------------------------------

// TowerGuideInfo

// int32 GuideStep = 1;
inline void TowerGuideInfo::clear_guidestep() {
  guidestep_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TowerGuideInfo::_internal_guidestep() const {
  return guidestep_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TowerGuideInfo::guidestep() const {
  // @@protoc_insertion_point(field_get:JSBY.TowerGuideInfo.GuideStep)
  return _internal_guidestep();
}
inline void TowerGuideInfo::_internal_set_guidestep(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  guidestep_ = value;
}
inline void TowerGuideInfo::set_guidestep(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_guidestep(value);
  // @@protoc_insertion_point(field_set:JSBY.TowerGuideInfo.GuideStep)
}

// bool IsFinsh = 2;
inline void TowerGuideInfo::clear_isfinsh() {
  isfinsh_ = false;
}
inline bool TowerGuideInfo::_internal_isfinsh() const {
  return isfinsh_;
}
inline bool TowerGuideInfo::isfinsh() const {
  // @@protoc_insertion_point(field_get:JSBY.TowerGuideInfo.IsFinsh)
  return _internal_isfinsh();
}
inline void TowerGuideInfo::_internal_set_isfinsh(bool value) {
  
  isfinsh_ = value;
}
inline void TowerGuideInfo::set_isfinsh(bool value) {
  _internal_set_isfinsh(value);
  // @@protoc_insertion_point(field_set:JSBY.TowerGuideInfo.IsFinsh)
}

// -------------------------------------------------------------------

// CSGetTowerStep

// -------------------------------------------------------------------

// SCGetTowerGuide

// .JSBY.TowerGuideInfo GuideInfo = 1;
inline bool SCGetTowerGuide::_internal_has_guideinfo() const {
  return this != internal_default_instance() && guideinfo_ != nullptr;
}
inline bool SCGetTowerGuide::has_guideinfo() const {
  return _internal_has_guideinfo();
}
inline void SCGetTowerGuide::clear_guideinfo() {
  if (GetArena() == nullptr && guideinfo_ != nullptr) {
    delete guideinfo_;
  }
  guideinfo_ = nullptr;
}
inline const ::JSBY::TowerGuideInfo& SCGetTowerGuide::_internal_guideinfo() const {
  const ::JSBY::TowerGuideInfo* p = guideinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::TowerGuideInfo&>(
      ::JSBY::_TowerGuideInfo_default_instance_);
}
inline const ::JSBY::TowerGuideInfo& SCGetTowerGuide::guideinfo() const {
  // @@protoc_insertion_point(field_get:JSBY.SCGetTowerGuide.GuideInfo)
  return _internal_guideinfo();
}
inline void SCGetTowerGuide::unsafe_arena_set_allocated_guideinfo(
    ::JSBY::TowerGuideInfo* guideinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guideinfo_);
  }
  guideinfo_ = guideinfo;
  if (guideinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.SCGetTowerGuide.GuideInfo)
}
inline ::JSBY::TowerGuideInfo* SCGetTowerGuide::release_guideinfo() {
  
  ::JSBY::TowerGuideInfo* temp = guideinfo_;
  guideinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::TowerGuideInfo* SCGetTowerGuide::unsafe_arena_release_guideinfo() {
  // @@protoc_insertion_point(field_release:JSBY.SCGetTowerGuide.GuideInfo)
  
  ::JSBY::TowerGuideInfo* temp = guideinfo_;
  guideinfo_ = nullptr;
  return temp;
}
inline ::JSBY::TowerGuideInfo* SCGetTowerGuide::_internal_mutable_guideinfo() {
  
  if (guideinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::TowerGuideInfo>(GetArena());
    guideinfo_ = p;
  }
  return guideinfo_;
}
inline ::JSBY::TowerGuideInfo* SCGetTowerGuide::mutable_guideinfo() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCGetTowerGuide.GuideInfo)
  return _internal_mutable_guideinfo();
}
inline void SCGetTowerGuide::set_allocated_guideinfo(::JSBY::TowerGuideInfo* guideinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete guideinfo_;
  }
  if (guideinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(guideinfo);
    if (message_arena != submessage_arena) {
      guideinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guideinfo, submessage_arena);
    }
    
  } else {
    
  }
  guideinfo_ = guideinfo;
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCGetTowerGuide.GuideInfo)
}

// -------------------------------------------------------------------

// CSSetTowerStep

// .JSBY.TowerGuideInfo GuideInfo = 1;
inline bool CSSetTowerStep::_internal_has_guideinfo() const {
  return this != internal_default_instance() && guideinfo_ != nullptr;
}
inline bool CSSetTowerStep::has_guideinfo() const {
  return _internal_has_guideinfo();
}
inline void CSSetTowerStep::clear_guideinfo() {
  if (GetArena() == nullptr && guideinfo_ != nullptr) {
    delete guideinfo_;
  }
  guideinfo_ = nullptr;
}
inline const ::JSBY::TowerGuideInfo& CSSetTowerStep::_internal_guideinfo() const {
  const ::JSBY::TowerGuideInfo* p = guideinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::TowerGuideInfo&>(
      ::JSBY::_TowerGuideInfo_default_instance_);
}
inline const ::JSBY::TowerGuideInfo& CSSetTowerStep::guideinfo() const {
  // @@protoc_insertion_point(field_get:JSBY.CSSetTowerStep.GuideInfo)
  return _internal_guideinfo();
}
inline void CSSetTowerStep::unsafe_arena_set_allocated_guideinfo(
    ::JSBY::TowerGuideInfo* guideinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guideinfo_);
  }
  guideinfo_ = guideinfo;
  if (guideinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.CSSetTowerStep.GuideInfo)
}
inline ::JSBY::TowerGuideInfo* CSSetTowerStep::release_guideinfo() {
  
  ::JSBY::TowerGuideInfo* temp = guideinfo_;
  guideinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::TowerGuideInfo* CSSetTowerStep::unsafe_arena_release_guideinfo() {
  // @@protoc_insertion_point(field_release:JSBY.CSSetTowerStep.GuideInfo)
  
  ::JSBY::TowerGuideInfo* temp = guideinfo_;
  guideinfo_ = nullptr;
  return temp;
}
inline ::JSBY::TowerGuideInfo* CSSetTowerStep::_internal_mutable_guideinfo() {
  
  if (guideinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::TowerGuideInfo>(GetArena());
    guideinfo_ = p;
  }
  return guideinfo_;
}
inline ::JSBY::TowerGuideInfo* CSSetTowerStep::mutable_guideinfo() {
  // @@protoc_insertion_point(field_mutable:JSBY.CSSetTowerStep.GuideInfo)
  return _internal_mutable_guideinfo();
}
inline void CSSetTowerStep::set_allocated_guideinfo(::JSBY::TowerGuideInfo* guideinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete guideinfo_;
  }
  if (guideinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(guideinfo);
    if (message_arena != submessage_arena) {
      guideinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guideinfo, submessage_arena);
    }
    
  } else {
    
  }
  guideinfo_ = guideinfo;
  // @@protoc_insertion_point(field_set_allocated:JSBY.CSSetTowerStep.GuideInfo)
}

// -------------------------------------------------------------------

// SCSetTowerStep

// -------------------------------------------------------------------

// CSTowerExchangeHero

// int32 NewPositionId = 1;
inline void CSTowerExchangeHero::clear_newpositionid() {
  newpositionid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSTowerExchangeHero::_internal_newpositionid() const {
  return newpositionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSTowerExchangeHero::newpositionid() const {
  // @@protoc_insertion_point(field_get:JSBY.CSTowerExchangeHero.NewPositionId)
  return _internal_newpositionid();
}
inline void CSTowerExchangeHero::_internal_set_newpositionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  newpositionid_ = value;
}
inline void CSTowerExchangeHero::set_newpositionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_newpositionid(value);
  // @@protoc_insertion_point(field_set:JSBY.CSTowerExchangeHero.NewPositionId)
}

// int32 OldPositionId = 2;
inline void CSTowerExchangeHero::clear_oldpositionid() {
  oldpositionid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSTowerExchangeHero::_internal_oldpositionid() const {
  return oldpositionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSTowerExchangeHero::oldpositionid() const {
  // @@protoc_insertion_point(field_get:JSBY.CSTowerExchangeHero.OldPositionId)
  return _internal_oldpositionid();
}
inline void CSTowerExchangeHero::_internal_set_oldpositionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  oldpositionid_ = value;
}
inline void CSTowerExchangeHero::set_oldpositionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_oldpositionid(value);
  // @@protoc_insertion_point(field_set:JSBY.CSTowerExchangeHero.OldPositionId)
}

// -------------------------------------------------------------------

// SCTowerExchangeHero

// int32 NewPositionId = 1;
inline void SCTowerExchangeHero::clear_newpositionid() {
  newpositionid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTowerExchangeHero::_internal_newpositionid() const {
  return newpositionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTowerExchangeHero::newpositionid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCTowerExchangeHero.NewPositionId)
  return _internal_newpositionid();
}
inline void SCTowerExchangeHero::_internal_set_newpositionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  newpositionid_ = value;
}
inline void SCTowerExchangeHero::set_newpositionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_newpositionid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCTowerExchangeHero.NewPositionId)
}

// int32 OldPositionId = 2;
inline void SCTowerExchangeHero::clear_oldpositionid() {
  oldpositionid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTowerExchangeHero::_internal_oldpositionid() const {
  return oldpositionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTowerExchangeHero::oldpositionid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCTowerExchangeHero.OldPositionId)
  return _internal_oldpositionid();
}
inline void SCTowerExchangeHero::_internal_set_oldpositionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  oldpositionid_ = value;
}
inline void SCTowerExchangeHero::set_oldpositionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_oldpositionid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCTowerExchangeHero.OldPositionId)
}

// int32 ReqPlayerId = 3;
inline void SCTowerExchangeHero::clear_reqplayerid() {
  reqplayerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTowerExchangeHero::_internal_reqplayerid() const {
  return reqplayerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCTowerExchangeHero::reqplayerid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCTowerExchangeHero.ReqPlayerId)
  return _internal_reqplayerid();
}
inline void SCTowerExchangeHero::_internal_set_reqplayerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reqplayerid_ = value;
}
inline void SCTowerExchangeHero::set_reqplayerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reqplayerid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCTowerExchangeHero.ReqPlayerId)
}

// -------------------------------------------------------------------

// SCLeaveTowerTableCountdown

// int32 TableID = 1;
inline void SCLeaveTowerTableCountdown::clear_tableid() {
  tableid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLeaveTowerTableCountdown::_internal_tableid() const {
  return tableid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCLeaveTowerTableCountdown::tableid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCLeaveTowerTableCountdown.TableID)
  return _internal_tableid();
}
inline void SCLeaveTowerTableCountdown::_internal_set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tableid_ = value;
}
inline void SCLeaveTowerTableCountdown::set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tableid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCLeaveTowerTableCountdown.TableID)
}

// -------------------------------------------------------------------

// PoisonBombLocation

// int32 ID = 1;
inline void PoisonBombLocation::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoisonBombLocation::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoisonBombLocation::id() const {
  // @@protoc_insertion_point(field_get:JSBY.PoisonBombLocation.ID)
  return _internal_id();
}
inline void PoisonBombLocation::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void PoisonBombLocation::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:JSBY.PoisonBombLocation.ID)
}

// int32 X = 2;
inline void PoisonBombLocation::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoisonBombLocation::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoisonBombLocation::x() const {
  // @@protoc_insertion_point(field_get:JSBY.PoisonBombLocation.X)
  return _internal_x();
}
inline void PoisonBombLocation::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void PoisonBombLocation::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:JSBY.PoisonBombLocation.X)
}

// int32 Y = 3;
inline void PoisonBombLocation::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoisonBombLocation::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoisonBombLocation::y() const {
  // @@protoc_insertion_point(field_get:JSBY.PoisonBombLocation.Y)
  return _internal_y();
}
inline void PoisonBombLocation::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void PoisonBombLocation::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:JSBY.PoisonBombLocation.Y)
}

// int32 Angle = 4;
inline void PoisonBombLocation::clear_angle() {
  angle_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoisonBombLocation::_internal_angle() const {
  return angle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoisonBombLocation::angle() const {
  // @@protoc_insertion_point(field_get:JSBY.PoisonBombLocation.Angle)
  return _internal_angle();
}
inline void PoisonBombLocation::_internal_set_angle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  angle_ = value;
}
inline void PoisonBombLocation::set_angle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:JSBY.PoisonBombLocation.Angle)
}

// -------------------------------------------------------------------

// CSPoisonBombLocation

// .JSBY.PoisonBombLocation Info = 1;
inline bool CSPoisonBombLocation::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool CSPoisonBombLocation::has_info() const {
  return _internal_has_info();
}
inline void CSPoisonBombLocation::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::JSBY::PoisonBombLocation& CSPoisonBombLocation::_internal_info() const {
  const ::JSBY::PoisonBombLocation* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::PoisonBombLocation&>(
      ::JSBY::_PoisonBombLocation_default_instance_);
}
inline const ::JSBY::PoisonBombLocation& CSPoisonBombLocation::info() const {
  // @@protoc_insertion_point(field_get:JSBY.CSPoisonBombLocation.Info)
  return _internal_info();
}
inline void CSPoisonBombLocation::unsafe_arena_set_allocated_info(
    ::JSBY::PoisonBombLocation* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.CSPoisonBombLocation.Info)
}
inline ::JSBY::PoisonBombLocation* CSPoisonBombLocation::release_info() {
  
  ::JSBY::PoisonBombLocation* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::PoisonBombLocation* CSPoisonBombLocation::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:JSBY.CSPoisonBombLocation.Info)
  
  ::JSBY::PoisonBombLocation* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::JSBY::PoisonBombLocation* CSPoisonBombLocation::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::PoisonBombLocation>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::JSBY::PoisonBombLocation* CSPoisonBombLocation::mutable_info() {
  // @@protoc_insertion_point(field_mutable:JSBY.CSPoisonBombLocation.Info)
  return _internal_mutable_info();
}
inline void CSPoisonBombLocation::set_allocated_info(::JSBY::PoisonBombLocation* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:JSBY.CSPoisonBombLocation.Info)
}

// -------------------------------------------------------------------

// SCPoisonBombLocation

// .JSBY.PoisonBombLocation Info = 1;
inline bool SCPoisonBombLocation::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool SCPoisonBombLocation::has_info() const {
  return _internal_has_info();
}
inline void SCPoisonBombLocation::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::JSBY::PoisonBombLocation& SCPoisonBombLocation::_internal_info() const {
  const ::JSBY::PoisonBombLocation* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::PoisonBombLocation&>(
      ::JSBY::_PoisonBombLocation_default_instance_);
}
inline const ::JSBY::PoisonBombLocation& SCPoisonBombLocation::info() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPoisonBombLocation.Info)
  return _internal_info();
}
inline void SCPoisonBombLocation::unsafe_arena_set_allocated_info(
    ::JSBY::PoisonBombLocation* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.SCPoisonBombLocation.Info)
}
inline ::JSBY::PoisonBombLocation* SCPoisonBombLocation::release_info() {
  
  ::JSBY::PoisonBombLocation* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::PoisonBombLocation* SCPoisonBombLocation::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:JSBY.SCPoisonBombLocation.Info)
  
  ::JSBY::PoisonBombLocation* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::JSBY::PoisonBombLocation* SCPoisonBombLocation::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::PoisonBombLocation>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::JSBY::PoisonBombLocation* SCPoisonBombLocation::mutable_info() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCPoisonBombLocation.Info)
  return _internal_mutable_info();
}
inline void SCPoisonBombLocation::set_allocated_info(::JSBY::PoisonBombLocation* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCPoisonBombLocation.Info)
}

// -------------------------------------------------------------------

// PoisonbombConvert

// int32 MonsterId = 1;
inline void PoisonbombConvert::clear_monsterid() {
  monsterid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoisonbombConvert::_internal_monsterid() const {
  return monsterid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoisonbombConvert::monsterid() const {
  // @@protoc_insertion_point(field_get:JSBY.PoisonbombConvert.MonsterId)
  return _internal_monsterid();
}
inline void PoisonbombConvert::_internal_set_monsterid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  monsterid_ = value;
}
inline void PoisonbombConvert::set_monsterid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_monsterid(value);
  // @@protoc_insertion_point(field_set:JSBY.PoisonbombConvert.MonsterId)
}

// int32 PositionId = 2;
inline void PoisonbombConvert::clear_positionid() {
  positionid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoisonbombConvert::_internal_positionid() const {
  return positionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoisonbombConvert::positionid() const {
  // @@protoc_insertion_point(field_get:JSBY.PoisonbombConvert.PositionId)
  return _internal_positionid();
}
inline void PoisonbombConvert::_internal_set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  positionid_ = value;
}
inline void PoisonbombConvert::set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_positionid(value);
  // @@protoc_insertion_point(field_set:JSBY.PoisonbombConvert.PositionId)
}

// int32 PoisonBombId = 3;
inline void PoisonbombConvert::clear_poisonbombid() {
  poisonbombid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoisonbombConvert::_internal_poisonbombid() const {
  return poisonbombid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoisonbombConvert::poisonbombid() const {
  // @@protoc_insertion_point(field_get:JSBY.PoisonbombConvert.PoisonBombId)
  return _internal_poisonbombid();
}
inline void PoisonbombConvert::_internal_set_poisonbombid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  poisonbombid_ = value;
}
inline void PoisonbombConvert::set_poisonbombid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_poisonbombid(value);
  // @@protoc_insertion_point(field_set:JSBY.PoisonbombConvert.PoisonBombId)
}

// -------------------------------------------------------------------

// SCPoisonBombConvert

// int32 PoisonBombId = 1;
inline void SCPoisonBombConvert::clear_poisonbombid() {
  poisonbombid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPoisonBombConvert::_internal_poisonbombid() const {
  return poisonbombid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPoisonBombConvert::poisonbombid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPoisonBombConvert.PoisonBombId)
  return _internal_poisonbombid();
}
inline void SCPoisonBombConvert::_internal_set_poisonbombid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  poisonbombid_ = value;
}
inline void SCPoisonBombConvert::set_poisonbombid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_poisonbombid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPoisonBombConvert.PoisonBombId)
}

// .JSBY.PoisonbombConvert Info = 2;
inline bool SCPoisonBombConvert::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool SCPoisonBombConvert::has_info() const {
  return _internal_has_info();
}
inline void SCPoisonBombConvert::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::JSBY::PoisonbombConvert& SCPoisonBombConvert::_internal_info() const {
  const ::JSBY::PoisonbombConvert* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::PoisonbombConvert&>(
      ::JSBY::_PoisonbombConvert_default_instance_);
}
inline const ::JSBY::PoisonbombConvert& SCPoisonBombConvert::info() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPoisonBombConvert.Info)
  return _internal_info();
}
inline void SCPoisonBombConvert::unsafe_arena_set_allocated_info(
    ::JSBY::PoisonbombConvert* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.SCPoisonBombConvert.Info)
}
inline ::JSBY::PoisonbombConvert* SCPoisonBombConvert::release_info() {
  
  ::JSBY::PoisonbombConvert* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::PoisonbombConvert* SCPoisonBombConvert::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:JSBY.SCPoisonBombConvert.Info)
  
  ::JSBY::PoisonbombConvert* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::JSBY::PoisonbombConvert* SCPoisonBombConvert::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::PoisonbombConvert>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::JSBY::PoisonbombConvert* SCPoisonBombConvert::mutable_info() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCPoisonBombConvert.Info)
  return _internal_mutable_info();
}
inline void SCPoisonBombConvert::set_allocated_info(::JSBY::PoisonbombConvert* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCPoisonBombConvert.Info)
}

// int32 KillPlayerID = 3;
inline void SCPoisonBombConvert::clear_killplayerid() {
  killplayerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPoisonBombConvert::_internal_killplayerid() const {
  return killplayerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPoisonBombConvert::killplayerid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPoisonBombConvert.KillPlayerID)
  return _internal_killplayerid();
}
inline void SCPoisonBombConvert::_internal_set_killplayerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  killplayerid_ = value;
}
inline void SCPoisonBombConvert::set_killplayerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_killplayerid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPoisonBombConvert.KillPlayerID)
}

// -------------------------------------------------------------------

// PoisonbombType

// int32 MonsterId = 1;
inline void PoisonbombType::clear_monsterid() {
  monsterid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoisonbombType::_internal_monsterid() const {
  return monsterid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoisonbombType::monsterid() const {
  // @@protoc_insertion_point(field_get:JSBY.PoisonbombType.MonsterId)
  return _internal_monsterid();
}
inline void PoisonbombType::_internal_set_monsterid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  monsterid_ = value;
}
inline void PoisonbombType::set_monsterid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_monsterid(value);
  // @@protoc_insertion_point(field_set:JSBY.PoisonbombType.MonsterId)
}

// int32 MasterPoisonBombId = 2;
inline void PoisonbombType::clear_masterpoisonbombid() {
  masterpoisonbombid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoisonbombType::_internal_masterpoisonbombid() const {
  return masterpoisonbombid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoisonbombType::masterpoisonbombid() const {
  // @@protoc_insertion_point(field_get:JSBY.PoisonbombType.MasterPoisonBombId)
  return _internal_masterpoisonbombid();
}
inline void PoisonbombType::_internal_set_masterpoisonbombid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  masterpoisonbombid_ = value;
}
inline void PoisonbombType::set_masterpoisonbombid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_masterpoisonbombid(value);
  // @@protoc_insertion_point(field_set:JSBY.PoisonbombType.MasterPoisonBombId)
}

// int32 PoisonBombId = 3;
inline void PoisonbombType::clear_poisonbombid() {
  poisonbombid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoisonbombType::_internal_poisonbombid() const {
  return poisonbombid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoisonbombType::poisonbombid() const {
  // @@protoc_insertion_point(field_get:JSBY.PoisonbombType.PoisonBombId)
  return _internal_poisonbombid();
}
inline void PoisonbombType::_internal_set_poisonbombid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  poisonbombid_ = value;
}
inline void PoisonbombType::set_poisonbombid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_poisonbombid(value);
  // @@protoc_insertion_point(field_set:JSBY.PoisonbombType.PoisonBombId)
}

// int32 KillPlayerId = 4;
inline void PoisonbombType::clear_killplayerid() {
  killplayerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoisonbombType::_internal_killplayerid() const {
  return killplayerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoisonbombType::killplayerid() const {
  // @@protoc_insertion_point(field_get:JSBY.PoisonbombType.KillPlayerId)
  return _internal_killplayerid();
}
inline void PoisonbombType::_internal_set_killplayerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  killplayerid_ = value;
}
inline void PoisonbombType::set_killplayerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_killplayerid(value);
  // @@protoc_insertion_point(field_set:JSBY.PoisonbombType.KillPlayerId)
}

// int32 ChannelId = 5;
inline void PoisonbombType::clear_channelid() {
  channelid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoisonbombType::_internal_channelid() const {
  return channelid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoisonbombType::channelid() const {
  // @@protoc_insertion_point(field_get:JSBY.PoisonbombType.ChannelId)
  return _internal_channelid();
}
inline void PoisonbombType::_internal_set_channelid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channelid_ = value;
}
inline void PoisonbombType::set_channelid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:JSBY.PoisonbombType.ChannelId)
}

// int32 ProcessTime = 6;
inline void PoisonbombType::clear_processtime() {
  processtime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoisonbombType::_internal_processtime() const {
  return processtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PoisonbombType::processtime() const {
  // @@protoc_insertion_point(field_get:JSBY.PoisonbombType.ProcessTime)
  return _internal_processtime();
}
inline void PoisonbombType::_internal_set_processtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  processtime_ = value;
}
inline void PoisonbombType::set_processtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_processtime(value);
  // @@protoc_insertion_point(field_set:JSBY.PoisonbombType.ProcessTime)
}

// -------------------------------------------------------------------

// SCPoisonbombTypes

// repeated .JSBY.PoisonbombType Info = 1;
inline int SCPoisonbombTypes::_internal_info_size() const {
  return info_.size();
}
inline int SCPoisonbombTypes::info_size() const {
  return _internal_info_size();
}
inline void SCPoisonbombTypes::clear_info() {
  info_.Clear();
}
inline ::JSBY::PoisonbombType* SCPoisonbombTypes::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:JSBY.SCPoisonbombTypes.Info)
  return info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSBY::PoisonbombType >*
SCPoisonbombTypes::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:JSBY.SCPoisonbombTypes.Info)
  return &info_;
}
inline const ::JSBY::PoisonbombType& SCPoisonbombTypes::_internal_info(int index) const {
  return info_.Get(index);
}
inline const ::JSBY::PoisonbombType& SCPoisonbombTypes::info(int index) const {
  // @@protoc_insertion_point(field_get:JSBY.SCPoisonbombTypes.Info)
  return _internal_info(index);
}
inline ::JSBY::PoisonbombType* SCPoisonbombTypes::_internal_add_info() {
  return info_.Add();
}
inline ::JSBY::PoisonbombType* SCPoisonbombTypes::add_info() {
  // @@protoc_insertion_point(field_add:JSBY.SCPoisonbombTypes.Info)
  return _internal_add_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSBY::PoisonbombType >&
SCPoisonbombTypes::info() const {
  // @@protoc_insertion_point(field_list:JSBY.SCPoisonbombTypes.Info)
  return info_;
}

// -------------------------------------------------------------------

// CSDragonRelease

// int32 Ratio = 1;
inline void CSDragonRelease::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSDragonRelease::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSDragonRelease::ratio() const {
  // @@protoc_insertion_point(field_get:JSBY.CSDragonRelease.Ratio)
  return _internal_ratio();
}
inline void CSDragonRelease::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void CSDragonRelease::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:JSBY.CSDragonRelease.Ratio)
}

// int32 PropsID = 2;
inline void CSDragonRelease::clear_propsid() {
  propsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSDragonRelease::_internal_propsid() const {
  return propsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSDragonRelease::propsid() const {
  // @@protoc_insertion_point(field_get:JSBY.CSDragonRelease.PropsID)
  return _internal_propsid();
}
inline void CSDragonRelease::_internal_set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  propsid_ = value;
}
inline void CSDragonRelease::set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_propsid(value);
  // @@protoc_insertion_point(field_set:JSBY.CSDragonRelease.PropsID)
}

// -------------------------------------------------------------------

// SCDragonRelease

// int32 StartTime = 1;
inline void SCDragonRelease::clear_starttime() {
  starttime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDragonRelease::_internal_starttime() const {
  return starttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDragonRelease::starttime() const {
  // @@protoc_insertion_point(field_get:JSBY.SCDragonRelease.StartTime)
  return _internal_starttime();
}
inline void SCDragonRelease::_internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  starttime_ = value;
}
inline void SCDragonRelease::set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:JSBY.SCDragonRelease.StartTime)
}

// int32 PlayerId = 2;
inline void SCDragonRelease::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDragonRelease::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDragonRelease::playerid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCDragonRelease.PlayerId)
  return _internal_playerid();
}
inline void SCDragonRelease::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void SCDragonRelease::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCDragonRelease.PlayerId)
}

// .JSBY.SpecialAttackInfo AttackInfo = 3;
inline bool SCDragonRelease::_internal_has_attackinfo() const {
  return this != internal_default_instance() && attackinfo_ != nullptr;
}
inline bool SCDragonRelease::has_attackinfo() const {
  return _internal_has_attackinfo();
}
inline void SCDragonRelease::clear_attackinfo() {
  if (GetArena() == nullptr && attackinfo_ != nullptr) {
    delete attackinfo_;
  }
  attackinfo_ = nullptr;
}
inline const ::JSBY::SpecialAttackInfo& SCDragonRelease::_internal_attackinfo() const {
  const ::JSBY::SpecialAttackInfo* p = attackinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::SpecialAttackInfo&>(
      ::JSBY::_SpecialAttackInfo_default_instance_);
}
inline const ::JSBY::SpecialAttackInfo& SCDragonRelease::attackinfo() const {
  // @@protoc_insertion_point(field_get:JSBY.SCDragonRelease.AttackInfo)
  return _internal_attackinfo();
}
inline void SCDragonRelease::unsafe_arena_set_allocated_attackinfo(
    ::JSBY::SpecialAttackInfo* attackinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attackinfo_);
  }
  attackinfo_ = attackinfo;
  if (attackinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.SCDragonRelease.AttackInfo)
}
inline ::JSBY::SpecialAttackInfo* SCDragonRelease::release_attackinfo() {
  
  ::JSBY::SpecialAttackInfo* temp = attackinfo_;
  attackinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::SpecialAttackInfo* SCDragonRelease::unsafe_arena_release_attackinfo() {
  // @@protoc_insertion_point(field_release:JSBY.SCDragonRelease.AttackInfo)
  
  ::JSBY::SpecialAttackInfo* temp = attackinfo_;
  attackinfo_ = nullptr;
  return temp;
}
inline ::JSBY::SpecialAttackInfo* SCDragonRelease::_internal_mutable_attackinfo() {
  
  if (attackinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::SpecialAttackInfo>(GetArena());
    attackinfo_ = p;
  }
  return attackinfo_;
}
inline ::JSBY::SpecialAttackInfo* SCDragonRelease::mutable_attackinfo() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCDragonRelease.AttackInfo)
  return _internal_mutable_attackinfo();
}
inline void SCDragonRelease::set_allocated_attackinfo(::JSBY::SpecialAttackInfo* attackinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete attackinfo_;
  }
  if (attackinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(attackinfo);
    if (message_arena != submessage_arena) {
      attackinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attackinfo, submessage_arena);
    }
    
  } else {
    
  }
  attackinfo_ = attackinfo;
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCDragonRelease.AttackInfo)
}

// -------------------------------------------------------------------

// SCPushDragonRelease

// int32 StartTime = 1;
inline void SCPushDragonRelease::clear_starttime() {
  starttime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushDragonRelease::_internal_starttime() const {
  return starttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushDragonRelease::starttime() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushDragonRelease.StartTime)
  return _internal_starttime();
}
inline void SCPushDragonRelease::_internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  starttime_ = value;
}
inline void SCPushDragonRelease::set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPushDragonRelease.StartTime)
}

// int32 PlayerId = 2;
inline void SCPushDragonRelease::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushDragonRelease::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushDragonRelease::playerid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushDragonRelease.PlayerId)
  return _internal_playerid();
}
inline void SCPushDragonRelease::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void SCPushDragonRelease::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPushDragonRelease.PlayerId)
}

// .JSBY.SpecialAttackInfo AttackInfo = 3;
inline bool SCPushDragonRelease::_internal_has_attackinfo() const {
  return this != internal_default_instance() && attackinfo_ != nullptr;
}
inline bool SCPushDragonRelease::has_attackinfo() const {
  return _internal_has_attackinfo();
}
inline void SCPushDragonRelease::clear_attackinfo() {
  if (GetArena() == nullptr && attackinfo_ != nullptr) {
    delete attackinfo_;
  }
  attackinfo_ = nullptr;
}
inline const ::JSBY::SpecialAttackInfo& SCPushDragonRelease::_internal_attackinfo() const {
  const ::JSBY::SpecialAttackInfo* p = attackinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::SpecialAttackInfo&>(
      ::JSBY::_SpecialAttackInfo_default_instance_);
}
inline const ::JSBY::SpecialAttackInfo& SCPushDragonRelease::attackinfo() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushDragonRelease.AttackInfo)
  return _internal_attackinfo();
}
inline void SCPushDragonRelease::unsafe_arena_set_allocated_attackinfo(
    ::JSBY::SpecialAttackInfo* attackinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attackinfo_);
  }
  attackinfo_ = attackinfo;
  if (attackinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.SCPushDragonRelease.AttackInfo)
}
inline ::JSBY::SpecialAttackInfo* SCPushDragonRelease::release_attackinfo() {
  
  ::JSBY::SpecialAttackInfo* temp = attackinfo_;
  attackinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::SpecialAttackInfo* SCPushDragonRelease::unsafe_arena_release_attackinfo() {
  // @@protoc_insertion_point(field_release:JSBY.SCPushDragonRelease.AttackInfo)
  
  ::JSBY::SpecialAttackInfo* temp = attackinfo_;
  attackinfo_ = nullptr;
  return temp;
}
inline ::JSBY::SpecialAttackInfo* SCPushDragonRelease::_internal_mutable_attackinfo() {
  
  if (attackinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::SpecialAttackInfo>(GetArena());
    attackinfo_ = p;
  }
  return attackinfo_;
}
inline ::JSBY::SpecialAttackInfo* SCPushDragonRelease::mutable_attackinfo() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCPushDragonRelease.AttackInfo)
  return _internal_mutable_attackinfo();
}
inline void SCPushDragonRelease::set_allocated_attackinfo(::JSBY::SpecialAttackInfo* attackinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete attackinfo_;
  }
  if (attackinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(attackinfo);
    if (message_arena != submessage_arena) {
      attackinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attackinfo, submessage_arena);
    }
    
  } else {
    
  }
  attackinfo_ = attackinfo;
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCPushDragonRelease.AttackInfo)
}

// -------------------------------------------------------------------

// SCPushDragonEnd

// int32 PlayerId = 1;
inline void SCPushDragonEnd::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushDragonEnd::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushDragonEnd::playerid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushDragonEnd.PlayerId)
  return _internal_playerid();
}
inline void SCPushDragonEnd::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void SCPushDragonEnd::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPushDragonEnd.PlayerId)
}

// -------------------------------------------------------------------

// SCPushSelfDragonState

// int32 ProgressBarCount = 1;
inline void SCPushSelfDragonState::clear_progressbarcount() {
  progressbarcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushSelfDragonState::_internal_progressbarcount() const {
  return progressbarcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushSelfDragonState::progressbarcount() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushSelfDragonState.ProgressBarCount)
  return _internal_progressbarcount();
}
inline void SCPushSelfDragonState::_internal_set_progressbarcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  progressbarcount_ = value;
}
inline void SCPushSelfDragonState::set_progressbarcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_progressbarcount(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPushSelfDragonState.ProgressBarCount)
}

// int32 ProgressBar = 2;
inline void SCPushSelfDragonState::clear_progressbar() {
  progressbar_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushSelfDragonState::_internal_progressbar() const {
  return progressbar_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushSelfDragonState::progressbar() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushSelfDragonState.ProgressBar)
  return _internal_progressbar();
}
inline void SCPushSelfDragonState::_internal_set_progressbar(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  progressbar_ = value;
}
inline void SCPushSelfDragonState::set_progressbar(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_progressbar(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPushSelfDragonState.ProgressBar)
}

// int32 PropsID = 3;
inline void SCPushSelfDragonState::clear_propsid() {
  propsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushSelfDragonState::_internal_propsid() const {
  return propsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushSelfDragonState::propsid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushSelfDragonState.PropsID)
  return _internal_propsid();
}
inline void SCPushSelfDragonState::_internal_set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  propsid_ = value;
}
inline void SCPushSelfDragonState::set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_propsid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPushSelfDragonState.PropsID)
}

// -------------------------------------------------------------------

// CSOneKeyUpdateHero

// repeated int32 HeroId = 1;
inline int CSOneKeyUpdateHero::_internal_heroid_size() const {
  return heroid_.size();
}
inline int CSOneKeyUpdateHero::heroid_size() const {
  return _internal_heroid_size();
}
inline void CSOneKeyUpdateHero::clear_heroid() {
  heroid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSOneKeyUpdateHero::_internal_heroid(int index) const {
  return heroid_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSOneKeyUpdateHero::heroid(int index) const {
  // @@protoc_insertion_point(field_get:JSBY.CSOneKeyUpdateHero.HeroId)
  return _internal_heroid(index);
}
inline void CSOneKeyUpdateHero::set_heroid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  heroid_.Set(index, value);
  // @@protoc_insertion_point(field_set:JSBY.CSOneKeyUpdateHero.HeroId)
}
inline void CSOneKeyUpdateHero::_internal_add_heroid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  heroid_.Add(value);
}
inline void CSOneKeyUpdateHero::add_heroid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_heroid(value);
  // @@protoc_insertion_point(field_add:JSBY.CSOneKeyUpdateHero.HeroId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CSOneKeyUpdateHero::_internal_heroid() const {
  return heroid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CSOneKeyUpdateHero::heroid() const {
  // @@protoc_insertion_point(field_list:JSBY.CSOneKeyUpdateHero.HeroId)
  return _internal_heroid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CSOneKeyUpdateHero::_internal_mutable_heroid() {
  return &heroid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CSOneKeyUpdateHero::mutable_heroid() {
  // @@protoc_insertion_point(field_mutable_list:JSBY.CSOneKeyUpdateHero.HeroId)
  return _internal_mutable_heroid();
}

// -------------------------------------------------------------------

// SCOneKeyUpdateHero

// int32 PlayerId = 1;
inline void SCOneKeyUpdateHero::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCOneKeyUpdateHero::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCOneKeyUpdateHero::playerid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCOneKeyUpdateHero.PlayerId)
  return _internal_playerid();
}
inline void SCOneKeyUpdateHero::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void SCOneKeyUpdateHero::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCOneKeyUpdateHero.PlayerId)
}

// .JSBY.TowerHeroInfo LeaveInfo = 2;
inline bool SCOneKeyUpdateHero::_internal_has_leaveinfo() const {
  return this != internal_default_instance() && leaveinfo_ != nullptr;
}
inline bool SCOneKeyUpdateHero::has_leaveinfo() const {
  return _internal_has_leaveinfo();
}
inline void SCOneKeyUpdateHero::clear_leaveinfo() {
  if (GetArena() == nullptr && leaveinfo_ != nullptr) {
    delete leaveinfo_;
  }
  leaveinfo_ = nullptr;
}
inline const ::JSBY::TowerHeroInfo& SCOneKeyUpdateHero::_internal_leaveinfo() const {
  const ::JSBY::TowerHeroInfo* p = leaveinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::TowerHeroInfo&>(
      ::JSBY::_TowerHeroInfo_default_instance_);
}
inline const ::JSBY::TowerHeroInfo& SCOneKeyUpdateHero::leaveinfo() const {
  // @@protoc_insertion_point(field_get:JSBY.SCOneKeyUpdateHero.LeaveInfo)
  return _internal_leaveinfo();
}
inline void SCOneKeyUpdateHero::unsafe_arena_set_allocated_leaveinfo(
    ::JSBY::TowerHeroInfo* leaveinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leaveinfo_);
  }
  leaveinfo_ = leaveinfo;
  if (leaveinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.SCOneKeyUpdateHero.LeaveInfo)
}
inline ::JSBY::TowerHeroInfo* SCOneKeyUpdateHero::release_leaveinfo() {
  
  ::JSBY::TowerHeroInfo* temp = leaveinfo_;
  leaveinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::TowerHeroInfo* SCOneKeyUpdateHero::unsafe_arena_release_leaveinfo() {
  // @@protoc_insertion_point(field_release:JSBY.SCOneKeyUpdateHero.LeaveInfo)
  
  ::JSBY::TowerHeroInfo* temp = leaveinfo_;
  leaveinfo_ = nullptr;
  return temp;
}
inline ::JSBY::TowerHeroInfo* SCOneKeyUpdateHero::_internal_mutable_leaveinfo() {
  
  if (leaveinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::TowerHeroInfo>(GetArena());
    leaveinfo_ = p;
  }
  return leaveinfo_;
}
inline ::JSBY::TowerHeroInfo* SCOneKeyUpdateHero::mutable_leaveinfo() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCOneKeyUpdateHero.LeaveInfo)
  return _internal_mutable_leaveinfo();
}
inline void SCOneKeyUpdateHero::set_allocated_leaveinfo(::JSBY::TowerHeroInfo* leaveinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete leaveinfo_;
  }
  if (leaveinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(leaveinfo);
    if (message_arena != submessage_arena) {
      leaveinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leaveinfo, submessage_arena);
    }
    
  } else {
    
  }
  leaveinfo_ = leaveinfo;
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCOneKeyUpdateHero.LeaveInfo)
}

// .JSBY.TowerHeroInfo updateInfo = 3;
inline bool SCOneKeyUpdateHero::_internal_has_updateinfo() const {
  return this != internal_default_instance() && updateinfo_ != nullptr;
}
inline bool SCOneKeyUpdateHero::has_updateinfo() const {
  return _internal_has_updateinfo();
}
inline void SCOneKeyUpdateHero::clear_updateinfo() {
  if (GetArena() == nullptr && updateinfo_ != nullptr) {
    delete updateinfo_;
  }
  updateinfo_ = nullptr;
}
inline const ::JSBY::TowerHeroInfo& SCOneKeyUpdateHero::_internal_updateinfo() const {
  const ::JSBY::TowerHeroInfo* p = updateinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::TowerHeroInfo&>(
      ::JSBY::_TowerHeroInfo_default_instance_);
}
inline const ::JSBY::TowerHeroInfo& SCOneKeyUpdateHero::updateinfo() const {
  // @@protoc_insertion_point(field_get:JSBY.SCOneKeyUpdateHero.updateInfo)
  return _internal_updateinfo();
}
inline void SCOneKeyUpdateHero::unsafe_arena_set_allocated_updateinfo(
    ::JSBY::TowerHeroInfo* updateinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updateinfo_);
  }
  updateinfo_ = updateinfo;
  if (updateinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.SCOneKeyUpdateHero.updateInfo)
}
inline ::JSBY::TowerHeroInfo* SCOneKeyUpdateHero::release_updateinfo() {
  
  ::JSBY::TowerHeroInfo* temp = updateinfo_;
  updateinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::TowerHeroInfo* SCOneKeyUpdateHero::unsafe_arena_release_updateinfo() {
  // @@protoc_insertion_point(field_release:JSBY.SCOneKeyUpdateHero.updateInfo)
  
  ::JSBY::TowerHeroInfo* temp = updateinfo_;
  updateinfo_ = nullptr;
  return temp;
}
inline ::JSBY::TowerHeroInfo* SCOneKeyUpdateHero::_internal_mutable_updateinfo() {
  
  if (updateinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::TowerHeroInfo>(GetArena());
    updateinfo_ = p;
  }
  return updateinfo_;
}
inline ::JSBY::TowerHeroInfo* SCOneKeyUpdateHero::mutable_updateinfo() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCOneKeyUpdateHero.updateInfo)
  return _internal_mutable_updateinfo();
}
inline void SCOneKeyUpdateHero::set_allocated_updateinfo(::JSBY::TowerHeroInfo* updateinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete updateinfo_;
  }
  if (updateinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(updateinfo);
    if (message_arena != submessage_arena) {
      updateinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updateinfo, submessage_arena);
    }
    
  } else {
    
  }
  updateinfo_ = updateinfo;
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCOneKeyUpdateHero.updateInfo)
}

// int32 TableId = 4;
inline void SCOneKeyUpdateHero::clear_tableid() {
  tableid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCOneKeyUpdateHero::_internal_tableid() const {
  return tableid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCOneKeyUpdateHero::tableid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCOneKeyUpdateHero.TableId)
  return _internal_tableid();
}
inline void SCOneKeyUpdateHero::_internal_set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tableid_ = value;
}
inline void SCOneKeyUpdateHero::set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tableid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCOneKeyUpdateHero.TableId)
}

// -------------------------------------------------------------------

// SCPushGhostDragonRelease

// int32 StartTime = 1;
inline void SCPushGhostDragonRelease::clear_starttime() {
  starttime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushGhostDragonRelease::_internal_starttime() const {
  return starttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushGhostDragonRelease::starttime() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushGhostDragonRelease.StartTime)
  return _internal_starttime();
}
inline void SCPushGhostDragonRelease::_internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  starttime_ = value;
}
inline void SCPushGhostDragonRelease::set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPushGhostDragonRelease.StartTime)
}

// int32 PlayerId = 2;
inline void SCPushGhostDragonRelease::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushGhostDragonRelease::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushGhostDragonRelease::playerid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushGhostDragonRelease.PlayerId)
  return _internal_playerid();
}
inline void SCPushGhostDragonRelease::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void SCPushGhostDragonRelease::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPushGhostDragonRelease.PlayerId)
}

// int32 PositionId = 3;
inline void SCPushGhostDragonRelease::clear_positionid() {
  positionid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushGhostDragonRelease::_internal_positionid() const {
  return positionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushGhostDragonRelease::positionid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushGhostDragonRelease.PositionId)
  return _internal_positionid();
}
inline void SCPushGhostDragonRelease::_internal_set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  positionid_ = value;
}
inline void SCPushGhostDragonRelease::set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_positionid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPushGhostDragonRelease.PositionId)
}

// int32 AttackCount = 4;
inline void SCPushGhostDragonRelease::clear_attackcount() {
  attackcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushGhostDragonRelease::_internal_attackcount() const {
  return attackcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushGhostDragonRelease::attackcount() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushGhostDragonRelease.AttackCount)
  return _internal_attackcount();
}
inline void SCPushGhostDragonRelease::_internal_set_attackcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  attackcount_ = value;
}
inline void SCPushGhostDragonRelease::set_attackcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_attackcount(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPushGhostDragonRelease.AttackCount)
}

// int32 UseCount = 5;
inline void SCPushGhostDragonRelease::clear_usecount() {
  usecount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushGhostDragonRelease::_internal_usecount() const {
  return usecount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushGhostDragonRelease::usecount() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushGhostDragonRelease.UseCount)
  return _internal_usecount();
}
inline void SCPushGhostDragonRelease::_internal_set_usecount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  usecount_ = value;
}
inline void SCPushGhostDragonRelease::set_usecount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_usecount(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPushGhostDragonRelease.UseCount)
}

// int32 Ratio = 6;
inline void SCPushGhostDragonRelease::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushGhostDragonRelease::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushGhostDragonRelease::ratio() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushGhostDragonRelease.Ratio)
  return _internal_ratio();
}
inline void SCPushGhostDragonRelease::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void SCPushGhostDragonRelease::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPushGhostDragonRelease.Ratio)
}

// .JSBY.SpecialAttackInfo AttackInfo = 7;
inline bool SCPushGhostDragonRelease::_internal_has_attackinfo() const {
  return this != internal_default_instance() && attackinfo_ != nullptr;
}
inline bool SCPushGhostDragonRelease::has_attackinfo() const {
  return _internal_has_attackinfo();
}
inline void SCPushGhostDragonRelease::clear_attackinfo() {
  if (GetArena() == nullptr && attackinfo_ != nullptr) {
    delete attackinfo_;
  }
  attackinfo_ = nullptr;
}
inline const ::JSBY::SpecialAttackInfo& SCPushGhostDragonRelease::_internal_attackinfo() const {
  const ::JSBY::SpecialAttackInfo* p = attackinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::SpecialAttackInfo&>(
      ::JSBY::_SpecialAttackInfo_default_instance_);
}
inline const ::JSBY::SpecialAttackInfo& SCPushGhostDragonRelease::attackinfo() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushGhostDragonRelease.AttackInfo)
  return _internal_attackinfo();
}
inline void SCPushGhostDragonRelease::unsafe_arena_set_allocated_attackinfo(
    ::JSBY::SpecialAttackInfo* attackinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attackinfo_);
  }
  attackinfo_ = attackinfo;
  if (attackinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.SCPushGhostDragonRelease.AttackInfo)
}
inline ::JSBY::SpecialAttackInfo* SCPushGhostDragonRelease::release_attackinfo() {
  
  ::JSBY::SpecialAttackInfo* temp = attackinfo_;
  attackinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::SpecialAttackInfo* SCPushGhostDragonRelease::unsafe_arena_release_attackinfo() {
  // @@protoc_insertion_point(field_release:JSBY.SCPushGhostDragonRelease.AttackInfo)
  
  ::JSBY::SpecialAttackInfo* temp = attackinfo_;
  attackinfo_ = nullptr;
  return temp;
}
inline ::JSBY::SpecialAttackInfo* SCPushGhostDragonRelease::_internal_mutable_attackinfo() {
  
  if (attackinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::SpecialAttackInfo>(GetArena());
    attackinfo_ = p;
  }
  return attackinfo_;
}
inline ::JSBY::SpecialAttackInfo* SCPushGhostDragonRelease::mutable_attackinfo() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCPushGhostDragonRelease.AttackInfo)
  return _internal_mutable_attackinfo();
}
inline void SCPushGhostDragonRelease::set_allocated_attackinfo(::JSBY::SpecialAttackInfo* attackinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete attackinfo_;
  }
  if (attackinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(attackinfo);
    if (message_arena != submessage_arena) {
      attackinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attackinfo, submessage_arena);
    }
    
  } else {
    
  }
  attackinfo_ = attackinfo;
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCPushGhostDragonRelease.AttackInfo)
}

// -------------------------------------------------------------------

// SCPushGhostDragonEnd

// int32 PlayerId = 1;
inline void SCPushGhostDragonEnd::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushGhostDragonEnd::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushGhostDragonEnd::playerid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushGhostDragonEnd.PlayerId)
  return _internal_playerid();
}
inline void SCPushGhostDragonEnd::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void SCPushGhostDragonEnd::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPushGhostDragonEnd.PlayerId)
}

// int32 TableID = 2;
inline void SCPushGhostDragonEnd::clear_tableid() {
  tableid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushGhostDragonEnd::_internal_tableid() const {
  return tableid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushGhostDragonEnd::tableid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushGhostDragonEnd.TableID)
  return _internal_tableid();
}
inline void SCPushGhostDragonEnd::_internal_set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tableid_ = value;
}
inline void SCPushGhostDragonEnd::set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tableid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPushGhostDragonEnd.TableID)
}

// -------------------------------------------------------------------

// SCPushSelfGhostDragonState

// int32 Count = 1;
inline void SCPushSelfGhostDragonState::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushSelfGhostDragonState::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushSelfGhostDragonState::count() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushSelfGhostDragonState.Count)
  return _internal_count();
}
inline void SCPushSelfGhostDragonState::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void SCPushSelfGhostDragonState::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPushSelfGhostDragonState.Count)
}

// -------------------------------------------------------------------

// HeroMoney

// int32 UniqueId = 1;
inline void HeroMoney::clear_uniqueid() {
  uniqueid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeroMoney::_internal_uniqueid() const {
  return uniqueid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeroMoney::uniqueid() const {
  // @@protoc_insertion_point(field_get:JSBY.HeroMoney.UniqueId)
  return _internal_uniqueid();
}
inline void HeroMoney::_internal_set_uniqueid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uniqueid_ = value;
}
inline void HeroMoney::set_uniqueid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uniqueid(value);
  // @@protoc_insertion_point(field_set:JSBY.HeroMoney.UniqueId)
}

// int32 PlayerId = 2;
inline void HeroMoney::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeroMoney::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeroMoney::playerid() const {
  // @@protoc_insertion_point(field_get:JSBY.HeroMoney.PlayerId)
  return _internal_playerid();
}
inline void HeroMoney::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void HeroMoney::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:JSBY.HeroMoney.PlayerId)
}

// int32 Money = 3;
inline void HeroMoney::clear_money() {
  money_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeroMoney::_internal_money() const {
  return money_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeroMoney::money() const {
  // @@protoc_insertion_point(field_get:JSBY.HeroMoney.Money)
  return _internal_money();
}
inline void HeroMoney::_internal_set_money(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  money_ = value;
}
inline void HeroMoney::set_money(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:JSBY.HeroMoney.Money)
}

// -------------------------------------------------------------------

// SCPushSyncHeroMoney

// .JSBY.HeroMoney HeroMoney = 1;
inline bool SCPushSyncHeroMoney::_internal_has_heromoney() const {
  return this != internal_default_instance() && heromoney_ != nullptr;
}
inline bool SCPushSyncHeroMoney::has_heromoney() const {
  return _internal_has_heromoney();
}
inline void SCPushSyncHeroMoney::clear_heromoney() {
  if (GetArena() == nullptr && heromoney_ != nullptr) {
    delete heromoney_;
  }
  heromoney_ = nullptr;
}
inline const ::JSBY::HeroMoney& SCPushSyncHeroMoney::_internal_heromoney() const {
  const ::JSBY::HeroMoney* p = heromoney_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::HeroMoney&>(
      ::JSBY::_HeroMoney_default_instance_);
}
inline const ::JSBY::HeroMoney& SCPushSyncHeroMoney::heromoney() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushSyncHeroMoney.HeroMoney)
  return _internal_heromoney();
}
inline void SCPushSyncHeroMoney::unsafe_arena_set_allocated_heromoney(
    ::JSBY::HeroMoney* heromoney) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heromoney_);
  }
  heromoney_ = heromoney;
  if (heromoney) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.SCPushSyncHeroMoney.HeroMoney)
}
inline ::JSBY::HeroMoney* SCPushSyncHeroMoney::release_heromoney() {
  
  ::JSBY::HeroMoney* temp = heromoney_;
  heromoney_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::HeroMoney* SCPushSyncHeroMoney::unsafe_arena_release_heromoney() {
  // @@protoc_insertion_point(field_release:JSBY.SCPushSyncHeroMoney.HeroMoney)
  
  ::JSBY::HeroMoney* temp = heromoney_;
  heromoney_ = nullptr;
  return temp;
}
inline ::JSBY::HeroMoney* SCPushSyncHeroMoney::_internal_mutable_heromoney() {
  
  if (heromoney_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::HeroMoney>(GetArena());
    heromoney_ = p;
  }
  return heromoney_;
}
inline ::JSBY::HeroMoney* SCPushSyncHeroMoney::mutable_heromoney() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCPushSyncHeroMoney.HeroMoney)
  return _internal_mutable_heromoney();
}
inline void SCPushSyncHeroMoney::set_allocated_heromoney(::JSBY::HeroMoney* heromoney) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete heromoney_;
  }
  if (heromoney) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(heromoney);
    if (message_arena != submessage_arena) {
      heromoney = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heromoney, submessage_arena);
    }
    
  } else {
    
  }
  heromoney_ = heromoney;
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCPushSyncHeroMoney.HeroMoney)
}

// -------------------------------------------------------------------

// SCPushMonsterDead

// int32 PositionID = 1;
inline void SCPushMonsterDead::clear_positionid() {
  positionid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushMonsterDead::_internal_positionid() const {
  return positionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushMonsterDead::positionid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushMonsterDead.PositionID)
  return _internal_positionid();
}
inline void SCPushMonsterDead::_internal_set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  positionid_ = value;
}
inline void SCPushMonsterDead::set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_positionid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPushMonsterDead.PositionID)
}

// int32 TableID = 2;
inline void SCPushMonsterDead::clear_tableid() {
  tableid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushMonsterDead::_internal_tableid() const {
  return tableid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushMonsterDead::tableid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushMonsterDead.TableID)
  return _internal_tableid();
}
inline void SCPushMonsterDead::_internal_set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tableid_ = value;
}
inline void SCPushMonsterDead::set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tableid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPushMonsterDead.TableID)
}

// -------------------------------------------------------------------

// CSDebugData

// string DebugData = 1;
inline void CSDebugData::clear_debugdata() {
  debugdata_.ClearToEmpty();
}
inline const std::string& CSDebugData::debugdata() const {
  // @@protoc_insertion_point(field_get:JSBY.CSDebugData.DebugData)
  return _internal_debugdata();
}
inline void CSDebugData::set_debugdata(const std::string& value) {
  _internal_set_debugdata(value);
  // @@protoc_insertion_point(field_set:JSBY.CSDebugData.DebugData)
}
inline std::string* CSDebugData::mutable_debugdata() {
  // @@protoc_insertion_point(field_mutable:JSBY.CSDebugData.DebugData)
  return _internal_mutable_debugdata();
}
inline const std::string& CSDebugData::_internal_debugdata() const {
  return debugdata_.Get();
}
inline void CSDebugData::_internal_set_debugdata(const std::string& value) {
  
  debugdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSDebugData::set_debugdata(std::string&& value) {
  
  debugdata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:JSBY.CSDebugData.DebugData)
}
inline void CSDebugData::set_debugdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  debugdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:JSBY.CSDebugData.DebugData)
}
inline void CSDebugData::set_debugdata(const char* value,
    size_t size) {
  
  debugdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:JSBY.CSDebugData.DebugData)
}
inline std::string* CSDebugData::_internal_mutable_debugdata() {
  
  return debugdata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSDebugData::release_debugdata() {
  // @@protoc_insertion_point(field_release:JSBY.CSDebugData.DebugData)
  return debugdata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSDebugData::set_allocated_debugdata(std::string* debugdata) {
  if (debugdata != nullptr) {
    
  } else {
    
  }
  debugdata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), debugdata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:JSBY.CSDebugData.DebugData)
}

// -------------------------------------------------------------------

// SCDebugData

// -------------------------------------------------------------------

// SCPushMonsterBuff

// int32 PositionID = 1;
inline void SCPushMonsterBuff::clear_positionid() {
  positionid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushMonsterBuff::_internal_positionid() const {
  return positionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushMonsterBuff::positionid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushMonsterBuff.PositionID)
  return _internal_positionid();
}
inline void SCPushMonsterBuff::_internal_set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  positionid_ = value;
}
inline void SCPushMonsterBuff::set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_positionid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPushMonsterBuff.PositionID)
}

// int32 BuffType = 2;
inline void SCPushMonsterBuff::clear_bufftype() {
  bufftype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushMonsterBuff::_internal_bufftype() const {
  return bufftype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushMonsterBuff::bufftype() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushMonsterBuff.BuffType)
  return _internal_bufftype();
}
inline void SCPushMonsterBuff::_internal_set_bufftype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bufftype_ = value;
}
inline void SCPushMonsterBuff::set_bufftype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bufftype(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPushMonsterBuff.BuffType)
}

// int32 State = 3;
inline void SCPushMonsterBuff::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushMonsterBuff::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushMonsterBuff::state() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushMonsterBuff.State)
  return _internal_state();
}
inline void SCPushMonsterBuff::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SCPushMonsterBuff::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPushMonsterBuff.State)
}

// -------------------------------------------------------------------

// TableState

// int32 TableId = 1;
inline void TableState::clear_tableid() {
  tableid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TableState::_internal_tableid() const {
  return tableid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TableState::tableid() const {
  // @@protoc_insertion_point(field_get:JSBY.TableState.TableId)
  return _internal_tableid();
}
inline void TableState::_internal_set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tableid_ = value;
}
inline void TableState::set_tableid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tableid(value);
  // @@protoc_insertion_point(field_set:JSBY.TableState.TableId)
}

// int32 TablePlayer = 2;
inline void TableState::clear_tableplayer() {
  tableplayer_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TableState::_internal_tableplayer() const {
  return tableplayer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TableState::tableplayer() const {
  // @@protoc_insertion_point(field_get:JSBY.TableState.TablePlayer)
  return _internal_tableplayer();
}
inline void TableState::_internal_set_tableplayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tableplayer_ = value;
}
inline void TableState::set_tableplayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tableplayer(value);
  // @@protoc_insertion_point(field_set:JSBY.TableState.TablePlayer)
}

// -------------------------------------------------------------------

// CSGetTableId

// -------------------------------------------------------------------

// SCGetTableId

// .JSBY.TableState TableId = 1;
inline bool SCGetTableId::_internal_has_tableid() const {
  return this != internal_default_instance() && tableid_ != nullptr;
}
inline bool SCGetTableId::has_tableid() const {
  return _internal_has_tableid();
}
inline void SCGetTableId::clear_tableid() {
  if (GetArena() == nullptr && tableid_ != nullptr) {
    delete tableid_;
  }
  tableid_ = nullptr;
}
inline const ::JSBY::TableState& SCGetTableId::_internal_tableid() const {
  const ::JSBY::TableState* p = tableid_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::TableState&>(
      ::JSBY::_TableState_default_instance_);
}
inline const ::JSBY::TableState& SCGetTableId::tableid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCGetTableId.TableId)
  return _internal_tableid();
}
inline void SCGetTableId::unsafe_arena_set_allocated_tableid(
    ::JSBY::TableState* tableid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tableid_);
  }
  tableid_ = tableid;
  if (tableid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.SCGetTableId.TableId)
}
inline ::JSBY::TableState* SCGetTableId::release_tableid() {
  
  ::JSBY::TableState* temp = tableid_;
  tableid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::TableState* SCGetTableId::unsafe_arena_release_tableid() {
  // @@protoc_insertion_point(field_release:JSBY.SCGetTableId.TableId)
  
  ::JSBY::TableState* temp = tableid_;
  tableid_ = nullptr;
  return temp;
}
inline ::JSBY::TableState* SCGetTableId::_internal_mutable_tableid() {
  
  if (tableid_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::TableState>(GetArena());
    tableid_ = p;
  }
  return tableid_;
}
inline ::JSBY::TableState* SCGetTableId::mutable_tableid() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCGetTableId.TableId)
  return _internal_mutable_tableid();
}
inline void SCGetTableId::set_allocated_tableid(::JSBY::TableState* tableid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tableid_;
  }
  if (tableid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tableid);
    if (message_arena != submessage_arena) {
      tableid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tableid, submessage_arena);
    }
    
  } else {
    
  }
  tableid_ = tableid;
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCGetTableId.TableId)
}

// -------------------------------------------------------------------

// SCPlayerVipLevel

// int32 PlayerId = 1;
inline void SCPlayerVipLevel::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPlayerVipLevel::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPlayerVipLevel::playerid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPlayerVipLevel.PlayerId)
  return _internal_playerid();
}
inline void SCPlayerVipLevel::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void SCPlayerVipLevel::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPlayerVipLevel.PlayerId)
}

// int32 Level = 2;
inline void SCPlayerVipLevel::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPlayerVipLevel::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPlayerVipLevel::level() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPlayerVipLevel.Level)
  return _internal_level();
}
inline void SCPlayerVipLevel::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void SCPlayerVipLevel::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPlayerVipLevel.Level)
}

// bool IsVip = 3;
inline void SCPlayerVipLevel::clear_isvip() {
  isvip_ = false;
}
inline bool SCPlayerVipLevel::_internal_isvip() const {
  return isvip_;
}
inline bool SCPlayerVipLevel::isvip() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPlayerVipLevel.IsVip)
  return _internal_isvip();
}
inline void SCPlayerVipLevel::_internal_set_isvip(bool value) {
  
  isvip_ = value;
}
inline void SCPlayerVipLevel::set_isvip(bool value) {
  _internal_set_isvip(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPlayerVipLevel.IsVip)
}

// -------------------------------------------------------------------

// DragonProps

// int32 ProgressBarCount = 1;
inline void DragonProps::clear_progressbarcount() {
  progressbarcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DragonProps::_internal_progressbarcount() const {
  return progressbarcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DragonProps::progressbarcount() const {
  // @@protoc_insertion_point(field_get:JSBY.DragonProps.ProgressBarCount)
  return _internal_progressbarcount();
}
inline void DragonProps::_internal_set_progressbarcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  progressbarcount_ = value;
}
inline void DragonProps::set_progressbarcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_progressbarcount(value);
  // @@protoc_insertion_point(field_set:JSBY.DragonProps.ProgressBarCount)
}

// int32 ProgressBar = 2;
inline void DragonProps::clear_progressbar() {
  progressbar_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DragonProps::_internal_progressbar() const {
  return progressbar_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DragonProps::progressbar() const {
  // @@protoc_insertion_point(field_get:JSBY.DragonProps.ProgressBar)
  return _internal_progressbar();
}
inline void DragonProps::_internal_set_progressbar(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  progressbar_ = value;
}
inline void DragonProps::set_progressbar(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_progressbar(value);
  // @@protoc_insertion_point(field_set:JSBY.DragonProps.ProgressBar)
}

// int32 PropsID = 3;
inline void DragonProps::clear_propsid() {
  propsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DragonProps::_internal_propsid() const {
  return propsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DragonProps::propsid() const {
  // @@protoc_insertion_point(field_get:JSBY.DragonProps.PropsID)
  return _internal_propsid();
}
inline void DragonProps::_internal_set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  propsid_ = value;
}
inline void DragonProps::set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_propsid(value);
  // @@protoc_insertion_point(field_set:JSBY.DragonProps.PropsID)
}

// -------------------------------------------------------------------

// CSGetDragonProps

// -------------------------------------------------------------------

// SCGetDragonProps

// repeated .JSBY.DragonProps Info = 1;
inline int SCGetDragonProps::_internal_info_size() const {
  return info_.size();
}
inline int SCGetDragonProps::info_size() const {
  return _internal_info_size();
}
inline void SCGetDragonProps::clear_info() {
  info_.Clear();
}
inline ::JSBY::DragonProps* SCGetDragonProps::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:JSBY.SCGetDragonProps.Info)
  return info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSBY::DragonProps >*
SCGetDragonProps::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:JSBY.SCGetDragonProps.Info)
  return &info_;
}
inline const ::JSBY::DragonProps& SCGetDragonProps::_internal_info(int index) const {
  return info_.Get(index);
}
inline const ::JSBY::DragonProps& SCGetDragonProps::info(int index) const {
  // @@protoc_insertion_point(field_get:JSBY.SCGetDragonProps.Info)
  return _internal_info(index);
}
inline ::JSBY::DragonProps* SCGetDragonProps::_internal_add_info() {
  return info_.Add();
}
inline ::JSBY::DragonProps* SCGetDragonProps::add_info() {
  // @@protoc_insertion_point(field_add:JSBY.SCGetDragonProps.Info)
  return _internal_add_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSBY::DragonProps >&
SCGetDragonProps::info() const {
  // @@protoc_insertion_point(field_list:JSBY.SCGetDragonProps.Info)
  return info_;
}

// -------------------------------------------------------------------

// CSEquipDragonProps

// int32 PropsID = 1;
inline void CSEquipDragonProps::clear_propsid() {
  propsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSEquipDragonProps::_internal_propsid() const {
  return propsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSEquipDragonProps::propsid() const {
  // @@protoc_insertion_point(field_get:JSBY.CSEquipDragonProps.PropsID)
  return _internal_propsid();
}
inline void CSEquipDragonProps::_internal_set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  propsid_ = value;
}
inline void CSEquipDragonProps::set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_propsid(value);
  // @@protoc_insertion_point(field_set:JSBY.CSEquipDragonProps.PropsID)
}

// -------------------------------------------------------------------

// SCEquipDragonProps

// .JSBY.DragonProps Info = 1;
inline bool SCEquipDragonProps::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool SCEquipDragonProps::has_info() const {
  return _internal_has_info();
}
inline void SCEquipDragonProps::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::JSBY::DragonProps& SCEquipDragonProps::_internal_info() const {
  const ::JSBY::DragonProps* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::DragonProps&>(
      ::JSBY::_DragonProps_default_instance_);
}
inline const ::JSBY::DragonProps& SCEquipDragonProps::info() const {
  // @@protoc_insertion_point(field_get:JSBY.SCEquipDragonProps.Info)
  return _internal_info();
}
inline void SCEquipDragonProps::unsafe_arena_set_allocated_info(
    ::JSBY::DragonProps* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.SCEquipDragonProps.Info)
}
inline ::JSBY::DragonProps* SCEquipDragonProps::release_info() {
  
  ::JSBY::DragonProps* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::DragonProps* SCEquipDragonProps::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:JSBY.SCEquipDragonProps.Info)
  
  ::JSBY::DragonProps* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::JSBY::DragonProps* SCEquipDragonProps::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::DragonProps>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::JSBY::DragonProps* SCEquipDragonProps::mutable_info() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCEquipDragonProps.Info)
  return _internal_mutable_info();
}
inline void SCEquipDragonProps::set_allocated_info(::JSBY::DragonProps* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCEquipDragonProps.Info)
}

// -------------------------------------------------------------------

// SCPushDragonProps

// .JSBY.DragonProps Info = 1;
inline bool SCPushDragonProps::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool SCPushDragonProps::has_info() const {
  return _internal_has_info();
}
inline void SCPushDragonProps::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::JSBY::DragonProps& SCPushDragonProps::_internal_info() const {
  const ::JSBY::DragonProps* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::DragonProps&>(
      ::JSBY::_DragonProps_default_instance_);
}
inline const ::JSBY::DragonProps& SCPushDragonProps::info() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushDragonProps.Info)
  return _internal_info();
}
inline void SCPushDragonProps::unsafe_arena_set_allocated_info(
    ::JSBY::DragonProps* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.SCPushDragonProps.Info)
}
inline ::JSBY::DragonProps* SCPushDragonProps::release_info() {
  
  ::JSBY::DragonProps* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::DragonProps* SCPushDragonProps::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:JSBY.SCPushDragonProps.Info)
  
  ::JSBY::DragonProps* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::JSBY::DragonProps* SCPushDragonProps::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::DragonProps>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::JSBY::DragonProps* SCPushDragonProps::mutable_info() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCPushDragonProps.Info)
  return _internal_mutable_info();
}
inline void SCPushDragonProps::set_allocated_info(::JSBY::DragonProps* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCPushDragonProps.Info)
}

// -------------------------------------------------------------------

// ShopInfo

// int32 ShopID = 1;
inline void ShopInfo::clear_shopid() {
  shopid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShopInfo::_internal_shopid() const {
  return shopid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShopInfo::shopid() const {
  // @@protoc_insertion_point(field_get:JSBY.ShopInfo.ShopID)
  return _internal_shopid();
}
inline void ShopInfo::_internal_set_shopid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  shopid_ = value;
}
inline void ShopInfo::set_shopid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_shopid(value);
  // @@protoc_insertion_point(field_set:JSBY.ShopInfo.ShopID)
}

// string Name = 2;
inline void ShopInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ShopInfo::name() const {
  // @@protoc_insertion_point(field_get:JSBY.ShopInfo.Name)
  return _internal_name();
}
inline void ShopInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:JSBY.ShopInfo.Name)
}
inline std::string* ShopInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:JSBY.ShopInfo.Name)
  return _internal_mutable_name();
}
inline const std::string& ShopInfo::_internal_name() const {
  return name_.Get();
}
inline void ShopInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ShopInfo::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:JSBY.ShopInfo.Name)
}
inline void ShopInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:JSBY.ShopInfo.Name)
}
inline void ShopInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:JSBY.ShopInfo.Name)
}
inline std::string* ShopInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ShopInfo::release_name() {
  // @@protoc_insertion_point(field_release:JSBY.ShopInfo.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShopInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:JSBY.ShopInfo.Name)
}

// int32 Value = 3;
inline void ShopInfo::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShopInfo::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShopInfo::value() const {
  // @@protoc_insertion_point(field_get:JSBY.ShopInfo.Value)
  return _internal_value();
}
inline void ShopInfo::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void ShopInfo::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:JSBY.ShopInfo.Value)
}

// int32 CurrencyType = 4;
inline void ShopInfo::clear_currencytype() {
  currencytype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShopInfo::_internal_currencytype() const {
  return currencytype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShopInfo::currencytype() const {
  // @@protoc_insertion_point(field_get:JSBY.ShopInfo.CurrencyType)
  return _internal_currencytype();
}
inline void ShopInfo::_internal_set_currencytype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  currencytype_ = value;
}
inline void ShopInfo::set_currencytype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_currencytype(value);
  // @@protoc_insertion_point(field_set:JSBY.ShopInfo.CurrencyType)
}

// int32 Price = 5;
inline void ShopInfo::clear_price() {
  price_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShopInfo::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShopInfo::price() const {
  // @@protoc_insertion_point(field_get:JSBY.ShopInfo.Price)
  return _internal_price();
}
inline void ShopInfo::_internal_set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  price_ = value;
}
inline void ShopInfo::set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:JSBY.ShopInfo.Price)
}

// int32 Num = 6;
inline void ShopInfo::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShopInfo::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShopInfo::num() const {
  // @@protoc_insertion_point(field_get:JSBY.ShopInfo.Num)
  return _internal_num();
}
inline void ShopInfo::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void ShopInfo::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:JSBY.ShopInfo.Num)
}

// -------------------------------------------------------------------

// CSGetShopInfo

// .JSBY.ShopType ShopInfoType = 1;
inline void CSGetShopInfo::clear_shopinfotype() {
  shopinfotype_ = 0;
}
inline ::JSBY::ShopType CSGetShopInfo::_internal_shopinfotype() const {
  return static_cast< ::JSBY::ShopType >(shopinfotype_);
}
inline ::JSBY::ShopType CSGetShopInfo::shopinfotype() const {
  // @@protoc_insertion_point(field_get:JSBY.CSGetShopInfo.ShopInfoType)
  return _internal_shopinfotype();
}
inline void CSGetShopInfo::_internal_set_shopinfotype(::JSBY::ShopType value) {
  
  shopinfotype_ = value;
}
inline void CSGetShopInfo::set_shopinfotype(::JSBY::ShopType value) {
  _internal_set_shopinfotype(value);
  // @@protoc_insertion_point(field_set:JSBY.CSGetShopInfo.ShopInfoType)
}

// -------------------------------------------------------------------

// SCGetShopInfo

// .JSBY.ShopInfo Info = 1;
inline bool SCGetShopInfo::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool SCGetShopInfo::has_info() const {
  return _internal_has_info();
}
inline void SCGetShopInfo::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::JSBY::ShopInfo& SCGetShopInfo::_internal_info() const {
  const ::JSBY::ShopInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::ShopInfo&>(
      ::JSBY::_ShopInfo_default_instance_);
}
inline const ::JSBY::ShopInfo& SCGetShopInfo::info() const {
  // @@protoc_insertion_point(field_get:JSBY.SCGetShopInfo.Info)
  return _internal_info();
}
inline void SCGetShopInfo::unsafe_arena_set_allocated_info(
    ::JSBY::ShopInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.SCGetShopInfo.Info)
}
inline ::JSBY::ShopInfo* SCGetShopInfo::release_info() {
  
  ::JSBY::ShopInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::ShopInfo* SCGetShopInfo::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:JSBY.SCGetShopInfo.Info)
  
  ::JSBY::ShopInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::JSBY::ShopInfo* SCGetShopInfo::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::ShopInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::JSBY::ShopInfo* SCGetShopInfo::mutable_info() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCGetShopInfo.Info)
  return _internal_mutable_info();
}
inline void SCGetShopInfo::set_allocated_info(::JSBY::ShopInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCGetShopInfo.Info)
}

// -------------------------------------------------------------------

// PropsInfo

// int32 PropsID = 1;
inline void PropsInfo::clear_propsid() {
  propsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PropsInfo::_internal_propsid() const {
  return propsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PropsInfo::propsid() const {
  // @@protoc_insertion_point(field_get:JSBY.PropsInfo.PropsID)
  return _internal_propsid();
}
inline void PropsInfo::_internal_set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  propsid_ = value;
}
inline void PropsInfo::set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_propsid(value);
  // @@protoc_insertion_point(field_set:JSBY.PropsInfo.PropsID)
}

// int32 TotalNum = 2;
inline void PropsInfo::clear_totalnum() {
  totalnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PropsInfo::_internal_totalnum() const {
  return totalnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PropsInfo::totalnum() const {
  // @@protoc_insertion_point(field_get:JSBY.PropsInfo.TotalNum)
  return _internal_totalnum();
}
inline void PropsInfo::_internal_set_totalnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  totalnum_ = value;
}
inline void PropsInfo::set_totalnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_totalnum(value);
  // @@protoc_insertion_point(field_set:JSBY.PropsInfo.TotalNum)
}

// int32 AddNum = 3;
inline void PropsInfo::clear_addnum() {
  addnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PropsInfo::_internal_addnum() const {
  return addnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PropsInfo::addnum() const {
  // @@protoc_insertion_point(field_get:JSBY.PropsInfo.AddNum)
  return _internal_addnum();
}
inline void PropsInfo::_internal_set_addnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  addnum_ = value;
}
inline void PropsInfo::set_addnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_addnum(value);
  // @@protoc_insertion_point(field_set:JSBY.PropsInfo.AddNum)
}

// -------------------------------------------------------------------

// SCPushPropsInfo

// .JSBY.PropsInfo Info = 1;
inline bool SCPushPropsInfo::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool SCPushPropsInfo::has_info() const {
  return _internal_has_info();
}
inline void SCPushPropsInfo::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::JSBY::PropsInfo& SCPushPropsInfo::_internal_info() const {
  const ::JSBY::PropsInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::PropsInfo&>(
      ::JSBY::_PropsInfo_default_instance_);
}
inline const ::JSBY::PropsInfo& SCPushPropsInfo::info() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushPropsInfo.Info)
  return _internal_info();
}
inline void SCPushPropsInfo::unsafe_arena_set_allocated_info(
    ::JSBY::PropsInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.SCPushPropsInfo.Info)
}
inline ::JSBY::PropsInfo* SCPushPropsInfo::release_info() {
  
  ::JSBY::PropsInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::PropsInfo* SCPushPropsInfo::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:JSBY.SCPushPropsInfo.Info)
  
  ::JSBY::PropsInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::JSBY::PropsInfo* SCPushPropsInfo::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::PropsInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::JSBY::PropsInfo* SCPushPropsInfo::mutable_info() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCPushPropsInfo.Info)
  return _internal_mutable_info();
}
inline void SCPushPropsInfo::set_allocated_info(::JSBY::PropsInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCPushPropsInfo.Info)
}

// -------------------------------------------------------------------

// CSGetMaterialsInfo

// -------------------------------------------------------------------

// SCGetMaterialsInfo

// .JSBY.PropsInfo Info = 1;
inline bool SCGetMaterialsInfo::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool SCGetMaterialsInfo::has_info() const {
  return _internal_has_info();
}
inline void SCGetMaterialsInfo::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::JSBY::PropsInfo& SCGetMaterialsInfo::_internal_info() const {
  const ::JSBY::PropsInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::PropsInfo&>(
      ::JSBY::_PropsInfo_default_instance_);
}
inline const ::JSBY::PropsInfo& SCGetMaterialsInfo::info() const {
  // @@protoc_insertion_point(field_get:JSBY.SCGetMaterialsInfo.Info)
  return _internal_info();
}
inline void SCGetMaterialsInfo::unsafe_arena_set_allocated_info(
    ::JSBY::PropsInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.SCGetMaterialsInfo.Info)
}
inline ::JSBY::PropsInfo* SCGetMaterialsInfo::release_info() {
  
  ::JSBY::PropsInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::PropsInfo* SCGetMaterialsInfo::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:JSBY.SCGetMaterialsInfo.Info)
  
  ::JSBY::PropsInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::JSBY::PropsInfo* SCGetMaterialsInfo::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::PropsInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::JSBY::PropsInfo* SCGetMaterialsInfo::mutable_info() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCGetMaterialsInfo.Info)
  return _internal_mutable_info();
}
inline void SCGetMaterialsInfo::set_allocated_info(::JSBY::PropsInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCGetMaterialsInfo.Info)
}

// -------------------------------------------------------------------

// CSExchangeBox

// int32 TypeID = 1;
inline void CSExchangeBox::clear_typeid_() {
  typeid__ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSExchangeBox::_internal_typeid_() const {
  return typeid__;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSExchangeBox::typeid_() const {
  // @@protoc_insertion_point(field_get:JSBY.CSExchangeBox.TypeID)
  return _internal_typeid_();
}
inline void CSExchangeBox::_internal_set_typeid_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  typeid__ = value;
}
inline void CSExchangeBox::set_typeid_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_typeid_(value);
  // @@protoc_insertion_point(field_set:JSBY.CSExchangeBox.TypeID)
}

// -------------------------------------------------------------------

// RewardInfo

// int32 PropID = 1;
inline void RewardInfo::clear_propid() {
  propid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RewardInfo::_internal_propid() const {
  return propid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RewardInfo::propid() const {
  // @@protoc_insertion_point(field_get:JSBY.RewardInfo.PropID)
  return _internal_propid();
}
inline void RewardInfo::_internal_set_propid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  propid_ = value;
}
inline void RewardInfo::set_propid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_propid(value);
  // @@protoc_insertion_point(field_set:JSBY.RewardInfo.PropID)
}

// int32 PropNum = 2;
inline void RewardInfo::clear_propnum() {
  propnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RewardInfo::_internal_propnum() const {
  return propnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RewardInfo::propnum() const {
  // @@protoc_insertion_point(field_get:JSBY.RewardInfo.PropNum)
  return _internal_propnum();
}
inline void RewardInfo::_internal_set_propnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  propnum_ = value;
}
inline void RewardInfo::set_propnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_propnum(value);
  // @@protoc_insertion_point(field_set:JSBY.RewardInfo.PropNum)
}

// -------------------------------------------------------------------

// SCExchangeBox

// int32 TypeID = 1;
inline void SCExchangeBox::clear_typeid_() {
  typeid__ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCExchangeBox::_internal_typeid_() const {
  return typeid__;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCExchangeBox::typeid_() const {
  // @@protoc_insertion_point(field_get:JSBY.SCExchangeBox.TypeID)
  return _internal_typeid_();
}
inline void SCExchangeBox::_internal_set_typeid_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  typeid__ = value;
}
inline void SCExchangeBox::set_typeid_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_typeid_(value);
  // @@protoc_insertion_point(field_set:JSBY.SCExchangeBox.TypeID)
}

// int32 ID = 2;
inline void SCExchangeBox::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCExchangeBox::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCExchangeBox::id() const {
  // @@protoc_insertion_point(field_get:JSBY.SCExchangeBox.ID)
  return _internal_id();
}
inline void SCExchangeBox::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void SCExchangeBox::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:JSBY.SCExchangeBox.ID)
}

// .JSBY.RewardInfo Reward = 3;
inline bool SCExchangeBox::_internal_has_reward() const {
  return this != internal_default_instance() && reward_ != nullptr;
}
inline bool SCExchangeBox::has_reward() const {
  return _internal_has_reward();
}
inline void SCExchangeBox::clear_reward() {
  if (GetArena() == nullptr && reward_ != nullptr) {
    delete reward_;
  }
  reward_ = nullptr;
}
inline const ::JSBY::RewardInfo& SCExchangeBox::_internal_reward() const {
  const ::JSBY::RewardInfo* p = reward_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::RewardInfo&>(
      ::JSBY::_RewardInfo_default_instance_);
}
inline const ::JSBY::RewardInfo& SCExchangeBox::reward() const {
  // @@protoc_insertion_point(field_get:JSBY.SCExchangeBox.Reward)
  return _internal_reward();
}
inline void SCExchangeBox::unsafe_arena_set_allocated_reward(
    ::JSBY::RewardInfo* reward) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reward_);
  }
  reward_ = reward;
  if (reward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.SCExchangeBox.Reward)
}
inline ::JSBY::RewardInfo* SCExchangeBox::release_reward() {
  
  ::JSBY::RewardInfo* temp = reward_;
  reward_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::RewardInfo* SCExchangeBox::unsafe_arena_release_reward() {
  // @@protoc_insertion_point(field_release:JSBY.SCExchangeBox.Reward)
  
  ::JSBY::RewardInfo* temp = reward_;
  reward_ = nullptr;
  return temp;
}
inline ::JSBY::RewardInfo* SCExchangeBox::_internal_mutable_reward() {
  
  if (reward_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::RewardInfo>(GetArena());
    reward_ = p;
  }
  return reward_;
}
inline ::JSBY::RewardInfo* SCExchangeBox::mutable_reward() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCExchangeBox.Reward)
  return _internal_mutable_reward();
}
inline void SCExchangeBox::set_allocated_reward(::JSBY::RewardInfo* reward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reward_;
  }
  if (reward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reward);
    if (message_arena != submessage_arena) {
      reward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reward, submessage_arena);
    }
    
  } else {
    
  }
  reward_ = reward;
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCExchangeBox.Reward)
}

// .JSBY.RewardInfo AddReward = 4;
inline bool SCExchangeBox::_internal_has_addreward() const {
  return this != internal_default_instance() && addreward_ != nullptr;
}
inline bool SCExchangeBox::has_addreward() const {
  return _internal_has_addreward();
}
inline void SCExchangeBox::clear_addreward() {
  if (GetArena() == nullptr && addreward_ != nullptr) {
    delete addreward_;
  }
  addreward_ = nullptr;
}
inline const ::JSBY::RewardInfo& SCExchangeBox::_internal_addreward() const {
  const ::JSBY::RewardInfo* p = addreward_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::RewardInfo&>(
      ::JSBY::_RewardInfo_default_instance_);
}
inline const ::JSBY::RewardInfo& SCExchangeBox::addreward() const {
  // @@protoc_insertion_point(field_get:JSBY.SCExchangeBox.AddReward)
  return _internal_addreward();
}
inline void SCExchangeBox::unsafe_arena_set_allocated_addreward(
    ::JSBY::RewardInfo* addreward) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(addreward_);
  }
  addreward_ = addreward;
  if (addreward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.SCExchangeBox.AddReward)
}
inline ::JSBY::RewardInfo* SCExchangeBox::release_addreward() {
  
  ::JSBY::RewardInfo* temp = addreward_;
  addreward_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::RewardInfo* SCExchangeBox::unsafe_arena_release_addreward() {
  // @@protoc_insertion_point(field_release:JSBY.SCExchangeBox.AddReward)
  
  ::JSBY::RewardInfo* temp = addreward_;
  addreward_ = nullptr;
  return temp;
}
inline ::JSBY::RewardInfo* SCExchangeBox::_internal_mutable_addreward() {
  
  if (addreward_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::RewardInfo>(GetArena());
    addreward_ = p;
  }
  return addreward_;
}
inline ::JSBY::RewardInfo* SCExchangeBox::mutable_addreward() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCExchangeBox.AddReward)
  return _internal_mutable_addreward();
}
inline void SCExchangeBox::set_allocated_addreward(::JSBY::RewardInfo* addreward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete addreward_;
  }
  if (addreward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(addreward);
    if (message_arena != submessage_arena) {
      addreward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, addreward, submessage_arena);
    }
    
  } else {
    
  }
  addreward_ = addreward;
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCExchangeBox.AddReward)
}

// int32 DoublingCost = 5;
inline void SCExchangeBox::clear_doublingcost() {
  doublingcost_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCExchangeBox::_internal_doublingcost() const {
  return doublingcost_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCExchangeBox::doublingcost() const {
  // @@protoc_insertion_point(field_get:JSBY.SCExchangeBox.DoublingCost)
  return _internal_doublingcost();
}
inline void SCExchangeBox::_internal_set_doublingcost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  doublingcost_ = value;
}
inline void SCExchangeBox::set_doublingcost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_doublingcost(value);
  // @@protoc_insertion_point(field_set:JSBY.SCExchangeBox.DoublingCost)
}

// -------------------------------------------------------------------

// CSDoublingBox

// bool IsDoubling = 1;
inline void CSDoublingBox::clear_isdoubling() {
  isdoubling_ = false;
}
inline bool CSDoublingBox::_internal_isdoubling() const {
  return isdoubling_;
}
inline bool CSDoublingBox::isdoubling() const {
  // @@protoc_insertion_point(field_get:JSBY.CSDoublingBox.IsDoubling)
  return _internal_isdoubling();
}
inline void CSDoublingBox::_internal_set_isdoubling(bool value) {
  
  isdoubling_ = value;
}
inline void CSDoublingBox::set_isdoubling(bool value) {
  _internal_set_isdoubling(value);
  // @@protoc_insertion_point(field_set:JSBY.CSDoublingBox.IsDoubling)
}

// -------------------------------------------------------------------

// SCDoublingBox

// bool IsDouble = 1;
inline void SCDoublingBox::clear_isdouble() {
  isdouble_ = false;
}
inline bool SCDoublingBox::_internal_isdouble() const {
  return isdouble_;
}
inline bool SCDoublingBox::isdouble() const {
  // @@protoc_insertion_point(field_get:JSBY.SCDoublingBox.IsDouble)
  return _internal_isdouble();
}
inline void SCDoublingBox::_internal_set_isdouble(bool value) {
  
  isdouble_ = value;
}
inline void SCDoublingBox::set_isdouble(bool value) {
  _internal_set_isdouble(value);
  // @@protoc_insertion_point(field_set:JSBY.SCDoublingBox.IsDouble)
}

// int32 ID = 2;
inline void SCDoublingBox::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDoublingBox::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDoublingBox::id() const {
  // @@protoc_insertion_point(field_get:JSBY.SCDoublingBox.ID)
  return _internal_id();
}
inline void SCDoublingBox::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void SCDoublingBox::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:JSBY.SCDoublingBox.ID)
}

// .JSBY.RewardInfo Reward = 3;
inline bool SCDoublingBox::_internal_has_reward() const {
  return this != internal_default_instance() && reward_ != nullptr;
}
inline bool SCDoublingBox::has_reward() const {
  return _internal_has_reward();
}
inline void SCDoublingBox::clear_reward() {
  if (GetArena() == nullptr && reward_ != nullptr) {
    delete reward_;
  }
  reward_ = nullptr;
}
inline const ::JSBY::RewardInfo& SCDoublingBox::_internal_reward() const {
  const ::JSBY::RewardInfo* p = reward_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::RewardInfo&>(
      ::JSBY::_RewardInfo_default_instance_);
}
inline const ::JSBY::RewardInfo& SCDoublingBox::reward() const {
  // @@protoc_insertion_point(field_get:JSBY.SCDoublingBox.Reward)
  return _internal_reward();
}
inline void SCDoublingBox::unsafe_arena_set_allocated_reward(
    ::JSBY::RewardInfo* reward) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reward_);
  }
  reward_ = reward;
  if (reward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.SCDoublingBox.Reward)
}
inline ::JSBY::RewardInfo* SCDoublingBox::release_reward() {
  
  ::JSBY::RewardInfo* temp = reward_;
  reward_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::RewardInfo* SCDoublingBox::unsafe_arena_release_reward() {
  // @@protoc_insertion_point(field_release:JSBY.SCDoublingBox.Reward)
  
  ::JSBY::RewardInfo* temp = reward_;
  reward_ = nullptr;
  return temp;
}
inline ::JSBY::RewardInfo* SCDoublingBox::_internal_mutable_reward() {
  
  if (reward_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::RewardInfo>(GetArena());
    reward_ = p;
  }
  return reward_;
}
inline ::JSBY::RewardInfo* SCDoublingBox::mutable_reward() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCDoublingBox.Reward)
  return _internal_mutable_reward();
}
inline void SCDoublingBox::set_allocated_reward(::JSBY::RewardInfo* reward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reward_;
  }
  if (reward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reward);
    if (message_arena != submessage_arena) {
      reward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reward, submessage_arena);
    }
    
  } else {
    
  }
  reward_ = reward;
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCDoublingBox.Reward)
}

// .JSBY.RewardInfo AddReward = 4;
inline bool SCDoublingBox::_internal_has_addreward() const {
  return this != internal_default_instance() && addreward_ != nullptr;
}
inline bool SCDoublingBox::has_addreward() const {
  return _internal_has_addreward();
}
inline void SCDoublingBox::clear_addreward() {
  if (GetArena() == nullptr && addreward_ != nullptr) {
    delete addreward_;
  }
  addreward_ = nullptr;
}
inline const ::JSBY::RewardInfo& SCDoublingBox::_internal_addreward() const {
  const ::JSBY::RewardInfo* p = addreward_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::RewardInfo&>(
      ::JSBY::_RewardInfo_default_instance_);
}
inline const ::JSBY::RewardInfo& SCDoublingBox::addreward() const {
  // @@protoc_insertion_point(field_get:JSBY.SCDoublingBox.AddReward)
  return _internal_addreward();
}
inline void SCDoublingBox::unsafe_arena_set_allocated_addreward(
    ::JSBY::RewardInfo* addreward) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(addreward_);
  }
  addreward_ = addreward;
  if (addreward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.SCDoublingBox.AddReward)
}
inline ::JSBY::RewardInfo* SCDoublingBox::release_addreward() {
  
  ::JSBY::RewardInfo* temp = addreward_;
  addreward_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::RewardInfo* SCDoublingBox::unsafe_arena_release_addreward() {
  // @@protoc_insertion_point(field_release:JSBY.SCDoublingBox.AddReward)
  
  ::JSBY::RewardInfo* temp = addreward_;
  addreward_ = nullptr;
  return temp;
}
inline ::JSBY::RewardInfo* SCDoublingBox::_internal_mutable_addreward() {
  
  if (addreward_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::RewardInfo>(GetArena());
    addreward_ = p;
  }
  return addreward_;
}
inline ::JSBY::RewardInfo* SCDoublingBox::mutable_addreward() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCDoublingBox.AddReward)
  return _internal_mutable_addreward();
}
inline void SCDoublingBox::set_allocated_addreward(::JSBY::RewardInfo* addreward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete addreward_;
  }
  if (addreward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(addreward);
    if (message_arena != submessage_arena) {
      addreward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, addreward, submessage_arena);
    }
    
  } else {
    
  }
  addreward_ = addreward;
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCDoublingBox.AddReward)
}

// -------------------------------------------------------------------

// CSShopBuy

// int32 PropsID = 1;
inline void CSShopBuy::clear_propsid() {
  propsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSShopBuy::_internal_propsid() const {
  return propsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSShopBuy::propsid() const {
  // @@protoc_insertion_point(field_get:JSBY.CSShopBuy.PropsID)
  return _internal_propsid();
}
inline void CSShopBuy::_internal_set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  propsid_ = value;
}
inline void CSShopBuy::set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_propsid(value);
  // @@protoc_insertion_point(field_set:JSBY.CSShopBuy.PropsID)
}

// int32 PropsNum = 2;
inline void CSShopBuy::clear_propsnum() {
  propsnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSShopBuy::_internal_propsnum() const {
  return propsnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSShopBuy::propsnum() const {
  // @@protoc_insertion_point(field_get:JSBY.CSShopBuy.PropsNum)
  return _internal_propsnum();
}
inline void CSShopBuy::_internal_set_propsnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  propsnum_ = value;
}
inline void CSShopBuy::set_propsnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_propsnum(value);
  // @@protoc_insertion_point(field_set:JSBY.CSShopBuy.PropsNum)
}

// -------------------------------------------------------------------

// SCShopBuy

// int32 PropsID = 1;
inline void SCShopBuy::clear_propsid() {
  propsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCShopBuy::_internal_propsid() const {
  return propsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCShopBuy::propsid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCShopBuy.PropsID)
  return _internal_propsid();
}
inline void SCShopBuy::_internal_set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  propsid_ = value;
}
inline void SCShopBuy::set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_propsid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCShopBuy.PropsID)
}

// int32 PropsNum = 2;
inline void SCShopBuy::clear_propsnum() {
  propsnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCShopBuy::_internal_propsnum() const {
  return propsnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCShopBuy::propsnum() const {
  // @@protoc_insertion_point(field_get:JSBY.SCShopBuy.PropsNum)
  return _internal_propsnum();
}
inline void SCShopBuy::_internal_set_propsnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  propsnum_ = value;
}
inline void SCShopBuy::set_propsnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_propsnum(value);
  // @@protoc_insertion_point(field_set:JSBY.SCShopBuy.PropsNum)
}

// -------------------------------------------------------------------

// MaterialsInfo

// int32 PositionId = 1;
inline void MaterialsInfo::clear_positionid() {
  positionid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MaterialsInfo::_internal_positionid() const {
  return positionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MaterialsInfo::positionid() const {
  // @@protoc_insertion_point(field_get:JSBY.MaterialsInfo.PositionId)
  return _internal_positionid();
}
inline void MaterialsInfo::_internal_set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  positionid_ = value;
}
inline void MaterialsInfo::set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_positionid(value);
  // @@protoc_insertion_point(field_set:JSBY.MaterialsInfo.PositionId)
}

// int32 PropsID = 2;
inline void MaterialsInfo::clear_propsid() {
  propsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MaterialsInfo::_internal_propsid() const {
  return propsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MaterialsInfo::propsid() const {
  // @@protoc_insertion_point(field_get:JSBY.MaterialsInfo.PropsID)
  return _internal_propsid();
}
inline void MaterialsInfo::_internal_set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  propsid_ = value;
}
inline void MaterialsInfo::set_propsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_propsid(value);
  // @@protoc_insertion_point(field_set:JSBY.MaterialsInfo.PropsID)
}

// int32 Num = 3;
inline void MaterialsInfo::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MaterialsInfo::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MaterialsInfo::num() const {
  // @@protoc_insertion_point(field_get:JSBY.MaterialsInfo.Num)
  return _internal_num();
}
inline void MaterialsInfo::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void MaterialsInfo::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:JSBY.MaterialsInfo.Num)
}

// -------------------------------------------------------------------

// SCPushDropMaterials

// repeated .JSBY.MaterialsInfo Info = 1;
inline int SCPushDropMaterials::_internal_info_size() const {
  return info_.size();
}
inline int SCPushDropMaterials::info_size() const {
  return _internal_info_size();
}
inline void SCPushDropMaterials::clear_info() {
  info_.Clear();
}
inline ::JSBY::MaterialsInfo* SCPushDropMaterials::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:JSBY.SCPushDropMaterials.Info)
  return info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSBY::MaterialsInfo >*
SCPushDropMaterials::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:JSBY.SCPushDropMaterials.Info)
  return &info_;
}
inline const ::JSBY::MaterialsInfo& SCPushDropMaterials::_internal_info(int index) const {
  return info_.Get(index);
}
inline const ::JSBY::MaterialsInfo& SCPushDropMaterials::info(int index) const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushDropMaterials.Info)
  return _internal_info(index);
}
inline ::JSBY::MaterialsInfo* SCPushDropMaterials::_internal_add_info() {
  return info_.Add();
}
inline ::JSBY::MaterialsInfo* SCPushDropMaterials::add_info() {
  // @@protoc_insertion_point(field_add:JSBY.SCPushDropMaterials.Info)
  return _internal_add_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSBY::MaterialsInfo >&
SCPushDropMaterials::info() const {
  // @@protoc_insertion_point(field_list:JSBY.SCPushDropMaterials.Info)
  return info_;
}

// -------------------------------------------------------------------

// SCPushBalloonTimes

// int32 PositionId = 1;
inline void SCPushBalloonTimes::clear_positionid() {
  positionid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushBalloonTimes::_internal_positionid() const {
  return positionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushBalloonTimes::positionid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushBalloonTimes.PositionId)
  return _internal_positionid();
}
inline void SCPushBalloonTimes::_internal_set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  positionid_ = value;
}
inline void SCPushBalloonTimes::set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_positionid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPushBalloonTimes.PositionId)
}

// int32 PlayerId = 2;
inline void SCPushBalloonTimes::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushBalloonTimes::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushBalloonTimes::playerid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushBalloonTimes.PlayerId)
  return _internal_playerid();
}
inline void SCPushBalloonTimes::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void SCPushBalloonTimes::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPushBalloonTimes.PlayerId)
}

// int32 FreeTimes = 3;
inline void SCPushBalloonTimes::clear_freetimes() {
  freetimes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushBalloonTimes::_internal_freetimes() const {
  return freetimes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushBalloonTimes::freetimes() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushBalloonTimes.FreeTimes)
  return _internal_freetimes();
}
inline void SCPushBalloonTimes::_internal_set_freetimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  freetimes_ = value;
}
inline void SCPushBalloonTimes::set_freetimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_freetimes(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPushBalloonTimes.FreeTimes)
}

// int32 Ratio = 4;
inline void SCPushBalloonTimes::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushBalloonTimes::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushBalloonTimes::ratio() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushBalloonTimes.Ratio)
  return _internal_ratio();
}
inline void SCPushBalloonTimes::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void SCPushBalloonTimes::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPushBalloonTimes.Ratio)
}

// int32 StartTime = 5;
inline void SCPushBalloonTimes::clear_starttime() {
  starttime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushBalloonTimes::_internal_starttime() const {
  return starttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushBalloonTimes::starttime() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushBalloonTimes.StartTime)
  return _internal_starttime();
}
inline void SCPushBalloonTimes::_internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  starttime_ = value;
}
inline void SCPushBalloonTimes::set_starttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPushBalloonTimes.StartTime)
}

// int32 AttackCount = 6;
inline void SCPushBalloonTimes::clear_attackcount() {
  attackcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushBalloonTimes::_internal_attackcount() const {
  return attackcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushBalloonTimes::attackcount() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushBalloonTimes.AttackCount)
  return _internal_attackcount();
}
inline void SCPushBalloonTimes::_internal_set_attackcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  attackcount_ = value;
}
inline void SCPushBalloonTimes::set_attackcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_attackcount(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPushBalloonTimes.AttackCount)
}

// .JSBY.SpecialAttackInfo AttackInfo = 7;
inline bool SCPushBalloonTimes::_internal_has_attackinfo() const {
  return this != internal_default_instance() && attackinfo_ != nullptr;
}
inline bool SCPushBalloonTimes::has_attackinfo() const {
  return _internal_has_attackinfo();
}
inline void SCPushBalloonTimes::clear_attackinfo() {
  if (GetArena() == nullptr && attackinfo_ != nullptr) {
    delete attackinfo_;
  }
  attackinfo_ = nullptr;
}
inline const ::JSBY::SpecialAttackInfo& SCPushBalloonTimes::_internal_attackinfo() const {
  const ::JSBY::SpecialAttackInfo* p = attackinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::SpecialAttackInfo&>(
      ::JSBY::_SpecialAttackInfo_default_instance_);
}
inline const ::JSBY::SpecialAttackInfo& SCPushBalloonTimes::attackinfo() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushBalloonTimes.AttackInfo)
  return _internal_attackinfo();
}
inline void SCPushBalloonTimes::unsafe_arena_set_allocated_attackinfo(
    ::JSBY::SpecialAttackInfo* attackinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attackinfo_);
  }
  attackinfo_ = attackinfo;
  if (attackinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.SCPushBalloonTimes.AttackInfo)
}
inline ::JSBY::SpecialAttackInfo* SCPushBalloonTimes::release_attackinfo() {
  
  ::JSBY::SpecialAttackInfo* temp = attackinfo_;
  attackinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::SpecialAttackInfo* SCPushBalloonTimes::unsafe_arena_release_attackinfo() {
  // @@protoc_insertion_point(field_release:JSBY.SCPushBalloonTimes.AttackInfo)
  
  ::JSBY::SpecialAttackInfo* temp = attackinfo_;
  attackinfo_ = nullptr;
  return temp;
}
inline ::JSBY::SpecialAttackInfo* SCPushBalloonTimes::_internal_mutable_attackinfo() {
  
  if (attackinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::SpecialAttackInfo>(GetArena());
    attackinfo_ = p;
  }
  return attackinfo_;
}
inline ::JSBY::SpecialAttackInfo* SCPushBalloonTimes::mutable_attackinfo() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCPushBalloonTimes.AttackInfo)
  return _internal_mutable_attackinfo();
}
inline void SCPushBalloonTimes::set_allocated_attackinfo(::JSBY::SpecialAttackInfo* attackinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete attackinfo_;
  }
  if (attackinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(attackinfo);
    if (message_arena != submessage_arena) {
      attackinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attackinfo, submessage_arena);
    }
    
  } else {
    
  }
  attackinfo_ = attackinfo;
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCPushBalloonTimes.AttackInfo)
}

// -------------------------------------------------------------------

// SwitchInfo

// int32 Id = 1;
inline void SwitchInfo::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SwitchInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SwitchInfo::id() const {
  // @@protoc_insertion_point(field_get:JSBY.SwitchInfo.Id)
  return _internal_id();
}
inline void SwitchInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void SwitchInfo::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:JSBY.SwitchInfo.Id)
}

// bool Open = 2;
inline void SwitchInfo::clear_open() {
  open_ = false;
}
inline bool SwitchInfo::_internal_open() const {
  return open_;
}
inline bool SwitchInfo::open() const {
  // @@protoc_insertion_point(field_get:JSBY.SwitchInfo.Open)
  return _internal_open();
}
inline void SwitchInfo::_internal_set_open(bool value) {
  
  open_ = value;
}
inline void SwitchInfo::set_open(bool value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:JSBY.SwitchInfo.Open)
}

// -------------------------------------------------------------------

// SCFunctionSwitch

// .JSBY.SwitchInfo Info = 1;
inline bool SCFunctionSwitch::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool SCFunctionSwitch::has_info() const {
  return _internal_has_info();
}
inline void SCFunctionSwitch::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::JSBY::SwitchInfo& SCFunctionSwitch::_internal_info() const {
  const ::JSBY::SwitchInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::SwitchInfo&>(
      ::JSBY::_SwitchInfo_default_instance_);
}
inline const ::JSBY::SwitchInfo& SCFunctionSwitch::info() const {
  // @@protoc_insertion_point(field_get:JSBY.SCFunctionSwitch.Info)
  return _internal_info();
}
inline void SCFunctionSwitch::unsafe_arena_set_allocated_info(
    ::JSBY::SwitchInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.SCFunctionSwitch.Info)
}
inline ::JSBY::SwitchInfo* SCFunctionSwitch::release_info() {
  
  ::JSBY::SwitchInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::SwitchInfo* SCFunctionSwitch::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:JSBY.SCFunctionSwitch.Info)
  
  ::JSBY::SwitchInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::JSBY::SwitchInfo* SCFunctionSwitch::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::SwitchInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::JSBY::SwitchInfo* SCFunctionSwitch::mutable_info() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCFunctionSwitch.Info)
  return _internal_mutable_info();
}
inline void SCFunctionSwitch::set_allocated_info(::JSBY::SwitchInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCFunctionSwitch.Info)
}

// -------------------------------------------------------------------

// CSSealConvertMoney

// -------------------------------------------------------------------

// SCSealConvertMoney

// int32 PlayerId = 1;
inline void SCSealConvertMoney::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSealConvertMoney::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSealConvertMoney::playerid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCSealConvertMoney.PlayerId)
  return _internal_playerid();
}
inline void SCSealConvertMoney::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void SCSealConvertMoney::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCSealConvertMoney.PlayerId)
}

// int32 Seal = 2;
inline void SCSealConvertMoney::clear_seal() {
  seal_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSealConvertMoney::_internal_seal() const {
  return seal_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSealConvertMoney::seal() const {
  // @@protoc_insertion_point(field_get:JSBY.SCSealConvertMoney.Seal)
  return _internal_seal();
}
inline void SCSealConvertMoney::_internal_set_seal(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seal_ = value;
}
inline void SCSealConvertMoney::set_seal(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seal(value);
  // @@protoc_insertion_point(field_set:JSBY.SCSealConvertMoney.Seal)
}

// int32 Money = 3;
inline void SCSealConvertMoney::clear_money() {
  money_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSealConvertMoney::_internal_money() const {
  return money_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCSealConvertMoney::money() const {
  // @@protoc_insertion_point(field_get:JSBY.SCSealConvertMoney.Money)
  return _internal_money();
}
inline void SCSealConvertMoney::_internal_set_money(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  money_ = value;
}
inline void SCSealConvertMoney::set_money(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:JSBY.SCSealConvertMoney.Money)
}

// -------------------------------------------------------------------

// ConnectMonster

// int32 PositionID = 1;
inline void ConnectMonster::clear_positionid() {
  positionid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConnectMonster::_internal_positionid() const {
  return positionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConnectMonster::positionid() const {
  // @@protoc_insertion_point(field_get:JSBY.ConnectMonster.PositionID)
  return _internal_positionid();
}
inline void ConnectMonster::_internal_set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  positionid_ = value;
}
inline void ConnectMonster::set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_positionid(value);
  // @@protoc_insertion_point(field_set:JSBY.ConnectMonster.PositionID)
}

// int32 MonsterID = 2;
inline void ConnectMonster::clear_monsterid() {
  monsterid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConnectMonster::_internal_monsterid() const {
  return monsterid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConnectMonster::monsterid() const {
  // @@protoc_insertion_point(field_get:JSBY.ConnectMonster.MonsterID)
  return _internal_monsterid();
}
inline void ConnectMonster::_internal_set_monsterid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  monsterid_ = value;
}
inline void ConnectMonster::set_monsterid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_monsterid(value);
  // @@protoc_insertion_point(field_set:JSBY.ConnectMonster.MonsterID)
}

// -------------------------------------------------------------------

// SCPushConnectMonster

// repeated .JSBY.ConnectMonster Connect = 1;
inline int SCPushConnectMonster::_internal_connect_size() const {
  return connect_.size();
}
inline int SCPushConnectMonster::connect_size() const {
  return _internal_connect_size();
}
inline void SCPushConnectMonster::clear_connect() {
  connect_.Clear();
}
inline ::JSBY::ConnectMonster* SCPushConnectMonster::mutable_connect(int index) {
  // @@protoc_insertion_point(field_mutable:JSBY.SCPushConnectMonster.Connect)
  return connect_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSBY::ConnectMonster >*
SCPushConnectMonster::mutable_connect() {
  // @@protoc_insertion_point(field_mutable_list:JSBY.SCPushConnectMonster.Connect)
  return &connect_;
}
inline const ::JSBY::ConnectMonster& SCPushConnectMonster::_internal_connect(int index) const {
  return connect_.Get(index);
}
inline const ::JSBY::ConnectMonster& SCPushConnectMonster::connect(int index) const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushConnectMonster.Connect)
  return _internal_connect(index);
}
inline ::JSBY::ConnectMonster* SCPushConnectMonster::_internal_add_connect() {
  return connect_.Add();
}
inline ::JSBY::ConnectMonster* SCPushConnectMonster::add_connect() {
  // @@protoc_insertion_point(field_add:JSBY.SCPushConnectMonster.Connect)
  return _internal_add_connect();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JSBY::ConnectMonster >&
SCPushConnectMonster::connect() const {
  // @@protoc_insertion_point(field_list:JSBY.SCPushConnectMonster.Connect)
  return connect_;
}

// int32 ConnectID = 2;
inline void SCPushConnectMonster::clear_connectid() {
  connectid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushConnectMonster::_internal_connectid() const {
  return connectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushConnectMonster::connectid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushConnectMonster.ConnectID)
  return _internal_connectid();
}
inline void SCPushConnectMonster::_internal_set_connectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  connectid_ = value;
}
inline void SCPushConnectMonster::set_connectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_connectid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPushConnectMonster.ConnectID)
}

// int32 AttackPositionID = 3;
inline void SCPushConnectMonster::clear_attackpositionid() {
  attackpositionid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushConnectMonster::_internal_attackpositionid() const {
  return attackpositionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushConnectMonster::attackpositionid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushConnectMonster.AttackPositionID)
  return _internal_attackpositionid();
}
inline void SCPushConnectMonster::_internal_set_attackpositionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  attackpositionid_ = value;
}
inline void SCPushConnectMonster::set_attackpositionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_attackpositionid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPushConnectMonster.AttackPositionID)
}

// -------------------------------------------------------------------

// SCGiantUpgrade

// int32 PlayerId = 1;
inline void SCGiantUpgrade::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGiantUpgrade::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGiantUpgrade::playerid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCGiantUpgrade.PlayerId)
  return _internal_playerid();
}
inline void SCGiantUpgrade::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void SCGiantUpgrade::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCGiantUpgrade.PlayerId)
}

// int32 PositionId = 2;
inline void SCGiantUpgrade::clear_positionid() {
  positionid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGiantUpgrade::_internal_positionid() const {
  return positionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGiantUpgrade::positionid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCGiantUpgrade.PositionId)
  return _internal_positionid();
}
inline void SCGiantUpgrade::_internal_set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  positionid_ = value;
}
inline void SCGiantUpgrade::set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_positionid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCGiantUpgrade.PositionId)
}

// int32 Level = 3;
inline void SCGiantUpgrade::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGiantUpgrade::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGiantUpgrade::level() const {
  // @@protoc_insertion_point(field_get:JSBY.SCGiantUpgrade.Level)
  return _internal_level();
}
inline void SCGiantUpgrade::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void SCGiantUpgrade::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:JSBY.SCGiantUpgrade.Level)
}

// int32 AttackTimes = 4;
inline void SCGiantUpgrade::clear_attacktimes() {
  attacktimes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGiantUpgrade::_internal_attacktimes() const {
  return attacktimes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGiantUpgrade::attacktimes() const {
  // @@protoc_insertion_point(field_get:JSBY.SCGiantUpgrade.AttackTimes)
  return _internal_attacktimes();
}
inline void SCGiantUpgrade::_internal_set_attacktimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  attacktimes_ = value;
}
inline void SCGiantUpgrade::set_attacktimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_attacktimes(value);
  // @@protoc_insertion_point(field_set:JSBY.SCGiantUpgrade.AttackTimes)
}

// .JSBY.SpecialAttackInfo AttackInfo = 5;
inline bool SCGiantUpgrade::_internal_has_attackinfo() const {
  return this != internal_default_instance() && attackinfo_ != nullptr;
}
inline bool SCGiantUpgrade::has_attackinfo() const {
  return _internal_has_attackinfo();
}
inline void SCGiantUpgrade::clear_attackinfo() {
  if (GetArena() == nullptr && attackinfo_ != nullptr) {
    delete attackinfo_;
  }
  attackinfo_ = nullptr;
}
inline const ::JSBY::SpecialAttackInfo& SCGiantUpgrade::_internal_attackinfo() const {
  const ::JSBY::SpecialAttackInfo* p = attackinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::JSBY::SpecialAttackInfo&>(
      ::JSBY::_SpecialAttackInfo_default_instance_);
}
inline const ::JSBY::SpecialAttackInfo& SCGiantUpgrade::attackinfo() const {
  // @@protoc_insertion_point(field_get:JSBY.SCGiantUpgrade.AttackInfo)
  return _internal_attackinfo();
}
inline void SCGiantUpgrade::unsafe_arena_set_allocated_attackinfo(
    ::JSBY::SpecialAttackInfo* attackinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attackinfo_);
  }
  attackinfo_ = attackinfo;
  if (attackinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:JSBY.SCGiantUpgrade.AttackInfo)
}
inline ::JSBY::SpecialAttackInfo* SCGiantUpgrade::release_attackinfo() {
  
  ::JSBY::SpecialAttackInfo* temp = attackinfo_;
  attackinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::JSBY::SpecialAttackInfo* SCGiantUpgrade::unsafe_arena_release_attackinfo() {
  // @@protoc_insertion_point(field_release:JSBY.SCGiantUpgrade.AttackInfo)
  
  ::JSBY::SpecialAttackInfo* temp = attackinfo_;
  attackinfo_ = nullptr;
  return temp;
}
inline ::JSBY::SpecialAttackInfo* SCGiantUpgrade::_internal_mutable_attackinfo() {
  
  if (attackinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::JSBY::SpecialAttackInfo>(GetArena());
    attackinfo_ = p;
  }
  return attackinfo_;
}
inline ::JSBY::SpecialAttackInfo* SCGiantUpgrade::mutable_attackinfo() {
  // @@protoc_insertion_point(field_mutable:JSBY.SCGiantUpgrade.AttackInfo)
  return _internal_mutable_attackinfo();
}
inline void SCGiantUpgrade::set_allocated_attackinfo(::JSBY::SpecialAttackInfo* attackinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete attackinfo_;
  }
  if (attackinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(attackinfo);
    if (message_arena != submessage_arena) {
      attackinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attackinfo, submessage_arena);
    }
    
  } else {
    
  }
  attackinfo_ = attackinfo;
  // @@protoc_insertion_point(field_set_allocated:JSBY.SCGiantUpgrade.AttackInfo)
}

// bool IsOver = 6;
inline void SCGiantUpgrade::clear_isover() {
  isover_ = false;
}
inline bool SCGiantUpgrade::_internal_isover() const {
  return isover_;
}
inline bool SCGiantUpgrade::isover() const {
  // @@protoc_insertion_point(field_get:JSBY.SCGiantUpgrade.IsOver)
  return _internal_isover();
}
inline void SCGiantUpgrade::_internal_set_isover(bool value) {
  
  isover_ = value;
}
inline void SCGiantUpgrade::set_isover(bool value) {
  _internal_set_isover(value);
  // @@protoc_insertion_point(field_set:JSBY.SCGiantUpgrade.IsOver)
}

// int32 Ratio = 7;
inline void SCGiantUpgrade::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGiantUpgrade::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCGiantUpgrade::ratio() const {
  // @@protoc_insertion_point(field_get:JSBY.SCGiantUpgrade.Ratio)
  return _internal_ratio();
}
inline void SCGiantUpgrade::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void SCGiantUpgrade::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:JSBY.SCGiantUpgrade.Ratio)
}

// -------------------------------------------------------------------

// SCPushGiantEnd

// int32 PlayerId = 1;
inline void SCPushGiantEnd::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushGiantEnd::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushGiantEnd::playerid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushGiantEnd.PlayerId)
  return _internal_playerid();
}
inline void SCPushGiantEnd::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void SCPushGiantEnd::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPushGiantEnd.PlayerId)
}

// int32 PositionId = 2;
inline void SCPushGiantEnd::clear_positionid() {
  positionid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushGiantEnd::_internal_positionid() const {
  return positionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCPushGiantEnd::positionid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCPushGiantEnd.PositionId)
  return _internal_positionid();
}
inline void SCPushGiantEnd::_internal_set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  positionid_ = value;
}
inline void SCPushGiantEnd::set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_positionid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCPushGiantEnd.PositionId)
}

// -------------------------------------------------------------------

// SCDropCard

// int32 ID = 1;
inline void SCDropCard::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDropCard::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDropCard::id() const {
  // @@protoc_insertion_point(field_get:JSBY.SCDropCard.ID)
  return _internal_id();
}
inline void SCDropCard::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void SCDropCard::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:JSBY.SCDropCard.ID)
}

// int32 TypeID = 2;
inline void SCDropCard::clear_typeid_() {
  typeid__ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDropCard::_internal_typeid_() const {
  return typeid__;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDropCard::typeid_() const {
  // @@protoc_insertion_point(field_get:JSBY.SCDropCard.TypeID)
  return _internal_typeid_();
}
inline void SCDropCard::_internal_set_typeid_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  typeid__ = value;
}
inline void SCDropCard::set_typeid_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_typeid_(value);
  // @@protoc_insertion_point(field_set:JSBY.SCDropCard.TypeID)
}

// int32 Quality = 3;
inline void SCDropCard::clear_quality() {
  quality_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDropCard::_internal_quality() const {
  return quality_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDropCard::quality() const {
  // @@protoc_insertion_point(field_get:JSBY.SCDropCard.Quality)
  return _internal_quality();
}
inline void SCDropCard::_internal_set_quality(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  quality_ = value;
}
inline void SCDropCard::set_quality(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:JSBY.SCDropCard.Quality)
}

// int32 BasePower = 4;
inline void SCDropCard::clear_basepower() {
  basepower_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDropCard::_internal_basepower() const {
  return basepower_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDropCard::basepower() const {
  // @@protoc_insertion_point(field_get:JSBY.SCDropCard.BasePower)
  return _internal_basepower();
}
inline void SCDropCard::_internal_set_basepower(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  basepower_ = value;
}
inline void SCDropCard::set_basepower(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_basepower(value);
  // @@protoc_insertion_point(field_set:JSBY.SCDropCard.BasePower)
}

// int32 ExtendPower = 5;
inline void SCDropCard::clear_extendpower() {
  extendpower_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDropCard::_internal_extendpower() const {
  return extendpower_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDropCard::extendpower() const {
  // @@protoc_insertion_point(field_get:JSBY.SCDropCard.ExtendPower)
  return _internal_extendpower();
}
inline void SCDropCard::_internal_set_extendpower(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  extendpower_ = value;
}
inline void SCDropCard::set_extendpower(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_extendpower(value);
  // @@protoc_insertion_point(field_set:JSBY.SCDropCard.ExtendPower)
}

// int32 Equip = 6;
inline void SCDropCard::clear_equip() {
  equip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDropCard::_internal_equip() const {
  return equip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDropCard::equip() const {
  // @@protoc_insertion_point(field_get:JSBY.SCDropCard.Equip)
  return _internal_equip();
}
inline void SCDropCard::_internal_set_equip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  equip_ = value;
}
inline void SCDropCard::set_equip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_equip(value);
  // @@protoc_insertion_point(field_set:JSBY.SCDropCard.Equip)
}

// int32 PositionID = 7;
inline void SCDropCard::clear_positionid() {
  positionid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDropCard::_internal_positionid() const {
  return positionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCDropCard::positionid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCDropCard.PositionID)
  return _internal_positionid();
}
inline void SCDropCard::_internal_set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  positionid_ = value;
}
inline void SCDropCard::set_positionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_positionid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCDropCard.PositionID)
}

// -------------------------------------------------------------------

// SCAcquireSeal

// int32 PlayerId = 1;
inline void SCAcquireSeal::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCAcquireSeal::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCAcquireSeal::playerid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCAcquireSeal.PlayerId)
  return _internal_playerid();
}
inline void SCAcquireSeal::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void SCAcquireSeal::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCAcquireSeal.PlayerId)
}

// int32 MxlSealAddAwardRatio = 2;
inline void SCAcquireSeal::clear_mxlsealaddawardratio() {
  mxlsealaddawardratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCAcquireSeal::_internal_mxlsealaddawardratio() const {
  return mxlsealaddawardratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCAcquireSeal::mxlsealaddawardratio() const {
  // @@protoc_insertion_point(field_get:JSBY.SCAcquireSeal.MxlSealAddAwardRatio)
  return _internal_mxlsealaddawardratio();
}
inline void SCAcquireSeal::_internal_set_mxlsealaddawardratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mxlsealaddawardratio_ = value;
}
inline void SCAcquireSeal::set_mxlsealaddawardratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mxlsealaddawardratio(value);
  // @@protoc_insertion_point(field_set:JSBY.SCAcquireSeal.MxlSealAddAwardRatio)
}

// int32 HeroPositionId = 3;
inline void SCAcquireSeal::clear_heropositionid() {
  heropositionid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCAcquireSeal::_internal_heropositionid() const {
  return heropositionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCAcquireSeal::heropositionid() const {
  // @@protoc_insertion_point(field_get:JSBY.SCAcquireSeal.HeroPositionId)
  return _internal_heropositionid();
}
inline void SCAcquireSeal::_internal_set_heropositionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  heropositionid_ = value;
}
inline void SCAcquireSeal::set_heropositionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_heropositionid(value);
  // @@protoc_insertion_point(field_set:JSBY.SCAcquireSeal.HeroPositionId)
}

// -------------------------------------------------------------------

// FreshMoney

// int32 PlayerId = 1;
inline void FreshMoney::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FreshMoney::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FreshMoney::playerid() const {
  // @@protoc_insertion_point(field_get:JSBY.FreshMoney.PlayerId)
  return _internal_playerid();
}
inline void FreshMoney::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void FreshMoney::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:JSBY.FreshMoney.PlayerId)
}

// int32 Fee = 2;
inline void FreshMoney::clear_fee() {
  fee_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FreshMoney::_internal_fee() const {
  return fee_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FreshMoney::fee() const {
  // @@protoc_insertion_point(field_get:JSBY.FreshMoney.Fee)
  return _internal_fee();
}
inline void FreshMoney::_internal_set_fee(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fee_ = value;
}
inline void FreshMoney::set_fee(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:JSBY.FreshMoney.Fee)
}

// int32 GameID = 3;
inline void FreshMoney::clear_gameid() {
  gameid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FreshMoney::_internal_gameid() const {
  return gameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FreshMoney::gameid() const {
  // @@protoc_insertion_point(field_get:JSBY.FreshMoney.GameID)
  return _internal_gameid();
}
inline void FreshMoney::_internal_set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gameid_ = value;
}
inline void FreshMoney::set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:JSBY.FreshMoney.GameID)
}

// int32 CYMoney = 4;
inline void FreshMoney::clear_cymoney() {
  cymoney_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FreshMoney::_internal_cymoney() const {
  return cymoney_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FreshMoney::cymoney() const {
  // @@protoc_insertion_point(field_get:JSBY.FreshMoney.CYMoney)
  return _internal_cymoney();
}
inline void FreshMoney::_internal_set_cymoney(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cymoney_ = value;
}
inline void FreshMoney::set_cymoney(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cymoney(value);
  // @@protoc_insertion_point(field_set:JSBY.FreshMoney.CYMoney)
}

// -------------------------------------------------------------------

// ShutdownService

// int32 GameID = 1;
inline void ShutdownService::clear_gameid() {
  gameid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShutdownService::_internal_gameid() const {
  return gameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShutdownService::gameid() const {
  // @@protoc_insertion_point(field_get:JSBY.ShutdownService.GameID)
  return _internal_gameid();
}
inline void ShutdownService::_internal_set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gameid_ = value;
}
inline void ShutdownService::set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:JSBY.ShutdownService.GameID)
}

// int32 ArenaID = 2;
inline void ShutdownService::clear_arenaid() {
  arenaid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShutdownService::_internal_arenaid() const {
  return arenaid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShutdownService::arenaid() const {
  // @@protoc_insertion_point(field_get:JSBY.ShutdownService.ArenaID)
  return _internal_arenaid();
}
inline void ShutdownService::_internal_set_arenaid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  arenaid_ = value;
}
inline void ShutdownService::set_arenaid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_arenaid(value);
  // @@protoc_insertion_point(field_set:JSBY.ShutdownService.ArenaID)
}

// int32 ServerID = 3;
inline void ShutdownService::clear_serverid() {
  serverid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShutdownService::_internal_serverid() const {
  return serverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShutdownService::serverid() const {
  // @@protoc_insertion_point(field_get:JSBY.ShutdownService.ServerID)
  return _internal_serverid();
}
inline void ShutdownService::_internal_set_serverid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serverid_ = value;
}
inline void ShutdownService::set_serverid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:JSBY.ShutdownService.ServerID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace JSBY

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::JSBY::EMsgIDSubGame> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::JSBY::EMsgIDSubGame>() {
  return ::JSBY::EMsgIDSubGame_descriptor();
}
template <> struct is_proto_enum< ::JSBY::ErrCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::JSBY::ErrCode>() {
  return ::JSBY::ErrCode_descriptor();
}
template <> struct is_proto_enum< ::JSBY::ModeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::JSBY::ModeType>() {
  return ::JSBY::ModeType_descriptor();
}
template <> struct is_proto_enum< ::JSBY::StepType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::JSBY::StepType>() {
  return ::JSBY::StepType_descriptor();
}
template <> struct is_proto_enum< ::JSBY::ShopType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::JSBY::ShopType>() {
  return ::JSBY::ShopType_descriptor();
}
template <> struct is_proto_enum< ::JSBY::HallMsgCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::JSBY::HallMsgCode>() {
  return ::JSBY::HallMsgCode_descriptor();
}
template <> struct is_proto_enum< ::JSBY::HallMsgErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::JSBY::HallMsgErrorCode>() {
  return ::JSBY::HallMsgErrorCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_JSBY_2eproto
