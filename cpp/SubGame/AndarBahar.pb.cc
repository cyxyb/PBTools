// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AndarBahar.proto

#include "AndarBahar.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_AndarBahar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ABBetInfo_AndarBahar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_AndarBahar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ABPlayerData_AndarBahar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_AndarBahar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgWinMsg_AndarBahar_2eproto;
namespace AndarBahar {
class ABBetInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ABBetInfo> _instance;
} _ABBetInfo_default_instance_;
class ABPlayerDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ABPlayerData> _instance;
} _ABPlayerData_default_instance_;
class MsgSceneInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgSceneInfo> _instance;
} _MsgSceneInfo_default_instance_;
class MsgStartGameRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgStartGameResp> _instance;
} _MsgStartGameResp_default_instance_;
class MsgBetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgBet> _instance;
} _MsgBet_default_instance_;
class MsgBetRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgBetResp> _instance;
} _MsgBetResp_default_instance_;
class MsgSendCardRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgSendCardResp> _instance;
} _MsgSendCardResp_default_instance_;
class MsgOpBankerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgOpBanker> _instance;
} _MsgOpBanker_default_instance_;
class MsgOpBankerRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgOpBankerResp> _instance;
} _MsgOpBankerResp_default_instance_;
class MsgWinMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgWinMsg> _instance;
} _MsgWinMsg_default_instance_;
class MsgResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgResult> _instance;
} _MsgResult_default_instance_;
}  // namespace AndarBahar
static void InitDefaultsscc_info_ABBetInfo_AndarBahar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AndarBahar::_ABBetInfo_default_instance_;
    new (ptr) ::AndarBahar::ABBetInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ABBetInfo_AndarBahar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ABBetInfo_AndarBahar_2eproto}, {}};

static void InitDefaultsscc_info_ABPlayerData_AndarBahar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AndarBahar::_ABPlayerData_default_instance_;
    new (ptr) ::AndarBahar::ABPlayerData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ABPlayerData_AndarBahar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ABPlayerData_AndarBahar_2eproto}, {
      &scc_info_ABBetInfo_AndarBahar_2eproto.base,}};

static void InitDefaultsscc_info_MsgBet_AndarBahar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AndarBahar::_MsgBet_default_instance_;
    new (ptr) ::AndarBahar::MsgBet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgBet_AndarBahar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgBet_AndarBahar_2eproto}, {}};

static void InitDefaultsscc_info_MsgBetResp_AndarBahar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AndarBahar::_MsgBetResp_default_instance_;
    new (ptr) ::AndarBahar::MsgBetResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgBetResp_AndarBahar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgBetResp_AndarBahar_2eproto}, {
      &scc_info_ABBetInfo_AndarBahar_2eproto.base,}};

static void InitDefaultsscc_info_MsgOpBanker_AndarBahar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AndarBahar::_MsgOpBanker_default_instance_;
    new (ptr) ::AndarBahar::MsgOpBanker();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgOpBanker_AndarBahar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgOpBanker_AndarBahar_2eproto}, {}};

static void InitDefaultsscc_info_MsgOpBankerResp_AndarBahar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AndarBahar::_MsgOpBankerResp_default_instance_;
    new (ptr) ::AndarBahar::MsgOpBankerResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgOpBankerResp_AndarBahar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgOpBankerResp_AndarBahar_2eproto}, {}};

static void InitDefaultsscc_info_MsgResult_AndarBahar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AndarBahar::_MsgResult_default_instance_;
    new (ptr) ::AndarBahar::MsgResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgResult_AndarBahar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgResult_AndarBahar_2eproto}, {
      &scc_info_MsgWinMsg_AndarBahar_2eproto.base,}};

static void InitDefaultsscc_info_MsgSceneInfo_AndarBahar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AndarBahar::_MsgSceneInfo_default_instance_;
    new (ptr) ::AndarBahar::MsgSceneInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgSceneInfo_AndarBahar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgSceneInfo_AndarBahar_2eproto}, {
      &scc_info_ABPlayerData_AndarBahar_2eproto.base,}};

static void InitDefaultsscc_info_MsgSendCardResp_AndarBahar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AndarBahar::_MsgSendCardResp_default_instance_;
    new (ptr) ::AndarBahar::MsgSendCardResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgSendCardResp_AndarBahar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgSendCardResp_AndarBahar_2eproto}, {}};

static void InitDefaultsscc_info_MsgStartGameResp_AndarBahar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AndarBahar::_MsgStartGameResp_default_instance_;
    new (ptr) ::AndarBahar::MsgStartGameResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgStartGameResp_AndarBahar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgStartGameResp_AndarBahar_2eproto}, {}};

static void InitDefaultsscc_info_MsgWinMsg_AndarBahar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AndarBahar::_MsgWinMsg_default_instance_;
    new (ptr) ::AndarBahar::MsgWinMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgWinMsg_AndarBahar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgWinMsg_AndarBahar_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_AndarBahar_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_AndarBahar_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_AndarBahar_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_AndarBahar_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AndarBahar::ABBetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AndarBahar::ABBetInfo, bet_),
  PROTOBUF_FIELD_OFFSET(::AndarBahar::ABBetInfo, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AndarBahar::ABPlayerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AndarBahar::ABPlayerData, user_id_),
  PROTOBUF_FIELD_OFFSET(::AndarBahar::ABPlayerData, win_gold_),
  PROTOBUF_FIELD_OFFSET(::AndarBahar::ABPlayerData, total_play_),
  PROTOBUF_FIELD_OFFSET(::AndarBahar::ABPlayerData, win_play_),
  PROTOBUF_FIELD_OFFSET(::AndarBahar::ABPlayerData, bet_infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgSceneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgSceneInfo, bet_),
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgSceneInfo, records_),
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgSceneInfo, bet_limit_),
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgSceneInfo, up_banker_list_),
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgSceneInfo, player_limit_),
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgSceneInfo, bet_time_),
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgSceneInfo, out_time_),
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgSceneInfo, state_),
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgSceneInfo, mul_),
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgSceneInfo, banker_id_),
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgSceneInfo, banker_max_),
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgSceneInfo, banker_num_),
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgSceneInfo, banker_limit_),
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgSceneInfo, base_card_),
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgSceneInfo, red_cards_),
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgSceneInfo, blue_cards_),
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgSceneInfo, player_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgStartGameResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgStartGameResp, banker_id_),
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgStartGameResp, banker_num_),
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgStartGameResp, base_card_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgBet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgBet, bet_),
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgBet, area_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgBetResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgBetResp, user_id_),
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgBetResp, chair_id_),
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgBetResp, bet_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgSendCardResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgSendCardResp, card_),
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgSendCardResp, area_),
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgSendCardResp, is_end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgOpBanker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgOpBanker, op_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgOpBankerResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgOpBankerResp, user_id_),
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgOpBankerResp, chair_id_),
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgOpBankerResp, op_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgWinMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgWinMsg, chair_id_),
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgWinMsg, win_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgResult, win_index_),
  PROTOBUF_FIELD_OFFSET(::AndarBahar::MsgResult, win_msg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::AndarBahar::ABBetInfo)},
  { 7, -1, sizeof(::AndarBahar::ABPlayerData)},
  { 17, -1, sizeof(::AndarBahar::MsgSceneInfo)},
  { 39, -1, sizeof(::AndarBahar::MsgStartGameResp)},
  { 47, -1, sizeof(::AndarBahar::MsgBet)},
  { 54, -1, sizeof(::AndarBahar::MsgBetResp)},
  { 62, -1, sizeof(::AndarBahar::MsgSendCardResp)},
  { 70, -1, sizeof(::AndarBahar::MsgOpBanker)},
  { 76, -1, sizeof(::AndarBahar::MsgOpBankerResp)},
  { 84, -1, sizeof(::AndarBahar::MsgWinMsg)},
  { 91, -1, sizeof(::AndarBahar::MsgResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AndarBahar::_ABBetInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AndarBahar::_ABPlayerData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AndarBahar::_MsgSceneInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AndarBahar::_MsgStartGameResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AndarBahar::_MsgBet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AndarBahar::_MsgBetResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AndarBahar::_MsgSendCardResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AndarBahar::_MsgOpBanker_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AndarBahar::_MsgOpBankerResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AndarBahar::_MsgWinMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AndarBahar::_MsgResult_default_instance_),
};

const char descriptor_table_protodef_AndarBahar_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020AndarBahar.proto\022\nAndarBahar\"(\n\tABBetI"
  "nfo\022\013\n\003bet\030\001 \001(\003\022\016\n\006status\030\002 \001(\005\"\201\001\n\014ABP"
  "layerData\022\017\n\007user_id\030\001 \001(\005\022\020\n\010win_gold\030\002"
  " \001(\003\022\022\n\ntotal_play\030\003 \001(\005\022\020\n\010win_play\030\004 \001"
  "(\005\022(\n\tbet_infos\030\005 \003(\0132\025.AndarBahar.ABBet"
  "Info\"\347\002\n\014MsgSceneInfo\022\013\n\003bet\030\001 \003(\003\022\017\n\007re"
  "cords\030\002 \003(\005\022\021\n\tbet_limit\030\003 \003(\005\022\026\n\016up_ban"
  "ker_list\030\004 \003(\005\022\024\n\014player_limit\030\005 \001(\005\022\020\n\010"
  "bet_time\030\006 \001(\005\022\020\n\010out_time\030\007 \001(\005\022\r\n\005stat"
  "e\030\010 \001(\005\022\013\n\003mul\030\t \003(\005\022\021\n\tbanker_id\030\n \001(\005\022"
  "\022\n\nbanker_max\030\013 \001(\005\022\022\n\nbanker_num\030\014 \001(\005\022"
  "\024\n\014banker_limit\030\r \001(\003\022\021\n\tbase_card\030\016 \001(\005"
  "\022\021\n\tred_cards\030\024 \003(\005\022\022\n\nblue_cards\030\025 \003(\005\022"
  "-\n\013player_list\030\026 \003(\0132\030.AndarBahar.ABPlay"
  "erData\"L\n\020MsgStartGameResp\022\021\n\tbanker_id\030"
  "\001 \001(\005\022\022\n\nbanker_num\030\002 \001(\005\022\021\n\tbase_card\030\003"
  " \001(\005\"#\n\006MsgBet\022\013\n\003bet\030\001 \001(\003\022\014\n\004area\030\002 \001("
  "\005\"X\n\nMsgBetResp\022\017\n\007user_id\030\001 \001(\005\022\020\n\010chai"
  "r_id\030\002 \001(\005\022\'\n\010bet_info\030\003 \001(\0132\025.AndarBaha"
  "r.ABBetInfo\"=\n\017MsgSendCardResp\022\014\n\004card\030\001"
  " \001(\005\022\014\n\004area\030\002 \001(\005\022\016\n\006is_end\030\003 \001(\010\"\036\n\013Ms"
  "gOpBanker\022\017\n\007op_type\030\001 \001(\005\"E\n\017MsgOpBanke"
  "rResp\022\017\n\007user_id\030\001 \001(\005\022\020\n\010chair_id\030\002 \001(\005"
  "\022\017\n\007op_type\030\003 \001(\005\"*\n\tMsgWinMsg\022\020\n\010chair_"
  "id\030\001 \001(\005\022\013\n\003win\030\002 \001(\003\"F\n\tMsgResult\022\021\n\twi"
  "n_index\030\001 \001(\005\022&\n\007win_msg\030\002 \003(\0132\025.AndarBa"
  "har.MsgWinMsg*u\n\nEGameState\022\014\n\010GS_Ready\020"
  "\000\022\014\n\010GS_Start\020\001\022\013\n\007GS_Bet1\020\002\022\013\n\007GS_Bet2\020"
  "\003\022\020\n\014GS_SendCard1\020\004\022\020\n\014GS_SendCard2\020\005\022\r\n"
  "\tGS_Result\020\006*\222\002\n\rEMsgIDSubGame\022\025\n\021MsgIDS"
  "ubGame_Null\020\000\022\024\n\020MsgIDSubGame_Bet\020\001\022\030\n\024M"
  "sgIDSubGame_BetResp\020\002\022\031\n\025MsgIDSubGame_Op"
  "Banker\020\003\022\035\n\031MsgIDSubGame_OpBankerResp\020\004\022"
  "\036\n\032MsgIDSubGame_GameStartResp\020\005\022\035\n\031MsgID"
  "SubGame_SendCardResp\020\006\022\037\n\033MsgIDSubGame_G"
  "ameResultResp\020\007\022 \n\034MsgIDSubGame_NotifySt"
  "ateResp\020\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_AndarBahar_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_AndarBahar_2eproto_sccs[11] = {
  &scc_info_ABBetInfo_AndarBahar_2eproto.base,
  &scc_info_ABPlayerData_AndarBahar_2eproto.base,
  &scc_info_MsgBet_AndarBahar_2eproto.base,
  &scc_info_MsgBetResp_AndarBahar_2eproto.base,
  &scc_info_MsgOpBanker_AndarBahar_2eproto.base,
  &scc_info_MsgOpBankerResp_AndarBahar_2eproto.base,
  &scc_info_MsgResult_AndarBahar_2eproto.base,
  &scc_info_MsgSceneInfo_AndarBahar_2eproto.base,
  &scc_info_MsgSendCardResp_AndarBahar_2eproto.base,
  &scc_info_MsgStartGameResp_AndarBahar_2eproto.base,
  &scc_info_MsgWinMsg_AndarBahar_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_AndarBahar_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AndarBahar_2eproto = {
  false, false, descriptor_table_protodef_AndarBahar_2eproto, "AndarBahar.proto", 1457,
  &descriptor_table_AndarBahar_2eproto_once, descriptor_table_AndarBahar_2eproto_sccs, descriptor_table_AndarBahar_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_AndarBahar_2eproto::offsets,
  file_level_metadata_AndarBahar_2eproto, 11, file_level_enum_descriptors_AndarBahar_2eproto, file_level_service_descriptors_AndarBahar_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_AndarBahar_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_AndarBahar_2eproto)), true);
namespace AndarBahar {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGameState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_AndarBahar_2eproto);
  return file_level_enum_descriptors_AndarBahar_2eproto[0];
}
bool EGameState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDSubGame_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_AndarBahar_2eproto);
  return file_level_enum_descriptors_AndarBahar_2eproto[1];
}
bool EMsgIDSubGame_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ABBetInfo::_Internal {
 public:
};

ABBetInfo::ABBetInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AndarBahar.ABBetInfo)
}
ABBetInfo::ABBetInfo(const ABBetInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bet_, &from.bet_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&bet_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:AndarBahar.ABBetInfo)
}

void ABBetInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bet_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&bet_)) + sizeof(status_));
}

ABBetInfo::~ABBetInfo() {
  // @@protoc_insertion_point(destructor:AndarBahar.ABBetInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ABBetInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ABBetInfo::ArenaDtor(void* object) {
  ABBetInfo* _this = reinterpret_cast< ABBetInfo* >(object);
  (void)_this;
}
void ABBetInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ABBetInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ABBetInfo& ABBetInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ABBetInfo_AndarBahar_2eproto.base);
  return *internal_default_instance();
}


void ABBetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AndarBahar.ABBetInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&bet_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ABBetInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 bet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ABBetInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AndarBahar.ABBetInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 bet = 1;
  if (this->bet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_bet(), target);
  }

  // int32 status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AndarBahar.ABBetInfo)
  return target;
}

size_t ABBetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AndarBahar.ABBetInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 bet = 1;
  if (this->bet() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_bet());
  }

  // int32 status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ABBetInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AndarBahar.ABBetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ABBetInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ABBetInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AndarBahar.ABBetInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AndarBahar.ABBetInfo)
    MergeFrom(*source);
  }
}

void ABBetInfo::MergeFrom(const ABBetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AndarBahar.ABBetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bet() != 0) {
    _internal_set_bet(from._internal_bet());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void ABBetInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AndarBahar.ABBetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ABBetInfo::CopyFrom(const ABBetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AndarBahar.ABBetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ABBetInfo::IsInitialized() const {
  return true;
}

void ABBetInfo::InternalSwap(ABBetInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ABBetInfo, status_)
      + sizeof(ABBetInfo::status_)
      - PROTOBUF_FIELD_OFFSET(ABBetInfo, bet_)>(
          reinterpret_cast<char*>(&bet_),
          reinterpret_cast<char*>(&other->bet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ABBetInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ABPlayerData::_Internal {
 public:
};

ABPlayerData::ABPlayerData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bet_infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AndarBahar.ABPlayerData)
}
ABPlayerData::ABPlayerData(const ABPlayerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bet_infos_(from.bet_infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&win_gold_, &from.win_gold_,
    static_cast<size_t>(reinterpret_cast<char*>(&win_play_) -
    reinterpret_cast<char*>(&win_gold_)) + sizeof(win_play_));
  // @@protoc_insertion_point(copy_constructor:AndarBahar.ABPlayerData)
}

void ABPlayerData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ABPlayerData_AndarBahar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&win_gold_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&win_play_) -
      reinterpret_cast<char*>(&win_gold_)) + sizeof(win_play_));
}

ABPlayerData::~ABPlayerData() {
  // @@protoc_insertion_point(destructor:AndarBahar.ABPlayerData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ABPlayerData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ABPlayerData::ArenaDtor(void* object) {
  ABPlayerData* _this = reinterpret_cast< ABPlayerData* >(object);
  (void)_this;
}
void ABPlayerData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ABPlayerData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ABPlayerData& ABPlayerData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ABPlayerData_AndarBahar_2eproto.base);
  return *internal_default_instance();
}


void ABPlayerData::Clear() {
// @@protoc_insertion_point(message_clear_start:AndarBahar.ABPlayerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bet_infos_.Clear();
  ::memset(&win_gold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&win_play_) -
      reinterpret_cast<char*>(&win_gold_)) + sizeof(win_play_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ABPlayerData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 win_gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          win_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_play = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_play_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 win_play = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          win_play_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .AndarBahar.ABBetInfo bet_infos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bet_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ABPlayerData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AndarBahar.ABPlayerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // int64 win_gold = 2;
  if (this->win_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_win_gold(), target);
  }

  // int32 total_play = 3;
  if (this->total_play() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_total_play(), target);
  }

  // int32 win_play = 4;
  if (this->win_play() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_win_play(), target);
  }

  // repeated .AndarBahar.ABBetInfo bet_infos = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bet_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_bet_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AndarBahar.ABPlayerData)
  return target;
}

size_t ABPlayerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AndarBahar.ABPlayerData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AndarBahar.ABBetInfo bet_infos = 5;
  total_size += 1UL * this->_internal_bet_infos_size();
  for (const auto& msg : this->bet_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 win_gold = 2;
  if (this->win_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_win_gold());
  }

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // int32 total_play = 3;
  if (this->total_play() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_play());
  }

  // int32 win_play = 4;
  if (this->win_play() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_win_play());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ABPlayerData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AndarBahar.ABPlayerData)
  GOOGLE_DCHECK_NE(&from, this);
  const ABPlayerData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ABPlayerData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AndarBahar.ABPlayerData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AndarBahar.ABPlayerData)
    MergeFrom(*source);
  }
}

void ABPlayerData::MergeFrom(const ABPlayerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AndarBahar.ABPlayerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bet_infos_.MergeFrom(from.bet_infos_);
  if (from.win_gold() != 0) {
    _internal_set_win_gold(from._internal_win_gold());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.total_play() != 0) {
    _internal_set_total_play(from._internal_total_play());
  }
  if (from.win_play() != 0) {
    _internal_set_win_play(from._internal_win_play());
  }
}

void ABPlayerData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AndarBahar.ABPlayerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ABPlayerData::CopyFrom(const ABPlayerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AndarBahar.ABPlayerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ABPlayerData::IsInitialized() const {
  return true;
}

void ABPlayerData::InternalSwap(ABPlayerData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bet_infos_.InternalSwap(&other->bet_infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ABPlayerData, win_play_)
      + sizeof(ABPlayerData::win_play_)
      - PROTOBUF_FIELD_OFFSET(ABPlayerData, win_gold_)>(
          reinterpret_cast<char*>(&win_gold_),
          reinterpret_cast<char*>(&other->win_gold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ABPlayerData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgSceneInfo::_Internal {
 public:
};

MsgSceneInfo::MsgSceneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bet_(arena),
  records_(arena),
  bet_limit_(arena),
  up_banker_list_(arena),
  mul_(arena),
  red_cards_(arena),
  blue_cards_(arena),
  player_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AndarBahar.MsgSceneInfo)
}
MsgSceneInfo::MsgSceneInfo(const MsgSceneInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bet_(from.bet_),
      records_(from.records_),
      bet_limit_(from.bet_limit_),
      up_banker_list_(from.up_banker_list_),
      mul_(from.mul_),
      red_cards_(from.red_cards_),
      blue_cards_(from.blue_cards_),
      player_list_(from.player_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_limit_, &from.player_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&base_card_) -
    reinterpret_cast<char*>(&player_limit_)) + sizeof(base_card_));
  // @@protoc_insertion_point(copy_constructor:AndarBahar.MsgSceneInfo)
}

void MsgSceneInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgSceneInfo_AndarBahar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&player_limit_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&base_card_) -
      reinterpret_cast<char*>(&player_limit_)) + sizeof(base_card_));
}

MsgSceneInfo::~MsgSceneInfo() {
  // @@protoc_insertion_point(destructor:AndarBahar.MsgSceneInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgSceneInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgSceneInfo::ArenaDtor(void* object) {
  MsgSceneInfo* _this = reinterpret_cast< MsgSceneInfo* >(object);
  (void)_this;
}
void MsgSceneInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgSceneInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgSceneInfo& MsgSceneInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgSceneInfo_AndarBahar_2eproto.base);
  return *internal_default_instance();
}


void MsgSceneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AndarBahar.MsgSceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bet_.Clear();
  records_.Clear();
  bet_limit_.Clear();
  up_banker_list_.Clear();
  mul_.Clear();
  red_cards_.Clear();
  blue_cards_.Clear();
  player_list_.Clear();
  ::memset(&player_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&base_card_) -
      reinterpret_cast<char*>(&player_limit_)) + sizeof(base_card_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgSceneInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 bet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_bet(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_bet(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 records = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_records(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_records(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 bet_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bet_limit(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_bet_limit(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 up_banker_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_up_banker_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_up_banker_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 player_limit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          player_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bet_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          bet_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 out_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          out_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 mul = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_mul(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          _internal_add_mul(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 banker_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          banker_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 banker_max = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          banker_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 banker_num = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          banker_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 banker_limit = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          banker_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 base_card = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          base_card_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 red_cards = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_red_cards(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160) {
          _internal_add_red_cards(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 blue_cards = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_blue_cards(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168) {
          _internal_add_blue_cards(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .AndarBahar.ABPlayerData player_list = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_player_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgSceneInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AndarBahar.MsgSceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 bet = 1;
  {
    int byte_size = _bet_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_bet(), byte_size, target);
    }
  }

  // repeated int32 records = 2;
  {
    int byte_size = _records_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_records(), byte_size, target);
    }
  }

  // repeated int32 bet_limit = 3;
  {
    int byte_size = _bet_limit_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_bet_limit(), byte_size, target);
    }
  }

  // repeated int32 up_banker_list = 4;
  {
    int byte_size = _up_banker_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_up_banker_list(), byte_size, target);
    }
  }

  // int32 player_limit = 5;
  if (this->player_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_player_limit(), target);
  }

  // int32 bet_time = 6;
  if (this->bet_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_bet_time(), target);
  }

  // int32 out_time = 7;
  if (this->out_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_out_time(), target);
  }

  // int32 state = 8;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_state(), target);
  }

  // repeated int32 mul = 9;
  {
    int byte_size = _mul_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          9, _internal_mul(), byte_size, target);
    }
  }

  // int32 banker_id = 10;
  if (this->banker_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_banker_id(), target);
  }

  // int32 banker_max = 11;
  if (this->banker_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_banker_max(), target);
  }

  // int32 banker_num = 12;
  if (this->banker_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_banker_num(), target);
  }

  // int64 banker_limit = 13;
  if (this->banker_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_banker_limit(), target);
  }

  // int32 base_card = 14;
  if (this->base_card() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_base_card(), target);
  }

  // repeated int32 red_cards = 20;
  {
    int byte_size = _red_cards_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          20, _internal_red_cards(), byte_size, target);
    }
  }

  // repeated int32 blue_cards = 21;
  {
    int byte_size = _blue_cards_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          21, _internal_blue_cards(), byte_size, target);
    }
  }

  // repeated .AndarBahar.ABPlayerData player_list = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, this->_internal_player_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AndarBahar.MsgSceneInfo)
  return target;
}

size_t MsgSceneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AndarBahar.MsgSceneInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 bet = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->bet_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bet_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 records = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->records_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _records_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 bet_limit = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bet_limit_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bet_limit_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 up_banker_list = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->up_banker_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _up_banker_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 mul = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->mul_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _mul_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 red_cards = 20;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->red_cards_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _red_cards_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 blue_cards = 21;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->blue_cards_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _blue_cards_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .AndarBahar.ABPlayerData player_list = 22;
  total_size += 2UL * this->_internal_player_list_size();
  for (const auto& msg : this->player_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 player_limit = 5;
  if (this->player_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_limit());
  }

  // int32 bet_time = 6;
  if (this->bet_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bet_time());
  }

  // int32 out_time = 7;
  if (this->out_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_out_time());
  }

  // int32 state = 8;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // int32 banker_id = 10;
  if (this->banker_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_banker_id());
  }

  // int32 banker_max = 11;
  if (this->banker_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_banker_max());
  }

  // int64 banker_limit = 13;
  if (this->banker_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_banker_limit());
  }

  // int32 banker_num = 12;
  if (this->banker_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_banker_num());
  }

  // int32 base_card = 14;
  if (this->base_card() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_base_card());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgSceneInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AndarBahar.MsgSceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgSceneInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgSceneInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AndarBahar.MsgSceneInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AndarBahar.MsgSceneInfo)
    MergeFrom(*source);
  }
}

void MsgSceneInfo::MergeFrom(const MsgSceneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AndarBahar.MsgSceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bet_.MergeFrom(from.bet_);
  records_.MergeFrom(from.records_);
  bet_limit_.MergeFrom(from.bet_limit_);
  up_banker_list_.MergeFrom(from.up_banker_list_);
  mul_.MergeFrom(from.mul_);
  red_cards_.MergeFrom(from.red_cards_);
  blue_cards_.MergeFrom(from.blue_cards_);
  player_list_.MergeFrom(from.player_list_);
  if (from.player_limit() != 0) {
    _internal_set_player_limit(from._internal_player_limit());
  }
  if (from.bet_time() != 0) {
    _internal_set_bet_time(from._internal_bet_time());
  }
  if (from.out_time() != 0) {
    _internal_set_out_time(from._internal_out_time());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.banker_id() != 0) {
    _internal_set_banker_id(from._internal_banker_id());
  }
  if (from.banker_max() != 0) {
    _internal_set_banker_max(from._internal_banker_max());
  }
  if (from.banker_limit() != 0) {
    _internal_set_banker_limit(from._internal_banker_limit());
  }
  if (from.banker_num() != 0) {
    _internal_set_banker_num(from._internal_banker_num());
  }
  if (from.base_card() != 0) {
    _internal_set_base_card(from._internal_base_card());
  }
}

void MsgSceneInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AndarBahar.MsgSceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSceneInfo::CopyFrom(const MsgSceneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AndarBahar.MsgSceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSceneInfo::IsInitialized() const {
  return true;
}

void MsgSceneInfo::InternalSwap(MsgSceneInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bet_.InternalSwap(&other->bet_);
  records_.InternalSwap(&other->records_);
  bet_limit_.InternalSwap(&other->bet_limit_);
  up_banker_list_.InternalSwap(&other->up_banker_list_);
  mul_.InternalSwap(&other->mul_);
  red_cards_.InternalSwap(&other->red_cards_);
  blue_cards_.InternalSwap(&other->blue_cards_);
  player_list_.InternalSwap(&other->player_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgSceneInfo, base_card_)
      + sizeof(MsgSceneInfo::base_card_)
      - PROTOBUF_FIELD_OFFSET(MsgSceneInfo, player_limit_)>(
          reinterpret_cast<char*>(&player_limit_),
          reinterpret_cast<char*>(&other->player_limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgSceneInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgStartGameResp::_Internal {
 public:
};

MsgStartGameResp::MsgStartGameResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AndarBahar.MsgStartGameResp)
}
MsgStartGameResp::MsgStartGameResp(const MsgStartGameResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&banker_id_, &from.banker_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&base_card_) -
    reinterpret_cast<char*>(&banker_id_)) + sizeof(base_card_));
  // @@protoc_insertion_point(copy_constructor:AndarBahar.MsgStartGameResp)
}

void MsgStartGameResp::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&banker_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&base_card_) -
      reinterpret_cast<char*>(&banker_id_)) + sizeof(base_card_));
}

MsgStartGameResp::~MsgStartGameResp() {
  // @@protoc_insertion_point(destructor:AndarBahar.MsgStartGameResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgStartGameResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgStartGameResp::ArenaDtor(void* object) {
  MsgStartGameResp* _this = reinterpret_cast< MsgStartGameResp* >(object);
  (void)_this;
}
void MsgStartGameResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgStartGameResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgStartGameResp& MsgStartGameResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgStartGameResp_AndarBahar_2eproto.base);
  return *internal_default_instance();
}


void MsgStartGameResp::Clear() {
// @@protoc_insertion_point(message_clear_start:AndarBahar.MsgStartGameResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&banker_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&base_card_) -
      reinterpret_cast<char*>(&banker_id_)) + sizeof(base_card_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgStartGameResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 banker_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          banker_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 banker_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          banker_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 base_card = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          base_card_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgStartGameResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AndarBahar.MsgStartGameResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 banker_id = 1;
  if (this->banker_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_banker_id(), target);
  }

  // int32 banker_num = 2;
  if (this->banker_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_banker_num(), target);
  }

  // int32 base_card = 3;
  if (this->base_card() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_base_card(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AndarBahar.MsgStartGameResp)
  return target;
}

size_t MsgStartGameResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AndarBahar.MsgStartGameResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 banker_id = 1;
  if (this->banker_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_banker_id());
  }

  // int32 banker_num = 2;
  if (this->banker_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_banker_num());
  }

  // int32 base_card = 3;
  if (this->base_card() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_base_card());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgStartGameResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AndarBahar.MsgStartGameResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgStartGameResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgStartGameResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AndarBahar.MsgStartGameResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AndarBahar.MsgStartGameResp)
    MergeFrom(*source);
  }
}

void MsgStartGameResp::MergeFrom(const MsgStartGameResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AndarBahar.MsgStartGameResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.banker_id() != 0) {
    _internal_set_banker_id(from._internal_banker_id());
  }
  if (from.banker_num() != 0) {
    _internal_set_banker_num(from._internal_banker_num());
  }
  if (from.base_card() != 0) {
    _internal_set_base_card(from._internal_base_card());
  }
}

void MsgStartGameResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AndarBahar.MsgStartGameResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgStartGameResp::CopyFrom(const MsgStartGameResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AndarBahar.MsgStartGameResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgStartGameResp::IsInitialized() const {
  return true;
}

void MsgStartGameResp::InternalSwap(MsgStartGameResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgStartGameResp, base_card_)
      + sizeof(MsgStartGameResp::base_card_)
      - PROTOBUF_FIELD_OFFSET(MsgStartGameResp, banker_id_)>(
          reinterpret_cast<char*>(&banker_id_),
          reinterpret_cast<char*>(&other->banker_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgStartGameResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgBet::_Internal {
 public:
};

MsgBet::MsgBet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AndarBahar.MsgBet)
}
MsgBet::MsgBet(const MsgBet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bet_, &from.bet_,
    static_cast<size_t>(reinterpret_cast<char*>(&area_) -
    reinterpret_cast<char*>(&bet_)) + sizeof(area_));
  // @@protoc_insertion_point(copy_constructor:AndarBahar.MsgBet)
}

void MsgBet::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bet_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&area_) -
      reinterpret_cast<char*>(&bet_)) + sizeof(area_));
}

MsgBet::~MsgBet() {
  // @@protoc_insertion_point(destructor:AndarBahar.MsgBet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgBet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgBet::ArenaDtor(void* object) {
  MsgBet* _this = reinterpret_cast< MsgBet* >(object);
  (void)_this;
}
void MsgBet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgBet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgBet& MsgBet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgBet_AndarBahar_2eproto.base);
  return *internal_default_instance();
}


void MsgBet::Clear() {
// @@protoc_insertion_point(message_clear_start:AndarBahar.MsgBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&area_) -
      reinterpret_cast<char*>(&bet_)) + sizeof(area_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgBet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 bet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 area = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgBet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AndarBahar.MsgBet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 bet = 1;
  if (this->bet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_bet(), target);
  }

  // int32 area = 2;
  if (this->area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_area(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AndarBahar.MsgBet)
  return target;
}

size_t MsgBet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AndarBahar.MsgBet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 bet = 1;
  if (this->bet() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_bet());
  }

  // int32 area = 2;
  if (this->area() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_area());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgBet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AndarBahar.MsgBet)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgBet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgBet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AndarBahar.MsgBet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AndarBahar.MsgBet)
    MergeFrom(*source);
  }
}

void MsgBet::MergeFrom(const MsgBet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AndarBahar.MsgBet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bet() != 0) {
    _internal_set_bet(from._internal_bet());
  }
  if (from.area() != 0) {
    _internal_set_area(from._internal_area());
  }
}

void MsgBet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AndarBahar.MsgBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBet::CopyFrom(const MsgBet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AndarBahar.MsgBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBet::IsInitialized() const {
  return true;
}

void MsgBet::InternalSwap(MsgBet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgBet, area_)
      + sizeof(MsgBet::area_)
      - PROTOBUF_FIELD_OFFSET(MsgBet, bet_)>(
          reinterpret_cast<char*>(&bet_),
          reinterpret_cast<char*>(&other->bet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgBet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgBetResp::_Internal {
 public:
  static const ::AndarBahar::ABBetInfo& bet_info(const MsgBetResp* msg);
};

const ::AndarBahar::ABBetInfo&
MsgBetResp::_Internal::bet_info(const MsgBetResp* msg) {
  return *msg->bet_info_;
}
MsgBetResp::MsgBetResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AndarBahar.MsgBetResp)
}
MsgBetResp::MsgBetResp(const MsgBetResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bet_info()) {
    bet_info_ = new ::AndarBahar::ABBetInfo(*from.bet_info_);
  } else {
    bet_info_ = nullptr;
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&chair_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(chair_id_));
  // @@protoc_insertion_point(copy_constructor:AndarBahar.MsgBetResp)
}

void MsgBetResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgBetResp_AndarBahar_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bet_info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&bet_info_)) + sizeof(chair_id_));
}

MsgBetResp::~MsgBetResp() {
  // @@protoc_insertion_point(destructor:AndarBahar.MsgBetResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgBetResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bet_info_;
}

void MsgBetResp::ArenaDtor(void* object) {
  MsgBetResp* _this = reinterpret_cast< MsgBetResp* >(object);
  (void)_this;
}
void MsgBetResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgBetResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgBetResp& MsgBetResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgBetResp_AndarBahar_2eproto.base);
  return *internal_default_instance();
}


void MsgBetResp::Clear() {
// @@protoc_insertion_point(message_clear_start:AndarBahar.MsgBetResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && bet_info_ != nullptr) {
    delete bet_info_;
  }
  bet_info_ = nullptr;
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(chair_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgBetResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chair_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AndarBahar.ABBetInfo bet_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bet_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgBetResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AndarBahar.MsgBetResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // int32 chair_id = 2;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_chair_id(), target);
  }

  // .AndarBahar.ABBetInfo bet_info = 3;
  if (this->has_bet_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::bet_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AndarBahar.MsgBetResp)
  return target;
}

size_t MsgBetResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AndarBahar.MsgBetResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .AndarBahar.ABBetInfo bet_info = 3;
  if (this->has_bet_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bet_info_);
  }

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // int32 chair_id = 2;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgBetResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AndarBahar.MsgBetResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgBetResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgBetResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AndarBahar.MsgBetResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AndarBahar.MsgBetResp)
    MergeFrom(*source);
  }
}

void MsgBetResp::MergeFrom(const MsgBetResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AndarBahar.MsgBetResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bet_info()) {
    _internal_mutable_bet_info()->::AndarBahar::ABBetInfo::MergeFrom(from._internal_bet_info());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
}

void MsgBetResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AndarBahar.MsgBetResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBetResp::CopyFrom(const MsgBetResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AndarBahar.MsgBetResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBetResp::IsInitialized() const {
  return true;
}

void MsgBetResp::InternalSwap(MsgBetResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgBetResp, chair_id_)
      + sizeof(MsgBetResp::chair_id_)
      - PROTOBUF_FIELD_OFFSET(MsgBetResp, bet_info_)>(
          reinterpret_cast<char*>(&bet_info_),
          reinterpret_cast<char*>(&other->bet_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgBetResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgSendCardResp::_Internal {
 public:
};

MsgSendCardResp::MsgSendCardResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AndarBahar.MsgSendCardResp)
}
MsgSendCardResp::MsgSendCardResp(const MsgSendCardResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&card_, &from.card_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_end_) -
    reinterpret_cast<char*>(&card_)) + sizeof(is_end_));
  // @@protoc_insertion_point(copy_constructor:AndarBahar.MsgSendCardResp)
}

void MsgSendCardResp::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&card_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_end_) -
      reinterpret_cast<char*>(&card_)) + sizeof(is_end_));
}

MsgSendCardResp::~MsgSendCardResp() {
  // @@protoc_insertion_point(destructor:AndarBahar.MsgSendCardResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgSendCardResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgSendCardResp::ArenaDtor(void* object) {
  MsgSendCardResp* _this = reinterpret_cast< MsgSendCardResp* >(object);
  (void)_this;
}
void MsgSendCardResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgSendCardResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgSendCardResp& MsgSendCardResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgSendCardResp_AndarBahar_2eproto.base);
  return *internal_default_instance();
}


void MsgSendCardResp::Clear() {
// @@protoc_insertion_point(message_clear_start:AndarBahar.MsgSendCardResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&card_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_end_) -
      reinterpret_cast<char*>(&card_)) + sizeof(is_end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgSendCardResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 card = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          card_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 area = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgSendCardResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AndarBahar.MsgSendCardResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 card = 1;
  if (this->card() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_card(), target);
  }

  // int32 area = 2;
  if (this->area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_area(), target);
  }

  // bool is_end = 3;
  if (this->is_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AndarBahar.MsgSendCardResp)
  return target;
}

size_t MsgSendCardResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AndarBahar.MsgSendCardResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 card = 1;
  if (this->card() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_card());
  }

  // int32 area = 2;
  if (this->area() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_area());
  }

  // bool is_end = 3;
  if (this->is_end() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgSendCardResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AndarBahar.MsgSendCardResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgSendCardResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgSendCardResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AndarBahar.MsgSendCardResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AndarBahar.MsgSendCardResp)
    MergeFrom(*source);
  }
}

void MsgSendCardResp::MergeFrom(const MsgSendCardResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AndarBahar.MsgSendCardResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.card() != 0) {
    _internal_set_card(from._internal_card());
  }
  if (from.area() != 0) {
    _internal_set_area(from._internal_area());
  }
  if (from.is_end() != 0) {
    _internal_set_is_end(from._internal_is_end());
  }
}

void MsgSendCardResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AndarBahar.MsgSendCardResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSendCardResp::CopyFrom(const MsgSendCardResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AndarBahar.MsgSendCardResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSendCardResp::IsInitialized() const {
  return true;
}

void MsgSendCardResp::InternalSwap(MsgSendCardResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgSendCardResp, is_end_)
      + sizeof(MsgSendCardResp::is_end_)
      - PROTOBUF_FIELD_OFFSET(MsgSendCardResp, card_)>(
          reinterpret_cast<char*>(&card_),
          reinterpret_cast<char*>(&other->card_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgSendCardResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgOpBanker::_Internal {
 public:
};

MsgOpBanker::MsgOpBanker(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AndarBahar.MsgOpBanker)
}
MsgOpBanker::MsgOpBanker(const MsgOpBanker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  op_type_ = from.op_type_;
  // @@protoc_insertion_point(copy_constructor:AndarBahar.MsgOpBanker)
}

void MsgOpBanker::SharedCtor() {
  op_type_ = 0;
}

MsgOpBanker::~MsgOpBanker() {
  // @@protoc_insertion_point(destructor:AndarBahar.MsgOpBanker)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgOpBanker::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgOpBanker::ArenaDtor(void* object) {
  MsgOpBanker* _this = reinterpret_cast< MsgOpBanker* >(object);
  (void)_this;
}
void MsgOpBanker::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgOpBanker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgOpBanker& MsgOpBanker::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgOpBanker_AndarBahar_2eproto.base);
  return *internal_default_instance();
}


void MsgOpBanker::Clear() {
// @@protoc_insertion_point(message_clear_start:AndarBahar.MsgOpBanker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  op_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgOpBanker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 op_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          op_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgOpBanker::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AndarBahar.MsgOpBanker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 op_type = 1;
  if (this->op_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_op_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AndarBahar.MsgOpBanker)
  return target;
}

size_t MsgOpBanker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AndarBahar.MsgOpBanker)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 op_type = 1;
  if (this->op_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_op_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgOpBanker::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AndarBahar.MsgOpBanker)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgOpBanker* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgOpBanker>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AndarBahar.MsgOpBanker)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AndarBahar.MsgOpBanker)
    MergeFrom(*source);
  }
}

void MsgOpBanker::MergeFrom(const MsgOpBanker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AndarBahar.MsgOpBanker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.op_type() != 0) {
    _internal_set_op_type(from._internal_op_type());
  }
}

void MsgOpBanker::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AndarBahar.MsgOpBanker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgOpBanker::CopyFrom(const MsgOpBanker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AndarBahar.MsgOpBanker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgOpBanker::IsInitialized() const {
  return true;
}

void MsgOpBanker::InternalSwap(MsgOpBanker* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(op_type_, other->op_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgOpBanker::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgOpBankerResp::_Internal {
 public:
};

MsgOpBankerResp::MsgOpBankerResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AndarBahar.MsgOpBankerResp)
}
MsgOpBankerResp::MsgOpBankerResp(const MsgOpBankerResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&op_type_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(op_type_));
  // @@protoc_insertion_point(copy_constructor:AndarBahar.MsgOpBankerResp)
}

void MsgOpBankerResp::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&op_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(op_type_));
}

MsgOpBankerResp::~MsgOpBankerResp() {
  // @@protoc_insertion_point(destructor:AndarBahar.MsgOpBankerResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgOpBankerResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgOpBankerResp::ArenaDtor(void* object) {
  MsgOpBankerResp* _this = reinterpret_cast< MsgOpBankerResp* >(object);
  (void)_this;
}
void MsgOpBankerResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgOpBankerResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgOpBankerResp& MsgOpBankerResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgOpBankerResp_AndarBahar_2eproto.base);
  return *internal_default_instance();
}


void MsgOpBankerResp::Clear() {
// @@protoc_insertion_point(message_clear_start:AndarBahar.MsgOpBankerResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(op_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgOpBankerResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chair_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 op_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          op_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgOpBankerResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AndarBahar.MsgOpBankerResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // int32 chair_id = 2;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_chair_id(), target);
  }

  // int32 op_type = 3;
  if (this->op_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_op_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AndarBahar.MsgOpBankerResp)
  return target;
}

size_t MsgOpBankerResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AndarBahar.MsgOpBankerResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // int32 chair_id = 2;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int32 op_type = 3;
  if (this->op_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_op_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgOpBankerResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AndarBahar.MsgOpBankerResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgOpBankerResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgOpBankerResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AndarBahar.MsgOpBankerResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AndarBahar.MsgOpBankerResp)
    MergeFrom(*source);
  }
}

void MsgOpBankerResp::MergeFrom(const MsgOpBankerResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AndarBahar.MsgOpBankerResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.op_type() != 0) {
    _internal_set_op_type(from._internal_op_type());
  }
}

void MsgOpBankerResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AndarBahar.MsgOpBankerResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgOpBankerResp::CopyFrom(const MsgOpBankerResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AndarBahar.MsgOpBankerResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgOpBankerResp::IsInitialized() const {
  return true;
}

void MsgOpBankerResp::InternalSwap(MsgOpBankerResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgOpBankerResp, op_type_)
      + sizeof(MsgOpBankerResp::op_type_)
      - PROTOBUF_FIELD_OFFSET(MsgOpBankerResp, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgOpBankerResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgWinMsg::_Internal {
 public:
};

MsgWinMsg::MsgWinMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AndarBahar.MsgWinMsg)
}
MsgWinMsg::MsgWinMsg(const MsgWinMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&win_, &from.win_,
    static_cast<size_t>(reinterpret_cast<char*>(&chair_id_) -
    reinterpret_cast<char*>(&win_)) + sizeof(chair_id_));
  // @@protoc_insertion_point(copy_constructor:AndarBahar.MsgWinMsg)
}

void MsgWinMsg::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&win_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&win_)) + sizeof(chair_id_));
}

MsgWinMsg::~MsgWinMsg() {
  // @@protoc_insertion_point(destructor:AndarBahar.MsgWinMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgWinMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgWinMsg::ArenaDtor(void* object) {
  MsgWinMsg* _this = reinterpret_cast< MsgWinMsg* >(object);
  (void)_this;
}
void MsgWinMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgWinMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgWinMsg& MsgWinMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgWinMsg_AndarBahar_2eproto.base);
  return *internal_default_instance();
}


void MsgWinMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:AndarBahar.MsgWinMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&win_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&win_)) + sizeof(chair_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgWinMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 win = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          win_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgWinMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AndarBahar.MsgWinMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chair_id(), target);
  }

  // int64 win = 2;
  if (this->win() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_win(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AndarBahar.MsgWinMsg)
  return target;
}

size_t MsgWinMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AndarBahar.MsgWinMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 win = 2;
  if (this->win() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_win());
  }

  // int32 chair_id = 1;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgWinMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AndarBahar.MsgWinMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgWinMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgWinMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AndarBahar.MsgWinMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AndarBahar.MsgWinMsg)
    MergeFrom(*source);
  }
}

void MsgWinMsg::MergeFrom(const MsgWinMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AndarBahar.MsgWinMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.win() != 0) {
    _internal_set_win(from._internal_win());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
}

void MsgWinMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AndarBahar.MsgWinMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgWinMsg::CopyFrom(const MsgWinMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AndarBahar.MsgWinMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgWinMsg::IsInitialized() const {
  return true;
}

void MsgWinMsg::InternalSwap(MsgWinMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgWinMsg, chair_id_)
      + sizeof(MsgWinMsg::chair_id_)
      - PROTOBUF_FIELD_OFFSET(MsgWinMsg, win_)>(
          reinterpret_cast<char*>(&win_),
          reinterpret_cast<char*>(&other->win_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgWinMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgResult::_Internal {
 public:
};

MsgResult::MsgResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  win_msg_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AndarBahar.MsgResult)
}
MsgResult::MsgResult(const MsgResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      win_msg_(from.win_msg_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  win_index_ = from.win_index_;
  // @@protoc_insertion_point(copy_constructor:AndarBahar.MsgResult)
}

void MsgResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgResult_AndarBahar_2eproto.base);
  win_index_ = 0;
}

MsgResult::~MsgResult() {
  // @@protoc_insertion_point(destructor:AndarBahar.MsgResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgResult::ArenaDtor(void* object) {
  MsgResult* _this = reinterpret_cast< MsgResult* >(object);
  (void)_this;
}
void MsgResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgResult& MsgResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgResult_AndarBahar_2eproto.base);
  return *internal_default_instance();
}


void MsgResult::Clear() {
// @@protoc_insertion_point(message_clear_start:AndarBahar.MsgResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  win_msg_.Clear();
  win_index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 win_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          win_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .AndarBahar.MsgWinMsg win_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_win_msg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AndarBahar.MsgResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 win_index = 1;
  if (this->win_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_win_index(), target);
  }

  // repeated .AndarBahar.MsgWinMsg win_msg = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_win_msg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_win_msg(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AndarBahar.MsgResult)
  return target;
}

size_t MsgResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AndarBahar.MsgResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AndarBahar.MsgWinMsg win_msg = 2;
  total_size += 1UL * this->_internal_win_msg_size();
  for (const auto& msg : this->win_msg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 win_index = 1;
  if (this->win_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_win_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AndarBahar.MsgResult)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AndarBahar.MsgResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AndarBahar.MsgResult)
    MergeFrom(*source);
  }
}

void MsgResult::MergeFrom(const MsgResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AndarBahar.MsgResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  win_msg_.MergeFrom(from.win_msg_);
  if (from.win_index() != 0) {
    _internal_set_win_index(from._internal_win_index());
  }
}

void MsgResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AndarBahar.MsgResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgResult::CopyFrom(const MsgResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AndarBahar.MsgResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgResult::IsInitialized() const {
  return true;
}

void MsgResult::InternalSwap(MsgResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  win_msg_.InternalSwap(&other->win_msg_);
  swap(win_index_, other->win_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace AndarBahar
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AndarBahar::ABBetInfo* Arena::CreateMaybeMessage< ::AndarBahar::ABBetInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AndarBahar::ABBetInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::AndarBahar::ABPlayerData* Arena::CreateMaybeMessage< ::AndarBahar::ABPlayerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AndarBahar::ABPlayerData >(arena);
}
template<> PROTOBUF_NOINLINE ::AndarBahar::MsgSceneInfo* Arena::CreateMaybeMessage< ::AndarBahar::MsgSceneInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AndarBahar::MsgSceneInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::AndarBahar::MsgStartGameResp* Arena::CreateMaybeMessage< ::AndarBahar::MsgStartGameResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AndarBahar::MsgStartGameResp >(arena);
}
template<> PROTOBUF_NOINLINE ::AndarBahar::MsgBet* Arena::CreateMaybeMessage< ::AndarBahar::MsgBet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AndarBahar::MsgBet >(arena);
}
template<> PROTOBUF_NOINLINE ::AndarBahar::MsgBetResp* Arena::CreateMaybeMessage< ::AndarBahar::MsgBetResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AndarBahar::MsgBetResp >(arena);
}
template<> PROTOBUF_NOINLINE ::AndarBahar::MsgSendCardResp* Arena::CreateMaybeMessage< ::AndarBahar::MsgSendCardResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AndarBahar::MsgSendCardResp >(arena);
}
template<> PROTOBUF_NOINLINE ::AndarBahar::MsgOpBanker* Arena::CreateMaybeMessage< ::AndarBahar::MsgOpBanker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AndarBahar::MsgOpBanker >(arena);
}
template<> PROTOBUF_NOINLINE ::AndarBahar::MsgOpBankerResp* Arena::CreateMaybeMessage< ::AndarBahar::MsgOpBankerResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AndarBahar::MsgOpBankerResp >(arena);
}
template<> PROTOBUF_NOINLINE ::AndarBahar::MsgWinMsg* Arena::CreateMaybeMessage< ::AndarBahar::MsgWinMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AndarBahar::MsgWinMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::AndarBahar::MsgResult* Arena::CreateMaybeMessage< ::AndarBahar::MsgResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AndarBahar::MsgResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
