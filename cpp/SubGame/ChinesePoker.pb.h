// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChinesePoker.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ChinesePoker_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ChinesePoker_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ChinesePoker_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ChinesePoker_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ChinesePoker_2eproto;
namespace ChinesePoker {
class CPCardResult;
class CPCardResultDefaultTypeInternal;
extern CPCardResultDefaultTypeInternal _CPCardResult_default_instance_;
class CPCardStatus;
class CPCardStatusDefaultTypeInternal;
extern CPCardStatusDefaultTypeInternal _CPCardStatus_default_instance_;
class CPMsgAction;
class CPMsgActionDefaultTypeInternal;
extern CPMsgActionDefaultTypeInternal _CPMsgAction_default_instance_;
class CPMsgGameResult;
class CPMsgGameResultDefaultTypeInternal;
extern CPMsgGameResultDefaultTypeInternal _CPMsgGameResult_default_instance_;
class CPMsgGameStartResp;
class CPMsgGameStartRespDefaultTypeInternal;
extern CPMsgGameStartRespDefaultTypeInternal _CPMsgGameStartResp_default_instance_;
class CPMsgHandCards;
class CPMsgHandCardsDefaultTypeInternal;
extern CPMsgHandCardsDefaultTypeInternal _CPMsgHandCards_default_instance_;
class CPMsgNotifyActionResp;
class CPMsgNotifyActionRespDefaultTypeInternal;
extern CPMsgNotifyActionRespDefaultTypeInternal _CPMsgNotifyActionResp_default_instance_;
class CPMsgPlayerInfo;
class CPMsgPlayerInfoDefaultTypeInternal;
extern CPMsgPlayerInfoDefaultTypeInternal _CPMsgPlayerInfo_default_instance_;
class CPMsgSceneInfo;
class CPMsgSceneInfoDefaultTypeInternal;
extern CPMsgSceneInfoDefaultTypeInternal _CPMsgSceneInfo_default_instance_;
class CPMsgTableState;
class CPMsgTableStateDefaultTypeInternal;
extern CPMsgTableStateDefaultTypeInternal _CPMsgTableState_default_instance_;
}  // namespace ChinesePoker
PROTOBUF_NAMESPACE_OPEN
template<> ::ChinesePoker::CPCardResult* Arena::CreateMaybeMessage<::ChinesePoker::CPCardResult>(Arena*);
template<> ::ChinesePoker::CPCardStatus* Arena::CreateMaybeMessage<::ChinesePoker::CPCardStatus>(Arena*);
template<> ::ChinesePoker::CPMsgAction* Arena::CreateMaybeMessage<::ChinesePoker::CPMsgAction>(Arena*);
template<> ::ChinesePoker::CPMsgGameResult* Arena::CreateMaybeMessage<::ChinesePoker::CPMsgGameResult>(Arena*);
template<> ::ChinesePoker::CPMsgGameStartResp* Arena::CreateMaybeMessage<::ChinesePoker::CPMsgGameStartResp>(Arena*);
template<> ::ChinesePoker::CPMsgHandCards* Arena::CreateMaybeMessage<::ChinesePoker::CPMsgHandCards>(Arena*);
template<> ::ChinesePoker::CPMsgNotifyActionResp* Arena::CreateMaybeMessage<::ChinesePoker::CPMsgNotifyActionResp>(Arena*);
template<> ::ChinesePoker::CPMsgPlayerInfo* Arena::CreateMaybeMessage<::ChinesePoker::CPMsgPlayerInfo>(Arena*);
template<> ::ChinesePoker::CPMsgSceneInfo* Arena::CreateMaybeMessage<::ChinesePoker::CPMsgSceneInfo>(Arena*);
template<> ::ChinesePoker::CPMsgTableState* Arena::CreateMaybeMessage<::ChinesePoker::CPMsgTableState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ChinesePoker {

enum ECPGameState : int {
  GS_TP_READY = 0,
  GS_TP_DEAL = 1,
  GS_TP_PLAYING = 2,
  GS_TP_RESULT = 3,
  ECPGameState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ECPGameState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ECPGameState_IsValid(int value);
constexpr ECPGameState ECPGameState_MIN = GS_TP_READY;
constexpr ECPGameState ECPGameState_MAX = GS_TP_RESULT;
constexpr int ECPGameState_ARRAYSIZE = ECPGameState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECPGameState_descriptor();
template<typename T>
inline const std::string& ECPGameState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ECPGameState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ECPGameState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ECPGameState_descriptor(), enum_t_value);
}
inline bool ECPGameState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ECPGameState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ECPGameState>(
    ECPGameState_descriptor(), name, value);
}
enum ECPPlayerState : int {
  PS_READY = 0,
  PS_PLAY = 1,
  PS_CONFIRM = 2,
  PS_TIMEOUT = 3,
  ECPPlayerState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ECPPlayerState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ECPPlayerState_IsValid(int value);
constexpr ECPPlayerState ECPPlayerState_MIN = PS_READY;
constexpr ECPPlayerState ECPPlayerState_MAX = PS_TIMEOUT;
constexpr int ECPPlayerState_ARRAYSIZE = ECPPlayerState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECPPlayerState_descriptor();
template<typename T>
inline const std::string& ECPPlayerState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ECPPlayerState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ECPPlayerState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ECPPlayerState_descriptor(), enum_t_value);
}
inline bool ECPPlayerState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ECPPlayerState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ECPPlayerState>(
    ECPPlayerState_descriptor(), name, value);
}
enum ECPCardType : int {
  CT_SINGLE = 0,
  CT_DOUBLE = 1,
  CT_DOUBLES = 2,
  CT_THREE = 3,
  CT_SZ = 4,
  CT_TH = 5,
  CT_HU_LU = 6,
  CT_FOUR = 7,
  CT_THS = 8,
  CT_HJTHS = 9,
  CT_SPECIAL_LDB = 10,
  CT_SPECIAL_STH = 11,
  CT_SPECIAL_SSZ = 12,
  CT_SPECIAL_YTL = 13,
  CT_SPECIAL_ZZQL = 14,
  CT_MAX = 15,
  ECPCardType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ECPCardType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ECPCardType_IsValid(int value);
constexpr ECPCardType ECPCardType_MIN = CT_SINGLE;
constexpr ECPCardType ECPCardType_MAX = CT_MAX;
constexpr int ECPCardType_ARRAYSIZE = ECPCardType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECPCardType_descriptor();
template<typename T>
inline const std::string& ECPCardType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ECPCardType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ECPCardType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ECPCardType_descriptor(), enum_t_value);
}
inline bool ECPCardType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ECPCardType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ECPCardType>(
    ECPCardType_descriptor(), name, value);
}
enum ECPMsgIDSubGame : int {
  MsgIDSubGame_Null = 0,
  MsgIDSubGame_GameStartResp = 1,
  MsgIDSubGame_Action = 2,
  MsgIDSubGame_NotifyActionResp = 3,
  MsgIDSubGame_Confirm = 4,
  MsgIDSubGame_ConfirmResp = 5,
  MsgIDSubGame_NotifyStateResp = 6,
  MsgIDSubGame_GameResultResp = 7,
  MsgIDSubGame_StartTimeResp = 8,
  MsgIDSubGame_TimeOutReady = 9,
  MsgIDSubGame_TimeOutReadyResp = 10,
  MsgIDSubGame_TimeOutKickResp = 11,
  ECPMsgIDSubGame_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ECPMsgIDSubGame_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ECPMsgIDSubGame_IsValid(int value);
constexpr ECPMsgIDSubGame ECPMsgIDSubGame_MIN = MsgIDSubGame_Null;
constexpr ECPMsgIDSubGame ECPMsgIDSubGame_MAX = MsgIDSubGame_TimeOutKickResp;
constexpr int ECPMsgIDSubGame_ARRAYSIZE = ECPMsgIDSubGame_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECPMsgIDSubGame_descriptor();
template<typename T>
inline const std::string& ECPMsgIDSubGame_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ECPMsgIDSubGame>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ECPMsgIDSubGame_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ECPMsgIDSubGame_descriptor(), enum_t_value);
}
inline bool ECPMsgIDSubGame_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ECPMsgIDSubGame* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ECPMsgIDSubGame>(
    ECPMsgIDSubGame_descriptor(), name, value);
}
// ===================================================================

class CPMsgTableState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChinesePoker.CPMsgTableState) */ {
 public:
  inline CPMsgTableState() : CPMsgTableState(nullptr) {}
  virtual ~CPMsgTableState();

  CPMsgTableState(const CPMsgTableState& from);
  CPMsgTableState(CPMsgTableState&& from) noexcept
    : CPMsgTableState() {
    *this = ::std::move(from);
  }

  inline CPMsgTableState& operator=(const CPMsgTableState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPMsgTableState& operator=(CPMsgTableState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPMsgTableState& default_instance();

  static inline const CPMsgTableState* internal_default_instance() {
    return reinterpret_cast<const CPMsgTableState*>(
               &_CPMsgTableState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CPMsgTableState& a, CPMsgTableState& b) {
    a.Swap(&b);
  }
  inline void Swap(CPMsgTableState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPMsgTableState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPMsgTableState* New() const final {
    return CreateMaybeMessage<CPMsgTableState>(nullptr);
  }

  CPMsgTableState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPMsgTableState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPMsgTableState& from);
  void MergeFrom(const CPMsgTableState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPMsgTableState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChinesePoker.CPMsgTableState";
  }
  protected:
  explicit CPMsgTableState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChinesePoker_2eproto);
    return ::descriptor_table_ChinesePoker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kOutImeFieldNumber = 2,
  };
  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 out_ime = 2;
  void clear_out_ime();
  ::PROTOBUF_NAMESPACE_ID::int32 out_ime() const;
  void set_out_ime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_out_ime() const;
  void _internal_set_out_ime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChinesePoker.CPMsgTableState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  ::PROTOBUF_NAMESPACE_ID::int32 out_ime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChinesePoker_2eproto;
};
// -------------------------------------------------------------------

class CPMsgHandCards PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChinesePoker.CPMsgHandCards) */ {
 public:
  inline CPMsgHandCards() : CPMsgHandCards(nullptr) {}
  virtual ~CPMsgHandCards();

  CPMsgHandCards(const CPMsgHandCards& from);
  CPMsgHandCards(CPMsgHandCards&& from) noexcept
    : CPMsgHandCards() {
    *this = ::std::move(from);
  }

  inline CPMsgHandCards& operator=(const CPMsgHandCards& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPMsgHandCards& operator=(CPMsgHandCards&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPMsgHandCards& default_instance();

  static inline const CPMsgHandCards* internal_default_instance() {
    return reinterpret_cast<const CPMsgHandCards*>(
               &_CPMsgHandCards_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CPMsgHandCards& a, CPMsgHandCards& b) {
    a.Swap(&b);
  }
  inline void Swap(CPMsgHandCards* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPMsgHandCards* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPMsgHandCards* New() const final {
    return CreateMaybeMessage<CPMsgHandCards>(nullptr);
  }

  CPMsgHandCards* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPMsgHandCards>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPMsgHandCards& from);
  void MergeFrom(const CPMsgHandCards& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPMsgHandCards* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChinesePoker.CPMsgHandCards";
  }
  protected:
  explicit CPMsgHandCards(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChinesePoker_2eproto);
    return ::descriptor_table_ChinesePoker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardsFieldNumber = 2,
    kChairIdFieldNumber = 1,
  };
  // repeated int32 cards = 2;
  int cards_size() const;
  private:
  int _internal_cards_size() const;
  public:
  void clear_cards();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cards(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_cards() const;
  void _internal_add_cards(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_cards();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 cards(int index) const;
  void set_cards(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_cards(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      cards() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_cards();

  // int32 chair_id = 1;
  void clear_chair_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id() const;
  void set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_id() const;
  void _internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChinesePoker.CPMsgHandCards)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > cards_;
  mutable std::atomic<int> _cards_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChinesePoker_2eproto;
};
// -------------------------------------------------------------------

class CPCardStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChinesePoker.CPCardStatus) */ {
 public:
  inline CPCardStatus() : CPCardStatus(nullptr) {}
  virtual ~CPCardStatus();

  CPCardStatus(const CPCardStatus& from);
  CPCardStatus(CPCardStatus&& from) noexcept
    : CPCardStatus() {
    *this = ::std::move(from);
  }

  inline CPCardStatus& operator=(const CPCardStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPCardStatus& operator=(CPCardStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPCardStatus& default_instance();

  static inline const CPCardStatus* internal_default_instance() {
    return reinterpret_cast<const CPCardStatus*>(
               &_CPCardStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CPCardStatus& a, CPCardStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CPCardStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPCardStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPCardStatus* New() const final {
    return CreateMaybeMessage<CPCardStatus>(nullptr);
  }

  CPCardStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPCardStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPCardStatus& from);
  void MergeFrom(const CPCardStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPCardStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChinesePoker.CPCardStatus";
  }
  protected:
  explicit CPCardStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChinesePoker_2eproto);
    return ::descriptor_table_ChinesePoker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 2,
    kStatusFieldNumber = 3,
    kAddFieldNumber = 4,
    kChairIdFieldNumber = 1,
  };
  // repeated int32 type = 2;
  int type_size() const;
  private:
  int _internal_type_size() const;
  public:
  void clear_type();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_type() const;
  void _internal_add_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_type();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 type(int index) const;
  void set_type(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_type();

  // repeated int32 status = 3;
  int status_size() const;
  private:
  int _internal_status_size() const;
  public:
  void clear_status();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_status() const;
  void _internal_add_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_status();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 status(int index) const;
  void set_status(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      status() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_status();

  // repeated int32 add = 4;
  int add_size() const;
  private:
  int _internal_add_size() const;
  public:
  void clear_add();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_add(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_add() const;
  void _internal_add_add(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_add();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 add(int index) const;
  void set_add(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_add(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      add() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_add();

  // int32 chair_id = 1;
  void clear_chair_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id() const;
  void set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_id() const;
  void _internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChinesePoker.CPCardStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > type_;
  mutable std::atomic<int> _type_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > status_;
  mutable std::atomic<int> _status_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > add_;
  mutable std::atomic<int> _add_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChinesePoker_2eproto;
};
// -------------------------------------------------------------------

class CPMsgPlayerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChinesePoker.CPMsgPlayerInfo) */ {
 public:
  inline CPMsgPlayerInfo() : CPMsgPlayerInfo(nullptr) {}
  virtual ~CPMsgPlayerInfo();

  CPMsgPlayerInfo(const CPMsgPlayerInfo& from);
  CPMsgPlayerInfo(CPMsgPlayerInfo&& from) noexcept
    : CPMsgPlayerInfo() {
    *this = ::std::move(from);
  }

  inline CPMsgPlayerInfo& operator=(const CPMsgPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPMsgPlayerInfo& operator=(CPMsgPlayerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPMsgPlayerInfo& default_instance();

  static inline const CPMsgPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const CPMsgPlayerInfo*>(
               &_CPMsgPlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CPMsgPlayerInfo& a, CPMsgPlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CPMsgPlayerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPMsgPlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPMsgPlayerInfo* New() const final {
    return CreateMaybeMessage<CPMsgPlayerInfo>(nullptr);
  }

  CPMsgPlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPMsgPlayerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPMsgPlayerInfo& from);
  void MergeFrom(const CPMsgPlayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPMsgPlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChinesePoker.CPMsgPlayerInfo";
  }
  protected:
  explicit CPMsgPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChinesePoker_2eproto);
    return ::descriptor_table_ChinesePoker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardStatusFieldNumber = 3,
    kHandlsFieldNumber = 6,
    kChairIdFieldNumber = 1,
    kPlayStatusFieldNumber = 2,
    kGoldFieldNumber = 4,
    kWinGoldFieldNumber = 5,
    kSpecialTypeFieldNumber = 7,
  };
  // .ChinesePoker.CPCardStatus card_status = 3;
  bool has_card_status() const;
  private:
  bool _internal_has_card_status() const;
  public:
  void clear_card_status();
  const ::ChinesePoker::CPCardStatus& card_status() const;
  ::ChinesePoker::CPCardStatus* release_card_status();
  ::ChinesePoker::CPCardStatus* mutable_card_status();
  void set_allocated_card_status(::ChinesePoker::CPCardStatus* card_status);
  private:
  const ::ChinesePoker::CPCardStatus& _internal_card_status() const;
  ::ChinesePoker::CPCardStatus* _internal_mutable_card_status();
  public:
  void unsafe_arena_set_allocated_card_status(
      ::ChinesePoker::CPCardStatus* card_status);
  ::ChinesePoker::CPCardStatus* unsafe_arena_release_card_status();

  // .ChinesePoker.CPMsgHandCards handls = 6;
  bool has_handls() const;
  private:
  bool _internal_has_handls() const;
  public:
  void clear_handls();
  const ::ChinesePoker::CPMsgHandCards& handls() const;
  ::ChinesePoker::CPMsgHandCards* release_handls();
  ::ChinesePoker::CPMsgHandCards* mutable_handls();
  void set_allocated_handls(::ChinesePoker::CPMsgHandCards* handls);
  private:
  const ::ChinesePoker::CPMsgHandCards& _internal_handls() const;
  ::ChinesePoker::CPMsgHandCards* _internal_mutable_handls();
  public:
  void unsafe_arena_set_allocated_handls(
      ::ChinesePoker::CPMsgHandCards* handls);
  ::ChinesePoker::CPMsgHandCards* unsafe_arena_release_handls();

  // int32 chair_id = 1;
  void clear_chair_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id() const;
  void set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_id() const;
  void _internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 play_status = 2;
  void clear_play_status();
  ::PROTOBUF_NAMESPACE_ID::int32 play_status() const;
  void set_play_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_play_status() const;
  void _internal_set_play_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 gold = 4;
  void clear_gold();
  ::PROTOBUF_NAMESPACE_ID::int64 gold() const;
  void set_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_gold() const;
  void _internal_set_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 win_gold = 5;
  void clear_win_gold();
  ::PROTOBUF_NAMESPACE_ID::int64 win_gold() const;
  void set_win_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_win_gold() const;
  void _internal_set_win_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 special_type = 7;
  void clear_special_type();
  ::PROTOBUF_NAMESPACE_ID::int32 special_type() const;
  void set_special_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_special_type() const;
  void _internal_set_special_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChinesePoker.CPMsgPlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ChinesePoker::CPCardStatus* card_status_;
  ::ChinesePoker::CPMsgHandCards* handls_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 play_status_;
  ::PROTOBUF_NAMESPACE_ID::int64 gold_;
  ::PROTOBUF_NAMESPACE_ID::int64 win_gold_;
  ::PROTOBUF_NAMESPACE_ID::int32 special_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChinesePoker_2eproto;
};
// -------------------------------------------------------------------

class CPMsgSceneInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChinesePoker.CPMsgSceneInfo) */ {
 public:
  inline CPMsgSceneInfo() : CPMsgSceneInfo(nullptr) {}
  virtual ~CPMsgSceneInfo();

  CPMsgSceneInfo(const CPMsgSceneInfo& from);
  CPMsgSceneInfo(CPMsgSceneInfo&& from) noexcept
    : CPMsgSceneInfo() {
    *this = ::std::move(from);
  }

  inline CPMsgSceneInfo& operator=(const CPMsgSceneInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPMsgSceneInfo& operator=(CPMsgSceneInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPMsgSceneInfo& default_instance();

  static inline const CPMsgSceneInfo* internal_default_instance() {
    return reinterpret_cast<const CPMsgSceneInfo*>(
               &_CPMsgSceneInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CPMsgSceneInfo& a, CPMsgSceneInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CPMsgSceneInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPMsgSceneInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPMsgSceneInfo* New() const final {
    return CreateMaybeMessage<CPMsgSceneInfo>(nullptr);
  }

  CPMsgSceneInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPMsgSceneInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPMsgSceneInfo& from);
  void MergeFrom(const CPMsgSceneInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPMsgSceneInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChinesePoker.CPMsgSceneInfo";
  }
  protected:
  explicit CPMsgSceneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChinesePoker_2eproto);
    return ::descriptor_table_ChinesePoker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpecialBsFieldNumber = 6,
    kPlayerInfosFieldNumber = 7,
    kCellScoreFieldNumber = 1,
    kTableStateFieldNumber = 2,
    kOutTimeFieldNumber = 3,
    kTotalTimeFieldNumber = 4,
    kServerIdFieldNumber = 5,
  };
  // repeated int32 special_bs = 6;
  int special_bs_size() const;
  private:
  int _internal_special_bs_size() const;
  public:
  void clear_special_bs();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_special_bs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_special_bs() const;
  void _internal_add_special_bs(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_special_bs();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 special_bs(int index) const;
  void set_special_bs(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_special_bs(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      special_bs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_special_bs();

  // repeated .ChinesePoker.CPMsgPlayerInfo player_infos = 7;
  int player_infos_size() const;
  private:
  int _internal_player_infos_size() const;
  public:
  void clear_player_infos();
  ::ChinesePoker::CPMsgPlayerInfo* mutable_player_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChinesePoker::CPMsgPlayerInfo >*
      mutable_player_infos();
  private:
  const ::ChinesePoker::CPMsgPlayerInfo& _internal_player_infos(int index) const;
  ::ChinesePoker::CPMsgPlayerInfo* _internal_add_player_infos();
  public:
  const ::ChinesePoker::CPMsgPlayerInfo& player_infos(int index) const;
  ::ChinesePoker::CPMsgPlayerInfo* add_player_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChinesePoker::CPMsgPlayerInfo >&
      player_infos() const;

  // int64 cell_score = 1;
  void clear_cell_score();
  ::PROTOBUF_NAMESPACE_ID::int64 cell_score() const;
  void set_cell_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cell_score() const;
  void _internal_set_cell_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 table_state = 2;
  void clear_table_state();
  ::PROTOBUF_NAMESPACE_ID::int32 table_state() const;
  void set_table_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_table_state() const;
  void _internal_set_table_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 out_time = 3;
  void clear_out_time();
  ::PROTOBUF_NAMESPACE_ID::int32 out_time() const;
  void set_out_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_out_time() const;
  void _internal_set_out_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total_time = 4;
  void clear_total_time();
  ::PROTOBUF_NAMESPACE_ID::int32 total_time() const;
  void set_total_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_time() const;
  void _internal_set_total_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 server_id = 5;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChinesePoker.CPMsgSceneInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > special_bs_;
  mutable std::atomic<int> _special_bs_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChinesePoker::CPMsgPlayerInfo > player_infos_;
  ::PROTOBUF_NAMESPACE_ID::int64 cell_score_;
  ::PROTOBUF_NAMESPACE_ID::int32 table_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 out_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChinesePoker_2eproto;
};
// -------------------------------------------------------------------

class CPMsgGameStartResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChinesePoker.CPMsgGameStartResp) */ {
 public:
  inline CPMsgGameStartResp() : CPMsgGameStartResp(nullptr) {}
  virtual ~CPMsgGameStartResp();

  CPMsgGameStartResp(const CPMsgGameStartResp& from);
  CPMsgGameStartResp(CPMsgGameStartResp&& from) noexcept
    : CPMsgGameStartResp() {
    *this = ::std::move(from);
  }

  inline CPMsgGameStartResp& operator=(const CPMsgGameStartResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPMsgGameStartResp& operator=(CPMsgGameStartResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPMsgGameStartResp& default_instance();

  static inline const CPMsgGameStartResp* internal_default_instance() {
    return reinterpret_cast<const CPMsgGameStartResp*>(
               &_CPMsgGameStartResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CPMsgGameStartResp& a, CPMsgGameStartResp& b) {
    a.Swap(&b);
  }
  inline void Swap(CPMsgGameStartResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPMsgGameStartResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPMsgGameStartResp* New() const final {
    return CreateMaybeMessage<CPMsgGameStartResp>(nullptr);
  }

  CPMsgGameStartResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPMsgGameStartResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPMsgGameStartResp& from);
  void MergeFrom(const CPMsgGameStartResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPMsgGameStartResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChinesePoker.CPMsgGameStartResp";
  }
  protected:
  explicit CPMsgGameStartResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChinesePoker_2eproto);
    return ::descriptor_table_ChinesePoker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandlsFieldNumber = 1,
    kCardStatusFieldNumber = 2,
    kSpecialTypeFieldNumber = 3,
  };
  // .ChinesePoker.CPMsgHandCards handls = 1;
  bool has_handls() const;
  private:
  bool _internal_has_handls() const;
  public:
  void clear_handls();
  const ::ChinesePoker::CPMsgHandCards& handls() const;
  ::ChinesePoker::CPMsgHandCards* release_handls();
  ::ChinesePoker::CPMsgHandCards* mutable_handls();
  void set_allocated_handls(::ChinesePoker::CPMsgHandCards* handls);
  private:
  const ::ChinesePoker::CPMsgHandCards& _internal_handls() const;
  ::ChinesePoker::CPMsgHandCards* _internal_mutable_handls();
  public:
  void unsafe_arena_set_allocated_handls(
      ::ChinesePoker::CPMsgHandCards* handls);
  ::ChinesePoker::CPMsgHandCards* unsafe_arena_release_handls();

  // .ChinesePoker.CPCardStatus card_status = 2;
  bool has_card_status() const;
  private:
  bool _internal_has_card_status() const;
  public:
  void clear_card_status();
  const ::ChinesePoker::CPCardStatus& card_status() const;
  ::ChinesePoker::CPCardStatus* release_card_status();
  ::ChinesePoker::CPCardStatus* mutable_card_status();
  void set_allocated_card_status(::ChinesePoker::CPCardStatus* card_status);
  private:
  const ::ChinesePoker::CPCardStatus& _internal_card_status() const;
  ::ChinesePoker::CPCardStatus* _internal_mutable_card_status();
  public:
  void unsafe_arena_set_allocated_card_status(
      ::ChinesePoker::CPCardStatus* card_status);
  ::ChinesePoker::CPCardStatus* unsafe_arena_release_card_status();

  // int32 special_type = 3;
  void clear_special_type();
  ::PROTOBUF_NAMESPACE_ID::int32 special_type() const;
  void set_special_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_special_type() const;
  void _internal_set_special_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChinesePoker.CPMsgGameStartResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ChinesePoker::CPMsgHandCards* handls_;
  ::ChinesePoker::CPCardStatus* card_status_;
  ::PROTOBUF_NAMESPACE_ID::int32 special_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChinesePoker_2eproto;
};
// -------------------------------------------------------------------

class CPMsgAction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChinesePoker.CPMsgAction) */ {
 public:
  inline CPMsgAction() : CPMsgAction(nullptr) {}
  virtual ~CPMsgAction();

  CPMsgAction(const CPMsgAction& from);
  CPMsgAction(CPMsgAction&& from) noexcept
    : CPMsgAction() {
    *this = ::std::move(from);
  }

  inline CPMsgAction& operator=(const CPMsgAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPMsgAction& operator=(CPMsgAction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPMsgAction& default_instance();

  static inline const CPMsgAction* internal_default_instance() {
    return reinterpret_cast<const CPMsgAction*>(
               &_CPMsgAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CPMsgAction& a, CPMsgAction& b) {
    a.Swap(&b);
  }
  inline void Swap(CPMsgAction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPMsgAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPMsgAction* New() const final {
    return CreateMaybeMessage<CPMsgAction>(nullptr);
  }

  CPMsgAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPMsgAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPMsgAction& from);
  void MergeFrom(const CPMsgAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPMsgAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChinesePoker.CPMsgAction";
  }
  protected:
  explicit CPMsgAction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChinesePoker_2eproto);
    return ::descriptor_table_ChinesePoker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPos1FieldNumber = 2,
    kPos2FieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // int64 pos1 = 2;
  void clear_pos1();
  ::PROTOBUF_NAMESPACE_ID::int64 pos1() const;
  void set_pos1(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_pos1() const;
  void _internal_set_pos1(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 pos2 = 3;
  void clear_pos2();
  ::PROTOBUF_NAMESPACE_ID::int64 pos2() const;
  void set_pos2(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_pos2() const;
  void _internal_set_pos2(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChinesePoker.CPMsgAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 pos1_;
  ::PROTOBUF_NAMESPACE_ID::int64 pos2_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChinesePoker_2eproto;
};
// -------------------------------------------------------------------

class CPMsgNotifyActionResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChinesePoker.CPMsgNotifyActionResp) */ {
 public:
  inline CPMsgNotifyActionResp() : CPMsgNotifyActionResp(nullptr) {}
  virtual ~CPMsgNotifyActionResp();

  CPMsgNotifyActionResp(const CPMsgNotifyActionResp& from);
  CPMsgNotifyActionResp(CPMsgNotifyActionResp&& from) noexcept
    : CPMsgNotifyActionResp() {
    *this = ::std::move(from);
  }

  inline CPMsgNotifyActionResp& operator=(const CPMsgNotifyActionResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPMsgNotifyActionResp& operator=(CPMsgNotifyActionResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPMsgNotifyActionResp& default_instance();

  static inline const CPMsgNotifyActionResp* internal_default_instance() {
    return reinterpret_cast<const CPMsgNotifyActionResp*>(
               &_CPMsgNotifyActionResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CPMsgNotifyActionResp& a, CPMsgNotifyActionResp& b) {
    a.Swap(&b);
  }
  inline void Swap(CPMsgNotifyActionResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPMsgNotifyActionResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPMsgNotifyActionResp* New() const final {
    return CreateMaybeMessage<CPMsgNotifyActionResp>(nullptr);
  }

  CPMsgNotifyActionResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPMsgNotifyActionResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPMsgNotifyActionResp& from);
  void MergeFrom(const CPMsgNotifyActionResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPMsgNotifyActionResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChinesePoker.CPMsgNotifyActionResp";
  }
  protected:
  explicit CPMsgNotifyActionResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChinesePoker_2eproto);
    return ::descriptor_table_ChinesePoker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardStatusFieldNumber = 1,
    kSpecialTypeFieldNumber = 2,
  };
  // .ChinesePoker.CPCardStatus card_status = 1;
  bool has_card_status() const;
  private:
  bool _internal_has_card_status() const;
  public:
  void clear_card_status();
  const ::ChinesePoker::CPCardStatus& card_status() const;
  ::ChinesePoker::CPCardStatus* release_card_status();
  ::ChinesePoker::CPCardStatus* mutable_card_status();
  void set_allocated_card_status(::ChinesePoker::CPCardStatus* card_status);
  private:
  const ::ChinesePoker::CPCardStatus& _internal_card_status() const;
  ::ChinesePoker::CPCardStatus* _internal_mutable_card_status();
  public:
  void unsafe_arena_set_allocated_card_status(
      ::ChinesePoker::CPCardStatus* card_status);
  ::ChinesePoker::CPCardStatus* unsafe_arena_release_card_status();

  // int32 special_type = 2;
  void clear_special_type();
  ::PROTOBUF_NAMESPACE_ID::int32 special_type() const;
  void set_special_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_special_type() const;
  void _internal_set_special_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChinesePoker.CPMsgNotifyActionResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ChinesePoker::CPCardStatus* card_status_;
  ::PROTOBUF_NAMESPACE_ID::int32 special_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChinesePoker_2eproto;
};
// -------------------------------------------------------------------

class CPCardResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChinesePoker.CPCardResult) */ {
 public:
  inline CPCardResult() : CPCardResult(nullptr) {}
  virtual ~CPCardResult();

  CPCardResult(const CPCardResult& from);
  CPCardResult(CPCardResult&& from) noexcept
    : CPCardResult() {
    *this = ::std::move(from);
  }

  inline CPCardResult& operator=(const CPCardResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPCardResult& operator=(CPCardResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPCardResult& default_instance();

  static inline const CPCardResult* internal_default_instance() {
    return reinterpret_cast<const CPCardResult*>(
               &_CPCardResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CPCardResult& a, CPCardResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CPCardResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPCardResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPCardResult* New() const final {
    return CreateMaybeMessage<CPCardResult>(nullptr);
  }

  CPCardResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPCardResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPCardResult& from);
  void MergeFrom(const CPCardResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPCardResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChinesePoker.CPCardResult";
  }
  protected:
  explicit CPCardResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChinesePoker_2eproto);
    return ::descriptor_table_ChinesePoker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScoreFieldNumber = 2,
    kWinFieldNumber = 3,
    kGunkChairFieldNumber = 6,
    kChairIdFieldNumber = 1,
    kBoomFieldNumber = 4,
    kScoreTotalFieldNumber = 5,
  };
  // repeated int64 score = 2;
  int score_size() const;
  private:
  int _internal_score_size() const;
  public:
  void clear_score();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_score(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_score() const;
  void _internal_add_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_score();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 score(int index) const;
  void set_score(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      score() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_score();

  // repeated bool win = 3;
  int win_size() const;
  private:
  int _internal_win_size() const;
  public:
  void clear_win();
  private:
  bool _internal_win(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_win() const;
  void _internal_add_win(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_win();
  public:
  bool win(int index) const;
  void set_win(int index, bool value);
  void add_win(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      win() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_win();

  // repeated int32 gunk_chair = 6;
  int gunk_chair_size() const;
  private:
  int _internal_gunk_chair_size() const;
  public:
  void clear_gunk_chair();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gunk_chair(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_gunk_chair() const;
  void _internal_add_gunk_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_gunk_chair();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 gunk_chair(int index) const;
  void set_gunk_chair(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_gunk_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      gunk_chair() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_gunk_chair();

  // int32 chair_id = 1;
  void clear_chair_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id() const;
  void set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_id() const;
  void _internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool boom = 4;
  void clear_boom();
  bool boom() const;
  void set_boom(bool value);
  private:
  bool _internal_boom() const;
  void _internal_set_boom(bool value);
  public:

  // int64 score_total = 5;
  void clear_score_total();
  ::PROTOBUF_NAMESPACE_ID::int64 score_total() const;
  void set_score_total(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_score_total() const;
  void _internal_set_score_total(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ChinesePoker.CPCardResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > score_;
  mutable std::atomic<int> _score_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > win_;
  mutable std::atomic<int> _win_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > gunk_chair_;
  mutable std::atomic<int> _gunk_chair_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id_;
  bool boom_;
  ::PROTOBUF_NAMESPACE_ID::int64 score_total_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChinesePoker_2eproto;
};
// -------------------------------------------------------------------

class CPMsgGameResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChinesePoker.CPMsgGameResult) */ {
 public:
  inline CPMsgGameResult() : CPMsgGameResult(nullptr) {}
  virtual ~CPMsgGameResult();

  CPMsgGameResult(const CPMsgGameResult& from);
  CPMsgGameResult(CPMsgGameResult&& from) noexcept
    : CPMsgGameResult() {
    *this = ::std::move(from);
  }

  inline CPMsgGameResult& operator=(const CPMsgGameResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPMsgGameResult& operator=(CPMsgGameResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPMsgGameResult& default_instance();

  static inline const CPMsgGameResult* internal_default_instance() {
    return reinterpret_cast<const CPMsgGameResult*>(
               &_CPMsgGameResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CPMsgGameResult& a, CPMsgGameResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CPMsgGameResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPMsgGameResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPMsgGameResult* New() const final {
    return CreateMaybeMessage<CPMsgGameResult>(nullptr);
  }

  CPMsgGameResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPMsgGameResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPMsgGameResult& from);
  void MergeFrom(const CPMsgGameResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPMsgGameResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChinesePoker.CPMsgGameResult";
  }
  protected:
  explicit CPMsgGameResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChinesePoker_2eproto);
    return ::descriptor_table_ChinesePoker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameTaxFieldNumber = 1,
    kGameScoreFieldNumber = 2,
    kCardStatusFieldNumber = 3,
    kSpecialTypeFieldNumber = 4,
    kCardResultFieldNumber = 5,
    kPlayerHandsFieldNumber = 6,
    kAllGunkChairFieldNumber = 7,
  };
  // repeated int64 game_tax = 1;
  int game_tax_size() const;
  private:
  int _internal_game_tax_size() const;
  public:
  void clear_game_tax();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_game_tax(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_game_tax() const;
  void _internal_add_game_tax(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_game_tax();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 game_tax(int index) const;
  void set_game_tax(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_game_tax(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      game_tax() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_game_tax();

  // repeated int64 game_score = 2;
  int game_score_size() const;
  private:
  int _internal_game_score_size() const;
  public:
  void clear_game_score();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_game_score(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_game_score() const;
  void _internal_add_game_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_game_score();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 game_score(int index) const;
  void set_game_score(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_game_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      game_score() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_game_score();

  // repeated .ChinesePoker.CPCardStatus card_status = 3;
  int card_status_size() const;
  private:
  int _internal_card_status_size() const;
  public:
  void clear_card_status();
  ::ChinesePoker::CPCardStatus* mutable_card_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChinesePoker::CPCardStatus >*
      mutable_card_status();
  private:
  const ::ChinesePoker::CPCardStatus& _internal_card_status(int index) const;
  ::ChinesePoker::CPCardStatus* _internal_add_card_status();
  public:
  const ::ChinesePoker::CPCardStatus& card_status(int index) const;
  ::ChinesePoker::CPCardStatus* add_card_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChinesePoker::CPCardStatus >&
      card_status() const;

  // repeated int32 special_type = 4;
  int special_type_size() const;
  private:
  int _internal_special_type_size() const;
  public:
  void clear_special_type();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_special_type(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_special_type() const;
  void _internal_add_special_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_special_type();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 special_type(int index) const;
  void set_special_type(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_special_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      special_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_special_type();

  // repeated .ChinesePoker.CPCardResult card_result = 5;
  int card_result_size() const;
  private:
  int _internal_card_result_size() const;
  public:
  void clear_card_result();
  ::ChinesePoker::CPCardResult* mutable_card_result(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChinesePoker::CPCardResult >*
      mutable_card_result();
  private:
  const ::ChinesePoker::CPCardResult& _internal_card_result(int index) const;
  ::ChinesePoker::CPCardResult* _internal_add_card_result();
  public:
  const ::ChinesePoker::CPCardResult& card_result(int index) const;
  ::ChinesePoker::CPCardResult* add_card_result();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChinesePoker::CPCardResult >&
      card_result() const;

  // repeated .ChinesePoker.CPMsgHandCards player_hands = 6;
  int player_hands_size() const;
  private:
  int _internal_player_hands_size() const;
  public:
  void clear_player_hands();
  ::ChinesePoker::CPMsgHandCards* mutable_player_hands(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChinesePoker::CPMsgHandCards >*
      mutable_player_hands();
  private:
  const ::ChinesePoker::CPMsgHandCards& _internal_player_hands(int index) const;
  ::ChinesePoker::CPMsgHandCards* _internal_add_player_hands();
  public:
  const ::ChinesePoker::CPMsgHandCards& player_hands(int index) const;
  ::ChinesePoker::CPMsgHandCards* add_player_hands();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChinesePoker::CPMsgHandCards >&
      player_hands() const;

  // int32 all_gunk_chair = 7;
  void clear_all_gunk_chair();
  ::PROTOBUF_NAMESPACE_ID::int32 all_gunk_chair() const;
  void set_all_gunk_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_all_gunk_chair() const;
  void _internal_set_all_gunk_chair(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChinesePoker.CPMsgGameResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > game_tax_;
  mutable std::atomic<int> _game_tax_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > game_score_;
  mutable std::atomic<int> _game_score_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChinesePoker::CPCardStatus > card_status_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > special_type_;
  mutable std::atomic<int> _special_type_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChinesePoker::CPCardResult > card_result_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChinesePoker::CPMsgHandCards > player_hands_;
  ::PROTOBUF_NAMESPACE_ID::int32 all_gunk_chair_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChinesePoker_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CPMsgTableState

// int32 state = 1;
inline void CPMsgTableState::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPMsgTableState::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPMsgTableState::state() const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPMsgTableState.state)
  return _internal_state();
}
inline void CPMsgTableState::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void CPMsgTableState::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:ChinesePoker.CPMsgTableState.state)
}

// int32 out_ime = 2;
inline void CPMsgTableState::clear_out_ime() {
  out_ime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPMsgTableState::_internal_out_ime() const {
  return out_ime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPMsgTableState::out_ime() const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPMsgTableState.out_ime)
  return _internal_out_ime();
}
inline void CPMsgTableState::_internal_set_out_ime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  out_ime_ = value;
}
inline void CPMsgTableState::set_out_ime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_out_ime(value);
  // @@protoc_insertion_point(field_set:ChinesePoker.CPMsgTableState.out_ime)
}

// -------------------------------------------------------------------

// CPMsgHandCards

// int32 chair_id = 1;
inline void CPMsgHandCards::clear_chair_id() {
  chair_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPMsgHandCards::_internal_chair_id() const {
  return chair_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPMsgHandCards::chair_id() const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPMsgHandCards.chair_id)
  return _internal_chair_id();
}
inline void CPMsgHandCards::_internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_id_ = value;
}
inline void CPMsgHandCards::set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_id(value);
  // @@protoc_insertion_point(field_set:ChinesePoker.CPMsgHandCards.chair_id)
}

// repeated int32 cards = 2;
inline int CPMsgHandCards::_internal_cards_size() const {
  return cards_.size();
}
inline int CPMsgHandCards::cards_size() const {
  return _internal_cards_size();
}
inline void CPMsgHandCards::clear_cards() {
  cards_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPMsgHandCards::_internal_cards(int index) const {
  return cards_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPMsgHandCards::cards(int index) const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPMsgHandCards.cards)
  return _internal_cards(index);
}
inline void CPMsgHandCards::set_cards(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:ChinesePoker.CPMsgHandCards.cards)
}
inline void CPMsgHandCards::_internal_add_cards(::PROTOBUF_NAMESPACE_ID::int32 value) {
  cards_.Add(value);
}
inline void CPMsgHandCards::add_cards(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_cards(value);
  // @@protoc_insertion_point(field_add:ChinesePoker.CPMsgHandCards.cards)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CPMsgHandCards::_internal_cards() const {
  return cards_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CPMsgHandCards::cards() const {
  // @@protoc_insertion_point(field_list:ChinesePoker.CPMsgHandCards.cards)
  return _internal_cards();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CPMsgHandCards::_internal_mutable_cards() {
  return &cards_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CPMsgHandCards::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:ChinesePoker.CPMsgHandCards.cards)
  return _internal_mutable_cards();
}

// -------------------------------------------------------------------

// CPCardStatus

// int32 chair_id = 1;
inline void CPCardStatus::clear_chair_id() {
  chair_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPCardStatus::_internal_chair_id() const {
  return chair_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPCardStatus::chair_id() const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPCardStatus.chair_id)
  return _internal_chair_id();
}
inline void CPCardStatus::_internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_id_ = value;
}
inline void CPCardStatus::set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_id(value);
  // @@protoc_insertion_point(field_set:ChinesePoker.CPCardStatus.chair_id)
}

// repeated int32 type = 2;
inline int CPCardStatus::_internal_type_size() const {
  return type_.size();
}
inline int CPCardStatus::type_size() const {
  return _internal_type_size();
}
inline void CPCardStatus::clear_type() {
  type_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPCardStatus::_internal_type(int index) const {
  return type_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPCardStatus::type(int index) const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPCardStatus.type)
  return _internal_type(index);
}
inline void CPCardStatus::set_type(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  type_.Set(index, value);
  // @@protoc_insertion_point(field_set:ChinesePoker.CPCardStatus.type)
}
inline void CPCardStatus::_internal_add_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  type_.Add(value);
}
inline void CPCardStatus::add_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_type(value);
  // @@protoc_insertion_point(field_add:ChinesePoker.CPCardStatus.type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CPCardStatus::_internal_type() const {
  return type_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CPCardStatus::type() const {
  // @@protoc_insertion_point(field_list:ChinesePoker.CPCardStatus.type)
  return _internal_type();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CPCardStatus::_internal_mutable_type() {
  return &type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CPCardStatus::mutable_type() {
  // @@protoc_insertion_point(field_mutable_list:ChinesePoker.CPCardStatus.type)
  return _internal_mutable_type();
}

// repeated int32 status = 3;
inline int CPCardStatus::_internal_status_size() const {
  return status_.size();
}
inline int CPCardStatus::status_size() const {
  return _internal_status_size();
}
inline void CPCardStatus::clear_status() {
  status_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPCardStatus::_internal_status(int index) const {
  return status_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPCardStatus::status(int index) const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPCardStatus.status)
  return _internal_status(index);
}
inline void CPCardStatus::set_status(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  status_.Set(index, value);
  // @@protoc_insertion_point(field_set:ChinesePoker.CPCardStatus.status)
}
inline void CPCardStatus::_internal_add_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  status_.Add(value);
}
inline void CPCardStatus::add_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_status(value);
  // @@protoc_insertion_point(field_add:ChinesePoker.CPCardStatus.status)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CPCardStatus::_internal_status() const {
  return status_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CPCardStatus::status() const {
  // @@protoc_insertion_point(field_list:ChinesePoker.CPCardStatus.status)
  return _internal_status();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CPCardStatus::_internal_mutable_status() {
  return &status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CPCardStatus::mutable_status() {
  // @@protoc_insertion_point(field_mutable_list:ChinesePoker.CPCardStatus.status)
  return _internal_mutable_status();
}

// repeated int32 add = 4;
inline int CPCardStatus::_internal_add_size() const {
  return add_.size();
}
inline int CPCardStatus::add_size() const {
  return _internal_add_size();
}
inline void CPCardStatus::clear_add() {
  add_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPCardStatus::_internal_add(int index) const {
  return add_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPCardStatus::add(int index) const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPCardStatus.add)
  return _internal_add(index);
}
inline void CPCardStatus::set_add(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  add_.Set(index, value);
  // @@protoc_insertion_point(field_set:ChinesePoker.CPCardStatus.add)
}
inline void CPCardStatus::_internal_add_add(::PROTOBUF_NAMESPACE_ID::int32 value) {
  add_.Add(value);
}
inline void CPCardStatus::add_add(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_add(value);
  // @@protoc_insertion_point(field_add:ChinesePoker.CPCardStatus.add)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CPCardStatus::_internal_add() const {
  return add_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CPCardStatus::add() const {
  // @@protoc_insertion_point(field_list:ChinesePoker.CPCardStatus.add)
  return _internal_add();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CPCardStatus::_internal_mutable_add() {
  return &add_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CPCardStatus::mutable_add() {
  // @@protoc_insertion_point(field_mutable_list:ChinesePoker.CPCardStatus.add)
  return _internal_mutable_add();
}

// -------------------------------------------------------------------

// CPMsgPlayerInfo

// int32 chair_id = 1;
inline void CPMsgPlayerInfo::clear_chair_id() {
  chair_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPMsgPlayerInfo::_internal_chair_id() const {
  return chair_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPMsgPlayerInfo::chair_id() const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPMsgPlayerInfo.chair_id)
  return _internal_chair_id();
}
inline void CPMsgPlayerInfo::_internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_id_ = value;
}
inline void CPMsgPlayerInfo::set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_id(value);
  // @@protoc_insertion_point(field_set:ChinesePoker.CPMsgPlayerInfo.chair_id)
}

// int32 play_status = 2;
inline void CPMsgPlayerInfo::clear_play_status() {
  play_status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPMsgPlayerInfo::_internal_play_status() const {
  return play_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPMsgPlayerInfo::play_status() const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPMsgPlayerInfo.play_status)
  return _internal_play_status();
}
inline void CPMsgPlayerInfo::_internal_set_play_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  play_status_ = value;
}
inline void CPMsgPlayerInfo::set_play_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_play_status(value);
  // @@protoc_insertion_point(field_set:ChinesePoker.CPMsgPlayerInfo.play_status)
}

// .ChinesePoker.CPCardStatus card_status = 3;
inline bool CPMsgPlayerInfo::_internal_has_card_status() const {
  return this != internal_default_instance() && card_status_ != nullptr;
}
inline bool CPMsgPlayerInfo::has_card_status() const {
  return _internal_has_card_status();
}
inline void CPMsgPlayerInfo::clear_card_status() {
  if (GetArena() == nullptr && card_status_ != nullptr) {
    delete card_status_;
  }
  card_status_ = nullptr;
}
inline const ::ChinesePoker::CPCardStatus& CPMsgPlayerInfo::_internal_card_status() const {
  const ::ChinesePoker::CPCardStatus* p = card_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::ChinesePoker::CPCardStatus&>(
      ::ChinesePoker::_CPCardStatus_default_instance_);
}
inline const ::ChinesePoker::CPCardStatus& CPMsgPlayerInfo::card_status() const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPMsgPlayerInfo.card_status)
  return _internal_card_status();
}
inline void CPMsgPlayerInfo::unsafe_arena_set_allocated_card_status(
    ::ChinesePoker::CPCardStatus* card_status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(card_status_);
  }
  card_status_ = card_status;
  if (card_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ChinesePoker.CPMsgPlayerInfo.card_status)
}
inline ::ChinesePoker::CPCardStatus* CPMsgPlayerInfo::release_card_status() {
  
  ::ChinesePoker::CPCardStatus* temp = card_status_;
  card_status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ChinesePoker::CPCardStatus* CPMsgPlayerInfo::unsafe_arena_release_card_status() {
  // @@protoc_insertion_point(field_release:ChinesePoker.CPMsgPlayerInfo.card_status)
  
  ::ChinesePoker::CPCardStatus* temp = card_status_;
  card_status_ = nullptr;
  return temp;
}
inline ::ChinesePoker::CPCardStatus* CPMsgPlayerInfo::_internal_mutable_card_status() {
  
  if (card_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ChinesePoker::CPCardStatus>(GetArena());
    card_status_ = p;
  }
  return card_status_;
}
inline ::ChinesePoker::CPCardStatus* CPMsgPlayerInfo::mutable_card_status() {
  // @@protoc_insertion_point(field_mutable:ChinesePoker.CPMsgPlayerInfo.card_status)
  return _internal_mutable_card_status();
}
inline void CPMsgPlayerInfo::set_allocated_card_status(::ChinesePoker::CPCardStatus* card_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete card_status_;
  }
  if (card_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(card_status);
    if (message_arena != submessage_arena) {
      card_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, card_status, submessage_arena);
    }
    
  } else {
    
  }
  card_status_ = card_status;
  // @@protoc_insertion_point(field_set_allocated:ChinesePoker.CPMsgPlayerInfo.card_status)
}

// int64 gold = 4;
inline void CPMsgPlayerInfo::clear_gold() {
  gold_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CPMsgPlayerInfo::_internal_gold() const {
  return gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CPMsgPlayerInfo::gold() const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPMsgPlayerInfo.gold)
  return _internal_gold();
}
inline void CPMsgPlayerInfo::_internal_set_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  gold_ = value;
}
inline void CPMsgPlayerInfo::set_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:ChinesePoker.CPMsgPlayerInfo.gold)
}

// int64 win_gold = 5;
inline void CPMsgPlayerInfo::clear_win_gold() {
  win_gold_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CPMsgPlayerInfo::_internal_win_gold() const {
  return win_gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CPMsgPlayerInfo::win_gold() const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPMsgPlayerInfo.win_gold)
  return _internal_win_gold();
}
inline void CPMsgPlayerInfo::_internal_set_win_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  win_gold_ = value;
}
inline void CPMsgPlayerInfo::set_win_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_win_gold(value);
  // @@protoc_insertion_point(field_set:ChinesePoker.CPMsgPlayerInfo.win_gold)
}

// .ChinesePoker.CPMsgHandCards handls = 6;
inline bool CPMsgPlayerInfo::_internal_has_handls() const {
  return this != internal_default_instance() && handls_ != nullptr;
}
inline bool CPMsgPlayerInfo::has_handls() const {
  return _internal_has_handls();
}
inline void CPMsgPlayerInfo::clear_handls() {
  if (GetArena() == nullptr && handls_ != nullptr) {
    delete handls_;
  }
  handls_ = nullptr;
}
inline const ::ChinesePoker::CPMsgHandCards& CPMsgPlayerInfo::_internal_handls() const {
  const ::ChinesePoker::CPMsgHandCards* p = handls_;
  return p != nullptr ? *p : reinterpret_cast<const ::ChinesePoker::CPMsgHandCards&>(
      ::ChinesePoker::_CPMsgHandCards_default_instance_);
}
inline const ::ChinesePoker::CPMsgHandCards& CPMsgPlayerInfo::handls() const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPMsgPlayerInfo.handls)
  return _internal_handls();
}
inline void CPMsgPlayerInfo::unsafe_arena_set_allocated_handls(
    ::ChinesePoker::CPMsgHandCards* handls) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handls_);
  }
  handls_ = handls;
  if (handls) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ChinesePoker.CPMsgPlayerInfo.handls)
}
inline ::ChinesePoker::CPMsgHandCards* CPMsgPlayerInfo::release_handls() {
  
  ::ChinesePoker::CPMsgHandCards* temp = handls_;
  handls_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ChinesePoker::CPMsgHandCards* CPMsgPlayerInfo::unsafe_arena_release_handls() {
  // @@protoc_insertion_point(field_release:ChinesePoker.CPMsgPlayerInfo.handls)
  
  ::ChinesePoker::CPMsgHandCards* temp = handls_;
  handls_ = nullptr;
  return temp;
}
inline ::ChinesePoker::CPMsgHandCards* CPMsgPlayerInfo::_internal_mutable_handls() {
  
  if (handls_ == nullptr) {
    auto* p = CreateMaybeMessage<::ChinesePoker::CPMsgHandCards>(GetArena());
    handls_ = p;
  }
  return handls_;
}
inline ::ChinesePoker::CPMsgHandCards* CPMsgPlayerInfo::mutable_handls() {
  // @@protoc_insertion_point(field_mutable:ChinesePoker.CPMsgPlayerInfo.handls)
  return _internal_mutable_handls();
}
inline void CPMsgPlayerInfo::set_allocated_handls(::ChinesePoker::CPMsgHandCards* handls) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete handls_;
  }
  if (handls) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(handls);
    if (message_arena != submessage_arena) {
      handls = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handls, submessage_arena);
    }
    
  } else {
    
  }
  handls_ = handls;
  // @@protoc_insertion_point(field_set_allocated:ChinesePoker.CPMsgPlayerInfo.handls)
}

// int32 special_type = 7;
inline void CPMsgPlayerInfo::clear_special_type() {
  special_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPMsgPlayerInfo::_internal_special_type() const {
  return special_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPMsgPlayerInfo::special_type() const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPMsgPlayerInfo.special_type)
  return _internal_special_type();
}
inline void CPMsgPlayerInfo::_internal_set_special_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  special_type_ = value;
}
inline void CPMsgPlayerInfo::set_special_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_special_type(value);
  // @@protoc_insertion_point(field_set:ChinesePoker.CPMsgPlayerInfo.special_type)
}

// -------------------------------------------------------------------

// CPMsgSceneInfo

// int64 cell_score = 1;
inline void CPMsgSceneInfo::clear_cell_score() {
  cell_score_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CPMsgSceneInfo::_internal_cell_score() const {
  return cell_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CPMsgSceneInfo::cell_score() const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPMsgSceneInfo.cell_score)
  return _internal_cell_score();
}
inline void CPMsgSceneInfo::_internal_set_cell_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  cell_score_ = value;
}
inline void CPMsgSceneInfo::set_cell_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_cell_score(value);
  // @@protoc_insertion_point(field_set:ChinesePoker.CPMsgSceneInfo.cell_score)
}

// int32 table_state = 2;
inline void CPMsgSceneInfo::clear_table_state() {
  table_state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPMsgSceneInfo::_internal_table_state() const {
  return table_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPMsgSceneInfo::table_state() const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPMsgSceneInfo.table_state)
  return _internal_table_state();
}
inline void CPMsgSceneInfo::_internal_set_table_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  table_state_ = value;
}
inline void CPMsgSceneInfo::set_table_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_table_state(value);
  // @@protoc_insertion_point(field_set:ChinesePoker.CPMsgSceneInfo.table_state)
}

// int32 out_time = 3;
inline void CPMsgSceneInfo::clear_out_time() {
  out_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPMsgSceneInfo::_internal_out_time() const {
  return out_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPMsgSceneInfo::out_time() const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPMsgSceneInfo.out_time)
  return _internal_out_time();
}
inline void CPMsgSceneInfo::_internal_set_out_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  out_time_ = value;
}
inline void CPMsgSceneInfo::set_out_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_out_time(value);
  // @@protoc_insertion_point(field_set:ChinesePoker.CPMsgSceneInfo.out_time)
}

// int32 total_time = 4;
inline void CPMsgSceneInfo::clear_total_time() {
  total_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPMsgSceneInfo::_internal_total_time() const {
  return total_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPMsgSceneInfo::total_time() const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPMsgSceneInfo.total_time)
  return _internal_total_time();
}
inline void CPMsgSceneInfo::_internal_set_total_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_time_ = value;
}
inline void CPMsgSceneInfo::set_total_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_time(value);
  // @@protoc_insertion_point(field_set:ChinesePoker.CPMsgSceneInfo.total_time)
}

// int32 server_id = 5;
inline void CPMsgSceneInfo::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPMsgSceneInfo::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPMsgSceneInfo::server_id() const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPMsgSceneInfo.server_id)
  return _internal_server_id();
}
inline void CPMsgSceneInfo::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
}
inline void CPMsgSceneInfo::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:ChinesePoker.CPMsgSceneInfo.server_id)
}

// repeated int32 special_bs = 6;
inline int CPMsgSceneInfo::_internal_special_bs_size() const {
  return special_bs_.size();
}
inline int CPMsgSceneInfo::special_bs_size() const {
  return _internal_special_bs_size();
}
inline void CPMsgSceneInfo::clear_special_bs() {
  special_bs_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPMsgSceneInfo::_internal_special_bs(int index) const {
  return special_bs_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPMsgSceneInfo::special_bs(int index) const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPMsgSceneInfo.special_bs)
  return _internal_special_bs(index);
}
inline void CPMsgSceneInfo::set_special_bs(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  special_bs_.Set(index, value);
  // @@protoc_insertion_point(field_set:ChinesePoker.CPMsgSceneInfo.special_bs)
}
inline void CPMsgSceneInfo::_internal_add_special_bs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  special_bs_.Add(value);
}
inline void CPMsgSceneInfo::add_special_bs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_special_bs(value);
  // @@protoc_insertion_point(field_add:ChinesePoker.CPMsgSceneInfo.special_bs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CPMsgSceneInfo::_internal_special_bs() const {
  return special_bs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CPMsgSceneInfo::special_bs() const {
  // @@protoc_insertion_point(field_list:ChinesePoker.CPMsgSceneInfo.special_bs)
  return _internal_special_bs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CPMsgSceneInfo::_internal_mutable_special_bs() {
  return &special_bs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CPMsgSceneInfo::mutable_special_bs() {
  // @@protoc_insertion_point(field_mutable_list:ChinesePoker.CPMsgSceneInfo.special_bs)
  return _internal_mutable_special_bs();
}

// repeated .ChinesePoker.CPMsgPlayerInfo player_infos = 7;
inline int CPMsgSceneInfo::_internal_player_infos_size() const {
  return player_infos_.size();
}
inline int CPMsgSceneInfo::player_infos_size() const {
  return _internal_player_infos_size();
}
inline void CPMsgSceneInfo::clear_player_infos() {
  player_infos_.Clear();
}
inline ::ChinesePoker::CPMsgPlayerInfo* CPMsgSceneInfo::mutable_player_infos(int index) {
  // @@protoc_insertion_point(field_mutable:ChinesePoker.CPMsgSceneInfo.player_infos)
  return player_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChinesePoker::CPMsgPlayerInfo >*
CPMsgSceneInfo::mutable_player_infos() {
  // @@protoc_insertion_point(field_mutable_list:ChinesePoker.CPMsgSceneInfo.player_infos)
  return &player_infos_;
}
inline const ::ChinesePoker::CPMsgPlayerInfo& CPMsgSceneInfo::_internal_player_infos(int index) const {
  return player_infos_.Get(index);
}
inline const ::ChinesePoker::CPMsgPlayerInfo& CPMsgSceneInfo::player_infos(int index) const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPMsgSceneInfo.player_infos)
  return _internal_player_infos(index);
}
inline ::ChinesePoker::CPMsgPlayerInfo* CPMsgSceneInfo::_internal_add_player_infos() {
  return player_infos_.Add();
}
inline ::ChinesePoker::CPMsgPlayerInfo* CPMsgSceneInfo::add_player_infos() {
  // @@protoc_insertion_point(field_add:ChinesePoker.CPMsgSceneInfo.player_infos)
  return _internal_add_player_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChinesePoker::CPMsgPlayerInfo >&
CPMsgSceneInfo::player_infos() const {
  // @@protoc_insertion_point(field_list:ChinesePoker.CPMsgSceneInfo.player_infos)
  return player_infos_;
}

// -------------------------------------------------------------------

// CPMsgGameStartResp

// .ChinesePoker.CPMsgHandCards handls = 1;
inline bool CPMsgGameStartResp::_internal_has_handls() const {
  return this != internal_default_instance() && handls_ != nullptr;
}
inline bool CPMsgGameStartResp::has_handls() const {
  return _internal_has_handls();
}
inline void CPMsgGameStartResp::clear_handls() {
  if (GetArena() == nullptr && handls_ != nullptr) {
    delete handls_;
  }
  handls_ = nullptr;
}
inline const ::ChinesePoker::CPMsgHandCards& CPMsgGameStartResp::_internal_handls() const {
  const ::ChinesePoker::CPMsgHandCards* p = handls_;
  return p != nullptr ? *p : reinterpret_cast<const ::ChinesePoker::CPMsgHandCards&>(
      ::ChinesePoker::_CPMsgHandCards_default_instance_);
}
inline const ::ChinesePoker::CPMsgHandCards& CPMsgGameStartResp::handls() const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPMsgGameStartResp.handls)
  return _internal_handls();
}
inline void CPMsgGameStartResp::unsafe_arena_set_allocated_handls(
    ::ChinesePoker::CPMsgHandCards* handls) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handls_);
  }
  handls_ = handls;
  if (handls) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ChinesePoker.CPMsgGameStartResp.handls)
}
inline ::ChinesePoker::CPMsgHandCards* CPMsgGameStartResp::release_handls() {
  
  ::ChinesePoker::CPMsgHandCards* temp = handls_;
  handls_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ChinesePoker::CPMsgHandCards* CPMsgGameStartResp::unsafe_arena_release_handls() {
  // @@protoc_insertion_point(field_release:ChinesePoker.CPMsgGameStartResp.handls)
  
  ::ChinesePoker::CPMsgHandCards* temp = handls_;
  handls_ = nullptr;
  return temp;
}
inline ::ChinesePoker::CPMsgHandCards* CPMsgGameStartResp::_internal_mutable_handls() {
  
  if (handls_ == nullptr) {
    auto* p = CreateMaybeMessage<::ChinesePoker::CPMsgHandCards>(GetArena());
    handls_ = p;
  }
  return handls_;
}
inline ::ChinesePoker::CPMsgHandCards* CPMsgGameStartResp::mutable_handls() {
  // @@protoc_insertion_point(field_mutable:ChinesePoker.CPMsgGameStartResp.handls)
  return _internal_mutable_handls();
}
inline void CPMsgGameStartResp::set_allocated_handls(::ChinesePoker::CPMsgHandCards* handls) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete handls_;
  }
  if (handls) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(handls);
    if (message_arena != submessage_arena) {
      handls = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handls, submessage_arena);
    }
    
  } else {
    
  }
  handls_ = handls;
  // @@protoc_insertion_point(field_set_allocated:ChinesePoker.CPMsgGameStartResp.handls)
}

// .ChinesePoker.CPCardStatus card_status = 2;
inline bool CPMsgGameStartResp::_internal_has_card_status() const {
  return this != internal_default_instance() && card_status_ != nullptr;
}
inline bool CPMsgGameStartResp::has_card_status() const {
  return _internal_has_card_status();
}
inline void CPMsgGameStartResp::clear_card_status() {
  if (GetArena() == nullptr && card_status_ != nullptr) {
    delete card_status_;
  }
  card_status_ = nullptr;
}
inline const ::ChinesePoker::CPCardStatus& CPMsgGameStartResp::_internal_card_status() const {
  const ::ChinesePoker::CPCardStatus* p = card_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::ChinesePoker::CPCardStatus&>(
      ::ChinesePoker::_CPCardStatus_default_instance_);
}
inline const ::ChinesePoker::CPCardStatus& CPMsgGameStartResp::card_status() const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPMsgGameStartResp.card_status)
  return _internal_card_status();
}
inline void CPMsgGameStartResp::unsafe_arena_set_allocated_card_status(
    ::ChinesePoker::CPCardStatus* card_status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(card_status_);
  }
  card_status_ = card_status;
  if (card_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ChinesePoker.CPMsgGameStartResp.card_status)
}
inline ::ChinesePoker::CPCardStatus* CPMsgGameStartResp::release_card_status() {
  
  ::ChinesePoker::CPCardStatus* temp = card_status_;
  card_status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ChinesePoker::CPCardStatus* CPMsgGameStartResp::unsafe_arena_release_card_status() {
  // @@protoc_insertion_point(field_release:ChinesePoker.CPMsgGameStartResp.card_status)
  
  ::ChinesePoker::CPCardStatus* temp = card_status_;
  card_status_ = nullptr;
  return temp;
}
inline ::ChinesePoker::CPCardStatus* CPMsgGameStartResp::_internal_mutable_card_status() {
  
  if (card_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ChinesePoker::CPCardStatus>(GetArena());
    card_status_ = p;
  }
  return card_status_;
}
inline ::ChinesePoker::CPCardStatus* CPMsgGameStartResp::mutable_card_status() {
  // @@protoc_insertion_point(field_mutable:ChinesePoker.CPMsgGameStartResp.card_status)
  return _internal_mutable_card_status();
}
inline void CPMsgGameStartResp::set_allocated_card_status(::ChinesePoker::CPCardStatus* card_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete card_status_;
  }
  if (card_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(card_status);
    if (message_arena != submessage_arena) {
      card_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, card_status, submessage_arena);
    }
    
  } else {
    
  }
  card_status_ = card_status;
  // @@protoc_insertion_point(field_set_allocated:ChinesePoker.CPMsgGameStartResp.card_status)
}

// int32 special_type = 3;
inline void CPMsgGameStartResp::clear_special_type() {
  special_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPMsgGameStartResp::_internal_special_type() const {
  return special_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPMsgGameStartResp::special_type() const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPMsgGameStartResp.special_type)
  return _internal_special_type();
}
inline void CPMsgGameStartResp::_internal_set_special_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  special_type_ = value;
}
inline void CPMsgGameStartResp::set_special_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_special_type(value);
  // @@protoc_insertion_point(field_set:ChinesePoker.CPMsgGameStartResp.special_type)
}

// -------------------------------------------------------------------

// CPMsgAction

// int32 type = 1;
inline void CPMsgAction::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPMsgAction::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPMsgAction::type() const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPMsgAction.type)
  return _internal_type();
}
inline void CPMsgAction::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void CPMsgAction::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ChinesePoker.CPMsgAction.type)
}

// int64 pos1 = 2;
inline void CPMsgAction::clear_pos1() {
  pos1_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CPMsgAction::_internal_pos1() const {
  return pos1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CPMsgAction::pos1() const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPMsgAction.pos1)
  return _internal_pos1();
}
inline void CPMsgAction::_internal_set_pos1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  pos1_ = value;
}
inline void CPMsgAction::set_pos1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_pos1(value);
  // @@protoc_insertion_point(field_set:ChinesePoker.CPMsgAction.pos1)
}

// int64 pos2 = 3;
inline void CPMsgAction::clear_pos2() {
  pos2_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CPMsgAction::_internal_pos2() const {
  return pos2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CPMsgAction::pos2() const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPMsgAction.pos2)
  return _internal_pos2();
}
inline void CPMsgAction::_internal_set_pos2(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  pos2_ = value;
}
inline void CPMsgAction::set_pos2(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_pos2(value);
  // @@protoc_insertion_point(field_set:ChinesePoker.CPMsgAction.pos2)
}

// -------------------------------------------------------------------

// CPMsgNotifyActionResp

// .ChinesePoker.CPCardStatus card_status = 1;
inline bool CPMsgNotifyActionResp::_internal_has_card_status() const {
  return this != internal_default_instance() && card_status_ != nullptr;
}
inline bool CPMsgNotifyActionResp::has_card_status() const {
  return _internal_has_card_status();
}
inline void CPMsgNotifyActionResp::clear_card_status() {
  if (GetArena() == nullptr && card_status_ != nullptr) {
    delete card_status_;
  }
  card_status_ = nullptr;
}
inline const ::ChinesePoker::CPCardStatus& CPMsgNotifyActionResp::_internal_card_status() const {
  const ::ChinesePoker::CPCardStatus* p = card_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::ChinesePoker::CPCardStatus&>(
      ::ChinesePoker::_CPCardStatus_default_instance_);
}
inline const ::ChinesePoker::CPCardStatus& CPMsgNotifyActionResp::card_status() const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPMsgNotifyActionResp.card_status)
  return _internal_card_status();
}
inline void CPMsgNotifyActionResp::unsafe_arena_set_allocated_card_status(
    ::ChinesePoker::CPCardStatus* card_status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(card_status_);
  }
  card_status_ = card_status;
  if (card_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ChinesePoker.CPMsgNotifyActionResp.card_status)
}
inline ::ChinesePoker::CPCardStatus* CPMsgNotifyActionResp::release_card_status() {
  
  ::ChinesePoker::CPCardStatus* temp = card_status_;
  card_status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ChinesePoker::CPCardStatus* CPMsgNotifyActionResp::unsafe_arena_release_card_status() {
  // @@protoc_insertion_point(field_release:ChinesePoker.CPMsgNotifyActionResp.card_status)
  
  ::ChinesePoker::CPCardStatus* temp = card_status_;
  card_status_ = nullptr;
  return temp;
}
inline ::ChinesePoker::CPCardStatus* CPMsgNotifyActionResp::_internal_mutable_card_status() {
  
  if (card_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ChinesePoker::CPCardStatus>(GetArena());
    card_status_ = p;
  }
  return card_status_;
}
inline ::ChinesePoker::CPCardStatus* CPMsgNotifyActionResp::mutable_card_status() {
  // @@protoc_insertion_point(field_mutable:ChinesePoker.CPMsgNotifyActionResp.card_status)
  return _internal_mutable_card_status();
}
inline void CPMsgNotifyActionResp::set_allocated_card_status(::ChinesePoker::CPCardStatus* card_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete card_status_;
  }
  if (card_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(card_status);
    if (message_arena != submessage_arena) {
      card_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, card_status, submessage_arena);
    }
    
  } else {
    
  }
  card_status_ = card_status;
  // @@protoc_insertion_point(field_set_allocated:ChinesePoker.CPMsgNotifyActionResp.card_status)
}

// int32 special_type = 2;
inline void CPMsgNotifyActionResp::clear_special_type() {
  special_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPMsgNotifyActionResp::_internal_special_type() const {
  return special_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPMsgNotifyActionResp::special_type() const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPMsgNotifyActionResp.special_type)
  return _internal_special_type();
}
inline void CPMsgNotifyActionResp::_internal_set_special_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  special_type_ = value;
}
inline void CPMsgNotifyActionResp::set_special_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_special_type(value);
  // @@protoc_insertion_point(field_set:ChinesePoker.CPMsgNotifyActionResp.special_type)
}

// -------------------------------------------------------------------

// CPCardResult

// int32 chair_id = 1;
inline void CPCardResult::clear_chair_id() {
  chair_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPCardResult::_internal_chair_id() const {
  return chair_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPCardResult::chair_id() const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPCardResult.chair_id)
  return _internal_chair_id();
}
inline void CPCardResult::_internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_id_ = value;
}
inline void CPCardResult::set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_id(value);
  // @@protoc_insertion_point(field_set:ChinesePoker.CPCardResult.chair_id)
}

// repeated int64 score = 2;
inline int CPCardResult::_internal_score_size() const {
  return score_.size();
}
inline int CPCardResult::score_size() const {
  return _internal_score_size();
}
inline void CPCardResult::clear_score() {
  score_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CPCardResult::_internal_score(int index) const {
  return score_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CPCardResult::score(int index) const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPCardResult.score)
  return _internal_score(index);
}
inline void CPCardResult::set_score(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  score_.Set(index, value);
  // @@protoc_insertion_point(field_set:ChinesePoker.CPCardResult.score)
}
inline void CPCardResult::_internal_add_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  score_.Add(value);
}
inline void CPCardResult::add_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_score(value);
  // @@protoc_insertion_point(field_add:ChinesePoker.CPCardResult.score)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
CPCardResult::_internal_score() const {
  return score_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
CPCardResult::score() const {
  // @@protoc_insertion_point(field_list:ChinesePoker.CPCardResult.score)
  return _internal_score();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
CPCardResult::_internal_mutable_score() {
  return &score_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
CPCardResult::mutable_score() {
  // @@protoc_insertion_point(field_mutable_list:ChinesePoker.CPCardResult.score)
  return _internal_mutable_score();
}

// repeated bool win = 3;
inline int CPCardResult::_internal_win_size() const {
  return win_.size();
}
inline int CPCardResult::win_size() const {
  return _internal_win_size();
}
inline void CPCardResult::clear_win() {
  win_.Clear();
}
inline bool CPCardResult::_internal_win(int index) const {
  return win_.Get(index);
}
inline bool CPCardResult::win(int index) const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPCardResult.win)
  return _internal_win(index);
}
inline void CPCardResult::set_win(int index, bool value) {
  win_.Set(index, value);
  // @@protoc_insertion_point(field_set:ChinesePoker.CPCardResult.win)
}
inline void CPCardResult::_internal_add_win(bool value) {
  win_.Add(value);
}
inline void CPCardResult::add_win(bool value) {
  _internal_add_win(value);
  // @@protoc_insertion_point(field_add:ChinesePoker.CPCardResult.win)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
CPCardResult::_internal_win() const {
  return win_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
CPCardResult::win() const {
  // @@protoc_insertion_point(field_list:ChinesePoker.CPCardResult.win)
  return _internal_win();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
CPCardResult::_internal_mutable_win() {
  return &win_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
CPCardResult::mutable_win() {
  // @@protoc_insertion_point(field_mutable_list:ChinesePoker.CPCardResult.win)
  return _internal_mutable_win();
}

// bool boom = 4;
inline void CPCardResult::clear_boom() {
  boom_ = false;
}
inline bool CPCardResult::_internal_boom() const {
  return boom_;
}
inline bool CPCardResult::boom() const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPCardResult.boom)
  return _internal_boom();
}
inline void CPCardResult::_internal_set_boom(bool value) {
  
  boom_ = value;
}
inline void CPCardResult::set_boom(bool value) {
  _internal_set_boom(value);
  // @@protoc_insertion_point(field_set:ChinesePoker.CPCardResult.boom)
}

// int64 score_total = 5;
inline void CPCardResult::clear_score_total() {
  score_total_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CPCardResult::_internal_score_total() const {
  return score_total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CPCardResult::score_total() const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPCardResult.score_total)
  return _internal_score_total();
}
inline void CPCardResult::_internal_set_score_total(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  score_total_ = value;
}
inline void CPCardResult::set_score_total(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_score_total(value);
  // @@protoc_insertion_point(field_set:ChinesePoker.CPCardResult.score_total)
}

// repeated int32 gunk_chair = 6;
inline int CPCardResult::_internal_gunk_chair_size() const {
  return gunk_chair_.size();
}
inline int CPCardResult::gunk_chair_size() const {
  return _internal_gunk_chair_size();
}
inline void CPCardResult::clear_gunk_chair() {
  gunk_chair_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPCardResult::_internal_gunk_chair(int index) const {
  return gunk_chair_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPCardResult::gunk_chair(int index) const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPCardResult.gunk_chair)
  return _internal_gunk_chair(index);
}
inline void CPCardResult::set_gunk_chair(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  gunk_chair_.Set(index, value);
  // @@protoc_insertion_point(field_set:ChinesePoker.CPCardResult.gunk_chair)
}
inline void CPCardResult::_internal_add_gunk_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  gunk_chair_.Add(value);
}
inline void CPCardResult::add_gunk_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_gunk_chair(value);
  // @@protoc_insertion_point(field_add:ChinesePoker.CPCardResult.gunk_chair)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CPCardResult::_internal_gunk_chair() const {
  return gunk_chair_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CPCardResult::gunk_chair() const {
  // @@protoc_insertion_point(field_list:ChinesePoker.CPCardResult.gunk_chair)
  return _internal_gunk_chair();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CPCardResult::_internal_mutable_gunk_chair() {
  return &gunk_chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CPCardResult::mutable_gunk_chair() {
  // @@protoc_insertion_point(field_mutable_list:ChinesePoker.CPCardResult.gunk_chair)
  return _internal_mutable_gunk_chair();
}

// -------------------------------------------------------------------

// CPMsgGameResult

// repeated int64 game_tax = 1;
inline int CPMsgGameResult::_internal_game_tax_size() const {
  return game_tax_.size();
}
inline int CPMsgGameResult::game_tax_size() const {
  return _internal_game_tax_size();
}
inline void CPMsgGameResult::clear_game_tax() {
  game_tax_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CPMsgGameResult::_internal_game_tax(int index) const {
  return game_tax_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CPMsgGameResult::game_tax(int index) const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPMsgGameResult.game_tax)
  return _internal_game_tax(index);
}
inline void CPMsgGameResult::set_game_tax(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  game_tax_.Set(index, value);
  // @@protoc_insertion_point(field_set:ChinesePoker.CPMsgGameResult.game_tax)
}
inline void CPMsgGameResult::_internal_add_game_tax(::PROTOBUF_NAMESPACE_ID::int64 value) {
  game_tax_.Add(value);
}
inline void CPMsgGameResult::add_game_tax(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_game_tax(value);
  // @@protoc_insertion_point(field_add:ChinesePoker.CPMsgGameResult.game_tax)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
CPMsgGameResult::_internal_game_tax() const {
  return game_tax_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
CPMsgGameResult::game_tax() const {
  // @@protoc_insertion_point(field_list:ChinesePoker.CPMsgGameResult.game_tax)
  return _internal_game_tax();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
CPMsgGameResult::_internal_mutable_game_tax() {
  return &game_tax_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
CPMsgGameResult::mutable_game_tax() {
  // @@protoc_insertion_point(field_mutable_list:ChinesePoker.CPMsgGameResult.game_tax)
  return _internal_mutable_game_tax();
}

// repeated int64 game_score = 2;
inline int CPMsgGameResult::_internal_game_score_size() const {
  return game_score_.size();
}
inline int CPMsgGameResult::game_score_size() const {
  return _internal_game_score_size();
}
inline void CPMsgGameResult::clear_game_score() {
  game_score_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CPMsgGameResult::_internal_game_score(int index) const {
  return game_score_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CPMsgGameResult::game_score(int index) const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPMsgGameResult.game_score)
  return _internal_game_score(index);
}
inline void CPMsgGameResult::set_game_score(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  game_score_.Set(index, value);
  // @@protoc_insertion_point(field_set:ChinesePoker.CPMsgGameResult.game_score)
}
inline void CPMsgGameResult::_internal_add_game_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  game_score_.Add(value);
}
inline void CPMsgGameResult::add_game_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_game_score(value);
  // @@protoc_insertion_point(field_add:ChinesePoker.CPMsgGameResult.game_score)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
CPMsgGameResult::_internal_game_score() const {
  return game_score_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
CPMsgGameResult::game_score() const {
  // @@protoc_insertion_point(field_list:ChinesePoker.CPMsgGameResult.game_score)
  return _internal_game_score();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
CPMsgGameResult::_internal_mutable_game_score() {
  return &game_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
CPMsgGameResult::mutable_game_score() {
  // @@protoc_insertion_point(field_mutable_list:ChinesePoker.CPMsgGameResult.game_score)
  return _internal_mutable_game_score();
}

// repeated .ChinesePoker.CPCardStatus card_status = 3;
inline int CPMsgGameResult::_internal_card_status_size() const {
  return card_status_.size();
}
inline int CPMsgGameResult::card_status_size() const {
  return _internal_card_status_size();
}
inline void CPMsgGameResult::clear_card_status() {
  card_status_.Clear();
}
inline ::ChinesePoker::CPCardStatus* CPMsgGameResult::mutable_card_status(int index) {
  // @@protoc_insertion_point(field_mutable:ChinesePoker.CPMsgGameResult.card_status)
  return card_status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChinesePoker::CPCardStatus >*
CPMsgGameResult::mutable_card_status() {
  // @@protoc_insertion_point(field_mutable_list:ChinesePoker.CPMsgGameResult.card_status)
  return &card_status_;
}
inline const ::ChinesePoker::CPCardStatus& CPMsgGameResult::_internal_card_status(int index) const {
  return card_status_.Get(index);
}
inline const ::ChinesePoker::CPCardStatus& CPMsgGameResult::card_status(int index) const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPMsgGameResult.card_status)
  return _internal_card_status(index);
}
inline ::ChinesePoker::CPCardStatus* CPMsgGameResult::_internal_add_card_status() {
  return card_status_.Add();
}
inline ::ChinesePoker::CPCardStatus* CPMsgGameResult::add_card_status() {
  // @@protoc_insertion_point(field_add:ChinesePoker.CPMsgGameResult.card_status)
  return _internal_add_card_status();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChinesePoker::CPCardStatus >&
CPMsgGameResult::card_status() const {
  // @@protoc_insertion_point(field_list:ChinesePoker.CPMsgGameResult.card_status)
  return card_status_;
}

// repeated int32 special_type = 4;
inline int CPMsgGameResult::_internal_special_type_size() const {
  return special_type_.size();
}
inline int CPMsgGameResult::special_type_size() const {
  return _internal_special_type_size();
}
inline void CPMsgGameResult::clear_special_type() {
  special_type_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPMsgGameResult::_internal_special_type(int index) const {
  return special_type_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPMsgGameResult::special_type(int index) const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPMsgGameResult.special_type)
  return _internal_special_type(index);
}
inline void CPMsgGameResult::set_special_type(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  special_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:ChinesePoker.CPMsgGameResult.special_type)
}
inline void CPMsgGameResult::_internal_add_special_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  special_type_.Add(value);
}
inline void CPMsgGameResult::add_special_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_special_type(value);
  // @@protoc_insertion_point(field_add:ChinesePoker.CPMsgGameResult.special_type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CPMsgGameResult::_internal_special_type() const {
  return special_type_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CPMsgGameResult::special_type() const {
  // @@protoc_insertion_point(field_list:ChinesePoker.CPMsgGameResult.special_type)
  return _internal_special_type();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CPMsgGameResult::_internal_mutable_special_type() {
  return &special_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CPMsgGameResult::mutable_special_type() {
  // @@protoc_insertion_point(field_mutable_list:ChinesePoker.CPMsgGameResult.special_type)
  return _internal_mutable_special_type();
}

// repeated .ChinesePoker.CPCardResult card_result = 5;
inline int CPMsgGameResult::_internal_card_result_size() const {
  return card_result_.size();
}
inline int CPMsgGameResult::card_result_size() const {
  return _internal_card_result_size();
}
inline void CPMsgGameResult::clear_card_result() {
  card_result_.Clear();
}
inline ::ChinesePoker::CPCardResult* CPMsgGameResult::mutable_card_result(int index) {
  // @@protoc_insertion_point(field_mutable:ChinesePoker.CPMsgGameResult.card_result)
  return card_result_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChinesePoker::CPCardResult >*
CPMsgGameResult::mutable_card_result() {
  // @@protoc_insertion_point(field_mutable_list:ChinesePoker.CPMsgGameResult.card_result)
  return &card_result_;
}
inline const ::ChinesePoker::CPCardResult& CPMsgGameResult::_internal_card_result(int index) const {
  return card_result_.Get(index);
}
inline const ::ChinesePoker::CPCardResult& CPMsgGameResult::card_result(int index) const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPMsgGameResult.card_result)
  return _internal_card_result(index);
}
inline ::ChinesePoker::CPCardResult* CPMsgGameResult::_internal_add_card_result() {
  return card_result_.Add();
}
inline ::ChinesePoker::CPCardResult* CPMsgGameResult::add_card_result() {
  // @@protoc_insertion_point(field_add:ChinesePoker.CPMsgGameResult.card_result)
  return _internal_add_card_result();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChinesePoker::CPCardResult >&
CPMsgGameResult::card_result() const {
  // @@protoc_insertion_point(field_list:ChinesePoker.CPMsgGameResult.card_result)
  return card_result_;
}

// repeated .ChinesePoker.CPMsgHandCards player_hands = 6;
inline int CPMsgGameResult::_internal_player_hands_size() const {
  return player_hands_.size();
}
inline int CPMsgGameResult::player_hands_size() const {
  return _internal_player_hands_size();
}
inline void CPMsgGameResult::clear_player_hands() {
  player_hands_.Clear();
}
inline ::ChinesePoker::CPMsgHandCards* CPMsgGameResult::mutable_player_hands(int index) {
  // @@protoc_insertion_point(field_mutable:ChinesePoker.CPMsgGameResult.player_hands)
  return player_hands_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChinesePoker::CPMsgHandCards >*
CPMsgGameResult::mutable_player_hands() {
  // @@protoc_insertion_point(field_mutable_list:ChinesePoker.CPMsgGameResult.player_hands)
  return &player_hands_;
}
inline const ::ChinesePoker::CPMsgHandCards& CPMsgGameResult::_internal_player_hands(int index) const {
  return player_hands_.Get(index);
}
inline const ::ChinesePoker::CPMsgHandCards& CPMsgGameResult::player_hands(int index) const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPMsgGameResult.player_hands)
  return _internal_player_hands(index);
}
inline ::ChinesePoker::CPMsgHandCards* CPMsgGameResult::_internal_add_player_hands() {
  return player_hands_.Add();
}
inline ::ChinesePoker::CPMsgHandCards* CPMsgGameResult::add_player_hands() {
  // @@protoc_insertion_point(field_add:ChinesePoker.CPMsgGameResult.player_hands)
  return _internal_add_player_hands();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChinesePoker::CPMsgHandCards >&
CPMsgGameResult::player_hands() const {
  // @@protoc_insertion_point(field_list:ChinesePoker.CPMsgGameResult.player_hands)
  return player_hands_;
}

// int32 all_gunk_chair = 7;
inline void CPMsgGameResult::clear_all_gunk_chair() {
  all_gunk_chair_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPMsgGameResult::_internal_all_gunk_chair() const {
  return all_gunk_chair_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPMsgGameResult::all_gunk_chair() const {
  // @@protoc_insertion_point(field_get:ChinesePoker.CPMsgGameResult.all_gunk_chair)
  return _internal_all_gunk_chair();
}
inline void CPMsgGameResult::_internal_set_all_gunk_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  all_gunk_chair_ = value;
}
inline void CPMsgGameResult::set_all_gunk_chair(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_all_gunk_chair(value);
  // @@protoc_insertion_point(field_set:ChinesePoker.CPMsgGameResult.all_gunk_chair)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ChinesePoker

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ChinesePoker::ECPGameState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ChinesePoker::ECPGameState>() {
  return ::ChinesePoker::ECPGameState_descriptor();
}
template <> struct is_proto_enum< ::ChinesePoker::ECPPlayerState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ChinesePoker::ECPPlayerState>() {
  return ::ChinesePoker::ECPPlayerState_descriptor();
}
template <> struct is_proto_enum< ::ChinesePoker::ECPCardType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ChinesePoker::ECPCardType>() {
  return ::ChinesePoker::ECPCardType_descriptor();
}
template <> struct is_proto_enum< ::ChinesePoker::ECPMsgIDSubGame> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ChinesePoker::ECPMsgIDSubGame>() {
  return ::ChinesePoker::ECPMsgIDSubGame_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ChinesePoker_2eproto
