// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FingerGuess.proto

#include "FingerGuess.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace FingerGuess {
class MsgSceneInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgSceneInfo> _instance;
} _MsgSceneInfo_default_instance_;
class MsgResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgResult> _instance;
} _MsgResult_default_instance_;
}  // namespace FingerGuess
static void InitDefaultsscc_info_MsgResult_FingerGuess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::FingerGuess::_MsgResult_default_instance_;
    new (ptr) ::FingerGuess::MsgResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgResult_FingerGuess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgResult_FingerGuess_2eproto}, {}};

static void InitDefaultsscc_info_MsgSceneInfo_FingerGuess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::FingerGuess::_MsgSceneInfo_default_instance_;
    new (ptr) ::FingerGuess::MsgSceneInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgSceneInfo_FingerGuess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgSceneInfo_FingerGuess_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_FingerGuess_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_FingerGuess_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_FingerGuess_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_FingerGuess_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FingerGuess::MsgSceneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FingerGuess::MsgSceneInfo, room_id_),
  PROTOBUF_FIELD_OFFSET(::FingerGuess::MsgSceneInfo, bet_),
  PROTOBUF_FIELD_OFFSET(::FingerGuess::MsgSceneInfo, cur_bet_),
  PROTOBUF_FIELD_OFFSET(::FingerGuess::MsgSceneInfo, password_),
  PROTOBUF_FIELD_OFFSET(::FingerGuess::MsgSceneInfo, min_bet_),
  PROTOBUF_FIELD_OFFSET(::FingerGuess::MsgSceneInfo, max_bet_),
  PROTOBUF_FIELD_OFFSET(::FingerGuess::MsgSceneInfo, house_owner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FingerGuess::MsgResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FingerGuess::MsgResult, result_),
  PROTOBUF_FIELD_OFFSET(::FingerGuess::MsgResult, gold_),
  PROTOBUF_FIELD_OFFSET(::FingerGuess::MsgResult, banker_result_),
  PROTOBUF_FIELD_OFFSET(::FingerGuess::MsgResult, player_result_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::FingerGuess::MsgSceneInfo)},
  { 12, -1, sizeof(::FingerGuess::MsgResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FingerGuess::_MsgSceneInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FingerGuess::_MsgResult_default_instance_),
};

const char descriptor_table_protodef_FingerGuess_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021FingerGuess.proto\022\013FingerGuess\"\206\001\n\014Msg"
  "SceneInfo\022\017\n\007room_id\030\001 \001(\005\022\013\n\003bet\030\002 \003(\005\022"
  "\017\n\007cur_bet\030\003 \001(\005\022\020\n\010password\030\004 \001(\t\022\017\n\007mi"
  "n_bet\030\005 \001(\005\022\017\n\007max_bet\030\006 \001(\003\022\023\n\013house_ow"
  "ner\030\007 \001(\010\"W\n\tMsgResult\022\016\n\006result\030\001 \001(\005\022\014"
  "\n\004gold\030\002 \001(\003\022\025\n\rbanker_result\030\003 \001(\005\022\025\n\rp"
  "layer_result\030\004 \001(\005*\216\003\n\rEMsgIDSubGame\022\025\n\021"
  "MsgIDSubGame_Null\020\000\022\034\n\030MsgIDSubGame_Play"
  "erReady\020\001\022 \n\034MsgIDSubGame_PlayerReadyRes"
  "p\020\002\022 \n\034MsgIDSubGame_BankerChangeBet\020\003\022$\n"
  " MsgIDSubGame_BankerChangeBetResp\020\004\022!\n\035M"
  "sgIDSubGame_PlayerConfirmBet\020\005\022%\n!MsgIDS"
  "ubGame_PlayerConfirmBetResp\020\006\022\032\n\026MsgIDSu"
  "bGame_StartGame\020\007\022\033\n\027MsgIDSubGame_Result"
  "Resp\020\010\022\033\n\027MsgIDSubGame_KickPlayer\020\t\022\034\n\030M"
  "sgIDSubGame_CancelReady\020\n\022 \n\034MsgIDSubGam"
  "e_CancelReadyResp\020\013b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_FingerGuess_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_FingerGuess_2eproto_sccs[2] = {
  &scc_info_MsgResult_FingerGuess_2eproto.base,
  &scc_info_MsgSceneInfo_FingerGuess_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_FingerGuess_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FingerGuess_2eproto = {
  false, false, descriptor_table_protodef_FingerGuess_2eproto, "FingerGuess.proto", 667,
  &descriptor_table_FingerGuess_2eproto_once, descriptor_table_FingerGuess_2eproto_sccs, descriptor_table_FingerGuess_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_FingerGuess_2eproto::offsets,
  file_level_metadata_FingerGuess_2eproto, 2, file_level_enum_descriptors_FingerGuess_2eproto, file_level_service_descriptors_FingerGuess_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_FingerGuess_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_FingerGuess_2eproto)), true);
namespace FingerGuess {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDSubGame_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_FingerGuess_2eproto);
  return file_level_enum_descriptors_FingerGuess_2eproto[0];
}
bool EMsgIDSubGame_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MsgSceneInfo::_Internal {
 public:
};

MsgSceneInfo::MsgSceneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bet_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FingerGuess.MsgSceneInfo)
}
MsgSceneInfo::MsgSceneInfo(const MsgSceneInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bet_(from.bet_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArena());
  }
  ::memcpy(&room_id_, &from.room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&house_owner_) -
    reinterpret_cast<char*>(&room_id_)) + sizeof(house_owner_));
  // @@protoc_insertion_point(copy_constructor:FingerGuess.MsgSceneInfo)
}

void MsgSceneInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgSceneInfo_FingerGuess_2eproto.base);
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&room_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&house_owner_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(house_owner_));
}

MsgSceneInfo::~MsgSceneInfo() {
  // @@protoc_insertion_point(destructor:FingerGuess.MsgSceneInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgSceneInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgSceneInfo::ArenaDtor(void* object) {
  MsgSceneInfo* _this = reinterpret_cast< MsgSceneInfo* >(object);
  (void)_this;
}
void MsgSceneInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgSceneInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgSceneInfo& MsgSceneInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgSceneInfo_FingerGuess_2eproto.base);
  return *internal_default_instance();
}


void MsgSceneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:FingerGuess.MsgSceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bet_.Clear();
  password_.ClearToEmpty();
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&house_owner_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(house_owner_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgSceneInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 room_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 bet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bet(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_bet(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cur_bet = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cur_bet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FingerGuess.MsgSceneInfo.password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_bet = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          min_bet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 max_bet = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          max_bet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool house_owner = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          house_owner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgSceneInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FingerGuess.MsgSceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 room_id = 1;
  if (this->room_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_room_id(), target);
  }

  // repeated int32 bet = 2;
  {
    int byte_size = _bet_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_bet(), byte_size, target);
    }
  }

  // int32 cur_bet = 3;
  if (this->cur_bet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_cur_bet(), target);
  }

  // string password = 4;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FingerGuess.MsgSceneInfo.password");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_password(), target);
  }

  // int32 min_bet = 5;
  if (this->min_bet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_min_bet(), target);
  }

  // int64 max_bet = 6;
  if (this->max_bet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_max_bet(), target);
  }

  // bool house_owner = 7;
  if (this->house_owner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_house_owner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FingerGuess.MsgSceneInfo)
  return target;
}

size_t MsgSceneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FingerGuess.MsgSceneInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 bet = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bet_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bet_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string password = 4;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // int32 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_room_id());
  }

  // int32 cur_bet = 3;
  if (this->cur_bet() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur_bet());
  }

  // int64 max_bet = 6;
  if (this->max_bet() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max_bet());
  }

  // int32 min_bet = 5;
  if (this->min_bet() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min_bet());
  }

  // bool house_owner = 7;
  if (this->house_owner() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgSceneInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FingerGuess.MsgSceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgSceneInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgSceneInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FingerGuess.MsgSceneInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FingerGuess.MsgSceneInfo)
    MergeFrom(*source);
  }
}

void MsgSceneInfo::MergeFrom(const MsgSceneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FingerGuess.MsgSceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bet_.MergeFrom(from.bet_);
  if (from.password().size() > 0) {
    _internal_set_password(from._internal_password());
  }
  if (from.room_id() != 0) {
    _internal_set_room_id(from._internal_room_id());
  }
  if (from.cur_bet() != 0) {
    _internal_set_cur_bet(from._internal_cur_bet());
  }
  if (from.max_bet() != 0) {
    _internal_set_max_bet(from._internal_max_bet());
  }
  if (from.min_bet() != 0) {
    _internal_set_min_bet(from._internal_min_bet());
  }
  if (from.house_owner() != 0) {
    _internal_set_house_owner(from._internal_house_owner());
  }
}

void MsgSceneInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FingerGuess.MsgSceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSceneInfo::CopyFrom(const MsgSceneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FingerGuess.MsgSceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSceneInfo::IsInitialized() const {
  return true;
}

void MsgSceneInfo::InternalSwap(MsgSceneInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bet_.InternalSwap(&other->bet_);
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgSceneInfo, house_owner_)
      + sizeof(MsgSceneInfo::house_owner_)
      - PROTOBUF_FIELD_OFFSET(MsgSceneInfo, room_id_)>(
          reinterpret_cast<char*>(&room_id_),
          reinterpret_cast<char*>(&other->room_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgSceneInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgResult::_Internal {
 public:
};

MsgResult::MsgResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FingerGuess.MsgResult)
}
MsgResult::MsgResult(const MsgResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gold_, &from.gold_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_result_) -
    reinterpret_cast<char*>(&gold_)) + sizeof(player_result_));
  // @@protoc_insertion_point(copy_constructor:FingerGuess.MsgResult)
}

void MsgResult::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gold_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&player_result_) -
      reinterpret_cast<char*>(&gold_)) + sizeof(player_result_));
}

MsgResult::~MsgResult() {
  // @@protoc_insertion_point(destructor:FingerGuess.MsgResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgResult::ArenaDtor(void* object) {
  MsgResult* _this = reinterpret_cast< MsgResult* >(object);
  (void)_this;
}
void MsgResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgResult& MsgResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgResult_FingerGuess_2eproto.base);
  return *internal_default_instance();
}


void MsgResult::Clear() {
// @@protoc_insertion_point(message_clear_start:FingerGuess.MsgResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_result_) -
      reinterpret_cast<char*>(&gold_)) + sizeof(player_result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 banker_result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          banker_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 player_result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          player_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FingerGuess.MsgResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // int64 gold = 2;
  if (this->gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_gold(), target);
  }

  // int32 banker_result = 3;
  if (this->banker_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_banker_result(), target);
  }

  // int32 player_result = 4;
  if (this->player_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_player_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FingerGuess.MsgResult)
  return target;
}

size_t MsgResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FingerGuess.MsgResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 gold = 2;
  if (this->gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_gold());
  }

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  // int32 banker_result = 3;
  if (this->banker_result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_banker_result());
  }

  // int32 player_result = 4;
  if (this->player_result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FingerGuess.MsgResult)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FingerGuess.MsgResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FingerGuess.MsgResult)
    MergeFrom(*source);
  }
}

void MsgResult::MergeFrom(const MsgResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FingerGuess.MsgResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.banker_result() != 0) {
    _internal_set_banker_result(from._internal_banker_result());
  }
  if (from.player_result() != 0) {
    _internal_set_player_result(from._internal_player_result());
  }
}

void MsgResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FingerGuess.MsgResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgResult::CopyFrom(const MsgResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FingerGuess.MsgResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgResult::IsInitialized() const {
  return true;
}

void MsgResult::InternalSwap(MsgResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgResult, player_result_)
      + sizeof(MsgResult::player_result_)
      - PROTOBUF_FIELD_OFFSET(MsgResult, gold_)>(
          reinterpret_cast<char*>(&gold_),
          reinterpret_cast<char*>(&other->gold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace FingerGuess
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::FingerGuess::MsgSceneInfo* Arena::CreateMaybeMessage< ::FingerGuess::MsgSceneInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FingerGuess::MsgSceneInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::FingerGuess::MsgResult* Arena::CreateMaybeMessage< ::FingerGuess::MsgResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FingerGuess::MsgResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
