// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChinaChess.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ChinaChess_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ChinaChess_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ChinaChess_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ChinaChess_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ChinaChess_2eproto;
namespace ChinaChess {
class CMD_Chess_MOVE_CHESS;
class CMD_Chess_MOVE_CHESSDefaultTypeInternal;
extern CMD_Chess_MOVE_CHESSDefaultTypeInternal _CMD_Chess_MOVE_CHESS_default_instance_;
class CMD_Common;
class CMD_CommonDefaultTypeInternal;
extern CMD_CommonDefaultTypeInternal _CMD_Common_default_instance_;
class CMD_Make_Rule;
class CMD_Make_RuleDefaultTypeInternal;
extern CMD_Make_RuleDefaultTypeInternal _CMD_Make_Rule_default_instance_;
class Chess_Manual;
class Chess_ManualDefaultTypeInternal;
extern Chess_ManualDefaultTypeInternal _Chess_Manual_default_instance_;
class Chess_Manual_Item;
class Chess_Manual_ItemDefaultTypeInternal;
extern Chess_Manual_ItemDefaultTypeInternal _Chess_Manual_Item_default_instance_;
class GameEnd;
class GameEndDefaultTypeInternal;
extern GameEndDefaultTypeInternal _GameEnd_default_instance_;
class Notify_Timer;
class Notify_TimerDefaultTypeInternal;
extern Notify_TimerDefaultTypeInternal _Notify_Timer_default_instance_;
class RegretResult;
class RegretResultDefaultTypeInternal;
extern RegretResultDefaultTypeInternal _RegretResult_default_instance_;
class SC_SceneInfo;
class SC_SceneInfoDefaultTypeInternal;
extern SC_SceneInfoDefaultTypeInternal _SC_SceneInfo_default_instance_;
class Scene_Chess;
class Scene_ChessDefaultTypeInternal;
extern Scene_ChessDefaultTypeInternal _Scene_Chess_default_instance_;
class Scene_ChessItem;
class Scene_ChessItemDefaultTypeInternal;
extern Scene_ChessItemDefaultTypeInternal _Scene_ChessItem_default_instance_;
class Scene_Detail;
class Scene_DetailDefaultTypeInternal;
extern Scene_DetailDefaultTypeInternal _Scene_Detail_default_instance_;
class Scene_GameRuleInfo;
class Scene_GameRuleInfoDefaultTypeInternal;
extern Scene_GameRuleInfoDefaultTypeInternal _Scene_GameRuleInfo_default_instance_;
}  // namespace ChinaChess
PROTOBUF_NAMESPACE_OPEN
template<> ::ChinaChess::CMD_Chess_MOVE_CHESS* Arena::CreateMaybeMessage<::ChinaChess::CMD_Chess_MOVE_CHESS>(Arena*);
template<> ::ChinaChess::CMD_Common* Arena::CreateMaybeMessage<::ChinaChess::CMD_Common>(Arena*);
template<> ::ChinaChess::CMD_Make_Rule* Arena::CreateMaybeMessage<::ChinaChess::CMD_Make_Rule>(Arena*);
template<> ::ChinaChess::Chess_Manual* Arena::CreateMaybeMessage<::ChinaChess::Chess_Manual>(Arena*);
template<> ::ChinaChess::Chess_Manual_Item* Arena::CreateMaybeMessage<::ChinaChess::Chess_Manual_Item>(Arena*);
template<> ::ChinaChess::GameEnd* Arena::CreateMaybeMessage<::ChinaChess::GameEnd>(Arena*);
template<> ::ChinaChess::Notify_Timer* Arena::CreateMaybeMessage<::ChinaChess::Notify_Timer>(Arena*);
template<> ::ChinaChess::RegretResult* Arena::CreateMaybeMessage<::ChinaChess::RegretResult>(Arena*);
template<> ::ChinaChess::SC_SceneInfo* Arena::CreateMaybeMessage<::ChinaChess::SC_SceneInfo>(Arena*);
template<> ::ChinaChess::Scene_Chess* Arena::CreateMaybeMessage<::ChinaChess::Scene_Chess>(Arena*);
template<> ::ChinaChess::Scene_ChessItem* Arena::CreateMaybeMessage<::ChinaChess::Scene_ChessItem>(Arena*);
template<> ::ChinaChess::Scene_Detail* Arena::CreateMaybeMessage<::ChinaChess::Scene_Detail>(Arena*);
template<> ::ChinaChess::Scene_GameRuleInfo* Arena::CreateMaybeMessage<::ChinaChess::Scene_GameRuleInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ChinaChess {

enum EMsgIDSubGame : int {
  CMD_Chess_SUB_C_REGRET_REQ = 0,
  CMD_Chess_SUB_C_REGRET_ANSWER = 1,
  CMD_Chess_SUB_C_GIVEUP_REQ = 2,
  CMD_Chess_SUB_C_PEACE_REQ = 3,
  CMD_Chess_SUB_C_PEACE_ANSWER = 4,
  CMD_Chess_SUB_C_MOVE_CHESS = 5,
  CMD_Chess_SUB_C_KICK_PLAYER = 6,
  CMD_Chess_SUB_C_SET_RULE = 7,
  CMD_Chess_SUB_C_MAKE_RULE = 8,
  CMD_Chess_SUB_C_NOTIFY_READY = 9,
  CMD_Chess_SUB_C_NOTIFY_START = 10,
  CMD_Chess_SUB_C_CONTINUE = 11,
  CMD_Chess_SUB_S_GAME_START = 12,
  CMD_Chess_SUB_S_MOVE_CHESS = 13,
  CMD_Chess_SUB_S_REGRET_REQ = 14,
  CMD_Chess_SUB_S_REGRET_FAILE = 15,
  CMD_Chess_SUB_S_REGRET_RESULT = 16,
  CMD_Chess_SUB_S_PEACE_REQ = 17,
  CMD_Chess_SUB_S_PEACE_ANSWER = 18,
  CMD_Chess_SUB_S_GAME_END = 19,
  CMD_Chess_SUB_S_CHESS_MANUAL = 20,
  CMD_Chess_SUB_S_REQ_SET_RULE = 21,
  CMD_Chess_SUB_S_REQ_AGREE_RULE = 22,
  CMD_Chess_SUB_S_KICK_PLAYER = 23,
  CMD_Chess_SUB_S_NOTIFY_TIMER = 24,
  CMD_Chess_SUB_S_NOTIFY_ROOM_OWNER = 25,
  CMD_Chess_SUB_S_NOTIFY_SET_RULE = 26,
  CMD_Chess_SUB_S_SET_RULE = 27,
  CMD_Chess_SUB_S_MAKE_RULE = 28,
  CMD_Chess_SUB_S_NOTIFY_READY = 29,
  CMD_Chess_SUB_S_NOTIFY_START = 30,
  CMD_Chess_SUB_S_CONTINUE = 31,
  EMsgIDSubGame_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EMsgIDSubGame_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EMsgIDSubGame_IsValid(int value);
constexpr EMsgIDSubGame EMsgIDSubGame_MIN = CMD_Chess_SUB_C_REGRET_REQ;
constexpr EMsgIDSubGame EMsgIDSubGame_MAX = CMD_Chess_SUB_S_CONTINUE;
constexpr int EMsgIDSubGame_ARRAYSIZE = EMsgIDSubGame_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDSubGame_descriptor();
template<typename T>
inline const std::string& EMsgIDSubGame_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EMsgIDSubGame>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EMsgIDSubGame_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EMsgIDSubGame_descriptor(), enum_t_value);
}
inline bool EMsgIDSubGame_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EMsgIDSubGame* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EMsgIDSubGame>(
    EMsgIDSubGame_descriptor(), name, value);
}
// ===================================================================

class Scene_ChessItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChinaChess.Scene_ChessItem) */ {
 public:
  inline Scene_ChessItem() : Scene_ChessItem(nullptr) {}
  virtual ~Scene_ChessItem();

  Scene_ChessItem(const Scene_ChessItem& from);
  Scene_ChessItem(Scene_ChessItem&& from) noexcept
    : Scene_ChessItem() {
    *this = ::std::move(from);
  }

  inline Scene_ChessItem& operator=(const Scene_ChessItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scene_ChessItem& operator=(Scene_ChessItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Scene_ChessItem& default_instance();

  static inline const Scene_ChessItem* internal_default_instance() {
    return reinterpret_cast<const Scene_ChessItem*>(
               &_Scene_ChessItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Scene_ChessItem& a, Scene_ChessItem& b) {
    a.Swap(&b);
  }
  inline void Swap(Scene_ChessItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scene_ChessItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Scene_ChessItem* New() const final {
    return CreateMaybeMessage<Scene_ChessItem>(nullptr);
  }

  Scene_ChessItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Scene_ChessItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Scene_ChessItem& from);
  void MergeFrom(const Scene_ChessItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scene_ChessItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChinaChess.Scene_ChessItem";
  }
  protected:
  explicit Scene_ChessItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChinaChess_2eproto);
    return ::descriptor_table_ChinaChess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCbXPosFieldNumber = 1,
    kCbYPosFieldNumber = 2,
    kCbChessFieldNumber = 3,
    kCbColorFieldNumber = 4,
  };
  // int32 cbXPos = 1;
  void clear_cbxpos();
  ::PROTOBUF_NAMESPACE_ID::int32 cbxpos() const;
  void set_cbxpos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cbxpos() const;
  void _internal_set_cbxpos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cbYPos = 2;
  void clear_cbypos();
  ::PROTOBUF_NAMESPACE_ID::int32 cbypos() const;
  void set_cbypos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cbypos() const;
  void _internal_set_cbypos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cbChess = 3;
  void clear_cbchess();
  ::PROTOBUF_NAMESPACE_ID::int32 cbchess() const;
  void set_cbchess(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cbchess() const;
  void _internal_set_cbchess(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cbColor = 4;
  void clear_cbcolor();
  ::PROTOBUF_NAMESPACE_ID::int32 cbcolor() const;
  void set_cbcolor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cbcolor() const;
  void _internal_set_cbcolor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChinaChess.Scene_ChessItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 cbxpos_;
  ::PROTOBUF_NAMESPACE_ID::int32 cbypos_;
  ::PROTOBUF_NAMESPACE_ID::int32 cbchess_;
  ::PROTOBUF_NAMESPACE_ID::int32 cbcolor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChinaChess_2eproto;
};
// -------------------------------------------------------------------

class Scene_Chess PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChinaChess.Scene_Chess) */ {
 public:
  inline Scene_Chess() : Scene_Chess(nullptr) {}
  virtual ~Scene_Chess();

  Scene_Chess(const Scene_Chess& from);
  Scene_Chess(Scene_Chess&& from) noexcept
    : Scene_Chess() {
    *this = ::std::move(from);
  }

  inline Scene_Chess& operator=(const Scene_Chess& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scene_Chess& operator=(Scene_Chess&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Scene_Chess& default_instance();

  static inline const Scene_Chess* internal_default_instance() {
    return reinterpret_cast<const Scene_Chess*>(
               &_Scene_Chess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Scene_Chess& a, Scene_Chess& b) {
    a.Swap(&b);
  }
  inline void Swap(Scene_Chess* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scene_Chess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Scene_Chess* New() const final {
    return CreateMaybeMessage<Scene_Chess>(nullptr);
  }

  Scene_Chess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Scene_Chess>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Scene_Chess& from);
  void MergeFrom(const Scene_Chess& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scene_Chess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChinaChess.Scene_Chess";
  }
  protected:
  explicit Scene_Chess(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChinaChess_2eproto);
    return ::descriptor_table_ChinaChess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .ChinaChess.Scene_ChessItem items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::ChinaChess::Scene_ChessItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChinaChess::Scene_ChessItem >*
      mutable_items();
  private:
  const ::ChinaChess::Scene_ChessItem& _internal_items(int index) const;
  ::ChinaChess::Scene_ChessItem* _internal_add_items();
  public:
  const ::ChinaChess::Scene_ChessItem& items(int index) const;
  ::ChinaChess::Scene_ChessItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChinaChess::Scene_ChessItem >&
      items() const;

  // @@protoc_insertion_point(class_scope:ChinaChess.Scene_Chess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChinaChess::Scene_ChessItem > items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChinaChess_2eproto;
};
// -------------------------------------------------------------------

class Scene_GameRuleInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChinaChess.Scene_GameRuleInfo) */ {
 public:
  inline Scene_GameRuleInfo() : Scene_GameRuleInfo(nullptr) {}
  virtual ~Scene_GameRuleInfo();

  Scene_GameRuleInfo(const Scene_GameRuleInfo& from);
  Scene_GameRuleInfo(Scene_GameRuleInfo&& from) noexcept
    : Scene_GameRuleInfo() {
    *this = ::std::move(from);
  }

  inline Scene_GameRuleInfo& operator=(const Scene_GameRuleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scene_GameRuleInfo& operator=(Scene_GameRuleInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Scene_GameRuleInfo& default_instance();

  static inline const Scene_GameRuleInfo* internal_default_instance() {
    return reinterpret_cast<const Scene_GameRuleInfo*>(
               &_Scene_GameRuleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Scene_GameRuleInfo& a, Scene_GameRuleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Scene_GameRuleInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scene_GameRuleInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Scene_GameRuleInfo* New() const final {
    return CreateMaybeMessage<Scene_GameRuleInfo>(nullptr);
  }

  Scene_GameRuleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Scene_GameRuleInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Scene_GameRuleInfo& from);
  void MergeFrom(const Scene_GameRuleInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scene_GameRuleInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChinaChess.Scene_GameRuleInfo";
  }
  protected:
  explicit Scene_GameRuleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChinaChess_2eproto);
    return ::descriptor_table_ChinaChess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSzChipFieldNumber = 3,
    kLBetMinFieldNumber = 1,
    kLBetMaxFieldNumber = 2,
    kDwBetFieldNumber = 4,
    kWRuleLimitTimeFieldNumber = 5,
    kWRuleStepTimeFieldNumber = 6,
  };
  // repeated int32 szChip = 3;
  int szchip_size() const;
  private:
  int _internal_szchip_size() const;
  public:
  void clear_szchip();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_szchip(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_szchip() const;
  void _internal_add_szchip(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_szchip();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 szchip(int index) const;
  void set_szchip(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_szchip(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      szchip() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_szchip();

  // int32 lBetMin = 1;
  void clear_lbetmin();
  ::PROTOBUF_NAMESPACE_ID::int32 lbetmin() const;
  void set_lbetmin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lbetmin() const;
  void _internal_set_lbetmin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lBetMax = 2;
  void clear_lbetmax();
  ::PROTOBUF_NAMESPACE_ID::int32 lbetmax() const;
  void set_lbetmax(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lbetmax() const;
  void _internal_set_lbetmax(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dwBet = 4;
  void clear_dwbet();
  ::PROTOBUF_NAMESPACE_ID::int32 dwbet() const;
  void set_dwbet(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dwbet() const;
  void _internal_set_dwbet(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 wRuleLimitTime = 5;
  void clear_wrulelimittime();
  ::PROTOBUF_NAMESPACE_ID::int32 wrulelimittime() const;
  void set_wrulelimittime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wrulelimittime() const;
  void _internal_set_wrulelimittime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 wRuleStepTime = 6;
  void clear_wrulesteptime();
  ::PROTOBUF_NAMESPACE_ID::int32 wrulesteptime() const;
  void set_wrulesteptime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wrulesteptime() const;
  void _internal_set_wrulesteptime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChinaChess.Scene_GameRuleInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > szchip_;
  mutable std::atomic<int> _szchip_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 lbetmin_;
  ::PROTOBUF_NAMESPACE_ID::int32 lbetmax_;
  ::PROTOBUF_NAMESPACE_ID::int32 dwbet_;
  ::PROTOBUF_NAMESPACE_ID::int32 wrulelimittime_;
  ::PROTOBUF_NAMESPACE_ID::int32 wrulesteptime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChinaChess_2eproto;
};
// -------------------------------------------------------------------

class Scene_Detail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChinaChess.Scene_Detail) */ {
 public:
  inline Scene_Detail() : Scene_Detail(nullptr) {}
  virtual ~Scene_Detail();

  Scene_Detail(const Scene_Detail& from);
  Scene_Detail(Scene_Detail&& from) noexcept
    : Scene_Detail() {
    *this = ::std::move(from);
  }

  inline Scene_Detail& operator=(const Scene_Detail& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scene_Detail& operator=(Scene_Detail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Scene_Detail& default_instance();

  static inline const Scene_Detail* internal_default_instance() {
    return reinterpret_cast<const Scene_Detail*>(
               &_Scene_Detail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Scene_Detail& a, Scene_Detail& b) {
    a.Swap(&b);
  }
  inline void Swap(Scene_Detail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scene_Detail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Scene_Detail* New() const final {
    return CreateMaybeMessage<Scene_Detail>(nullptr);
  }

  Scene_Detail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Scene_Detail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Scene_Detail& from);
  void MergeFrom(const Scene_Detail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scene_Detail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChinaChess.Scene_Detail";
  }
  protected:
  explicit Scene_Detail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChinaChess_2eproto);
    return ::descriptor_table_ChinaChess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWChessStepCountFieldNumber = 2,
    kCbPeaceCountFieldNumber = 4,
    kCbRegretCountFieldNumber = 5,
    kGameRuleInfoFieldNumber = 3,
    kChessItemArrayFieldNumber = 6,
    kWCurrentUserFieldNumber = 1,
  };
  // repeated int32 wChessStepCount = 2;
  int wchessstepcount_size() const;
  private:
  int _internal_wchessstepcount_size() const;
  public:
  void clear_wchessstepcount();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wchessstepcount(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_wchessstepcount() const;
  void _internal_add_wchessstepcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_wchessstepcount();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 wchessstepcount(int index) const;
  void set_wchessstepcount(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_wchessstepcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      wchessstepcount() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_wchessstepcount();

  // repeated int32 cbPeaceCount = 4;
  int cbpeacecount_size() const;
  private:
  int _internal_cbpeacecount_size() const;
  public:
  void clear_cbpeacecount();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cbpeacecount(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_cbpeacecount() const;
  void _internal_add_cbpeacecount(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_cbpeacecount();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 cbpeacecount(int index) const;
  void set_cbpeacecount(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_cbpeacecount(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      cbpeacecount() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_cbpeacecount();

  // repeated int32 cbRegretCount = 5;
  int cbregretcount_size() const;
  private:
  int _internal_cbregretcount_size() const;
  public:
  void clear_cbregretcount();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cbregretcount(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_cbregretcount() const;
  void _internal_add_cbregretcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_cbregretcount();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 cbregretcount(int index) const;
  void set_cbregretcount(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_cbregretcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      cbregretcount() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_cbregretcount();

  // .ChinaChess.Scene_GameRuleInfo GameRuleInfo = 3;
  bool has_gameruleinfo() const;
  private:
  bool _internal_has_gameruleinfo() const;
  public:
  void clear_gameruleinfo();
  const ::ChinaChess::Scene_GameRuleInfo& gameruleinfo() const;
  ::ChinaChess::Scene_GameRuleInfo* release_gameruleinfo();
  ::ChinaChess::Scene_GameRuleInfo* mutable_gameruleinfo();
  void set_allocated_gameruleinfo(::ChinaChess::Scene_GameRuleInfo* gameruleinfo);
  private:
  const ::ChinaChess::Scene_GameRuleInfo& _internal_gameruleinfo() const;
  ::ChinaChess::Scene_GameRuleInfo* _internal_mutable_gameruleinfo();
  public:
  void unsafe_arena_set_allocated_gameruleinfo(
      ::ChinaChess::Scene_GameRuleInfo* gameruleinfo);
  ::ChinaChess::Scene_GameRuleInfo* unsafe_arena_release_gameruleinfo();

  // .ChinaChess.Scene_Chess ChessItemArray = 6;
  bool has_chessitemarray() const;
  private:
  bool _internal_has_chessitemarray() const;
  public:
  void clear_chessitemarray();
  const ::ChinaChess::Scene_Chess& chessitemarray() const;
  ::ChinaChess::Scene_Chess* release_chessitemarray();
  ::ChinaChess::Scene_Chess* mutable_chessitemarray();
  void set_allocated_chessitemarray(::ChinaChess::Scene_Chess* chessitemarray);
  private:
  const ::ChinaChess::Scene_Chess& _internal_chessitemarray() const;
  ::ChinaChess::Scene_Chess* _internal_mutable_chessitemarray();
  public:
  void unsafe_arena_set_allocated_chessitemarray(
      ::ChinaChess::Scene_Chess* chessitemarray);
  ::ChinaChess::Scene_Chess* unsafe_arena_release_chessitemarray();

  // int32 wCurrentUser = 1;
  void clear_wcurrentuser();
  ::PROTOBUF_NAMESPACE_ID::int32 wcurrentuser() const;
  void set_wcurrentuser(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wcurrentuser() const;
  void _internal_set_wcurrentuser(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChinaChess.Scene_Detail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > wchessstepcount_;
  mutable std::atomic<int> _wchessstepcount_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > cbpeacecount_;
  mutable std::atomic<int> _cbpeacecount_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > cbregretcount_;
  mutable std::atomic<int> _cbregretcount_cached_byte_size_;
  ::ChinaChess::Scene_GameRuleInfo* gameruleinfo_;
  ::ChinaChess::Scene_Chess* chessitemarray_;
  ::PROTOBUF_NAMESPACE_ID::int32 wcurrentuser_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChinaChess_2eproto;
};
// -------------------------------------------------------------------

class SC_SceneInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChinaChess.SC_SceneInfo) */ {
 public:
  inline SC_SceneInfo() : SC_SceneInfo(nullptr) {}
  virtual ~SC_SceneInfo();

  SC_SceneInfo(const SC_SceneInfo& from);
  SC_SceneInfo(SC_SceneInfo&& from) noexcept
    : SC_SceneInfo() {
    *this = ::std::move(from);
  }

  inline SC_SceneInfo& operator=(const SC_SceneInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_SceneInfo& operator=(SC_SceneInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_SceneInfo& default_instance();

  static inline const SC_SceneInfo* internal_default_instance() {
    return reinterpret_cast<const SC_SceneInfo*>(
               &_SC_SceneInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SC_SceneInfo& a, SC_SceneInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_SceneInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_SceneInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_SceneInfo* New() const final {
    return CreateMaybeMessage<SC_SceneInfo>(nullptr);
  }

  SC_SceneInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_SceneInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_SceneInfo& from);
  void MergeFrom(const SC_SceneInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_SceneInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChinaChess.SC_SceneInfo";
  }
  protected:
  explicit SC_SceneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChinaChess_2eproto);
    return ::descriptor_table_ChinaChess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFreeFieldNumber = 2,
    kPlayFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // .ChinaChess.Scene_Detail free = 2;
  bool has_free() const;
  private:
  bool _internal_has_free() const;
  public:
  void clear_free();
  const ::ChinaChess::Scene_Detail& free() const;
  ::ChinaChess::Scene_Detail* release_free();
  ::ChinaChess::Scene_Detail* mutable_free();
  void set_allocated_free(::ChinaChess::Scene_Detail* free);
  private:
  const ::ChinaChess::Scene_Detail& _internal_free() const;
  ::ChinaChess::Scene_Detail* _internal_mutable_free();
  public:
  void unsafe_arena_set_allocated_free(
      ::ChinaChess::Scene_Detail* free);
  ::ChinaChess::Scene_Detail* unsafe_arena_release_free();

  // .ChinaChess.Scene_Detail play = 3;
  bool has_play() const;
  private:
  bool _internal_has_play() const;
  public:
  void clear_play();
  const ::ChinaChess::Scene_Detail& play() const;
  ::ChinaChess::Scene_Detail* release_play();
  ::ChinaChess::Scene_Detail* mutable_play();
  void set_allocated_play(::ChinaChess::Scene_Detail* play);
  private:
  const ::ChinaChess::Scene_Detail& _internal_play() const;
  ::ChinaChess::Scene_Detail* _internal_mutable_play();
  public:
  void unsafe_arena_set_allocated_play(
      ::ChinaChess::Scene_Detail* play);
  ::ChinaChess::Scene_Detail* unsafe_arena_release_play();

  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChinaChess.SC_SceneInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ChinaChess::Scene_Detail* free_;
  ::ChinaChess::Scene_Detail* play_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChinaChess_2eproto;
};
// -------------------------------------------------------------------

class CMD_Chess_MOVE_CHESS PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChinaChess.CMD_Chess_MOVE_CHESS) */ {
 public:
  inline CMD_Chess_MOVE_CHESS() : CMD_Chess_MOVE_CHESS(nullptr) {}
  virtual ~CMD_Chess_MOVE_CHESS();

  CMD_Chess_MOVE_CHESS(const CMD_Chess_MOVE_CHESS& from);
  CMD_Chess_MOVE_CHESS(CMD_Chess_MOVE_CHESS&& from) noexcept
    : CMD_Chess_MOVE_CHESS() {
    *this = ::std::move(from);
  }

  inline CMD_Chess_MOVE_CHESS& operator=(const CMD_Chess_MOVE_CHESS& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMD_Chess_MOVE_CHESS& operator=(CMD_Chess_MOVE_CHESS&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMD_Chess_MOVE_CHESS& default_instance();

  static inline const CMD_Chess_MOVE_CHESS* internal_default_instance() {
    return reinterpret_cast<const CMD_Chess_MOVE_CHESS*>(
               &_CMD_Chess_MOVE_CHESS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMD_Chess_MOVE_CHESS& a, CMD_Chess_MOVE_CHESS& b) {
    a.Swap(&b);
  }
  inline void Swap(CMD_Chess_MOVE_CHESS* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMD_Chess_MOVE_CHESS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMD_Chess_MOVE_CHESS* New() const final {
    return CreateMaybeMessage<CMD_Chess_MOVE_CHESS>(nullptr);
  }

  CMD_Chess_MOVE_CHESS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMD_Chess_MOVE_CHESS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMD_Chess_MOVE_CHESS& from);
  void MergeFrom(const CMD_Chess_MOVE_CHESS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMD_Chess_MOVE_CHESS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChinaChess.CMD_Chess_MOVE_CHESS";
  }
  protected:
  explicit CMD_Chess_MOVE_CHESS(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChinaChess_2eproto);
    return ::descriptor_table_ChinaChess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCbXSourcePosFieldNumber = 1,
    kCbYSourcePosFieldNumber = 2,
    kCbXTargetPosFieldNumber = 3,
    kCbYTargetPosFieldNumber = 4,
    kWCurrentUserFieldNumber = 5,
  };
  // int32 cbXSourcePos = 1;
  void clear_cbxsourcepos();
  ::PROTOBUF_NAMESPACE_ID::int32 cbxsourcepos() const;
  void set_cbxsourcepos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cbxsourcepos() const;
  void _internal_set_cbxsourcepos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cbYSourcePos = 2;
  void clear_cbysourcepos();
  ::PROTOBUF_NAMESPACE_ID::int32 cbysourcepos() const;
  void set_cbysourcepos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cbysourcepos() const;
  void _internal_set_cbysourcepos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cbXTargetPos = 3;
  void clear_cbxtargetpos();
  ::PROTOBUF_NAMESPACE_ID::int32 cbxtargetpos() const;
  void set_cbxtargetpos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cbxtargetpos() const;
  void _internal_set_cbxtargetpos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cbYTargetPos = 4;
  void clear_cbytargetpos();
  ::PROTOBUF_NAMESPACE_ID::int32 cbytargetpos() const;
  void set_cbytargetpos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cbytargetpos() const;
  void _internal_set_cbytargetpos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 wCurrentUser = 5;
  void clear_wcurrentuser();
  ::PROTOBUF_NAMESPACE_ID::int32 wcurrentuser() const;
  void set_wcurrentuser(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wcurrentuser() const;
  void _internal_set_wcurrentuser(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChinaChess.CMD_Chess_MOVE_CHESS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 cbxsourcepos_;
  ::PROTOBUF_NAMESPACE_ID::int32 cbysourcepos_;
  ::PROTOBUF_NAMESPACE_ID::int32 cbxtargetpos_;
  ::PROTOBUF_NAMESPACE_ID::int32 cbytargetpos_;
  ::PROTOBUF_NAMESPACE_ID::int32 wcurrentuser_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChinaChess_2eproto;
};
// -------------------------------------------------------------------

class RegretResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChinaChess.RegretResult) */ {
 public:
  inline RegretResult() : RegretResult(nullptr) {}
  virtual ~RegretResult();

  RegretResult(const RegretResult& from);
  RegretResult(RegretResult&& from) noexcept
    : RegretResult() {
    *this = ::std::move(from);
  }

  inline RegretResult& operator=(const RegretResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegretResult& operator=(RegretResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegretResult& default_instance();

  static inline const RegretResult* internal_default_instance() {
    return reinterpret_cast<const RegretResult*>(
               &_RegretResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RegretResult& a, RegretResult& b) {
    a.Swap(&b);
  }
  inline void Swap(RegretResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegretResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegretResult* New() const final {
    return CreateMaybeMessage<RegretResult>(nullptr);
  }

  RegretResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegretResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegretResult& from);
  void MergeFrom(const RegretResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegretResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChinaChess.RegretResult";
  }
  protected:
  explicit RegretResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChinaChess_2eproto);
    return ::descriptor_table_ChinaChess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWRegretUserFieldNumber = 1,
    kWCurrentUserFieldNumber = 2,
    kCbRegretCountFieldNumber = 3,
  };
  // int32 wRegretUser = 1;
  void clear_wregretuser();
  ::PROTOBUF_NAMESPACE_ID::int32 wregretuser() const;
  void set_wregretuser(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wregretuser() const;
  void _internal_set_wregretuser(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 wCurrentUser = 2;
  void clear_wcurrentuser();
  ::PROTOBUF_NAMESPACE_ID::int32 wcurrentuser() const;
  void set_wcurrentuser(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wcurrentuser() const;
  void _internal_set_wcurrentuser(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cbRegretCount = 3;
  void clear_cbregretcount();
  ::PROTOBUF_NAMESPACE_ID::int32 cbregretcount() const;
  void set_cbregretcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cbregretcount() const;
  void _internal_set_cbregretcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChinaChess.RegretResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 wregretuser_;
  ::PROTOBUF_NAMESPACE_ID::int32 wcurrentuser_;
  ::PROTOBUF_NAMESPACE_ID::int32 cbregretcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChinaChess_2eproto;
};
// -------------------------------------------------------------------

class CMD_Common PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChinaChess.CMD_Common) */ {
 public:
  inline CMD_Common() : CMD_Common(nullptr) {}
  virtual ~CMD_Common();

  CMD_Common(const CMD_Common& from);
  CMD_Common(CMD_Common&& from) noexcept
    : CMD_Common() {
    *this = ::std::move(from);
  }

  inline CMD_Common& operator=(const CMD_Common& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMD_Common& operator=(CMD_Common&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMD_Common& default_instance();

  static inline const CMD_Common* internal_default_instance() {
    return reinterpret_cast<const CMD_Common*>(
               &_CMD_Common_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMD_Common& a, CMD_Common& b) {
    a.Swap(&b);
  }
  inline void Swap(CMD_Common* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMD_Common* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMD_Common* New() const final {
    return CreateMaybeMessage<CMD_Common>(nullptr);
  }

  CMD_Common* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMD_Common>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMD_Common& from);
  void MergeFrom(const CMD_Common& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMD_Common* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChinaChess.CMD_Common";
  }
  protected:
  explicit CMD_Common(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChinaChess_2eproto);
    return ::descriptor_table_ChinaChess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpIndexFieldNumber = 1,
    kWaitTimeFieldNumber = 2,
  };
  // int32 opIndex = 1;
  void clear_opindex();
  ::PROTOBUF_NAMESPACE_ID::int32 opindex() const;
  void set_opindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_opindex() const;
  void _internal_set_opindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 waitTime = 2;
  void clear_waittime();
  ::PROTOBUF_NAMESPACE_ID::int32 waittime() const;
  void set_waittime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_waittime() const;
  void _internal_set_waittime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChinaChess.CMD_Common)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 opindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 waittime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChinaChess_2eproto;
};
// -------------------------------------------------------------------

class GameEnd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChinaChess.GameEnd) */ {
 public:
  inline GameEnd() : GameEnd(nullptr) {}
  virtual ~GameEnd();

  GameEnd(const GameEnd& from);
  GameEnd(GameEnd&& from) noexcept
    : GameEnd() {
    *this = ::std::move(from);
  }

  inline GameEnd& operator=(const GameEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEnd& operator=(GameEnd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameEnd& default_instance();

  static inline const GameEnd* internal_default_instance() {
    return reinterpret_cast<const GameEnd*>(
               &_GameEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GameEnd& a, GameEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(GameEnd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEnd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameEnd* New() const final {
    return CreateMaybeMessage<GameEnd>(nullptr);
  }

  GameEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameEnd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameEnd& from);
  void MergeFrom(const GameEnd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEnd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChinaChess.GameEnd";
  }
  protected:
  explicit GameEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChinaChess_2eproto);
    return ::descriptor_table_ChinaChess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLUserScoreFieldNumber = 2,
    kWWinUserFieldNumber = 1,
  };
  // repeated int64 lUserScore = 2;
  int luserscore_size() const;
  private:
  int _internal_luserscore_size() const;
  public:
  void clear_luserscore();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_luserscore(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_luserscore() const;
  void _internal_add_luserscore(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_luserscore();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 luserscore(int index) const;
  void set_luserscore(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_luserscore(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      luserscore() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_luserscore();

  // int32 wWinUser = 1;
  void clear_wwinuser();
  ::PROTOBUF_NAMESPACE_ID::int32 wwinuser() const;
  void set_wwinuser(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wwinuser() const;
  void _internal_set_wwinuser(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChinaChess.GameEnd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > luserscore_;
  mutable std::atomic<int> _luserscore_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 wwinuser_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChinaChess_2eproto;
};
// -------------------------------------------------------------------

class Chess_Manual_Item PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChinaChess.Chess_Manual_Item) */ {
 public:
  inline Chess_Manual_Item() : Chess_Manual_Item(nullptr) {}
  virtual ~Chess_Manual_Item();

  Chess_Manual_Item(const Chess_Manual_Item& from);
  Chess_Manual_Item(Chess_Manual_Item&& from) noexcept
    : Chess_Manual_Item() {
    *this = ::std::move(from);
  }

  inline Chess_Manual_Item& operator=(const Chess_Manual_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chess_Manual_Item& operator=(Chess_Manual_Item&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Chess_Manual_Item& default_instance();

  static inline const Chess_Manual_Item* internal_default_instance() {
    return reinterpret_cast<const Chess_Manual_Item*>(
               &_Chess_Manual_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Chess_Manual_Item& a, Chess_Manual_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(Chess_Manual_Item* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chess_Manual_Item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chess_Manual_Item* New() const final {
    return CreateMaybeMessage<Chess_Manual_Item>(nullptr);
  }

  Chess_Manual_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chess_Manual_Item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chess_Manual_Item& from);
  void MergeFrom(const Chess_Manual_Item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chess_Manual_Item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChinaChess.Chess_Manual_Item";
  }
  protected:
  explicit Chess_Manual_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChinaChess_2eproto);
    return ::descriptor_table_ChinaChess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCbXSourceChessPosFieldNumber = 1,
    kCbYSourceChessPosFieldNumber = 2,
    kCbXTargetChessPosFieldNumber = 3,
    kCbYTargetChessPosFieldNumber = 4,
    kCbUniteChessFieldNumber = 5,
    kCbSourceColorFieldNumber = 6,
  };
  // int32 cbXSourceChessPos = 1;
  void clear_cbxsourcechesspos();
  ::PROTOBUF_NAMESPACE_ID::int32 cbxsourcechesspos() const;
  void set_cbxsourcechesspos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cbxsourcechesspos() const;
  void _internal_set_cbxsourcechesspos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cbYSourceChessPos = 2;
  void clear_cbysourcechesspos();
  ::PROTOBUF_NAMESPACE_ID::int32 cbysourcechesspos() const;
  void set_cbysourcechesspos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cbysourcechesspos() const;
  void _internal_set_cbysourcechesspos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cbXTargetChessPos = 3;
  void clear_cbxtargetchesspos();
  ::PROTOBUF_NAMESPACE_ID::int32 cbxtargetchesspos() const;
  void set_cbxtargetchesspos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cbxtargetchesspos() const;
  void _internal_set_cbxtargetchesspos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cbYTargetChessPos = 4;
  void clear_cbytargetchesspos();
  ::PROTOBUF_NAMESPACE_ID::int32 cbytargetchesspos() const;
  void set_cbytargetchesspos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cbytargetchesspos() const;
  void _internal_set_cbytargetchesspos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cbUniteChess = 5;
  void clear_cbunitechess();
  ::PROTOBUF_NAMESPACE_ID::int32 cbunitechess() const;
  void set_cbunitechess(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cbunitechess() const;
  void _internal_set_cbunitechess(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cbSourceColor = 6;
  void clear_cbsourcecolor();
  ::PROTOBUF_NAMESPACE_ID::int32 cbsourcecolor() const;
  void set_cbsourcecolor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cbsourcecolor() const;
  void _internal_set_cbsourcecolor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChinaChess.Chess_Manual_Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 cbxsourcechesspos_;
  ::PROTOBUF_NAMESPACE_ID::int32 cbysourcechesspos_;
  ::PROTOBUF_NAMESPACE_ID::int32 cbxtargetchesspos_;
  ::PROTOBUF_NAMESPACE_ID::int32 cbytargetchesspos_;
  ::PROTOBUF_NAMESPACE_ID::int32 cbunitechess_;
  ::PROTOBUF_NAMESPACE_ID::int32 cbsourcecolor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChinaChess_2eproto;
};
// -------------------------------------------------------------------

class Chess_Manual PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChinaChess.Chess_Manual) */ {
 public:
  inline Chess_Manual() : Chess_Manual(nullptr) {}
  virtual ~Chess_Manual();

  Chess_Manual(const Chess_Manual& from);
  Chess_Manual(Chess_Manual&& from) noexcept
    : Chess_Manual() {
    *this = ::std::move(from);
  }

  inline Chess_Manual& operator=(const Chess_Manual& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chess_Manual& operator=(Chess_Manual&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Chess_Manual& default_instance();

  static inline const Chess_Manual* internal_default_instance() {
    return reinterpret_cast<const Chess_Manual*>(
               &_Chess_Manual_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Chess_Manual& a, Chess_Manual& b) {
    a.Swap(&b);
  }
  inline void Swap(Chess_Manual* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chess_Manual* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chess_Manual* New() const final {
    return CreateMaybeMessage<Chess_Manual>(nullptr);
  }

  Chess_Manual* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chess_Manual>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chess_Manual& from);
  void MergeFrom(const Chess_Manual& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chess_Manual* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChinaChess.Chess_Manual";
  }
  protected:
  explicit Chess_Manual(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChinaChess_2eproto);
    return ::descriptor_table_ChinaChess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .ChinaChess.Chess_Manual_Item items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::ChinaChess::Chess_Manual_Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChinaChess::Chess_Manual_Item >*
      mutable_items();
  private:
  const ::ChinaChess::Chess_Manual_Item& _internal_items(int index) const;
  ::ChinaChess::Chess_Manual_Item* _internal_add_items();
  public:
  const ::ChinaChess::Chess_Manual_Item& items(int index) const;
  ::ChinaChess::Chess_Manual_Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChinaChess::Chess_Manual_Item >&
      items() const;

  // @@protoc_insertion_point(class_scope:ChinaChess.Chess_Manual)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChinaChess::Chess_Manual_Item > items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChinaChess_2eproto;
};
// -------------------------------------------------------------------

class Notify_Timer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChinaChess.Notify_Timer) */ {
 public:
  inline Notify_Timer() : Notify_Timer(nullptr) {}
  virtual ~Notify_Timer();

  Notify_Timer(const Notify_Timer& from);
  Notify_Timer(Notify_Timer&& from) noexcept
    : Notify_Timer() {
    *this = ::std::move(from);
  }

  inline Notify_Timer& operator=(const Notify_Timer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Notify_Timer& operator=(Notify_Timer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Notify_Timer& default_instance();

  static inline const Notify_Timer* internal_default_instance() {
    return reinterpret_cast<const Notify_Timer*>(
               &_Notify_Timer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Notify_Timer& a, Notify_Timer& b) {
    a.Swap(&b);
  }
  inline void Swap(Notify_Timer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Notify_Timer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Notify_Timer* New() const final {
    return CreateMaybeMessage<Notify_Timer>(nullptr);
  }

  Notify_Timer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Notify_Timer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Notify_Timer& from);
  void MergeFrom(const Notify_Timer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Notify_Timer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChinaChess.Notify_Timer";
  }
  protected:
  explicit Notify_Timer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChinaChess_2eproto);
    return ::descriptor_table_ChinaChess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWaitTimeFieldNumber = 1,
    kRoomTypeFieldNumber = 2,
  };
  // int32 waitTime = 1;
  void clear_waittime();
  ::PROTOBUF_NAMESPACE_ID::int32 waittime() const;
  void set_waittime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_waittime() const;
  void _internal_set_waittime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 roomType = 2;
  void clear_roomtype();
  ::PROTOBUF_NAMESPACE_ID::int32 roomtype() const;
  void set_roomtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roomtype() const;
  void _internal_set_roomtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChinaChess.Notify_Timer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 waittime_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChinaChess_2eproto;
};
// -------------------------------------------------------------------

class CMD_Make_Rule PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChinaChess.CMD_Make_Rule) */ {
 public:
  inline CMD_Make_Rule() : CMD_Make_Rule(nullptr) {}
  virtual ~CMD_Make_Rule();

  CMD_Make_Rule(const CMD_Make_Rule& from);
  CMD_Make_Rule(CMD_Make_Rule&& from) noexcept
    : CMD_Make_Rule() {
    *this = ::std::move(from);
  }

  inline CMD_Make_Rule& operator=(const CMD_Make_Rule& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMD_Make_Rule& operator=(CMD_Make_Rule&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMD_Make_Rule& default_instance();

  static inline const CMD_Make_Rule* internal_default_instance() {
    return reinterpret_cast<const CMD_Make_Rule*>(
               &_CMD_Make_Rule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CMD_Make_Rule& a, CMD_Make_Rule& b) {
    a.Swap(&b);
  }
  inline void Swap(CMD_Make_Rule* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMD_Make_Rule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMD_Make_Rule* New() const final {
    return CreateMaybeMessage<CMD_Make_Rule>(nullptr);
  }

  CMD_Make_Rule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMD_Make_Rule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMD_Make_Rule& from);
  void MergeFrom(const CMD_Make_Rule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMD_Make_Rule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChinaChess.CMD_Make_Rule";
  }
  protected:
  explicit CMD_Make_Rule(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChinaChess_2eproto);
    return ::descriptor_table_ChinaChess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScoreFieldNumber = 2,
    kErrorIDFieldNumber = 1,
  };
  // int64 score = 2;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int64 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 errorID = 1;
  void clear_errorid();
  ::PROTOBUF_NAMESPACE_ID::int32 errorid() const;
  void set_errorid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errorid() const;
  void _internal_set_errorid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChinaChess.CMD_Make_Rule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 score_;
  ::PROTOBUF_NAMESPACE_ID::int32 errorid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChinaChess_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Scene_ChessItem

// int32 cbXPos = 1;
inline void Scene_ChessItem::clear_cbxpos() {
  cbxpos_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scene_ChessItem::_internal_cbxpos() const {
  return cbxpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scene_ChessItem::cbxpos() const {
  // @@protoc_insertion_point(field_get:ChinaChess.Scene_ChessItem.cbXPos)
  return _internal_cbxpos();
}
inline void Scene_ChessItem::_internal_set_cbxpos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cbxpos_ = value;
}
inline void Scene_ChessItem::set_cbxpos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cbxpos(value);
  // @@protoc_insertion_point(field_set:ChinaChess.Scene_ChessItem.cbXPos)
}

// int32 cbYPos = 2;
inline void Scene_ChessItem::clear_cbypos() {
  cbypos_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scene_ChessItem::_internal_cbypos() const {
  return cbypos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scene_ChessItem::cbypos() const {
  // @@protoc_insertion_point(field_get:ChinaChess.Scene_ChessItem.cbYPos)
  return _internal_cbypos();
}
inline void Scene_ChessItem::_internal_set_cbypos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cbypos_ = value;
}
inline void Scene_ChessItem::set_cbypos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cbypos(value);
  // @@protoc_insertion_point(field_set:ChinaChess.Scene_ChessItem.cbYPos)
}

// int32 cbChess = 3;
inline void Scene_ChessItem::clear_cbchess() {
  cbchess_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scene_ChessItem::_internal_cbchess() const {
  return cbchess_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scene_ChessItem::cbchess() const {
  // @@protoc_insertion_point(field_get:ChinaChess.Scene_ChessItem.cbChess)
  return _internal_cbchess();
}
inline void Scene_ChessItem::_internal_set_cbchess(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cbchess_ = value;
}
inline void Scene_ChessItem::set_cbchess(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cbchess(value);
  // @@protoc_insertion_point(field_set:ChinaChess.Scene_ChessItem.cbChess)
}

// int32 cbColor = 4;
inline void Scene_ChessItem::clear_cbcolor() {
  cbcolor_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scene_ChessItem::_internal_cbcolor() const {
  return cbcolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scene_ChessItem::cbcolor() const {
  // @@protoc_insertion_point(field_get:ChinaChess.Scene_ChessItem.cbColor)
  return _internal_cbcolor();
}
inline void Scene_ChessItem::_internal_set_cbcolor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cbcolor_ = value;
}
inline void Scene_ChessItem::set_cbcolor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cbcolor(value);
  // @@protoc_insertion_point(field_set:ChinaChess.Scene_ChessItem.cbColor)
}

// -------------------------------------------------------------------

// Scene_Chess

// repeated .ChinaChess.Scene_ChessItem items = 1;
inline int Scene_Chess::_internal_items_size() const {
  return items_.size();
}
inline int Scene_Chess::items_size() const {
  return _internal_items_size();
}
inline void Scene_Chess::clear_items() {
  items_.Clear();
}
inline ::ChinaChess::Scene_ChessItem* Scene_Chess::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ChinaChess.Scene_Chess.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChinaChess::Scene_ChessItem >*
Scene_Chess::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ChinaChess.Scene_Chess.items)
  return &items_;
}
inline const ::ChinaChess::Scene_ChessItem& Scene_Chess::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::ChinaChess::Scene_ChessItem& Scene_Chess::items(int index) const {
  // @@protoc_insertion_point(field_get:ChinaChess.Scene_Chess.items)
  return _internal_items(index);
}
inline ::ChinaChess::Scene_ChessItem* Scene_Chess::_internal_add_items() {
  return items_.Add();
}
inline ::ChinaChess::Scene_ChessItem* Scene_Chess::add_items() {
  // @@protoc_insertion_point(field_add:ChinaChess.Scene_Chess.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChinaChess::Scene_ChessItem >&
Scene_Chess::items() const {
  // @@protoc_insertion_point(field_list:ChinaChess.Scene_Chess.items)
  return items_;
}

// -------------------------------------------------------------------

// Scene_GameRuleInfo

// int32 lBetMin = 1;
inline void Scene_GameRuleInfo::clear_lbetmin() {
  lbetmin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scene_GameRuleInfo::_internal_lbetmin() const {
  return lbetmin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scene_GameRuleInfo::lbetmin() const {
  // @@protoc_insertion_point(field_get:ChinaChess.Scene_GameRuleInfo.lBetMin)
  return _internal_lbetmin();
}
inline void Scene_GameRuleInfo::_internal_set_lbetmin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lbetmin_ = value;
}
inline void Scene_GameRuleInfo::set_lbetmin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lbetmin(value);
  // @@protoc_insertion_point(field_set:ChinaChess.Scene_GameRuleInfo.lBetMin)
}

// int32 lBetMax = 2;
inline void Scene_GameRuleInfo::clear_lbetmax() {
  lbetmax_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scene_GameRuleInfo::_internal_lbetmax() const {
  return lbetmax_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scene_GameRuleInfo::lbetmax() const {
  // @@protoc_insertion_point(field_get:ChinaChess.Scene_GameRuleInfo.lBetMax)
  return _internal_lbetmax();
}
inline void Scene_GameRuleInfo::_internal_set_lbetmax(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lbetmax_ = value;
}
inline void Scene_GameRuleInfo::set_lbetmax(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lbetmax(value);
  // @@protoc_insertion_point(field_set:ChinaChess.Scene_GameRuleInfo.lBetMax)
}

// repeated int32 szChip = 3;
inline int Scene_GameRuleInfo::_internal_szchip_size() const {
  return szchip_.size();
}
inline int Scene_GameRuleInfo::szchip_size() const {
  return _internal_szchip_size();
}
inline void Scene_GameRuleInfo::clear_szchip() {
  szchip_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scene_GameRuleInfo::_internal_szchip(int index) const {
  return szchip_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scene_GameRuleInfo::szchip(int index) const {
  // @@protoc_insertion_point(field_get:ChinaChess.Scene_GameRuleInfo.szChip)
  return _internal_szchip(index);
}
inline void Scene_GameRuleInfo::set_szchip(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  szchip_.Set(index, value);
  // @@protoc_insertion_point(field_set:ChinaChess.Scene_GameRuleInfo.szChip)
}
inline void Scene_GameRuleInfo::_internal_add_szchip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  szchip_.Add(value);
}
inline void Scene_GameRuleInfo::add_szchip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_szchip(value);
  // @@protoc_insertion_point(field_add:ChinaChess.Scene_GameRuleInfo.szChip)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Scene_GameRuleInfo::_internal_szchip() const {
  return szchip_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Scene_GameRuleInfo::szchip() const {
  // @@protoc_insertion_point(field_list:ChinaChess.Scene_GameRuleInfo.szChip)
  return _internal_szchip();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Scene_GameRuleInfo::_internal_mutable_szchip() {
  return &szchip_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Scene_GameRuleInfo::mutable_szchip() {
  // @@protoc_insertion_point(field_mutable_list:ChinaChess.Scene_GameRuleInfo.szChip)
  return _internal_mutable_szchip();
}

// int32 dwBet = 4;
inline void Scene_GameRuleInfo::clear_dwbet() {
  dwbet_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scene_GameRuleInfo::_internal_dwbet() const {
  return dwbet_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scene_GameRuleInfo::dwbet() const {
  // @@protoc_insertion_point(field_get:ChinaChess.Scene_GameRuleInfo.dwBet)
  return _internal_dwbet();
}
inline void Scene_GameRuleInfo::_internal_set_dwbet(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dwbet_ = value;
}
inline void Scene_GameRuleInfo::set_dwbet(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dwbet(value);
  // @@protoc_insertion_point(field_set:ChinaChess.Scene_GameRuleInfo.dwBet)
}

// int32 wRuleLimitTime = 5;
inline void Scene_GameRuleInfo::clear_wrulelimittime() {
  wrulelimittime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scene_GameRuleInfo::_internal_wrulelimittime() const {
  return wrulelimittime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scene_GameRuleInfo::wrulelimittime() const {
  // @@protoc_insertion_point(field_get:ChinaChess.Scene_GameRuleInfo.wRuleLimitTime)
  return _internal_wrulelimittime();
}
inline void Scene_GameRuleInfo::_internal_set_wrulelimittime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wrulelimittime_ = value;
}
inline void Scene_GameRuleInfo::set_wrulelimittime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wrulelimittime(value);
  // @@protoc_insertion_point(field_set:ChinaChess.Scene_GameRuleInfo.wRuleLimitTime)
}

// int32 wRuleStepTime = 6;
inline void Scene_GameRuleInfo::clear_wrulesteptime() {
  wrulesteptime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scene_GameRuleInfo::_internal_wrulesteptime() const {
  return wrulesteptime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scene_GameRuleInfo::wrulesteptime() const {
  // @@protoc_insertion_point(field_get:ChinaChess.Scene_GameRuleInfo.wRuleStepTime)
  return _internal_wrulesteptime();
}
inline void Scene_GameRuleInfo::_internal_set_wrulesteptime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wrulesteptime_ = value;
}
inline void Scene_GameRuleInfo::set_wrulesteptime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wrulesteptime(value);
  // @@protoc_insertion_point(field_set:ChinaChess.Scene_GameRuleInfo.wRuleStepTime)
}

// -------------------------------------------------------------------

// Scene_Detail

// int32 wCurrentUser = 1;
inline void Scene_Detail::clear_wcurrentuser() {
  wcurrentuser_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scene_Detail::_internal_wcurrentuser() const {
  return wcurrentuser_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scene_Detail::wcurrentuser() const {
  // @@protoc_insertion_point(field_get:ChinaChess.Scene_Detail.wCurrentUser)
  return _internal_wcurrentuser();
}
inline void Scene_Detail::_internal_set_wcurrentuser(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wcurrentuser_ = value;
}
inline void Scene_Detail::set_wcurrentuser(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wcurrentuser(value);
  // @@protoc_insertion_point(field_set:ChinaChess.Scene_Detail.wCurrentUser)
}

// repeated int32 wChessStepCount = 2;
inline int Scene_Detail::_internal_wchessstepcount_size() const {
  return wchessstepcount_.size();
}
inline int Scene_Detail::wchessstepcount_size() const {
  return _internal_wchessstepcount_size();
}
inline void Scene_Detail::clear_wchessstepcount() {
  wchessstepcount_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scene_Detail::_internal_wchessstepcount(int index) const {
  return wchessstepcount_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scene_Detail::wchessstepcount(int index) const {
  // @@protoc_insertion_point(field_get:ChinaChess.Scene_Detail.wChessStepCount)
  return _internal_wchessstepcount(index);
}
inline void Scene_Detail::set_wchessstepcount(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  wchessstepcount_.Set(index, value);
  // @@protoc_insertion_point(field_set:ChinaChess.Scene_Detail.wChessStepCount)
}
inline void Scene_Detail::_internal_add_wchessstepcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  wchessstepcount_.Add(value);
}
inline void Scene_Detail::add_wchessstepcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_wchessstepcount(value);
  // @@protoc_insertion_point(field_add:ChinaChess.Scene_Detail.wChessStepCount)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Scene_Detail::_internal_wchessstepcount() const {
  return wchessstepcount_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Scene_Detail::wchessstepcount() const {
  // @@protoc_insertion_point(field_list:ChinaChess.Scene_Detail.wChessStepCount)
  return _internal_wchessstepcount();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Scene_Detail::_internal_mutable_wchessstepcount() {
  return &wchessstepcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Scene_Detail::mutable_wchessstepcount() {
  // @@protoc_insertion_point(field_mutable_list:ChinaChess.Scene_Detail.wChessStepCount)
  return _internal_mutable_wchessstepcount();
}

// .ChinaChess.Scene_GameRuleInfo GameRuleInfo = 3;
inline bool Scene_Detail::_internal_has_gameruleinfo() const {
  return this != internal_default_instance() && gameruleinfo_ != nullptr;
}
inline bool Scene_Detail::has_gameruleinfo() const {
  return _internal_has_gameruleinfo();
}
inline void Scene_Detail::clear_gameruleinfo() {
  if (GetArena() == nullptr && gameruleinfo_ != nullptr) {
    delete gameruleinfo_;
  }
  gameruleinfo_ = nullptr;
}
inline const ::ChinaChess::Scene_GameRuleInfo& Scene_Detail::_internal_gameruleinfo() const {
  const ::ChinaChess::Scene_GameRuleInfo* p = gameruleinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::ChinaChess::Scene_GameRuleInfo&>(
      ::ChinaChess::_Scene_GameRuleInfo_default_instance_);
}
inline const ::ChinaChess::Scene_GameRuleInfo& Scene_Detail::gameruleinfo() const {
  // @@protoc_insertion_point(field_get:ChinaChess.Scene_Detail.GameRuleInfo)
  return _internal_gameruleinfo();
}
inline void Scene_Detail::unsafe_arena_set_allocated_gameruleinfo(
    ::ChinaChess::Scene_GameRuleInfo* gameruleinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gameruleinfo_);
  }
  gameruleinfo_ = gameruleinfo;
  if (gameruleinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ChinaChess.Scene_Detail.GameRuleInfo)
}
inline ::ChinaChess::Scene_GameRuleInfo* Scene_Detail::release_gameruleinfo() {
  
  ::ChinaChess::Scene_GameRuleInfo* temp = gameruleinfo_;
  gameruleinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ChinaChess::Scene_GameRuleInfo* Scene_Detail::unsafe_arena_release_gameruleinfo() {
  // @@protoc_insertion_point(field_release:ChinaChess.Scene_Detail.GameRuleInfo)
  
  ::ChinaChess::Scene_GameRuleInfo* temp = gameruleinfo_;
  gameruleinfo_ = nullptr;
  return temp;
}
inline ::ChinaChess::Scene_GameRuleInfo* Scene_Detail::_internal_mutable_gameruleinfo() {
  
  if (gameruleinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::ChinaChess::Scene_GameRuleInfo>(GetArena());
    gameruleinfo_ = p;
  }
  return gameruleinfo_;
}
inline ::ChinaChess::Scene_GameRuleInfo* Scene_Detail::mutable_gameruleinfo() {
  // @@protoc_insertion_point(field_mutable:ChinaChess.Scene_Detail.GameRuleInfo)
  return _internal_mutable_gameruleinfo();
}
inline void Scene_Detail::set_allocated_gameruleinfo(::ChinaChess::Scene_GameRuleInfo* gameruleinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gameruleinfo_;
  }
  if (gameruleinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gameruleinfo);
    if (message_arena != submessage_arena) {
      gameruleinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gameruleinfo, submessage_arena);
    }
    
  } else {
    
  }
  gameruleinfo_ = gameruleinfo;
  // @@protoc_insertion_point(field_set_allocated:ChinaChess.Scene_Detail.GameRuleInfo)
}

// repeated int32 cbPeaceCount = 4;
inline int Scene_Detail::_internal_cbpeacecount_size() const {
  return cbpeacecount_.size();
}
inline int Scene_Detail::cbpeacecount_size() const {
  return _internal_cbpeacecount_size();
}
inline void Scene_Detail::clear_cbpeacecount() {
  cbpeacecount_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scene_Detail::_internal_cbpeacecount(int index) const {
  return cbpeacecount_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scene_Detail::cbpeacecount(int index) const {
  // @@protoc_insertion_point(field_get:ChinaChess.Scene_Detail.cbPeaceCount)
  return _internal_cbpeacecount(index);
}
inline void Scene_Detail::set_cbpeacecount(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  cbpeacecount_.Set(index, value);
  // @@protoc_insertion_point(field_set:ChinaChess.Scene_Detail.cbPeaceCount)
}
inline void Scene_Detail::_internal_add_cbpeacecount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  cbpeacecount_.Add(value);
}
inline void Scene_Detail::add_cbpeacecount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_cbpeacecount(value);
  // @@protoc_insertion_point(field_add:ChinaChess.Scene_Detail.cbPeaceCount)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Scene_Detail::_internal_cbpeacecount() const {
  return cbpeacecount_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Scene_Detail::cbpeacecount() const {
  // @@protoc_insertion_point(field_list:ChinaChess.Scene_Detail.cbPeaceCount)
  return _internal_cbpeacecount();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Scene_Detail::_internal_mutable_cbpeacecount() {
  return &cbpeacecount_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Scene_Detail::mutable_cbpeacecount() {
  // @@protoc_insertion_point(field_mutable_list:ChinaChess.Scene_Detail.cbPeaceCount)
  return _internal_mutable_cbpeacecount();
}

// repeated int32 cbRegretCount = 5;
inline int Scene_Detail::_internal_cbregretcount_size() const {
  return cbregretcount_.size();
}
inline int Scene_Detail::cbregretcount_size() const {
  return _internal_cbregretcount_size();
}
inline void Scene_Detail::clear_cbregretcount() {
  cbregretcount_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scene_Detail::_internal_cbregretcount(int index) const {
  return cbregretcount_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scene_Detail::cbregretcount(int index) const {
  // @@protoc_insertion_point(field_get:ChinaChess.Scene_Detail.cbRegretCount)
  return _internal_cbregretcount(index);
}
inline void Scene_Detail::set_cbregretcount(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  cbregretcount_.Set(index, value);
  // @@protoc_insertion_point(field_set:ChinaChess.Scene_Detail.cbRegretCount)
}
inline void Scene_Detail::_internal_add_cbregretcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  cbregretcount_.Add(value);
}
inline void Scene_Detail::add_cbregretcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_cbregretcount(value);
  // @@protoc_insertion_point(field_add:ChinaChess.Scene_Detail.cbRegretCount)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Scene_Detail::_internal_cbregretcount() const {
  return cbregretcount_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Scene_Detail::cbregretcount() const {
  // @@protoc_insertion_point(field_list:ChinaChess.Scene_Detail.cbRegretCount)
  return _internal_cbregretcount();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Scene_Detail::_internal_mutable_cbregretcount() {
  return &cbregretcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Scene_Detail::mutable_cbregretcount() {
  // @@protoc_insertion_point(field_mutable_list:ChinaChess.Scene_Detail.cbRegretCount)
  return _internal_mutable_cbregretcount();
}

// .ChinaChess.Scene_Chess ChessItemArray = 6;
inline bool Scene_Detail::_internal_has_chessitemarray() const {
  return this != internal_default_instance() && chessitemarray_ != nullptr;
}
inline bool Scene_Detail::has_chessitemarray() const {
  return _internal_has_chessitemarray();
}
inline void Scene_Detail::clear_chessitemarray() {
  if (GetArena() == nullptr && chessitemarray_ != nullptr) {
    delete chessitemarray_;
  }
  chessitemarray_ = nullptr;
}
inline const ::ChinaChess::Scene_Chess& Scene_Detail::_internal_chessitemarray() const {
  const ::ChinaChess::Scene_Chess* p = chessitemarray_;
  return p != nullptr ? *p : reinterpret_cast<const ::ChinaChess::Scene_Chess&>(
      ::ChinaChess::_Scene_Chess_default_instance_);
}
inline const ::ChinaChess::Scene_Chess& Scene_Detail::chessitemarray() const {
  // @@protoc_insertion_point(field_get:ChinaChess.Scene_Detail.ChessItemArray)
  return _internal_chessitemarray();
}
inline void Scene_Detail::unsafe_arena_set_allocated_chessitemarray(
    ::ChinaChess::Scene_Chess* chessitemarray) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chessitemarray_);
  }
  chessitemarray_ = chessitemarray;
  if (chessitemarray) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ChinaChess.Scene_Detail.ChessItemArray)
}
inline ::ChinaChess::Scene_Chess* Scene_Detail::release_chessitemarray() {
  
  ::ChinaChess::Scene_Chess* temp = chessitemarray_;
  chessitemarray_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ChinaChess::Scene_Chess* Scene_Detail::unsafe_arena_release_chessitemarray() {
  // @@protoc_insertion_point(field_release:ChinaChess.Scene_Detail.ChessItemArray)
  
  ::ChinaChess::Scene_Chess* temp = chessitemarray_;
  chessitemarray_ = nullptr;
  return temp;
}
inline ::ChinaChess::Scene_Chess* Scene_Detail::_internal_mutable_chessitemarray() {
  
  if (chessitemarray_ == nullptr) {
    auto* p = CreateMaybeMessage<::ChinaChess::Scene_Chess>(GetArena());
    chessitemarray_ = p;
  }
  return chessitemarray_;
}
inline ::ChinaChess::Scene_Chess* Scene_Detail::mutable_chessitemarray() {
  // @@protoc_insertion_point(field_mutable:ChinaChess.Scene_Detail.ChessItemArray)
  return _internal_mutable_chessitemarray();
}
inline void Scene_Detail::set_allocated_chessitemarray(::ChinaChess::Scene_Chess* chessitemarray) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete chessitemarray_;
  }
  if (chessitemarray) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(chessitemarray);
    if (message_arena != submessage_arena) {
      chessitemarray = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chessitemarray, submessage_arena);
    }
    
  } else {
    
  }
  chessitemarray_ = chessitemarray;
  // @@protoc_insertion_point(field_set_allocated:ChinaChess.Scene_Detail.ChessItemArray)
}

// -------------------------------------------------------------------

// SC_SceneInfo

// int32 status = 1;
inline void SC_SceneInfo::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_SceneInfo::status() const {
  // @@protoc_insertion_point(field_get:ChinaChess.SC_SceneInfo.status)
  return _internal_status();
}
inline void SC_SceneInfo::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void SC_SceneInfo::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:ChinaChess.SC_SceneInfo.status)
}

// .ChinaChess.Scene_Detail free = 2;
inline bool SC_SceneInfo::_internal_has_free() const {
  return this != internal_default_instance() && free_ != nullptr;
}
inline bool SC_SceneInfo::has_free() const {
  return _internal_has_free();
}
inline void SC_SceneInfo::clear_free() {
  if (GetArena() == nullptr && free_ != nullptr) {
    delete free_;
  }
  free_ = nullptr;
}
inline const ::ChinaChess::Scene_Detail& SC_SceneInfo::_internal_free() const {
  const ::ChinaChess::Scene_Detail* p = free_;
  return p != nullptr ? *p : reinterpret_cast<const ::ChinaChess::Scene_Detail&>(
      ::ChinaChess::_Scene_Detail_default_instance_);
}
inline const ::ChinaChess::Scene_Detail& SC_SceneInfo::free() const {
  // @@protoc_insertion_point(field_get:ChinaChess.SC_SceneInfo.free)
  return _internal_free();
}
inline void SC_SceneInfo::unsafe_arena_set_allocated_free(
    ::ChinaChess::Scene_Detail* free) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(free_);
  }
  free_ = free;
  if (free) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ChinaChess.SC_SceneInfo.free)
}
inline ::ChinaChess::Scene_Detail* SC_SceneInfo::release_free() {
  
  ::ChinaChess::Scene_Detail* temp = free_;
  free_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ChinaChess::Scene_Detail* SC_SceneInfo::unsafe_arena_release_free() {
  // @@protoc_insertion_point(field_release:ChinaChess.SC_SceneInfo.free)
  
  ::ChinaChess::Scene_Detail* temp = free_;
  free_ = nullptr;
  return temp;
}
inline ::ChinaChess::Scene_Detail* SC_SceneInfo::_internal_mutable_free() {
  
  if (free_ == nullptr) {
    auto* p = CreateMaybeMessage<::ChinaChess::Scene_Detail>(GetArena());
    free_ = p;
  }
  return free_;
}
inline ::ChinaChess::Scene_Detail* SC_SceneInfo::mutable_free() {
  // @@protoc_insertion_point(field_mutable:ChinaChess.SC_SceneInfo.free)
  return _internal_mutable_free();
}
inline void SC_SceneInfo::set_allocated_free(::ChinaChess::Scene_Detail* free) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete free_;
  }
  if (free) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(free);
    if (message_arena != submessage_arena) {
      free = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, free, submessage_arena);
    }
    
  } else {
    
  }
  free_ = free;
  // @@protoc_insertion_point(field_set_allocated:ChinaChess.SC_SceneInfo.free)
}

// .ChinaChess.Scene_Detail play = 3;
inline bool SC_SceneInfo::_internal_has_play() const {
  return this != internal_default_instance() && play_ != nullptr;
}
inline bool SC_SceneInfo::has_play() const {
  return _internal_has_play();
}
inline void SC_SceneInfo::clear_play() {
  if (GetArena() == nullptr && play_ != nullptr) {
    delete play_;
  }
  play_ = nullptr;
}
inline const ::ChinaChess::Scene_Detail& SC_SceneInfo::_internal_play() const {
  const ::ChinaChess::Scene_Detail* p = play_;
  return p != nullptr ? *p : reinterpret_cast<const ::ChinaChess::Scene_Detail&>(
      ::ChinaChess::_Scene_Detail_default_instance_);
}
inline const ::ChinaChess::Scene_Detail& SC_SceneInfo::play() const {
  // @@protoc_insertion_point(field_get:ChinaChess.SC_SceneInfo.play)
  return _internal_play();
}
inline void SC_SceneInfo::unsafe_arena_set_allocated_play(
    ::ChinaChess::Scene_Detail* play) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(play_);
  }
  play_ = play;
  if (play) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ChinaChess.SC_SceneInfo.play)
}
inline ::ChinaChess::Scene_Detail* SC_SceneInfo::release_play() {
  
  ::ChinaChess::Scene_Detail* temp = play_;
  play_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ChinaChess::Scene_Detail* SC_SceneInfo::unsafe_arena_release_play() {
  // @@protoc_insertion_point(field_release:ChinaChess.SC_SceneInfo.play)
  
  ::ChinaChess::Scene_Detail* temp = play_;
  play_ = nullptr;
  return temp;
}
inline ::ChinaChess::Scene_Detail* SC_SceneInfo::_internal_mutable_play() {
  
  if (play_ == nullptr) {
    auto* p = CreateMaybeMessage<::ChinaChess::Scene_Detail>(GetArena());
    play_ = p;
  }
  return play_;
}
inline ::ChinaChess::Scene_Detail* SC_SceneInfo::mutable_play() {
  // @@protoc_insertion_point(field_mutable:ChinaChess.SC_SceneInfo.play)
  return _internal_mutable_play();
}
inline void SC_SceneInfo::set_allocated_play(::ChinaChess::Scene_Detail* play) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete play_;
  }
  if (play) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(play);
    if (message_arena != submessage_arena) {
      play = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, play, submessage_arena);
    }
    
  } else {
    
  }
  play_ = play;
  // @@protoc_insertion_point(field_set_allocated:ChinaChess.SC_SceneInfo.play)
}

// -------------------------------------------------------------------

// CMD_Chess_MOVE_CHESS

// int32 cbXSourcePos = 1;
inline void CMD_Chess_MOVE_CHESS::clear_cbxsourcepos() {
  cbxsourcepos_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_Chess_MOVE_CHESS::_internal_cbxsourcepos() const {
  return cbxsourcepos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_Chess_MOVE_CHESS::cbxsourcepos() const {
  // @@protoc_insertion_point(field_get:ChinaChess.CMD_Chess_MOVE_CHESS.cbXSourcePos)
  return _internal_cbxsourcepos();
}
inline void CMD_Chess_MOVE_CHESS::_internal_set_cbxsourcepos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cbxsourcepos_ = value;
}
inline void CMD_Chess_MOVE_CHESS::set_cbxsourcepos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cbxsourcepos(value);
  // @@protoc_insertion_point(field_set:ChinaChess.CMD_Chess_MOVE_CHESS.cbXSourcePos)
}

// int32 cbYSourcePos = 2;
inline void CMD_Chess_MOVE_CHESS::clear_cbysourcepos() {
  cbysourcepos_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_Chess_MOVE_CHESS::_internal_cbysourcepos() const {
  return cbysourcepos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_Chess_MOVE_CHESS::cbysourcepos() const {
  // @@protoc_insertion_point(field_get:ChinaChess.CMD_Chess_MOVE_CHESS.cbYSourcePos)
  return _internal_cbysourcepos();
}
inline void CMD_Chess_MOVE_CHESS::_internal_set_cbysourcepos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cbysourcepos_ = value;
}
inline void CMD_Chess_MOVE_CHESS::set_cbysourcepos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cbysourcepos(value);
  // @@protoc_insertion_point(field_set:ChinaChess.CMD_Chess_MOVE_CHESS.cbYSourcePos)
}

// int32 cbXTargetPos = 3;
inline void CMD_Chess_MOVE_CHESS::clear_cbxtargetpos() {
  cbxtargetpos_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_Chess_MOVE_CHESS::_internal_cbxtargetpos() const {
  return cbxtargetpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_Chess_MOVE_CHESS::cbxtargetpos() const {
  // @@protoc_insertion_point(field_get:ChinaChess.CMD_Chess_MOVE_CHESS.cbXTargetPos)
  return _internal_cbxtargetpos();
}
inline void CMD_Chess_MOVE_CHESS::_internal_set_cbxtargetpos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cbxtargetpos_ = value;
}
inline void CMD_Chess_MOVE_CHESS::set_cbxtargetpos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cbxtargetpos(value);
  // @@protoc_insertion_point(field_set:ChinaChess.CMD_Chess_MOVE_CHESS.cbXTargetPos)
}

// int32 cbYTargetPos = 4;
inline void CMD_Chess_MOVE_CHESS::clear_cbytargetpos() {
  cbytargetpos_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_Chess_MOVE_CHESS::_internal_cbytargetpos() const {
  return cbytargetpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_Chess_MOVE_CHESS::cbytargetpos() const {
  // @@protoc_insertion_point(field_get:ChinaChess.CMD_Chess_MOVE_CHESS.cbYTargetPos)
  return _internal_cbytargetpos();
}
inline void CMD_Chess_MOVE_CHESS::_internal_set_cbytargetpos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cbytargetpos_ = value;
}
inline void CMD_Chess_MOVE_CHESS::set_cbytargetpos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cbytargetpos(value);
  // @@protoc_insertion_point(field_set:ChinaChess.CMD_Chess_MOVE_CHESS.cbYTargetPos)
}

// int32 wCurrentUser = 5;
inline void CMD_Chess_MOVE_CHESS::clear_wcurrentuser() {
  wcurrentuser_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_Chess_MOVE_CHESS::_internal_wcurrentuser() const {
  return wcurrentuser_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_Chess_MOVE_CHESS::wcurrentuser() const {
  // @@protoc_insertion_point(field_get:ChinaChess.CMD_Chess_MOVE_CHESS.wCurrentUser)
  return _internal_wcurrentuser();
}
inline void CMD_Chess_MOVE_CHESS::_internal_set_wcurrentuser(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wcurrentuser_ = value;
}
inline void CMD_Chess_MOVE_CHESS::set_wcurrentuser(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wcurrentuser(value);
  // @@protoc_insertion_point(field_set:ChinaChess.CMD_Chess_MOVE_CHESS.wCurrentUser)
}

// -------------------------------------------------------------------

// RegretResult

// int32 wRegretUser = 1;
inline void RegretResult::clear_wregretuser() {
  wregretuser_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegretResult::_internal_wregretuser() const {
  return wregretuser_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegretResult::wregretuser() const {
  // @@protoc_insertion_point(field_get:ChinaChess.RegretResult.wRegretUser)
  return _internal_wregretuser();
}
inline void RegretResult::_internal_set_wregretuser(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wregretuser_ = value;
}
inline void RegretResult::set_wregretuser(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wregretuser(value);
  // @@protoc_insertion_point(field_set:ChinaChess.RegretResult.wRegretUser)
}

// int32 wCurrentUser = 2;
inline void RegretResult::clear_wcurrentuser() {
  wcurrentuser_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegretResult::_internal_wcurrentuser() const {
  return wcurrentuser_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegretResult::wcurrentuser() const {
  // @@protoc_insertion_point(field_get:ChinaChess.RegretResult.wCurrentUser)
  return _internal_wcurrentuser();
}
inline void RegretResult::_internal_set_wcurrentuser(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wcurrentuser_ = value;
}
inline void RegretResult::set_wcurrentuser(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wcurrentuser(value);
  // @@protoc_insertion_point(field_set:ChinaChess.RegretResult.wCurrentUser)
}

// int32 cbRegretCount = 3;
inline void RegretResult::clear_cbregretcount() {
  cbregretcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegretResult::_internal_cbregretcount() const {
  return cbregretcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegretResult::cbregretcount() const {
  // @@protoc_insertion_point(field_get:ChinaChess.RegretResult.cbRegretCount)
  return _internal_cbregretcount();
}
inline void RegretResult::_internal_set_cbregretcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cbregretcount_ = value;
}
inline void RegretResult::set_cbregretcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cbregretcount(value);
  // @@protoc_insertion_point(field_set:ChinaChess.RegretResult.cbRegretCount)
}

// -------------------------------------------------------------------

// CMD_Common

// int32 opIndex = 1;
inline void CMD_Common::clear_opindex() {
  opindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_Common::_internal_opindex() const {
  return opindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_Common::opindex() const {
  // @@protoc_insertion_point(field_get:ChinaChess.CMD_Common.opIndex)
  return _internal_opindex();
}
inline void CMD_Common::_internal_set_opindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  opindex_ = value;
}
inline void CMD_Common::set_opindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_opindex(value);
  // @@protoc_insertion_point(field_set:ChinaChess.CMD_Common.opIndex)
}

// int32 waitTime = 2;
inline void CMD_Common::clear_waittime() {
  waittime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_Common::_internal_waittime() const {
  return waittime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_Common::waittime() const {
  // @@protoc_insertion_point(field_get:ChinaChess.CMD_Common.waitTime)
  return _internal_waittime();
}
inline void CMD_Common::_internal_set_waittime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  waittime_ = value;
}
inline void CMD_Common::set_waittime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_waittime(value);
  // @@protoc_insertion_point(field_set:ChinaChess.CMD_Common.waitTime)
}

// -------------------------------------------------------------------

// GameEnd

// int32 wWinUser = 1;
inline void GameEnd::clear_wwinuser() {
  wwinuser_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameEnd::_internal_wwinuser() const {
  return wwinuser_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameEnd::wwinuser() const {
  // @@protoc_insertion_point(field_get:ChinaChess.GameEnd.wWinUser)
  return _internal_wwinuser();
}
inline void GameEnd::_internal_set_wwinuser(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wwinuser_ = value;
}
inline void GameEnd::set_wwinuser(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wwinuser(value);
  // @@protoc_insertion_point(field_set:ChinaChess.GameEnd.wWinUser)
}

// repeated int64 lUserScore = 2;
inline int GameEnd::_internal_luserscore_size() const {
  return luserscore_.size();
}
inline int GameEnd::luserscore_size() const {
  return _internal_luserscore_size();
}
inline void GameEnd::clear_luserscore() {
  luserscore_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameEnd::_internal_luserscore(int index) const {
  return luserscore_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameEnd::luserscore(int index) const {
  // @@protoc_insertion_point(field_get:ChinaChess.GameEnd.lUserScore)
  return _internal_luserscore(index);
}
inline void GameEnd::set_luserscore(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  luserscore_.Set(index, value);
  // @@protoc_insertion_point(field_set:ChinaChess.GameEnd.lUserScore)
}
inline void GameEnd::_internal_add_luserscore(::PROTOBUF_NAMESPACE_ID::int64 value) {
  luserscore_.Add(value);
}
inline void GameEnd::add_luserscore(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_luserscore(value);
  // @@protoc_insertion_point(field_add:ChinaChess.GameEnd.lUserScore)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
GameEnd::_internal_luserscore() const {
  return luserscore_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
GameEnd::luserscore() const {
  // @@protoc_insertion_point(field_list:ChinaChess.GameEnd.lUserScore)
  return _internal_luserscore();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
GameEnd::_internal_mutable_luserscore() {
  return &luserscore_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
GameEnd::mutable_luserscore() {
  // @@protoc_insertion_point(field_mutable_list:ChinaChess.GameEnd.lUserScore)
  return _internal_mutable_luserscore();
}

// -------------------------------------------------------------------

// Chess_Manual_Item

// int32 cbXSourceChessPos = 1;
inline void Chess_Manual_Item::clear_cbxsourcechesspos() {
  cbxsourcechesspos_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chess_Manual_Item::_internal_cbxsourcechesspos() const {
  return cbxsourcechesspos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chess_Manual_Item::cbxsourcechesspos() const {
  // @@protoc_insertion_point(field_get:ChinaChess.Chess_Manual_Item.cbXSourceChessPos)
  return _internal_cbxsourcechesspos();
}
inline void Chess_Manual_Item::_internal_set_cbxsourcechesspos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cbxsourcechesspos_ = value;
}
inline void Chess_Manual_Item::set_cbxsourcechesspos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cbxsourcechesspos(value);
  // @@protoc_insertion_point(field_set:ChinaChess.Chess_Manual_Item.cbXSourceChessPos)
}

// int32 cbYSourceChessPos = 2;
inline void Chess_Manual_Item::clear_cbysourcechesspos() {
  cbysourcechesspos_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chess_Manual_Item::_internal_cbysourcechesspos() const {
  return cbysourcechesspos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chess_Manual_Item::cbysourcechesspos() const {
  // @@protoc_insertion_point(field_get:ChinaChess.Chess_Manual_Item.cbYSourceChessPos)
  return _internal_cbysourcechesspos();
}
inline void Chess_Manual_Item::_internal_set_cbysourcechesspos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cbysourcechesspos_ = value;
}
inline void Chess_Manual_Item::set_cbysourcechesspos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cbysourcechesspos(value);
  // @@protoc_insertion_point(field_set:ChinaChess.Chess_Manual_Item.cbYSourceChessPos)
}

// int32 cbXTargetChessPos = 3;
inline void Chess_Manual_Item::clear_cbxtargetchesspos() {
  cbxtargetchesspos_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chess_Manual_Item::_internal_cbxtargetchesspos() const {
  return cbxtargetchesspos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chess_Manual_Item::cbxtargetchesspos() const {
  // @@protoc_insertion_point(field_get:ChinaChess.Chess_Manual_Item.cbXTargetChessPos)
  return _internal_cbxtargetchesspos();
}
inline void Chess_Manual_Item::_internal_set_cbxtargetchesspos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cbxtargetchesspos_ = value;
}
inline void Chess_Manual_Item::set_cbxtargetchesspos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cbxtargetchesspos(value);
  // @@protoc_insertion_point(field_set:ChinaChess.Chess_Manual_Item.cbXTargetChessPos)
}

// int32 cbYTargetChessPos = 4;
inline void Chess_Manual_Item::clear_cbytargetchesspos() {
  cbytargetchesspos_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chess_Manual_Item::_internal_cbytargetchesspos() const {
  return cbytargetchesspos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chess_Manual_Item::cbytargetchesspos() const {
  // @@protoc_insertion_point(field_get:ChinaChess.Chess_Manual_Item.cbYTargetChessPos)
  return _internal_cbytargetchesspos();
}
inline void Chess_Manual_Item::_internal_set_cbytargetchesspos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cbytargetchesspos_ = value;
}
inline void Chess_Manual_Item::set_cbytargetchesspos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cbytargetchesspos(value);
  // @@protoc_insertion_point(field_set:ChinaChess.Chess_Manual_Item.cbYTargetChessPos)
}

// int32 cbUniteChess = 5;
inline void Chess_Manual_Item::clear_cbunitechess() {
  cbunitechess_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chess_Manual_Item::_internal_cbunitechess() const {
  return cbunitechess_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chess_Manual_Item::cbunitechess() const {
  // @@protoc_insertion_point(field_get:ChinaChess.Chess_Manual_Item.cbUniteChess)
  return _internal_cbunitechess();
}
inline void Chess_Manual_Item::_internal_set_cbunitechess(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cbunitechess_ = value;
}
inline void Chess_Manual_Item::set_cbunitechess(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cbunitechess(value);
  // @@protoc_insertion_point(field_set:ChinaChess.Chess_Manual_Item.cbUniteChess)
}

// int32 cbSourceColor = 6;
inline void Chess_Manual_Item::clear_cbsourcecolor() {
  cbsourcecolor_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chess_Manual_Item::_internal_cbsourcecolor() const {
  return cbsourcecolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chess_Manual_Item::cbsourcecolor() const {
  // @@protoc_insertion_point(field_get:ChinaChess.Chess_Manual_Item.cbSourceColor)
  return _internal_cbsourcecolor();
}
inline void Chess_Manual_Item::_internal_set_cbsourcecolor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cbsourcecolor_ = value;
}
inline void Chess_Manual_Item::set_cbsourcecolor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cbsourcecolor(value);
  // @@protoc_insertion_point(field_set:ChinaChess.Chess_Manual_Item.cbSourceColor)
}

// -------------------------------------------------------------------

// Chess_Manual

// repeated .ChinaChess.Chess_Manual_Item items = 1;
inline int Chess_Manual::_internal_items_size() const {
  return items_.size();
}
inline int Chess_Manual::items_size() const {
  return _internal_items_size();
}
inline void Chess_Manual::clear_items() {
  items_.Clear();
}
inline ::ChinaChess::Chess_Manual_Item* Chess_Manual::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ChinaChess.Chess_Manual.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChinaChess::Chess_Manual_Item >*
Chess_Manual::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ChinaChess.Chess_Manual.items)
  return &items_;
}
inline const ::ChinaChess::Chess_Manual_Item& Chess_Manual::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::ChinaChess::Chess_Manual_Item& Chess_Manual::items(int index) const {
  // @@protoc_insertion_point(field_get:ChinaChess.Chess_Manual.items)
  return _internal_items(index);
}
inline ::ChinaChess::Chess_Manual_Item* Chess_Manual::_internal_add_items() {
  return items_.Add();
}
inline ::ChinaChess::Chess_Manual_Item* Chess_Manual::add_items() {
  // @@protoc_insertion_point(field_add:ChinaChess.Chess_Manual.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChinaChess::Chess_Manual_Item >&
Chess_Manual::items() const {
  // @@protoc_insertion_point(field_list:ChinaChess.Chess_Manual.items)
  return items_;
}

// -------------------------------------------------------------------

// Notify_Timer

// int32 waitTime = 1;
inline void Notify_Timer::clear_waittime() {
  waittime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Notify_Timer::_internal_waittime() const {
  return waittime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Notify_Timer::waittime() const {
  // @@protoc_insertion_point(field_get:ChinaChess.Notify_Timer.waitTime)
  return _internal_waittime();
}
inline void Notify_Timer::_internal_set_waittime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  waittime_ = value;
}
inline void Notify_Timer::set_waittime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_waittime(value);
  // @@protoc_insertion_point(field_set:ChinaChess.Notify_Timer.waitTime)
}

// int32 roomType = 2;
inline void Notify_Timer::clear_roomtype() {
  roomtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Notify_Timer::_internal_roomtype() const {
  return roomtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Notify_Timer::roomtype() const {
  // @@protoc_insertion_point(field_get:ChinaChess.Notify_Timer.roomType)
  return _internal_roomtype();
}
inline void Notify_Timer::_internal_set_roomtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomtype_ = value;
}
inline void Notify_Timer::set_roomtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roomtype(value);
  // @@protoc_insertion_point(field_set:ChinaChess.Notify_Timer.roomType)
}

// -------------------------------------------------------------------

// CMD_Make_Rule

// int32 errorID = 1;
inline void CMD_Make_Rule::clear_errorid() {
  errorid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_Make_Rule::_internal_errorid() const {
  return errorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_Make_Rule::errorid() const {
  // @@protoc_insertion_point(field_get:ChinaChess.CMD_Make_Rule.errorID)
  return _internal_errorid();
}
inline void CMD_Make_Rule::_internal_set_errorid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errorid_ = value;
}
inline void CMD_Make_Rule::set_errorid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errorid(value);
  // @@protoc_insertion_point(field_set:ChinaChess.CMD_Make_Rule.errorID)
}

// int64 score = 2;
inline void CMD_Make_Rule::clear_score() {
  score_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CMD_Make_Rule::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CMD_Make_Rule::score() const {
  // @@protoc_insertion_point(field_get:ChinaChess.CMD_Make_Rule.score)
  return _internal_score();
}
inline void CMD_Make_Rule::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  score_ = value;
}
inline void CMD_Make_Rule::set_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:ChinaChess.CMD_Make_Rule.score)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ChinaChess

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ChinaChess::EMsgIDSubGame> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ChinaChess::EMsgIDSubGame>() {
  return ::ChinaChess::EMsgIDSubGame_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ChinaChess_2eproto
