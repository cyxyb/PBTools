// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TK.proto

#include "TK.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_TK_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Hit_Icon_TK_2eproto;
namespace TK {
class SC_SceneInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_SceneInfo> _instance;
} _SC_SceneInfo_default_instance_;
class Hit_IconDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Hit_Icon> _instance;
} _Hit_Icon_default_instance_;
class CMD_3D_SC_ResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_3D_SC_Result> _instance;
} _CMD_3D_SC_Result_default_instance_;
}  // namespace TK
static void InitDefaultsscc_info_CMD_3D_SC_Result_TK_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TK::_CMD_3D_SC_Result_default_instance_;
    new (ptr) ::TK::CMD_3D_SC_Result();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMD_3D_SC_Result_TK_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMD_3D_SC_Result_TK_2eproto}, {
      &scc_info_Hit_Icon_TK_2eproto.base,}};

static void InitDefaultsscc_info_Hit_Icon_TK_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TK::_Hit_Icon_default_instance_;
    new (ptr) ::TK::Hit_Icon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Hit_Icon_TK_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Hit_Icon_TK_2eproto}, {}};

static void InitDefaultsscc_info_SC_SceneInfo_TK_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TK::_SC_SceneInfo_default_instance_;
    new (ptr) ::TK::SC_SceneInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_SceneInfo_TK_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_SceneInfo_TK_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TK_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_TK_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TK_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TK_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TK::SC_SceneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TK::SC_SceneInfo, free_count_),
  PROTOBUF_FIELD_OFFSET(::TK::SC_SceneInfo, cur_bet_),
  PROTOBUF_FIELD_OFFSET(::TK::SC_SceneInfo, bet_),
  PROTOBUF_FIELD_OFFSET(::TK::SC_SceneInfo, free_type_),
  PROTOBUF_FIELD_OFFSET(::TK::SC_SceneInfo, ext_odd_),
  PROTOBUF_FIELD_OFFSET(::TK::SC_SceneInfo, start_row_),
  PROTOBUF_FIELD_OFFSET(::TK::SC_SceneInfo, start_col_),
  PROTOBUF_FIELD_OFFSET(::TK::SC_SceneInfo, type_),
  PROTOBUF_FIELD_OFFSET(::TK::SC_SceneInfo, ext_wild_count_),
  PROTOBUF_FIELD_OFFSET(::TK::SC_SceneInfo, fixed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TK::Hit_Icon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TK::Hit_Icon, hit_icon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TK::CMD_3D_SC_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TK::CMD_3D_SC_Result, icon_),
  PROTOBUF_FIELD_OFFSET(::TK::CMD_3D_SC_Result, hit_icon_),
  PROTOBUF_FIELD_OFFSET(::TK::CMD_3D_SC_Result, win_gold_),
  PROTOBUF_FIELD_OFFSET(::TK::CMD_3D_SC_Result, free_count_),
  PROTOBUF_FIELD_OFFSET(::TK::CMD_3D_SC_Result, free_type_),
  PROTOBUF_FIELD_OFFSET(::TK::CMD_3D_SC_Result, no_lmal_free_type_),
  PROTOBUF_FIELD_OFFSET(::TK::CMD_3D_SC_Result, ext_odd_),
  PROTOBUF_FIELD_OFFSET(::TK::CMD_3D_SC_Result, start_row_),
  PROTOBUF_FIELD_OFFSET(::TK::CMD_3D_SC_Result, start_col_),
  PROTOBUF_FIELD_OFFSET(::TK::CMD_3D_SC_Result, type_),
  PROTOBUF_FIELD_OFFSET(::TK::CMD_3D_SC_Result, ext_wild_count_),
  PROTOBUF_FIELD_OFFSET(::TK::CMD_3D_SC_Result, fixed_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TK::SC_SceneInfo)},
  { 15, -1, sizeof(::TK::Hit_Icon)},
  { 21, -1, sizeof(::TK::CMD_3D_SC_Result)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TK::_SC_SceneInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TK::_Hit_Icon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TK::_CMD_3D_SC_Result_default_instance_),
};

const char descriptor_table_protodef_TK_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010TK.proto\022\002TK\"\277\001\n\014SC_SceneInfo\022\022\n\nfree_"
  "count\030\001 \001(\005\022\017\n\007cur_bet\030\002 \001(\005\022\013\n\003bet\030\004 \003("
  "\005\022\021\n\tfree_type\030\005 \001(\005\022\017\n\007ext_odd\030\006 \001(\005\022\021\n"
  "\tstart_row\030\007 \001(\005\022\021\n\tstart_col\030\010 \001(\005\022\014\n\004t"
  "ype\030\t \001(\005\022\026\n\016ext_wild_count\030\n \001(\005\022\r\n\005fix"
  "ed\030\013 \003(\005\"\034\n\010Hit_Icon\022\020\n\010hit_icon\030\001 \003(\005\"\200"
  "\002\n\020CMD_3D_SC_Result\022\014\n\004icon\030\001 \003(\005\022\036\n\010hit"
  "_icon\030\002 \003(\0132\014.TK.Hit_Icon\022\020\n\010win_gold\030\003 "
  "\001(\005\022\022\n\nfree_count\030\004 \001(\005\022\021\n\tfree_type\030\005 \001"
  "(\005\022\031\n\021no_lmal_free_type\030\006 \001(\005\022\017\n\007ext_odd"
  "\030\007 \001(\005\022\021\n\tstart_row\030\010 \001(\005\022\021\n\tstart_col\030\t"
  " \001(\005\022\014\n\004type\030\n \001(\005\022\026\n\016ext_wild_count\030\013 \001"
  "(\005\022\r\n\005fixed\030\014 \003(\005*M\n\010EMsgIDTK\022\025\n\021SUB_CS_"
  "GAME_START\020\000\022\025\n\021SUB_SC_GAME_START\020\001\022\023\n\017S"
  "UB_SC_BET_FAIL\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_TK_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_TK_2eproto_sccs[3] = {
  &scc_info_CMD_3D_SC_Result_TK_2eproto.base,
  &scc_info_Hit_Icon_TK_2eproto.base,
  &scc_info_SC_SceneInfo_TK_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TK_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TK_2eproto = {
  false, false, descriptor_table_protodef_TK_2eproto, "TK.proto", 584,
  &descriptor_table_TK_2eproto_once, descriptor_table_TK_2eproto_sccs, descriptor_table_TK_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_TK_2eproto::offsets,
  file_level_metadata_TK_2eproto, 3, file_level_enum_descriptors_TK_2eproto, file_level_service_descriptors_TK_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_TK_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_TK_2eproto)), true);
namespace TK {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDTK_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TK_2eproto);
  return file_level_enum_descriptors_TK_2eproto[0];
}
bool EMsgIDTK_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SC_SceneInfo::_Internal {
 public:
};

SC_SceneInfo::SC_SceneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bet_(arena),
  fixed_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TK.SC_SceneInfo)
}
SC_SceneInfo::SC_SceneInfo(const SC_SceneInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bet_(from.bet_),
      fixed_(from.fixed_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&free_count_, &from.free_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&ext_wild_count_) -
    reinterpret_cast<char*>(&free_count_)) + sizeof(ext_wild_count_));
  // @@protoc_insertion_point(copy_constructor:TK.SC_SceneInfo)
}

void SC_SceneInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&free_count_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ext_wild_count_) -
      reinterpret_cast<char*>(&free_count_)) + sizeof(ext_wild_count_));
}

SC_SceneInfo::~SC_SceneInfo() {
  // @@protoc_insertion_point(destructor:TK.SC_SceneInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SC_SceneInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SC_SceneInfo::ArenaDtor(void* object) {
  SC_SceneInfo* _this = reinterpret_cast< SC_SceneInfo* >(object);
  (void)_this;
}
void SC_SceneInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SC_SceneInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_SceneInfo& SC_SceneInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_SceneInfo_TK_2eproto.base);
  return *internal_default_instance();
}


void SC_SceneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TK.SC_SceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bet_.Clear();
  fixed_.Clear();
  ::memset(&free_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ext_wild_count_) -
      reinterpret_cast<char*>(&free_count_)) + sizeof(ext_wild_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_SceneInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 free_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          free_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cur_bet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cur_bet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 bet = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bet(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_bet(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 free_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          free_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ext_odd = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ext_odd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 start_row = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          start_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 start_col = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          start_col_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ext_wild_count = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ext_wild_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 fixed = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_fixed(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88) {
          _internal_add_fixed(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_SceneInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TK.SC_SceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 free_count = 1;
  if (this->free_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_free_count(), target);
  }

  // int32 cur_bet = 2;
  if (this->cur_bet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cur_bet(), target);
  }

  // repeated int32 bet = 4;
  {
    int byte_size = _bet_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_bet(), byte_size, target);
    }
  }

  // int32 free_type = 5;
  if (this->free_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_free_type(), target);
  }

  // int32 ext_odd = 6;
  if (this->ext_odd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_ext_odd(), target);
  }

  // int32 start_row = 7;
  if (this->start_row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_start_row(), target);
  }

  // int32 start_col = 8;
  if (this->start_col() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_start_col(), target);
  }

  // int32 type = 9;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_type(), target);
  }

  // int32 ext_wild_count = 10;
  if (this->ext_wild_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_ext_wild_count(), target);
  }

  // repeated int32 fixed = 11;
  {
    int byte_size = _fixed_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          11, _internal_fixed(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TK.SC_SceneInfo)
  return target;
}

size_t SC_SceneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TK.SC_SceneInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 bet = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bet_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bet_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 fixed = 11;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->fixed_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _fixed_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 free_count = 1;
  if (this->free_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_free_count());
  }

  // int32 cur_bet = 2;
  if (this->cur_bet() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur_bet());
  }

  // int32 free_type = 5;
  if (this->free_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_free_type());
  }

  // int32 ext_odd = 6;
  if (this->ext_odd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ext_odd());
  }

  // int32 start_row = 7;
  if (this->start_row() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start_row());
  }

  // int32 start_col = 8;
  if (this->start_col() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start_col());
  }

  // int32 type = 9;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 ext_wild_count = 10;
  if (this->ext_wild_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ext_wild_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_SceneInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TK.SC_SceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_SceneInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_SceneInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TK.SC_SceneInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TK.SC_SceneInfo)
    MergeFrom(*source);
  }
}

void SC_SceneInfo::MergeFrom(const SC_SceneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TK.SC_SceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bet_.MergeFrom(from.bet_);
  fixed_.MergeFrom(from.fixed_);
  if (from.free_count() != 0) {
    _internal_set_free_count(from._internal_free_count());
  }
  if (from.cur_bet() != 0) {
    _internal_set_cur_bet(from._internal_cur_bet());
  }
  if (from.free_type() != 0) {
    _internal_set_free_type(from._internal_free_type());
  }
  if (from.ext_odd() != 0) {
    _internal_set_ext_odd(from._internal_ext_odd());
  }
  if (from.start_row() != 0) {
    _internal_set_start_row(from._internal_start_row());
  }
  if (from.start_col() != 0) {
    _internal_set_start_col(from._internal_start_col());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.ext_wild_count() != 0) {
    _internal_set_ext_wild_count(from._internal_ext_wild_count());
  }
}

void SC_SceneInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TK.SC_SceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SceneInfo::CopyFrom(const SC_SceneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TK.SC_SceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_SceneInfo::IsInitialized() const {
  return true;
}

void SC_SceneInfo::InternalSwap(SC_SceneInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bet_.InternalSwap(&other->bet_);
  fixed_.InternalSwap(&other->fixed_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_SceneInfo, ext_wild_count_)
      + sizeof(SC_SceneInfo::ext_wild_count_)
      - PROTOBUF_FIELD_OFFSET(SC_SceneInfo, free_count_)>(
          reinterpret_cast<char*>(&free_count_),
          reinterpret_cast<char*>(&other->free_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_SceneInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Hit_Icon::_Internal {
 public:
};

Hit_Icon::Hit_Icon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hit_icon_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TK.Hit_Icon)
}
Hit_Icon::Hit_Icon(const Hit_Icon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hit_icon_(from.hit_icon_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TK.Hit_Icon)
}

void Hit_Icon::SharedCtor() {
}

Hit_Icon::~Hit_Icon() {
  // @@protoc_insertion_point(destructor:TK.Hit_Icon)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Hit_Icon::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Hit_Icon::ArenaDtor(void* object) {
  Hit_Icon* _this = reinterpret_cast< Hit_Icon* >(object);
  (void)_this;
}
void Hit_Icon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Hit_Icon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Hit_Icon& Hit_Icon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Hit_Icon_TK_2eproto.base);
  return *internal_default_instance();
}


void Hit_Icon::Clear() {
// @@protoc_insertion_point(message_clear_start:TK.Hit_Icon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hit_icon_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Hit_Icon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 hit_icon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_hit_icon(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_hit_icon(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Hit_Icon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TK.Hit_Icon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 hit_icon = 1;
  {
    int byte_size = _hit_icon_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_hit_icon(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TK.Hit_Icon)
  return target;
}

size_t Hit_Icon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TK.Hit_Icon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 hit_icon = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->hit_icon_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _hit_icon_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Hit_Icon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TK.Hit_Icon)
  GOOGLE_DCHECK_NE(&from, this);
  const Hit_Icon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Hit_Icon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TK.Hit_Icon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TK.Hit_Icon)
    MergeFrom(*source);
  }
}

void Hit_Icon::MergeFrom(const Hit_Icon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TK.Hit_Icon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hit_icon_.MergeFrom(from.hit_icon_);
}

void Hit_Icon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TK.Hit_Icon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hit_Icon::CopyFrom(const Hit_Icon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TK.Hit_Icon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hit_Icon::IsInitialized() const {
  return true;
}

void Hit_Icon::InternalSwap(Hit_Icon* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hit_icon_.InternalSwap(&other->hit_icon_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Hit_Icon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_3D_SC_Result::_Internal {
 public:
};

CMD_3D_SC_Result::CMD_3D_SC_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  icon_(arena),
  hit_icon_(arena),
  fixed_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TK.CMD_3D_SC_Result)
}
CMD_3D_SC_Result::CMD_3D_SC_Result(const CMD_3D_SC_Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      icon_(from.icon_),
      hit_icon_(from.hit_icon_),
      fixed_(from.fixed_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&win_gold_, &from.win_gold_,
    static_cast<size_t>(reinterpret_cast<char*>(&ext_wild_count_) -
    reinterpret_cast<char*>(&win_gold_)) + sizeof(ext_wild_count_));
  // @@protoc_insertion_point(copy_constructor:TK.CMD_3D_SC_Result)
}

void CMD_3D_SC_Result::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMD_3D_SC_Result_TK_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&win_gold_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ext_wild_count_) -
      reinterpret_cast<char*>(&win_gold_)) + sizeof(ext_wild_count_));
}

CMD_3D_SC_Result::~CMD_3D_SC_Result() {
  // @@protoc_insertion_point(destructor:TK.CMD_3D_SC_Result)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_3D_SC_Result::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_3D_SC_Result::ArenaDtor(void* object) {
  CMD_3D_SC_Result* _this = reinterpret_cast< CMD_3D_SC_Result* >(object);
  (void)_this;
}
void CMD_3D_SC_Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_3D_SC_Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_3D_SC_Result& CMD_3D_SC_Result::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_3D_SC_Result_TK_2eproto.base);
  return *internal_default_instance();
}


void CMD_3D_SC_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:TK.CMD_3D_SC_Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  icon_.Clear();
  hit_icon_.Clear();
  fixed_.Clear();
  ::memset(&win_gold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ext_wild_count_) -
      reinterpret_cast<char*>(&win_gold_)) + sizeof(ext_wild_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_3D_SC_Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 icon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_icon(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_icon(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TK.Hit_Icon hit_icon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hit_icon(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 win_gold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          win_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 free_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          free_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 free_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          free_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 no_lmal_free_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          no_lmal_free_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ext_odd = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ext_odd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 start_row = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          start_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 start_col = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          start_col_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ext_wild_count = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ext_wild_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 fixed = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_fixed(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96) {
          _internal_add_fixed(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_3D_SC_Result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TK.CMD_3D_SC_Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 icon = 1;
  {
    int byte_size = _icon_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_icon(), byte_size, target);
    }
  }

  // repeated .TK.Hit_Icon hit_icon = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hit_icon_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_hit_icon(i), target, stream);
  }

  // int32 win_gold = 3;
  if (this->win_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_win_gold(), target);
  }

  // int32 free_count = 4;
  if (this->free_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_free_count(), target);
  }

  // int32 free_type = 5;
  if (this->free_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_free_type(), target);
  }

  // int32 no_lmal_free_type = 6;
  if (this->no_lmal_free_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_no_lmal_free_type(), target);
  }

  // int32 ext_odd = 7;
  if (this->ext_odd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_ext_odd(), target);
  }

  // int32 start_row = 8;
  if (this->start_row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_start_row(), target);
  }

  // int32 start_col = 9;
  if (this->start_col() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_start_col(), target);
  }

  // int32 type = 10;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_type(), target);
  }

  // int32 ext_wild_count = 11;
  if (this->ext_wild_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_ext_wild_count(), target);
  }

  // repeated int32 fixed = 12;
  {
    int byte_size = _fixed_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          12, _internal_fixed(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TK.CMD_3D_SC_Result)
  return target;
}

size_t CMD_3D_SC_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TK.CMD_3D_SC_Result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 icon = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->icon_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _icon_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .TK.Hit_Icon hit_icon = 2;
  total_size += 1UL * this->_internal_hit_icon_size();
  for (const auto& msg : this->hit_icon_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 fixed = 12;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->fixed_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _fixed_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 win_gold = 3;
  if (this->win_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_win_gold());
  }

  // int32 free_count = 4;
  if (this->free_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_free_count());
  }

  // int32 free_type = 5;
  if (this->free_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_free_type());
  }

  // int32 no_lmal_free_type = 6;
  if (this->no_lmal_free_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_no_lmal_free_type());
  }

  // int32 ext_odd = 7;
  if (this->ext_odd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ext_odd());
  }

  // int32 start_row = 8;
  if (this->start_row() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start_row());
  }

  // int32 start_col = 9;
  if (this->start_col() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start_col());
  }

  // int32 type = 10;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 ext_wild_count = 11;
  if (this->ext_wild_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ext_wild_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_3D_SC_Result::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TK.CMD_3D_SC_Result)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_3D_SC_Result* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_3D_SC_Result>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TK.CMD_3D_SC_Result)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TK.CMD_3D_SC_Result)
    MergeFrom(*source);
  }
}

void CMD_3D_SC_Result::MergeFrom(const CMD_3D_SC_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TK.CMD_3D_SC_Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  icon_.MergeFrom(from.icon_);
  hit_icon_.MergeFrom(from.hit_icon_);
  fixed_.MergeFrom(from.fixed_);
  if (from.win_gold() != 0) {
    _internal_set_win_gold(from._internal_win_gold());
  }
  if (from.free_count() != 0) {
    _internal_set_free_count(from._internal_free_count());
  }
  if (from.free_type() != 0) {
    _internal_set_free_type(from._internal_free_type());
  }
  if (from.no_lmal_free_type() != 0) {
    _internal_set_no_lmal_free_type(from._internal_no_lmal_free_type());
  }
  if (from.ext_odd() != 0) {
    _internal_set_ext_odd(from._internal_ext_odd());
  }
  if (from.start_row() != 0) {
    _internal_set_start_row(from._internal_start_row());
  }
  if (from.start_col() != 0) {
    _internal_set_start_col(from._internal_start_col());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.ext_wild_count() != 0) {
    _internal_set_ext_wild_count(from._internal_ext_wild_count());
  }
}

void CMD_3D_SC_Result::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TK.CMD_3D_SC_Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_3D_SC_Result::CopyFrom(const CMD_3D_SC_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TK.CMD_3D_SC_Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_3D_SC_Result::IsInitialized() const {
  return true;
}

void CMD_3D_SC_Result::InternalSwap(CMD_3D_SC_Result* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  icon_.InternalSwap(&other->icon_);
  hit_icon_.InternalSwap(&other->hit_icon_);
  fixed_.InternalSwap(&other->fixed_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_3D_SC_Result, ext_wild_count_)
      + sizeof(CMD_3D_SC_Result::ext_wild_count_)
      - PROTOBUF_FIELD_OFFSET(CMD_3D_SC_Result, win_gold_)>(
          reinterpret_cast<char*>(&win_gold_),
          reinterpret_cast<char*>(&other->win_gold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_3D_SC_Result::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace TK
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TK::SC_SceneInfo* Arena::CreateMaybeMessage< ::TK::SC_SceneInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TK::SC_SceneInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TK::Hit_Icon* Arena::CreateMaybeMessage< ::TK::Hit_Icon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TK::Hit_Icon >(arena);
}
template<> PROTOBUF_NOINLINE ::TK::CMD_3D_SC_Result* Arena::CreateMaybeMessage< ::TK::CMD_3D_SC_Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TK::CMD_3D_SC_Result >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
