// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChinaChess.proto

#include "ChinaChess.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ChinaChess_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Chess_Manual_Item_ChinaChess_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ChinaChess_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scene_Chess_ChinaChess_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ChinaChess_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scene_ChessItem_ChinaChess_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ChinaChess_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Scene_Detail_ChinaChess_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ChinaChess_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scene_GameRuleInfo_ChinaChess_2eproto;
namespace ChinaChess {
class Scene_ChessItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scene_ChessItem> _instance;
} _Scene_ChessItem_default_instance_;
class Scene_ChessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scene_Chess> _instance;
} _Scene_Chess_default_instance_;
class Scene_GameRuleInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scene_GameRuleInfo> _instance;
} _Scene_GameRuleInfo_default_instance_;
class Scene_DetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scene_Detail> _instance;
} _Scene_Detail_default_instance_;
class SC_SceneInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_SceneInfo> _instance;
} _SC_SceneInfo_default_instance_;
class CMD_Chess_MOVE_CHESSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_Chess_MOVE_CHESS> _instance;
} _CMD_Chess_MOVE_CHESS_default_instance_;
class RegretResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegretResult> _instance;
} _RegretResult_default_instance_;
class CMD_CommonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_Common> _instance;
} _CMD_Common_default_instance_;
class GameEndDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEnd> _instance;
} _GameEnd_default_instance_;
class Chess_Manual_ItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Chess_Manual_Item> _instance;
} _Chess_Manual_Item_default_instance_;
class Chess_ManualDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Chess_Manual> _instance;
} _Chess_Manual_default_instance_;
class Notify_TimerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Notify_Timer> _instance;
} _Notify_Timer_default_instance_;
class CMD_Make_RuleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_Make_Rule> _instance;
} _CMD_Make_Rule_default_instance_;
}  // namespace ChinaChess
static void InitDefaultsscc_info_CMD_Chess_MOVE_CHESS_ChinaChess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChinaChess::_CMD_Chess_MOVE_CHESS_default_instance_;
    new (ptr) ::ChinaChess::CMD_Chess_MOVE_CHESS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_Chess_MOVE_CHESS_ChinaChess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_Chess_MOVE_CHESS_ChinaChess_2eproto}, {}};

static void InitDefaultsscc_info_CMD_Common_ChinaChess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChinaChess::_CMD_Common_default_instance_;
    new (ptr) ::ChinaChess::CMD_Common();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_Common_ChinaChess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_Common_ChinaChess_2eproto}, {}};

static void InitDefaultsscc_info_CMD_Make_Rule_ChinaChess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChinaChess::_CMD_Make_Rule_default_instance_;
    new (ptr) ::ChinaChess::CMD_Make_Rule();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_Make_Rule_ChinaChess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_Make_Rule_ChinaChess_2eproto}, {}};

static void InitDefaultsscc_info_Chess_Manual_ChinaChess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChinaChess::_Chess_Manual_default_instance_;
    new (ptr) ::ChinaChess::Chess_Manual();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Chess_Manual_ChinaChess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Chess_Manual_ChinaChess_2eproto}, {
      &scc_info_Chess_Manual_Item_ChinaChess_2eproto.base,}};

static void InitDefaultsscc_info_Chess_Manual_Item_ChinaChess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChinaChess::_Chess_Manual_Item_default_instance_;
    new (ptr) ::ChinaChess::Chess_Manual_Item();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Chess_Manual_Item_ChinaChess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Chess_Manual_Item_ChinaChess_2eproto}, {}};

static void InitDefaultsscc_info_GameEnd_ChinaChess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChinaChess::_GameEnd_default_instance_;
    new (ptr) ::ChinaChess::GameEnd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameEnd_ChinaChess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameEnd_ChinaChess_2eproto}, {}};

static void InitDefaultsscc_info_Notify_Timer_ChinaChess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChinaChess::_Notify_Timer_default_instance_;
    new (ptr) ::ChinaChess::Notify_Timer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Notify_Timer_ChinaChess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Notify_Timer_ChinaChess_2eproto}, {}};

static void InitDefaultsscc_info_RegretResult_ChinaChess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChinaChess::_RegretResult_default_instance_;
    new (ptr) ::ChinaChess::RegretResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegretResult_ChinaChess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegretResult_ChinaChess_2eproto}, {}};

static void InitDefaultsscc_info_SC_SceneInfo_ChinaChess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChinaChess::_SC_SceneInfo_default_instance_;
    new (ptr) ::ChinaChess::SC_SceneInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SC_SceneInfo_ChinaChess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SC_SceneInfo_ChinaChess_2eproto}, {
      &scc_info_Scene_Detail_ChinaChess_2eproto.base,}};

static void InitDefaultsscc_info_Scene_Chess_ChinaChess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChinaChess::_Scene_Chess_default_instance_;
    new (ptr) ::ChinaChess::Scene_Chess();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scene_Chess_ChinaChess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Scene_Chess_ChinaChess_2eproto}, {
      &scc_info_Scene_ChessItem_ChinaChess_2eproto.base,}};

static void InitDefaultsscc_info_Scene_ChessItem_ChinaChess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChinaChess::_Scene_ChessItem_default_instance_;
    new (ptr) ::ChinaChess::Scene_ChessItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scene_ChessItem_ChinaChess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Scene_ChessItem_ChinaChess_2eproto}, {}};

static void InitDefaultsscc_info_Scene_Detail_ChinaChess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChinaChess::_Scene_Detail_default_instance_;
    new (ptr) ::ChinaChess::Scene_Detail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Scene_Detail_ChinaChess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Scene_Detail_ChinaChess_2eproto}, {
      &scc_info_Scene_GameRuleInfo_ChinaChess_2eproto.base,
      &scc_info_Scene_Chess_ChinaChess_2eproto.base,}};

static void InitDefaultsscc_info_Scene_GameRuleInfo_ChinaChess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChinaChess::_Scene_GameRuleInfo_default_instance_;
    new (ptr) ::ChinaChess::Scene_GameRuleInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scene_GameRuleInfo_ChinaChess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Scene_GameRuleInfo_ChinaChess_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ChinaChess_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ChinaChess_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ChinaChess_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ChinaChess_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChinaChess::Scene_ChessItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChinaChess::Scene_ChessItem, cbxpos_),
  PROTOBUF_FIELD_OFFSET(::ChinaChess::Scene_ChessItem, cbypos_),
  PROTOBUF_FIELD_OFFSET(::ChinaChess::Scene_ChessItem, cbchess_),
  PROTOBUF_FIELD_OFFSET(::ChinaChess::Scene_ChessItem, cbcolor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChinaChess::Scene_Chess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChinaChess::Scene_Chess, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChinaChess::Scene_GameRuleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChinaChess::Scene_GameRuleInfo, lbetmin_),
  PROTOBUF_FIELD_OFFSET(::ChinaChess::Scene_GameRuleInfo, lbetmax_),
  PROTOBUF_FIELD_OFFSET(::ChinaChess::Scene_GameRuleInfo, szchip_),
  PROTOBUF_FIELD_OFFSET(::ChinaChess::Scene_GameRuleInfo, dwbet_),
  PROTOBUF_FIELD_OFFSET(::ChinaChess::Scene_GameRuleInfo, wrulelimittime_),
  PROTOBUF_FIELD_OFFSET(::ChinaChess::Scene_GameRuleInfo, wrulesteptime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChinaChess::Scene_Detail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChinaChess::Scene_Detail, wcurrentuser_),
  PROTOBUF_FIELD_OFFSET(::ChinaChess::Scene_Detail, wchessstepcount_),
  PROTOBUF_FIELD_OFFSET(::ChinaChess::Scene_Detail, gameruleinfo_),
  PROTOBUF_FIELD_OFFSET(::ChinaChess::Scene_Detail, cbpeacecount_),
  PROTOBUF_FIELD_OFFSET(::ChinaChess::Scene_Detail, cbregretcount_),
  PROTOBUF_FIELD_OFFSET(::ChinaChess::Scene_Detail, chessitemarray_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChinaChess::SC_SceneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChinaChess::SC_SceneInfo, status_),
  PROTOBUF_FIELD_OFFSET(::ChinaChess::SC_SceneInfo, free_),
  PROTOBUF_FIELD_OFFSET(::ChinaChess::SC_SceneInfo, play_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChinaChess::CMD_Chess_MOVE_CHESS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChinaChess::CMD_Chess_MOVE_CHESS, cbxsourcepos_),
  PROTOBUF_FIELD_OFFSET(::ChinaChess::CMD_Chess_MOVE_CHESS, cbysourcepos_),
  PROTOBUF_FIELD_OFFSET(::ChinaChess::CMD_Chess_MOVE_CHESS, cbxtargetpos_),
  PROTOBUF_FIELD_OFFSET(::ChinaChess::CMD_Chess_MOVE_CHESS, cbytargetpos_),
  PROTOBUF_FIELD_OFFSET(::ChinaChess::CMD_Chess_MOVE_CHESS, wcurrentuser_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChinaChess::RegretResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChinaChess::RegretResult, wregretuser_),
  PROTOBUF_FIELD_OFFSET(::ChinaChess::RegretResult, wcurrentuser_),
  PROTOBUF_FIELD_OFFSET(::ChinaChess::RegretResult, cbregretcount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChinaChess::CMD_Common, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChinaChess::CMD_Common, opindex_),
  PROTOBUF_FIELD_OFFSET(::ChinaChess::CMD_Common, waittime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChinaChess::GameEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChinaChess::GameEnd, wwinuser_),
  PROTOBUF_FIELD_OFFSET(::ChinaChess::GameEnd, luserscore_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChinaChess::Chess_Manual_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChinaChess::Chess_Manual_Item, cbxsourcechesspos_),
  PROTOBUF_FIELD_OFFSET(::ChinaChess::Chess_Manual_Item, cbysourcechesspos_),
  PROTOBUF_FIELD_OFFSET(::ChinaChess::Chess_Manual_Item, cbxtargetchesspos_),
  PROTOBUF_FIELD_OFFSET(::ChinaChess::Chess_Manual_Item, cbytargetchesspos_),
  PROTOBUF_FIELD_OFFSET(::ChinaChess::Chess_Manual_Item, cbunitechess_),
  PROTOBUF_FIELD_OFFSET(::ChinaChess::Chess_Manual_Item, cbsourcecolor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChinaChess::Chess_Manual, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChinaChess::Chess_Manual, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChinaChess::Notify_Timer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChinaChess::Notify_Timer, waittime_),
  PROTOBUF_FIELD_OFFSET(::ChinaChess::Notify_Timer, roomtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChinaChess::CMD_Make_Rule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChinaChess::CMD_Make_Rule, errorid_),
  PROTOBUF_FIELD_OFFSET(::ChinaChess::CMD_Make_Rule, score_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ChinaChess::Scene_ChessItem)},
  { 9, -1, sizeof(::ChinaChess::Scene_Chess)},
  { 15, -1, sizeof(::ChinaChess::Scene_GameRuleInfo)},
  { 26, -1, sizeof(::ChinaChess::Scene_Detail)},
  { 37, -1, sizeof(::ChinaChess::SC_SceneInfo)},
  { 45, -1, sizeof(::ChinaChess::CMD_Chess_MOVE_CHESS)},
  { 55, -1, sizeof(::ChinaChess::RegretResult)},
  { 63, -1, sizeof(::ChinaChess::CMD_Common)},
  { 70, -1, sizeof(::ChinaChess::GameEnd)},
  { 77, -1, sizeof(::ChinaChess::Chess_Manual_Item)},
  { 88, -1, sizeof(::ChinaChess::Chess_Manual)},
  { 94, -1, sizeof(::ChinaChess::Notify_Timer)},
  { 101, -1, sizeof(::ChinaChess::CMD_Make_Rule)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChinaChess::_Scene_ChessItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChinaChess::_Scene_Chess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChinaChess::_Scene_GameRuleInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChinaChess::_Scene_Detail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChinaChess::_SC_SceneInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChinaChess::_CMD_Chess_MOVE_CHESS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChinaChess::_RegretResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChinaChess::_CMD_Common_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChinaChess::_GameEnd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChinaChess::_Chess_Manual_Item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChinaChess::_Chess_Manual_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChinaChess::_Notify_Timer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChinaChess::_CMD_Make_Rule_default_instance_),
};

const char descriptor_table_protodef_ChinaChess_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020ChinaChess.proto\022\nChinaChess\"S\n\017Scene_"
  "ChessItem\022\016\n\006cbXPos\030\001 \001(\005\022\016\n\006cbYPos\030\002 \001("
  "\005\022\017\n\007cbChess\030\003 \001(\005\022\017\n\007cbColor\030\004 \001(\005\"9\n\013S"
  "cene_Chess\022*\n\005items\030\001 \003(\0132\033.ChinaChess.S"
  "cene_ChessItem\"\204\001\n\022Scene_GameRuleInfo\022\017\n"
  "\007lBetMin\030\001 \001(\005\022\017\n\007lBetMax\030\002 \001(\005\022\016\n\006szChi"
  "p\030\003 \003(\005\022\r\n\005dwBet\030\004 \001(\005\022\026\n\016wRuleLimitTime"
  "\030\005 \001(\005\022\025\n\rwRuleStepTime\030\006 \001(\005\"\321\001\n\014Scene_"
  "Detail\022\024\n\014wCurrentUser\030\001 \001(\005\022\027\n\017wChessSt"
  "epCount\030\002 \003(\005\0224\n\014GameRuleInfo\030\003 \001(\0132\036.Ch"
  "inaChess.Scene_GameRuleInfo\022\024\n\014cbPeaceCo"
  "unt\030\004 \003(\005\022\025\n\rcbRegretCount\030\005 \003(\005\022/\n\016Ches"
  "sItemArray\030\006 \001(\0132\027.ChinaChess.Scene_Ches"
  "s\"n\n\014SC_SceneInfo\022\016\n\006status\030\001 \001(\005\022&\n\004fre"
  "e\030\002 \001(\0132\030.ChinaChess.Scene_Detail\022&\n\004pla"
  "y\030\003 \001(\0132\030.ChinaChess.Scene_Detail\"\204\001\n\024CM"
  "D_Chess_MOVE_CHESS\022\024\n\014cbXSourcePos\030\001 \001(\005"
  "\022\024\n\014cbYSourcePos\030\002 \001(\005\022\024\n\014cbXTargetPos\030\003"
  " \001(\005\022\024\n\014cbYTargetPos\030\004 \001(\005\022\024\n\014wCurrentUs"
  "er\030\005 \001(\005\"P\n\014RegretResult\022\023\n\013wRegretUser\030"
  "\001 \001(\005\022\024\n\014wCurrentUser\030\002 \001(\005\022\025\n\rcbRegretC"
  "ount\030\003 \001(\005\"/\n\nCMD_Common\022\017\n\007opIndex\030\001 \001("
  "\005\022\020\n\010waitTime\030\002 \001(\005\"/\n\007GameEnd\022\020\n\010wWinUs"
  "er\030\001 \001(\005\022\022\n\nlUserScore\030\002 \003(\003\"\254\001\n\021Chess_M"
  "anual_Item\022\031\n\021cbXSourceChessPos\030\001 \001(\005\022\031\n"
  "\021cbYSourceChessPos\030\002 \001(\005\022\031\n\021cbXTargetChe"
  "ssPos\030\003 \001(\005\022\031\n\021cbYTargetChessPos\030\004 \001(\005\022\024"
  "\n\014cbUniteChess\030\005 \001(\005\022\025\n\rcbSourceColor\030\006 "
  "\001(\005\"<\n\014Chess_Manual\022,\n\005items\030\001 \003(\0132\035.Chi"
  "naChess.Chess_Manual_Item\"2\n\014Notify_Time"
  "r\022\020\n\010waitTime\030\001 \001(\005\022\020\n\010roomType\030\002 \001(\005\"/\n"
  "\rCMD_Make_Rule\022\017\n\007errorID\030\001 \001(\005\022\r\n\005score"
  "\030\002 \001(\003*\255\010\n\rEMsgIDSubGame\022\036\n\032CMD_Chess_SU"
  "B_C_REGRET_REQ\020\000\022!\n\035CMD_Chess_SUB_C_REGR"
  "ET_ANSWER\020\001\022\036\n\032CMD_Chess_SUB_C_GIVEUP_RE"
  "Q\020\002\022\035\n\031CMD_Chess_SUB_C_PEACE_REQ\020\003\022 \n\034CM"
  "D_Chess_SUB_C_PEACE_ANSWER\020\004\022\036\n\032CMD_Ches"
  "s_SUB_C_MOVE_CHESS\020\005\022\037\n\033CMD_Chess_SUB_C_"
  "KICK_PLAYER\020\006\022\034\n\030CMD_Chess_SUB_C_SET_RUL"
  "E\020\007\022\035\n\031CMD_Chess_SUB_C_MAKE_RULE\020\010\022 \n\034CM"
  "D_Chess_SUB_C_NOTIFY_READY\020\t\022 \n\034CMD_Ches"
  "s_SUB_C_NOTIFY_START\020\n\022\034\n\030CMD_Chess_SUB_"
  "C_CONTINUE\020\013\022\036\n\032CMD_Chess_SUB_S_GAME_STA"
  "RT\020\014\022\036\n\032CMD_Chess_SUB_S_MOVE_CHESS\020\r\022\036\n\032"
  "CMD_Chess_SUB_S_REGRET_REQ\020\016\022 \n\034CMD_Ches"
  "s_SUB_S_REGRET_FAILE\020\017\022!\n\035CMD_Chess_SUB_"
  "S_REGRET_RESULT\020\020\022\035\n\031CMD_Chess_SUB_S_PEA"
  "CE_REQ\020\021\022 \n\034CMD_Chess_SUB_S_PEACE_ANSWER"
  "\020\022\022\034\n\030CMD_Chess_SUB_S_GAME_END\020\023\022 \n\034CMD_"
  "Chess_SUB_S_CHESS_MANUAL\020\024\022 \n\034CMD_Chess_"
  "SUB_S_REQ_SET_RULE\020\025\022\"\n\036CMD_Chess_SUB_S_"
  "REQ_AGREE_RULE\020\026\022\037\n\033CMD_Chess_SUB_S_KICK"
  "_PLAYER\020\027\022 \n\034CMD_Chess_SUB_S_NOTIFY_TIME"
  "R\020\030\022%\n!CMD_Chess_SUB_S_NOTIFY_ROOM_OWNER"
  "\020\031\022#\n\037CMD_Chess_SUB_S_NOTIFY_SET_RULE\020\032\022"
  "\034\n\030CMD_Chess_SUB_S_SET_RULE\020\033\022\035\n\031CMD_Che"
  "ss_SUB_S_MAKE_RULE\020\034\022 \n\034CMD_Chess_SUB_S_"
  "NOTIFY_READY\020\035\022 \n\034CMD_Chess_SUB_S_NOTIFY"
  "_START\020\036\022\034\n\030CMD_Chess_SUB_S_CONTINUE\020\037b\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ChinaChess_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ChinaChess_2eproto_sccs[13] = {
  &scc_info_CMD_Chess_MOVE_CHESS_ChinaChess_2eproto.base,
  &scc_info_CMD_Common_ChinaChess_2eproto.base,
  &scc_info_CMD_Make_Rule_ChinaChess_2eproto.base,
  &scc_info_Chess_Manual_ChinaChess_2eproto.base,
  &scc_info_Chess_Manual_Item_ChinaChess_2eproto.base,
  &scc_info_GameEnd_ChinaChess_2eproto.base,
  &scc_info_Notify_Timer_ChinaChess_2eproto.base,
  &scc_info_RegretResult_ChinaChess_2eproto.base,
  &scc_info_SC_SceneInfo_ChinaChess_2eproto.base,
  &scc_info_Scene_Chess_ChinaChess_2eproto.base,
  &scc_info_Scene_ChessItem_ChinaChess_2eproto.base,
  &scc_info_Scene_Detail_ChinaChess_2eproto.base,
  &scc_info_Scene_GameRuleInfo_ChinaChess_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ChinaChess_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ChinaChess_2eproto = {
  false, false, descriptor_table_protodef_ChinaChess_2eproto, "ChinaChess.proto", 2366,
  &descriptor_table_ChinaChess_2eproto_once, descriptor_table_ChinaChess_2eproto_sccs, descriptor_table_ChinaChess_2eproto_deps, 13, 0,
  schemas, file_default_instances, TableStruct_ChinaChess_2eproto::offsets,
  file_level_metadata_ChinaChess_2eproto, 13, file_level_enum_descriptors_ChinaChess_2eproto, file_level_service_descriptors_ChinaChess_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ChinaChess_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ChinaChess_2eproto)), true);
namespace ChinaChess {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDSubGame_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ChinaChess_2eproto);
  return file_level_enum_descriptors_ChinaChess_2eproto[0];
}
bool EMsgIDSubGame_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Scene_ChessItem::_Internal {
 public:
};

Scene_ChessItem::Scene_ChessItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChinaChess.Scene_ChessItem)
}
Scene_ChessItem::Scene_ChessItem(const Scene_ChessItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cbxpos_, &from.cbxpos_,
    static_cast<size_t>(reinterpret_cast<char*>(&cbcolor_) -
    reinterpret_cast<char*>(&cbxpos_)) + sizeof(cbcolor_));
  // @@protoc_insertion_point(copy_constructor:ChinaChess.Scene_ChessItem)
}

void Scene_ChessItem::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&cbxpos_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&cbcolor_) -
      reinterpret_cast<char*>(&cbxpos_)) + sizeof(cbcolor_));
}

Scene_ChessItem::~Scene_ChessItem() {
  // @@protoc_insertion_point(destructor:ChinaChess.Scene_ChessItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Scene_ChessItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Scene_ChessItem::ArenaDtor(void* object) {
  Scene_ChessItem* _this = reinterpret_cast< Scene_ChessItem* >(object);
  (void)_this;
}
void Scene_ChessItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Scene_ChessItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Scene_ChessItem& Scene_ChessItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scene_ChessItem_ChinaChess_2eproto.base);
  return *internal_default_instance();
}


void Scene_ChessItem::Clear() {
// @@protoc_insertion_point(message_clear_start:ChinaChess.Scene_ChessItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cbxpos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cbcolor_) -
      reinterpret_cast<char*>(&cbxpos_)) + sizeof(cbcolor_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Scene_ChessItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 cbXPos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cbxpos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cbYPos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cbypos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cbChess = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cbchess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cbColor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          cbcolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Scene_ChessItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChinaChess.Scene_ChessItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cbXPos = 1;
  if (this->cbxpos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cbxpos(), target);
  }

  // int32 cbYPos = 2;
  if (this->cbypos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cbypos(), target);
  }

  // int32 cbChess = 3;
  if (this->cbchess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_cbchess(), target);
  }

  // int32 cbColor = 4;
  if (this->cbcolor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_cbcolor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChinaChess.Scene_ChessItem)
  return target;
}

size_t Scene_ChessItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChinaChess.Scene_ChessItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 cbXPos = 1;
  if (this->cbxpos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cbxpos());
  }

  // int32 cbYPos = 2;
  if (this->cbypos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cbypos());
  }

  // int32 cbChess = 3;
  if (this->cbchess() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cbchess());
  }

  // int32 cbColor = 4;
  if (this->cbcolor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cbcolor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scene_ChessItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChinaChess.Scene_ChessItem)
  GOOGLE_DCHECK_NE(&from, this);
  const Scene_ChessItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scene_ChessItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChinaChess.Scene_ChessItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChinaChess.Scene_ChessItem)
    MergeFrom(*source);
  }
}

void Scene_ChessItem::MergeFrom(const Scene_ChessItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChinaChess.Scene_ChessItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cbxpos() != 0) {
    _internal_set_cbxpos(from._internal_cbxpos());
  }
  if (from.cbypos() != 0) {
    _internal_set_cbypos(from._internal_cbypos());
  }
  if (from.cbchess() != 0) {
    _internal_set_cbchess(from._internal_cbchess());
  }
  if (from.cbcolor() != 0) {
    _internal_set_cbcolor(from._internal_cbcolor());
  }
}

void Scene_ChessItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChinaChess.Scene_ChessItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scene_ChessItem::CopyFrom(const Scene_ChessItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChinaChess.Scene_ChessItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scene_ChessItem::IsInitialized() const {
  return true;
}

void Scene_ChessItem::InternalSwap(Scene_ChessItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Scene_ChessItem, cbcolor_)
      + sizeof(Scene_ChessItem::cbcolor_)
      - PROTOBUF_FIELD_OFFSET(Scene_ChessItem, cbxpos_)>(
          reinterpret_cast<char*>(&cbxpos_),
          reinterpret_cast<char*>(&other->cbxpos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Scene_ChessItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Scene_Chess::_Internal {
 public:
};

Scene_Chess::Scene_Chess(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChinaChess.Scene_Chess)
}
Scene_Chess::Scene_Chess(const Scene_Chess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ChinaChess.Scene_Chess)
}

void Scene_Chess::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Scene_Chess_ChinaChess_2eproto.base);
}

Scene_Chess::~Scene_Chess() {
  // @@protoc_insertion_point(destructor:ChinaChess.Scene_Chess)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Scene_Chess::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Scene_Chess::ArenaDtor(void* object) {
  Scene_Chess* _this = reinterpret_cast< Scene_Chess* >(object);
  (void)_this;
}
void Scene_Chess::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Scene_Chess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Scene_Chess& Scene_Chess::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scene_Chess_ChinaChess_2eproto.base);
  return *internal_default_instance();
}


void Scene_Chess::Clear() {
// @@protoc_insertion_point(message_clear_start:ChinaChess.Scene_Chess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Scene_Chess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ChinaChess.Scene_ChessItem items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Scene_Chess::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChinaChess.Scene_Chess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ChinaChess.Scene_ChessItem items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChinaChess.Scene_Chess)
  return target;
}

size_t Scene_Chess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChinaChess.Scene_Chess)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ChinaChess.Scene_ChessItem items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scene_Chess::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChinaChess.Scene_Chess)
  GOOGLE_DCHECK_NE(&from, this);
  const Scene_Chess* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scene_Chess>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChinaChess.Scene_Chess)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChinaChess.Scene_Chess)
    MergeFrom(*source);
  }
}

void Scene_Chess::MergeFrom(const Scene_Chess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChinaChess.Scene_Chess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void Scene_Chess::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChinaChess.Scene_Chess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scene_Chess::CopyFrom(const Scene_Chess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChinaChess.Scene_Chess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scene_Chess::IsInitialized() const {
  return true;
}

void Scene_Chess::InternalSwap(Scene_Chess* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Scene_Chess::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Scene_GameRuleInfo::_Internal {
 public:
};

Scene_GameRuleInfo::Scene_GameRuleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  szchip_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChinaChess.Scene_GameRuleInfo)
}
Scene_GameRuleInfo::Scene_GameRuleInfo(const Scene_GameRuleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      szchip_(from.szchip_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lbetmin_, &from.lbetmin_,
    static_cast<size_t>(reinterpret_cast<char*>(&wrulesteptime_) -
    reinterpret_cast<char*>(&lbetmin_)) + sizeof(wrulesteptime_));
  // @@protoc_insertion_point(copy_constructor:ChinaChess.Scene_GameRuleInfo)
}

void Scene_GameRuleInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&lbetmin_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&wrulesteptime_) -
      reinterpret_cast<char*>(&lbetmin_)) + sizeof(wrulesteptime_));
}

Scene_GameRuleInfo::~Scene_GameRuleInfo() {
  // @@protoc_insertion_point(destructor:ChinaChess.Scene_GameRuleInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Scene_GameRuleInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Scene_GameRuleInfo::ArenaDtor(void* object) {
  Scene_GameRuleInfo* _this = reinterpret_cast< Scene_GameRuleInfo* >(object);
  (void)_this;
}
void Scene_GameRuleInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Scene_GameRuleInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Scene_GameRuleInfo& Scene_GameRuleInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scene_GameRuleInfo_ChinaChess_2eproto.base);
  return *internal_default_instance();
}


void Scene_GameRuleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ChinaChess.Scene_GameRuleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  szchip_.Clear();
  ::memset(&lbetmin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wrulesteptime_) -
      reinterpret_cast<char*>(&lbetmin_)) + sizeof(wrulesteptime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Scene_GameRuleInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 lBetMin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          lbetmin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lBetMax = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          lbetmax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 szChip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_szchip(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_szchip(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dwBet = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          dwbet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 wRuleLimitTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          wrulelimittime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 wRuleStepTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          wrulesteptime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Scene_GameRuleInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChinaChess.Scene_GameRuleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 lBetMin = 1;
  if (this->lbetmin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_lbetmin(), target);
  }

  // int32 lBetMax = 2;
  if (this->lbetmax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_lbetmax(), target);
  }

  // repeated int32 szChip = 3;
  {
    int byte_size = _szchip_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_szchip(), byte_size, target);
    }
  }

  // int32 dwBet = 4;
  if (this->dwbet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_dwbet(), target);
  }

  // int32 wRuleLimitTime = 5;
  if (this->wrulelimittime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_wrulelimittime(), target);
  }

  // int32 wRuleStepTime = 6;
  if (this->wrulesteptime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_wrulesteptime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChinaChess.Scene_GameRuleInfo)
  return target;
}

size_t Scene_GameRuleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChinaChess.Scene_GameRuleInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 szChip = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->szchip_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _szchip_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 lBetMin = 1;
  if (this->lbetmin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lbetmin());
  }

  // int32 lBetMax = 2;
  if (this->lbetmax() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lbetmax());
  }

  // int32 dwBet = 4;
  if (this->dwbet() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dwbet());
  }

  // int32 wRuleLimitTime = 5;
  if (this->wrulelimittime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wrulelimittime());
  }

  // int32 wRuleStepTime = 6;
  if (this->wrulesteptime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wrulesteptime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scene_GameRuleInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChinaChess.Scene_GameRuleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const Scene_GameRuleInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scene_GameRuleInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChinaChess.Scene_GameRuleInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChinaChess.Scene_GameRuleInfo)
    MergeFrom(*source);
  }
}

void Scene_GameRuleInfo::MergeFrom(const Scene_GameRuleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChinaChess.Scene_GameRuleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  szchip_.MergeFrom(from.szchip_);
  if (from.lbetmin() != 0) {
    _internal_set_lbetmin(from._internal_lbetmin());
  }
  if (from.lbetmax() != 0) {
    _internal_set_lbetmax(from._internal_lbetmax());
  }
  if (from.dwbet() != 0) {
    _internal_set_dwbet(from._internal_dwbet());
  }
  if (from.wrulelimittime() != 0) {
    _internal_set_wrulelimittime(from._internal_wrulelimittime());
  }
  if (from.wrulesteptime() != 0) {
    _internal_set_wrulesteptime(from._internal_wrulesteptime());
  }
}

void Scene_GameRuleInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChinaChess.Scene_GameRuleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scene_GameRuleInfo::CopyFrom(const Scene_GameRuleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChinaChess.Scene_GameRuleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scene_GameRuleInfo::IsInitialized() const {
  return true;
}

void Scene_GameRuleInfo::InternalSwap(Scene_GameRuleInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  szchip_.InternalSwap(&other->szchip_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Scene_GameRuleInfo, wrulesteptime_)
      + sizeof(Scene_GameRuleInfo::wrulesteptime_)
      - PROTOBUF_FIELD_OFFSET(Scene_GameRuleInfo, lbetmin_)>(
          reinterpret_cast<char*>(&lbetmin_),
          reinterpret_cast<char*>(&other->lbetmin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Scene_GameRuleInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Scene_Detail::_Internal {
 public:
  static const ::ChinaChess::Scene_GameRuleInfo& gameruleinfo(const Scene_Detail* msg);
  static const ::ChinaChess::Scene_Chess& chessitemarray(const Scene_Detail* msg);
};

const ::ChinaChess::Scene_GameRuleInfo&
Scene_Detail::_Internal::gameruleinfo(const Scene_Detail* msg) {
  return *msg->gameruleinfo_;
}
const ::ChinaChess::Scene_Chess&
Scene_Detail::_Internal::chessitemarray(const Scene_Detail* msg) {
  return *msg->chessitemarray_;
}
Scene_Detail::Scene_Detail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  wchessstepcount_(arena),
  cbpeacecount_(arena),
  cbregretcount_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChinaChess.Scene_Detail)
}
Scene_Detail::Scene_Detail(const Scene_Detail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      wchessstepcount_(from.wchessstepcount_),
      cbpeacecount_(from.cbpeacecount_),
      cbregretcount_(from.cbregretcount_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gameruleinfo()) {
    gameruleinfo_ = new ::ChinaChess::Scene_GameRuleInfo(*from.gameruleinfo_);
  } else {
    gameruleinfo_ = nullptr;
  }
  if (from._internal_has_chessitemarray()) {
    chessitemarray_ = new ::ChinaChess::Scene_Chess(*from.chessitemarray_);
  } else {
    chessitemarray_ = nullptr;
  }
  wcurrentuser_ = from.wcurrentuser_;
  // @@protoc_insertion_point(copy_constructor:ChinaChess.Scene_Detail)
}

void Scene_Detail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Scene_Detail_ChinaChess_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gameruleinfo_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&wcurrentuser_) -
      reinterpret_cast<char*>(&gameruleinfo_)) + sizeof(wcurrentuser_));
}

Scene_Detail::~Scene_Detail() {
  // @@protoc_insertion_point(destructor:ChinaChess.Scene_Detail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Scene_Detail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete gameruleinfo_;
  if (this != internal_default_instance()) delete chessitemarray_;
}

void Scene_Detail::ArenaDtor(void* object) {
  Scene_Detail* _this = reinterpret_cast< Scene_Detail* >(object);
  (void)_this;
}
void Scene_Detail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Scene_Detail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Scene_Detail& Scene_Detail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scene_Detail_ChinaChess_2eproto.base);
  return *internal_default_instance();
}


void Scene_Detail::Clear() {
// @@protoc_insertion_point(message_clear_start:ChinaChess.Scene_Detail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wchessstepcount_.Clear();
  cbpeacecount_.Clear();
  cbregretcount_.Clear();
  if (GetArena() == nullptr && gameruleinfo_ != nullptr) {
    delete gameruleinfo_;
  }
  gameruleinfo_ = nullptr;
  if (GetArena() == nullptr && chessitemarray_ != nullptr) {
    delete chessitemarray_;
  }
  chessitemarray_ = nullptr;
  wcurrentuser_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Scene_Detail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 wCurrentUser = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          wcurrentuser_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 wChessStepCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_wchessstepcount(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_wchessstepcount(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ChinaChess.Scene_GameRuleInfo GameRuleInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gameruleinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 cbPeaceCount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_cbpeacecount(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_cbpeacecount(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 cbRegretCount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_cbregretcount(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_cbregretcount(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ChinaChess.Scene_Chess ChessItemArray = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_chessitemarray(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Scene_Detail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChinaChess.Scene_Detail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 wCurrentUser = 1;
  if (this->wcurrentuser() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_wcurrentuser(), target);
  }

  // repeated int32 wChessStepCount = 2;
  {
    int byte_size = _wchessstepcount_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_wchessstepcount(), byte_size, target);
    }
  }

  // .ChinaChess.Scene_GameRuleInfo GameRuleInfo = 3;
  if (this->has_gameruleinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::gameruleinfo(this), target, stream);
  }

  // repeated int32 cbPeaceCount = 4;
  {
    int byte_size = _cbpeacecount_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_cbpeacecount(), byte_size, target);
    }
  }

  // repeated int32 cbRegretCount = 5;
  {
    int byte_size = _cbregretcount_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_cbregretcount(), byte_size, target);
    }
  }

  // .ChinaChess.Scene_Chess ChessItemArray = 6;
  if (this->has_chessitemarray()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::chessitemarray(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChinaChess.Scene_Detail)
  return target;
}

size_t Scene_Detail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChinaChess.Scene_Detail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 wChessStepCount = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->wchessstepcount_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _wchessstepcount_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 cbPeaceCount = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->cbpeacecount_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _cbpeacecount_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 cbRegretCount = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->cbregretcount_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _cbregretcount_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .ChinaChess.Scene_GameRuleInfo GameRuleInfo = 3;
  if (this->has_gameruleinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gameruleinfo_);
  }

  // .ChinaChess.Scene_Chess ChessItemArray = 6;
  if (this->has_chessitemarray()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chessitemarray_);
  }

  // int32 wCurrentUser = 1;
  if (this->wcurrentuser() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wcurrentuser());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scene_Detail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChinaChess.Scene_Detail)
  GOOGLE_DCHECK_NE(&from, this);
  const Scene_Detail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scene_Detail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChinaChess.Scene_Detail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChinaChess.Scene_Detail)
    MergeFrom(*source);
  }
}

void Scene_Detail::MergeFrom(const Scene_Detail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChinaChess.Scene_Detail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wchessstepcount_.MergeFrom(from.wchessstepcount_);
  cbpeacecount_.MergeFrom(from.cbpeacecount_);
  cbregretcount_.MergeFrom(from.cbregretcount_);
  if (from.has_gameruleinfo()) {
    _internal_mutable_gameruleinfo()->::ChinaChess::Scene_GameRuleInfo::MergeFrom(from._internal_gameruleinfo());
  }
  if (from.has_chessitemarray()) {
    _internal_mutable_chessitemarray()->::ChinaChess::Scene_Chess::MergeFrom(from._internal_chessitemarray());
  }
  if (from.wcurrentuser() != 0) {
    _internal_set_wcurrentuser(from._internal_wcurrentuser());
  }
}

void Scene_Detail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChinaChess.Scene_Detail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scene_Detail::CopyFrom(const Scene_Detail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChinaChess.Scene_Detail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scene_Detail::IsInitialized() const {
  return true;
}

void Scene_Detail::InternalSwap(Scene_Detail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  wchessstepcount_.InternalSwap(&other->wchessstepcount_);
  cbpeacecount_.InternalSwap(&other->cbpeacecount_);
  cbregretcount_.InternalSwap(&other->cbregretcount_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Scene_Detail, wcurrentuser_)
      + sizeof(Scene_Detail::wcurrentuser_)
      - PROTOBUF_FIELD_OFFSET(Scene_Detail, gameruleinfo_)>(
          reinterpret_cast<char*>(&gameruleinfo_),
          reinterpret_cast<char*>(&other->gameruleinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Scene_Detail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SC_SceneInfo::_Internal {
 public:
  static const ::ChinaChess::Scene_Detail& free(const SC_SceneInfo* msg);
  static const ::ChinaChess::Scene_Detail& play(const SC_SceneInfo* msg);
};

const ::ChinaChess::Scene_Detail&
SC_SceneInfo::_Internal::free(const SC_SceneInfo* msg) {
  return *msg->free_;
}
const ::ChinaChess::Scene_Detail&
SC_SceneInfo::_Internal::play(const SC_SceneInfo* msg) {
  return *msg->play_;
}
SC_SceneInfo::SC_SceneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChinaChess.SC_SceneInfo)
}
SC_SceneInfo::SC_SceneInfo(const SC_SceneInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_free()) {
    free_ = new ::ChinaChess::Scene_Detail(*from.free_);
  } else {
    free_ = nullptr;
  }
  if (from._internal_has_play()) {
    play_ = new ::ChinaChess::Scene_Detail(*from.play_);
  } else {
    play_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ChinaChess.SC_SceneInfo)
}

void SC_SceneInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SC_SceneInfo_ChinaChess_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&free_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&free_)) + sizeof(status_));
}

SC_SceneInfo::~SC_SceneInfo() {
  // @@protoc_insertion_point(destructor:ChinaChess.SC_SceneInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SC_SceneInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete free_;
  if (this != internal_default_instance()) delete play_;
}

void SC_SceneInfo::ArenaDtor(void* object) {
  SC_SceneInfo* _this = reinterpret_cast< SC_SceneInfo* >(object);
  (void)_this;
}
void SC_SceneInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SC_SceneInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_SceneInfo& SC_SceneInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_SceneInfo_ChinaChess_2eproto.base);
  return *internal_default_instance();
}


void SC_SceneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ChinaChess.SC_SceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && free_ != nullptr) {
    delete free_;
  }
  free_ = nullptr;
  if (GetArena() == nullptr && play_ != nullptr) {
    delete play_;
  }
  play_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_SceneInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ChinaChess.Scene_Detail free = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_free(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ChinaChess.Scene_Detail play = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_play(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_SceneInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChinaChess.SC_SceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // .ChinaChess.Scene_Detail free = 2;
  if (this->has_free()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::free(this), target, stream);
  }

  // .ChinaChess.Scene_Detail play = 3;
  if (this->has_play()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::play(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChinaChess.SC_SceneInfo)
  return target;
}

size_t SC_SceneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChinaChess.SC_SceneInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChinaChess.Scene_Detail free = 2;
  if (this->has_free()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *free_);
  }

  // .ChinaChess.Scene_Detail play = 3;
  if (this->has_play()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *play_);
  }

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_SceneInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChinaChess.SC_SceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_SceneInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_SceneInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChinaChess.SC_SceneInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChinaChess.SC_SceneInfo)
    MergeFrom(*source);
  }
}

void SC_SceneInfo::MergeFrom(const SC_SceneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChinaChess.SC_SceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_free()) {
    _internal_mutable_free()->::ChinaChess::Scene_Detail::MergeFrom(from._internal_free());
  }
  if (from.has_play()) {
    _internal_mutable_play()->::ChinaChess::Scene_Detail::MergeFrom(from._internal_play());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void SC_SceneInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChinaChess.SC_SceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SceneInfo::CopyFrom(const SC_SceneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChinaChess.SC_SceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_SceneInfo::IsInitialized() const {
  return true;
}

void SC_SceneInfo::InternalSwap(SC_SceneInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_SceneInfo, status_)
      + sizeof(SC_SceneInfo::status_)
      - PROTOBUF_FIELD_OFFSET(SC_SceneInfo, free_)>(
          reinterpret_cast<char*>(&free_),
          reinterpret_cast<char*>(&other->free_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_SceneInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_Chess_MOVE_CHESS::_Internal {
 public:
};

CMD_Chess_MOVE_CHESS::CMD_Chess_MOVE_CHESS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChinaChess.CMD_Chess_MOVE_CHESS)
}
CMD_Chess_MOVE_CHESS::CMD_Chess_MOVE_CHESS(const CMD_Chess_MOVE_CHESS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cbxsourcepos_, &from.cbxsourcepos_,
    static_cast<size_t>(reinterpret_cast<char*>(&wcurrentuser_) -
    reinterpret_cast<char*>(&cbxsourcepos_)) + sizeof(wcurrentuser_));
  // @@protoc_insertion_point(copy_constructor:ChinaChess.CMD_Chess_MOVE_CHESS)
}

void CMD_Chess_MOVE_CHESS::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&cbxsourcepos_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&wcurrentuser_) -
      reinterpret_cast<char*>(&cbxsourcepos_)) + sizeof(wcurrentuser_));
}

CMD_Chess_MOVE_CHESS::~CMD_Chess_MOVE_CHESS() {
  // @@protoc_insertion_point(destructor:ChinaChess.CMD_Chess_MOVE_CHESS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_Chess_MOVE_CHESS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_Chess_MOVE_CHESS::ArenaDtor(void* object) {
  CMD_Chess_MOVE_CHESS* _this = reinterpret_cast< CMD_Chess_MOVE_CHESS* >(object);
  (void)_this;
}
void CMD_Chess_MOVE_CHESS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_Chess_MOVE_CHESS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_Chess_MOVE_CHESS& CMD_Chess_MOVE_CHESS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_Chess_MOVE_CHESS_ChinaChess_2eproto.base);
  return *internal_default_instance();
}


void CMD_Chess_MOVE_CHESS::Clear() {
// @@protoc_insertion_point(message_clear_start:ChinaChess.CMD_Chess_MOVE_CHESS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cbxsourcepos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wcurrentuser_) -
      reinterpret_cast<char*>(&cbxsourcepos_)) + sizeof(wcurrentuser_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_Chess_MOVE_CHESS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 cbXSourcePos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cbxsourcepos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cbYSourcePos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cbysourcepos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cbXTargetPos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cbxtargetpos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cbYTargetPos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          cbytargetpos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 wCurrentUser = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          wcurrentuser_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_Chess_MOVE_CHESS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChinaChess.CMD_Chess_MOVE_CHESS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cbXSourcePos = 1;
  if (this->cbxsourcepos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cbxsourcepos(), target);
  }

  // int32 cbYSourcePos = 2;
  if (this->cbysourcepos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cbysourcepos(), target);
  }

  // int32 cbXTargetPos = 3;
  if (this->cbxtargetpos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_cbxtargetpos(), target);
  }

  // int32 cbYTargetPos = 4;
  if (this->cbytargetpos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_cbytargetpos(), target);
  }

  // int32 wCurrentUser = 5;
  if (this->wcurrentuser() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_wcurrentuser(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChinaChess.CMD_Chess_MOVE_CHESS)
  return target;
}

size_t CMD_Chess_MOVE_CHESS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChinaChess.CMD_Chess_MOVE_CHESS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 cbXSourcePos = 1;
  if (this->cbxsourcepos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cbxsourcepos());
  }

  // int32 cbYSourcePos = 2;
  if (this->cbysourcepos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cbysourcepos());
  }

  // int32 cbXTargetPos = 3;
  if (this->cbxtargetpos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cbxtargetpos());
  }

  // int32 cbYTargetPos = 4;
  if (this->cbytargetpos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cbytargetpos());
  }

  // int32 wCurrentUser = 5;
  if (this->wcurrentuser() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wcurrentuser());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_Chess_MOVE_CHESS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChinaChess.CMD_Chess_MOVE_CHESS)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_Chess_MOVE_CHESS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_Chess_MOVE_CHESS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChinaChess.CMD_Chess_MOVE_CHESS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChinaChess.CMD_Chess_MOVE_CHESS)
    MergeFrom(*source);
  }
}

void CMD_Chess_MOVE_CHESS::MergeFrom(const CMD_Chess_MOVE_CHESS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChinaChess.CMD_Chess_MOVE_CHESS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cbxsourcepos() != 0) {
    _internal_set_cbxsourcepos(from._internal_cbxsourcepos());
  }
  if (from.cbysourcepos() != 0) {
    _internal_set_cbysourcepos(from._internal_cbysourcepos());
  }
  if (from.cbxtargetpos() != 0) {
    _internal_set_cbxtargetpos(from._internal_cbxtargetpos());
  }
  if (from.cbytargetpos() != 0) {
    _internal_set_cbytargetpos(from._internal_cbytargetpos());
  }
  if (from.wcurrentuser() != 0) {
    _internal_set_wcurrentuser(from._internal_wcurrentuser());
  }
}

void CMD_Chess_MOVE_CHESS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChinaChess.CMD_Chess_MOVE_CHESS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_Chess_MOVE_CHESS::CopyFrom(const CMD_Chess_MOVE_CHESS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChinaChess.CMD_Chess_MOVE_CHESS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_Chess_MOVE_CHESS::IsInitialized() const {
  return true;
}

void CMD_Chess_MOVE_CHESS::InternalSwap(CMD_Chess_MOVE_CHESS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_Chess_MOVE_CHESS, wcurrentuser_)
      + sizeof(CMD_Chess_MOVE_CHESS::wcurrentuser_)
      - PROTOBUF_FIELD_OFFSET(CMD_Chess_MOVE_CHESS, cbxsourcepos_)>(
          reinterpret_cast<char*>(&cbxsourcepos_),
          reinterpret_cast<char*>(&other->cbxsourcepos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_Chess_MOVE_CHESS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RegretResult::_Internal {
 public:
};

RegretResult::RegretResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChinaChess.RegretResult)
}
RegretResult::RegretResult(const RegretResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&wregretuser_, &from.wregretuser_,
    static_cast<size_t>(reinterpret_cast<char*>(&cbregretcount_) -
    reinterpret_cast<char*>(&wregretuser_)) + sizeof(cbregretcount_));
  // @@protoc_insertion_point(copy_constructor:ChinaChess.RegretResult)
}

void RegretResult::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&wregretuser_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&cbregretcount_) -
      reinterpret_cast<char*>(&wregretuser_)) + sizeof(cbregretcount_));
}

RegretResult::~RegretResult() {
  // @@protoc_insertion_point(destructor:ChinaChess.RegretResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegretResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RegretResult::ArenaDtor(void* object) {
  RegretResult* _this = reinterpret_cast< RegretResult* >(object);
  (void)_this;
}
void RegretResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegretResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegretResult& RegretResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegretResult_ChinaChess_2eproto.base);
  return *internal_default_instance();
}


void RegretResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ChinaChess.RegretResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&wregretuser_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cbregretcount_) -
      reinterpret_cast<char*>(&wregretuser_)) + sizeof(cbregretcount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegretResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 wRegretUser = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          wregretuser_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 wCurrentUser = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          wcurrentuser_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cbRegretCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cbregretcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegretResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChinaChess.RegretResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 wRegretUser = 1;
  if (this->wregretuser() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_wregretuser(), target);
  }

  // int32 wCurrentUser = 2;
  if (this->wcurrentuser() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_wcurrentuser(), target);
  }

  // int32 cbRegretCount = 3;
  if (this->cbregretcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_cbregretcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChinaChess.RegretResult)
  return target;
}

size_t RegretResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChinaChess.RegretResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 wRegretUser = 1;
  if (this->wregretuser() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wregretuser());
  }

  // int32 wCurrentUser = 2;
  if (this->wcurrentuser() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wcurrentuser());
  }

  // int32 cbRegretCount = 3;
  if (this->cbregretcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cbregretcount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegretResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChinaChess.RegretResult)
  GOOGLE_DCHECK_NE(&from, this);
  const RegretResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegretResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChinaChess.RegretResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChinaChess.RegretResult)
    MergeFrom(*source);
  }
}

void RegretResult::MergeFrom(const RegretResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChinaChess.RegretResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.wregretuser() != 0) {
    _internal_set_wregretuser(from._internal_wregretuser());
  }
  if (from.wcurrentuser() != 0) {
    _internal_set_wcurrentuser(from._internal_wcurrentuser());
  }
  if (from.cbregretcount() != 0) {
    _internal_set_cbregretcount(from._internal_cbregretcount());
  }
}

void RegretResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChinaChess.RegretResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegretResult::CopyFrom(const RegretResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChinaChess.RegretResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegretResult::IsInitialized() const {
  return true;
}

void RegretResult::InternalSwap(RegretResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegretResult, cbregretcount_)
      + sizeof(RegretResult::cbregretcount_)
      - PROTOBUF_FIELD_OFFSET(RegretResult, wregretuser_)>(
          reinterpret_cast<char*>(&wregretuser_),
          reinterpret_cast<char*>(&other->wregretuser_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegretResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_Common::_Internal {
 public:
};

CMD_Common::CMD_Common(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChinaChess.CMD_Common)
}
CMD_Common::CMD_Common(const CMD_Common& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&opindex_, &from.opindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&waittime_) -
    reinterpret_cast<char*>(&opindex_)) + sizeof(waittime_));
  // @@protoc_insertion_point(copy_constructor:ChinaChess.CMD_Common)
}

void CMD_Common::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&opindex_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&waittime_) -
      reinterpret_cast<char*>(&opindex_)) + sizeof(waittime_));
}

CMD_Common::~CMD_Common() {
  // @@protoc_insertion_point(destructor:ChinaChess.CMD_Common)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_Common::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_Common::ArenaDtor(void* object) {
  CMD_Common* _this = reinterpret_cast< CMD_Common* >(object);
  (void)_this;
}
void CMD_Common::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_Common::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_Common& CMD_Common::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_Common_ChinaChess_2eproto.base);
  return *internal_default_instance();
}


void CMD_Common::Clear() {
// @@protoc_insertion_point(message_clear_start:ChinaChess.CMD_Common)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&opindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&waittime_) -
      reinterpret_cast<char*>(&opindex_)) + sizeof(waittime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_Common::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 opIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          opindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 waitTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          waittime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_Common::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChinaChess.CMD_Common)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 opIndex = 1;
  if (this->opindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_opindex(), target);
  }

  // int32 waitTime = 2;
  if (this->waittime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_waittime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChinaChess.CMD_Common)
  return target;
}

size_t CMD_Common::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChinaChess.CMD_Common)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 opIndex = 1;
  if (this->opindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_opindex());
  }

  // int32 waitTime = 2;
  if (this->waittime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_waittime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_Common::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChinaChess.CMD_Common)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_Common* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_Common>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChinaChess.CMD_Common)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChinaChess.CMD_Common)
    MergeFrom(*source);
  }
}

void CMD_Common::MergeFrom(const CMD_Common& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChinaChess.CMD_Common)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.opindex() != 0) {
    _internal_set_opindex(from._internal_opindex());
  }
  if (from.waittime() != 0) {
    _internal_set_waittime(from._internal_waittime());
  }
}

void CMD_Common::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChinaChess.CMD_Common)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_Common::CopyFrom(const CMD_Common& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChinaChess.CMD_Common)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_Common::IsInitialized() const {
  return true;
}

void CMD_Common::InternalSwap(CMD_Common* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_Common, waittime_)
      + sizeof(CMD_Common::waittime_)
      - PROTOBUF_FIELD_OFFSET(CMD_Common, opindex_)>(
          reinterpret_cast<char*>(&opindex_),
          reinterpret_cast<char*>(&other->opindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_Common::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GameEnd::_Internal {
 public:
};

GameEnd::GameEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  luserscore_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChinaChess.GameEnd)
}
GameEnd::GameEnd(const GameEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      luserscore_(from.luserscore_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  wwinuser_ = from.wwinuser_;
  // @@protoc_insertion_point(copy_constructor:ChinaChess.GameEnd)
}

void GameEnd::SharedCtor() {
  wwinuser_ = 0;
}

GameEnd::~GameEnd() {
  // @@protoc_insertion_point(destructor:ChinaChess.GameEnd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameEnd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameEnd::ArenaDtor(void* object) {
  GameEnd* _this = reinterpret_cast< GameEnd* >(object);
  (void)_this;
}
void GameEnd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEnd& GameEnd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEnd_ChinaChess_2eproto.base);
  return *internal_default_instance();
}


void GameEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:ChinaChess.GameEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  luserscore_.Clear();
  wwinuser_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEnd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 wWinUser = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          wwinuser_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 lUserScore = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_luserscore(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_luserscore(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEnd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChinaChess.GameEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 wWinUser = 1;
  if (this->wwinuser() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_wwinuser(), target);
  }

  // repeated int64 lUserScore = 2;
  {
    int byte_size = _luserscore_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_luserscore(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChinaChess.GameEnd)
  return target;
}

size_t GameEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChinaChess.GameEnd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 lUserScore = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->luserscore_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _luserscore_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 wWinUser = 1;
  if (this->wwinuser() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wwinuser());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEnd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChinaChess.GameEnd)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEnd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEnd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChinaChess.GameEnd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChinaChess.GameEnd)
    MergeFrom(*source);
  }
}

void GameEnd::MergeFrom(const GameEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChinaChess.GameEnd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  luserscore_.MergeFrom(from.luserscore_);
  if (from.wwinuser() != 0) {
    _internal_set_wwinuser(from._internal_wwinuser());
  }
}

void GameEnd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChinaChess.GameEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEnd::CopyFrom(const GameEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChinaChess.GameEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEnd::IsInitialized() const {
  return true;
}

void GameEnd::InternalSwap(GameEnd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  luserscore_.InternalSwap(&other->luserscore_);
  swap(wwinuser_, other->wwinuser_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEnd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Chess_Manual_Item::_Internal {
 public:
};

Chess_Manual_Item::Chess_Manual_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChinaChess.Chess_Manual_Item)
}
Chess_Manual_Item::Chess_Manual_Item(const Chess_Manual_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cbxsourcechesspos_, &from.cbxsourcechesspos_,
    static_cast<size_t>(reinterpret_cast<char*>(&cbsourcecolor_) -
    reinterpret_cast<char*>(&cbxsourcechesspos_)) + sizeof(cbsourcecolor_));
  // @@protoc_insertion_point(copy_constructor:ChinaChess.Chess_Manual_Item)
}

void Chess_Manual_Item::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&cbxsourcechesspos_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&cbsourcecolor_) -
      reinterpret_cast<char*>(&cbxsourcechesspos_)) + sizeof(cbsourcecolor_));
}

Chess_Manual_Item::~Chess_Manual_Item() {
  // @@protoc_insertion_point(destructor:ChinaChess.Chess_Manual_Item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Chess_Manual_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Chess_Manual_Item::ArenaDtor(void* object) {
  Chess_Manual_Item* _this = reinterpret_cast< Chess_Manual_Item* >(object);
  (void)_this;
}
void Chess_Manual_Item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Chess_Manual_Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Chess_Manual_Item& Chess_Manual_Item::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Chess_Manual_Item_ChinaChess_2eproto.base);
  return *internal_default_instance();
}


void Chess_Manual_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:ChinaChess.Chess_Manual_Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cbxsourcechesspos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cbsourcecolor_) -
      reinterpret_cast<char*>(&cbxsourcechesspos_)) + sizeof(cbsourcecolor_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chess_Manual_Item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 cbXSourceChessPos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cbxsourcechesspos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cbYSourceChessPos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cbysourcechesspos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cbXTargetChessPos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cbxtargetchesspos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cbYTargetChessPos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          cbytargetchesspos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cbUniteChess = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          cbunitechess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cbSourceColor = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          cbsourcecolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Chess_Manual_Item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChinaChess.Chess_Manual_Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cbXSourceChessPos = 1;
  if (this->cbxsourcechesspos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cbxsourcechesspos(), target);
  }

  // int32 cbYSourceChessPos = 2;
  if (this->cbysourcechesspos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cbysourcechesspos(), target);
  }

  // int32 cbXTargetChessPos = 3;
  if (this->cbxtargetchesspos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_cbxtargetchesspos(), target);
  }

  // int32 cbYTargetChessPos = 4;
  if (this->cbytargetchesspos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_cbytargetchesspos(), target);
  }

  // int32 cbUniteChess = 5;
  if (this->cbunitechess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_cbunitechess(), target);
  }

  // int32 cbSourceColor = 6;
  if (this->cbsourcecolor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_cbsourcecolor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChinaChess.Chess_Manual_Item)
  return target;
}

size_t Chess_Manual_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChinaChess.Chess_Manual_Item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 cbXSourceChessPos = 1;
  if (this->cbxsourcechesspos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cbxsourcechesspos());
  }

  // int32 cbYSourceChessPos = 2;
  if (this->cbysourcechesspos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cbysourcechesspos());
  }

  // int32 cbXTargetChessPos = 3;
  if (this->cbxtargetchesspos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cbxtargetchesspos());
  }

  // int32 cbYTargetChessPos = 4;
  if (this->cbytargetchesspos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cbytargetchesspos());
  }

  // int32 cbUniteChess = 5;
  if (this->cbunitechess() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cbunitechess());
  }

  // int32 cbSourceColor = 6;
  if (this->cbsourcecolor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cbsourcecolor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Chess_Manual_Item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChinaChess.Chess_Manual_Item)
  GOOGLE_DCHECK_NE(&from, this);
  const Chess_Manual_Item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Chess_Manual_Item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChinaChess.Chess_Manual_Item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChinaChess.Chess_Manual_Item)
    MergeFrom(*source);
  }
}

void Chess_Manual_Item::MergeFrom(const Chess_Manual_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChinaChess.Chess_Manual_Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cbxsourcechesspos() != 0) {
    _internal_set_cbxsourcechesspos(from._internal_cbxsourcechesspos());
  }
  if (from.cbysourcechesspos() != 0) {
    _internal_set_cbysourcechesspos(from._internal_cbysourcechesspos());
  }
  if (from.cbxtargetchesspos() != 0) {
    _internal_set_cbxtargetchesspos(from._internal_cbxtargetchesspos());
  }
  if (from.cbytargetchesspos() != 0) {
    _internal_set_cbytargetchesspos(from._internal_cbytargetchesspos());
  }
  if (from.cbunitechess() != 0) {
    _internal_set_cbunitechess(from._internal_cbunitechess());
  }
  if (from.cbsourcecolor() != 0) {
    _internal_set_cbsourcecolor(from._internal_cbsourcecolor());
  }
}

void Chess_Manual_Item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChinaChess.Chess_Manual_Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chess_Manual_Item::CopyFrom(const Chess_Manual_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChinaChess.Chess_Manual_Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chess_Manual_Item::IsInitialized() const {
  return true;
}

void Chess_Manual_Item::InternalSwap(Chess_Manual_Item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Chess_Manual_Item, cbsourcecolor_)
      + sizeof(Chess_Manual_Item::cbsourcecolor_)
      - PROTOBUF_FIELD_OFFSET(Chess_Manual_Item, cbxsourcechesspos_)>(
          reinterpret_cast<char*>(&cbxsourcechesspos_),
          reinterpret_cast<char*>(&other->cbxsourcechesspos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Chess_Manual_Item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Chess_Manual::_Internal {
 public:
};

Chess_Manual::Chess_Manual(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChinaChess.Chess_Manual)
}
Chess_Manual::Chess_Manual(const Chess_Manual& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ChinaChess.Chess_Manual)
}

void Chess_Manual::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Chess_Manual_ChinaChess_2eproto.base);
}

Chess_Manual::~Chess_Manual() {
  // @@protoc_insertion_point(destructor:ChinaChess.Chess_Manual)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Chess_Manual::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Chess_Manual::ArenaDtor(void* object) {
  Chess_Manual* _this = reinterpret_cast< Chess_Manual* >(object);
  (void)_this;
}
void Chess_Manual::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Chess_Manual::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Chess_Manual& Chess_Manual::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Chess_Manual_ChinaChess_2eproto.base);
  return *internal_default_instance();
}


void Chess_Manual::Clear() {
// @@protoc_insertion_point(message_clear_start:ChinaChess.Chess_Manual)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chess_Manual::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ChinaChess.Chess_Manual_Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Chess_Manual::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChinaChess.Chess_Manual)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ChinaChess.Chess_Manual_Item items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChinaChess.Chess_Manual)
  return target;
}

size_t Chess_Manual::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChinaChess.Chess_Manual)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ChinaChess.Chess_Manual_Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Chess_Manual::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChinaChess.Chess_Manual)
  GOOGLE_DCHECK_NE(&from, this);
  const Chess_Manual* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Chess_Manual>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChinaChess.Chess_Manual)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChinaChess.Chess_Manual)
    MergeFrom(*source);
  }
}

void Chess_Manual::MergeFrom(const Chess_Manual& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChinaChess.Chess_Manual)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void Chess_Manual::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChinaChess.Chess_Manual)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chess_Manual::CopyFrom(const Chess_Manual& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChinaChess.Chess_Manual)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chess_Manual::IsInitialized() const {
  return true;
}

void Chess_Manual::InternalSwap(Chess_Manual* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Chess_Manual::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Notify_Timer::_Internal {
 public:
};

Notify_Timer::Notify_Timer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChinaChess.Notify_Timer)
}
Notify_Timer::Notify_Timer(const Notify_Timer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&waittime_, &from.waittime_,
    static_cast<size_t>(reinterpret_cast<char*>(&roomtype_) -
    reinterpret_cast<char*>(&waittime_)) + sizeof(roomtype_));
  // @@protoc_insertion_point(copy_constructor:ChinaChess.Notify_Timer)
}

void Notify_Timer::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&waittime_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&roomtype_) -
      reinterpret_cast<char*>(&waittime_)) + sizeof(roomtype_));
}

Notify_Timer::~Notify_Timer() {
  // @@protoc_insertion_point(destructor:ChinaChess.Notify_Timer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Notify_Timer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Notify_Timer::ArenaDtor(void* object) {
  Notify_Timer* _this = reinterpret_cast< Notify_Timer* >(object);
  (void)_this;
}
void Notify_Timer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Notify_Timer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Notify_Timer& Notify_Timer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Notify_Timer_ChinaChess_2eproto.base);
  return *internal_default_instance();
}


void Notify_Timer::Clear() {
// @@protoc_insertion_point(message_clear_start:ChinaChess.Notify_Timer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&waittime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomtype_) -
      reinterpret_cast<char*>(&waittime_)) + sizeof(roomtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Notify_Timer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 waitTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          waittime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 roomType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          roomtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Notify_Timer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChinaChess.Notify_Timer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 waitTime = 1;
  if (this->waittime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_waittime(), target);
  }

  // int32 roomType = 2;
  if (this->roomtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_roomtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChinaChess.Notify_Timer)
  return target;
}

size_t Notify_Timer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChinaChess.Notify_Timer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 waitTime = 1;
  if (this->waittime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_waittime());
  }

  // int32 roomType = 2;
  if (this->roomtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_roomtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Notify_Timer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChinaChess.Notify_Timer)
  GOOGLE_DCHECK_NE(&from, this);
  const Notify_Timer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Notify_Timer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChinaChess.Notify_Timer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChinaChess.Notify_Timer)
    MergeFrom(*source);
  }
}

void Notify_Timer::MergeFrom(const Notify_Timer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChinaChess.Notify_Timer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.waittime() != 0) {
    _internal_set_waittime(from._internal_waittime());
  }
  if (from.roomtype() != 0) {
    _internal_set_roomtype(from._internal_roomtype());
  }
}

void Notify_Timer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChinaChess.Notify_Timer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Notify_Timer::CopyFrom(const Notify_Timer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChinaChess.Notify_Timer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Notify_Timer::IsInitialized() const {
  return true;
}

void Notify_Timer::InternalSwap(Notify_Timer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Notify_Timer, roomtype_)
      + sizeof(Notify_Timer::roomtype_)
      - PROTOBUF_FIELD_OFFSET(Notify_Timer, waittime_)>(
          reinterpret_cast<char*>(&waittime_),
          reinterpret_cast<char*>(&other->waittime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Notify_Timer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_Make_Rule::_Internal {
 public:
};

CMD_Make_Rule::CMD_Make_Rule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChinaChess.CMD_Make_Rule)
}
CMD_Make_Rule::CMD_Make_Rule(const CMD_Make_Rule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&errorid_) -
    reinterpret_cast<char*>(&score_)) + sizeof(errorid_));
  // @@protoc_insertion_point(copy_constructor:ChinaChess.CMD_Make_Rule)
}

void CMD_Make_Rule::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&score_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&errorid_) -
      reinterpret_cast<char*>(&score_)) + sizeof(errorid_));
}

CMD_Make_Rule::~CMD_Make_Rule() {
  // @@protoc_insertion_point(destructor:ChinaChess.CMD_Make_Rule)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_Make_Rule::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_Make_Rule::ArenaDtor(void* object) {
  CMD_Make_Rule* _this = reinterpret_cast< CMD_Make_Rule* >(object);
  (void)_this;
}
void CMD_Make_Rule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_Make_Rule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_Make_Rule& CMD_Make_Rule::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_Make_Rule_ChinaChess_2eproto.base);
  return *internal_default_instance();
}


void CMD_Make_Rule::Clear() {
// @@protoc_insertion_point(message_clear_start:ChinaChess.CMD_Make_Rule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorid_) -
      reinterpret_cast<char*>(&score_)) + sizeof(errorid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_Make_Rule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 errorID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          errorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_Make_Rule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChinaChess.CMD_Make_Rule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 errorID = 1;
  if (this->errorid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_errorid(), target);
  }

  // int64 score = 2;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChinaChess.CMD_Make_Rule)
  return target;
}

size_t CMD_Make_Rule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChinaChess.CMD_Make_Rule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 score = 2;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_score());
  }

  // int32 errorID = 1;
  if (this->errorid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_errorid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_Make_Rule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChinaChess.CMD_Make_Rule)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_Make_Rule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_Make_Rule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChinaChess.CMD_Make_Rule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChinaChess.CMD_Make_Rule)
    MergeFrom(*source);
  }
}

void CMD_Make_Rule::MergeFrom(const CMD_Make_Rule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChinaChess.CMD_Make_Rule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.errorid() != 0) {
    _internal_set_errorid(from._internal_errorid());
  }
}

void CMD_Make_Rule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChinaChess.CMD_Make_Rule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_Make_Rule::CopyFrom(const CMD_Make_Rule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChinaChess.CMD_Make_Rule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_Make_Rule::IsInitialized() const {
  return true;
}

void CMD_Make_Rule::InternalSwap(CMD_Make_Rule* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_Make_Rule, errorid_)
      + sizeof(CMD_Make_Rule::errorid_)
      - PROTOBUF_FIELD_OFFSET(CMD_Make_Rule, score_)>(
          reinterpret_cast<char*>(&score_),
          reinterpret_cast<char*>(&other->score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_Make_Rule::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ChinaChess
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ChinaChess::Scene_ChessItem* Arena::CreateMaybeMessage< ::ChinaChess::Scene_ChessItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChinaChess::Scene_ChessItem >(arena);
}
template<> PROTOBUF_NOINLINE ::ChinaChess::Scene_Chess* Arena::CreateMaybeMessage< ::ChinaChess::Scene_Chess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChinaChess::Scene_Chess >(arena);
}
template<> PROTOBUF_NOINLINE ::ChinaChess::Scene_GameRuleInfo* Arena::CreateMaybeMessage< ::ChinaChess::Scene_GameRuleInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChinaChess::Scene_GameRuleInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ChinaChess::Scene_Detail* Arena::CreateMaybeMessage< ::ChinaChess::Scene_Detail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChinaChess::Scene_Detail >(arena);
}
template<> PROTOBUF_NOINLINE ::ChinaChess::SC_SceneInfo* Arena::CreateMaybeMessage< ::ChinaChess::SC_SceneInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChinaChess::SC_SceneInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ChinaChess::CMD_Chess_MOVE_CHESS* Arena::CreateMaybeMessage< ::ChinaChess::CMD_Chess_MOVE_CHESS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChinaChess::CMD_Chess_MOVE_CHESS >(arena);
}
template<> PROTOBUF_NOINLINE ::ChinaChess::RegretResult* Arena::CreateMaybeMessage< ::ChinaChess::RegretResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChinaChess::RegretResult >(arena);
}
template<> PROTOBUF_NOINLINE ::ChinaChess::CMD_Common* Arena::CreateMaybeMessage< ::ChinaChess::CMD_Common >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChinaChess::CMD_Common >(arena);
}
template<> PROTOBUF_NOINLINE ::ChinaChess::GameEnd* Arena::CreateMaybeMessage< ::ChinaChess::GameEnd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChinaChess::GameEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::ChinaChess::Chess_Manual_Item* Arena::CreateMaybeMessage< ::ChinaChess::Chess_Manual_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChinaChess::Chess_Manual_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::ChinaChess::Chess_Manual* Arena::CreateMaybeMessage< ::ChinaChess::Chess_Manual >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChinaChess::Chess_Manual >(arena);
}
template<> PROTOBUF_NOINLINE ::ChinaChess::Notify_Timer* Arena::CreateMaybeMessage< ::ChinaChess::Notify_Timer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChinaChess::Notify_Timer >(arena);
}
template<> PROTOBUF_NOINLINE ::ChinaChess::CMD_Make_Rule* Arena::CreateMaybeMessage< ::ChinaChess::CMD_Make_Rule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChinaChess::CMD_Make_Rule >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
