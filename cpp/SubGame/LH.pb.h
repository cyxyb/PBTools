// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LH.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_LH_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_LH_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_LH_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_LH_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LH_2eproto;
namespace LH {
class CMD_CS_AddBet;
class CMD_CS_AddBetDefaultTypeInternal;
extern CMD_CS_AddBetDefaultTypeInternal _CMD_CS_AddBet_default_instance_;
class CMD_CS_AddBetAgain;
class CMD_CS_AddBetAgainDefaultTypeInternal;
extern CMD_CS_AddBetAgainDefaultTypeInternal _CMD_CS_AddBetAgain_default_instance_;
class CMD_SC_AddBet;
class CMD_SC_AddBetDefaultTypeInternal;
extern CMD_SC_AddBetDefaultTypeInternal _CMD_SC_AddBet_default_instance_;
class CMD_SC_AddBetAgain;
class CMD_SC_AddBetAgainDefaultTypeInternal;
extern CMD_SC_AddBetAgainDefaultTypeInternal _CMD_SC_AddBetAgain_default_instance_;
class CMD_SC_GameResult;
class CMD_SC_GameResultDefaultTypeInternal;
extern CMD_SC_GameResultDefaultTypeInternal _CMD_SC_GameResult_default_instance_;
class CMD_SC_GameSceneInfo;
class CMD_SC_GameSceneInfoDefaultTypeInternal;
extern CMD_SC_GameSceneInfoDefaultTypeInternal _CMD_SC_GameSceneInfo_default_instance_;
class CMD_SC_NotifyStatus;
class CMD_SC_NotifyStatusDefaultTypeInternal;
extern CMD_SC_NotifyStatusDefaultTypeInternal _CMD_SC_NotifyStatus_default_instance_;
class CMD_SC_ReusltPlatePath;
class CMD_SC_ReusltPlatePathDefaultTypeInternal;
extern CMD_SC_ReusltPlatePathDefaultTypeInternal _CMD_SC_ReusltPlatePath_default_instance_;
class PlayerInfo;
class PlayerInfoDefaultTypeInternal;
extern PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
class PlayerInfoTop;
class PlayerInfoTopDefaultTypeInternal;
extern PlayerInfoTopDefaultTypeInternal _PlayerInfoTop_default_instance_;
}  // namespace LH
PROTOBUF_NAMESPACE_OPEN
template<> ::LH::CMD_CS_AddBet* Arena::CreateMaybeMessage<::LH::CMD_CS_AddBet>(Arena*);
template<> ::LH::CMD_CS_AddBetAgain* Arena::CreateMaybeMessage<::LH::CMD_CS_AddBetAgain>(Arena*);
template<> ::LH::CMD_SC_AddBet* Arena::CreateMaybeMessage<::LH::CMD_SC_AddBet>(Arena*);
template<> ::LH::CMD_SC_AddBetAgain* Arena::CreateMaybeMessage<::LH::CMD_SC_AddBetAgain>(Arena*);
template<> ::LH::CMD_SC_GameResult* Arena::CreateMaybeMessage<::LH::CMD_SC_GameResult>(Arena*);
template<> ::LH::CMD_SC_GameSceneInfo* Arena::CreateMaybeMessage<::LH::CMD_SC_GameSceneInfo>(Arena*);
template<> ::LH::CMD_SC_NotifyStatus* Arena::CreateMaybeMessage<::LH::CMD_SC_NotifyStatus>(Arena*);
template<> ::LH::CMD_SC_ReusltPlatePath* Arena::CreateMaybeMessage<::LH::CMD_SC_ReusltPlatePath>(Arena*);
template<> ::LH::PlayerInfo* Arena::CreateMaybeMessage<::LH::PlayerInfo>(Arena*);
template<> ::LH::PlayerInfoTop* Arena::CreateMaybeMessage<::LH::PlayerInfoTop>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LH {

enum EMsgIDLH : int {
  SUB_SC_SCENEINFO = 0,
  SUB_SC_ADDBET = 1,
  SUB_SC_BETAGAIN = 2,
  SUB_SC_GAMERESULT = 3,
  CMD_SC_NOTIFYSTATUS = 4,
  SUB_S_CHECK_ROBOT_LEAVE = 5,
  CMD_SC_AI_BET = 6,
  SUB_SC_GAMEGOLDTOP = 7,
  SUB_SC_GAMRECORD = 8,
  SUB_SC_AI_BET_ERROR = 9,
  SUB_CS_ADDBET = 10,
  SUB_CS_BETAGAIN = 11,
  EMsgIDLH_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EMsgIDLH_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EMsgIDLH_IsValid(int value);
constexpr EMsgIDLH EMsgIDLH_MIN = SUB_SC_SCENEINFO;
constexpr EMsgIDLH EMsgIDLH_MAX = SUB_CS_BETAGAIN;
constexpr int EMsgIDLH_ARRAYSIZE = EMsgIDLH_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDLH_descriptor();
template<typename T>
inline const std::string& EMsgIDLH_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EMsgIDLH>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EMsgIDLH_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EMsgIDLH_descriptor(), enum_t_value);
}
inline bool EMsgIDLH_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EMsgIDLH* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EMsgIDLH>(
    EMsgIDLH_descriptor(), name, value);
}
// ===================================================================

class CMD_SC_NotifyStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LH.CMD_SC_NotifyStatus) */ {
 public:
  inline CMD_SC_NotifyStatus() : CMD_SC_NotifyStatus(nullptr) {}
  virtual ~CMD_SC_NotifyStatus();

  CMD_SC_NotifyStatus(const CMD_SC_NotifyStatus& from);
  CMD_SC_NotifyStatus(CMD_SC_NotifyStatus&& from) noexcept
    : CMD_SC_NotifyStatus() {
    *this = ::std::move(from);
  }

  inline CMD_SC_NotifyStatus& operator=(const CMD_SC_NotifyStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMD_SC_NotifyStatus& operator=(CMD_SC_NotifyStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMD_SC_NotifyStatus& default_instance();

  static inline const CMD_SC_NotifyStatus* internal_default_instance() {
    return reinterpret_cast<const CMD_SC_NotifyStatus*>(
               &_CMD_SC_NotifyStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMD_SC_NotifyStatus& a, CMD_SC_NotifyStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CMD_SC_NotifyStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMD_SC_NotifyStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMD_SC_NotifyStatus* New() const final {
    return CreateMaybeMessage<CMD_SC_NotifyStatus>(nullptr);
  }

  CMD_SC_NotifyStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMD_SC_NotifyStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMD_SC_NotifyStatus& from);
  void MergeFrom(const CMD_SC_NotifyStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMD_SC_NotifyStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LH.CMD_SC_NotifyStatus";
  }
  protected:
  explicit CMD_SC_NotifyStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LH_2eproto);
    return ::descriptor_table_LH_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameStateFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // int32 game_state = 1;
  void clear_game_state();
  ::PROTOBUF_NAMESPACE_ID::int32 game_state() const;
  void set_game_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_state() const;
  void _internal_set_game_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 time = 2;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LH.CMD_SC_NotifyStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LH_2eproto;
};
// -------------------------------------------------------------------

class PlayerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LH.PlayerInfo) */ {
 public:
  inline PlayerInfo() : PlayerInfo(nullptr) {}
  virtual ~PlayerInfo();

  PlayerInfo(const PlayerInfo& from);
  PlayerInfo(PlayerInfo&& from) noexcept
    : PlayerInfo() {
    *this = ::std::move(from);
  }

  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInfo& operator=(PlayerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerInfo& default_instance();

  static inline const PlayerInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerInfo*>(
               &_PlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlayerInfo& a, PlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerInfo* New() const final {
    return CreateMaybeMessage<PlayerInfo>(nullptr);
  }

  PlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerInfo& from);
  void MergeFrom(const PlayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LH.PlayerInfo";
  }
  protected:
  explicit PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LH_2eproto);
    return ::descriptor_table_LH_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameBetFieldNumber = 1,
    kWinCountFieldNumber = 2,
    kBetDragonFieldNumber = 3,
    kBetTigerFieldNumber = 4,
  };
  // int64 game_bet = 1;
  void clear_game_bet();
  ::PROTOBUF_NAMESPACE_ID::int64 game_bet() const;
  void set_game_bet(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_game_bet() const;
  void _internal_set_game_bet(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 win_count = 2;
  void clear_win_count();
  ::PROTOBUF_NAMESPACE_ID::int32 win_count() const;
  void set_win_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_win_count() const;
  void _internal_set_win_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bet_dragon = 3;
  void clear_bet_dragon();
  ::PROTOBUF_NAMESPACE_ID::int32 bet_dragon() const;
  void set_bet_dragon(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bet_dragon() const;
  void _internal_set_bet_dragon(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bet_tiger = 4;
  void clear_bet_tiger();
  ::PROTOBUF_NAMESPACE_ID::int32 bet_tiger() const;
  void set_bet_tiger(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bet_tiger() const;
  void _internal_set_bet_tiger(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LH.PlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 game_bet_;
  ::PROTOBUF_NAMESPACE_ID::int32 win_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 bet_dragon_;
  ::PROTOBUF_NAMESPACE_ID::int32 bet_tiger_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LH_2eproto;
};
// -------------------------------------------------------------------

class PlayerInfoTop PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LH.PlayerInfoTop) */ {
 public:
  inline PlayerInfoTop() : PlayerInfoTop(nullptr) {}
  virtual ~PlayerInfoTop();

  PlayerInfoTop(const PlayerInfoTop& from);
  PlayerInfoTop(PlayerInfoTop&& from) noexcept
    : PlayerInfoTop() {
    *this = ::std::move(from);
  }

  inline PlayerInfoTop& operator=(const PlayerInfoTop& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInfoTop& operator=(PlayerInfoTop&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerInfoTop& default_instance();

  static inline const PlayerInfoTop* internal_default_instance() {
    return reinterpret_cast<const PlayerInfoTop*>(
               &_PlayerInfoTop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PlayerInfoTop& a, PlayerInfoTop& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInfoTop* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInfoTop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerInfoTop* New() const final {
    return CreateMaybeMessage<PlayerInfoTop>(nullptr);
  }

  PlayerInfoTop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerInfoTop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerInfoTop& from);
  void MergeFrom(const PlayerInfoTop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInfoTop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LH.PlayerInfoTop";
  }
  protected:
  explicit PlayerInfoTop(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LH_2eproto);
    return ::descriptor_table_LH_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopFieldNumber = 1,
  };
  // repeated .LH.PlayerInfo top = 1;
  int top_size() const;
  private:
  int _internal_top_size() const;
  public:
  void clear_top();
  ::LH::PlayerInfo* mutable_top(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LH::PlayerInfo >*
      mutable_top();
  private:
  const ::LH::PlayerInfo& _internal_top(int index) const;
  ::LH::PlayerInfo* _internal_add_top();
  public:
  const ::LH::PlayerInfo& top(int index) const;
  ::LH::PlayerInfo* add_top();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LH::PlayerInfo >&
      top() const;

  // @@protoc_insertion_point(class_scope:LH.PlayerInfoTop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LH::PlayerInfo > top_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LH_2eproto;
};
// -------------------------------------------------------------------

class CMD_SC_ReusltPlatePath PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LH.CMD_SC_ReusltPlatePath) */ {
 public:
  inline CMD_SC_ReusltPlatePath() : CMD_SC_ReusltPlatePath(nullptr) {}
  virtual ~CMD_SC_ReusltPlatePath();

  CMD_SC_ReusltPlatePath(const CMD_SC_ReusltPlatePath& from);
  CMD_SC_ReusltPlatePath(CMD_SC_ReusltPlatePath&& from) noexcept
    : CMD_SC_ReusltPlatePath() {
    *this = ::std::move(from);
  }

  inline CMD_SC_ReusltPlatePath& operator=(const CMD_SC_ReusltPlatePath& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMD_SC_ReusltPlatePath& operator=(CMD_SC_ReusltPlatePath&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMD_SC_ReusltPlatePath& default_instance();

  static inline const CMD_SC_ReusltPlatePath* internal_default_instance() {
    return reinterpret_cast<const CMD_SC_ReusltPlatePath*>(
               &_CMD_SC_ReusltPlatePath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMD_SC_ReusltPlatePath& a, CMD_SC_ReusltPlatePath& b) {
    a.Swap(&b);
  }
  inline void Swap(CMD_SC_ReusltPlatePath* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMD_SC_ReusltPlatePath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMD_SC_ReusltPlatePath* New() const final {
    return CreateMaybeMessage<CMD_SC_ReusltPlatePath>(nullptr);
  }

  CMD_SC_ReusltPlatePath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMD_SC_ReusltPlatePath>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMD_SC_ReusltPlatePath& from);
  void MergeFrom(const CMD_SC_ReusltPlatePath& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMD_SC_ReusltPlatePath* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LH.CMD_SC_ReusltPlatePath";
  }
  protected:
  explicit CMD_SC_ReusltPlatePath(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LH_2eproto);
    return ::descriptor_table_LH_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGamePlatePathFieldNumber = 1,
  };
  // repeated int32 game_plate_path = 1;
  int game_plate_path_size() const;
  private:
  int _internal_game_plate_path_size() const;
  public:
  void clear_game_plate_path();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_plate_path(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_game_plate_path() const;
  void _internal_add_game_plate_path(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_game_plate_path();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 game_plate_path(int index) const;
  void set_game_plate_path(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_game_plate_path(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      game_plate_path() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_game_plate_path();

  // @@protoc_insertion_point(class_scope:LH.CMD_SC_ReusltPlatePath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > game_plate_path_;
  mutable std::atomic<int> _game_plate_path_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LH_2eproto;
};
// -------------------------------------------------------------------

class CMD_SC_GameSceneInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LH.CMD_SC_GameSceneInfo) */ {
 public:
  inline CMD_SC_GameSceneInfo() : CMD_SC_GameSceneInfo(nullptr) {}
  virtual ~CMD_SC_GameSceneInfo();

  CMD_SC_GameSceneInfo(const CMD_SC_GameSceneInfo& from);
  CMD_SC_GameSceneInfo(CMD_SC_GameSceneInfo&& from) noexcept
    : CMD_SC_GameSceneInfo() {
    *this = ::std::move(from);
  }

  inline CMD_SC_GameSceneInfo& operator=(const CMD_SC_GameSceneInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMD_SC_GameSceneInfo& operator=(CMD_SC_GameSceneInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMD_SC_GameSceneInfo& default_instance();

  static inline const CMD_SC_GameSceneInfo* internal_default_instance() {
    return reinterpret_cast<const CMD_SC_GameSceneInfo*>(
               &_CMD_SC_GameSceneInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMD_SC_GameSceneInfo& a, CMD_SC_GameSceneInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMD_SC_GameSceneInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMD_SC_GameSceneInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMD_SC_GameSceneInfo* New() const final {
    return CreateMaybeMessage<CMD_SC_GameSceneInfo>(nullptr);
  }

  CMD_SC_GameSceneInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMD_SC_GameSceneInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMD_SC_GameSceneInfo& from);
  void MergeFrom(const CMD_SC_GameSceneInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMD_SC_GameSceneInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LH.CMD_SC_GameSceneInfo";
  }
  protected:
  explicit CMD_SC_GameSceneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LH_2eproto);
    return ::descriptor_table_LH_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameBetFieldNumber = 3,
    kGameBetAreaLimitFieldNumber = 5,
    kBetConfigFieldNumber = 6,
    kAeraMultipleFieldNumber = 7,
    kGameStateInfoFieldNumber = 1,
    kGameTimesFieldNumber = 2,
    kPlayerBetAreaLimitFieldNumber = 4,
    kGamePokerNumFieldNumber = 8,
  };
  // repeated int32 game_bet = 3;
  int game_bet_size() const;
  private:
  int _internal_game_bet_size() const;
  public:
  void clear_game_bet();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_bet(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_game_bet() const;
  void _internal_add_game_bet(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_game_bet();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 game_bet(int index) const;
  void set_game_bet(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_game_bet(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      game_bet() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_game_bet();

  // repeated int32 game_bet_area_limit = 5;
  int game_bet_area_limit_size() const;
  private:
  int _internal_game_bet_area_limit_size() const;
  public:
  void clear_game_bet_area_limit();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_bet_area_limit(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_game_bet_area_limit() const;
  void _internal_add_game_bet_area_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_game_bet_area_limit();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 game_bet_area_limit(int index) const;
  void set_game_bet_area_limit(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_game_bet_area_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      game_bet_area_limit() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_game_bet_area_limit();

  // repeated int32 bet_config = 6;
  int bet_config_size() const;
  private:
  int _internal_bet_config_size() const;
  public:
  void clear_bet_config();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bet_config(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_bet_config() const;
  void _internal_add_bet_config(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_bet_config();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 bet_config(int index) const;
  void set_bet_config(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_bet_config(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      bet_config() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_bet_config();

  // repeated int32 aera_multiple = 7;
  int aera_multiple_size() const;
  private:
  int _internal_aera_multiple_size() const;
  public:
  void clear_aera_multiple();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_aera_multiple(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_aera_multiple() const;
  void _internal_add_aera_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_aera_multiple();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 aera_multiple(int index) const;
  void set_aera_multiple(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_aera_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      aera_multiple() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_aera_multiple();

  // int32 game_state_info = 1;
  void clear_game_state_info();
  ::PROTOBUF_NAMESPACE_ID::int32 game_state_info() const;
  void set_game_state_info(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_state_info() const;
  void _internal_set_game_state_info(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 game_times = 2;
  void clear_game_times();
  ::PROTOBUF_NAMESPACE_ID::int32 game_times() const;
  void set_game_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_times() const;
  void _internal_set_game_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 player_bet_area_limit = 4;
  void clear_player_bet_area_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 player_bet_area_limit() const;
  void set_player_bet_area_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_bet_area_limit() const;
  void _internal_set_player_bet_area_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 game_poker_num = 8;
  void clear_game_poker_num();
  ::PROTOBUF_NAMESPACE_ID::int32 game_poker_num() const;
  void set_game_poker_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_poker_num() const;
  void _internal_set_game_poker_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LH.CMD_SC_GameSceneInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > game_bet_;
  mutable std::atomic<int> _game_bet_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > game_bet_area_limit_;
  mutable std::atomic<int> _game_bet_area_limit_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > bet_config_;
  mutable std::atomic<int> _bet_config_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > aera_multiple_;
  mutable std::atomic<int> _aera_multiple_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_state_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_times_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_bet_area_limit_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_poker_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LH_2eproto;
};
// -------------------------------------------------------------------

class CMD_SC_GameResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LH.CMD_SC_GameResult) */ {
 public:
  inline CMD_SC_GameResult() : CMD_SC_GameResult(nullptr) {}
  virtual ~CMD_SC_GameResult();

  CMD_SC_GameResult(const CMD_SC_GameResult& from);
  CMD_SC_GameResult(CMD_SC_GameResult&& from) noexcept
    : CMD_SC_GameResult() {
    *this = ::std::move(from);
  }

  inline CMD_SC_GameResult& operator=(const CMD_SC_GameResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMD_SC_GameResult& operator=(CMD_SC_GameResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMD_SC_GameResult& default_instance();

  static inline const CMD_SC_GameResult* internal_default_instance() {
    return reinterpret_cast<const CMD_SC_GameResult*>(
               &_CMD_SC_GameResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMD_SC_GameResult& a, CMD_SC_GameResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CMD_SC_GameResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMD_SC_GameResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMD_SC_GameResult* New() const final {
    return CreateMaybeMessage<CMD_SC_GameResult>(nullptr);
  }

  CMD_SC_GameResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMD_SC_GameResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMD_SC_GameResult& from);
  void MergeFrom(const CMD_SC_GameResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMD_SC_GameResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LH.CMD_SC_GameResult";
  }
  protected:
  explicit CMD_SC_GameResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LH_2eproto);
    return ::descriptor_table_LH_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameCradFieldNumber = 1,
    kGameResulTwinFieldNumber = 3,
    kAeraWinFieldNumber = 2,
    kGamePokerNumFieldNumber = 4,
  };
  // repeated int32 game_crad = 1;
  int game_crad_size() const;
  private:
  int _internal_game_crad_size() const;
  public:
  void clear_game_crad();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_crad(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_game_crad() const;
  void _internal_add_game_crad(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_game_crad();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 game_crad(int index) const;
  void set_game_crad(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_game_crad(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      game_crad() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_game_crad();

  // repeated int32 game_resul_twin = 3;
  int game_resul_twin_size() const;
  private:
  int _internal_game_resul_twin_size() const;
  public:
  void clear_game_resul_twin();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_resul_twin(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_game_resul_twin() const;
  void _internal_add_game_resul_twin(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_game_resul_twin();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 game_resul_twin(int index) const;
  void set_game_resul_twin(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_game_resul_twin(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      game_resul_twin() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_game_resul_twin();

  // int32 aera_win = 2;
  void clear_aera_win();
  ::PROTOBUF_NAMESPACE_ID::int32 aera_win() const;
  void set_aera_win(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_aera_win() const;
  void _internal_set_aera_win(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 game_poker_num = 4;
  void clear_game_poker_num();
  ::PROTOBUF_NAMESPACE_ID::int32 game_poker_num() const;
  void set_game_poker_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_poker_num() const;
  void _internal_set_game_poker_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LH.CMD_SC_GameResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > game_crad_;
  mutable std::atomic<int> _game_crad_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > game_resul_twin_;
  mutable std::atomic<int> _game_resul_twin_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 aera_win_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_poker_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LH_2eproto;
};
// -------------------------------------------------------------------

class CMD_SC_AddBet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LH.CMD_SC_AddBet) */ {
 public:
  inline CMD_SC_AddBet() : CMD_SC_AddBet(nullptr) {}
  virtual ~CMD_SC_AddBet();

  CMD_SC_AddBet(const CMD_SC_AddBet& from);
  CMD_SC_AddBet(CMD_SC_AddBet&& from) noexcept
    : CMD_SC_AddBet() {
    *this = ::std::move(from);
  }

  inline CMD_SC_AddBet& operator=(const CMD_SC_AddBet& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMD_SC_AddBet& operator=(CMD_SC_AddBet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMD_SC_AddBet& default_instance();

  static inline const CMD_SC_AddBet* internal_default_instance() {
    return reinterpret_cast<const CMD_SC_AddBet*>(
               &_CMD_SC_AddBet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMD_SC_AddBet& a, CMD_SC_AddBet& b) {
    a.Swap(&b);
  }
  inline void Swap(CMD_SC_AddBet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMD_SC_AddBet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMD_SC_AddBet* New() const final {
    return CreateMaybeMessage<CMD_SC_AddBet>(nullptr);
  }

  CMD_SC_AddBet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMD_SC_AddBet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMD_SC_AddBet& from);
  void MergeFrom(const CMD_SC_AddBet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMD_SC_AddBet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LH.CMD_SC_AddBet";
  }
  protected:
  explicit CMD_SC_AddBet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LH_2eproto);
    return ::descriptor_table_LH_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdFieldNumber = 1,
    kBetAeraFieldNumber = 2,
    kBetIndexFieldNumber = 3,
  };
  // int32 chair_id = 1;
  void clear_chair_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id() const;
  void set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_id() const;
  void _internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bet_aera = 2;
  void clear_bet_aera();
  ::PROTOBUF_NAMESPACE_ID::int32 bet_aera() const;
  void set_bet_aera(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bet_aera() const;
  void _internal_set_bet_aera(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bet_index = 3;
  void clear_bet_index();
  ::PROTOBUF_NAMESPACE_ID::int32 bet_index() const;
  void set_bet_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bet_index() const;
  void _internal_set_bet_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LH.CMD_SC_AddBet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 bet_aera_;
  ::PROTOBUF_NAMESPACE_ID::int32 bet_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LH_2eproto;
};
// -------------------------------------------------------------------

class CMD_SC_AddBetAgain PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LH.CMD_SC_AddBetAgain) */ {
 public:
  inline CMD_SC_AddBetAgain() : CMD_SC_AddBetAgain(nullptr) {}
  virtual ~CMD_SC_AddBetAgain();

  CMD_SC_AddBetAgain(const CMD_SC_AddBetAgain& from);
  CMD_SC_AddBetAgain(CMD_SC_AddBetAgain&& from) noexcept
    : CMD_SC_AddBetAgain() {
    *this = ::std::move(from);
  }

  inline CMD_SC_AddBetAgain& operator=(const CMD_SC_AddBetAgain& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMD_SC_AddBetAgain& operator=(CMD_SC_AddBetAgain&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMD_SC_AddBetAgain& default_instance();

  static inline const CMD_SC_AddBetAgain* internal_default_instance() {
    return reinterpret_cast<const CMD_SC_AddBetAgain*>(
               &_CMD_SC_AddBetAgain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMD_SC_AddBetAgain& a, CMD_SC_AddBetAgain& b) {
    a.Swap(&b);
  }
  inline void Swap(CMD_SC_AddBetAgain* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMD_SC_AddBetAgain* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMD_SC_AddBetAgain* New() const final {
    return CreateMaybeMessage<CMD_SC_AddBetAgain>(nullptr);
  }

  CMD_SC_AddBetAgain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMD_SC_AddBetAgain>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMD_SC_AddBetAgain& from);
  void MergeFrom(const CMD_SC_AddBetAgain& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMD_SC_AddBetAgain* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LH.CMD_SC_AddBetAgain";
  }
  protected:
  explicit CMD_SC_AddBetAgain(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LH_2eproto);
    return ::descriptor_table_LH_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChairIdFieldNumber = 1,
    kBetAeraFieldNumber = 2,
    kBetIndexFieldNumber = 3,
    kBetNumFieldNumber = 4,
  };
  // int32 chair_id = 1;
  void clear_chair_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id() const;
  void set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_id() const;
  void _internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bet_aera = 2;
  void clear_bet_aera();
  ::PROTOBUF_NAMESPACE_ID::int32 bet_aera() const;
  void set_bet_aera(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bet_aera() const;
  void _internal_set_bet_aera(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bet_index = 3;
  void clear_bet_index();
  ::PROTOBUF_NAMESPACE_ID::int32 bet_index() const;
  void set_bet_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bet_index() const;
  void _internal_set_bet_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bet_num = 4;
  void clear_bet_num();
  ::PROTOBUF_NAMESPACE_ID::int32 bet_num() const;
  void set_bet_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bet_num() const;
  void _internal_set_bet_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LH.CMD_SC_AddBetAgain)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 bet_aera_;
  ::PROTOBUF_NAMESPACE_ID::int32 bet_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 bet_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LH_2eproto;
};
// -------------------------------------------------------------------

class CMD_CS_AddBet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LH.CMD_CS_AddBet) */ {
 public:
  inline CMD_CS_AddBet() : CMD_CS_AddBet(nullptr) {}
  virtual ~CMD_CS_AddBet();

  CMD_CS_AddBet(const CMD_CS_AddBet& from);
  CMD_CS_AddBet(CMD_CS_AddBet&& from) noexcept
    : CMD_CS_AddBet() {
    *this = ::std::move(from);
  }

  inline CMD_CS_AddBet& operator=(const CMD_CS_AddBet& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMD_CS_AddBet& operator=(CMD_CS_AddBet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMD_CS_AddBet& default_instance();

  static inline const CMD_CS_AddBet* internal_default_instance() {
    return reinterpret_cast<const CMD_CS_AddBet*>(
               &_CMD_CS_AddBet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CMD_CS_AddBet& a, CMD_CS_AddBet& b) {
    a.Swap(&b);
  }
  inline void Swap(CMD_CS_AddBet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMD_CS_AddBet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMD_CS_AddBet* New() const final {
    return CreateMaybeMessage<CMD_CS_AddBet>(nullptr);
  }

  CMD_CS_AddBet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMD_CS_AddBet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMD_CS_AddBet& from);
  void MergeFrom(const CMD_CS_AddBet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMD_CS_AddBet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LH.CMD_CS_AddBet";
  }
  protected:
  explicit CMD_CS_AddBet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LH_2eproto);
    return ::descriptor_table_LH_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBetAeraFieldNumber = 1,
    kBetIndexFieldNumber = 2,
  };
  // int32 bet_aera = 1;
  void clear_bet_aera();
  ::PROTOBUF_NAMESPACE_ID::int32 bet_aera() const;
  void set_bet_aera(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bet_aera() const;
  void _internal_set_bet_aera(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bet_index = 2;
  void clear_bet_index();
  ::PROTOBUF_NAMESPACE_ID::int32 bet_index() const;
  void set_bet_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bet_index() const;
  void _internal_set_bet_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LH.CMD_CS_AddBet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 bet_aera_;
  ::PROTOBUF_NAMESPACE_ID::int32 bet_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LH_2eproto;
};
// -------------------------------------------------------------------

class CMD_CS_AddBetAgain PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LH.CMD_CS_AddBetAgain) */ {
 public:
  inline CMD_CS_AddBetAgain() : CMD_CS_AddBetAgain(nullptr) {}
  virtual ~CMD_CS_AddBetAgain();

  CMD_CS_AddBetAgain(const CMD_CS_AddBetAgain& from);
  CMD_CS_AddBetAgain(CMD_CS_AddBetAgain&& from) noexcept
    : CMD_CS_AddBetAgain() {
    *this = ::std::move(from);
  }

  inline CMD_CS_AddBetAgain& operator=(const CMD_CS_AddBetAgain& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMD_CS_AddBetAgain& operator=(CMD_CS_AddBetAgain&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMD_CS_AddBetAgain& default_instance();

  static inline const CMD_CS_AddBetAgain* internal_default_instance() {
    return reinterpret_cast<const CMD_CS_AddBetAgain*>(
               &_CMD_CS_AddBetAgain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CMD_CS_AddBetAgain& a, CMD_CS_AddBetAgain& b) {
    a.Swap(&b);
  }
  inline void Swap(CMD_CS_AddBetAgain* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMD_CS_AddBetAgain* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMD_CS_AddBetAgain* New() const final {
    return CreateMaybeMessage<CMD_CS_AddBetAgain>(nullptr);
  }

  CMD_CS_AddBetAgain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMD_CS_AddBetAgain>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMD_CS_AddBetAgain& from);
  void MergeFrom(const CMD_CS_AddBetAgain& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMD_CS_AddBetAgain* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LH.CMD_CS_AddBetAgain";
  }
  protected:
  explicit CMD_CS_AddBetAgain(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LH_2eproto);
    return ::descriptor_table_LH_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBetAeraFieldNumber = 1,
    kBetIndexFieldNumber = 2,
    kBetNumFieldNumber = 3,
  };
  // int32 bet_aera = 1;
  void clear_bet_aera();
  ::PROTOBUF_NAMESPACE_ID::int32 bet_aera() const;
  void set_bet_aera(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bet_aera() const;
  void _internal_set_bet_aera(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bet_index = 2;
  void clear_bet_index();
  ::PROTOBUF_NAMESPACE_ID::int32 bet_index() const;
  void set_bet_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bet_index() const;
  void _internal_set_bet_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bet_num = 3;
  void clear_bet_num();
  ::PROTOBUF_NAMESPACE_ID::int32 bet_num() const;
  void set_bet_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bet_num() const;
  void _internal_set_bet_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LH.CMD_CS_AddBetAgain)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 bet_aera_;
  ::PROTOBUF_NAMESPACE_ID::int32 bet_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 bet_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LH_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMD_SC_NotifyStatus

// int32 game_state = 1;
inline void CMD_SC_NotifyStatus::clear_game_state() {
  game_state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_NotifyStatus::_internal_game_state() const {
  return game_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_NotifyStatus::game_state() const {
  // @@protoc_insertion_point(field_get:LH.CMD_SC_NotifyStatus.game_state)
  return _internal_game_state();
}
inline void CMD_SC_NotifyStatus::_internal_set_game_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  game_state_ = value;
}
inline void CMD_SC_NotifyStatus::set_game_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_state(value);
  // @@protoc_insertion_point(field_set:LH.CMD_SC_NotifyStatus.game_state)
}

// int32 time = 2;
inline void CMD_SC_NotifyStatus::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_NotifyStatus::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_NotifyStatus::time() const {
  // @@protoc_insertion_point(field_get:LH.CMD_SC_NotifyStatus.time)
  return _internal_time();
}
inline void CMD_SC_NotifyStatus::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void CMD_SC_NotifyStatus::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:LH.CMD_SC_NotifyStatus.time)
}

// -------------------------------------------------------------------

// PlayerInfo

// int64 game_bet = 1;
inline void PlayerInfo::clear_game_bet() {
  game_bet_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerInfo::_internal_game_bet() const {
  return game_bet_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerInfo::game_bet() const {
  // @@protoc_insertion_point(field_get:LH.PlayerInfo.game_bet)
  return _internal_game_bet();
}
inline void PlayerInfo::_internal_set_game_bet(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  game_bet_ = value;
}
inline void PlayerInfo::set_game_bet(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_game_bet(value);
  // @@protoc_insertion_point(field_set:LH.PlayerInfo.game_bet)
}

// int32 win_count = 2;
inline void PlayerInfo::clear_win_count() {
  win_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_win_count() const {
  return win_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::win_count() const {
  // @@protoc_insertion_point(field_get:LH.PlayerInfo.win_count)
  return _internal_win_count();
}
inline void PlayerInfo::_internal_set_win_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  win_count_ = value;
}
inline void PlayerInfo::set_win_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_win_count(value);
  // @@protoc_insertion_point(field_set:LH.PlayerInfo.win_count)
}

// int32 bet_dragon = 3;
inline void PlayerInfo::clear_bet_dragon() {
  bet_dragon_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_bet_dragon() const {
  return bet_dragon_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::bet_dragon() const {
  // @@protoc_insertion_point(field_get:LH.PlayerInfo.bet_dragon)
  return _internal_bet_dragon();
}
inline void PlayerInfo::_internal_set_bet_dragon(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bet_dragon_ = value;
}
inline void PlayerInfo::set_bet_dragon(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bet_dragon(value);
  // @@protoc_insertion_point(field_set:LH.PlayerInfo.bet_dragon)
}

// int32 bet_tiger = 4;
inline void PlayerInfo::clear_bet_tiger() {
  bet_tiger_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_bet_tiger() const {
  return bet_tiger_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::bet_tiger() const {
  // @@protoc_insertion_point(field_get:LH.PlayerInfo.bet_tiger)
  return _internal_bet_tiger();
}
inline void PlayerInfo::_internal_set_bet_tiger(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bet_tiger_ = value;
}
inline void PlayerInfo::set_bet_tiger(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bet_tiger(value);
  // @@protoc_insertion_point(field_set:LH.PlayerInfo.bet_tiger)
}

// -------------------------------------------------------------------

// PlayerInfoTop

// repeated .LH.PlayerInfo top = 1;
inline int PlayerInfoTop::_internal_top_size() const {
  return top_.size();
}
inline int PlayerInfoTop::top_size() const {
  return _internal_top_size();
}
inline void PlayerInfoTop::clear_top() {
  top_.Clear();
}
inline ::LH::PlayerInfo* PlayerInfoTop::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:LH.PlayerInfoTop.top)
  return top_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LH::PlayerInfo >*
PlayerInfoTop::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:LH.PlayerInfoTop.top)
  return &top_;
}
inline const ::LH::PlayerInfo& PlayerInfoTop::_internal_top(int index) const {
  return top_.Get(index);
}
inline const ::LH::PlayerInfo& PlayerInfoTop::top(int index) const {
  // @@protoc_insertion_point(field_get:LH.PlayerInfoTop.top)
  return _internal_top(index);
}
inline ::LH::PlayerInfo* PlayerInfoTop::_internal_add_top() {
  return top_.Add();
}
inline ::LH::PlayerInfo* PlayerInfoTop::add_top() {
  // @@protoc_insertion_point(field_add:LH.PlayerInfoTop.top)
  return _internal_add_top();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LH::PlayerInfo >&
PlayerInfoTop::top() const {
  // @@protoc_insertion_point(field_list:LH.PlayerInfoTop.top)
  return top_;
}

// -------------------------------------------------------------------

// CMD_SC_ReusltPlatePath

// repeated int32 game_plate_path = 1;
inline int CMD_SC_ReusltPlatePath::_internal_game_plate_path_size() const {
  return game_plate_path_.size();
}
inline int CMD_SC_ReusltPlatePath::game_plate_path_size() const {
  return _internal_game_plate_path_size();
}
inline void CMD_SC_ReusltPlatePath::clear_game_plate_path() {
  game_plate_path_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_ReusltPlatePath::_internal_game_plate_path(int index) const {
  return game_plate_path_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_ReusltPlatePath::game_plate_path(int index) const {
  // @@protoc_insertion_point(field_get:LH.CMD_SC_ReusltPlatePath.game_plate_path)
  return _internal_game_plate_path(index);
}
inline void CMD_SC_ReusltPlatePath::set_game_plate_path(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  game_plate_path_.Set(index, value);
  // @@protoc_insertion_point(field_set:LH.CMD_SC_ReusltPlatePath.game_plate_path)
}
inline void CMD_SC_ReusltPlatePath::_internal_add_game_plate_path(::PROTOBUF_NAMESPACE_ID::int32 value) {
  game_plate_path_.Add(value);
}
inline void CMD_SC_ReusltPlatePath::add_game_plate_path(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_game_plate_path(value);
  // @@protoc_insertion_point(field_add:LH.CMD_SC_ReusltPlatePath.game_plate_path)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMD_SC_ReusltPlatePath::_internal_game_plate_path() const {
  return game_plate_path_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMD_SC_ReusltPlatePath::game_plate_path() const {
  // @@protoc_insertion_point(field_list:LH.CMD_SC_ReusltPlatePath.game_plate_path)
  return _internal_game_plate_path();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMD_SC_ReusltPlatePath::_internal_mutable_game_plate_path() {
  return &game_plate_path_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMD_SC_ReusltPlatePath::mutable_game_plate_path() {
  // @@protoc_insertion_point(field_mutable_list:LH.CMD_SC_ReusltPlatePath.game_plate_path)
  return _internal_mutable_game_plate_path();
}

// -------------------------------------------------------------------

// CMD_SC_GameSceneInfo

// int32 game_state_info = 1;
inline void CMD_SC_GameSceneInfo::clear_game_state_info() {
  game_state_info_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_GameSceneInfo::_internal_game_state_info() const {
  return game_state_info_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_GameSceneInfo::game_state_info() const {
  // @@protoc_insertion_point(field_get:LH.CMD_SC_GameSceneInfo.game_state_info)
  return _internal_game_state_info();
}
inline void CMD_SC_GameSceneInfo::_internal_set_game_state_info(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  game_state_info_ = value;
}
inline void CMD_SC_GameSceneInfo::set_game_state_info(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_state_info(value);
  // @@protoc_insertion_point(field_set:LH.CMD_SC_GameSceneInfo.game_state_info)
}

// int32 game_times = 2;
inline void CMD_SC_GameSceneInfo::clear_game_times() {
  game_times_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_GameSceneInfo::_internal_game_times() const {
  return game_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_GameSceneInfo::game_times() const {
  // @@protoc_insertion_point(field_get:LH.CMD_SC_GameSceneInfo.game_times)
  return _internal_game_times();
}
inline void CMD_SC_GameSceneInfo::_internal_set_game_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  game_times_ = value;
}
inline void CMD_SC_GameSceneInfo::set_game_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_times(value);
  // @@protoc_insertion_point(field_set:LH.CMD_SC_GameSceneInfo.game_times)
}

// repeated int32 game_bet = 3;
inline int CMD_SC_GameSceneInfo::_internal_game_bet_size() const {
  return game_bet_.size();
}
inline int CMD_SC_GameSceneInfo::game_bet_size() const {
  return _internal_game_bet_size();
}
inline void CMD_SC_GameSceneInfo::clear_game_bet() {
  game_bet_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_GameSceneInfo::_internal_game_bet(int index) const {
  return game_bet_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_GameSceneInfo::game_bet(int index) const {
  // @@protoc_insertion_point(field_get:LH.CMD_SC_GameSceneInfo.game_bet)
  return _internal_game_bet(index);
}
inline void CMD_SC_GameSceneInfo::set_game_bet(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  game_bet_.Set(index, value);
  // @@protoc_insertion_point(field_set:LH.CMD_SC_GameSceneInfo.game_bet)
}
inline void CMD_SC_GameSceneInfo::_internal_add_game_bet(::PROTOBUF_NAMESPACE_ID::int32 value) {
  game_bet_.Add(value);
}
inline void CMD_SC_GameSceneInfo::add_game_bet(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_game_bet(value);
  // @@protoc_insertion_point(field_add:LH.CMD_SC_GameSceneInfo.game_bet)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMD_SC_GameSceneInfo::_internal_game_bet() const {
  return game_bet_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMD_SC_GameSceneInfo::game_bet() const {
  // @@protoc_insertion_point(field_list:LH.CMD_SC_GameSceneInfo.game_bet)
  return _internal_game_bet();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMD_SC_GameSceneInfo::_internal_mutable_game_bet() {
  return &game_bet_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMD_SC_GameSceneInfo::mutable_game_bet() {
  // @@protoc_insertion_point(field_mutable_list:LH.CMD_SC_GameSceneInfo.game_bet)
  return _internal_mutable_game_bet();
}

// int32 player_bet_area_limit = 4;
inline void CMD_SC_GameSceneInfo::clear_player_bet_area_limit() {
  player_bet_area_limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_GameSceneInfo::_internal_player_bet_area_limit() const {
  return player_bet_area_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_GameSceneInfo::player_bet_area_limit() const {
  // @@protoc_insertion_point(field_get:LH.CMD_SC_GameSceneInfo.player_bet_area_limit)
  return _internal_player_bet_area_limit();
}
inline void CMD_SC_GameSceneInfo::_internal_set_player_bet_area_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_bet_area_limit_ = value;
}
inline void CMD_SC_GameSceneInfo::set_player_bet_area_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_bet_area_limit(value);
  // @@protoc_insertion_point(field_set:LH.CMD_SC_GameSceneInfo.player_bet_area_limit)
}

// repeated int32 game_bet_area_limit = 5;
inline int CMD_SC_GameSceneInfo::_internal_game_bet_area_limit_size() const {
  return game_bet_area_limit_.size();
}
inline int CMD_SC_GameSceneInfo::game_bet_area_limit_size() const {
  return _internal_game_bet_area_limit_size();
}
inline void CMD_SC_GameSceneInfo::clear_game_bet_area_limit() {
  game_bet_area_limit_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_GameSceneInfo::_internal_game_bet_area_limit(int index) const {
  return game_bet_area_limit_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_GameSceneInfo::game_bet_area_limit(int index) const {
  // @@protoc_insertion_point(field_get:LH.CMD_SC_GameSceneInfo.game_bet_area_limit)
  return _internal_game_bet_area_limit(index);
}
inline void CMD_SC_GameSceneInfo::set_game_bet_area_limit(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  game_bet_area_limit_.Set(index, value);
  // @@protoc_insertion_point(field_set:LH.CMD_SC_GameSceneInfo.game_bet_area_limit)
}
inline void CMD_SC_GameSceneInfo::_internal_add_game_bet_area_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  game_bet_area_limit_.Add(value);
}
inline void CMD_SC_GameSceneInfo::add_game_bet_area_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_game_bet_area_limit(value);
  // @@protoc_insertion_point(field_add:LH.CMD_SC_GameSceneInfo.game_bet_area_limit)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMD_SC_GameSceneInfo::_internal_game_bet_area_limit() const {
  return game_bet_area_limit_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMD_SC_GameSceneInfo::game_bet_area_limit() const {
  // @@protoc_insertion_point(field_list:LH.CMD_SC_GameSceneInfo.game_bet_area_limit)
  return _internal_game_bet_area_limit();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMD_SC_GameSceneInfo::_internal_mutable_game_bet_area_limit() {
  return &game_bet_area_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMD_SC_GameSceneInfo::mutable_game_bet_area_limit() {
  // @@protoc_insertion_point(field_mutable_list:LH.CMD_SC_GameSceneInfo.game_bet_area_limit)
  return _internal_mutable_game_bet_area_limit();
}

// repeated int32 bet_config = 6;
inline int CMD_SC_GameSceneInfo::_internal_bet_config_size() const {
  return bet_config_.size();
}
inline int CMD_SC_GameSceneInfo::bet_config_size() const {
  return _internal_bet_config_size();
}
inline void CMD_SC_GameSceneInfo::clear_bet_config() {
  bet_config_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_GameSceneInfo::_internal_bet_config(int index) const {
  return bet_config_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_GameSceneInfo::bet_config(int index) const {
  // @@protoc_insertion_point(field_get:LH.CMD_SC_GameSceneInfo.bet_config)
  return _internal_bet_config(index);
}
inline void CMD_SC_GameSceneInfo::set_bet_config(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  bet_config_.Set(index, value);
  // @@protoc_insertion_point(field_set:LH.CMD_SC_GameSceneInfo.bet_config)
}
inline void CMD_SC_GameSceneInfo::_internal_add_bet_config(::PROTOBUF_NAMESPACE_ID::int32 value) {
  bet_config_.Add(value);
}
inline void CMD_SC_GameSceneInfo::add_bet_config(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_bet_config(value);
  // @@protoc_insertion_point(field_add:LH.CMD_SC_GameSceneInfo.bet_config)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMD_SC_GameSceneInfo::_internal_bet_config() const {
  return bet_config_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMD_SC_GameSceneInfo::bet_config() const {
  // @@protoc_insertion_point(field_list:LH.CMD_SC_GameSceneInfo.bet_config)
  return _internal_bet_config();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMD_SC_GameSceneInfo::_internal_mutable_bet_config() {
  return &bet_config_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMD_SC_GameSceneInfo::mutable_bet_config() {
  // @@protoc_insertion_point(field_mutable_list:LH.CMD_SC_GameSceneInfo.bet_config)
  return _internal_mutable_bet_config();
}

// repeated int32 aera_multiple = 7;
inline int CMD_SC_GameSceneInfo::_internal_aera_multiple_size() const {
  return aera_multiple_.size();
}
inline int CMD_SC_GameSceneInfo::aera_multiple_size() const {
  return _internal_aera_multiple_size();
}
inline void CMD_SC_GameSceneInfo::clear_aera_multiple() {
  aera_multiple_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_GameSceneInfo::_internal_aera_multiple(int index) const {
  return aera_multiple_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_GameSceneInfo::aera_multiple(int index) const {
  // @@protoc_insertion_point(field_get:LH.CMD_SC_GameSceneInfo.aera_multiple)
  return _internal_aera_multiple(index);
}
inline void CMD_SC_GameSceneInfo::set_aera_multiple(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  aera_multiple_.Set(index, value);
  // @@protoc_insertion_point(field_set:LH.CMD_SC_GameSceneInfo.aera_multiple)
}
inline void CMD_SC_GameSceneInfo::_internal_add_aera_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  aera_multiple_.Add(value);
}
inline void CMD_SC_GameSceneInfo::add_aera_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_aera_multiple(value);
  // @@protoc_insertion_point(field_add:LH.CMD_SC_GameSceneInfo.aera_multiple)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMD_SC_GameSceneInfo::_internal_aera_multiple() const {
  return aera_multiple_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMD_SC_GameSceneInfo::aera_multiple() const {
  // @@protoc_insertion_point(field_list:LH.CMD_SC_GameSceneInfo.aera_multiple)
  return _internal_aera_multiple();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMD_SC_GameSceneInfo::_internal_mutable_aera_multiple() {
  return &aera_multiple_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMD_SC_GameSceneInfo::mutable_aera_multiple() {
  // @@protoc_insertion_point(field_mutable_list:LH.CMD_SC_GameSceneInfo.aera_multiple)
  return _internal_mutable_aera_multiple();
}

// int32 game_poker_num = 8;
inline void CMD_SC_GameSceneInfo::clear_game_poker_num() {
  game_poker_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_GameSceneInfo::_internal_game_poker_num() const {
  return game_poker_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_GameSceneInfo::game_poker_num() const {
  // @@protoc_insertion_point(field_get:LH.CMD_SC_GameSceneInfo.game_poker_num)
  return _internal_game_poker_num();
}
inline void CMD_SC_GameSceneInfo::_internal_set_game_poker_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  game_poker_num_ = value;
}
inline void CMD_SC_GameSceneInfo::set_game_poker_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_poker_num(value);
  // @@protoc_insertion_point(field_set:LH.CMD_SC_GameSceneInfo.game_poker_num)
}

// -------------------------------------------------------------------

// CMD_SC_GameResult

// repeated int32 game_crad = 1;
inline int CMD_SC_GameResult::_internal_game_crad_size() const {
  return game_crad_.size();
}
inline int CMD_SC_GameResult::game_crad_size() const {
  return _internal_game_crad_size();
}
inline void CMD_SC_GameResult::clear_game_crad() {
  game_crad_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_GameResult::_internal_game_crad(int index) const {
  return game_crad_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_GameResult::game_crad(int index) const {
  // @@protoc_insertion_point(field_get:LH.CMD_SC_GameResult.game_crad)
  return _internal_game_crad(index);
}
inline void CMD_SC_GameResult::set_game_crad(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  game_crad_.Set(index, value);
  // @@protoc_insertion_point(field_set:LH.CMD_SC_GameResult.game_crad)
}
inline void CMD_SC_GameResult::_internal_add_game_crad(::PROTOBUF_NAMESPACE_ID::int32 value) {
  game_crad_.Add(value);
}
inline void CMD_SC_GameResult::add_game_crad(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_game_crad(value);
  // @@protoc_insertion_point(field_add:LH.CMD_SC_GameResult.game_crad)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMD_SC_GameResult::_internal_game_crad() const {
  return game_crad_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMD_SC_GameResult::game_crad() const {
  // @@protoc_insertion_point(field_list:LH.CMD_SC_GameResult.game_crad)
  return _internal_game_crad();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMD_SC_GameResult::_internal_mutable_game_crad() {
  return &game_crad_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMD_SC_GameResult::mutable_game_crad() {
  // @@protoc_insertion_point(field_mutable_list:LH.CMD_SC_GameResult.game_crad)
  return _internal_mutable_game_crad();
}

// int32 aera_win = 2;
inline void CMD_SC_GameResult::clear_aera_win() {
  aera_win_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_GameResult::_internal_aera_win() const {
  return aera_win_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_GameResult::aera_win() const {
  // @@protoc_insertion_point(field_get:LH.CMD_SC_GameResult.aera_win)
  return _internal_aera_win();
}
inline void CMD_SC_GameResult::_internal_set_aera_win(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  aera_win_ = value;
}
inline void CMD_SC_GameResult::set_aera_win(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_aera_win(value);
  // @@protoc_insertion_point(field_set:LH.CMD_SC_GameResult.aera_win)
}

// repeated int32 game_resul_twin = 3;
inline int CMD_SC_GameResult::_internal_game_resul_twin_size() const {
  return game_resul_twin_.size();
}
inline int CMD_SC_GameResult::game_resul_twin_size() const {
  return _internal_game_resul_twin_size();
}
inline void CMD_SC_GameResult::clear_game_resul_twin() {
  game_resul_twin_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_GameResult::_internal_game_resul_twin(int index) const {
  return game_resul_twin_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_GameResult::game_resul_twin(int index) const {
  // @@protoc_insertion_point(field_get:LH.CMD_SC_GameResult.game_resul_twin)
  return _internal_game_resul_twin(index);
}
inline void CMD_SC_GameResult::set_game_resul_twin(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  game_resul_twin_.Set(index, value);
  // @@protoc_insertion_point(field_set:LH.CMD_SC_GameResult.game_resul_twin)
}
inline void CMD_SC_GameResult::_internal_add_game_resul_twin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  game_resul_twin_.Add(value);
}
inline void CMD_SC_GameResult::add_game_resul_twin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_game_resul_twin(value);
  // @@protoc_insertion_point(field_add:LH.CMD_SC_GameResult.game_resul_twin)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMD_SC_GameResult::_internal_game_resul_twin() const {
  return game_resul_twin_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMD_SC_GameResult::game_resul_twin() const {
  // @@protoc_insertion_point(field_list:LH.CMD_SC_GameResult.game_resul_twin)
  return _internal_game_resul_twin();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMD_SC_GameResult::_internal_mutable_game_resul_twin() {
  return &game_resul_twin_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMD_SC_GameResult::mutable_game_resul_twin() {
  // @@protoc_insertion_point(field_mutable_list:LH.CMD_SC_GameResult.game_resul_twin)
  return _internal_mutable_game_resul_twin();
}

// int32 game_poker_num = 4;
inline void CMD_SC_GameResult::clear_game_poker_num() {
  game_poker_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_GameResult::_internal_game_poker_num() const {
  return game_poker_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_GameResult::game_poker_num() const {
  // @@protoc_insertion_point(field_get:LH.CMD_SC_GameResult.game_poker_num)
  return _internal_game_poker_num();
}
inline void CMD_SC_GameResult::_internal_set_game_poker_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  game_poker_num_ = value;
}
inline void CMD_SC_GameResult::set_game_poker_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_poker_num(value);
  // @@protoc_insertion_point(field_set:LH.CMD_SC_GameResult.game_poker_num)
}

// -------------------------------------------------------------------

// CMD_SC_AddBet

// int32 chair_id = 1;
inline void CMD_SC_AddBet::clear_chair_id() {
  chair_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_AddBet::_internal_chair_id() const {
  return chair_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_AddBet::chair_id() const {
  // @@protoc_insertion_point(field_get:LH.CMD_SC_AddBet.chair_id)
  return _internal_chair_id();
}
inline void CMD_SC_AddBet::_internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_id_ = value;
}
inline void CMD_SC_AddBet::set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_id(value);
  // @@protoc_insertion_point(field_set:LH.CMD_SC_AddBet.chair_id)
}

// int32 bet_aera = 2;
inline void CMD_SC_AddBet::clear_bet_aera() {
  bet_aera_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_AddBet::_internal_bet_aera() const {
  return bet_aera_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_AddBet::bet_aera() const {
  // @@protoc_insertion_point(field_get:LH.CMD_SC_AddBet.bet_aera)
  return _internal_bet_aera();
}
inline void CMD_SC_AddBet::_internal_set_bet_aera(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bet_aera_ = value;
}
inline void CMD_SC_AddBet::set_bet_aera(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bet_aera(value);
  // @@protoc_insertion_point(field_set:LH.CMD_SC_AddBet.bet_aera)
}

// int32 bet_index = 3;
inline void CMD_SC_AddBet::clear_bet_index() {
  bet_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_AddBet::_internal_bet_index() const {
  return bet_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_AddBet::bet_index() const {
  // @@protoc_insertion_point(field_get:LH.CMD_SC_AddBet.bet_index)
  return _internal_bet_index();
}
inline void CMD_SC_AddBet::_internal_set_bet_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bet_index_ = value;
}
inline void CMD_SC_AddBet::set_bet_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bet_index(value);
  // @@protoc_insertion_point(field_set:LH.CMD_SC_AddBet.bet_index)
}

// -------------------------------------------------------------------

// CMD_SC_AddBetAgain

// int32 chair_id = 1;
inline void CMD_SC_AddBetAgain::clear_chair_id() {
  chair_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_AddBetAgain::_internal_chair_id() const {
  return chair_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_AddBetAgain::chair_id() const {
  // @@protoc_insertion_point(field_get:LH.CMD_SC_AddBetAgain.chair_id)
  return _internal_chair_id();
}
inline void CMD_SC_AddBetAgain::_internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_id_ = value;
}
inline void CMD_SC_AddBetAgain::set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_id(value);
  // @@protoc_insertion_point(field_set:LH.CMD_SC_AddBetAgain.chair_id)
}

// int32 bet_aera = 2;
inline void CMD_SC_AddBetAgain::clear_bet_aera() {
  bet_aera_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_AddBetAgain::_internal_bet_aera() const {
  return bet_aera_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_AddBetAgain::bet_aera() const {
  // @@protoc_insertion_point(field_get:LH.CMD_SC_AddBetAgain.bet_aera)
  return _internal_bet_aera();
}
inline void CMD_SC_AddBetAgain::_internal_set_bet_aera(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bet_aera_ = value;
}
inline void CMD_SC_AddBetAgain::set_bet_aera(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bet_aera(value);
  // @@protoc_insertion_point(field_set:LH.CMD_SC_AddBetAgain.bet_aera)
}

// int32 bet_index = 3;
inline void CMD_SC_AddBetAgain::clear_bet_index() {
  bet_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_AddBetAgain::_internal_bet_index() const {
  return bet_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_AddBetAgain::bet_index() const {
  // @@protoc_insertion_point(field_get:LH.CMD_SC_AddBetAgain.bet_index)
  return _internal_bet_index();
}
inline void CMD_SC_AddBetAgain::_internal_set_bet_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bet_index_ = value;
}
inline void CMD_SC_AddBetAgain::set_bet_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bet_index(value);
  // @@protoc_insertion_point(field_set:LH.CMD_SC_AddBetAgain.bet_index)
}

// int32 bet_num = 4;
inline void CMD_SC_AddBetAgain::clear_bet_num() {
  bet_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_AddBetAgain::_internal_bet_num() const {
  return bet_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_SC_AddBetAgain::bet_num() const {
  // @@protoc_insertion_point(field_get:LH.CMD_SC_AddBetAgain.bet_num)
  return _internal_bet_num();
}
inline void CMD_SC_AddBetAgain::_internal_set_bet_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bet_num_ = value;
}
inline void CMD_SC_AddBetAgain::set_bet_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bet_num(value);
  // @@protoc_insertion_point(field_set:LH.CMD_SC_AddBetAgain.bet_num)
}

// -------------------------------------------------------------------

// CMD_CS_AddBet

// int32 bet_aera = 1;
inline void CMD_CS_AddBet::clear_bet_aera() {
  bet_aera_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_CS_AddBet::_internal_bet_aera() const {
  return bet_aera_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_CS_AddBet::bet_aera() const {
  // @@protoc_insertion_point(field_get:LH.CMD_CS_AddBet.bet_aera)
  return _internal_bet_aera();
}
inline void CMD_CS_AddBet::_internal_set_bet_aera(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bet_aera_ = value;
}
inline void CMD_CS_AddBet::set_bet_aera(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bet_aera(value);
  // @@protoc_insertion_point(field_set:LH.CMD_CS_AddBet.bet_aera)
}

// int32 bet_index = 2;
inline void CMD_CS_AddBet::clear_bet_index() {
  bet_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_CS_AddBet::_internal_bet_index() const {
  return bet_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_CS_AddBet::bet_index() const {
  // @@protoc_insertion_point(field_get:LH.CMD_CS_AddBet.bet_index)
  return _internal_bet_index();
}
inline void CMD_CS_AddBet::_internal_set_bet_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bet_index_ = value;
}
inline void CMD_CS_AddBet::set_bet_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bet_index(value);
  // @@protoc_insertion_point(field_set:LH.CMD_CS_AddBet.bet_index)
}

// -------------------------------------------------------------------

// CMD_CS_AddBetAgain

// int32 bet_aera = 1;
inline void CMD_CS_AddBetAgain::clear_bet_aera() {
  bet_aera_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_CS_AddBetAgain::_internal_bet_aera() const {
  return bet_aera_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_CS_AddBetAgain::bet_aera() const {
  // @@protoc_insertion_point(field_get:LH.CMD_CS_AddBetAgain.bet_aera)
  return _internal_bet_aera();
}
inline void CMD_CS_AddBetAgain::_internal_set_bet_aera(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bet_aera_ = value;
}
inline void CMD_CS_AddBetAgain::set_bet_aera(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bet_aera(value);
  // @@protoc_insertion_point(field_set:LH.CMD_CS_AddBetAgain.bet_aera)
}

// int32 bet_index = 2;
inline void CMD_CS_AddBetAgain::clear_bet_index() {
  bet_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_CS_AddBetAgain::_internal_bet_index() const {
  return bet_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_CS_AddBetAgain::bet_index() const {
  // @@protoc_insertion_point(field_get:LH.CMD_CS_AddBetAgain.bet_index)
  return _internal_bet_index();
}
inline void CMD_CS_AddBetAgain::_internal_set_bet_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bet_index_ = value;
}
inline void CMD_CS_AddBetAgain::set_bet_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bet_index(value);
  // @@protoc_insertion_point(field_set:LH.CMD_CS_AddBetAgain.bet_index)
}

// int32 bet_num = 3;
inline void CMD_CS_AddBetAgain::clear_bet_num() {
  bet_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_CS_AddBetAgain::_internal_bet_num() const {
  return bet_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMD_CS_AddBetAgain::bet_num() const {
  // @@protoc_insertion_point(field_get:LH.CMD_CS_AddBetAgain.bet_num)
  return _internal_bet_num();
}
inline void CMD_CS_AddBetAgain::_internal_set_bet_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bet_num_ = value;
}
inline void CMD_CS_AddBetAgain::set_bet_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bet_num(value);
  // @@protoc_insertion_point(field_set:LH.CMD_CS_AddBetAgain.bet_num)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace LH

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::LH::EMsgIDLH> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LH::EMsgIDLH>() {
  return ::LH::EMsgIDLH_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_LH_2eproto
