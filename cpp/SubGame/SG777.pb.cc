// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SG777.proto

#include "SG777.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_SG777_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Hit_Icon_SG777_2eproto;
namespace SG777 {
class SC_SceneInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_SceneInfo> _instance;
} _SC_SceneInfo_default_instance_;
class Hit_IconDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Hit_Icon> _instance;
} _Hit_Icon_default_instance_;
class CMD_3D_SC_ResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_3D_SC_Result> _instance;
} _CMD_3D_SC_Result_default_instance_;
class CMD_StartBallGameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMD_StartBallGame> _instance;
} _CMD_StartBallGame_default_instance_;
}  // namespace SG777
static void InitDefaultsscc_info_CMD_3D_SC_Result_SG777_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SG777::_CMD_3D_SC_Result_default_instance_;
    new (ptr) ::SG777::CMD_3D_SC_Result();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMD_3D_SC_Result_SG777_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CMD_3D_SC_Result_SG777_2eproto}, {
      &scc_info_Hit_Icon_SG777_2eproto.base,}};

static void InitDefaultsscc_info_CMD_StartBallGame_SG777_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SG777::_CMD_StartBallGame_default_instance_;
    new (ptr) ::SG777::CMD_StartBallGame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMD_StartBallGame_SG777_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMD_StartBallGame_SG777_2eproto}, {}};

static void InitDefaultsscc_info_Hit_Icon_SG777_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SG777::_Hit_Icon_default_instance_;
    new (ptr) ::SG777::Hit_Icon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Hit_Icon_SG777_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Hit_Icon_SG777_2eproto}, {}};

static void InitDefaultsscc_info_SC_SceneInfo_SG777_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SG777::_SC_SceneInfo_default_instance_;
    new (ptr) ::SG777::SC_SceneInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_SceneInfo_SG777_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_SceneInfo_SG777_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_SG777_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_SG777_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_SG777_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_SG777_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SG777::SC_SceneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SG777::SC_SceneInfo, cur_chip_),
  PROTOBUF_FIELD_OFFSET(::SG777::SC_SceneInfo, bet_),
  PROTOBUF_FIELD_OFFSET(::SG777::SC_SceneInfo, free_cnt_),
  PROTOBUF_FIELD_OFFSET(::SG777::SC_SceneInfo, bell_cnt_),
  PROTOBUF_FIELD_OFFSET(::SG777::SC_SceneInfo, is_open_),
  PROTOBUF_FIELD_OFFSET(::SG777::SC_SceneInfo, win_gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SG777::Hit_Icon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SG777::Hit_Icon, hit_icon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SG777::CMD_3D_SC_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SG777::CMD_3D_SC_Result, icon_),
  PROTOBUF_FIELD_OFFSET(::SG777::CMD_3D_SC_Result, hit_icon_),
  PROTOBUF_FIELD_OFFSET(::SG777::CMD_3D_SC_Result, odd_),
  PROTOBUF_FIELD_OFFSET(::SG777::CMD_3D_SC_Result, full_screen_type_),
  PROTOBUF_FIELD_OFFSET(::SG777::CMD_3D_SC_Result, win_gold_),
  PROTOBUF_FIELD_OFFSET(::SG777::CMD_3D_SC_Result, free_cnt_),
  PROTOBUF_FIELD_OFFSET(::SG777::CMD_3D_SC_Result, is_small_game_),
  PROTOBUF_FIELD_OFFSET(::SG777::CMD_3D_SC_Result, open_wild_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SG777::CMD_StartBallGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SG777::CMD_StartBallGame, win_gold_),
  PROTOBUF_FIELD_OFFSET(::SG777::CMD_StartBallGame, index_),
  PROTOBUF_FIELD_OFFSET(::SG777::CMD_StartBallGame, bell_num_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SG777::SC_SceneInfo)},
  { 11, -1, sizeof(::SG777::Hit_Icon)},
  { 17, -1, sizeof(::SG777::CMD_3D_SC_Result)},
  { 30, -1, sizeof(::SG777::CMD_StartBallGame)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SG777::_SC_SceneInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SG777::_Hit_Icon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SG777::_CMD_3D_SC_Result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SG777::_CMD_StartBallGame_default_instance_),
};

const char descriptor_table_protodef_SG777_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013SG777.proto\022\005SG777\"t\n\014SC_SceneInfo\022\020\n\010"
  "cur_chip\030\001 \001(\005\022\013\n\003bet\030\002 \003(\005\022\020\n\010free_cnt\030"
  "\003 \001(\005\022\020\n\010bell_cnt\030\004 \001(\005\022\017\n\007is_open\030\005 \003(\005"
  "\022\020\n\010win_gold\030\006 \003(\003\"\034\n\010Hit_Icon\022\020\n\010hit_ic"
  "on\030\001 \003(\005\"\270\001\n\020CMD_3D_SC_Result\022\014\n\004icon\030\001 "
  "\003(\005\022!\n\010hit_icon\030\002 \003(\0132\017.SG777.Hit_Icon\022\013"
  "\n\003odd\030\003 \001(\005\022\030\n\020full_screen_type\030\004 \001(\005\022\020\n"
  "\010win_gold\030\005 \001(\003\022\020\n\010free_cnt\030\006 \001(\005\022\025\n\ris_"
  "small_game\030\007 \001(\010\022\021\n\topen_wild\030\010 \003(\010\"F\n\021C"
  "MD_StartBallGame\022\020\n\010win_gold\030\001 \001(\003\022\r\n\005in"
  "dex\030\002 \001(\005\022\020\n\010bell_num\030\003 \001(\005*j\n\013EMsgIDSG7"
  "77\022\025\n\021SUB_CS_GAME_START\020\000\022\030\n\024SUB_CS_BELL"
  "_GAME_END\020\001\022\024\n\020SUB_SC_GAME_OVER\020\002\022\024\n\020SUB"
  "_SC_BELL_GAME\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_SG777_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_SG777_2eproto_sccs[4] = {
  &scc_info_CMD_3D_SC_Result_SG777_2eproto.base,
  &scc_info_CMD_StartBallGame_SG777_2eproto.base,
  &scc_info_Hit_Icon_SG777_2eproto.base,
  &scc_info_SC_SceneInfo_SG777_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_SG777_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SG777_2eproto = {
  false, false, descriptor_table_protodef_SG777_2eproto, "SG777.proto", 543,
  &descriptor_table_SG777_2eproto_once, descriptor_table_SG777_2eproto_sccs, descriptor_table_SG777_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_SG777_2eproto::offsets,
  file_level_metadata_SG777_2eproto, 4, file_level_enum_descriptors_SG777_2eproto, file_level_service_descriptors_SG777_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_SG777_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_SG777_2eproto)), true);
namespace SG777 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDSG777_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SG777_2eproto);
  return file_level_enum_descriptors_SG777_2eproto[0];
}
bool EMsgIDSG777_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SC_SceneInfo::_Internal {
 public:
};

SC_SceneInfo::SC_SceneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bet_(arena),
  is_open_(arena),
  win_gold_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SG777.SC_SceneInfo)
}
SC_SceneInfo::SC_SceneInfo(const SC_SceneInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bet_(from.bet_),
      is_open_(from.is_open_),
      win_gold_(from.win_gold_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cur_chip_, &from.cur_chip_,
    static_cast<size_t>(reinterpret_cast<char*>(&bell_cnt_) -
    reinterpret_cast<char*>(&cur_chip_)) + sizeof(bell_cnt_));
  // @@protoc_insertion_point(copy_constructor:SG777.SC_SceneInfo)
}

void SC_SceneInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&cur_chip_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bell_cnt_) -
      reinterpret_cast<char*>(&cur_chip_)) + sizeof(bell_cnt_));
}

SC_SceneInfo::~SC_SceneInfo() {
  // @@protoc_insertion_point(destructor:SG777.SC_SceneInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SC_SceneInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SC_SceneInfo::ArenaDtor(void* object) {
  SC_SceneInfo* _this = reinterpret_cast< SC_SceneInfo* >(object);
  (void)_this;
}
void SC_SceneInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SC_SceneInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_SceneInfo& SC_SceneInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_SceneInfo_SG777_2eproto.base);
  return *internal_default_instance();
}


void SC_SceneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SG777.SC_SceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bet_.Clear();
  is_open_.Clear();
  win_gold_.Clear();
  ::memset(&cur_chip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bell_cnt_) -
      reinterpret_cast<char*>(&cur_chip_)) + sizeof(bell_cnt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_SceneInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 cur_chip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cur_chip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 bet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bet(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_bet(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 free_cnt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          free_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bell_cnt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bell_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 is_open = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_is_open(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_is_open(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 win_gold = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_win_gold(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_win_gold(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_SceneInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SG777.SC_SceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cur_chip = 1;
  if (this->cur_chip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cur_chip(), target);
  }

  // repeated int32 bet = 2;
  {
    int byte_size = _bet_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_bet(), byte_size, target);
    }
  }

  // int32 free_cnt = 3;
  if (this->free_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_free_cnt(), target);
  }

  // int32 bell_cnt = 4;
  if (this->bell_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_bell_cnt(), target);
  }

  // repeated int32 is_open = 5;
  {
    int byte_size = _is_open_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_is_open(), byte_size, target);
    }
  }

  // repeated int64 win_gold = 6;
  {
    int byte_size = _win_gold_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          6, _internal_win_gold(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SG777.SC_SceneInfo)
  return target;
}

size_t SC_SceneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SG777.SC_SceneInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 bet = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bet_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bet_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 is_open = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->is_open_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _is_open_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 win_gold = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->win_gold_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _win_gold_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 cur_chip = 1;
  if (this->cur_chip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur_chip());
  }

  // int32 free_cnt = 3;
  if (this->free_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_free_cnt());
  }

  // int32 bell_cnt = 4;
  if (this->bell_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bell_cnt());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_SceneInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SG777.SC_SceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_SceneInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_SceneInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SG777.SC_SceneInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SG777.SC_SceneInfo)
    MergeFrom(*source);
  }
}

void SC_SceneInfo::MergeFrom(const SC_SceneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SG777.SC_SceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bet_.MergeFrom(from.bet_);
  is_open_.MergeFrom(from.is_open_);
  win_gold_.MergeFrom(from.win_gold_);
  if (from.cur_chip() != 0) {
    _internal_set_cur_chip(from._internal_cur_chip());
  }
  if (from.free_cnt() != 0) {
    _internal_set_free_cnt(from._internal_free_cnt());
  }
  if (from.bell_cnt() != 0) {
    _internal_set_bell_cnt(from._internal_bell_cnt());
  }
}

void SC_SceneInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SG777.SC_SceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_SceneInfo::CopyFrom(const SC_SceneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SG777.SC_SceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_SceneInfo::IsInitialized() const {
  return true;
}

void SC_SceneInfo::InternalSwap(SC_SceneInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bet_.InternalSwap(&other->bet_);
  is_open_.InternalSwap(&other->is_open_);
  win_gold_.InternalSwap(&other->win_gold_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_SceneInfo, bell_cnt_)
      + sizeof(SC_SceneInfo::bell_cnt_)
      - PROTOBUF_FIELD_OFFSET(SC_SceneInfo, cur_chip_)>(
          reinterpret_cast<char*>(&cur_chip_),
          reinterpret_cast<char*>(&other->cur_chip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_SceneInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Hit_Icon::_Internal {
 public:
};

Hit_Icon::Hit_Icon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hit_icon_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SG777.Hit_Icon)
}
Hit_Icon::Hit_Icon(const Hit_Icon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hit_icon_(from.hit_icon_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SG777.Hit_Icon)
}

void Hit_Icon::SharedCtor() {
}

Hit_Icon::~Hit_Icon() {
  // @@protoc_insertion_point(destructor:SG777.Hit_Icon)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Hit_Icon::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Hit_Icon::ArenaDtor(void* object) {
  Hit_Icon* _this = reinterpret_cast< Hit_Icon* >(object);
  (void)_this;
}
void Hit_Icon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Hit_Icon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Hit_Icon& Hit_Icon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Hit_Icon_SG777_2eproto.base);
  return *internal_default_instance();
}


void Hit_Icon::Clear() {
// @@protoc_insertion_point(message_clear_start:SG777.Hit_Icon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hit_icon_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Hit_Icon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 hit_icon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_hit_icon(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_hit_icon(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Hit_Icon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SG777.Hit_Icon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 hit_icon = 1;
  {
    int byte_size = _hit_icon_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_hit_icon(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SG777.Hit_Icon)
  return target;
}

size_t Hit_Icon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SG777.Hit_Icon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 hit_icon = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->hit_icon_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _hit_icon_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Hit_Icon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SG777.Hit_Icon)
  GOOGLE_DCHECK_NE(&from, this);
  const Hit_Icon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Hit_Icon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SG777.Hit_Icon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SG777.Hit_Icon)
    MergeFrom(*source);
  }
}

void Hit_Icon::MergeFrom(const Hit_Icon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SG777.Hit_Icon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hit_icon_.MergeFrom(from.hit_icon_);
}

void Hit_Icon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SG777.Hit_Icon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hit_Icon::CopyFrom(const Hit_Icon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SG777.Hit_Icon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hit_Icon::IsInitialized() const {
  return true;
}

void Hit_Icon::InternalSwap(Hit_Icon* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hit_icon_.InternalSwap(&other->hit_icon_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Hit_Icon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_3D_SC_Result::_Internal {
 public:
};

CMD_3D_SC_Result::CMD_3D_SC_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  icon_(arena),
  hit_icon_(arena),
  open_wild_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SG777.CMD_3D_SC_Result)
}
CMD_3D_SC_Result::CMD_3D_SC_Result(const CMD_3D_SC_Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      icon_(from.icon_),
      hit_icon_(from.hit_icon_),
      open_wild_(from.open_wild_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&odd_, &from.odd_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_small_game_) -
    reinterpret_cast<char*>(&odd_)) + sizeof(is_small_game_));
  // @@protoc_insertion_point(copy_constructor:SG777.CMD_3D_SC_Result)
}

void CMD_3D_SC_Result::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMD_3D_SC_Result_SG777_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&odd_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_small_game_) -
      reinterpret_cast<char*>(&odd_)) + sizeof(is_small_game_));
}

CMD_3D_SC_Result::~CMD_3D_SC_Result() {
  // @@protoc_insertion_point(destructor:SG777.CMD_3D_SC_Result)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_3D_SC_Result::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_3D_SC_Result::ArenaDtor(void* object) {
  CMD_3D_SC_Result* _this = reinterpret_cast< CMD_3D_SC_Result* >(object);
  (void)_this;
}
void CMD_3D_SC_Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_3D_SC_Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_3D_SC_Result& CMD_3D_SC_Result::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_3D_SC_Result_SG777_2eproto.base);
  return *internal_default_instance();
}


void CMD_3D_SC_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:SG777.CMD_3D_SC_Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  icon_.Clear();
  hit_icon_.Clear();
  open_wild_.Clear();
  ::memset(&odd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_small_game_) -
      reinterpret_cast<char*>(&odd_)) + sizeof(is_small_game_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_3D_SC_Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 icon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_icon(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_icon(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SG777.Hit_Icon hit_icon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hit_icon(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 odd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          odd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 full_screen_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          full_screen_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 win_gold = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          win_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 free_cnt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          free_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_small_game = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          is_small_game_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool open_wild = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_open_wild(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_open_wild(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_3D_SC_Result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SG777.CMD_3D_SC_Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 icon = 1;
  {
    int byte_size = _icon_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_icon(), byte_size, target);
    }
  }

  // repeated .SG777.Hit_Icon hit_icon = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hit_icon_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_hit_icon(i), target, stream);
  }

  // int32 odd = 3;
  if (this->odd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_odd(), target);
  }

  // int32 full_screen_type = 4;
  if (this->full_screen_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_full_screen_type(), target);
  }

  // int64 win_gold = 5;
  if (this->win_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_win_gold(), target);
  }

  // int32 free_cnt = 6;
  if (this->free_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_free_cnt(), target);
  }

  // bool is_small_game = 7;
  if (this->is_small_game() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_small_game(), target);
  }

  // repeated bool open_wild = 8;
  if (this->_internal_open_wild_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_open_wild(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SG777.CMD_3D_SC_Result)
  return target;
}

size_t CMD_3D_SC_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SG777.CMD_3D_SC_Result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 icon = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->icon_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _icon_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .SG777.Hit_Icon hit_icon = 2;
  total_size += 1UL * this->_internal_hit_icon_size();
  for (const auto& msg : this->hit_icon_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bool open_wild = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_open_wild_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _open_wild_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 odd = 3;
  if (this->odd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_odd());
  }

  // int32 full_screen_type = 4;
  if (this->full_screen_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_full_screen_type());
  }

  // int64 win_gold = 5;
  if (this->win_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_win_gold());
  }

  // int32 free_cnt = 6;
  if (this->free_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_free_cnt());
  }

  // bool is_small_game = 7;
  if (this->is_small_game() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_3D_SC_Result::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SG777.CMD_3D_SC_Result)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_3D_SC_Result* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_3D_SC_Result>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SG777.CMD_3D_SC_Result)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SG777.CMD_3D_SC_Result)
    MergeFrom(*source);
  }
}

void CMD_3D_SC_Result::MergeFrom(const CMD_3D_SC_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SG777.CMD_3D_SC_Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  icon_.MergeFrom(from.icon_);
  hit_icon_.MergeFrom(from.hit_icon_);
  open_wild_.MergeFrom(from.open_wild_);
  if (from.odd() != 0) {
    _internal_set_odd(from._internal_odd());
  }
  if (from.full_screen_type() != 0) {
    _internal_set_full_screen_type(from._internal_full_screen_type());
  }
  if (from.win_gold() != 0) {
    _internal_set_win_gold(from._internal_win_gold());
  }
  if (from.free_cnt() != 0) {
    _internal_set_free_cnt(from._internal_free_cnt());
  }
  if (from.is_small_game() != 0) {
    _internal_set_is_small_game(from._internal_is_small_game());
  }
}

void CMD_3D_SC_Result::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SG777.CMD_3D_SC_Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_3D_SC_Result::CopyFrom(const CMD_3D_SC_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SG777.CMD_3D_SC_Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_3D_SC_Result::IsInitialized() const {
  return true;
}

void CMD_3D_SC_Result::InternalSwap(CMD_3D_SC_Result* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  icon_.InternalSwap(&other->icon_);
  hit_icon_.InternalSwap(&other->hit_icon_);
  open_wild_.InternalSwap(&other->open_wild_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_3D_SC_Result, is_small_game_)
      + sizeof(CMD_3D_SC_Result::is_small_game_)
      - PROTOBUF_FIELD_OFFSET(CMD_3D_SC_Result, odd_)>(
          reinterpret_cast<char*>(&odd_),
          reinterpret_cast<char*>(&other->odd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_3D_SC_Result::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMD_StartBallGame::_Internal {
 public:
};

CMD_StartBallGame::CMD_StartBallGame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SG777.CMD_StartBallGame)
}
CMD_StartBallGame::CMD_StartBallGame(const CMD_StartBallGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&win_gold_, &from.win_gold_,
    static_cast<size_t>(reinterpret_cast<char*>(&bell_num_) -
    reinterpret_cast<char*>(&win_gold_)) + sizeof(bell_num_));
  // @@protoc_insertion_point(copy_constructor:SG777.CMD_StartBallGame)
}

void CMD_StartBallGame::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&win_gold_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bell_num_) -
      reinterpret_cast<char*>(&win_gold_)) + sizeof(bell_num_));
}

CMD_StartBallGame::~CMD_StartBallGame() {
  // @@protoc_insertion_point(destructor:SG777.CMD_StartBallGame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMD_StartBallGame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMD_StartBallGame::ArenaDtor(void* object) {
  CMD_StartBallGame* _this = reinterpret_cast< CMD_StartBallGame* >(object);
  (void)_this;
}
void CMD_StartBallGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD_StartBallGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMD_StartBallGame& CMD_StartBallGame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMD_StartBallGame_SG777_2eproto.base);
  return *internal_default_instance();
}


void CMD_StartBallGame::Clear() {
// @@protoc_insertion_point(message_clear_start:SG777.CMD_StartBallGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&win_gold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bell_num_) -
      reinterpret_cast<char*>(&win_gold_)) + sizeof(bell_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD_StartBallGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 win_gold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          win_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bell_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bell_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMD_StartBallGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SG777.CMD_StartBallGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 win_gold = 1;
  if (this->win_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_win_gold(), target);
  }

  // int32 index = 2;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_index(), target);
  }

  // int32 bell_num = 3;
  if (this->bell_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_bell_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SG777.CMD_StartBallGame)
  return target;
}

size_t CMD_StartBallGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SG777.CMD_StartBallGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 win_gold = 1;
  if (this->win_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_win_gold());
  }

  // int32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // int32 bell_num = 3;
  if (this->bell_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bell_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMD_StartBallGame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SG777.CMD_StartBallGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMD_StartBallGame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMD_StartBallGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SG777.CMD_StartBallGame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SG777.CMD_StartBallGame)
    MergeFrom(*source);
  }
}

void CMD_StartBallGame::MergeFrom(const CMD_StartBallGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SG777.CMD_StartBallGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.win_gold() != 0) {
    _internal_set_win_gold(from._internal_win_gold());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.bell_num() != 0) {
    _internal_set_bell_num(from._internal_bell_num());
  }
}

void CMD_StartBallGame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SG777.CMD_StartBallGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_StartBallGame::CopyFrom(const CMD_StartBallGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SG777.CMD_StartBallGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_StartBallGame::IsInitialized() const {
  return true;
}

void CMD_StartBallGame::InternalSwap(CMD_StartBallGame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMD_StartBallGame, bell_num_)
      + sizeof(CMD_StartBallGame::bell_num_)
      - PROTOBUF_FIELD_OFFSET(CMD_StartBallGame, win_gold_)>(
          reinterpret_cast<char*>(&win_gold_),
          reinterpret_cast<char*>(&other->win_gold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD_StartBallGame::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SG777
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SG777::SC_SceneInfo* Arena::CreateMaybeMessage< ::SG777::SC_SceneInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SG777::SC_SceneInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SG777::Hit_Icon* Arena::CreateMaybeMessage< ::SG777::Hit_Icon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SG777::Hit_Icon >(arena);
}
template<> PROTOBUF_NOINLINE ::SG777::CMD_3D_SC_Result* Arena::CreateMaybeMessage< ::SG777::CMD_3D_SC_Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SG777::CMD_3D_SC_Result >(arena);
}
template<> PROTOBUF_NOINLINE ::SG777::CMD_StartBallGame* Arena::CreateMaybeMessage< ::SG777::CMD_StartBallGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SG777::CMD_StartBallGame >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
