// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: A7U7P.proto

#include "A7U7P.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_A7U7P_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_A7BetInfo_A7U7P_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_A7U7P_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_A7PlayerData_A7U7P_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_A7U7P_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgA7Record_A7U7P_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_A7U7P_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgA7WinMsg_A7U7P_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_A7U7P_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgPlayerTopInfo_A7U7P_2eproto;
namespace A7U7P {
class MsgA7NotifyStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgA7NotifyState> _instance;
} _MsgA7NotifyState_default_instance_;
class A7BetInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<A7BetInfo> _instance;
} _A7BetInfo_default_instance_;
class A7PlayerDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<A7PlayerData> _instance;
} _A7PlayerData_default_instance_;
class MsgA7RecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgA7Record> _instance;
} _MsgA7Record_default_instance_;
class MsgA7SceneInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgA7SceneInfo> _instance;
} _MsgA7SceneInfo_default_instance_;
class MsgA7BetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgA7Bet> _instance;
} _MsgA7Bet_default_instance_;
class MsgA7BetRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgA7BetResp> _instance;
} _MsgA7BetResp_default_instance_;
class MsgA7WinMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgA7WinMsg> _instance;
} _MsgA7WinMsg_default_instance_;
class MsgA7ResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgA7Result> _instance;
} _MsgA7Result_default_instance_;
class MsgPlayerTopInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgPlayerTopInfo> _instance;
} _MsgPlayerTopInfo_default_instance_;
class MsgA7PlayerInfoTopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgA7PlayerInfoTop> _instance;
} _MsgA7PlayerInfoTop_default_instance_;
}  // namespace A7U7P
static void InitDefaultsscc_info_A7BetInfo_A7U7P_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::A7U7P::_A7BetInfo_default_instance_;
    new (ptr) ::A7U7P::A7BetInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_A7BetInfo_A7U7P_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_A7BetInfo_A7U7P_2eproto}, {}};

static void InitDefaultsscc_info_A7PlayerData_A7U7P_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::A7U7P::_A7PlayerData_default_instance_;
    new (ptr) ::A7U7P::A7PlayerData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_A7PlayerData_A7U7P_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_A7PlayerData_A7U7P_2eproto}, {
      &scc_info_A7BetInfo_A7U7P_2eproto.base,}};

static void InitDefaultsscc_info_MsgA7Bet_A7U7P_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::A7U7P::_MsgA7Bet_default_instance_;
    new (ptr) ::A7U7P::MsgA7Bet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgA7Bet_A7U7P_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgA7Bet_A7U7P_2eproto}, {}};

static void InitDefaultsscc_info_MsgA7BetResp_A7U7P_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::A7U7P::_MsgA7BetResp_default_instance_;
    new (ptr) ::A7U7P::MsgA7BetResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgA7BetResp_A7U7P_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgA7BetResp_A7U7P_2eproto}, {
      &scc_info_A7BetInfo_A7U7P_2eproto.base,}};

static void InitDefaultsscc_info_MsgA7NotifyState_A7U7P_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::A7U7P::_MsgA7NotifyState_default_instance_;
    new (ptr) ::A7U7P::MsgA7NotifyState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgA7NotifyState_A7U7P_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgA7NotifyState_A7U7P_2eproto}, {}};

static void InitDefaultsscc_info_MsgA7PlayerInfoTop_A7U7P_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::A7U7P::_MsgA7PlayerInfoTop_default_instance_;
    new (ptr) ::A7U7P::MsgA7PlayerInfoTop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgA7PlayerInfoTop_A7U7P_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgA7PlayerInfoTop_A7U7P_2eproto}, {
      &scc_info_MsgPlayerTopInfo_A7U7P_2eproto.base,}};

static void InitDefaultsscc_info_MsgA7Record_A7U7P_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::A7U7P::_MsgA7Record_default_instance_;
    new (ptr) ::A7U7P::MsgA7Record();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgA7Record_A7U7P_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgA7Record_A7U7P_2eproto}, {}};

static void InitDefaultsscc_info_MsgA7Result_A7U7P_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::A7U7P::_MsgA7Result_default_instance_;
    new (ptr) ::A7U7P::MsgA7Result();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgA7Result_A7U7P_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgA7Result_A7U7P_2eproto}, {
      &scc_info_MsgA7WinMsg_A7U7P_2eproto.base,}};

static void InitDefaultsscc_info_MsgA7SceneInfo_A7U7P_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::A7U7P::_MsgA7SceneInfo_default_instance_;
    new (ptr) ::A7U7P::MsgA7SceneInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MsgA7SceneInfo_A7U7P_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MsgA7SceneInfo_A7U7P_2eproto}, {
      &scc_info_MsgA7Record_A7U7P_2eproto.base,
      &scc_info_A7PlayerData_A7U7P_2eproto.base,}};

static void InitDefaultsscc_info_MsgA7WinMsg_A7U7P_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::A7U7P::_MsgA7WinMsg_default_instance_;
    new (ptr) ::A7U7P::MsgA7WinMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgA7WinMsg_A7U7P_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgA7WinMsg_A7U7P_2eproto}, {}};

static void InitDefaultsscc_info_MsgPlayerTopInfo_A7U7P_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::A7U7P::_MsgPlayerTopInfo_default_instance_;
    new (ptr) ::A7U7P::MsgPlayerTopInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgPlayerTopInfo_A7U7P_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgPlayerTopInfo_A7U7P_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_A7U7P_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_A7U7P_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_A7U7P_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_A7U7P_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgA7NotifyState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgA7NotifyState, game_state_),
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgA7NotifyState, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::A7U7P::A7BetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::A7U7P::A7BetInfo, bet_),
  PROTOBUF_FIELD_OFFSET(::A7U7P::A7BetInfo, area_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::A7U7P::A7PlayerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::A7U7P::A7PlayerData, user_id_),
  PROTOBUF_FIELD_OFFSET(::A7U7P::A7PlayerData, chair_id_),
  PROTOBUF_FIELD_OFFSET(::A7U7P::A7PlayerData, win_gold_),
  PROTOBUF_FIELD_OFFSET(::A7U7P::A7PlayerData, total_play_),
  PROTOBUF_FIELD_OFFSET(::A7U7P::A7PlayerData, win_play_),
  PROTOBUF_FIELD_OFFSET(::A7U7P::A7PlayerData, bet_infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgA7Record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgA7Record, sieves_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgA7SceneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgA7SceneInfo, bet_list_),
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgA7SceneInfo, area_mup_),
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgA7SceneInfo, records_),
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgA7SceneInfo, bet_limit_),
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgA7SceneInfo, player_limit_),
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgA7SceneInfo, bet_time_),
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgA7SceneInfo, out_time_),
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgA7SceneInfo, state_),
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgA7SceneInfo, game_tax_),
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgA7SceneInfo, area_bet_),
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgA7SceneInfo, sieves_),
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgA7SceneInfo, player_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgA7Bet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgA7Bet, bet_),
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgA7Bet, area_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgA7BetResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgA7BetResp, ret_code_),
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgA7BetResp, user_id_),
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgA7BetResp, chair_id_),
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgA7BetResp, bet_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgA7WinMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgA7WinMsg, user_id_),
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgA7WinMsg, chair_id_),
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgA7WinMsg, win_gold_),
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgA7WinMsg, new_gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgA7Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgA7Result, sieves_),
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgA7Result, win_index_),
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgA7Result, win_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgPlayerTopInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgPlayerTopInfo, game_bet_),
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgPlayerTopInfo, win_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgA7PlayerInfoTop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::A7U7P::MsgA7PlayerInfoTop, top_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::A7U7P::MsgA7NotifyState)},
  { 7, -1, sizeof(::A7U7P::A7BetInfo)},
  { 14, -1, sizeof(::A7U7P::A7PlayerData)},
  { 25, -1, sizeof(::A7U7P::MsgA7Record)},
  { 31, -1, sizeof(::A7U7P::MsgA7SceneInfo)},
  { 48, -1, sizeof(::A7U7P::MsgA7Bet)},
  { 55, -1, sizeof(::A7U7P::MsgA7BetResp)},
  { 64, -1, sizeof(::A7U7P::MsgA7WinMsg)},
  { 73, -1, sizeof(::A7U7P::MsgA7Result)},
  { 81, -1, sizeof(::A7U7P::MsgPlayerTopInfo)},
  { 88, -1, sizeof(::A7U7P::MsgA7PlayerInfoTop)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::A7U7P::_MsgA7NotifyState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::A7U7P::_A7BetInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::A7U7P::_A7PlayerData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::A7U7P::_MsgA7Record_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::A7U7P::_MsgA7SceneInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::A7U7P::_MsgA7Bet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::A7U7P::_MsgA7BetResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::A7U7P::_MsgA7WinMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::A7U7P::_MsgA7Result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::A7U7P::_MsgPlayerTopInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::A7U7P::_MsgA7PlayerInfoTop_default_instance_),
};

const char descriptor_table_protodef_A7U7P_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013A7U7P.proto\022\005A7U7P\"4\n\020MsgA7NotifyState"
  "\022\022\n\ngame_state\030\001 \001(\005\022\014\n\004time\030\002 \001(\005\"&\n\tA7"
  "BetInfo\022\013\n\003bet\030\001 \001(\003\022\014\n\004area\030\002 \001(\005\"\216\001\n\014A"
  "7PlayerData\022\017\n\007user_id\030\001 \001(\005\022\020\n\010chair_id"
  "\030\002 \001(\005\022\020\n\010win_gold\030\003 \001(\003\022\022\n\ntotal_play\030\004"
  " \001(\005\022\020\n\010win_play\030\005 \001(\005\022#\n\tbet_infos\030\006 \003("
  "\0132\020.A7U7P.A7BetInfo\"\035\n\013MsgA7Record\022\016\n\006si"
  "eves\030\002 \003(\005\"\223\002\n\016MsgA7SceneInfo\022\020\n\010bet_lis"
  "t\030\001 \003(\003\022\020\n\010area_mup\030\002 \003(\005\022#\n\007records\030\003 \003"
  "(\0132\022.A7U7P.MsgA7Record\022\021\n\tbet_limit\030\004 \003("
  "\005\022\024\n\014player_limit\030\005 \001(\005\022\020\n\010bet_time\030\006 \001("
  "\005\022\020\n\010out_time\030\007 \001(\005\022\r\n\005state\030\010 \001(\005\022\020\n\010ga"
  "me_tax\030\t \001(\005\022\020\n\010area_bet\030\023 \003(\005\022\016\n\006sieves"
  "\030\024 \003(\005\022(\n\013player_list\030\026 \003(\0132\023.A7U7P.A7Pl"
  "ayerData\"%\n\010MsgA7Bet\022\013\n\003bet\030\001 \001(\003\022\014\n\004are"
  "a\030\002 \001(\005\"g\n\014MsgA7BetResp\022\020\n\010ret_code\030\001 \001("
  "\005\022\017\n\007user_id\030\002 \001(\005\022\020\n\010chair_id\030\003 \001(\005\022\"\n\010"
  "bet_info\030\004 \001(\0132\020.A7U7P.A7BetInfo\"T\n\013MsgA"
  "7WinMsg\022\017\n\007user_id\030\001 \001(\005\022\020\n\010chair_id\030\002 \001"
  "(\005\022\020\n\010win_gold\030\003 \001(\003\022\020\n\010new_gold\030\004 \001(\003\"U"
  "\n\013MsgA7Result\022\016\n\006sieves\030\002 \003(\005\022\021\n\twin_ind"
  "ex\030\001 \003(\005\022#\n\007win_msg\030\003 \003(\0132\022.A7U7P.MsgA7W"
  "inMsg\"7\n\020MsgPlayerTopInfo\022\020\n\010game_bet\030\001 "
  "\001(\003\022\021\n\twin_count\030\002 \001(\005\":\n\022MsgA7PlayerInf"
  "oTop\022$\n\003top\030\001 \003(\0132\027.A7U7P.MsgPlayerTopIn"
  "fo*C\n\nEGameState\022\014\n\010GS_Ready\020\000\022\014\n\010GS_Sta"
  "rt\020\001\022\n\n\006GS_Bet\020\002\022\r\n\tGS_Result\020\003*\275\001\n\rEMsg"
  "IDSubGame\022\025\n\021MsgIDSubGame_Null\020\000\022\024\n\020MsgI"
  "DSubGame_Bet\020\001\022\030\n\024MsgIDSubGame_BetResp\020\002"
  "\022\037\n\033MsgIDSubGame_GameResultResp\020\007\022 \n\034Msg"
  "IDSubGame_NotifyStateResp\020\010\022\"\n\036MsgIDSubG"
  "ame_NotifyGameTopResp\020\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_A7U7P_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_A7U7P_2eproto_sccs[11] = {
  &scc_info_A7BetInfo_A7U7P_2eproto.base,
  &scc_info_A7PlayerData_A7U7P_2eproto.base,
  &scc_info_MsgA7Bet_A7U7P_2eproto.base,
  &scc_info_MsgA7BetResp_A7U7P_2eproto.base,
  &scc_info_MsgA7NotifyState_A7U7P_2eproto.base,
  &scc_info_MsgA7PlayerInfoTop_A7U7P_2eproto.base,
  &scc_info_MsgA7Record_A7U7P_2eproto.base,
  &scc_info_MsgA7Result_A7U7P_2eproto.base,
  &scc_info_MsgA7SceneInfo_A7U7P_2eproto.base,
  &scc_info_MsgA7WinMsg_A7U7P_2eproto.base,
  &scc_info_MsgPlayerTopInfo_A7U7P_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_A7U7P_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_A7U7P_2eproto = {
  false, false, descriptor_table_protodef_A7U7P_2eproto, "A7U7P.proto", 1271,
  &descriptor_table_A7U7P_2eproto_once, descriptor_table_A7U7P_2eproto_sccs, descriptor_table_A7U7P_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_A7U7P_2eproto::offsets,
  file_level_metadata_A7U7P_2eproto, 11, file_level_enum_descriptors_A7U7P_2eproto, file_level_service_descriptors_A7U7P_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_A7U7P_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_A7U7P_2eproto)), true);
namespace A7U7P {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGameState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_A7U7P_2eproto);
  return file_level_enum_descriptors_A7U7P_2eproto[0];
}
bool EGameState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDSubGame_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_A7U7P_2eproto);
  return file_level_enum_descriptors_A7U7P_2eproto[1];
}
bool EMsgIDSubGame_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MsgA7NotifyState::_Internal {
 public:
};

MsgA7NotifyState::MsgA7NotifyState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:A7U7P.MsgA7NotifyState)
}
MsgA7NotifyState::MsgA7NotifyState(const MsgA7NotifyState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&game_state_, &from.game_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&game_state_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:A7U7P.MsgA7NotifyState)
}

void MsgA7NotifyState::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&game_state_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&game_state_)) + sizeof(time_));
}

MsgA7NotifyState::~MsgA7NotifyState() {
  // @@protoc_insertion_point(destructor:A7U7P.MsgA7NotifyState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgA7NotifyState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgA7NotifyState::ArenaDtor(void* object) {
  MsgA7NotifyState* _this = reinterpret_cast< MsgA7NotifyState* >(object);
  (void)_this;
}
void MsgA7NotifyState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgA7NotifyState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgA7NotifyState& MsgA7NotifyState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgA7NotifyState_A7U7P_2eproto.base);
  return *internal_default_instance();
}


void MsgA7NotifyState::Clear() {
// @@protoc_insertion_point(message_clear_start:A7U7P.MsgA7NotifyState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&game_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&game_state_)) + sizeof(time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgA7NotifyState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 game_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          game_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgA7NotifyState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:A7U7P.MsgA7NotifyState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 game_state = 1;
  if (this->game_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_game_state(), target);
  }

  // int32 time = 2;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:A7U7P.MsgA7NotifyState)
  return target;
}

size_t MsgA7NotifyState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:A7U7P.MsgA7NotifyState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 game_state = 1;
  if (this->game_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_state());
  }

  // int32 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgA7NotifyState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:A7U7P.MsgA7NotifyState)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgA7NotifyState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgA7NotifyState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:A7U7P.MsgA7NotifyState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:A7U7P.MsgA7NotifyState)
    MergeFrom(*source);
  }
}

void MsgA7NotifyState::MergeFrom(const MsgA7NotifyState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:A7U7P.MsgA7NotifyState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.game_state() != 0) {
    _internal_set_game_state(from._internal_game_state());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
}

void MsgA7NotifyState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:A7U7P.MsgA7NotifyState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgA7NotifyState::CopyFrom(const MsgA7NotifyState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:A7U7P.MsgA7NotifyState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgA7NotifyState::IsInitialized() const {
  return true;
}

void MsgA7NotifyState::InternalSwap(MsgA7NotifyState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgA7NotifyState, time_)
      + sizeof(MsgA7NotifyState::time_)
      - PROTOBUF_FIELD_OFFSET(MsgA7NotifyState, game_state_)>(
          reinterpret_cast<char*>(&game_state_),
          reinterpret_cast<char*>(&other->game_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgA7NotifyState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class A7BetInfo::_Internal {
 public:
};

A7BetInfo::A7BetInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:A7U7P.A7BetInfo)
}
A7BetInfo::A7BetInfo(const A7BetInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bet_, &from.bet_,
    static_cast<size_t>(reinterpret_cast<char*>(&area_) -
    reinterpret_cast<char*>(&bet_)) + sizeof(area_));
  // @@protoc_insertion_point(copy_constructor:A7U7P.A7BetInfo)
}

void A7BetInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bet_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&area_) -
      reinterpret_cast<char*>(&bet_)) + sizeof(area_));
}

A7BetInfo::~A7BetInfo() {
  // @@protoc_insertion_point(destructor:A7U7P.A7BetInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void A7BetInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void A7BetInfo::ArenaDtor(void* object) {
  A7BetInfo* _this = reinterpret_cast< A7BetInfo* >(object);
  (void)_this;
}
void A7BetInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void A7BetInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const A7BetInfo& A7BetInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_A7BetInfo_A7U7P_2eproto.base);
  return *internal_default_instance();
}


void A7BetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:A7U7P.A7BetInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&area_) -
      reinterpret_cast<char*>(&bet_)) + sizeof(area_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* A7BetInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 bet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 area = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* A7BetInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:A7U7P.A7BetInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 bet = 1;
  if (this->bet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_bet(), target);
  }

  // int32 area = 2;
  if (this->area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_area(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:A7U7P.A7BetInfo)
  return target;
}

size_t A7BetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:A7U7P.A7BetInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 bet = 1;
  if (this->bet() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_bet());
  }

  // int32 area = 2;
  if (this->area() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_area());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void A7BetInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:A7U7P.A7BetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const A7BetInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<A7BetInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:A7U7P.A7BetInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:A7U7P.A7BetInfo)
    MergeFrom(*source);
  }
}

void A7BetInfo::MergeFrom(const A7BetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:A7U7P.A7BetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bet() != 0) {
    _internal_set_bet(from._internal_bet());
  }
  if (from.area() != 0) {
    _internal_set_area(from._internal_area());
  }
}

void A7BetInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:A7U7P.A7BetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void A7BetInfo::CopyFrom(const A7BetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:A7U7P.A7BetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool A7BetInfo::IsInitialized() const {
  return true;
}

void A7BetInfo::InternalSwap(A7BetInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(A7BetInfo, area_)
      + sizeof(A7BetInfo::area_)
      - PROTOBUF_FIELD_OFFSET(A7BetInfo, bet_)>(
          reinterpret_cast<char*>(&bet_),
          reinterpret_cast<char*>(&other->bet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata A7BetInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class A7PlayerData::_Internal {
 public:
};

A7PlayerData::A7PlayerData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bet_infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:A7U7P.A7PlayerData)
}
A7PlayerData::A7PlayerData(const A7PlayerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bet_infos_(from.bet_infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&win_play_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(win_play_));
  // @@protoc_insertion_point(copy_constructor:A7U7P.A7PlayerData)
}

void A7PlayerData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_A7PlayerData_A7U7P_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&win_play_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(win_play_));
}

A7PlayerData::~A7PlayerData() {
  // @@protoc_insertion_point(destructor:A7U7P.A7PlayerData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void A7PlayerData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void A7PlayerData::ArenaDtor(void* object) {
  A7PlayerData* _this = reinterpret_cast< A7PlayerData* >(object);
  (void)_this;
}
void A7PlayerData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void A7PlayerData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const A7PlayerData& A7PlayerData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_A7PlayerData_A7U7P_2eproto.base);
  return *internal_default_instance();
}


void A7PlayerData::Clear() {
// @@protoc_insertion_point(message_clear_start:A7U7P.A7PlayerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bet_infos_.Clear();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&win_play_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(win_play_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* A7PlayerData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chair_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 win_gold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          win_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_play = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          total_play_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 win_play = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          win_play_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .A7U7P.A7BetInfo bet_infos = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bet_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* A7PlayerData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:A7U7P.A7PlayerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // int32 chair_id = 2;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_chair_id(), target);
  }

  // int64 win_gold = 3;
  if (this->win_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_win_gold(), target);
  }

  // int32 total_play = 4;
  if (this->total_play() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_total_play(), target);
  }

  // int32 win_play = 5;
  if (this->win_play() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_win_play(), target);
  }

  // repeated .A7U7P.A7BetInfo bet_infos = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bet_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_bet_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:A7U7P.A7PlayerData)
  return target;
}

size_t A7PlayerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:A7U7P.A7PlayerData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .A7U7P.A7BetInfo bet_infos = 6;
  total_size += 1UL * this->_internal_bet_infos_size();
  for (const auto& msg : this->bet_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // int32 chair_id = 2;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int64 win_gold = 3;
  if (this->win_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_win_gold());
  }

  // int32 total_play = 4;
  if (this->total_play() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_play());
  }

  // int32 win_play = 5;
  if (this->win_play() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_win_play());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void A7PlayerData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:A7U7P.A7PlayerData)
  GOOGLE_DCHECK_NE(&from, this);
  const A7PlayerData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<A7PlayerData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:A7U7P.A7PlayerData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:A7U7P.A7PlayerData)
    MergeFrom(*source);
  }
}

void A7PlayerData::MergeFrom(const A7PlayerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:A7U7P.A7PlayerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bet_infos_.MergeFrom(from.bet_infos_);
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.win_gold() != 0) {
    _internal_set_win_gold(from._internal_win_gold());
  }
  if (from.total_play() != 0) {
    _internal_set_total_play(from._internal_total_play());
  }
  if (from.win_play() != 0) {
    _internal_set_win_play(from._internal_win_play());
  }
}

void A7PlayerData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:A7U7P.A7PlayerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void A7PlayerData::CopyFrom(const A7PlayerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:A7U7P.A7PlayerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool A7PlayerData::IsInitialized() const {
  return true;
}

void A7PlayerData::InternalSwap(A7PlayerData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bet_infos_.InternalSwap(&other->bet_infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(A7PlayerData, win_play_)
      + sizeof(A7PlayerData::win_play_)
      - PROTOBUF_FIELD_OFFSET(A7PlayerData, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata A7PlayerData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgA7Record::_Internal {
 public:
};

MsgA7Record::MsgA7Record(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sieves_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:A7U7P.MsgA7Record)
}
MsgA7Record::MsgA7Record(const MsgA7Record& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sieves_(from.sieves_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:A7U7P.MsgA7Record)
}

void MsgA7Record::SharedCtor() {
}

MsgA7Record::~MsgA7Record() {
  // @@protoc_insertion_point(destructor:A7U7P.MsgA7Record)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgA7Record::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgA7Record::ArenaDtor(void* object) {
  MsgA7Record* _this = reinterpret_cast< MsgA7Record* >(object);
  (void)_this;
}
void MsgA7Record::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgA7Record::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgA7Record& MsgA7Record::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgA7Record_A7U7P_2eproto.base);
  return *internal_default_instance();
}


void MsgA7Record::Clear() {
// @@protoc_insertion_point(message_clear_start:A7U7P.MsgA7Record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sieves_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgA7Record::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 sieves = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_sieves(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_sieves(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgA7Record::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:A7U7P.MsgA7Record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 sieves = 2;
  {
    int byte_size = _sieves_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_sieves(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:A7U7P.MsgA7Record)
  return target;
}

size_t MsgA7Record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:A7U7P.MsgA7Record)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 sieves = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->sieves_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sieves_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgA7Record::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:A7U7P.MsgA7Record)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgA7Record* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgA7Record>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:A7U7P.MsgA7Record)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:A7U7P.MsgA7Record)
    MergeFrom(*source);
  }
}

void MsgA7Record::MergeFrom(const MsgA7Record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:A7U7P.MsgA7Record)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sieves_.MergeFrom(from.sieves_);
}

void MsgA7Record::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:A7U7P.MsgA7Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgA7Record::CopyFrom(const MsgA7Record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:A7U7P.MsgA7Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgA7Record::IsInitialized() const {
  return true;
}

void MsgA7Record::InternalSwap(MsgA7Record* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sieves_.InternalSwap(&other->sieves_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgA7Record::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgA7SceneInfo::_Internal {
 public:
};

MsgA7SceneInfo::MsgA7SceneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bet_list_(arena),
  area_mup_(arena),
  records_(arena),
  bet_limit_(arena),
  area_bet_(arena),
  sieves_(arena),
  player_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:A7U7P.MsgA7SceneInfo)
}
MsgA7SceneInfo::MsgA7SceneInfo(const MsgA7SceneInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bet_list_(from.bet_list_),
      area_mup_(from.area_mup_),
      records_(from.records_),
      bet_limit_(from.bet_limit_),
      area_bet_(from.area_bet_),
      sieves_(from.sieves_),
      player_list_(from.player_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_limit_, &from.player_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_tax_) -
    reinterpret_cast<char*>(&player_limit_)) + sizeof(game_tax_));
  // @@protoc_insertion_point(copy_constructor:A7U7P.MsgA7SceneInfo)
}

void MsgA7SceneInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgA7SceneInfo_A7U7P_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&player_limit_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&game_tax_) -
      reinterpret_cast<char*>(&player_limit_)) + sizeof(game_tax_));
}

MsgA7SceneInfo::~MsgA7SceneInfo() {
  // @@protoc_insertion_point(destructor:A7U7P.MsgA7SceneInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgA7SceneInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgA7SceneInfo::ArenaDtor(void* object) {
  MsgA7SceneInfo* _this = reinterpret_cast< MsgA7SceneInfo* >(object);
  (void)_this;
}
void MsgA7SceneInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgA7SceneInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgA7SceneInfo& MsgA7SceneInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgA7SceneInfo_A7U7P_2eproto.base);
  return *internal_default_instance();
}


void MsgA7SceneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:A7U7P.MsgA7SceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bet_list_.Clear();
  area_mup_.Clear();
  records_.Clear();
  bet_limit_.Clear();
  area_bet_.Clear();
  sieves_.Clear();
  player_list_.Clear();
  ::memset(&player_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_tax_) -
      reinterpret_cast<char*>(&player_limit_)) + sizeof(game_tax_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgA7SceneInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 bet_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_bet_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_bet_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 area_mup = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_area_mup(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_area_mup(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .A7U7P.MsgA7Record records = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 bet_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bet_limit(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_bet_limit(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 player_limit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          player_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bet_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          bet_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 out_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          out_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 game_tax = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          game_tax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 area_bet = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_area_bet(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152) {
          _internal_add_area_bet(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 sieves = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_sieves(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160) {
          _internal_add_sieves(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .A7U7P.A7PlayerData player_list = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_player_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgA7SceneInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:A7U7P.MsgA7SceneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 bet_list = 1;
  {
    int byte_size = _bet_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_bet_list(), byte_size, target);
    }
  }

  // repeated int32 area_mup = 2;
  {
    int byte_size = _area_mup_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_area_mup(), byte_size, target);
    }
  }

  // repeated .A7U7P.MsgA7Record records = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_records(i), target, stream);
  }

  // repeated int32 bet_limit = 4;
  {
    int byte_size = _bet_limit_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_bet_limit(), byte_size, target);
    }
  }

  // int32 player_limit = 5;
  if (this->player_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_player_limit(), target);
  }

  // int32 bet_time = 6;
  if (this->bet_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_bet_time(), target);
  }

  // int32 out_time = 7;
  if (this->out_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_out_time(), target);
  }

  // int32 state = 8;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_state(), target);
  }

  // int32 game_tax = 9;
  if (this->game_tax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_game_tax(), target);
  }

  // repeated int32 area_bet = 19;
  {
    int byte_size = _area_bet_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          19, _internal_area_bet(), byte_size, target);
    }
  }

  // repeated int32 sieves = 20;
  {
    int byte_size = _sieves_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          20, _internal_sieves(), byte_size, target);
    }
  }

  // repeated .A7U7P.A7PlayerData player_list = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, this->_internal_player_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:A7U7P.MsgA7SceneInfo)
  return target;
}

size_t MsgA7SceneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:A7U7P.MsgA7SceneInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 bet_list = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->bet_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bet_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 area_mup = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->area_mup_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _area_mup_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .A7U7P.MsgA7Record records = 3;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 bet_limit = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bet_limit_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bet_limit_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 area_bet = 19;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->area_bet_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _area_bet_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 sieves = 20;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->sieves_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sieves_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .A7U7P.A7PlayerData player_list = 22;
  total_size += 2UL * this->_internal_player_list_size();
  for (const auto& msg : this->player_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 player_limit = 5;
  if (this->player_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_limit());
  }

  // int32 bet_time = 6;
  if (this->bet_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bet_time());
  }

  // int32 out_time = 7;
  if (this->out_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_out_time());
  }

  // int32 state = 8;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // int32 game_tax = 9;
  if (this->game_tax() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_tax());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgA7SceneInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:A7U7P.MsgA7SceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgA7SceneInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgA7SceneInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:A7U7P.MsgA7SceneInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:A7U7P.MsgA7SceneInfo)
    MergeFrom(*source);
  }
}

void MsgA7SceneInfo::MergeFrom(const MsgA7SceneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:A7U7P.MsgA7SceneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bet_list_.MergeFrom(from.bet_list_);
  area_mup_.MergeFrom(from.area_mup_);
  records_.MergeFrom(from.records_);
  bet_limit_.MergeFrom(from.bet_limit_);
  area_bet_.MergeFrom(from.area_bet_);
  sieves_.MergeFrom(from.sieves_);
  player_list_.MergeFrom(from.player_list_);
  if (from.player_limit() != 0) {
    _internal_set_player_limit(from._internal_player_limit());
  }
  if (from.bet_time() != 0) {
    _internal_set_bet_time(from._internal_bet_time());
  }
  if (from.out_time() != 0) {
    _internal_set_out_time(from._internal_out_time());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.game_tax() != 0) {
    _internal_set_game_tax(from._internal_game_tax());
  }
}

void MsgA7SceneInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:A7U7P.MsgA7SceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgA7SceneInfo::CopyFrom(const MsgA7SceneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:A7U7P.MsgA7SceneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgA7SceneInfo::IsInitialized() const {
  return true;
}

void MsgA7SceneInfo::InternalSwap(MsgA7SceneInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bet_list_.InternalSwap(&other->bet_list_);
  area_mup_.InternalSwap(&other->area_mup_);
  records_.InternalSwap(&other->records_);
  bet_limit_.InternalSwap(&other->bet_limit_);
  area_bet_.InternalSwap(&other->area_bet_);
  sieves_.InternalSwap(&other->sieves_);
  player_list_.InternalSwap(&other->player_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgA7SceneInfo, game_tax_)
      + sizeof(MsgA7SceneInfo::game_tax_)
      - PROTOBUF_FIELD_OFFSET(MsgA7SceneInfo, player_limit_)>(
          reinterpret_cast<char*>(&player_limit_),
          reinterpret_cast<char*>(&other->player_limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgA7SceneInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgA7Bet::_Internal {
 public:
};

MsgA7Bet::MsgA7Bet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:A7U7P.MsgA7Bet)
}
MsgA7Bet::MsgA7Bet(const MsgA7Bet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bet_, &from.bet_,
    static_cast<size_t>(reinterpret_cast<char*>(&area_) -
    reinterpret_cast<char*>(&bet_)) + sizeof(area_));
  // @@protoc_insertion_point(copy_constructor:A7U7P.MsgA7Bet)
}

void MsgA7Bet::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bet_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&area_) -
      reinterpret_cast<char*>(&bet_)) + sizeof(area_));
}

MsgA7Bet::~MsgA7Bet() {
  // @@protoc_insertion_point(destructor:A7U7P.MsgA7Bet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgA7Bet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgA7Bet::ArenaDtor(void* object) {
  MsgA7Bet* _this = reinterpret_cast< MsgA7Bet* >(object);
  (void)_this;
}
void MsgA7Bet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgA7Bet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgA7Bet& MsgA7Bet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgA7Bet_A7U7P_2eproto.base);
  return *internal_default_instance();
}


void MsgA7Bet::Clear() {
// @@protoc_insertion_point(message_clear_start:A7U7P.MsgA7Bet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&area_) -
      reinterpret_cast<char*>(&bet_)) + sizeof(area_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgA7Bet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 bet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 area = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgA7Bet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:A7U7P.MsgA7Bet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 bet = 1;
  if (this->bet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_bet(), target);
  }

  // int32 area = 2;
  if (this->area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_area(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:A7U7P.MsgA7Bet)
  return target;
}

size_t MsgA7Bet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:A7U7P.MsgA7Bet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 bet = 1;
  if (this->bet() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_bet());
  }

  // int32 area = 2;
  if (this->area() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_area());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgA7Bet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:A7U7P.MsgA7Bet)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgA7Bet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgA7Bet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:A7U7P.MsgA7Bet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:A7U7P.MsgA7Bet)
    MergeFrom(*source);
  }
}

void MsgA7Bet::MergeFrom(const MsgA7Bet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:A7U7P.MsgA7Bet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bet() != 0) {
    _internal_set_bet(from._internal_bet());
  }
  if (from.area() != 0) {
    _internal_set_area(from._internal_area());
  }
}

void MsgA7Bet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:A7U7P.MsgA7Bet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgA7Bet::CopyFrom(const MsgA7Bet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:A7U7P.MsgA7Bet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgA7Bet::IsInitialized() const {
  return true;
}

void MsgA7Bet::InternalSwap(MsgA7Bet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgA7Bet, area_)
      + sizeof(MsgA7Bet::area_)
      - PROTOBUF_FIELD_OFFSET(MsgA7Bet, bet_)>(
          reinterpret_cast<char*>(&bet_),
          reinterpret_cast<char*>(&other->bet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgA7Bet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgA7BetResp::_Internal {
 public:
  static const ::A7U7P::A7BetInfo& bet_info(const MsgA7BetResp* msg);
};

const ::A7U7P::A7BetInfo&
MsgA7BetResp::_Internal::bet_info(const MsgA7BetResp* msg) {
  return *msg->bet_info_;
}
MsgA7BetResp::MsgA7BetResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:A7U7P.MsgA7BetResp)
}
MsgA7BetResp::MsgA7BetResp(const MsgA7BetResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bet_info()) {
    bet_info_ = new ::A7U7P::A7BetInfo(*from.bet_info_);
  } else {
    bet_info_ = nullptr;
  }
  ::memcpy(&ret_code_, &from.ret_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&chair_id_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(chair_id_));
  // @@protoc_insertion_point(copy_constructor:A7U7P.MsgA7BetResp)
}

void MsgA7BetResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgA7BetResp_A7U7P_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bet_info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&bet_info_)) + sizeof(chair_id_));
}

MsgA7BetResp::~MsgA7BetResp() {
  // @@protoc_insertion_point(destructor:A7U7P.MsgA7BetResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgA7BetResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bet_info_;
}

void MsgA7BetResp::ArenaDtor(void* object) {
  MsgA7BetResp* _this = reinterpret_cast< MsgA7BetResp* >(object);
  (void)_this;
}
void MsgA7BetResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgA7BetResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgA7BetResp& MsgA7BetResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgA7BetResp_A7U7P_2eproto.base);
  return *internal_default_instance();
}


void MsgA7BetResp::Clear() {
// @@protoc_insertion_point(message_clear_start:A7U7P.MsgA7BetResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && bet_info_ != nullptr) {
    delete bet_info_;
  }
  bet_info_ = nullptr;
  ::memset(&ret_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chair_id_) -
      reinterpret_cast<char*>(&ret_code_)) + sizeof(chair_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgA7BetResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chair_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .A7U7P.A7BetInfo bet_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bet_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgA7BetResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:A7U7P.MsgA7BetResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret_code(), target);
  }

  // int32 user_id = 2;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_user_id(), target);
  }

  // int32 chair_id = 3;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_chair_id(), target);
  }

  // .A7U7P.A7BetInfo bet_info = 4;
  if (this->has_bet_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::bet_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:A7U7P.MsgA7BetResp)
  return target;
}

size_t MsgA7BetResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:A7U7P.MsgA7BetResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .A7U7P.A7BetInfo bet_info = 4;
  if (this->has_bet_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bet_info_);
  }

  // int32 ret_code = 1;
  if (this->ret_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret_code());
  }

  // int32 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // int32 chair_id = 3;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgA7BetResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:A7U7P.MsgA7BetResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgA7BetResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgA7BetResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:A7U7P.MsgA7BetResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:A7U7P.MsgA7BetResp)
    MergeFrom(*source);
  }
}

void MsgA7BetResp::MergeFrom(const MsgA7BetResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:A7U7P.MsgA7BetResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bet_info()) {
    _internal_mutable_bet_info()->::A7U7P::A7BetInfo::MergeFrom(from._internal_bet_info());
  }
  if (from.ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
}

void MsgA7BetResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:A7U7P.MsgA7BetResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgA7BetResp::CopyFrom(const MsgA7BetResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:A7U7P.MsgA7BetResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgA7BetResp::IsInitialized() const {
  return true;
}

void MsgA7BetResp::InternalSwap(MsgA7BetResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgA7BetResp, chair_id_)
      + sizeof(MsgA7BetResp::chair_id_)
      - PROTOBUF_FIELD_OFFSET(MsgA7BetResp, bet_info_)>(
          reinterpret_cast<char*>(&bet_info_),
          reinterpret_cast<char*>(&other->bet_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgA7BetResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgA7WinMsg::_Internal {
 public:
};

MsgA7WinMsg::MsgA7WinMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:A7U7P.MsgA7WinMsg)
}
MsgA7WinMsg::MsgA7WinMsg(const MsgA7WinMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&new_gold_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(new_gold_));
  // @@protoc_insertion_point(copy_constructor:A7U7P.MsgA7WinMsg)
}

void MsgA7WinMsg::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&new_gold_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(new_gold_));
}

MsgA7WinMsg::~MsgA7WinMsg() {
  // @@protoc_insertion_point(destructor:A7U7P.MsgA7WinMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgA7WinMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgA7WinMsg::ArenaDtor(void* object) {
  MsgA7WinMsg* _this = reinterpret_cast< MsgA7WinMsg* >(object);
  (void)_this;
}
void MsgA7WinMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgA7WinMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgA7WinMsg& MsgA7WinMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgA7WinMsg_A7U7P_2eproto.base);
  return *internal_default_instance();
}


void MsgA7WinMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:A7U7P.MsgA7WinMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_gold_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(new_gold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgA7WinMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chair_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 win_gold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          win_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 new_gold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          new_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgA7WinMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:A7U7P.MsgA7WinMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // int32 chair_id = 2;
  if (this->chair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_chair_id(), target);
  }

  // int64 win_gold = 3;
  if (this->win_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_win_gold(), target);
  }

  // int64 new_gold = 4;
  if (this->new_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_new_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:A7U7P.MsgA7WinMsg)
  return target;
}

size_t MsgA7WinMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:A7U7P.MsgA7WinMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // int32 chair_id = 2;
  if (this->chair_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chair_id());
  }

  // int64 win_gold = 3;
  if (this->win_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_win_gold());
  }

  // int64 new_gold = 4;
  if (this->new_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_new_gold());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgA7WinMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:A7U7P.MsgA7WinMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgA7WinMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgA7WinMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:A7U7P.MsgA7WinMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:A7U7P.MsgA7WinMsg)
    MergeFrom(*source);
  }
}

void MsgA7WinMsg::MergeFrom(const MsgA7WinMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:A7U7P.MsgA7WinMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.chair_id() != 0) {
    _internal_set_chair_id(from._internal_chair_id());
  }
  if (from.win_gold() != 0) {
    _internal_set_win_gold(from._internal_win_gold());
  }
  if (from.new_gold() != 0) {
    _internal_set_new_gold(from._internal_new_gold());
  }
}

void MsgA7WinMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:A7U7P.MsgA7WinMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgA7WinMsg::CopyFrom(const MsgA7WinMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:A7U7P.MsgA7WinMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgA7WinMsg::IsInitialized() const {
  return true;
}

void MsgA7WinMsg::InternalSwap(MsgA7WinMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgA7WinMsg, new_gold_)
      + sizeof(MsgA7WinMsg::new_gold_)
      - PROTOBUF_FIELD_OFFSET(MsgA7WinMsg, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgA7WinMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgA7Result::_Internal {
 public:
};

MsgA7Result::MsgA7Result(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  win_index_(arena),
  sieves_(arena),
  win_msg_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:A7U7P.MsgA7Result)
}
MsgA7Result::MsgA7Result(const MsgA7Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      win_index_(from.win_index_),
      sieves_(from.sieves_),
      win_msg_(from.win_msg_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:A7U7P.MsgA7Result)
}

void MsgA7Result::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgA7Result_A7U7P_2eproto.base);
}

MsgA7Result::~MsgA7Result() {
  // @@protoc_insertion_point(destructor:A7U7P.MsgA7Result)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgA7Result::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgA7Result::ArenaDtor(void* object) {
  MsgA7Result* _this = reinterpret_cast< MsgA7Result* >(object);
  (void)_this;
}
void MsgA7Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgA7Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgA7Result& MsgA7Result::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgA7Result_A7U7P_2eproto.base);
  return *internal_default_instance();
}


void MsgA7Result::Clear() {
// @@protoc_insertion_point(message_clear_start:A7U7P.MsgA7Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  win_index_.Clear();
  sieves_.Clear();
  win_msg_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgA7Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 win_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_win_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_win_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 sieves = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_sieves(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_sieves(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .A7U7P.MsgA7WinMsg win_msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_win_msg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgA7Result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:A7U7P.MsgA7Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 win_index = 1;
  {
    int byte_size = _win_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_win_index(), byte_size, target);
    }
  }

  // repeated int32 sieves = 2;
  {
    int byte_size = _sieves_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_sieves(), byte_size, target);
    }
  }

  // repeated .A7U7P.MsgA7WinMsg win_msg = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_win_msg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_win_msg(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:A7U7P.MsgA7Result)
  return target;
}

size_t MsgA7Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:A7U7P.MsgA7Result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 win_index = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->win_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _win_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 sieves = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->sieves_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sieves_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .A7U7P.MsgA7WinMsg win_msg = 3;
  total_size += 1UL * this->_internal_win_msg_size();
  for (const auto& msg : this->win_msg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgA7Result::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:A7U7P.MsgA7Result)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgA7Result* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgA7Result>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:A7U7P.MsgA7Result)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:A7U7P.MsgA7Result)
    MergeFrom(*source);
  }
}

void MsgA7Result::MergeFrom(const MsgA7Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:A7U7P.MsgA7Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  win_index_.MergeFrom(from.win_index_);
  sieves_.MergeFrom(from.sieves_);
  win_msg_.MergeFrom(from.win_msg_);
}

void MsgA7Result::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:A7U7P.MsgA7Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgA7Result::CopyFrom(const MsgA7Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:A7U7P.MsgA7Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgA7Result::IsInitialized() const {
  return true;
}

void MsgA7Result::InternalSwap(MsgA7Result* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  win_index_.InternalSwap(&other->win_index_);
  sieves_.InternalSwap(&other->sieves_);
  win_msg_.InternalSwap(&other->win_msg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgA7Result::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgPlayerTopInfo::_Internal {
 public:
};

MsgPlayerTopInfo::MsgPlayerTopInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:A7U7P.MsgPlayerTopInfo)
}
MsgPlayerTopInfo::MsgPlayerTopInfo(const MsgPlayerTopInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&game_bet_, &from.game_bet_,
    static_cast<size_t>(reinterpret_cast<char*>(&win_count_) -
    reinterpret_cast<char*>(&game_bet_)) + sizeof(win_count_));
  // @@protoc_insertion_point(copy_constructor:A7U7P.MsgPlayerTopInfo)
}

void MsgPlayerTopInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&game_bet_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&win_count_) -
      reinterpret_cast<char*>(&game_bet_)) + sizeof(win_count_));
}

MsgPlayerTopInfo::~MsgPlayerTopInfo() {
  // @@protoc_insertion_point(destructor:A7U7P.MsgPlayerTopInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgPlayerTopInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgPlayerTopInfo::ArenaDtor(void* object) {
  MsgPlayerTopInfo* _this = reinterpret_cast< MsgPlayerTopInfo* >(object);
  (void)_this;
}
void MsgPlayerTopInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgPlayerTopInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgPlayerTopInfo& MsgPlayerTopInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgPlayerTopInfo_A7U7P_2eproto.base);
  return *internal_default_instance();
}


void MsgPlayerTopInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:A7U7P.MsgPlayerTopInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&game_bet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&win_count_) -
      reinterpret_cast<char*>(&game_bet_)) + sizeof(win_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgPlayerTopInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 game_bet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          game_bet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 win_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          win_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgPlayerTopInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:A7U7P.MsgPlayerTopInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 game_bet = 1;
  if (this->game_bet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_game_bet(), target);
  }

  // int32 win_count = 2;
  if (this->win_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_win_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:A7U7P.MsgPlayerTopInfo)
  return target;
}

size_t MsgPlayerTopInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:A7U7P.MsgPlayerTopInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 game_bet = 1;
  if (this->game_bet() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_game_bet());
  }

  // int32 win_count = 2;
  if (this->win_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_win_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgPlayerTopInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:A7U7P.MsgPlayerTopInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgPlayerTopInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgPlayerTopInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:A7U7P.MsgPlayerTopInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:A7U7P.MsgPlayerTopInfo)
    MergeFrom(*source);
  }
}

void MsgPlayerTopInfo::MergeFrom(const MsgPlayerTopInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:A7U7P.MsgPlayerTopInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.game_bet() != 0) {
    _internal_set_game_bet(from._internal_game_bet());
  }
  if (from.win_count() != 0) {
    _internal_set_win_count(from._internal_win_count());
  }
}

void MsgPlayerTopInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:A7U7P.MsgPlayerTopInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerTopInfo::CopyFrom(const MsgPlayerTopInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:A7U7P.MsgPlayerTopInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerTopInfo::IsInitialized() const {
  return true;
}

void MsgPlayerTopInfo::InternalSwap(MsgPlayerTopInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgPlayerTopInfo, win_count_)
      + sizeof(MsgPlayerTopInfo::win_count_)
      - PROTOBUF_FIELD_OFFSET(MsgPlayerTopInfo, game_bet_)>(
          reinterpret_cast<char*>(&game_bet_),
          reinterpret_cast<char*>(&other->game_bet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgPlayerTopInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgA7PlayerInfoTop::_Internal {
 public:
};

MsgA7PlayerInfoTop::MsgA7PlayerInfoTop(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  top_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:A7U7P.MsgA7PlayerInfoTop)
}
MsgA7PlayerInfoTop::MsgA7PlayerInfoTop(const MsgA7PlayerInfoTop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      top_(from.top_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:A7U7P.MsgA7PlayerInfoTop)
}

void MsgA7PlayerInfoTop::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgA7PlayerInfoTop_A7U7P_2eproto.base);
}

MsgA7PlayerInfoTop::~MsgA7PlayerInfoTop() {
  // @@protoc_insertion_point(destructor:A7U7P.MsgA7PlayerInfoTop)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgA7PlayerInfoTop::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgA7PlayerInfoTop::ArenaDtor(void* object) {
  MsgA7PlayerInfoTop* _this = reinterpret_cast< MsgA7PlayerInfoTop* >(object);
  (void)_this;
}
void MsgA7PlayerInfoTop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgA7PlayerInfoTop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgA7PlayerInfoTop& MsgA7PlayerInfoTop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgA7PlayerInfoTop_A7U7P_2eproto.base);
  return *internal_default_instance();
}


void MsgA7PlayerInfoTop::Clear() {
// @@protoc_insertion_point(message_clear_start:A7U7P.MsgA7PlayerInfoTop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  top_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgA7PlayerInfoTop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .A7U7P.MsgPlayerTopInfo top = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_top(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgA7PlayerInfoTop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:A7U7P.MsgA7PlayerInfoTop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .A7U7P.MsgPlayerTopInfo top = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_top_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_top(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:A7U7P.MsgA7PlayerInfoTop)
  return target;
}

size_t MsgA7PlayerInfoTop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:A7U7P.MsgA7PlayerInfoTop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .A7U7P.MsgPlayerTopInfo top = 1;
  total_size += 1UL * this->_internal_top_size();
  for (const auto& msg : this->top_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgA7PlayerInfoTop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:A7U7P.MsgA7PlayerInfoTop)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgA7PlayerInfoTop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgA7PlayerInfoTop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:A7U7P.MsgA7PlayerInfoTop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:A7U7P.MsgA7PlayerInfoTop)
    MergeFrom(*source);
  }
}

void MsgA7PlayerInfoTop::MergeFrom(const MsgA7PlayerInfoTop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:A7U7P.MsgA7PlayerInfoTop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  top_.MergeFrom(from.top_);
}

void MsgA7PlayerInfoTop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:A7U7P.MsgA7PlayerInfoTop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgA7PlayerInfoTop::CopyFrom(const MsgA7PlayerInfoTop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:A7U7P.MsgA7PlayerInfoTop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgA7PlayerInfoTop::IsInitialized() const {
  return true;
}

void MsgA7PlayerInfoTop::InternalSwap(MsgA7PlayerInfoTop* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  top_.InternalSwap(&other->top_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgA7PlayerInfoTop::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace A7U7P
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::A7U7P::MsgA7NotifyState* Arena::CreateMaybeMessage< ::A7U7P::MsgA7NotifyState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::A7U7P::MsgA7NotifyState >(arena);
}
template<> PROTOBUF_NOINLINE ::A7U7P::A7BetInfo* Arena::CreateMaybeMessage< ::A7U7P::A7BetInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::A7U7P::A7BetInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::A7U7P::A7PlayerData* Arena::CreateMaybeMessage< ::A7U7P::A7PlayerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::A7U7P::A7PlayerData >(arena);
}
template<> PROTOBUF_NOINLINE ::A7U7P::MsgA7Record* Arena::CreateMaybeMessage< ::A7U7P::MsgA7Record >(Arena* arena) {
  return Arena::CreateMessageInternal< ::A7U7P::MsgA7Record >(arena);
}
template<> PROTOBUF_NOINLINE ::A7U7P::MsgA7SceneInfo* Arena::CreateMaybeMessage< ::A7U7P::MsgA7SceneInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::A7U7P::MsgA7SceneInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::A7U7P::MsgA7Bet* Arena::CreateMaybeMessage< ::A7U7P::MsgA7Bet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::A7U7P::MsgA7Bet >(arena);
}
template<> PROTOBUF_NOINLINE ::A7U7P::MsgA7BetResp* Arena::CreateMaybeMessage< ::A7U7P::MsgA7BetResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::A7U7P::MsgA7BetResp >(arena);
}
template<> PROTOBUF_NOINLINE ::A7U7P::MsgA7WinMsg* Arena::CreateMaybeMessage< ::A7U7P::MsgA7WinMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::A7U7P::MsgA7WinMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::A7U7P::MsgA7Result* Arena::CreateMaybeMessage< ::A7U7P::MsgA7Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::A7U7P::MsgA7Result >(arena);
}
template<> PROTOBUF_NOINLINE ::A7U7P::MsgPlayerTopInfo* Arena::CreateMaybeMessage< ::A7U7P::MsgPlayerTopInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::A7U7P::MsgPlayerTopInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::A7U7P::MsgA7PlayerInfoTop* Arena::CreateMaybeMessage< ::A7U7P::MsgA7PlayerInfoTop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::A7U7P::MsgA7PlayerInfoTop >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
