// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BattleRoyale.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_BattleRoyale_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_BattleRoyale_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_BattleRoyale_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_BattleRoyale_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_BattleRoyale_2eproto;
namespace BattleRoyale {
class MsgBet;
class MsgBetDefaultTypeInternal;
extern MsgBetDefaultTypeInternal _MsgBet_default_instance_;
class MsgBetResp;
class MsgBetRespDefaultTypeInternal;
extern MsgBetRespDefaultTypeInternal _MsgBetResp_default_instance_;
class MsgChairBetData;
class MsgChairBetDataDefaultTypeInternal;
extern MsgChairBetDataDefaultTypeInternal _MsgChairBetData_default_instance_;
class MsgChangeBet;
class MsgChangeBetDefaultTypeInternal;
extern MsgChangeBetDefaultTypeInternal _MsgChangeBet_default_instance_;
class MsgChangeBetResp;
class MsgChangeBetRespDefaultTypeInternal;
extern MsgChangeBetRespDefaultTypeInternal _MsgChangeBetResp_default_instance_;
class MsgRecordData;
class MsgRecordDataDefaultTypeInternal;
extern MsgRecordDataDefaultTypeInternal _MsgRecordData_default_instance_;
class MsgResult;
class MsgResultDefaultTypeInternal;
extern MsgResultDefaultTypeInternal _MsgResult_default_instance_;
class MsgSceneInfo;
class MsgSceneInfoDefaultTypeInternal;
extern MsgSceneInfoDefaultTypeInternal _MsgSceneInfo_default_instance_;
class MsgWinData;
class MsgWinDataDefaultTypeInternal;
extern MsgWinDataDefaultTypeInternal _MsgWinData_default_instance_;
}  // namespace BattleRoyale
PROTOBUF_NAMESPACE_OPEN
template<> ::BattleRoyale::MsgBet* Arena::CreateMaybeMessage<::BattleRoyale::MsgBet>(Arena*);
template<> ::BattleRoyale::MsgBetResp* Arena::CreateMaybeMessage<::BattleRoyale::MsgBetResp>(Arena*);
template<> ::BattleRoyale::MsgChairBetData* Arena::CreateMaybeMessage<::BattleRoyale::MsgChairBetData>(Arena*);
template<> ::BattleRoyale::MsgChangeBet* Arena::CreateMaybeMessage<::BattleRoyale::MsgChangeBet>(Arena*);
template<> ::BattleRoyale::MsgChangeBetResp* Arena::CreateMaybeMessage<::BattleRoyale::MsgChangeBetResp>(Arena*);
template<> ::BattleRoyale::MsgRecordData* Arena::CreateMaybeMessage<::BattleRoyale::MsgRecordData>(Arena*);
template<> ::BattleRoyale::MsgResult* Arena::CreateMaybeMessage<::BattleRoyale::MsgResult>(Arena*);
template<> ::BattleRoyale::MsgSceneInfo* Arena::CreateMaybeMessage<::BattleRoyale::MsgSceneInfo>(Arena*);
template<> ::BattleRoyale::MsgWinData* Arena::CreateMaybeMessage<::BattleRoyale::MsgWinData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace BattleRoyale {

enum EMsgIDSubGame : int {
  MsgIDSubGame_Null = 0,
  MsgIDSubGame_Bet = 1,
  MsgIDSubGame_BetResp = 2,
  MsgIDSubGame_BetChange = 3,
  MsgIDSubGame_BetChangeResp = 4,
  MsgIDSubGame_GameResultResp = 7,
  MsgIDSubGame_NotifyStateResp = 8,
  EMsgIDSubGame_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EMsgIDSubGame_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EMsgIDSubGame_IsValid(int value);
constexpr EMsgIDSubGame EMsgIDSubGame_MIN = MsgIDSubGame_Null;
constexpr EMsgIDSubGame EMsgIDSubGame_MAX = MsgIDSubGame_NotifyStateResp;
constexpr int EMsgIDSubGame_ARRAYSIZE = EMsgIDSubGame_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDSubGame_descriptor();
template<typename T>
inline const std::string& EMsgIDSubGame_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EMsgIDSubGame>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EMsgIDSubGame_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EMsgIDSubGame_descriptor(), enum_t_value);
}
inline bool EMsgIDSubGame_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EMsgIDSubGame* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EMsgIDSubGame>(
    EMsgIDSubGame_descriptor(), name, value);
}
// ===================================================================

class MsgChairBetData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BattleRoyale.MsgChairBetData) */ {
 public:
  inline MsgChairBetData() : MsgChairBetData(nullptr) {}
  virtual ~MsgChairBetData();

  MsgChairBetData(const MsgChairBetData& from);
  MsgChairBetData(MsgChairBetData&& from) noexcept
    : MsgChairBetData() {
    *this = ::std::move(from);
  }

  inline MsgChairBetData& operator=(const MsgChairBetData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgChairBetData& operator=(MsgChairBetData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgChairBetData& default_instance();

  static inline const MsgChairBetData* internal_default_instance() {
    return reinterpret_cast<const MsgChairBetData*>(
               &_MsgChairBetData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgChairBetData& a, MsgChairBetData& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgChairBetData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgChairBetData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgChairBetData* New() const final {
    return CreateMaybeMessage<MsgChairBetData>(nullptr);
  }

  MsgChairBetData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgChairBetData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgChairBetData& from);
  void MergeFrom(const MsgChairBetData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgChairBetData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BattleRoyale.MsgChairBetData";
  }
  protected:
  explicit MsgChairBetData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BattleRoyale_2eproto);
    return ::descriptor_table_BattleRoyale_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoldFieldNumber = 2,
    kChairIdFieldNumber = 1,
    kAreaFieldNumber = 3,
  };
  // int64 gold = 2;
  void clear_gold();
  ::PROTOBUF_NAMESPACE_ID::int64 gold() const;
  void set_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_gold() const;
  void _internal_set_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 chair_id = 1;
  void clear_chair_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id() const;
  void set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_id() const;
  void _internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 area = 3;
  void clear_area();
  ::PROTOBUF_NAMESPACE_ID::int32 area() const;
  void set_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_area() const;
  void _internal_set_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BattleRoyale.MsgChairBetData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 gold_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 area_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BattleRoyale_2eproto;
};
// -------------------------------------------------------------------

class MsgRecordData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BattleRoyale.MsgRecordData) */ {
 public:
  inline MsgRecordData() : MsgRecordData(nullptr) {}
  virtual ~MsgRecordData();

  MsgRecordData(const MsgRecordData& from);
  MsgRecordData(MsgRecordData&& from) noexcept
    : MsgRecordData() {
    *this = ::std::move(from);
  }

  inline MsgRecordData& operator=(const MsgRecordData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgRecordData& operator=(MsgRecordData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgRecordData& default_instance();

  static inline const MsgRecordData* internal_default_instance() {
    return reinterpret_cast<const MsgRecordData*>(
               &_MsgRecordData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MsgRecordData& a, MsgRecordData& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgRecordData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgRecordData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgRecordData* New() const final {
    return CreateMaybeMessage<MsgRecordData>(nullptr);
  }

  MsgRecordData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgRecordData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgRecordData& from);
  void MergeFrom(const MsgRecordData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgRecordData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BattleRoyale.MsgRecordData";
  }
  protected:
  explicit MsgRecordData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BattleRoyale_2eproto);
    return ::descriptor_table_BattleRoyale_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAreaFieldNumber = 1,
    kSeriNoFieldNumber = 2,
  };
  // int32 area = 1;
  void clear_area();
  ::PROTOBUF_NAMESPACE_ID::int32 area() const;
  void set_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_area() const;
  void _internal_set_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 seri_no = 2;
  void clear_seri_no();
  ::PROTOBUF_NAMESPACE_ID::int32 seri_no() const;
  void set_seri_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seri_no() const;
  void _internal_set_seri_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BattleRoyale.MsgRecordData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 area_;
  ::PROTOBUF_NAMESPACE_ID::int32 seri_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BattleRoyale_2eproto;
};
// -------------------------------------------------------------------

class MsgSceneInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BattleRoyale.MsgSceneInfo) */ {
 public:
  inline MsgSceneInfo() : MsgSceneInfo(nullptr) {}
  virtual ~MsgSceneInfo();

  MsgSceneInfo(const MsgSceneInfo& from);
  MsgSceneInfo(MsgSceneInfo&& from) noexcept
    : MsgSceneInfo() {
    *this = ::std::move(from);
  }

  inline MsgSceneInfo& operator=(const MsgSceneInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgSceneInfo& operator=(MsgSceneInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgSceneInfo& default_instance();

  static inline const MsgSceneInfo* internal_default_instance() {
    return reinterpret_cast<const MsgSceneInfo*>(
               &_MsgSceneInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MsgSceneInfo& a, MsgSceneInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgSceneInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgSceneInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgSceneInfo* New() const final {
    return CreateMaybeMessage<MsgSceneInfo>(nullptr);
  }

  MsgSceneInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgSceneInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgSceneInfo& from);
  void MergeFrom(const MsgSceneInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgSceneInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BattleRoyale.MsgSceneInfo";
  }
  protected:
  explicit MsgSceneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BattleRoyale_2eproto);
    return ::descriptor_table_BattleRoyale_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBetFieldNumber = 1,
    kRecordFieldNumber = 2,
    kStateTimeFieldNumber = 4,
    kDataFieldNumber = 8,
    kBetLimitFieldNumber = 3,
    kPassTimeFieldNumber = 5,
    kStateFieldNumber = 6,
    kMaxAreaFieldNumber = 7,
  };
  // repeated int32 bet = 1;
  int bet_size() const;
  private:
  int _internal_bet_size() const;
  public:
  void clear_bet();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bet(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_bet() const;
  void _internal_add_bet(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_bet();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 bet(int index) const;
  void set_bet(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_bet(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      bet() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_bet();

  // repeated .BattleRoyale.MsgRecordData record = 2;
  int record_size() const;
  private:
  int _internal_record_size() const;
  public:
  void clear_record();
  ::BattleRoyale::MsgRecordData* mutable_record(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BattleRoyale::MsgRecordData >*
      mutable_record();
  private:
  const ::BattleRoyale::MsgRecordData& _internal_record(int index) const;
  ::BattleRoyale::MsgRecordData* _internal_add_record();
  public:
  const ::BattleRoyale::MsgRecordData& record(int index) const;
  ::BattleRoyale::MsgRecordData* add_record();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BattleRoyale::MsgRecordData >&
      record() const;

  // repeated int32 state_time = 4;
  int state_time_size() const;
  private:
  int _internal_state_time_size() const;
  public:
  void clear_state_time();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_state_time() const;
  void _internal_add_state_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_state_time();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 state_time(int index) const;
  void set_state_time(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_state_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      state_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_state_time();

  // repeated .BattleRoyale.MsgChairBetData data = 8;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::BattleRoyale::MsgChairBetData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BattleRoyale::MsgChairBetData >*
      mutable_data();
  private:
  const ::BattleRoyale::MsgChairBetData& _internal_data(int index) const;
  ::BattleRoyale::MsgChairBetData* _internal_add_data();
  public:
  const ::BattleRoyale::MsgChairBetData& data(int index) const;
  ::BattleRoyale::MsgChairBetData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BattleRoyale::MsgChairBetData >&
      data() const;

  // int32 bet_limit = 3;
  void clear_bet_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 bet_limit() const;
  void set_bet_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bet_limit() const;
  void _internal_set_bet_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pass_time = 5;
  void clear_pass_time();
  ::PROTOBUF_NAMESPACE_ID::int32 pass_time() const;
  void set_pass_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pass_time() const;
  void _internal_set_pass_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 state = 6;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_area = 7;
  void clear_max_area();
  ::PROTOBUF_NAMESPACE_ID::int32 max_area() const;
  void set_max_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_area() const;
  void _internal_set_max_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BattleRoyale.MsgSceneInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > bet_;
  mutable std::atomic<int> _bet_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BattleRoyale::MsgRecordData > record_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > state_time_;
  mutable std::atomic<int> _state_time_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BattleRoyale::MsgChairBetData > data_;
  ::PROTOBUF_NAMESPACE_ID::int32 bet_limit_;
  ::PROTOBUF_NAMESPACE_ID::int32 pass_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_area_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BattleRoyale_2eproto;
};
// -------------------------------------------------------------------

class MsgBet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BattleRoyale.MsgBet) */ {
 public:
  inline MsgBet() : MsgBet(nullptr) {}
  virtual ~MsgBet();

  MsgBet(const MsgBet& from);
  MsgBet(MsgBet&& from) noexcept
    : MsgBet() {
    *this = ::std::move(from);
  }

  inline MsgBet& operator=(const MsgBet& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgBet& operator=(MsgBet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgBet& default_instance();

  static inline const MsgBet* internal_default_instance() {
    return reinterpret_cast<const MsgBet*>(
               &_MsgBet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MsgBet& a, MsgBet& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgBet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgBet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgBet* New() const final {
    return CreateMaybeMessage<MsgBet>(nullptr);
  }

  MsgBet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgBet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgBet& from);
  void MergeFrom(const MsgBet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgBet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BattleRoyale.MsgBet";
  }
  protected:
  explicit MsgBet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BattleRoyale_2eproto);
    return ::descriptor_table_BattleRoyale_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kAreaFieldNumber = 2,
  };
  // int32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 area = 2;
  void clear_area();
  ::PROTOBUF_NAMESPACE_ID::int32 area() const;
  void set_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_area() const;
  void _internal_set_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BattleRoyale.MsgBet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 area_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BattleRoyale_2eproto;
};
// -------------------------------------------------------------------

class MsgBetResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BattleRoyale.MsgBetResp) */ {
 public:
  inline MsgBetResp() : MsgBetResp(nullptr) {}
  virtual ~MsgBetResp();

  MsgBetResp(const MsgBetResp& from);
  MsgBetResp(MsgBetResp&& from) noexcept
    : MsgBetResp() {
    *this = ::std::move(from);
  }

  inline MsgBetResp& operator=(const MsgBetResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgBetResp& operator=(MsgBetResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgBetResp& default_instance();

  static inline const MsgBetResp* internal_default_instance() {
    return reinterpret_cast<const MsgBetResp*>(
               &_MsgBetResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MsgBetResp& a, MsgBetResp& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgBetResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgBetResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgBetResp* New() const final {
    return CreateMaybeMessage<MsgBetResp>(nullptr);
  }

  MsgBetResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgBetResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgBetResp& from);
  void MergeFrom(const MsgBetResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgBetResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BattleRoyale.MsgBetResp";
  }
  protected:
  explicit MsgBetResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BattleRoyale_2eproto);
    return ::descriptor_table_BattleRoyale_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBetInfoFieldNumber = 2,
    kChairIdFieldNumber = 1,
  };
  // .BattleRoyale.MsgBet bet_info = 2;
  bool has_bet_info() const;
  private:
  bool _internal_has_bet_info() const;
  public:
  void clear_bet_info();
  const ::BattleRoyale::MsgBet& bet_info() const;
  ::BattleRoyale::MsgBet* release_bet_info();
  ::BattleRoyale::MsgBet* mutable_bet_info();
  void set_allocated_bet_info(::BattleRoyale::MsgBet* bet_info);
  private:
  const ::BattleRoyale::MsgBet& _internal_bet_info() const;
  ::BattleRoyale::MsgBet* _internal_mutable_bet_info();
  public:
  void unsafe_arena_set_allocated_bet_info(
      ::BattleRoyale::MsgBet* bet_info);
  ::BattleRoyale::MsgBet* unsafe_arena_release_bet_info();

  // int32 chair_id = 1;
  void clear_chair_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id() const;
  void set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_id() const;
  void _internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BattleRoyale.MsgBetResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::BattleRoyale::MsgBet* bet_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BattleRoyale_2eproto;
};
// -------------------------------------------------------------------

class MsgChangeBet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BattleRoyale.MsgChangeBet) */ {
 public:
  inline MsgChangeBet() : MsgChangeBet(nullptr) {}
  virtual ~MsgChangeBet();

  MsgChangeBet(const MsgChangeBet& from);
  MsgChangeBet(MsgChangeBet&& from) noexcept
    : MsgChangeBet() {
    *this = ::std::move(from);
  }

  inline MsgChangeBet& operator=(const MsgChangeBet& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgChangeBet& operator=(MsgChangeBet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgChangeBet& default_instance();

  static inline const MsgChangeBet* internal_default_instance() {
    return reinterpret_cast<const MsgChangeBet*>(
               &_MsgChangeBet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MsgChangeBet& a, MsgChangeBet& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgChangeBet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgChangeBet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgChangeBet* New() const final {
    return CreateMaybeMessage<MsgChangeBet>(nullptr);
  }

  MsgChangeBet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgChangeBet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgChangeBet& from);
  void MergeFrom(const MsgChangeBet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgChangeBet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BattleRoyale.MsgChangeBet";
  }
  protected:
  explicit MsgChangeBet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BattleRoyale_2eproto);
    return ::descriptor_table_BattleRoyale_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurAreaFieldNumber = 1,
    kNewAreaFieldNumber = 2,
    kGoldFieldNumber = 3,
  };
  // int32 cur_area = 1;
  void clear_cur_area();
  ::PROTOBUF_NAMESPACE_ID::int32 cur_area() const;
  void set_cur_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cur_area() const;
  void _internal_set_cur_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 new_area = 2;
  void clear_new_area();
  ::PROTOBUF_NAMESPACE_ID::int32 new_area() const;
  void set_new_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_new_area() const;
  void _internal_set_new_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 gold = 3;
  void clear_gold();
  ::PROTOBUF_NAMESPACE_ID::int64 gold() const;
  void set_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_gold() const;
  void _internal_set_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:BattleRoyale.MsgChangeBet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 cur_area_;
  ::PROTOBUF_NAMESPACE_ID::int32 new_area_;
  ::PROTOBUF_NAMESPACE_ID::int64 gold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BattleRoyale_2eproto;
};
// -------------------------------------------------------------------

class MsgChangeBetResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BattleRoyale.MsgChangeBetResp) */ {
 public:
  inline MsgChangeBetResp() : MsgChangeBetResp(nullptr) {}
  virtual ~MsgChangeBetResp();

  MsgChangeBetResp(const MsgChangeBetResp& from);
  MsgChangeBetResp(MsgChangeBetResp&& from) noexcept
    : MsgChangeBetResp() {
    *this = ::std::move(from);
  }

  inline MsgChangeBetResp& operator=(const MsgChangeBetResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgChangeBetResp& operator=(MsgChangeBetResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgChangeBetResp& default_instance();

  static inline const MsgChangeBetResp* internal_default_instance() {
    return reinterpret_cast<const MsgChangeBetResp*>(
               &_MsgChangeBetResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MsgChangeBetResp& a, MsgChangeBetResp& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgChangeBetResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgChangeBetResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgChangeBetResp* New() const final {
    return CreateMaybeMessage<MsgChangeBetResp>(nullptr);
  }

  MsgChangeBetResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgChangeBetResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgChangeBetResp& from);
  void MergeFrom(const MsgChangeBetResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgChangeBetResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BattleRoyale.MsgChangeBetResp";
  }
  protected:
  explicit MsgChangeBetResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BattleRoyale_2eproto);
    return ::descriptor_table_BattleRoyale_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBetInfoFieldNumber = 2,
    kChairIdFieldNumber = 1,
  };
  // .BattleRoyale.MsgChangeBet bet_info = 2;
  bool has_bet_info() const;
  private:
  bool _internal_has_bet_info() const;
  public:
  void clear_bet_info();
  const ::BattleRoyale::MsgChangeBet& bet_info() const;
  ::BattleRoyale::MsgChangeBet* release_bet_info();
  ::BattleRoyale::MsgChangeBet* mutable_bet_info();
  void set_allocated_bet_info(::BattleRoyale::MsgChangeBet* bet_info);
  private:
  const ::BattleRoyale::MsgChangeBet& _internal_bet_info() const;
  ::BattleRoyale::MsgChangeBet* _internal_mutable_bet_info();
  public:
  void unsafe_arena_set_allocated_bet_info(
      ::BattleRoyale::MsgChangeBet* bet_info);
  ::BattleRoyale::MsgChangeBet* unsafe_arena_release_bet_info();

  // int32 chair_id = 1;
  void clear_chair_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id() const;
  void set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_id() const;
  void _internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BattleRoyale.MsgChangeBetResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::BattleRoyale::MsgChangeBet* bet_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BattleRoyale_2eproto;
};
// -------------------------------------------------------------------

class MsgWinData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BattleRoyale.MsgWinData) */ {
 public:
  inline MsgWinData() : MsgWinData(nullptr) {}
  virtual ~MsgWinData();

  MsgWinData(const MsgWinData& from);
  MsgWinData(MsgWinData&& from) noexcept
    : MsgWinData() {
    *this = ::std::move(from);
  }

  inline MsgWinData& operator=(const MsgWinData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgWinData& operator=(MsgWinData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgWinData& default_instance();

  static inline const MsgWinData* internal_default_instance() {
    return reinterpret_cast<const MsgWinData*>(
               &_MsgWinData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MsgWinData& a, MsgWinData& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgWinData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgWinData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgWinData* New() const final {
    return CreateMaybeMessage<MsgWinData>(nullptr);
  }

  MsgWinData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgWinData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgWinData& from);
  void MergeFrom(const MsgWinData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgWinData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BattleRoyale.MsgWinData";
  }
  protected:
  explicit MsgWinData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BattleRoyale_2eproto);
    return ::descriptor_table_BattleRoyale_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoldFieldNumber = 2,
    kChairIdFieldNumber = 1,
  };
  // int64 gold = 2;
  void clear_gold();
  ::PROTOBUF_NAMESPACE_ID::int64 gold() const;
  void set_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_gold() const;
  void _internal_set_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 chair_id = 1;
  void clear_chair_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id() const;
  void set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chair_id() const;
  void _internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BattleRoyale.MsgWinData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 gold_;
  ::PROTOBUF_NAMESPACE_ID::int32 chair_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BattleRoyale_2eproto;
};
// -------------------------------------------------------------------

class MsgResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BattleRoyale.MsgResult) */ {
 public:
  inline MsgResult() : MsgResult(nullptr) {}
  virtual ~MsgResult();

  MsgResult(const MsgResult& from);
  MsgResult(MsgResult&& from) noexcept
    : MsgResult() {
    *this = ::std::move(from);
  }

  inline MsgResult& operator=(const MsgResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgResult& operator=(MsgResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgResult& default_instance();

  static inline const MsgResult* internal_default_instance() {
    return reinterpret_cast<const MsgResult*>(
               &_MsgResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MsgResult& a, MsgResult& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgResult* New() const final {
    return CreateMaybeMessage<MsgResult>(nullptr);
  }

  MsgResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgResult& from);
  void MergeFrom(const MsgResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BattleRoyale.MsgResult";
  }
  protected:
  explicit MsgResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BattleRoyale_2eproto);
    return ::descriptor_table_BattleRoyale_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 2,
    kAreaFieldNumber = 1,
  };
  // repeated .BattleRoyale.MsgWinData results = 2;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::BattleRoyale::MsgWinData* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BattleRoyale::MsgWinData >*
      mutable_results();
  private:
  const ::BattleRoyale::MsgWinData& _internal_results(int index) const;
  ::BattleRoyale::MsgWinData* _internal_add_results();
  public:
  const ::BattleRoyale::MsgWinData& results(int index) const;
  ::BattleRoyale::MsgWinData* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BattleRoyale::MsgWinData >&
      results() const;

  // int32 area = 1;
  void clear_area();
  ::PROTOBUF_NAMESPACE_ID::int32 area() const;
  void set_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_area() const;
  void _internal_set_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BattleRoyale.MsgResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BattleRoyale::MsgWinData > results_;
  ::PROTOBUF_NAMESPACE_ID::int32 area_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BattleRoyale_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgChairBetData

// int32 chair_id = 1;
inline void MsgChairBetData::clear_chair_id() {
  chair_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChairBetData::_internal_chair_id() const {
  return chair_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChairBetData::chair_id() const {
  // @@protoc_insertion_point(field_get:BattleRoyale.MsgChairBetData.chair_id)
  return _internal_chair_id();
}
inline void MsgChairBetData::_internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_id_ = value;
}
inline void MsgChairBetData::set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_id(value);
  // @@protoc_insertion_point(field_set:BattleRoyale.MsgChairBetData.chair_id)
}

// int64 gold = 2;
inline void MsgChairBetData::clear_gold() {
  gold_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgChairBetData::_internal_gold() const {
  return gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgChairBetData::gold() const {
  // @@protoc_insertion_point(field_get:BattleRoyale.MsgChairBetData.gold)
  return _internal_gold();
}
inline void MsgChairBetData::_internal_set_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  gold_ = value;
}
inline void MsgChairBetData::set_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:BattleRoyale.MsgChairBetData.gold)
}

// int32 area = 3;
inline void MsgChairBetData::clear_area() {
  area_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChairBetData::_internal_area() const {
  return area_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChairBetData::area() const {
  // @@protoc_insertion_point(field_get:BattleRoyale.MsgChairBetData.area)
  return _internal_area();
}
inline void MsgChairBetData::_internal_set_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  area_ = value;
}
inline void MsgChairBetData::set_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:BattleRoyale.MsgChairBetData.area)
}

// -------------------------------------------------------------------

// MsgRecordData

// int32 area = 1;
inline void MsgRecordData::clear_area() {
  area_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRecordData::_internal_area() const {
  return area_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRecordData::area() const {
  // @@protoc_insertion_point(field_get:BattleRoyale.MsgRecordData.area)
  return _internal_area();
}
inline void MsgRecordData::_internal_set_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  area_ = value;
}
inline void MsgRecordData::set_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:BattleRoyale.MsgRecordData.area)
}

// int32 seri_no = 2;
inline void MsgRecordData::clear_seri_no() {
  seri_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRecordData::_internal_seri_no() const {
  return seri_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRecordData::seri_no() const {
  // @@protoc_insertion_point(field_get:BattleRoyale.MsgRecordData.seri_no)
  return _internal_seri_no();
}
inline void MsgRecordData::_internal_set_seri_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seri_no_ = value;
}
inline void MsgRecordData::set_seri_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seri_no(value);
  // @@protoc_insertion_point(field_set:BattleRoyale.MsgRecordData.seri_no)
}

// -------------------------------------------------------------------

// MsgSceneInfo

// repeated int32 bet = 1;
inline int MsgSceneInfo::_internal_bet_size() const {
  return bet_.size();
}
inline int MsgSceneInfo::bet_size() const {
  return _internal_bet_size();
}
inline void MsgSceneInfo::clear_bet() {
  bet_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSceneInfo::_internal_bet(int index) const {
  return bet_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSceneInfo::bet(int index) const {
  // @@protoc_insertion_point(field_get:BattleRoyale.MsgSceneInfo.bet)
  return _internal_bet(index);
}
inline void MsgSceneInfo::set_bet(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  bet_.Set(index, value);
  // @@protoc_insertion_point(field_set:BattleRoyale.MsgSceneInfo.bet)
}
inline void MsgSceneInfo::_internal_add_bet(::PROTOBUF_NAMESPACE_ID::int32 value) {
  bet_.Add(value);
}
inline void MsgSceneInfo::add_bet(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_bet(value);
  // @@protoc_insertion_point(field_add:BattleRoyale.MsgSceneInfo.bet)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MsgSceneInfo::_internal_bet() const {
  return bet_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MsgSceneInfo::bet() const {
  // @@protoc_insertion_point(field_list:BattleRoyale.MsgSceneInfo.bet)
  return _internal_bet();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MsgSceneInfo::_internal_mutable_bet() {
  return &bet_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MsgSceneInfo::mutable_bet() {
  // @@protoc_insertion_point(field_mutable_list:BattleRoyale.MsgSceneInfo.bet)
  return _internal_mutable_bet();
}

// repeated .BattleRoyale.MsgRecordData record = 2;
inline int MsgSceneInfo::_internal_record_size() const {
  return record_.size();
}
inline int MsgSceneInfo::record_size() const {
  return _internal_record_size();
}
inline void MsgSceneInfo::clear_record() {
  record_.Clear();
}
inline ::BattleRoyale::MsgRecordData* MsgSceneInfo::mutable_record(int index) {
  // @@protoc_insertion_point(field_mutable:BattleRoyale.MsgSceneInfo.record)
  return record_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BattleRoyale::MsgRecordData >*
MsgSceneInfo::mutable_record() {
  // @@protoc_insertion_point(field_mutable_list:BattleRoyale.MsgSceneInfo.record)
  return &record_;
}
inline const ::BattleRoyale::MsgRecordData& MsgSceneInfo::_internal_record(int index) const {
  return record_.Get(index);
}
inline const ::BattleRoyale::MsgRecordData& MsgSceneInfo::record(int index) const {
  // @@protoc_insertion_point(field_get:BattleRoyale.MsgSceneInfo.record)
  return _internal_record(index);
}
inline ::BattleRoyale::MsgRecordData* MsgSceneInfo::_internal_add_record() {
  return record_.Add();
}
inline ::BattleRoyale::MsgRecordData* MsgSceneInfo::add_record() {
  // @@protoc_insertion_point(field_add:BattleRoyale.MsgSceneInfo.record)
  return _internal_add_record();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BattleRoyale::MsgRecordData >&
MsgSceneInfo::record() const {
  // @@protoc_insertion_point(field_list:BattleRoyale.MsgSceneInfo.record)
  return record_;
}

// int32 bet_limit = 3;
inline void MsgSceneInfo::clear_bet_limit() {
  bet_limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSceneInfo::_internal_bet_limit() const {
  return bet_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSceneInfo::bet_limit() const {
  // @@protoc_insertion_point(field_get:BattleRoyale.MsgSceneInfo.bet_limit)
  return _internal_bet_limit();
}
inline void MsgSceneInfo::_internal_set_bet_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bet_limit_ = value;
}
inline void MsgSceneInfo::set_bet_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bet_limit(value);
  // @@protoc_insertion_point(field_set:BattleRoyale.MsgSceneInfo.bet_limit)
}

// repeated int32 state_time = 4;
inline int MsgSceneInfo::_internal_state_time_size() const {
  return state_time_.size();
}
inline int MsgSceneInfo::state_time_size() const {
  return _internal_state_time_size();
}
inline void MsgSceneInfo::clear_state_time() {
  state_time_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSceneInfo::_internal_state_time(int index) const {
  return state_time_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSceneInfo::state_time(int index) const {
  // @@protoc_insertion_point(field_get:BattleRoyale.MsgSceneInfo.state_time)
  return _internal_state_time(index);
}
inline void MsgSceneInfo::set_state_time(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  state_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:BattleRoyale.MsgSceneInfo.state_time)
}
inline void MsgSceneInfo::_internal_add_state_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  state_time_.Add(value);
}
inline void MsgSceneInfo::add_state_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_state_time(value);
  // @@protoc_insertion_point(field_add:BattleRoyale.MsgSceneInfo.state_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MsgSceneInfo::_internal_state_time() const {
  return state_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MsgSceneInfo::state_time() const {
  // @@protoc_insertion_point(field_list:BattleRoyale.MsgSceneInfo.state_time)
  return _internal_state_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MsgSceneInfo::_internal_mutable_state_time() {
  return &state_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MsgSceneInfo::mutable_state_time() {
  // @@protoc_insertion_point(field_mutable_list:BattleRoyale.MsgSceneInfo.state_time)
  return _internal_mutable_state_time();
}

// int32 pass_time = 5;
inline void MsgSceneInfo::clear_pass_time() {
  pass_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSceneInfo::_internal_pass_time() const {
  return pass_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSceneInfo::pass_time() const {
  // @@protoc_insertion_point(field_get:BattleRoyale.MsgSceneInfo.pass_time)
  return _internal_pass_time();
}
inline void MsgSceneInfo::_internal_set_pass_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pass_time_ = value;
}
inline void MsgSceneInfo::set_pass_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pass_time(value);
  // @@protoc_insertion_point(field_set:BattleRoyale.MsgSceneInfo.pass_time)
}

// int32 state = 6;
inline void MsgSceneInfo::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSceneInfo::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSceneInfo::state() const {
  // @@protoc_insertion_point(field_get:BattleRoyale.MsgSceneInfo.state)
  return _internal_state();
}
inline void MsgSceneInfo::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void MsgSceneInfo::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:BattleRoyale.MsgSceneInfo.state)
}

// int32 max_area = 7;
inline void MsgSceneInfo::clear_max_area() {
  max_area_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSceneInfo::_internal_max_area() const {
  return max_area_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSceneInfo::max_area() const {
  // @@protoc_insertion_point(field_get:BattleRoyale.MsgSceneInfo.max_area)
  return _internal_max_area();
}
inline void MsgSceneInfo::_internal_set_max_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_area_ = value;
}
inline void MsgSceneInfo::set_max_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_area(value);
  // @@protoc_insertion_point(field_set:BattleRoyale.MsgSceneInfo.max_area)
}

// repeated .BattleRoyale.MsgChairBetData data = 8;
inline int MsgSceneInfo::_internal_data_size() const {
  return data_.size();
}
inline int MsgSceneInfo::data_size() const {
  return _internal_data_size();
}
inline void MsgSceneInfo::clear_data() {
  data_.Clear();
}
inline ::BattleRoyale::MsgChairBetData* MsgSceneInfo::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:BattleRoyale.MsgSceneInfo.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BattleRoyale::MsgChairBetData >*
MsgSceneInfo::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:BattleRoyale.MsgSceneInfo.data)
  return &data_;
}
inline const ::BattleRoyale::MsgChairBetData& MsgSceneInfo::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::BattleRoyale::MsgChairBetData& MsgSceneInfo::data(int index) const {
  // @@protoc_insertion_point(field_get:BattleRoyale.MsgSceneInfo.data)
  return _internal_data(index);
}
inline ::BattleRoyale::MsgChairBetData* MsgSceneInfo::_internal_add_data() {
  return data_.Add();
}
inline ::BattleRoyale::MsgChairBetData* MsgSceneInfo::add_data() {
  // @@protoc_insertion_point(field_add:BattleRoyale.MsgSceneInfo.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BattleRoyale::MsgChairBetData >&
MsgSceneInfo::data() const {
  // @@protoc_insertion_point(field_list:BattleRoyale.MsgSceneInfo.data)
  return data_;
}

// -------------------------------------------------------------------

// MsgBet

// int32 index = 1;
inline void MsgBet::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgBet::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgBet::index() const {
  // @@protoc_insertion_point(field_get:BattleRoyale.MsgBet.index)
  return _internal_index();
}
inline void MsgBet::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void MsgBet::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:BattleRoyale.MsgBet.index)
}

// int32 area = 2;
inline void MsgBet::clear_area() {
  area_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgBet::_internal_area() const {
  return area_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgBet::area() const {
  // @@protoc_insertion_point(field_get:BattleRoyale.MsgBet.area)
  return _internal_area();
}
inline void MsgBet::_internal_set_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  area_ = value;
}
inline void MsgBet::set_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:BattleRoyale.MsgBet.area)
}

// -------------------------------------------------------------------

// MsgBetResp

// int32 chair_id = 1;
inline void MsgBetResp::clear_chair_id() {
  chair_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgBetResp::_internal_chair_id() const {
  return chair_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgBetResp::chair_id() const {
  // @@protoc_insertion_point(field_get:BattleRoyale.MsgBetResp.chair_id)
  return _internal_chair_id();
}
inline void MsgBetResp::_internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_id_ = value;
}
inline void MsgBetResp::set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_id(value);
  // @@protoc_insertion_point(field_set:BattleRoyale.MsgBetResp.chair_id)
}

// .BattleRoyale.MsgBet bet_info = 2;
inline bool MsgBetResp::_internal_has_bet_info() const {
  return this != internal_default_instance() && bet_info_ != nullptr;
}
inline bool MsgBetResp::has_bet_info() const {
  return _internal_has_bet_info();
}
inline void MsgBetResp::clear_bet_info() {
  if (GetArena() == nullptr && bet_info_ != nullptr) {
    delete bet_info_;
  }
  bet_info_ = nullptr;
}
inline const ::BattleRoyale::MsgBet& MsgBetResp::_internal_bet_info() const {
  const ::BattleRoyale::MsgBet* p = bet_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::BattleRoyale::MsgBet&>(
      ::BattleRoyale::_MsgBet_default_instance_);
}
inline const ::BattleRoyale::MsgBet& MsgBetResp::bet_info() const {
  // @@protoc_insertion_point(field_get:BattleRoyale.MsgBetResp.bet_info)
  return _internal_bet_info();
}
inline void MsgBetResp::unsafe_arena_set_allocated_bet_info(
    ::BattleRoyale::MsgBet* bet_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bet_info_);
  }
  bet_info_ = bet_info;
  if (bet_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BattleRoyale.MsgBetResp.bet_info)
}
inline ::BattleRoyale::MsgBet* MsgBetResp::release_bet_info() {
  
  ::BattleRoyale::MsgBet* temp = bet_info_;
  bet_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BattleRoyale::MsgBet* MsgBetResp::unsafe_arena_release_bet_info() {
  // @@protoc_insertion_point(field_release:BattleRoyale.MsgBetResp.bet_info)
  
  ::BattleRoyale::MsgBet* temp = bet_info_;
  bet_info_ = nullptr;
  return temp;
}
inline ::BattleRoyale::MsgBet* MsgBetResp::_internal_mutable_bet_info() {
  
  if (bet_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::BattleRoyale::MsgBet>(GetArena());
    bet_info_ = p;
  }
  return bet_info_;
}
inline ::BattleRoyale::MsgBet* MsgBetResp::mutable_bet_info() {
  // @@protoc_insertion_point(field_mutable:BattleRoyale.MsgBetResp.bet_info)
  return _internal_mutable_bet_info();
}
inline void MsgBetResp::set_allocated_bet_info(::BattleRoyale::MsgBet* bet_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bet_info_;
  }
  if (bet_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bet_info);
    if (message_arena != submessage_arena) {
      bet_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bet_info, submessage_arena);
    }
    
  } else {
    
  }
  bet_info_ = bet_info;
  // @@protoc_insertion_point(field_set_allocated:BattleRoyale.MsgBetResp.bet_info)
}

// -------------------------------------------------------------------

// MsgChangeBet

// int32 cur_area = 1;
inline void MsgChangeBet::clear_cur_area() {
  cur_area_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChangeBet::_internal_cur_area() const {
  return cur_area_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChangeBet::cur_area() const {
  // @@protoc_insertion_point(field_get:BattleRoyale.MsgChangeBet.cur_area)
  return _internal_cur_area();
}
inline void MsgChangeBet::_internal_set_cur_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cur_area_ = value;
}
inline void MsgChangeBet::set_cur_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cur_area(value);
  // @@protoc_insertion_point(field_set:BattleRoyale.MsgChangeBet.cur_area)
}

// int32 new_area = 2;
inline void MsgChangeBet::clear_new_area() {
  new_area_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChangeBet::_internal_new_area() const {
  return new_area_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChangeBet::new_area() const {
  // @@protoc_insertion_point(field_get:BattleRoyale.MsgChangeBet.new_area)
  return _internal_new_area();
}
inline void MsgChangeBet::_internal_set_new_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  new_area_ = value;
}
inline void MsgChangeBet::set_new_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_new_area(value);
  // @@protoc_insertion_point(field_set:BattleRoyale.MsgChangeBet.new_area)
}

// int64 gold = 3;
inline void MsgChangeBet::clear_gold() {
  gold_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgChangeBet::_internal_gold() const {
  return gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgChangeBet::gold() const {
  // @@protoc_insertion_point(field_get:BattleRoyale.MsgChangeBet.gold)
  return _internal_gold();
}
inline void MsgChangeBet::_internal_set_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  gold_ = value;
}
inline void MsgChangeBet::set_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:BattleRoyale.MsgChangeBet.gold)
}

// -------------------------------------------------------------------

// MsgChangeBetResp

// int32 chair_id = 1;
inline void MsgChangeBetResp::clear_chair_id() {
  chair_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChangeBetResp::_internal_chair_id() const {
  return chair_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgChangeBetResp::chair_id() const {
  // @@protoc_insertion_point(field_get:BattleRoyale.MsgChangeBetResp.chair_id)
  return _internal_chair_id();
}
inline void MsgChangeBetResp::_internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_id_ = value;
}
inline void MsgChangeBetResp::set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_id(value);
  // @@protoc_insertion_point(field_set:BattleRoyale.MsgChangeBetResp.chair_id)
}

// .BattleRoyale.MsgChangeBet bet_info = 2;
inline bool MsgChangeBetResp::_internal_has_bet_info() const {
  return this != internal_default_instance() && bet_info_ != nullptr;
}
inline bool MsgChangeBetResp::has_bet_info() const {
  return _internal_has_bet_info();
}
inline void MsgChangeBetResp::clear_bet_info() {
  if (GetArena() == nullptr && bet_info_ != nullptr) {
    delete bet_info_;
  }
  bet_info_ = nullptr;
}
inline const ::BattleRoyale::MsgChangeBet& MsgChangeBetResp::_internal_bet_info() const {
  const ::BattleRoyale::MsgChangeBet* p = bet_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::BattleRoyale::MsgChangeBet&>(
      ::BattleRoyale::_MsgChangeBet_default_instance_);
}
inline const ::BattleRoyale::MsgChangeBet& MsgChangeBetResp::bet_info() const {
  // @@protoc_insertion_point(field_get:BattleRoyale.MsgChangeBetResp.bet_info)
  return _internal_bet_info();
}
inline void MsgChangeBetResp::unsafe_arena_set_allocated_bet_info(
    ::BattleRoyale::MsgChangeBet* bet_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bet_info_);
  }
  bet_info_ = bet_info;
  if (bet_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BattleRoyale.MsgChangeBetResp.bet_info)
}
inline ::BattleRoyale::MsgChangeBet* MsgChangeBetResp::release_bet_info() {
  
  ::BattleRoyale::MsgChangeBet* temp = bet_info_;
  bet_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BattleRoyale::MsgChangeBet* MsgChangeBetResp::unsafe_arena_release_bet_info() {
  // @@protoc_insertion_point(field_release:BattleRoyale.MsgChangeBetResp.bet_info)
  
  ::BattleRoyale::MsgChangeBet* temp = bet_info_;
  bet_info_ = nullptr;
  return temp;
}
inline ::BattleRoyale::MsgChangeBet* MsgChangeBetResp::_internal_mutable_bet_info() {
  
  if (bet_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::BattleRoyale::MsgChangeBet>(GetArena());
    bet_info_ = p;
  }
  return bet_info_;
}
inline ::BattleRoyale::MsgChangeBet* MsgChangeBetResp::mutable_bet_info() {
  // @@protoc_insertion_point(field_mutable:BattleRoyale.MsgChangeBetResp.bet_info)
  return _internal_mutable_bet_info();
}
inline void MsgChangeBetResp::set_allocated_bet_info(::BattleRoyale::MsgChangeBet* bet_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bet_info_;
  }
  if (bet_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bet_info);
    if (message_arena != submessage_arena) {
      bet_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bet_info, submessage_arena);
    }
    
  } else {
    
  }
  bet_info_ = bet_info;
  // @@protoc_insertion_point(field_set_allocated:BattleRoyale.MsgChangeBetResp.bet_info)
}

// -------------------------------------------------------------------

// MsgWinData

// int32 chair_id = 1;
inline void MsgWinData::clear_chair_id() {
  chair_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgWinData::_internal_chair_id() const {
  return chair_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgWinData::chair_id() const {
  // @@protoc_insertion_point(field_get:BattleRoyale.MsgWinData.chair_id)
  return _internal_chair_id();
}
inline void MsgWinData::_internal_set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chair_id_ = value;
}
inline void MsgWinData::set_chair_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chair_id(value);
  // @@protoc_insertion_point(field_set:BattleRoyale.MsgWinData.chair_id)
}

// int64 gold = 2;
inline void MsgWinData::clear_gold() {
  gold_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgWinData::_internal_gold() const {
  return gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgWinData::gold() const {
  // @@protoc_insertion_point(field_get:BattleRoyale.MsgWinData.gold)
  return _internal_gold();
}
inline void MsgWinData::_internal_set_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  gold_ = value;
}
inline void MsgWinData::set_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:BattleRoyale.MsgWinData.gold)
}

// -------------------------------------------------------------------

// MsgResult

// int32 area = 1;
inline void MsgResult::clear_area() {
  area_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgResult::_internal_area() const {
  return area_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgResult::area() const {
  // @@protoc_insertion_point(field_get:BattleRoyale.MsgResult.area)
  return _internal_area();
}
inline void MsgResult::_internal_set_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  area_ = value;
}
inline void MsgResult::set_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:BattleRoyale.MsgResult.area)
}

// repeated .BattleRoyale.MsgWinData results = 2;
inline int MsgResult::_internal_results_size() const {
  return results_.size();
}
inline int MsgResult::results_size() const {
  return _internal_results_size();
}
inline void MsgResult::clear_results() {
  results_.Clear();
}
inline ::BattleRoyale::MsgWinData* MsgResult::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:BattleRoyale.MsgResult.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BattleRoyale::MsgWinData >*
MsgResult::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:BattleRoyale.MsgResult.results)
  return &results_;
}
inline const ::BattleRoyale::MsgWinData& MsgResult::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::BattleRoyale::MsgWinData& MsgResult::results(int index) const {
  // @@protoc_insertion_point(field_get:BattleRoyale.MsgResult.results)
  return _internal_results(index);
}
inline ::BattleRoyale::MsgWinData* MsgResult::_internal_add_results() {
  return results_.Add();
}
inline ::BattleRoyale::MsgWinData* MsgResult::add_results() {
  // @@protoc_insertion_point(field_add:BattleRoyale.MsgResult.results)
  return _internal_add_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BattleRoyale::MsgWinData >&
MsgResult::results() const {
  // @@protoc_insertion_point(field_list:BattleRoyale.MsgResult.results)
  return results_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace BattleRoyale

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::BattleRoyale::EMsgIDSubGame> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BattleRoyale::EMsgIDSubGame>() {
  return ::BattleRoyale::EMsgIDSubGame_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_BattleRoyale_2eproto
